
lora_tester_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ba74  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003114  0801bc44  0801bc44  0001cc44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ed58  0801ed58  00020220  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801ed58  0801ed58  0001fd58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ed60  0801ed60  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ed60  0801ed60  0001fd60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801ed64  0801ed64  0001fd64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e0  20000000  0801ed68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000e0  0801ee48  000200e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000180  0801eee8  00020180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000ac90  20000220  0801ef88  00020220  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000aeb0  0801ef88  00020eb0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004651f  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009d10  00000000  00000000  0006676f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003960  00000000  00000000  00070480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002c8c  00000000  00000000  00073de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000394ea  00000000  00000000  00076a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000507b1  00000000  00000000  000aff56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012d5a1  00000000  00000000  00100707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0022dca8  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000f83c  00000000  00000000  0022dcec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000082  00000000  00000000  0023d528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801bc2c 	.word	0x0801bc2c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	0801bc2c 	.word	0x0801bc2c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <CommandSender_Send>:
#include <stddef.h>
#include <string.h>
#include <stdio.h>

void CommandSender_Send(const char* command)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	@ 0x58
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    if (command != NULL) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d051      	beq.n	80006be <CommandSender_Send+0xb2>
        int len = strlen(command);
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff fe02 	bl	8000224 <strlen>
 8000620:	4603      	mov	r3, r0
 8000622:	653b      	str	r3, [r7, #80]	@ 0x50
        
        // 전송할 명령어를 명확히 로깅 (특수 문자도 표시)
        LOG_INFO("📤 TX: '%s' (%d bytes)", command, len);
 8000624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	4929      	ldr	r1, [pc, #164]	@ (80006d0 <CommandSender_Send+0xc4>)
 800062a:	2001      	movs	r0, #1
 800062c:	f004 fb08 	bl	8004c40 <LOGGER_SendFormatted>
        
        // 헥스 덤프도 표시 (처음 20바이트까지)
        if (len > 0) {
 8000630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000632:	2b00      	cmp	r3, #0
 8000634:	dd2c      	ble.n	8000690 <CommandSender_Send+0x84>
            char hex_dump[64] = {0};
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	2240      	movs	r2, #64	@ 0x40
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f01a fefa 	bl	801b438 <memset>
            int dump_len = (len > 20) ? 20 : len;
 8000644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000646:	2b14      	cmp	r3, #20
 8000648:	bfa8      	it	ge
 800064a:	2314      	movge	r3, #20
 800064c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (int i = 0; i < dump_len; i++) {
 800064e:	2300      	movs	r3, #0
 8000650:	657b      	str	r3, [r7, #84]	@ 0x54
 8000652:	e012      	b.n	800067a <CommandSender_Send+0x6e>
                snprintf(hex_dump + i*3, 4, "%02X ", (unsigned char)command[i]);
 8000654:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000656:	4613      	mov	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	461a      	mov	r2, r3
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	1898      	adds	r0, r3, r2
 8000664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4a19      	ldr	r2, [pc, #100]	@ (80006d4 <CommandSender_Send+0xc8>)
 800066e:	2104      	movs	r1, #4
 8000670:	f01a fe3e 	bl	801b2f0 <sniprintf>
            for (int i = 0; i < dump_len; i++) {
 8000674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000676:	3301      	adds	r3, #1
 8000678:	657b      	str	r3, [r7, #84]	@ 0x54
 800067a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800067c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800067e:	429a      	cmp	r2, r3
 8000680:	dbe8      	blt.n	8000654 <CommandSender_Send+0x48>
            }
            LOG_DEBUG("[CommandSender] Hex: %s", hex_dump);
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	461a      	mov	r2, r3
 8000688:	4913      	ldr	r1, [pc, #76]	@ (80006d8 <CommandSender_Send+0xcc>)
 800068a:	2000      	movs	r0, #0
 800068c:	f004 fad8 	bl	8004c40 <LOGGER_SendFormatted>
        }
        
        UartStatus status = UART_Send(command);
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f004 fba9 	bl	8004de8 <UART_Send>
 8000696:	4603      	mov	r3, r0
 8000698:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        
        if (status == UART_STATUS_OK) {
 800069c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d104      	bne.n	80006ae <CommandSender_Send+0xa2>
            LOG_DEBUG("[CommandSender] ✓ Command sent successfully");
 80006a4:	490d      	ldr	r1, [pc, #52]	@ (80006dc <CommandSender_Send+0xd0>)
 80006a6:	2000      	movs	r0, #0
 80006a8:	f004 faca 	bl	8004c40 <LOGGER_SendFormatted>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
        }
    } else {
        LOG_WARN("[CommandSender] Attempted to send NULL command");
    }
}
 80006ac:	e00b      	b.n	80006c6 <CommandSender_Send+0xba>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
 80006ae:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006b2:	461a      	mov	r2, r3
 80006b4:	490a      	ldr	r1, [pc, #40]	@ (80006e0 <CommandSender_Send+0xd4>)
 80006b6:	2003      	movs	r0, #3
 80006b8:	f004 fac2 	bl	8004c40 <LOGGER_SendFormatted>
}
 80006bc:	e003      	b.n	80006c6 <CommandSender_Send+0xba>
        LOG_WARN("[CommandSender] Attempted to send NULL command");
 80006be:	4909      	ldr	r1, [pc, #36]	@ (80006e4 <CommandSender_Send+0xd8>)
 80006c0:	2002      	movs	r0, #2
 80006c2:	f004 fabd 	bl	8004c40 <LOGGER_SendFormatted>
}
 80006c6:	bf00      	nop
 80006c8:	3758      	adds	r7, #88	@ 0x58
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	0801bc44 	.word	0x0801bc44
 80006d4:	0801bc60 	.word	0x0801bc60
 80006d8:	0801bc68 	.word	0x0801bc68
 80006dc:	0801bc80 	.word	0x0801bc80
 80006e0:	0801bcb0 	.word	0x0801bcb0
 80006e4:	0801bce8 	.word	0x0801bce8

080006e8 <get_state_name>:
};

const int LORA_DEFAULT_INIT_COMMANDS_COUNT = sizeof(LORA_DEFAULT_INIT_COMMANDS) / sizeof(LORA_DEFAULT_INIT_COMMANDS[0]);

// 상태 이름을 문자열로 변환하는 헬퍼 함수
static const char* get_state_name(LoraState state) {
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
    switch(state) {
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b0a      	cmp	r3, #10
 80006f6:	d82f      	bhi.n	8000758 <get_state_name+0x70>
 80006f8:	a201      	add	r2, pc, #4	@ (adr r2, 8000700 <get_state_name+0x18>)
 80006fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fe:	bf00      	nop
 8000700:	0800072d 	.word	0x0800072d
 8000704:	08000731 	.word	0x08000731
 8000708:	08000735 	.word	0x08000735
 800070c:	08000739 	.word	0x08000739
 8000710:	0800073d 	.word	0x0800073d
 8000714:	08000741 	.word	0x08000741
 8000718:	08000745 	.word	0x08000745
 800071c:	08000749 	.word	0x08000749
 8000720:	0800074d 	.word	0x0800074d
 8000724:	08000751 	.word	0x08000751
 8000728:	08000755 	.word	0x08000755
        case LORA_STATE_INIT: return "INIT";
 800072c:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <get_state_name+0x80>)
 800072e:	e014      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_CMD: return "SEND_CMD";
 8000730:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <get_state_name+0x84>)
 8000732:	e012      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_OK: return "WAIT_OK";
 8000734:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <get_state_name+0x88>)
 8000736:	e010      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_JOIN: return "SEND_JOIN";
 8000738:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <get_state_name+0x8c>)
 800073a:	e00e      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_JOIN_OK: return "WAIT_JOIN_OK";
 800073c:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <get_state_name+0x90>)
 800073e:	e00c      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_PERIODIC: return "SEND_PERIODIC";
 8000740:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <get_state_name+0x94>)
 8000742:	e00a      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_SEND_RESPONSE: return "WAIT_SEND_RESPONSE";
 8000744:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <get_state_name+0x98>)
 8000746:	e008      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_SEND_INTERVAL: return "WAIT_SEND_INTERVAL";
 8000748:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <get_state_name+0x9c>)
 800074a:	e006      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_JOIN_RETRY: return "JOIN_RETRY";
 800074c:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <get_state_name+0xa0>)
 800074e:	e004      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_DONE: return "DONE";
 8000750:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <get_state_name+0xa4>)
 8000752:	e002      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_ERROR: return "ERROR";
 8000754:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <get_state_name+0xa8>)
 8000756:	e000      	b.n	800075a <get_state_name+0x72>
        default: return "UNKNOWN";
 8000758:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <get_state_name+0xac>)
    }
}
 800075a:	4618      	mov	r0, r3
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	0801bd54 	.word	0x0801bd54
 800076c:	0801bd5c 	.word	0x0801bd5c
 8000770:	0801bd68 	.word	0x0801bd68
 8000774:	0801bd70 	.word	0x0801bd70
 8000778:	0801bd7c 	.word	0x0801bd7c
 800077c:	0801bd8c 	.word	0x0801bd8c
 8000780:	0801bd9c 	.word	0x0801bd9c
 8000784:	0801bdb0 	.word	0x0801bdb0
 8000788:	0801bdc4 	.word	0x0801bdc4
 800078c:	0801bdd0 	.word	0x0801bdd0
 8000790:	0801bdd8 	.word	0x0801bdd8
 8000794:	0801bde0 	.word	0x0801bde0

08000798 <LoraStarter_InitWithDefaults>:
    UART_Connect(port);
    LOG_INFO("[LoRa] UART connected to %s", port);
}

void LoraStarter_InitWithDefaults(LoraStarterContext* ctx, const char* send_message)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
    if (ctx == NULL) return;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d032      	beq.n	800080e <LoraStarter_InitWithDefaults+0x76>
    
    ctx->state = LORA_STATE_INIT;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]
    ctx->cmd_index = 0;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
    ctx->commands = LORA_DEFAULT_INIT_COMMANDS;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4a18      	ldr	r2, [pc, #96]	@ (8000818 <LoraStarter_InitWithDefaults+0x80>)
 80007b8:	609a      	str	r2, [r3, #8]
    ctx->num_commands = LORA_DEFAULT_INIT_COMMANDS_COUNT;
 80007ba:	2205      	movs	r2, #5
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	60da      	str	r2, [r3, #12]
    ctx->send_message = (send_message != NULL) ? send_message : "TEST";
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <LoraStarter_InitWithDefaults+0x32>
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	e000      	b.n	80007cc <LoraStarter_InitWithDefaults+0x34>
 80007ca:	4b14      	ldr	r3, [pc, #80]	@ (800081c <LoraStarter_InitWithDefaults+0x84>)
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	61d3      	str	r3, [r2, #28]
    ctx->max_retry_count = 3;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2203      	movs	r2, #3
 80007d4:	625a      	str	r2, [r3, #36]	@ 0x24
    ctx->send_interval_ms = 300000;  // 5분 간격
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a11      	ldr	r2, [pc, #68]	@ (8000820 <LoraStarter_InitWithDefaults+0x88>)
 80007da:	615a      	str	r2, [r3, #20]
    ctx->last_send_time = 0;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
    ctx->send_count = 0;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
    ctx->error_count = 0;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
    ctx->last_retry_time = 0;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	629a      	str	r2, [r3, #40]	@ 0x28
    ctx->retry_delay_ms = 1000;  // 1초 초기 지연
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    LOG_INFO("[LoRa] Initialized with defaults - Commands: %d, Message: %s", 
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	68da      	ldr	r2, [r3, #12]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	69db      	ldr	r3, [r3, #28]
 8000804:	4907      	ldr	r1, [pc, #28]	@ (8000824 <LoraStarter_InitWithDefaults+0x8c>)
 8000806:	2001      	movs	r0, #1
 8000808:	f004 fa1a 	bl	8004c40 <LOGGER_SendFormatted>
 800080c:	e000      	b.n	8000810 <LoraStarter_InitWithDefaults+0x78>
    if (ctx == NULL) return;
 800080e:	bf00      	nop
             ctx->num_commands, ctx->send_message);
}
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000000 	.word	0x20000000
 800081c:	0801be04 	.word	0x0801be04
 8000820:	000493e0 	.word	0x000493e0
 8000824:	0801be0c 	.word	0x0801be0c

08000828 <LoraStarter_Process>:

void LoraStarter_Process(LoraStarterContext* ctx, const char* uart_rx)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b0bf      	sub	sp, #252	@ 0xfc
 800082c:	af02      	add	r7, sp, #8
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
    if (ctx == NULL) return;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b00      	cmp	r3, #0
 8000836:	f000 8283 	beq.w	8000d40 <LoraStarter_Process+0x518>

    LoraState old_state = ctx->state;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb

    switch(ctx->state) {
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b08      	cmp	r3, #8
 8000848:	f200 825b 	bhi.w	8000d02 <LoraStarter_Process+0x4da>
 800084c:	a201      	add	r2, pc, #4	@ (adr r2, 8000854 <LoraStarter_Process+0x2c>)
 800084e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000852:	bf00      	nop
 8000854:	08000879 	.word	0x08000879
 8000858:	080008c7 	.word	0x080008c7
 800085c:	0800091d 	.word	0x0800091d
 8000860:	080009d7 	.word	0x080009d7
 8000864:	080009ed 	.word	0x080009ed
 8000868:	08000a3b 	.word	0x08000a3b
 800086c:	08000af9 	.word	0x08000af9
 8000870:	08000c29 	.word	0x08000c29
 8000874:	08000c8f 	.word	0x08000c8f
        case LORA_STATE_INIT:
            ctx->cmd_index = 0;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2200      	movs	r2, #0
 800087c:	605a      	str	r2, [r3, #4]
            ctx->error_count = 0;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
            ctx->state = LORA_STATE_SEND_CMD;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2201      	movs	r2, #1
 8000888:	701a      	strb	r2, [r3, #0]
            // 기본값 설정
            if (ctx->max_retry_count == 0) ctx->max_retry_count = 0; // 0이면 무제한
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800088e:	2b00      	cmp	r3, #0
 8000890:	d102      	bne.n	8000898 <LoraStarter_Process+0x70>
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	@ 0x24
            if (ctx->send_message == NULL) ctx->send_message = "Hello";
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	69db      	ldr	r3, [r3, #28]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d102      	bne.n	80008a6 <LoraStarter_Process+0x7e>
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4aaa      	ldr	r2, [pc, #680]	@ (8000b4c <LoraStarter_Process+0x324>)
 80008a4:	61da      	str	r2, [r3, #28]
            ctx->last_retry_time = 0;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2200      	movs	r2, #0
 80008aa:	629a      	str	r2, [r3, #40]	@ 0x28
            ctx->retry_delay_ms = 1000; // 초기 재시도 지연: 1초
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008b2:	62da      	str	r2, [r3, #44]	@ 0x2c
            LOG_INFO("[LoRa] Initialized with message: %s, max_retries: %d", 
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	69da      	ldr	r2, [r3, #28]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008bc:	49a4      	ldr	r1, [pc, #656]	@ (8000b50 <LoraStarter_Process+0x328>)
 80008be:	2001      	movs	r0, #1
 80008c0:	f004 f9be 	bl	8004c40 <LOGGER_SendFormatted>
                    ctx->send_message, ctx->max_retry_count);
            break;
 80008c4:	e224      	b.n	8000d10 <LoraStarter_Process+0x4e8>
        case LORA_STATE_SEND_CMD:
            if (ctx->cmd_index < ctx->num_commands) {
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	685a      	ldr	r2, [r3, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	68db      	ldr	r3, [r3, #12]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	da20      	bge.n	8000914 <LoraStarter_Process+0xec>
                LOG_DEBUG("[LoRa] Sending command %d/%d: %s", 
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	1c59      	adds	r1, r3, #1
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	68d8      	ldr	r0, [r3, #12]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	689a      	ldr	r2, [r3, #8]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	4413      	add	r3, r2
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	4603      	mov	r3, r0
 80008ee:	460a      	mov	r2, r1
 80008f0:	4998      	ldr	r1, [pc, #608]	@ (8000b54 <LoraStarter_Process+0x32c>)
 80008f2:	2000      	movs	r0, #0
 80008f4:	f004 f9a4 	bl	8004c40 <LOGGER_SendFormatted>
                         ctx->cmd_index + 1, ctx->num_commands, ctx->commands[ctx->cmd_index]);
                CommandSender_Send(ctx->commands[ctx->cmd_index]);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	689a      	ldr	r2, [r3, #8]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	4413      	add	r3, r2
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fe80 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_OK;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2202      	movs	r2, #2
 8000910:	701a      	strb	r2, [r3, #0]
            } else {
                ctx->state = LORA_STATE_SEND_JOIN;
            }
            break;
 8000912:	e1fd      	b.n	8000d10 <LoraStarter_Process+0x4e8>
                ctx->state = LORA_STATE_SEND_JOIN;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2203      	movs	r2, #3
 8000918:	701a      	strb	r2, [r3, #0]
            break;
 800091a:	e1f9      	b.n	8000d10 <LoraStarter_Process+0x4e8>
        case LORA_STATE_WAIT_OK:
            if (uart_rx) {
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	f000 81f1 	beq.w	8000d06 <LoraStarter_Process+0x4de>
                if (is_response_ok(uart_rx)) {
 8000924:	6838      	ldr	r0, [r7, #0]
 8000926:	f000 fab1 	bl	8000e8c <is_response_ok>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d010      	beq.n	8000952 <LoraStarter_Process+0x12a>
                    LOG_DEBUG("[LoRa] Command %d OK received", ctx->cmd_index + 1);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	3301      	adds	r3, #1
 8000936:	461a      	mov	r2, r3
 8000938:	4987      	ldr	r1, [pc, #540]	@ (8000b58 <LoraStarter_Process+0x330>)
 800093a:	2000      	movs	r0, #0
 800093c:	f004 f980 	bl	8004c40 <LOGGER_SendFormatted>
                    ctx->cmd_index++;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	1c5a      	adds	r2, r3, #1
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	605a      	str	r2, [r3, #4]
                    ctx->state = LORA_STATE_SEND_CMD;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 에러 카운터 리셋
                        ctx->state = LORA_STATE_SEND_CMD;
                    }
                }
            }
            break;
 8000950:	e1d9      	b.n	8000d06 <LoraStarter_Process+0x4de>
                } else if (strstr(uart_rx, "ERROR") || strstr(uart_rx, "AT_COMMAND_NOT_FOUND")) {
 8000952:	4982      	ldr	r1, [pc, #520]	@ (8000b5c <LoraStarter_Process+0x334>)
 8000954:	6838      	ldr	r0, [r7, #0]
 8000956:	f01a fd8a 	bl	801b46e <strstr>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d107      	bne.n	8000970 <LoraStarter_Process+0x148>
 8000960:	497f      	ldr	r1, [pc, #508]	@ (8000b60 <LoraStarter_Process+0x338>)
 8000962:	6838      	ldr	r0, [r7, #0]
 8000964:	f01a fd83 	bl	801b46e <strstr>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	f000 81cb 	beq.w	8000d06 <LoraStarter_Process+0x4de>
                    LOG_WARN("[LoRa] Command %d failed: %s", ctx->cmd_index + 1, uart_rx);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	1c5a      	adds	r2, r3, #1
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	497a      	ldr	r1, [pc, #488]	@ (8000b64 <LoraStarter_Process+0x33c>)
 800097a:	2002      	movs	r0, #2
 800097c:	f004 f960 	bl	8004c40 <LOGGER_SendFormatted>
                    ctx->error_count++;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6a1b      	ldr	r3, [r3, #32]
 8000984:	1c5a      	adds	r2, r3, #1
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	621a      	str	r2, [r3, #32]
                    if (ctx->error_count < 3) {
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6a1b      	ldr	r3, [r3, #32]
 800098e:	2b02      	cmp	r3, #2
 8000990:	dc0d      	bgt.n	80009ae <LoraStarter_Process+0x186>
                        LOG_INFO("[LoRa] Retrying command %d (attempt %d/3)", ctx->cmd_index + 1, ctx->error_count + 1);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	1c5a      	adds	r2, r3, #1
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6a1b      	ldr	r3, [r3, #32]
 800099c:	3301      	adds	r3, #1
 800099e:	4972      	ldr	r1, [pc, #456]	@ (8000b68 <LoraStarter_Process+0x340>)
 80009a0:	2001      	movs	r0, #1
 80009a2:	f004 f94d 	bl	8004c40 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_SEND_CMD; // 같은 명령 재시도
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2201      	movs	r2, #1
 80009aa:	701a      	strb	r2, [r3, #0]
            break;
 80009ac:	e1ab      	b.n	8000d06 <LoraStarter_Process+0x4de>
                        LOG_WARN("[LoRa] Command %d failed after 3 attempts, skipping to next", ctx->cmd_index + 1);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	3301      	adds	r3, #1
 80009b4:	461a      	mov	r2, r3
 80009b6:	496d      	ldr	r1, [pc, #436]	@ (8000b6c <LoraStarter_Process+0x344>)
 80009b8:	2002      	movs	r0, #2
 80009ba:	f004 f941 	bl	8004c40 <LOGGER_SendFormatted>
                        ctx->cmd_index++; // 다음 명령으로 건너뛰기
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	1c5a      	adds	r2, r3, #1
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	605a      	str	r2, [r3, #4]
                        ctx->error_count = 0; // 에러 카운터 리셋
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	621a      	str	r2, [r3, #32]
                        ctx->state = LORA_STATE_SEND_CMD;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2201      	movs	r2, #1
 80009d2:	701a      	strb	r2, [r3, #0]
            break;
 80009d4:	e197      	b.n	8000d06 <LoraStarter_Process+0x4de>
        case LORA_STATE_SEND_JOIN:
            LORA_LOG_JOIN_ATTEMPT();
 80009d6:	4966      	ldr	r1, [pc, #408]	@ (8000b70 <LoraStarter_Process+0x348>)
 80009d8:	2001      	movs	r0, #1
 80009da:	f004 f931 	bl	8004c40 <LOGGER_SendFormatted>
            CommandSender_Send("AT+JOIN\r\n");
 80009de:	4865      	ldr	r0, [pc, #404]	@ (8000b74 <LoraStarter_Process+0x34c>)
 80009e0:	f7ff fe14 	bl	800060c <CommandSender_Send>
            ctx->state = LORA_STATE_WAIT_JOIN_OK;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2204      	movs	r2, #4
 80009e8:	701a      	strb	r2, [r3, #0]
            break;
 80009ea:	e191      	b.n	8000d10 <LoraStarter_Process+0x4e8>
        case LORA_STATE_WAIT_JOIN_OK:
            if (uart_rx && is_join_response_ok(uart_rx)) {
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f000 818b 	beq.w	8000d0a <LoraStarter_Process+0x4e2>
 80009f4:	6838      	ldr	r0, [r7, #0]
 80009f6:	f000 fab1 	bl	8000f5c <is_join_response_ok>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	f000 8184 	beq.w	8000d0a <LoraStarter_Process+0x4e2>
                LORA_LOG_JOIN_SUCCESS();
 8000a02:	495d      	ldr	r1, [pc, #372]	@ (8000b78 <LoraStarter_Process+0x350>)
 8000a04:	2001      	movs	r0, #1
 8000a06:	f004 f91b 	bl	8004c40 <LOGGER_SendFormatted>
                ctx->state = LORA_STATE_SEND_PERIODIC;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2205      	movs	r2, #5
 8000a0e:	701a      	strb	r2, [r3, #0]
                ctx->send_count = 0;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
                ctx->error_count = 0; // JOIN 성공 시 에러 카운터 리셋
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
                ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a22:	62da      	str	r2, [r3, #44]	@ 0x2c
                ctx->last_retry_time = 0; // 재시도 시간 리셋
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2200      	movs	r2, #0
 8000a28:	629a      	str	r2, [r3, #40]	@ 0x28
                LOG_INFO("[LoRa] Starting periodic send with message: %s", ctx->send_message);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	4952      	ldr	r1, [pc, #328]	@ (8000b7c <LoraStarter_Process+0x354>)
 8000a32:	2001      	movs	r0, #1
 8000a34:	f004 f904 	bl	8004c40 <LOGGER_SendFormatted>
            }
            break;
 8000a38:	e167      	b.n	8000d0a <LoraStarter_Process+0x4e2>
        case LORA_STATE_SEND_PERIODIC:
            {
                char send_cmd[128];
                char hex_data[64];
                const char* message = (ctx->send_message != NULL) ? ctx->send_message : "Hello";
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d002      	beq.n	8000a48 <LoraStarter_Process+0x220>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	e000      	b.n	8000a4a <LoraStarter_Process+0x222>
 8000a48:	4b40      	ldr	r3, [pc, #256]	@ (8000b4c <LoraStarter_Process+0x324>)
 8000a4a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                
                // 문자열을 헥사 문자열로 변환
                int len = strlen(message);
 8000a4e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8000a52:	f7ff fbe7 	bl	8000224 <strlen>
 8000a56:	4603      	mov	r3, r0
 8000a58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000a62:	e014      	b.n	8000a8e <LoraStarter_Process+0x266>
                    sprintf(&hex_data[i*2], "%02X", (unsigned char)message[i]);
 8000a64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	f107 020c 	add.w	r2, r7, #12
 8000a6e:	18d0      	adds	r0, r2, r3
 8000a70:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a74:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000a78:	4413      	add	r3, r2
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4940      	ldr	r1, [pc, #256]	@ (8000b80 <LoraStarter_Process+0x358>)
 8000a80:	f01a fc6c 	bl	801b35c <siprintf>
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 8000a84:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a88:	3301      	adds	r3, #1
 8000a8a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000a8e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8000a92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000a96:	429a      	cmp	r2, r3
 8000a98:	da03      	bge.n	8000aa2 <LoraStarter_Process+0x27a>
 8000a9a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a9e:	2b1e      	cmp	r3, #30
 8000aa0:	dde0      	ble.n	8000a64 <LoraStarter_Process+0x23c>
                }
                hex_data[len*2] = '\0';
 8000aa2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	33f0      	adds	r3, #240	@ 0xf0
 8000aaa:	443b      	add	r3, r7
 8000aac:	2200      	movs	r2, #0
 8000aae:	f803 2ce4 	strb.w	r2, [r3, #-228]
                
                snprintf(send_cmd, sizeof(send_cmd), "AT+SEND=1:%s\r\n", hex_data);
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8000aba:	4a32      	ldr	r2, [pc, #200]	@ (8000b84 <LoraStarter_Process+0x35c>)
 8000abc:	2180      	movs	r1, #128	@ 0x80
 8000abe:	f01a fc17 	bl	801b2f0 <sniprintf>
                LORA_LOG_SEND_ATTEMPT(message);
 8000ac2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000ac6:	4930      	ldr	r1, [pc, #192]	@ (8000b88 <LoraStarter_Process+0x360>)
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f004 f8b9 	bl	8004c40 <LOGGER_SendFormatted>
                CommandSender_Send(send_cmd);
 8000ace:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fd9a 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_SEND_RESPONSE;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2206      	movs	r2, #6
 8000adc:	701a      	strb	r2, [r3, #0]
                ctx->send_count++;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	619a      	str	r2, [r3, #24]
                LOG_DEBUG("[LoRa] Send count: %d", ctx->send_count);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	461a      	mov	r2, r3
 8000aee:	4927      	ldr	r1, [pc, #156]	@ (8000b8c <LoraStarter_Process+0x364>)
 8000af0:	2000      	movs	r0, #0
 8000af2:	f004 f8a5 	bl	8004c40 <LOGGER_SendFormatted>
            }
            break;
 8000af6:	e10b      	b.n	8000d10 <LoraStarter_Process+0x4e8>
        case LORA_STATE_WAIT_SEND_RESPONSE:
            if (uart_rx) {
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	f000 8107 	beq.w	8000d0e <LoraStarter_Process+0x4e6>
                ResponseType response_type = ResponseHandler_ParseSendResponse(uart_rx);
 8000b00:	6838      	ldr	r0, [r7, #0]
 8000b02:	f000 faaf 	bl	8001064 <ResponseHandler_ParseSendResponse>
 8000b06:	4603      	mov	r3, r0
 8000b08:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
                switch(response_type) {
 8000b0c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d03f      	beq.n	8000b94 <LoraStarter_Process+0x36c>
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	f300 8080 	bgt.w	8000c1a <LoraStarter_Process+0x3f2>
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d002      	beq.n	8000b24 <LoraStarter_Process+0x2fc>
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d04c      	beq.n	8000bbc <LoraStarter_Process+0x394>
 8000b22:	e07a      	b.n	8000c1a <LoraStarter_Process+0x3f2>
                    case RESPONSE_OK:
                        LORA_LOG_SEND_SUCCESS();
 8000b24:	491a      	ldr	r1, [pc, #104]	@ (8000b90 <LoraStarter_Process+0x368>)
 8000b26:	2001      	movs	r0, #1
 8000b28:	f004 f88a 	bl	8004c40 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL; // 주기적 대기 상태로 전이
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2207      	movs	r2, #7
 8000b30:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 성공 시 에러 카운터 리셋
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b3e:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 마지막 송신 시간 저장
 8000b40:	f004 f814 	bl	8004b6c <TIME_GetCurrentMs>
 8000b44:	4602      	mov	r2, r0
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	611a      	str	r2, [r3, #16]
                        break;
 8000b4a:	e06c      	b.n	8000c26 <LoraStarter_Process+0x3fe>
 8000b4c:	0801be4c 	.word	0x0801be4c
 8000b50:	0801be54 	.word	0x0801be54
 8000b54:	0801be8c 	.word	0x0801be8c
 8000b58:	0801beb0 	.word	0x0801beb0
 8000b5c:	0801bdd8 	.word	0x0801bdd8
 8000b60:	0801bed0 	.word	0x0801bed0
 8000b64:	0801bee8 	.word	0x0801bee8
 8000b68:	0801bf08 	.word	0x0801bf08
 8000b6c:	0801bf34 	.word	0x0801bf34
 8000b70:	0801bf70 	.word	0x0801bf70
 8000b74:	0801bf8c 	.word	0x0801bf8c
 8000b78:	0801bf98 	.word	0x0801bf98
 8000b7c:	0801bfb0 	.word	0x0801bfb0
 8000b80:	0801bfe0 	.word	0x0801bfe0
 8000b84:	0801bfe8 	.word	0x0801bfe8
 8000b88:	0801bff8 	.word	0x0801bff8
 8000b8c:	0801c010 	.word	0x0801c010
 8000b90:	0801c028 	.word	0x0801c028
                    case RESPONSE_TIMEOUT:
                        LOG_WARN("[LoRa] SEND timeout");
 8000b94:	496c      	ldr	r1, [pc, #432]	@ (8000d48 <LoraStarter_Process+0x520>)
 8000b96:	2002      	movs	r0, #2
 8000b98:	f004 f852 	bl	8004c40 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL; // 주기적 대기 상태로 전이
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2207      	movs	r2, #7
 8000ba0:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 성공 시 에러 카운터 리셋
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000bae:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 마지막 송신 시간 저장
 8000bb0:	f003 ffdc 	bl	8004b6c <TIME_GetCurrentMs>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	611a      	str	r2, [r3, #16]
                        break;
 8000bba:	e034      	b.n	8000c26 <LoraStarter_Process+0x3fe>
                    case RESPONSE_ERROR:
                        LORA_LOG_SEND_FAILED("Network error");
 8000bbc:	4a63      	ldr	r2, [pc, #396]	@ (8000d4c <LoraStarter_Process+0x524>)
 8000bbe:	4964      	ldr	r1, [pc, #400]	@ (8000d50 <LoraStarter_Process+0x528>)
 8000bc0:	2002      	movs	r0, #2
 8000bc2:	f004 f83d 	bl	8004c40 <LOGGER_SendFormatted>
                        ctx->error_count++;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6a1b      	ldr	r3, [r3, #32]
 8000bca:	1c5a      	adds	r2, r3, #1
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	621a      	str	r2, [r3, #32]
                        LORA_LOG_ERROR_COUNT(ctx->error_count);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6a1b      	ldr	r3, [r3, #32]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	495f      	ldr	r1, [pc, #380]	@ (8000d54 <LoraStarter_Process+0x52c>)
 8000bd8:	2002      	movs	r0, #2
 8000bda:	f004 f831 	bl	8004c40 <LOGGER_SendFormatted>
                        // 무제한 재시도 (max_retry_count가 0이거나 아직 제한에 도달하지 않은 경우)
                        if (ctx->max_retry_count == 0 || ctx->error_count < ctx->max_retry_count) {
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d005      	beq.n	8000bf2 <LoraStarter_Process+0x3ca>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6a1a      	ldr	r2, [r3, #32]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	da0b      	bge.n	8000c0a <LoraStarter_Process+0x3e2>
                            LORA_LOG_RETRY_ATTEMPT(ctx->error_count, ctx->max_retry_count);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6a1a      	ldr	r2, [r3, #32]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bfa:	4957      	ldr	r1, [pc, #348]	@ (8000d58 <LoraStarter_Process+0x530>)
 8000bfc:	2002      	movs	r0, #2
 8000bfe:	f004 f81f 	bl	8004c40 <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_JOIN_RETRY; // JOIN 재시도
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2208      	movs	r2, #8
 8000c06:	701a      	strb	r2, [r3, #0]
                        } else {
                            LORA_LOG_MAX_RETRIES_REACHED();
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
                        }
                        break;
 8000c08:	e00d      	b.n	8000c26 <LoraStarter_Process+0x3fe>
                            LORA_LOG_MAX_RETRIES_REACHED();
 8000c0a:	4954      	ldr	r1, [pc, #336]	@ (8000d5c <LoraStarter_Process+0x534>)
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f004 f817 	bl	8004c40 <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	220a      	movs	r2, #10
 8000c16:	701a      	strb	r2, [r3, #0]
                        break;
 8000c18:	e005      	b.n	8000c26 <LoraStarter_Process+0x3fe>
                    default:
                        // 알 수 없는 응답은 무시하고 계속 대기
                        LOG_DEBUG("[LoRa] Unknown response: %s", uart_rx);
 8000c1a:	683a      	ldr	r2, [r7, #0]
 8000c1c:	4950      	ldr	r1, [pc, #320]	@ (8000d60 <LoraStarter_Process+0x538>)
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f004 f80e 	bl	8004c40 <LOGGER_SendFormatted>
                        break;
 8000c24:	bf00      	nop
                }
            }
            break;
 8000c26:	e072      	b.n	8000d0e <LoraStarter_Process+0x4e6>
        case LORA_STATE_WAIT_SEND_INTERVAL:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000c28:	f003 ffa0 	bl	8004b6c <TIME_GetCurrentMs>
 8000c2c:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
                uint32_t interval_ms = (ctx->send_interval_ms > 0) ? ctx->send_interval_ms : 30000; // 기본값 30초
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	695b      	ldr	r3, [r3, #20]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d002      	beq.n	8000c3e <LoraStarter_Process+0x416>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	695b      	ldr	r3, [r3, #20]
 8000c3c:	e001      	b.n	8000c42 <LoraStarter_Process+0x41a>
 8000c3e:	f247 5330 	movw	r3, #30000	@ 0x7530
 8000c42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                
                if ((current_time - ctx->last_send_time) >= interval_ms) {
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	691b      	ldr	r3, [r3, #16]
 8000c4a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d809      	bhi.n	8000c6c <LoraStarter_Process+0x444>
                    LOG_DEBUG("[LoRa] Send interval passed (%u ms), ready for next send", interval_ms);
 8000c58:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000c5c:	4941      	ldr	r1, [pc, #260]	@ (8000d64 <LoraStarter_Process+0x53c>)
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f003 ffee 	bl	8004c40 <LOGGER_SendFormatted>
                    ctx->state = LORA_STATE_SEND_PERIODIC;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2205      	movs	r2, #5
 8000c68:	701a      	strb	r2, [r3, #0]
                    // 아직 대기 시간이 남았으므로 상태 유지
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
                }
            }
            break;
 8000c6a:	e051      	b.n	8000d10 <LoraStarter_Process+0x4e8>
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	691a      	ldr	r2, [r3, #16]
 8000c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000c7a:	4413      	add	r3, r2
 8000c7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
 8000c80:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000c84:	4938      	ldr	r1, [pc, #224]	@ (8000d68 <LoraStarter_Process+0x540>)
 8000c86:	2000      	movs	r0, #0
 8000c88:	f003 ffda 	bl	8004c40 <LOGGER_SendFormatted>
            break;
 8000c8c:	e040      	b.n	8000d10 <LoraStarter_Process+0x4e8>
        case LORA_STATE_JOIN_RETRY:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000c8e:	f003 ff6d 	bl	8004b6c <TIME_GetCurrentMs>
 8000c92:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
                
                if (ctx->last_retry_time == 0) {
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d10b      	bne.n	8000cb6 <LoraStarter_Process+0x48e>
                    // 첫 재시도: 바로 SEND_JOIN
                    LOG_DEBUG("[LoRa] First JOIN retry");
 8000c9e:	4933      	ldr	r1, [pc, #204]	@ (8000d6c <LoraStarter_Process+0x544>)
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f003 ffcd 	bl	8004c40 <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000cac:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	701a      	strb	r2, [r3, #0]
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
                             ctx->retry_delay_ms - (current_time - ctx->last_retry_time));
                    // 아무것도 하지 않음
                }
            }
            break;
 8000cb4:	e02c      	b.n	8000d10 <LoraStarter_Process+0x4e8>
                } else if ((current_time - ctx->last_retry_time) >= ctx->retry_delay_ms) {
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000cbe:	1ad2      	subs	r2, r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d30e      	bcc.n	8000ce6 <LoraStarter_Process+0x4be>
                    LOG_DEBUG("[LoRa] JOIN retry after %lu ms delay", ctx->retry_delay_ms);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4928      	ldr	r1, [pc, #160]	@ (8000d70 <LoraStarter_Process+0x548>)
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f003 ffb5 	bl	8004c40 <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000cdc:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	701a      	strb	r2, [r3, #0]
            break;
 8000ce4:	e014      	b.n	8000d10 <LoraStarter_Process+0x4e8>
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000cf2:	1acb      	subs	r3, r1, r3
 8000cf4:	4413      	add	r3, r2
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	491e      	ldr	r1, [pc, #120]	@ (8000d74 <LoraStarter_Process+0x54c>)
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f003 ffa0 	bl	8004c40 <LOGGER_SendFormatted>
            break;
 8000d00:	e006      	b.n	8000d10 <LoraStarter_Process+0x4e8>
        case LORA_STATE_DONE:
        case LORA_STATE_ERROR:
        default:
            // 이미 완료된 상태이므로 아무것도 하지 않음
            break;
 8000d02:	bf00      	nop
 8000d04:	e004      	b.n	8000d10 <LoraStarter_Process+0x4e8>
            break;
 8000d06:	bf00      	nop
 8000d08:	e002      	b.n	8000d10 <LoraStarter_Process+0x4e8>
            break;
 8000d0a:	bf00      	nop
 8000d0c:	e000      	b.n	8000d10 <LoraStarter_Process+0x4e8>
            break;
 8000d0e:	bf00      	nop
    }

    // 상태 변경 로깅
    if (old_state != ctx->state) {
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	f897 20eb 	ldrb.w	r2, [r7, #235]	@ 0xeb
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d012      	beq.n	8000d42 <LoraStarter_Process+0x51a>
        LORA_LOG_STATE_CHANGE(get_state_name(old_state), get_state_name(ctx->state));
 8000d1c:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fce1 	bl	80006e8 <get_state_name>
 8000d26:	4604      	mov	r4, r0
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fcdb 	bl	80006e8 <get_state_name>
 8000d32:	4603      	mov	r3, r0
 8000d34:	4622      	mov	r2, r4
 8000d36:	4910      	ldr	r1, [pc, #64]	@ (8000d78 <LoraStarter_Process+0x550>)
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f003 ff81 	bl	8004c40 <LOGGER_SendFormatted>
 8000d3e:	e000      	b.n	8000d42 <LoraStarter_Process+0x51a>
    if (ctx == NULL) return;
 8000d40:	bf00      	nop
    }
}
 8000d42:	37f4      	adds	r7, #244	@ 0xf4
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd90      	pop	{r4, r7, pc}
 8000d48:	0801c040 	.word	0x0801c040
 8000d4c:	0801c054 	.word	0x0801c054
 8000d50:	0801c064 	.word	0x0801c064
 8000d54:	0801c07c 	.word	0x0801c07c
 8000d58:	0801c094 	.word	0x0801c094
 8000d5c:	0801c0b0 	.word	0x0801c0b0
 8000d60:	0801c0d4 	.word	0x0801c0d4
 8000d64:	0801c0f0 	.word	0x0801c0f0
 8000d68:	0801c12c 	.word	0x0801c12c
 8000d6c:	0801c160 	.word	0x0801c160
 8000d70:	0801c178 	.word	0x0801c178
 8000d74:	0801c1a0 	.word	0x0801c1a0
 8000d78:	0801c1d4 	.word	0x0801c1d4

08000d7c <Network_InitSD>:
{
    return g_backend;
}

int Network_InitSD(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
    if (g_backend != NETWORK_BACKEND_SD_CARD) {
 8000d82:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <Network_InitSD+0x38>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d002      	beq.n	8000d90 <Network_InitSD+0x14>
        return NETWORK_ERROR;
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8e:	e00c      	b.n	8000daa <Network_InitSD+0x2e>
    }
    
    int result = SDStorage_Init();
 8000d90:	f000 f9be 	bl	8001110 <SDStorage_Init>
 8000d94:	6078      	str	r0, [r7, #4]
    if (result == SDSTORAGE_OK) {
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d104      	bne.n	8000da6 <Network_InitSD+0x2a>
        g_connected = true;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	@ (8000db8 <Network_InitSD+0x3c>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	701a      	strb	r2, [r3, #0]
        return NETWORK_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	e001      	b.n	8000daa <Network_InitSD+0x2e>
    }
    
    return NETWORK_ERROR;
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	2000023d 	.word	0x2000023d
 8000db8:	2000023c 	.word	0x2000023c

08000dbc <Network_SendBinary>:
    
    return NETWORK_OK;
}

int Network_SendBinary(const void* data, size_t size)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
    if (!g_connected) {
 8000dc6:	4b20      	ldr	r3, [pc, #128]	@ (8000e48 <Network_SendBinary+0x8c>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	f083 0301 	eor.w	r3, r3, #1
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d002      	beq.n	8000dda <Network_SendBinary+0x1e>
        return NETWORK_NOT_CONNECTED;
 8000dd4:	f06f 0301 	mvn.w	r3, #1
 8000dd8:	e032      	b.n	8000e40 <Network_SendBinary+0x84>
    }
    
    if (data == NULL || size == 0) {
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d002      	beq.n	8000de6 <Network_SendBinary+0x2a>
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d102      	bne.n	8000dec <Network_SendBinary+0x30>
        return NETWORK_INVALID_PARAM;
 8000de6:	f06f 0303 	mvn.w	r3, #3
 8000dea:	e029      	b.n	8000e40 <Network_SendBinary+0x84>
    }
    
    // 백엔드에 따른 분기 처리
    switch (g_backend) {
 8000dec:	4b17      	ldr	r3, [pc, #92]	@ (8000e4c <Network_SendBinary+0x90>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d002      	beq.n	8000dfa <Network_SendBinary+0x3e>
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d002      	beq.n	8000dfe <Network_SendBinary+0x42>
 8000df8:	e020      	b.n	8000e3c <Network_SendBinary+0x80>
        case NETWORK_BACKEND_SOCKET:
            // 실제 구현에서는 소켓을 통한 데이터 전송
            // 지금은 테스트를 위한 최소 구현
            return NETWORK_OK;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	e020      	b.n	8000e40 <Network_SendBinary+0x84>
            
        case NETWORK_BACKEND_SD_CARD:
            {
                int result = SDStorage_WriteLog(data, size);
 8000dfe:	6839      	ldr	r1, [r7, #0]
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f000 fa9f 	bl	8001344 <SDStorage_WriteLog>
 8000e06:	60f8      	str	r0, [r7, #12]
                switch (result) {
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d00b      	beq.n	8000e26 <Network_SendBinary+0x6a>
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	dc10      	bgt.n	8000e36 <Network_SendBinary+0x7a>
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f113 0f05 	cmn.w	r3, #5
 8000e1a:	d009      	beq.n	8000e30 <Network_SendBinary+0x74>
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f113 0f02 	cmn.w	r3, #2
 8000e22:	d002      	beq.n	8000e2a <Network_SendBinary+0x6e>
 8000e24:	e007      	b.n	8000e36 <Network_SendBinary+0x7a>
                    case SDSTORAGE_OK:
                        return NETWORK_OK;
 8000e26:	2300      	movs	r3, #0
 8000e28:	e00a      	b.n	8000e40 <Network_SendBinary+0x84>
                    case SDSTORAGE_NOT_READY:
                        return NETWORK_NOT_CONNECTED;
 8000e2a:	f06f 0301 	mvn.w	r3, #1
 8000e2e:	e007      	b.n	8000e40 <Network_SendBinary+0x84>
                    case SDSTORAGE_INVALID_PARAM:
                        return NETWORK_INVALID_PARAM;
 8000e30:	f06f 0303 	mvn.w	r3, #3
 8000e34:	e004      	b.n	8000e40 <Network_SendBinary+0x84>
                    case SDSTORAGE_DISK_FULL:
                    case SDSTORAGE_FILE_ERROR:
                    default:
                        return NETWORK_ERROR;
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3a:	e001      	b.n	8000e40 <Network_SendBinary+0x84>
                }
            }
            
        default:
            return NETWORK_ERROR;
 8000e3c:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	2000023c 	.word	0x2000023c
 8000e4c:	2000023d 	.word	0x2000023d

08000e50 <Network_IsConnected>:

bool Network_IsConnected(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
    if (g_backend == NETWORK_BACKEND_SD_CARD) {
 8000e54:	4b0b      	ldr	r3, [pc, #44]	@ (8000e84 <Network_IsConnected+0x34>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d10f      	bne.n	8000e7c <Network_IsConnected+0x2c>
        return g_connected && SDStorage_IsReady();
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e88 <Network_IsConnected+0x38>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d006      	beq.n	8000e72 <Network_IsConnected+0x22>
 8000e64:	f000 fada 	bl	800141c <SDStorage_IsReady>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <Network_IsConnected+0x22>
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e000      	b.n	8000e74 <Network_IsConnected+0x24>
 8000e72:	2300      	movs	r3, #0
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	e001      	b.n	8000e80 <Network_IsConnected+0x30>
    }
    return g_connected;
 8000e7c:	4b02      	ldr	r3, [pc, #8]	@ (8000e88 <Network_IsConnected+0x38>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	2000023d 	.word	0x2000023d
 8000e88:	2000023c 	.word	0x2000023c

08000e8c <is_response_ok>:
#include "ResponseHandler.h"
#include "logger.h"
#include <string.h>

bool is_response_ok(const char* response)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d105      	bne.n	8000ea6 <is_response_ok+0x1a>
        LOG_DEBUG("[ResponseHandler] is_response_ok: NULL response");
 8000e9a:	4925      	ldr	r1, [pc, #148]	@ (8000f30 <is_response_ok+0xa4>)
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f003 fecf 	bl	8004c40 <LOGGER_SendFormatted>
        return false;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	e03f      	b.n	8000f26 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking OK response: '%s'", response);
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	4922      	ldr	r1, [pc, #136]	@ (8000f34 <is_response_ok+0xa8>)
 8000eaa:	2000      	movs	r0, #0
 8000eac:	f003 fec8 	bl	8004c40 <LOGGER_SendFormatted>
    
    // OK 또는 OK\r\n, OK\n 등 허용
    if (strcmp(response, "OK") == 0) {
 8000eb0:	4921      	ldr	r1, [pc, #132]	@ (8000f38 <is_response_ok+0xac>)
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff f9ac 	bl	8000210 <strcmp>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d105      	bne.n	8000eca <is_response_ok+0x3e>
        LOG_DEBUG("[ResponseHandler] OK response confirmed");
 8000ebe:	491f      	ldr	r1, [pc, #124]	@ (8000f3c <is_response_ok+0xb0>)
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f003 febd 	bl	8004c40 <LOGGER_SendFormatted>
        return true;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e02d      	b.n	8000f26 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\r\n") == 0) {
 8000eca:	491d      	ldr	r1, [pc, #116]	@ (8000f40 <is_response_ok+0xb4>)
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff f99f 	bl	8000210 <strcmp>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d105      	bne.n	8000ee4 <is_response_ok+0x58>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with CRLF)");
 8000ed8:	491a      	ldr	r1, [pc, #104]	@ (8000f44 <is_response_ok+0xb8>)
 8000eda:	2000      	movs	r0, #0
 8000edc:	f003 feb0 	bl	8004c40 <LOGGER_SendFormatted>
        return true;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e020      	b.n	8000f26 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\n") == 0) {
 8000ee4:	4918      	ldr	r1, [pc, #96]	@ (8000f48 <is_response_ok+0xbc>)
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff f992 	bl	8000210 <strcmp>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d105      	bne.n	8000efe <is_response_ok+0x72>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with LF)");
 8000ef2:	4916      	ldr	r1, [pc, #88]	@ (8000f4c <is_response_ok+0xc0>)
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f003 fea3 	bl	8004c40 <LOGGER_SendFormatted>
        return true;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e013      	b.n	8000f26 <is_response_ok+0x9a>
    }
    
    // AT+VER 버전 응답도 성공으로 간주 (RUI_로 시작하는 응답)
    if (strstr(response, "RUI_") != NULL) {
 8000efe:	4914      	ldr	r1, [pc, #80]	@ (8000f50 <is_response_ok+0xc4>)
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f01a fab4 	bl	801b46e <strstr>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d006      	beq.n	8000f1a <is_response_ok+0x8e>
        LOG_DEBUG("[ResponseHandler] Version response confirmed: %s", response);
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	4911      	ldr	r1, [pc, #68]	@ (8000f54 <is_response_ok+0xc8>)
 8000f10:	2000      	movs	r0, #0
 8000f12:	f003 fe95 	bl	8004c40 <LOGGER_SendFormatted>
        return true;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e005      	b.n	8000f26 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Not an OK response: '%s'", response);
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	490e      	ldr	r1, [pc, #56]	@ (8000f58 <is_response_ok+0xcc>)
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f003 fe8e 	bl	8004c40 <LOGGER_SendFormatted>
    return false;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	0801c1f4 	.word	0x0801c1f4
 8000f34:	0801c224 	.word	0x0801c224
 8000f38:	0801c254 	.word	0x0801c254
 8000f3c:	0801c258 	.word	0x0801c258
 8000f40:	0801c280 	.word	0x0801c280
 8000f44:	0801c288 	.word	0x0801c288
 8000f48:	0801c2bc 	.word	0x0801c2bc
 8000f4c:	0801c2c0 	.word	0x0801c2c0
 8000f50:	0801c2f4 	.word	0x0801c2f4
 8000f54:	0801c2fc 	.word	0x0801c2fc
 8000f58:	0801c330 	.word	0x0801c330

08000f5c <is_join_response_ok>:

bool is_join_response_ok(const char* response)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f68:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f6c:	6018      	str	r0, [r3, #0]
    if (response == NULL) {
 8000f6e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f72:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d105      	bne.n	8000f88 <is_join_response_ok+0x2c>
        LOG_DEBUG("[ResponseHandler] is_join_response_ok: NULL response");
 8000f7c:	4934      	ldr	r1, [pc, #208]	@ (8001050 <is_join_response_ok+0xf4>)
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f003 fe5e 	bl	8004c40 <LOGGER_SendFormatted>
        return false;
 8000f84:	2300      	movs	r3, #0
 8000f86:	e05e      	b.n	8001046 <is_join_response_ok+0xea>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking JOIN response: '%s'", response);
 8000f88:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f8c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	4930      	ldr	r1, [pc, #192]	@ (8001054 <is_join_response_ok+0xf8>)
 8000f94:	2000      	movs	r0, #0
 8000f96:	f003 fe53 	bl	8004c40 <LOGGER_SendFormatted>
    
    // 개행 문자 제거하여 비교
    char clean_response[512];
    strncpy(clean_response, response, sizeof(clean_response) - 1);
 8000f9a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f9e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000fa2:	f107 0008 	add.w	r0, r7, #8
 8000fa6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8000faa:	6819      	ldr	r1, [r3, #0]
 8000fac:	f01a fa4c 	bl	801b448 <strncpy>
    clean_response[sizeof(clean_response) - 1] = '\0';
 8000fb0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000fb4:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
    
    // 개행 문자 제거
    char* pos = clean_response;
 8000fbe:	f107 0308 	add.w	r3, r7, #8
 8000fc2:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8000fc6:	e013      	b.n	8000ff0 <is_join_response_ok+0x94>
        if (*pos == '\r' || *pos == '\n') {
 8000fc8:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b0d      	cmp	r3, #13
 8000fd0:	d004      	beq.n	8000fdc <is_join_response_ok+0x80>
 8000fd2:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b0a      	cmp	r3, #10
 8000fda:	d104      	bne.n	8000fe6 <is_join_response_ok+0x8a>
            *pos = '\0';
 8000fdc:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]
            break;
 8000fe4:	e009      	b.n	8000ffa <is_join_response_ok+0x9e>
        }
        pos++;
 8000fe6:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000fea:	3301      	adds	r3, #1
 8000fec:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8000ff0:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1e6      	bne.n	8000fc8 <is_join_response_ok+0x6c>
    }
    
    bool result = (strcmp(clean_response, "+EVT:JOINED") == 0);
 8000ffa:	f107 0308 	add.w	r3, r7, #8
 8000ffe:	4916      	ldr	r1, [pc, #88]	@ (8001058 <is_join_response_ok+0xfc>)
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff f905 	bl	8000210 <strcmp>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	bf0c      	ite	eq
 800100c:	2301      	moveq	r3, #1
 800100e:	2300      	movne	r3, #0
 8001010:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
    
    if (result) {
 8001014:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 8001018:	2b00      	cmp	r3, #0
 800101a:	d009      	beq.n	8001030 <is_join_response_ok+0xd4>
        LOG_INFO("[ResponseHandler] JOIN response confirmed: %s", response);
 800101c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001020:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	490d      	ldr	r1, [pc, #52]	@ (800105c <is_join_response_ok+0x100>)
 8001028:	2001      	movs	r0, #1
 800102a:	f003 fe09 	bl	8004c40 <LOGGER_SendFormatted>
 800102e:	e008      	b.n	8001042 <is_join_response_ok+0xe6>
    } else {
        LOG_DEBUG("[ResponseHandler] Not a JOIN response: '%s'", response);
 8001030:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001034:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	4909      	ldr	r1, [pc, #36]	@ (8001060 <is_join_response_ok+0x104>)
 800103c:	2000      	movs	r0, #0
 800103e:	f003 fdff 	bl	8004c40 <LOGGER_SendFormatted>
    }
    
    return result;
 8001042:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
}
 8001046:	4618      	mov	r0, r3
 8001048:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	0801c35c 	.word	0x0801c35c
 8001054:	0801c394 	.word	0x0801c394
 8001058:	0801c3c4 	.word	0x0801c3c4
 800105c:	0801c3d0 	.word	0x0801c3d0
 8001060:	0801c400 	.word	0x0801c400

08001064 <ResponseHandler_ParseSendResponse>:

ResponseType ResponseHandler_ParseSendResponse(const char* response)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d105      	bne.n	800107e <ResponseHandler_ParseSendResponse+0x1a>
        LOG_DEBUG("[ResponseHandler] ParseSendResponse: NULL response");
 8001072:	491e      	ldr	r1, [pc, #120]	@ (80010ec <ResponseHandler_ParseSendResponse+0x88>)
 8001074:	2000      	movs	r0, #0
 8001076:	f003 fde3 	bl	8004c40 <LOGGER_SendFormatted>
        return RESPONSE_UNKNOWN;
 800107a:	2303      	movs	r3, #3
 800107c:	e031      	b.n	80010e2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Parsing SEND response: '%s'", response);
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	491b      	ldr	r1, [pc, #108]	@ (80010f0 <ResponseHandler_ParseSendResponse+0x8c>)
 8001082:	2000      	movs	r0, #0
 8001084:	f003 fddc 	bl	8004c40 <LOGGER_SendFormatted>
    
    if (strstr(response, "+EVT:SEND_CONFIRMED_OK") != NULL) {
 8001088:	491a      	ldr	r1, [pc, #104]	@ (80010f4 <ResponseHandler_ParseSendResponse+0x90>)
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f01a f9ef 	bl	801b46e <strstr>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d005      	beq.n	80010a2 <ResponseHandler_ParseSendResponse+0x3e>
        LOG_INFO("[ResponseHandler] SEND response: CONFIRMED_OK");
 8001096:	4918      	ldr	r1, [pc, #96]	@ (80010f8 <ResponseHandler_ParseSendResponse+0x94>)
 8001098:	2001      	movs	r0, #1
 800109a:	f003 fdd1 	bl	8004c40 <LOGGER_SendFormatted>
        return RESPONSE_OK;
 800109e:	2300      	movs	r3, #0
 80010a0:	e01f      	b.n	80010e2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strstr(response, "+EVT:SEND_CONFIRMED_FAILED") != NULL) {
 80010a2:	4916      	ldr	r1, [pc, #88]	@ (80010fc <ResponseHandler_ParseSendResponse+0x98>)
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f01a f9e2 	bl	801b46e <strstr>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d005      	beq.n	80010bc <ResponseHandler_ParseSendResponse+0x58>
        LOG_WARN("[ResponseHandler] SEND response: CONFIRMED_FAILED");
 80010b0:	4913      	ldr	r1, [pc, #76]	@ (8001100 <ResponseHandler_ParseSendResponse+0x9c>)
 80010b2:	2002      	movs	r0, #2
 80010b4:	f003 fdc4 	bl	8004c40 <LOGGER_SendFormatted>
        return RESPONSE_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e012      	b.n	80010e2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strcmp(response, "TIMEOUT") == 0) {
 80010bc:	4911      	ldr	r1, [pc, #68]	@ (8001104 <ResponseHandler_ParseSendResponse+0xa0>)
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff f8a6 	bl	8000210 <strcmp>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d105      	bne.n	80010d6 <ResponseHandler_ParseSendResponse+0x72>
        LOG_WARN("[ResponseHandler] SEND response: TIMEOUT");
 80010ca:	490f      	ldr	r1, [pc, #60]	@ (8001108 <ResponseHandler_ParseSendResponse+0xa4>)
 80010cc:	2002      	movs	r0, #2
 80010ce:	f003 fdb7 	bl	8004c40 <LOGGER_SendFormatted>
        return RESPONSE_TIMEOUT;
 80010d2:	2302      	movs	r3, #2
 80010d4:	e005      	b.n	80010e2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Unknown SEND response: '%s'", response);
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	490c      	ldr	r1, [pc, #48]	@ (800110c <ResponseHandler_ParseSendResponse+0xa8>)
 80010da:	2000      	movs	r0, #0
 80010dc:	f003 fdb0 	bl	8004c40 <LOGGER_SendFormatted>
    return RESPONSE_UNKNOWN;
 80010e0:	2303      	movs	r3, #3
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	0801c42c 	.word	0x0801c42c
 80010f0:	0801c460 	.word	0x0801c460
 80010f4:	0801c490 	.word	0x0801c490
 80010f8:	0801c4a8 	.word	0x0801c4a8
 80010fc:	0801c4d8 	.word	0x0801c4d8
 8001100:	0801c4f4 	.word	0x0801c4f4
 8001104:	0801c528 	.word	0x0801c528
 8001108:	0801c530 	.word	0x0801c530
 800110c:	0801c55c 	.word	0x0801c55c

08001110 <SDStorage_Init>:
static int _create_log_directory(void);
static int _generate_log_filename(char* filename, size_t max_len);
static uint32_t _get_current_timestamp(void);

int SDStorage_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af02      	add	r7, sp, #8
#ifdef STM32F746xx
    // STM32 환경: FatFs 초기화 및 진단
    LOG_INFO("[SDStorage] Starting SD card initialization...");
 8001116:	496e      	ldr	r1, [pc, #440]	@ (80012d0 <SDStorage_Init+0x1c0>)
 8001118:	2001      	movs	r0, #1
 800111a:	f003 fd91 	bl	8004c40 <LOGGER_SendFormatted>
    
    // 1. 하드웨어 상태 진단
    extern SD_HandleTypeDef hsd1;
    HAL_SD_CardStateTypeDef card_state = HAL_SD_GetCardState(&hsd1);
 800111e:	486d      	ldr	r0, [pc, #436]	@ (80012d4 <SDStorage_Init+0x1c4>)
 8001120:	f00c fa3a 	bl	800d598 <HAL_SD_GetCardState>
 8001124:	60f8      	str	r0, [r7, #12]
    LOG_INFO("[SDStorage] HAL SD card state: %d", card_state);
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	496b      	ldr	r1, [pc, #428]	@ (80012d8 <SDStorage_Init+0x1c8>)
 800112a:	2001      	movs	r0, #1
 800112c:	f003 fd88 	bl	8004c40 <LOGGER_SendFormatted>
    
    DSTATUS disk_status = disk_initialize(0);
 8001130:	2000      	movs	r0, #0
 8001132:	f013 fe2d 	bl	8014d90 <disk_initialize>
 8001136:	4603      	mov	r3, r0
 8001138:	72fb      	strb	r3, [r7, #11]
    LOG_INFO("[SDStorage] disk_initialize result: 0x%02X", disk_status);
 800113a:	7afb      	ldrb	r3, [r7, #11]
 800113c:	461a      	mov	r2, r3
 800113e:	4967      	ldr	r1, [pc, #412]	@ (80012dc <SDStorage_Init+0x1cc>)
 8001140:	2001      	movs	r0, #1
 8001142:	f003 fd7d 	bl	8004c40 <LOGGER_SendFormatted>
    
    // disk_initialize 실패 시 조기 종료 (블로킹 방지)
    if (disk_status != 0) {
 8001146:	7afb      	ldrb	r3, [r7, #11]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d00a      	beq.n	8001162 <SDStorage_Init+0x52>
        LOG_ERROR("[SDStorage] disk_initialize failed - SD card not ready");
 800114c:	4964      	ldr	r1, [pc, #400]	@ (80012e0 <SDStorage_Init+0x1d0>)
 800114e:	2003      	movs	r0, #3
 8001150:	f003 fd76 	bl	8004c40 <LOGGER_SendFormatted>
        LOG_ERROR("[SDStorage] Possible causes: write-protected, bad card, or BSP/HAL conflict");
 8001154:	4963      	ldr	r1, [pc, #396]	@ (80012e4 <SDStorage_Init+0x1d4>)
 8001156:	2003      	movs	r0, #3
 8001158:	f003 fd72 	bl	8004c40 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 800115c:	f04f 33ff 	mov.w	r3, #4294967295
 8001160:	e0b1      	b.n	80012c6 <SDStorage_Init+0x1b6>
    }
    
    // 2. 파일시스템 마운트 시도 (지연 마운트로 변경 - 블로킹 방지)
    LOG_INFO("[SDStorage] Using deferred mount (flag=0) to avoid blocking...");
 8001162:	4961      	ldr	r1, [pc, #388]	@ (80012e8 <SDStorage_Init+0x1d8>)
 8001164:	2001      	movs	r0, #1
 8001166:	f003 fd6b 	bl	8004c40 <LOGGER_SendFormatted>
    
    // f_mount 호출 전에 약간의 지연 (SD 카드 안정화)
    #ifdef STM32F746xx
    HAL_Delay(100);
 800116a:	2064      	movs	r0, #100	@ 0x64
 800116c:	f004 fb04 	bl	8005778 <HAL_Delay>
    #endif
    
    // 지연 마운트: 실제 파일 접근 시까지 마운트 지연 (거의 항상 성공)
    FRESULT mount_result = f_mount(&SDFatFS, SDPath, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	495e      	ldr	r1, [pc, #376]	@ (80012ec <SDStorage_Init+0x1dc>)
 8001174:	485e      	ldr	r0, [pc, #376]	@ (80012f0 <SDStorage_Init+0x1e0>)
 8001176:	f015 fb77 	bl	8016868 <f_mount>
 800117a:	4603      	mov	r3, r0
 800117c:	72bb      	strb	r3, [r7, #10]
    LOG_INFO("[SDStorage] f_mount(deferred) result: %d", mount_result);
 800117e:	7abb      	ldrb	r3, [r7, #10]
 8001180:	461a      	mov	r2, r3
 8001182:	495c      	ldr	r1, [pc, #368]	@ (80012f4 <SDStorage_Init+0x1e4>)
 8001184:	2001      	movs	r0, #1
 8001186:	f003 fd5b 	bl	8004c40 <LOGGER_SendFormatted>
    
    // 지연 마운트 성공 시 실제 SD 상태는 첫 파일 작업에서 확인됨
    if (mount_result == FR_OK) {
 800118a:	7abb      	ldrb	r3, [r7, #10]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d103      	bne.n	8001198 <SDStorage_Init+0x88>
        LOG_INFO("[SDStorage] Deferred mount successful - SD will be tested on first file operation");
 8001190:	4959      	ldr	r1, [pc, #356]	@ (80012f8 <SDStorage_Init+0x1e8>)
 8001192:	2001      	movs	r0, #1
 8001194:	f003 fd54 	bl	8004c40 <LOGGER_SendFormatted>
    }
    
    if (mount_result != FR_OK) {
 8001198:	7abb      	ldrb	r3, [r7, #10]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d062      	beq.n	8001264 <SDStorage_Init+0x154>
        LOG_WARN("[SDStorage] f_mount failed, attempting file system creation...");
 800119e:	4957      	ldr	r1, [pc, #348]	@ (80012fc <SDStorage_Init+0x1ec>)
 80011a0:	2002      	movs	r0, #2
 80011a2:	f003 fd4d 	bl	8004c40 <LOGGER_SendFormatted>
        
        // 3. 파일시스템 자동 생성 시도 (ST 커뮤니티 가이드 기반)
        if (mount_result == FR_NOT_READY || mount_result == FR_NO_FILESYSTEM) {
 80011a6:	7abb      	ldrb	r3, [r7, #10]
 80011a8:	2b03      	cmp	r3, #3
 80011aa:	d002      	beq.n	80011b2 <SDStorage_Init+0xa2>
 80011ac:	7abb      	ldrb	r3, [r7, #10]
 80011ae:	2b0d      	cmp	r3, #13
 80011b0:	d14e      	bne.n	8001250 <SDStorage_Init+0x140>
            // 작업 버퍼 할당 (전역 또는 스택)
            static BYTE work[_MAX_SS];
            
            // FM_ANY로 먼저 시도
            FRESULT mkfs_result = f_mkfs(SDPath, FM_ANY, 0, work, sizeof(work));
 80011b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	4b51      	ldr	r3, [pc, #324]	@ (8001300 <SDStorage_Init+0x1f0>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	2107      	movs	r1, #7
 80011be:	484b      	ldr	r0, [pc, #300]	@ (80012ec <SDStorage_Init+0x1dc>)
 80011c0:	f015 ffd4 	bl	801716c <f_mkfs>
 80011c4:	4603      	mov	r3, r0
 80011c6:	727b      	strb	r3, [r7, #9]
            LOG_INFO("[SDStorage] f_mkfs(FM_ANY) result: %d", mkfs_result);
 80011c8:	7a7b      	ldrb	r3, [r7, #9]
 80011ca:	461a      	mov	r2, r3
 80011cc:	494d      	ldr	r1, [pc, #308]	@ (8001304 <SDStorage_Init+0x1f4>)
 80011ce:	2001      	movs	r0, #1
 80011d0:	f003 fd36 	bl	8004c40 <LOGGER_SendFormatted>
            
            if (mkfs_result != FR_OK) {
 80011d4:	7a7b      	ldrb	r3, [r7, #9]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d021      	beq.n	800121e <SDStorage_Init+0x10e>
                // FAT32 강제 생성 시도 (4096 클러스터 사이즈)
                mkfs_result = f_mkfs(SDPath, FM_FAT32, 4096, work, sizeof(work));
 80011da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	4b47      	ldr	r3, [pc, #284]	@ (8001300 <SDStorage_Init+0x1f0>)
 80011e2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80011e6:	2102      	movs	r1, #2
 80011e8:	4840      	ldr	r0, [pc, #256]	@ (80012ec <SDStorage_Init+0x1dc>)
 80011ea:	f015 ffbf 	bl	801716c <f_mkfs>
 80011ee:	4603      	mov	r3, r0
 80011f0:	727b      	strb	r3, [r7, #9]
                LOG_INFO("[SDStorage] f_mkfs(FM_FAT32) result: %d", mkfs_result);
 80011f2:	7a7b      	ldrb	r3, [r7, #9]
 80011f4:	461a      	mov	r2, r3
 80011f6:	4944      	ldr	r1, [pc, #272]	@ (8001308 <SDStorage_Init+0x1f8>)
 80011f8:	2001      	movs	r0, #1
 80011fa:	f003 fd21 	bl	8004c40 <LOGGER_SendFormatted>
                
                if (mkfs_result != FR_OK) {
 80011fe:	7a7b      	ldrb	r3, [r7, #9]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d00c      	beq.n	800121e <SDStorage_Init+0x10e>
                    LOG_ERROR("[SDStorage] File system creation failed: %d", mkfs_result);
 8001204:	7a7b      	ldrb	r3, [r7, #9]
 8001206:	461a      	mov	r2, r3
 8001208:	4940      	ldr	r1, [pc, #256]	@ (800130c <SDStorage_Init+0x1fc>)
 800120a:	2003      	movs	r0, #3
 800120c:	f003 fd18 	bl	8004c40 <LOGGER_SendFormatted>
                    LOG_ERROR("[SDStorage] Possible SD card hardware issue - try different card");
 8001210:	493f      	ldr	r1, [pc, #252]	@ (8001310 <SDStorage_Init+0x200>)
 8001212:	2003      	movs	r0, #3
 8001214:	f003 fd14 	bl	8004c40 <LOGGER_SendFormatted>
                    return SDSTORAGE_ERROR;
 8001218:	f04f 33ff 	mov.w	r3, #4294967295
 800121c:	e053      	b.n	80012c6 <SDStorage_Init+0x1b6>
                }
            }
            
            // 파일시스템 생성 후 재마운트 시도
            mount_result = f_mount(&SDFatFS, SDPath, 1);
 800121e:	2201      	movs	r2, #1
 8001220:	4932      	ldr	r1, [pc, #200]	@ (80012ec <SDStorage_Init+0x1dc>)
 8001222:	4833      	ldr	r0, [pc, #204]	@ (80012f0 <SDStorage_Init+0x1e0>)
 8001224:	f015 fb20 	bl	8016868 <f_mount>
 8001228:	4603      	mov	r3, r0
 800122a:	72bb      	strb	r3, [r7, #10]
            LOG_INFO("[SDStorage] Re-mount after mkfs result: %d", mount_result);
 800122c:	7abb      	ldrb	r3, [r7, #10]
 800122e:	461a      	mov	r2, r3
 8001230:	4938      	ldr	r1, [pc, #224]	@ (8001314 <SDStorage_Init+0x204>)
 8001232:	2001      	movs	r0, #1
 8001234:	f003 fd04 	bl	8004c40 <LOGGER_SendFormatted>
            
            if (mount_result != FR_OK) {
 8001238:	7abb      	ldrb	r3, [r7, #10]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d011      	beq.n	8001262 <SDStorage_Init+0x152>
                LOG_ERROR("[SDStorage] Re-mount failed after mkfs: %d", mount_result);
 800123e:	7abb      	ldrb	r3, [r7, #10]
 8001240:	461a      	mov	r2, r3
 8001242:	4935      	ldr	r1, [pc, #212]	@ (8001318 <SDStorage_Init+0x208>)
 8001244:	2003      	movs	r0, #3
 8001246:	f003 fcfb 	bl	8004c40 <LOGGER_SendFormatted>
                return SDSTORAGE_ERROR;
 800124a:	f04f 33ff 	mov.w	r3, #4294967295
 800124e:	e03a      	b.n	80012c6 <SDStorage_Init+0x1b6>
            }
        } else {
            LOG_ERROR("[SDStorage] Mount failed with unrecoverable error: %d", mount_result);
 8001250:	7abb      	ldrb	r3, [r7, #10]
 8001252:	461a      	mov	r2, r3
 8001254:	4931      	ldr	r1, [pc, #196]	@ (800131c <SDStorage_Init+0x20c>)
 8001256:	2003      	movs	r0, #3
 8001258:	f003 fcf2 	bl	8004c40 <LOGGER_SendFormatted>
            return SDSTORAGE_ERROR;
 800125c:	f04f 33ff 	mov.w	r3, #4294967295
 8001260:	e031      	b.n	80012c6 <SDStorage_Init+0x1b6>
        if (mount_result == FR_NOT_READY || mount_result == FR_NO_FILESYSTEM) {
 8001262:	bf00      	nop
        }
    }
    
    LOG_INFO("[SDStorage] File system mount successful");
 8001264:	492e      	ldr	r1, [pc, #184]	@ (8001320 <SDStorage_Init+0x210>)
 8001266:	2001      	movs	r0, #1
 8001268:	f003 fcea 	bl	8004c40 <LOGGER_SendFormatted>
    // PC/테스트 환경: 시뮬레이션
    LOG_INFO("[SDStorage] Test environment - simulating successful initialization");
#endif

    // 로그 디렉토리 생성 (지연 마운트 후 첫 실제 파일 작업)
    LOG_INFO("[SDStorage] Creating log directory (first real SD operation)...");
 800126c:	492d      	ldr	r1, [pc, #180]	@ (8001324 <SDStorage_Init+0x214>)
 800126e:	2001      	movs	r0, #1
 8001270:	f003 fce6 	bl	8004c40 <LOGGER_SendFormatted>
    int dir_result = _create_log_directory();
 8001274:	f000 f958 	bl	8001528 <_create_log_directory>
 8001278:	6078      	str	r0, [r7, #4]
    if (dir_result != SDSTORAGE_OK) {
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d00d      	beq.n	800129c <SDStorage_Init+0x18c>
        LOG_ERROR("[SDStorage] Failed to create log directory - SD card may have write issues");
 8001280:	4929      	ldr	r1, [pc, #164]	@ (8001328 <SDStorage_Init+0x218>)
 8001282:	2003      	movs	r0, #3
 8001284:	f003 fcdc 	bl	8004c40 <LOGGER_SendFormatted>
        LOG_WARN("[SDStorage] Continuing without SD logging - terminal only mode");
 8001288:	4928      	ldr	r1, [pc, #160]	@ (800132c <SDStorage_Init+0x21c>)
 800128a:	2002      	movs	r0, #2
 800128c:	f003 fcd8 	bl	8004c40 <LOGGER_SendFormatted>
        // SD 문제가 있어도 계속 진행 (terminal logging만 사용)
        g_sd_ready = false;  // SD 비활성화
 8001290:	4b27      	ldr	r3, [pc, #156]	@ (8001330 <SDStorage_Init+0x220>)
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]
        return SDSTORAGE_ERROR;
 8001296:	f04f 33ff 	mov.w	r3, #4294967295
 800129a:	e014      	b.n	80012c6 <SDStorage_Init+0x1b6>
    }
    LOG_INFO("[SDStorage] Log directory created successfully");
 800129c:	4925      	ldr	r1, [pc, #148]	@ (8001334 <SDStorage_Init+0x224>)
 800129e:	2001      	movs	r0, #1
 80012a0:	f003 fcce 	bl	8004c40 <LOGGER_SendFormatted>
    
    g_sd_ready = true;
 80012a4:	4b22      	ldr	r3, [pc, #136]	@ (8001330 <SDStorage_Init+0x220>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	701a      	strb	r2, [r3, #0]
    g_current_log_size = 0;
 80012aa:	4b23      	ldr	r3, [pc, #140]	@ (8001338 <SDStorage_Init+0x228>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
    memset(g_current_log_file, 0, sizeof(g_current_log_file));
 80012b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012b4:	2100      	movs	r1, #0
 80012b6:	4821      	ldr	r0, [pc, #132]	@ (800133c <SDStorage_Init+0x22c>)
 80012b8:	f01a f8be 	bl	801b438 <memset>
    
    LOG_INFO("[SDStorage] Initialization completed successfully");
 80012bc:	4920      	ldr	r1, [pc, #128]	@ (8001340 <SDStorage_Init+0x230>)
 80012be:	2001      	movs	r0, #1
 80012c0:	f003 fcbe 	bl	8004c40 <LOGGER_SendFormatted>
    return SDSTORAGE_OK;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	0801c58c 	.word	0x0801c58c
 80012d4:	20001478 	.word	0x20001478
 80012d8:	0801c5bc 	.word	0x0801c5bc
 80012dc:	0801c5e0 	.word	0x0801c5e0
 80012e0:	0801c60c 	.word	0x0801c60c
 80012e4:	0801c644 	.word	0x0801c644
 80012e8:	0801c690 	.word	0x0801c690
 80012ec:	200021a4 	.word	0x200021a4
 80012f0:	200021a8 	.word	0x200021a8
 80012f4:	0801c6d0 	.word	0x0801c6d0
 80012f8:	0801c6fc 	.word	0x0801c6fc
 80012fc:	0801c750 	.word	0x0801c750
 8001300:	20000578 	.word	0x20000578
 8001304:	0801c790 	.word	0x0801c790
 8001308:	0801c7b8 	.word	0x0801c7b8
 800130c:	0801c7e0 	.word	0x0801c7e0
 8001310:	0801c80c 	.word	0x0801c80c
 8001314:	0801c850 	.word	0x0801c850
 8001318:	0801c87c 	.word	0x0801c87c
 800131c:	0801c8a8 	.word	0x0801c8a8
 8001320:	0801c8e0 	.word	0x0801c8e0
 8001324:	0801c90c 	.word	0x0801c90c
 8001328:	0801c94c 	.word	0x0801c94c
 800132c:	0801c998 	.word	0x0801c998
 8001330:	2000023e 	.word	0x2000023e
 8001334:	0801c9d8 	.word	0x0801c9d8
 8001338:	20000340 	.word	0x20000340
 800133c:	20000240 	.word	0x20000240
 8001340:	0801ca08 	.word	0x0801ca08

08001344 <SDStorage_WriteLog>:

int SDStorage_WriteLog(const void* data, size_t size)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
    if (!g_sd_ready) {
 800134e:	4b2e      	ldr	r3, [pc, #184]	@ (8001408 <SDStorage_WriteLog+0xc4>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	f083 0301 	eor.w	r3, r3, #1
 8001356:	b2db      	uxtb	r3, r3
 8001358:	2b00      	cmp	r3, #0
 800135a:	d002      	beq.n	8001362 <SDStorage_WriteLog+0x1e>
        return SDSTORAGE_NOT_READY;
 800135c:	f06f 0301 	mvn.w	r3, #1
 8001360:	e04e      	b.n	8001400 <SDStorage_WriteLog+0xbc>
    }
    
    if (data == NULL || size == 0) {
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d002      	beq.n	800136e <SDStorage_WriteLog+0x2a>
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d102      	bne.n	8001374 <SDStorage_WriteLog+0x30>
        return SDSTORAGE_INVALID_PARAM;
 800136e:	f06f 0304 	mvn.w	r3, #4
 8001372:	e045      	b.n	8001400 <SDStorage_WriteLog+0xbc>
    }
    
    // 새 로그 파일이 필요한 경우 생성
    if (strlen(g_current_log_file) == 0 || 
 8001374:	4b25      	ldr	r3, [pc, #148]	@ (800140c <SDStorage_WriteLog+0xc8>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d006      	beq.n	800138a <SDStorage_WriteLog+0x46>
        g_current_log_size + size > SDSTORAGE_MAX_LOG_SIZE) {
 800137c:	4b24      	ldr	r3, [pc, #144]	@ (8001410 <SDStorage_WriteLog+0xcc>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	4413      	add	r3, r2
    if (strlen(g_current_log_file) == 0 || 
 8001384:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001388:	d907      	bls.n	800139a <SDStorage_WriteLog+0x56>
        if (SDStorage_CreateNewLogFile() != SDSTORAGE_OK) {
 800138a:	f000 f853 	bl	8001434 <SDStorage_CreateNewLogFile>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d002      	beq.n	800139a <SDStorage_WriteLog+0x56>
            return SDSTORAGE_FILE_ERROR;
 8001394:	f06f 0302 	mvn.w	r3, #2
 8001398:	e032      	b.n	8001400 <SDStorage_WriteLog+0xbc>
        }
    }

#ifdef STM32F746xx
    // STM32 환경: FatFs를 사용한 파일 쓰기
    if (!g_file_open) {
 800139a:	4b1e      	ldr	r3, [pc, #120]	@ (8001414 <SDStorage_WriteLog+0xd0>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	f083 0301 	eor.w	r3, r3, #1
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d00d      	beq.n	80013c4 <SDStorage_WriteLog+0x80>
        if (f_open(&g_log_file, g_current_log_file, FA_WRITE | FA_OPEN_APPEND) != FR_OK) {
 80013a8:	2232      	movs	r2, #50	@ 0x32
 80013aa:	4918      	ldr	r1, [pc, #96]	@ (800140c <SDStorage_WriteLog+0xc8>)
 80013ac:	481a      	ldr	r0, [pc, #104]	@ (8001418 <SDStorage_WriteLog+0xd4>)
 80013ae:	f015 fabf 	bl	8016930 <f_open>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d002      	beq.n	80013be <SDStorage_WriteLog+0x7a>
            return SDSTORAGE_FILE_ERROR;
 80013b8:	f06f 0302 	mvn.w	r3, #2
 80013bc:	e020      	b.n	8001400 <SDStorage_WriteLog+0xbc>
        }
        g_file_open = true;
 80013be:	4b15      	ldr	r3, [pc, #84]	@ (8001414 <SDStorage_WriteLog+0xd0>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	701a      	strb	r2, [r3, #0]
    }
    
    UINT bytes_written;
    if (f_write(&g_log_file, data, size, &bytes_written) != FR_OK) {
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	4812      	ldr	r0, [pc, #72]	@ (8001418 <SDStorage_WriteLog+0xd4>)
 80013ce:	f015 fc70 	bl	8016cb2 <f_write>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d002      	beq.n	80013de <SDStorage_WriteLog+0x9a>
        return SDSTORAGE_FILE_ERROR;
 80013d8:	f06f 0302 	mvn.w	r3, #2
 80013dc:	e010      	b.n	8001400 <SDStorage_WriteLog+0xbc>
    }
    
    if (bytes_written != size) {
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d002      	beq.n	80013ec <SDStorage_WriteLog+0xa8>
        return SDSTORAGE_DISK_FULL;
 80013e6:	f06f 0303 	mvn.w	r3, #3
 80013ea:	e009      	b.n	8001400 <SDStorage_WriteLog+0xbc>
    }
    
    // 즉시 플러시하여 데이터 안정성 확보
    f_sync(&g_log_file);
 80013ec:	480a      	ldr	r0, [pc, #40]	@ (8001418 <SDStorage_WriteLog+0xd4>)
 80013ee:	f015 fe04 	bl	8016ffa <f_sync>
#else
    // PC/테스트 환경: 파일 I/O 시뮬레이션 (항상 성공)
    // 실제 파일 쓰기 없이 성공으로 처리
#endif

    g_current_log_size += size;
 80013f2:	4b07      	ldr	r3, [pc, #28]	@ (8001410 <SDStorage_WriteLog+0xcc>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	4413      	add	r3, r2
 80013fa:	4a05      	ldr	r2, [pc, #20]	@ (8001410 <SDStorage_WriteLog+0xcc>)
 80013fc:	6013      	str	r3, [r2, #0]
    return SDSTORAGE_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	2000023e 	.word	0x2000023e
 800140c:	20000240 	.word	0x20000240
 8001410:	20000340 	.word	0x20000340
 8001414:	20000574 	.word	0x20000574
 8001418:	20000344 	.word	0x20000344

0800141c <SDStorage_IsReady>:

bool SDStorage_IsReady(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
    return g_sd_ready;
 8001420:	4b03      	ldr	r3, [pc, #12]	@ (8001430 <SDStorage_IsReady+0x14>)
 8001422:	781b      	ldrb	r3, [r3, #0]
}
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	2000023e 	.word	0x2000023e

08001434 <SDStorage_CreateNewLogFile>:
        memset(g_current_log_file, 0, sizeof(g_current_log_file));
    }
}

int SDStorage_CreateNewLogFile(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
    if (!g_sd_ready) {
 800143a:	4b2f      	ldr	r3, [pc, #188]	@ (80014f8 <SDStorage_CreateNewLogFile+0xc4>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	f083 0301 	eor.w	r3, r3, #1
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b00      	cmp	r3, #0
 8001446:	d002      	beq.n	800144e <SDStorage_CreateNewLogFile+0x1a>
        return SDSTORAGE_NOT_READY;
 8001448:	f06f 0301 	mvn.w	r3, #1
 800144c:	e04f      	b.n	80014ee <SDStorage_CreateNewLogFile+0xba>
    }
    
    // 이전 파일이 열려있다면 닫기
#ifdef STM32F746xx
    if (g_file_open) {
 800144e:	4b2b      	ldr	r3, [pc, #172]	@ (80014fc <SDStorage_CreateNewLogFile+0xc8>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d005      	beq.n	8001462 <SDStorage_CreateNewLogFile+0x2e>
        f_close(&g_log_file);
 8001456:	482a      	ldr	r0, [pc, #168]	@ (8001500 <SDStorage_CreateNewLogFile+0xcc>)
 8001458:	f015 fe58 	bl	801710c <f_close>
        g_file_open = false;
 800145c:	4b27      	ldr	r3, [pc, #156]	@ (80014fc <SDStorage_CreateNewLogFile+0xc8>)
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]
        g_log_file = NULL;
    }
#endif
    
    // 새 파일명 생성
    if (_generate_log_filename(g_current_log_file, sizeof(g_current_log_file)) != SDSTORAGE_OK) {
 8001462:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001466:	4827      	ldr	r0, [pc, #156]	@ (8001504 <SDStorage_CreateNewLogFile+0xd0>)
 8001468:	f000 f92e 	bl	80016c8 <_generate_log_filename>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d002      	beq.n	8001478 <SDStorage_CreateNewLogFile+0x44>
        return SDSTORAGE_ERROR;
 8001472:	f04f 33ff 	mov.w	r3, #4294967295
 8001476:	e03a      	b.n	80014ee <SDStorage_CreateNewLogFile+0xba>
    }
    
    // 파일 생성 확인 (SD 쓰기 문제로 인한 블로킹 방지)
#ifdef STM32F746xx
    LOG_INFO("[SDStorage] Attempting to create log file: %s", g_current_log_file);
 8001478:	4a22      	ldr	r2, [pc, #136]	@ (8001504 <SDStorage_CreateNewLogFile+0xd0>)
 800147a:	4923      	ldr	r1, [pc, #140]	@ (8001508 <SDStorage_CreateNewLogFile+0xd4>)
 800147c:	2001      	movs	r0, #1
 800147e:	f003 fbdf 	bl	8004c40 <LOGGER_SendFormatted>
    
    // f_open 호출 전 로깅
    LOG_INFO("[SDStorage] Calling f_open with FA_CREATE_NEW | FA_WRITE...");
 8001482:	4922      	ldr	r1, [pc, #136]	@ (800150c <SDStorage_CreateNewLogFile+0xd8>)
 8001484:	2001      	movs	r0, #1
 8001486:	f003 fbdb 	bl	8004c40 <LOGGER_SendFormatted>
    FRESULT open_result = f_open(&g_log_file, g_current_log_file, FA_CREATE_NEW | FA_WRITE);
 800148a:	2206      	movs	r2, #6
 800148c:	491d      	ldr	r1, [pc, #116]	@ (8001504 <SDStorage_CreateNewLogFile+0xd0>)
 800148e:	481c      	ldr	r0, [pc, #112]	@ (8001500 <SDStorage_CreateNewLogFile+0xcc>)
 8001490:	f015 fa4e 	bl	8016930 <f_open>
 8001494:	4603      	mov	r3, r0
 8001496:	71fb      	strb	r3, [r7, #7]
    LOG_INFO("[SDStorage] f_open result: %d", open_result);
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	461a      	mov	r2, r3
 800149c:	491c      	ldr	r1, [pc, #112]	@ (8001510 <SDStorage_CreateNewLogFile+0xdc>)
 800149e:	2001      	movs	r0, #1
 80014a0:	f003 fbce 	bl	8004c40 <LOGGER_SendFormatted>
    
    if (open_result != FR_OK) {
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d00f      	beq.n	80014ca <SDStorage_CreateNewLogFile+0x96>
        LOG_ERROR("[SDStorage] f_open failed: %d - SD write problem detected", open_result);
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	461a      	mov	r2, r3
 80014ae:	4919      	ldr	r1, [pc, #100]	@ (8001514 <SDStorage_CreateNewLogFile+0xe0>)
 80014b0:	2003      	movs	r0, #3
 80014b2:	f003 fbc5 	bl	8004c40 <LOGGER_SendFormatted>
        LOG_WARN("[SDStorage] Disabling SD logging due to file creation failure");
 80014b6:	4918      	ldr	r1, [pc, #96]	@ (8001518 <SDStorage_CreateNewLogFile+0xe4>)
 80014b8:	2002      	movs	r0, #2
 80014ba:	f003 fbc1 	bl	8004c40 <LOGGER_SendFormatted>
        g_sd_ready = false;  // SD 로깅 비활성화
 80014be:	4b0e      	ldr	r3, [pc, #56]	@ (80014f8 <SDStorage_CreateNewLogFile+0xc4>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
        return SDSTORAGE_FILE_ERROR;
 80014c4:	f06f 0302 	mvn.w	r3, #2
 80014c8:	e011      	b.n	80014ee <SDStorage_CreateNewLogFile+0xba>
    }
    
    LOG_INFO("[SDStorage] File created successfully, closing...");
 80014ca:	4914      	ldr	r1, [pc, #80]	@ (800151c <SDStorage_CreateNewLogFile+0xe8>)
 80014cc:	2001      	movs	r0, #1
 80014ce:	f003 fbb7 	bl	8004c40 <LOGGER_SendFormatted>
    f_close(&g_log_file);
 80014d2:	480b      	ldr	r0, [pc, #44]	@ (8001500 <SDStorage_CreateNewLogFile+0xcc>)
 80014d4:	f015 fe1a 	bl	801710c <f_close>
    g_file_open = false;
 80014d8:	4b08      	ldr	r3, [pc, #32]	@ (80014fc <SDStorage_CreateNewLogFile+0xc8>)
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
    LOG_INFO("[SDStorage] File closed, ready for logging");
 80014de:	4910      	ldr	r1, [pc, #64]	@ (8001520 <SDStorage_CreateNewLogFile+0xec>)
 80014e0:	2001      	movs	r0, #1
 80014e2:	f003 fbad 	bl	8004c40 <LOGGER_SendFormatted>
#else
    // PC/테스트 환경: 파일 생성 시뮬레이션 (항상 성공)
    LOG_INFO("[SDStorage] Test environment - file creation simulated");
#endif
    
    g_current_log_size = 0;
 80014e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001524 <SDStorage_CreateNewLogFile+0xf0>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
    return SDSTORAGE_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	2000023e 	.word	0x2000023e
 80014fc:	20000574 	.word	0x20000574
 8001500:	20000344 	.word	0x20000344
 8001504:	20000240 	.word	0x20000240
 8001508:	0801ca3c 	.word	0x0801ca3c
 800150c:	0801ca6c 	.word	0x0801ca6c
 8001510:	0801caa8 	.word	0x0801caa8
 8001514:	0801cac8 	.word	0x0801cac8
 8001518:	0801cb04 	.word	0x0801cb04
 800151c:	0801cb44 	.word	0x0801cb44
 8001520:	0801cb78 	.word	0x0801cb78
 8001524:	20000340 	.word	0x20000340

08001528 <_create_log_directory>:
    return g_current_log_size;
}

// 내부 함수 구현
static int _create_log_directory(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af02      	add	r7, sp, #8
#ifdef STM32F746xx
    // STM32: SD카드 저수준 테스트 먼저 수행
    LOG_INFO("[SDStorage] Testing SD card at HAL level before f_mkdir...");
 800152e:	4951      	ldr	r1, [pc, #324]	@ (8001674 <_create_log_directory+0x14c>)
 8001530:	2001      	movs	r0, #1
 8001532:	f003 fb85 	bl	8004c40 <LOGGER_SendFormatted>
    
    extern SD_HandleTypeDef hsd1;
    
    // 1. SD카드 읽기 테스트 (섹터 0 읽기)
    static uint8_t read_buffer[512];
    HAL_StatusTypeDef read_result = HAL_SD_ReadBlocks(&hsd1, read_buffer, 0, 1, 5000);
 8001536:	f241 3388 	movw	r3, #5000	@ 0x1388
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	2301      	movs	r3, #1
 800153e:	2200      	movs	r2, #0
 8001540:	494d      	ldr	r1, [pc, #308]	@ (8001678 <_create_log_directory+0x150>)
 8001542:	484e      	ldr	r0, [pc, #312]	@ (800167c <_create_log_directory+0x154>)
 8001544:	f00b f922 	bl	800c78c <HAL_SD_ReadBlocks>
 8001548:	4603      	mov	r3, r0
 800154a:	71fb      	strb	r3, [r7, #7]
    LOG_INFO("[SDStorage] HAL_SD_ReadBlocks result: %d", read_result);
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	461a      	mov	r2, r3
 8001550:	494b      	ldr	r1, [pc, #300]	@ (8001680 <_create_log_directory+0x158>)
 8001552:	2001      	movs	r0, #1
 8001554:	f003 fb74 	bl	8004c40 <LOGGER_SendFormatted>
    
    if (read_result != HAL_OK) {
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d006      	beq.n	800156c <_create_log_directory+0x44>
        LOG_ERROR("[SDStorage] SD card read test failed - hardware problem");
 800155e:	4949      	ldr	r1, [pc, #292]	@ (8001684 <_create_log_directory+0x15c>)
 8001560:	2003      	movs	r0, #3
 8001562:	f003 fb6d 	bl	8004c40 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 8001566:	f04f 33ff 	mov.w	r3, #4294967295
 800156a:	e07e      	b.n	800166a <_create_log_directory+0x142>
    }
    
    // 2. SD카드 쓰기 테스트 (임시 섹터에 쓰기)
    static uint8_t write_buffer[512];
    memset(write_buffer, 0xAA, 512);  // 테스트 패턴
 800156c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001570:	21aa      	movs	r1, #170	@ 0xaa
 8001572:	4845      	ldr	r0, [pc, #276]	@ (8001688 <_create_log_directory+0x160>)
 8001574:	f019 ff60 	bl	801b438 <memset>
    
    LOG_INFO("[SDStorage] Testing SD card write capability...");
 8001578:	4944      	ldr	r1, [pc, #272]	@ (800168c <_create_log_directory+0x164>)
 800157a:	2001      	movs	r0, #1
 800157c:	f003 fb60 	bl	8004c40 <LOGGER_SendFormatted>
    HAL_StatusTypeDef write_result = HAL_SD_WriteBlocks(&hsd1, write_buffer, 1000, 1, 5000);
 8001580:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	2301      	movs	r3, #1
 8001588:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800158c:	493e      	ldr	r1, [pc, #248]	@ (8001688 <_create_log_directory+0x160>)
 800158e:	483b      	ldr	r0, [pc, #236]	@ (800167c <_create_log_directory+0x154>)
 8001590:	f00b fada 	bl	800cb48 <HAL_SD_WriteBlocks>
 8001594:	4603      	mov	r3, r0
 8001596:	71bb      	strb	r3, [r7, #6]
    LOG_INFO("[SDStorage] HAL_SD_WriteBlocks result: %d", write_result);
 8001598:	79bb      	ldrb	r3, [r7, #6]
 800159a:	461a      	mov	r2, r3
 800159c:	493c      	ldr	r1, [pc, #240]	@ (8001690 <_create_log_directory+0x168>)
 800159e:	2001      	movs	r0, #1
 80015a0:	f003 fb4e 	bl	8004c40 <LOGGER_SendFormatted>
    
    if (write_result != HAL_OK) {
 80015a4:	79bb      	ldrb	r3, [r7, #6]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d006      	beq.n	80015b8 <_create_log_directory+0x90>
        LOG_ERROR("[SDStorage] SD card write test failed - card may be write-protected or damaged");
 80015aa:	493a      	ldr	r1, [pc, #232]	@ (8001694 <_create_log_directory+0x16c>)
 80015ac:	2003      	movs	r0, #3
 80015ae:	f003 fb47 	bl	8004c40 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
 80015b6:	e058      	b.n	800166a <_create_log_directory+0x142>
    }
    
    // 3. 쓰기 검증 (방금 쓴 데이터 읽기)
    static uint8_t verify_buffer[512];
    HAL_StatusTypeDef verify_result = HAL_SD_ReadBlocks(&hsd1, verify_buffer, 1000, 1, 5000);
 80015b8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	2301      	movs	r3, #1
 80015c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015c4:	4934      	ldr	r1, [pc, #208]	@ (8001698 <_create_log_directory+0x170>)
 80015c6:	482d      	ldr	r0, [pc, #180]	@ (800167c <_create_log_directory+0x154>)
 80015c8:	f00b f8e0 	bl	800c78c <HAL_SD_ReadBlocks>
 80015cc:	4603      	mov	r3, r0
 80015ce:	717b      	strb	r3, [r7, #5]
    LOG_INFO("[SDStorage] HAL_SD_ReadBlocks(verify) result: %d", verify_result);
 80015d0:	797b      	ldrb	r3, [r7, #5]
 80015d2:	461a      	mov	r2, r3
 80015d4:	4931      	ldr	r1, [pc, #196]	@ (800169c <_create_log_directory+0x174>)
 80015d6:	2001      	movs	r0, #1
 80015d8:	f003 fb32 	bl	8004c40 <LOGGER_SendFormatted>
    
    if (verify_result == HAL_OK) {
 80015dc:	797b      	ldrb	r3, [r7, #5]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d111      	bne.n	8001606 <_create_log_directory+0xde>
        if (memcmp(write_buffer, verify_buffer, 512) == 0) {
 80015e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015e6:	492c      	ldr	r1, [pc, #176]	@ (8001698 <_create_log_directory+0x170>)
 80015e8:	4827      	ldr	r0, [pc, #156]	@ (8001688 <_create_log_directory+0x160>)
 80015ea:	f019 ff15 	bl	801b418 <memcmp>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d104      	bne.n	80015fe <_create_log_directory+0xd6>
            LOG_INFO("[SDStorage] ✅ SD card read/write test successful - hardware is OK");
 80015f4:	492a      	ldr	r1, [pc, #168]	@ (80016a0 <_create_log_directory+0x178>)
 80015f6:	2001      	movs	r0, #1
 80015f8:	f003 fb22 	bl	8004c40 <LOGGER_SendFormatted>
 80015fc:	e003      	b.n	8001606 <_create_log_directory+0xde>
        } else {
            LOG_WARN("[SDStorage] ⚠️ SD card data verification failed - possible data corruption");
 80015fe:	4929      	ldr	r1, [pc, #164]	@ (80016a4 <_create_log_directory+0x17c>)
 8001600:	2002      	movs	r0, #2
 8001602:	f003 fb1d 	bl	8004c40 <LOGGER_SendFormatted>
        }
    }
    
    // 4. HAL 테스트에서 검증 실패가 있어도 f_mkdir 시도 (블로킹 방지를 위해 스킵)
    if (verify_result != HAL_OK) {
 8001606:	797b      	ldrb	r3, [r7, #5]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d009      	beq.n	8001620 <_create_log_directory+0xf8>
        LOG_WARN("[SDStorage] Verify read failed - skipping f_mkdir to avoid blocking");
 800160c:	4926      	ldr	r1, [pc, #152]	@ (80016a8 <_create_log_directory+0x180>)
 800160e:	2002      	movs	r0, #2
 8001610:	f003 fb16 	bl	8004c40 <LOGGER_SendFormatted>
        LOG_INFO("[SDStorage] Will try direct file creation instead of directory");
 8001614:	4925      	ldr	r1, [pc, #148]	@ (80016ac <_create_log_directory+0x184>)
 8001616:	2001      	movs	r0, #1
 8001618:	f003 fb12 	bl	8004c40 <LOGGER_SendFormatted>
        return SDSTORAGE_OK;  // 디렉토리 없이도 파일 생성 시도
 800161c:	2300      	movs	r3, #0
 800161e:	e024      	b.n	800166a <_create_log_directory+0x142>
    }
    
    LOG_INFO("[SDStorage] HAL tests passed - skipping f_mkdir to avoid system blocking");
 8001620:	4923      	ldr	r1, [pc, #140]	@ (80016b0 <_create_log_directory+0x188>)
 8001622:	2001      	movs	r0, #1
 8001624:	f003 fb0c 	bl	8004c40 <LOGGER_SendFormatted>
    LOG_WARN("[SDStorage] Directory creation disabled - files will be created in root");
 8001628:	4922      	ldr	r1, [pc, #136]	@ (80016b4 <_create_log_directory+0x18c>)
 800162a:	2002      	movs	r0, #2
 800162c:	f003 fb08 	bl	8004c40 <LOGGER_SendFormatted>
    FRESULT mkdir_result = FR_OK;  // 강제로 성공 처리
 8001630:	2300      	movs	r3, #0
 8001632:	713b      	strb	r3, [r7, #4]
    LOG_INFO("[SDStorage] f_mkdir bypassed - proceeding with root directory logging");
 8001634:	4920      	ldr	r1, [pc, #128]	@ (80016b8 <_create_log_directory+0x190>)
 8001636:	2001      	movs	r0, #1
 8001638:	f003 fb02 	bl	8004c40 <LOGGER_SendFormatted>
    
    // FR_EXIST(9)는 이미 존재함을 의미하므로 성공으로 처리
    if (mkdir_result == FR_OK || mkdir_result == FR_EXIST) {
 800163c:	793b      	ldrb	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d002      	beq.n	8001648 <_create_log_directory+0x120>
 8001642:	793b      	ldrb	r3, [r7, #4]
 8001644:	2b08      	cmp	r3, #8
 8001646:	d105      	bne.n	8001654 <_create_log_directory+0x12c>
        LOG_INFO("[SDStorage] Directory ready (created or already exists)");
 8001648:	491c      	ldr	r1, [pc, #112]	@ (80016bc <_create_log_directory+0x194>)
 800164a:	2001      	movs	r0, #1
 800164c:	f003 faf8 	bl	8004c40 <LOGGER_SendFormatted>
        return SDSTORAGE_OK;
 8001650:	2300      	movs	r3, #0
 8001652:	e00a      	b.n	800166a <_create_log_directory+0x142>
    } else {
        LOG_ERROR("[SDStorage] f_mkdir failed: %d - FatFs level problem", mkdir_result);
 8001654:	793b      	ldrb	r3, [r7, #4]
 8001656:	461a      	mov	r2, r3
 8001658:	4919      	ldr	r1, [pc, #100]	@ (80016c0 <_create_log_directory+0x198>)
 800165a:	2003      	movs	r0, #3
 800165c:	f003 faf0 	bl	8004c40 <LOGGER_SendFormatted>
        LOG_INFO("[SDStorage] Will try direct file creation without directory");
 8001660:	4918      	ldr	r1, [pc, #96]	@ (80016c4 <_create_log_directory+0x19c>)
 8001662:	2001      	movs	r0, #1
 8001664:	f003 faec 	bl	8004c40 <LOGGER_SendFormatted>
        return SDSTORAGE_OK;  // 디렉토리 실패해도 루트에 파일 생성 시도
 8001668:	2300      	movs	r3, #0
#else
    // PC: mkdir 시뮬레이션 (테스트에서는 성공으로 가정)
    LOG_INFO("[SDStorage] Test environment - directory creation simulated");
    return SDSTORAGE_OK;
#endif
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	0801cba4 	.word	0x0801cba4
 8001678:	20000778 	.word	0x20000778
 800167c:	20001478 	.word	0x20001478
 8001680:	0801cbe0 	.word	0x0801cbe0
 8001684:	0801cc0c 	.word	0x0801cc0c
 8001688:	20000978 	.word	0x20000978
 800168c:	0801cc44 	.word	0x0801cc44
 8001690:	0801cc74 	.word	0x0801cc74
 8001694:	0801cca0 	.word	0x0801cca0
 8001698:	20000b78 	.word	0x20000b78
 800169c:	0801ccf0 	.word	0x0801ccf0
 80016a0:	0801cd24 	.word	0x0801cd24
 80016a4:	0801cd68 	.word	0x0801cd68
 80016a8:	0801cdb8 	.word	0x0801cdb8
 80016ac:	0801cdfc 	.word	0x0801cdfc
 80016b0:	0801ce3c 	.word	0x0801ce3c
 80016b4:	0801ce88 	.word	0x0801ce88
 80016b8:	0801ced0 	.word	0x0801ced0
 80016bc:	0801cf18 	.word	0x0801cf18
 80016c0:	0801cf50 	.word	0x0801cf50
 80016c4:	0801cf88 	.word	0x0801cf88

080016c8 <_generate_log_filename>:

static int _generate_log_filename(char* filename, size_t max_len)
{
 80016c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ca:	b095      	sub	sp, #84	@ 0x54
 80016cc:	af08      	add	r7, sp, #32
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
    uint32_t timestamp = _get_current_timestamp();
 80016d2:	f000 f86b 	bl	80017ac <_get_current_timestamp>
 80016d6:	6278      	str	r0, [r7, #36]	@ 0x24
    
    // YYYYMMDD_HHMMSS 형식으로 타임스탬프 생성
    uint16_t year = 2025;   // 기본값
 80016d8:	f240 73e9 	movw	r3, #2025	@ 0x7e9
 80016dc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    uint8_t month = 1, day = 1, hour = 0, minute = 0, second = 0;
 80016de:	2301      	movs	r3, #1
 80016e0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80016e4:	2301      	movs	r3, #1
 80016e6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 80016ea:	2300      	movs	r3, #0
 80016ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80016f0:	2300      	movs	r3, #0
 80016f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80016f6:	2300      	movs	r3, #0
 80016f8:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
#ifdef STM32F746xx
    // STM32: RTC에서 실제 시간 읽기
    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;
    
    if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK &&
 80016fc:	f107 030c 	add.w	r3, r7, #12
 8001700:	2200      	movs	r2, #0
 8001702:	4619      	mov	r1, r3
 8001704:	4825      	ldr	r0, [pc, #148]	@ (800179c <_generate_log_filename+0xd4>)
 8001706:	f00a fa59 	bl	800bbbc <HAL_RTC_GetTime>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d11c      	bne.n	800174a <_generate_log_filename+0x82>
        HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) == HAL_OK) {
 8001710:	f107 0308 	add.w	r3, r7, #8
 8001714:	2200      	movs	r2, #0
 8001716:	4619      	mov	r1, r3
 8001718:	4820      	ldr	r0, [pc, #128]	@ (800179c <_generate_log_filename+0xd4>)
 800171a:	f00a fb31 	bl	800bd80 <HAL_RTC_GetDate>
 800171e:	4603      	mov	r3, r0
    if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK &&
 8001720:	2b00      	cmp	r3, #0
 8001722:	d112      	bne.n	800174a <_generate_log_filename+0x82>
        year = 2000 + sDate.Year;
 8001724:	7afb      	ldrb	r3, [r7, #11]
 8001726:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800172a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        month = sDate.Month;
 800172c:	7a7b      	ldrb	r3, [r7, #9]
 800172e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        day = sDate.Date;
 8001732:	7abb      	ldrb	r3, [r7, #10]
 8001734:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        hour = sTime.Hours;
 8001738:	7b3b      	ldrb	r3, [r7, #12]
 800173a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        minute = sTime.Minutes;
 800173e:	7b7b      	ldrb	r3, [r7, #13]
 8001740:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        second = sTime.Seconds;
 8001744:	7bbb      	ldrb	r3, [r7, #14]
 8001746:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    minute = 30;
    second = timestamp % 60;  // 타임스탬프 기반 변화
#endif
    
    // 디렉토리가 없을 경우를 대비해 루트에 파일 생성
    int result = snprintf(filename, max_len, 
 800174a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800174c:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8001750:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8001754:	f897 002b 	ldrb.w	r0, [r7, #43]	@ 0x2b
 8001758:	f897 402a 	ldrb.w	r4, [r7, #42]	@ 0x2a
 800175c:	f897 5029 	ldrb.w	r5, [r7, #41]	@ 0x29
 8001760:	4e0f      	ldr	r6, [pc, #60]	@ (80017a0 <_generate_log_filename+0xd8>)
 8001762:	9606      	str	r6, [sp, #24]
 8001764:	9505      	str	r5, [sp, #20]
 8001766:	9404      	str	r4, [sp, #16]
 8001768:	9003      	str	r0, [sp, #12]
 800176a:	9102      	str	r1, [sp, #8]
 800176c:	9201      	str	r2, [sp, #4]
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	4b0c      	ldr	r3, [pc, #48]	@ (80017a4 <_generate_log_filename+0xdc>)
 8001772:	4a0d      	ldr	r2, [pc, #52]	@ (80017a8 <_generate_log_filename+0xe0>)
 8001774:	6839      	ldr	r1, [r7, #0]
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f019 fdba 	bl	801b2f0 <sniprintf>
 800177c:	6238      	str	r0, [r7, #32]
                         "%s%04d%02d%02d_%02d%02d%02d%s",
                         SDSTORAGE_LOG_PREFIX,
                         year, month, day, hour, minute, second,
                         SDSTORAGE_LOG_EXTENSION);
    
    if (result < 0 || (size_t)result >= max_len) {
 800177e:	6a3b      	ldr	r3, [r7, #32]
 8001780:	2b00      	cmp	r3, #0
 8001782:	db03      	blt.n	800178c <_generate_log_filename+0xc4>
 8001784:	6a3b      	ldr	r3, [r7, #32]
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	429a      	cmp	r2, r3
 800178a:	d802      	bhi.n	8001792 <_generate_log_filename+0xca>
        return SDSTORAGE_ERROR;
 800178c:	f04f 33ff 	mov.w	r3, #4294967295
 8001790:	e000      	b.n	8001794 <_generate_log_filename+0xcc>
    }
    
    return SDSTORAGE_OK;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	3734      	adds	r7, #52	@ 0x34
 8001798:	46bd      	mov	sp, r7
 800179a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800179c:	20001350 	.word	0x20001350
 80017a0:	0801cff0 	.word	0x0801cff0
 80017a4:	0801cfc4 	.word	0x0801cfc4
 80017a8:	0801cfd0 	.word	0x0801cfd0

080017ac <_get_current_timestamp>:

static uint32_t _get_current_timestamp(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
#ifdef STM32F746xx
    return HAL_GetTick();
 80017b0:	f003 ffd6 	bl	8005760 <HAL_GetTick>
 80017b4:	4603      	mov	r3, r0
#else
    return (uint32_t)time(NULL);
#endif
 80017b6:	4618      	mov	r0, r3
 80017b8:	bd80      	pop	{r7, pc}

080017ba <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4a07      	ldr	r2, [pc, #28]	@ (8001818 <vApplicationGetIdleTaskMemory+0x2c>)
 80017fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	4a06      	ldr	r2, [pc, #24]	@ (800181c <vApplicationGetIdleTaskMemory+0x30>)
 8001802:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2280      	movs	r2, #128	@ 0x80
 8001808:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800180a:	bf00      	nop
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000d78 	.word	0x20000d78
 800181c:	20000dd0 	.word	0x20000dd0

08001820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001820:	b5b0      	push	{r4, r5, r7, lr}
 8001822:	b08e      	sub	sp, #56	@ 0x38
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // 리셋 카운터 추가
  static uint32_t reset_count = 0;
  reset_count++;
 8001826:	4b70      	ldr	r3, [pc, #448]	@ (80019e8 <main+0x1c8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	3301      	adds	r3, #1
 800182c:	4a6e      	ldr	r2, [pc, #440]	@ (80019e8 <main+0x1c8>)
 800182e:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001830:	f003 ff75 	bl	800571e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001834:	f000 f900 	bl	8001a38 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001838:	f000 f970 	bl	8001b1c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800183c:	f001 f932 	bl	8002aa4 <MX_GPIO_Init>
  MX_DMA_Init();  // DMA는 UART보다 먼저 초기화
 8001840:	f001 ff70 	bl	8003724 <MX_DMA_Init>
//  MX_USART6_DMA_Init();  // USART6 DMA 초기화 (UART보다 먼저)
  MX_ADC3_Init();
 8001844:	f000 f99c 	bl	8001b80 <MX_ADC3_Init>
  MX_CRC_Init();
 8001848:	f000 f9ec 	bl	8001c24 <MX_CRC_Init>
  MX_DCMI_Init();
 800184c:	f000 fa0c 	bl	8001c68 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8001850:	f000 fa3e 	bl	8001cd0 <MX_DMA2D_Init>
  MX_ETH_Init();
 8001854:	f000 fa6e 	bl	8001d34 <MX_ETH_Init>
  MX_FMC_Init();
 8001858:	f001 f8d4 	bl	8002a04 <MX_FMC_Init>
  MX_I2C1_Init();
 800185c:	f000 fab8 	bl	8001dd0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001860:	f000 faf6 	bl	8001e50 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001864:	f000 fb34 	bl	8001ed0 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8001868:	f000 fbb4 	bl	8001fd4 <MX_QUADSPI_Init>
  MX_RTC_Init();
 800186c:	f000 fbde 	bl	800202c <MX_RTC_Init>
  MX_SAI2_Init();
 8001870:	f000 fc80 	bl	8002174 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8001874:	f000 fd26 	bl	80022c4 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8001878:	f000 fd4a 	bl	8002310 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 800187c:	f000 fd78 	bl	8002370 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001880:	f000 fdb4 	bl	80023ec <MX_TIM1_Init>
  MX_TIM2_Init();
 8001884:	f000 fe5e 	bl	8002544 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001888:	f000 fed2 	bl	8002630 <MX_TIM3_Init>
  MX_TIM5_Init();
 800188c:	f000 ff48 	bl	8002720 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001890:	f000 ffbe 	bl	8002810 <MX_TIM8_Init>
  MX_TIM12_Init();
 8001894:	f001 f810 	bl	80028b8 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001898:	f001 f854 	bl	8002944 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800189c:	f001 f882 	bl	80029a4 <MX_USART6_UART_Init>
  
  // UART 초기화 후 DMA 핸들 다시 연결 (HAL_UART_Init에서 리셋될 수 있음)
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 80018a0:	4b52      	ldr	r3, [pc, #328]	@ (80019ec <main+0x1cc>)
 80018a2:	4a53      	ldr	r2, [pc, #332]	@ (80019f0 <main+0x1d0>)
 80018a4:	675a      	str	r2, [r3, #116]	@ 0x74
 80018a6:	4b52      	ldr	r3, [pc, #328]	@ (80019f0 <main+0x1d0>)
 80018a8:	4a50      	ldr	r2, [pc, #320]	@ (80019ec <main+0x1cc>)
 80018aa:	639a      	str	r2, [r3, #56]	@ 0x38
  
  // UART IDLE 인터럽트 활성화 (DMA 기반 수신을 위해)
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 80018ac:	4b4f      	ldr	r3, [pc, #316]	@ (80019ec <main+0x1cc>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	4b4e      	ldr	r3, [pc, #312]	@ (80019ec <main+0x1cc>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f042 0210 	orr.w	r2, r2, #16
 80018ba:	601a      	str	r2, [r3, #0]
  MX_FATFS_Init();
 80018bc:	f010 fe0c 	bl	80124d8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  
  // Logger 초기화 (터미널 출력만 사용)
  LOGGER_Connect("STM32", 0);
 80018c0:	2100      	movs	r1, #0
 80018c2:	484c      	ldr	r0, [pc, #304]	@ (80019f4 <main+0x1d4>)
 80018c4:	f003 f960 	bl	8004b88 <LOGGER_Connect>
  
  // 리셋 원인 확인
  LOG_INFO("=== SYSTEM START (Reset #%lu) ===", reset_count);
 80018c8:	4b47      	ldr	r3, [pc, #284]	@ (80019e8 <main+0x1c8>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	461a      	mov	r2, r3
 80018ce:	494a      	ldr	r1, [pc, #296]	@ (80019f8 <main+0x1d8>)
 80018d0:	2001      	movs	r0, #1
 80018d2:	f003 f9b5 	bl	8004c40 <LOGGER_SendFormatted>
  
  // RCC 리셋 플래그 확인
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST)) LOG_WARN("Reset: BOR (Brown-out)");
 80018d6:	4b49      	ldr	r3, [pc, #292]	@ (80019fc <main+0x1dc>)
 80018d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <main+0xca>
 80018e2:	4947      	ldr	r1, [pc, #284]	@ (8001a00 <main+0x1e0>)
 80018e4:	2002      	movs	r0, #2
 80018e6:	f003 f9ab 	bl	8004c40 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)) LOG_WARN("Reset: PIN (External)");
 80018ea:	4b44      	ldr	r3, [pc, #272]	@ (80019fc <main+0x1dc>)
 80018ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <main+0xde>
 80018f6:	4943      	ldr	r1, [pc, #268]	@ (8001a04 <main+0x1e4>)
 80018f8:	2002      	movs	r0, #2
 80018fa:	f003 f9a1 	bl	8004c40 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST)) LOG_WARN("Reset: POR (Power-on)");
 80018fe:	4b3f      	ldr	r3, [pc, #252]	@ (80019fc <main+0x1dc>)
 8001900:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001902:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <main+0xf2>
 800190a:	493f      	ldr	r1, [pc, #252]	@ (8001a08 <main+0x1e8>)
 800190c:	2002      	movs	r0, #2
 800190e:	f003 f997 	bl	8004c40 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)) LOG_WARN("Reset: SOFTWARE");
 8001912:	4b3a      	ldr	r3, [pc, #232]	@ (80019fc <main+0x1dc>)
 8001914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <main+0x106>
 800191e:	493b      	ldr	r1, [pc, #236]	@ (8001a0c <main+0x1ec>)
 8001920:	2002      	movs	r0, #2
 8001922:	f003 f98d 	bl	8004c40 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST)) LOG_WARN("Reset: IWDG (Watchdog)");
 8001926:	4b35      	ldr	r3, [pc, #212]	@ (80019fc <main+0x1dc>)
 8001928:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800192a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <main+0x11a>
 8001932:	4937      	ldr	r1, [pc, #220]	@ (8001a10 <main+0x1f0>)
 8001934:	2002      	movs	r0, #2
 8001936:	f003 f983 	bl	8004c40 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST)) LOG_WARN("Reset: WWDG (Window Watchdog)");
 800193a:	4b30      	ldr	r3, [pc, #192]	@ (80019fc <main+0x1dc>)
 800193c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800193e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <main+0x12e>
 8001946:	4933      	ldr	r1, [pc, #204]	@ (8001a14 <main+0x1f4>)
 8001948:	2002      	movs	r0, #2
 800194a:	f003 f979 	bl	8004c40 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST)) LOG_WARN("Reset: LPWR (Low Power)");
 800194e:	4b2b      	ldr	r3, [pc, #172]	@ (80019fc <main+0x1dc>)
 8001950:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001952:	2b00      	cmp	r3, #0
 8001954:	da03      	bge.n	800195e <main+0x13e>
 8001956:	4930      	ldr	r1, [pc, #192]	@ (8001a18 <main+0x1f8>)
 8001958:	2002      	movs	r0, #2
 800195a:	f003 f971 	bl	8004c40 <LOGGER_SendFormatted>
  
  // 플래그 클리어
  __HAL_RCC_CLEAR_RESET_FLAGS();
 800195e:	4b27      	ldr	r3, [pc, #156]	@ (80019fc <main+0x1dc>)
 8001960:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001962:	4a26      	ldr	r2, [pc, #152]	@ (80019fc <main+0x1dc>)
 8001964:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001968:	6753      	str	r3, [r2, #116]	@ 0x74
  
  // ===== 하드웨어 초기화만 main()에서 수행 =====
  
  // SD카드 초기화는 FreeRTOS 태스크에서 수행 (커널 시작 후)
  LOG_INFO("🔄 SD card initialization will be performed in FreeRTOS task");
 800196a:	492c      	ldr	r1, [pc, #176]	@ (8001a1c <main+0x1fc>)
 800196c:	2001      	movs	r0, #1
 800196e:	f003 f967 	bl	8004c40 <LOGGER_SendFormatted>
  g_sd_initialization_result = -1;  // 초기화 안됨 상태
 8001972:	4b2b      	ldr	r3, [pc, #172]	@ (8001a20 <main+0x200>)
 8001974:	f04f 32ff 	mov.w	r2, #4294967295
 8001978:	601a      	str	r2, [r3, #0]
  
  // UART6 DMA 초기화
  LOG_INFO("🔄 Initializing UART DMA after SD preparation...");
 800197a:	492a      	ldr	r1, [pc, #168]	@ (8001a24 <main+0x204>)
 800197c:	2001      	movs	r0, #1
 800197e:	f003 f95f 	bl	8004c40 <LOGGER_SendFormatted>
  MX_USART6_DMA_Init();
 8001982:	f001 fef5 	bl	8003770 <MX_USART6_DMA_Init>
  
  // IDLE 인터럽트 활성화 (메시지 끝 감지용)
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8001986:	4b19      	ldr	r3, [pc, #100]	@ (80019ec <main+0x1cc>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b17      	ldr	r3, [pc, #92]	@ (80019ec <main+0x1cc>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f042 0210 	orr.w	r2, r2, #16
 8001994:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8001996:	4b24      	ldr	r3, [pc, #144]	@ (8001a28 <main+0x208>)
 8001998:	f107 041c 	add.w	r4, r7, #28
 800199c:	461d      	mov	r5, r3
 800199e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80019aa:	f107 031c 	add.w	r3, r7, #28
 80019ae:	2100      	movs	r1, #0
 80019b0:	4618      	mov	r0, r3
 80019b2:	f016 f8fb 	bl	8017bac <osThreadCreate>
 80019b6:	4603      	mov	r3, r0
 80019b8:	4a1c      	ldr	r2, [pc, #112]	@ (8001a2c <main+0x20c>)
 80019ba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* 수신 태스크 생성 - 백그라운드에서 계속 실행 */
  osThreadDef(receiveTask, StartReceiveTask, osPriorityNormal, 0, 2048);
 80019bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001a30 <main+0x210>)
 80019be:	463c      	mov	r4, r7
 80019c0:	461d      	mov	r5, r3
 80019c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receiveTaskHandle = osThreadCreate(osThread(receiveTask), NULL);
 80019ce:	463b      	mov	r3, r7
 80019d0:	2100      	movs	r1, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f016 f8ea 	bl	8017bac <osThreadCreate>
 80019d8:	4603      	mov	r3, r0
 80019da:	4a16      	ldr	r2, [pc, #88]	@ (8001a34 <main+0x214>)
 80019dc:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80019de:	f016 f8c2 	bl	8017b66 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019e2:	bf00      	nop
 80019e4:	e7fd      	b.n	80019e2 <main+0x1c2>
 80019e6:	bf00      	nop
 80019e8:	20001b28 	.word	0x20001b28
 80019ec:	200017fc 	.word	0x200017fc
 80019f0:	20001ac8 	.word	0x20001ac8
 80019f4:	0801cff8 	.word	0x0801cff8
 80019f8:	0801d000 	.word	0x0801d000
 80019fc:	40023800 	.word	0x40023800
 8001a00:	0801d024 	.word	0x0801d024
 8001a04:	0801d03c 	.word	0x0801d03c
 8001a08:	0801d054 	.word	0x0801d054
 8001a0c:	0801d06c 	.word	0x0801d06c
 8001a10:	0801d07c 	.word	0x0801d07c
 8001a14:	0801d094 	.word	0x0801d094
 8001a18:	0801d0b4 	.word	0x0801d0b4
 8001a1c:	0801d0cc 	.word	0x0801d0cc
 8001a20:	20000014 	.word	0x20000014
 8001a24:	0801d10c 	.word	0x0801d10c
 8001a28:	0801d14c 	.word	0x0801d14c
 8001a2c:	200018b8 	.word	0x200018b8
 8001a30:	0801d174 	.word	0x0801d174
 8001a34:	200018bc 	.word	0x200018bc

08001a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b094      	sub	sp, #80	@ 0x50
 8001a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a3e:	f107 0320 	add.w	r3, r7, #32
 8001a42:	2230      	movs	r2, #48	@ 0x30
 8001a44:	2100      	movs	r1, #0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f019 fcf6 	bl	801b438 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a4c:	f107 030c 	add.w	r3, r7, #12
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a5c:	f008 fc84 	bl	800a368 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a60:	4b2c      	ldr	r3, [pc, #176]	@ (8001b14 <SystemClock_Config+0xdc>)
 8001a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a64:	4a2b      	ldr	r2, [pc, #172]	@ (8001b14 <SystemClock_Config+0xdc>)
 8001a66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a6c:	4b29      	ldr	r3, [pc, #164]	@ (8001b14 <SystemClock_Config+0xdc>)
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a78:	4b27      	ldr	r3, [pc, #156]	@ (8001b18 <SystemClock_Config+0xe0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a26      	ldr	r2, [pc, #152]	@ (8001b18 <SystemClock_Config+0xe0>)
 8001a7e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a82:	6013      	str	r3, [r2, #0]
 8001a84:	4b24      	ldr	r3, [pc, #144]	@ (8001b18 <SystemClock_Config+0xe0>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001a90:	2309      	movs	r3, #9
 8001a92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a94:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a98:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001aa2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001aa8:	2319      	movs	r3, #25
 8001aaa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001aac:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001ab0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001ab6:	2309      	movs	r3, #9
 8001ab8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aba:	f107 0320 	add.w	r3, r7, #32
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f008 fd74 	bl	800a5ac <HAL_RCC_OscConfig>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001aca:	f001 fe25 	bl	8003718 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ace:	f008 fc5b 	bl	800a388 <HAL_PWREx_EnableOverDrive>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001ad8:	f001 fe1e 	bl	8003718 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001adc:	230f      	movs	r3, #15
 8001ade:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ae8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001aec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001aee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001af2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001af4:	f107 030c 	add.w	r3, r7, #12
 8001af8:	2106      	movs	r1, #6
 8001afa:	4618      	mov	r0, r3
 8001afc:	f008 fffa 	bl	800aaf4 <HAL_RCC_ClockConfig>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001b06:	f001 fe07 	bl	8003718 <Error_Handler>
  }
}
 8001b0a:	bf00      	nop
 8001b0c:	3750      	adds	r7, #80	@ 0x50
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40007000 	.word	0x40007000

08001b1c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b0a2      	sub	sp, #136	@ 0x88
 8001b20:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	2284      	movs	r2, #132	@ 0x84
 8001b26:	2100      	movs	r1, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f019 fc85 	bl	801b438 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8001b2e:	4b13      	ldr	r3, [pc, #76]	@ (8001b7c <PeriphCommonClock_Config+0x60>)
 8001b30:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001b32:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001b36:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001b38:	2305      	movs	r3, #5
 8001b3a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001b40:	2303      	movs	r3, #3
 8001b42:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001b44:	2301      	movs	r3, #1
 8001b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001b48:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b4c:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001b52:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001b56:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b60:	1d3b      	adds	r3, r7, #4
 8001b62:	4618      	mov	r0, r3
 8001b64:	f009 f9de 	bl	800af24 <HAL_RCCEx_PeriphCLKConfig>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001b6e:	f001 fdd3 	bl	8003718 <Error_Handler>
  }
}
 8001b72:	bf00      	nop
 8001b74:	3788      	adds	r7, #136	@ 0x88
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	00b00008 	.word	0x00b00008

08001b80 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b86:	463b      	mov	r3, r7
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001b92:	4b21      	ldr	r3, [pc, #132]	@ (8001c18 <MX_ADC3_Init+0x98>)
 8001b94:	4a21      	ldr	r2, [pc, #132]	@ (8001c1c <MX_ADC3_Init+0x9c>)
 8001b96:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b98:	4b1f      	ldr	r3, [pc, #124]	@ (8001c18 <MX_ADC3_Init+0x98>)
 8001b9a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b9e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c18 <MX_ADC3_Init+0x98>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c18 <MX_ADC3_Init+0x98>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001bac:	4b1a      	ldr	r3, [pc, #104]	@ (8001c18 <MX_ADC3_Init+0x98>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001bb2:	4b19      	ldr	r3, [pc, #100]	@ (8001c18 <MX_ADC3_Init+0x98>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bba:	4b17      	ldr	r3, [pc, #92]	@ (8001c18 <MX_ADC3_Init+0x98>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bc0:	4b15      	ldr	r3, [pc, #84]	@ (8001c18 <MX_ADC3_Init+0x98>)
 8001bc2:	4a17      	ldr	r2, [pc, #92]	@ (8001c20 <MX_ADC3_Init+0xa0>)
 8001bc4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bc6:	4b14      	ldr	r3, [pc, #80]	@ (8001c18 <MX_ADC3_Init+0x98>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001bcc:	4b12      	ldr	r3, [pc, #72]	@ (8001c18 <MX_ADC3_Init+0x98>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001bd2:	4b11      	ldr	r3, [pc, #68]	@ (8001c18 <MX_ADC3_Init+0x98>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bda:	4b0f      	ldr	r3, [pc, #60]	@ (8001c18 <MX_ADC3_Init+0x98>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001be0:	480d      	ldr	r0, [pc, #52]	@ (8001c18 <MX_ADC3_Init+0x98>)
 8001be2:	f003 fded 	bl	80057c0 <HAL_ADC_Init>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001bec:	f001 fd94 	bl	8003718 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001bf0:	2304      	movs	r3, #4
 8001bf2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001bfc:	463b      	mov	r3, r7
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4805      	ldr	r0, [pc, #20]	@ (8001c18 <MX_ADC3_Init+0x98>)
 8001c02:	f003 fe21 	bl	8005848 <HAL_ADC_ConfigChannel>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001c0c:	f001 fd84 	bl	8003718 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001c10:	bf00      	nop
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20001008 	.word	0x20001008
 8001c1c:	40012200 	.word	0x40012200
 8001c20:	0f000001 	.word	0x0f000001

08001c24 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001c28:	4b0d      	ldr	r3, [pc, #52]	@ (8001c60 <MX_CRC_Init+0x3c>)
 8001c2a:	4a0e      	ldr	r2, [pc, #56]	@ (8001c64 <MX_CRC_Init+0x40>)
 8001c2c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c60 <MX_CRC_Init+0x3c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001c34:	4b0a      	ldr	r3, [pc, #40]	@ (8001c60 <MX_CRC_Init+0x3c>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001c3a:	4b09      	ldr	r3, [pc, #36]	@ (8001c60 <MX_CRC_Init+0x3c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001c40:	4b07      	ldr	r3, [pc, #28]	@ (8001c60 <MX_CRC_Init+0x3c>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001c46:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <MX_CRC_Init+0x3c>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001c4c:	4804      	ldr	r0, [pc, #16]	@ (8001c60 <MX_CRC_Init+0x3c>)
 8001c4e:	f004 f931 	bl	8005eb4 <HAL_CRC_Init>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001c58:	f001 fd5e 	bl	8003718 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20001050 	.word	0x20001050
 8001c64:	40023000 	.word	0x40023000

08001c68 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001c6c:	4b16      	ldr	r3, [pc, #88]	@ (8001cc8 <MX_DCMI_Init+0x60>)
 8001c6e:	4a17      	ldr	r2, [pc, #92]	@ (8001ccc <MX_DCMI_Init+0x64>)
 8001c70:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001c72:	4b15      	ldr	r3, [pc, #84]	@ (8001cc8 <MX_DCMI_Init+0x60>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001c78:	4b13      	ldr	r3, [pc, #76]	@ (8001cc8 <MX_DCMI_Init+0x60>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001c7e:	4b12      	ldr	r3, [pc, #72]	@ (8001cc8 <MX_DCMI_Init+0x60>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001c84:	4b10      	ldr	r3, [pc, #64]	@ (8001cc8 <MX_DCMI_Init+0x60>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc8 <MX_DCMI_Init+0x60>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001c90:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc8 <MX_DCMI_Init+0x60>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001c96:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc8 <MX_DCMI_Init+0x60>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc8 <MX_DCMI_Init+0x60>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001ca2:	4b09      	ldr	r3, [pc, #36]	@ (8001cc8 <MX_DCMI_Init+0x60>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001ca8:	4b07      	ldr	r3, [pc, #28]	@ (8001cc8 <MX_DCMI_Init+0x60>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001cae:	4b06      	ldr	r3, [pc, #24]	@ (8001cc8 <MX_DCMI_Init+0x60>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001cb4:	4804      	ldr	r0, [pc, #16]	@ (8001cc8 <MX_DCMI_Init+0x60>)
 8001cb6:	f004 f9ef 	bl	8006098 <HAL_DCMI_Init>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001cc0:	f001 fd2a 	bl	8003718 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001cc4:	bf00      	nop
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20001074 	.word	0x20001074
 8001ccc:	50050000 	.word	0x50050000

08001cd0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001cd4:	4b15      	ldr	r3, [pc, #84]	@ (8001d2c <MX_DMA2D_Init+0x5c>)
 8001cd6:	4a16      	ldr	r2, [pc, #88]	@ (8001d30 <MX_DMA2D_Init+0x60>)
 8001cd8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001cda:	4b14      	ldr	r3, [pc, #80]	@ (8001d2c <MX_DMA2D_Init+0x5c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001ce0:	4b12      	ldr	r3, [pc, #72]	@ (8001d2c <MX_DMA2D_Init+0x5c>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001ce6:	4b11      	ldr	r3, [pc, #68]	@ (8001d2c <MX_DMA2D_Init+0x5c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001cec:	4b0f      	ldr	r3, [pc, #60]	@ (8001d2c <MX_DMA2D_Init+0x5c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d2c <MX_DMA2D_Init+0x5c>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d2c <MX_DMA2D_Init+0x5c>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8001d2c <MX_DMA2D_Init+0x5c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001d04:	4809      	ldr	r0, [pc, #36]	@ (8001d2c <MX_DMA2D_Init+0x5c>)
 8001d06:	f004 feb5 	bl	8006a74 <HAL_DMA2D_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001d10:	f001 fd02 	bl	8003718 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001d14:	2101      	movs	r1, #1
 8001d16:	4805      	ldr	r0, [pc, #20]	@ (8001d2c <MX_DMA2D_Init+0x5c>)
 8001d18:	f005 f806 	bl	8006d28 <HAL_DMA2D_ConfigLayer>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001d22:	f001 fcf9 	bl	8003718 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200010c4 	.word	0x200010c4
 8001d30:	4002b000 	.word	0x4002b000

08001d34 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001d38:	4b1f      	ldr	r3, [pc, #124]	@ (8001db8 <MX_ETH_Init+0x84>)
 8001d3a:	4a20      	ldr	r2, [pc, #128]	@ (8001dbc <MX_ETH_Init+0x88>)
 8001d3c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001d3e:	4b20      	ldr	r3, [pc, #128]	@ (8001dc0 <MX_ETH_Init+0x8c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001d44:	4b1e      	ldr	r3, [pc, #120]	@ (8001dc0 <MX_ETH_Init+0x8c>)
 8001d46:	2280      	movs	r2, #128	@ 0x80
 8001d48:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc0 <MX_ETH_Init+0x8c>)
 8001d4c:	22e1      	movs	r2, #225	@ 0xe1
 8001d4e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001d50:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc0 <MX_ETH_Init+0x8c>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001d56:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc0 <MX_ETH_Init+0x8c>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001d5c:	4b18      	ldr	r3, [pc, #96]	@ (8001dc0 <MX_ETH_Init+0x8c>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001d62:	4b15      	ldr	r3, [pc, #84]	@ (8001db8 <MX_ETH_Init+0x84>)
 8001d64:	4a16      	ldr	r2, [pc, #88]	@ (8001dc0 <MX_ETH_Init+0x8c>)
 8001d66:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001d68:	4b13      	ldr	r3, [pc, #76]	@ (8001db8 <MX_ETH_Init+0x84>)
 8001d6a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001d6e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001d70:	4b11      	ldr	r3, [pc, #68]	@ (8001db8 <MX_ETH_Init+0x84>)
 8001d72:	4a14      	ldr	r2, [pc, #80]	@ (8001dc4 <MX_ETH_Init+0x90>)
 8001d74:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001d76:	4b10      	ldr	r3, [pc, #64]	@ (8001db8 <MX_ETH_Init+0x84>)
 8001d78:	4a13      	ldr	r2, [pc, #76]	@ (8001dc8 <MX_ETH_Init+0x94>)
 8001d7a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001db8 <MX_ETH_Init+0x84>)
 8001d7e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001d82:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001d84:	480c      	ldr	r0, [pc, #48]	@ (8001db8 <MX_ETH_Init+0x84>)
 8001d86:	f005 f861 	bl	8006e4c <HAL_ETH_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001d90:	f001 fcc2 	bl	8003718 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001d94:	2238      	movs	r2, #56	@ 0x38
 8001d96:	2100      	movs	r1, #0
 8001d98:	480c      	ldr	r0, [pc, #48]	@ (8001dcc <MX_ETH_Init+0x98>)
 8001d9a:	f019 fb4d 	bl	801b438 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001dcc <MX_ETH_Init+0x98>)
 8001da0:	2221      	movs	r2, #33	@ 0x21
 8001da2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001da4:	4b09      	ldr	r3, [pc, #36]	@ (8001dcc <MX_ETH_Init+0x98>)
 8001da6:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8001daa:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001dac:	4b07      	ldr	r3, [pc, #28]	@ (8001dcc <MX_ETH_Init+0x98>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20001104 	.word	0x20001104
 8001dbc:	40028000 	.word	0x40028000
 8001dc0:	20001b2c 	.word	0x20001b2c
 8001dc4:	20000180 	.word	0x20000180
 8001dc8:	200000e0 	.word	0x200000e0
 8001dcc:	20000fd0 	.word	0x20000fd0

08001dd0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e44 <MX_I2C1_Init+0x74>)
 8001dd6:	4a1c      	ldr	r2, [pc, #112]	@ (8001e48 <MX_I2C1_Init+0x78>)
 8001dd8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001dda:	4b1a      	ldr	r3, [pc, #104]	@ (8001e44 <MX_I2C1_Init+0x74>)
 8001ddc:	4a1b      	ldr	r2, [pc, #108]	@ (8001e4c <MX_I2C1_Init+0x7c>)
 8001dde:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001de0:	4b18      	ldr	r3, [pc, #96]	@ (8001e44 <MX_I2C1_Init+0x74>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001de6:	4b17      	ldr	r3, [pc, #92]	@ (8001e44 <MX_I2C1_Init+0x74>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dec:	4b15      	ldr	r3, [pc, #84]	@ (8001e44 <MX_I2C1_Init+0x74>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001df2:	4b14      	ldr	r3, [pc, #80]	@ (8001e44 <MX_I2C1_Init+0x74>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001df8:	4b12      	ldr	r3, [pc, #72]	@ (8001e44 <MX_I2C1_Init+0x74>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dfe:	4b11      	ldr	r3, [pc, #68]	@ (8001e44 <MX_I2C1_Init+0x74>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e04:	4b0f      	ldr	r3, [pc, #60]	@ (8001e44 <MX_I2C1_Init+0x74>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e0a:	480e      	ldr	r0, [pc, #56]	@ (8001e44 <MX_I2C1_Init+0x74>)
 8001e0c:	f007 fe66 	bl	8009adc <HAL_I2C_Init>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001e16:	f001 fc7f 	bl	8003718 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	4809      	ldr	r0, [pc, #36]	@ (8001e44 <MX_I2C1_Init+0x74>)
 8001e1e:	f007 fef9 	bl	8009c14 <HAL_I2CEx_ConfigAnalogFilter>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001e28:	f001 fc76 	bl	8003718 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	4805      	ldr	r0, [pc, #20]	@ (8001e44 <MX_I2C1_Init+0x74>)
 8001e30:	f007 ff3b 	bl	8009caa <HAL_I2CEx_ConfigDigitalFilter>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001e3a:	f001 fc6d 	bl	8003718 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200011b4 	.word	0x200011b4
 8001e48:	40005400 	.word	0x40005400
 8001e4c:	00c0eaff 	.word	0x00c0eaff

08001e50 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001e54:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec4 <MX_I2C3_Init+0x74>)
 8001e56:	4a1c      	ldr	r2, [pc, #112]	@ (8001ec8 <MX_I2C3_Init+0x78>)
 8001e58:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec4 <MX_I2C3_Init+0x74>)
 8001e5c:	4a1b      	ldr	r2, [pc, #108]	@ (8001ecc <MX_I2C3_Init+0x7c>)
 8001e5e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001e60:	4b18      	ldr	r3, [pc, #96]	@ (8001ec4 <MX_I2C3_Init+0x74>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e66:	4b17      	ldr	r3, [pc, #92]	@ (8001ec4 <MX_I2C3_Init+0x74>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e6c:	4b15      	ldr	r3, [pc, #84]	@ (8001ec4 <MX_I2C3_Init+0x74>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001e72:	4b14      	ldr	r3, [pc, #80]	@ (8001ec4 <MX_I2C3_Init+0x74>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e78:	4b12      	ldr	r3, [pc, #72]	@ (8001ec4 <MX_I2C3_Init+0x74>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e7e:	4b11      	ldr	r3, [pc, #68]	@ (8001ec4 <MX_I2C3_Init+0x74>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e84:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec4 <MX_I2C3_Init+0x74>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001e8a:	480e      	ldr	r0, [pc, #56]	@ (8001ec4 <MX_I2C3_Init+0x74>)
 8001e8c:	f007 fe26 	bl	8009adc <HAL_I2C_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001e96:	f001 fc3f 	bl	8003718 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	4809      	ldr	r0, [pc, #36]	@ (8001ec4 <MX_I2C3_Init+0x74>)
 8001e9e:	f007 feb9 	bl	8009c14 <HAL_I2CEx_ConfigAnalogFilter>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001ea8:	f001 fc36 	bl	8003718 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001eac:	2100      	movs	r1, #0
 8001eae:	4805      	ldr	r0, [pc, #20]	@ (8001ec4 <MX_I2C3_Init+0x74>)
 8001eb0:	f007 fefb 	bl	8009caa <HAL_I2CEx_ConfigDigitalFilter>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001eba:	f001 fc2d 	bl	8003718 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20001208 	.word	0x20001208
 8001ec8:	40005c00 	.word	0x40005c00
 8001ecc:	00c0eaff 	.word	0x00c0eaff

08001ed0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08e      	sub	sp, #56	@ 0x38
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001ed6:	1d3b      	adds	r3, r7, #4
 8001ed8:	2234      	movs	r2, #52	@ 0x34
 8001eda:	2100      	movs	r1, #0
 8001edc:	4618      	mov	r0, r3
 8001ede:	f019 faab 	bl	801b438 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001ee2:	4b3a      	ldr	r3, [pc, #232]	@ (8001fcc <MX_LTDC_Init+0xfc>)
 8001ee4:	4a3a      	ldr	r2, [pc, #232]	@ (8001fd0 <MX_LTDC_Init+0x100>)
 8001ee6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001ee8:	4b38      	ldr	r3, [pc, #224]	@ (8001fcc <MX_LTDC_Init+0xfc>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001eee:	4b37      	ldr	r3, [pc, #220]	@ (8001fcc <MX_LTDC_Init+0xfc>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001ef4:	4b35      	ldr	r3, [pc, #212]	@ (8001fcc <MX_LTDC_Init+0xfc>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001efa:	4b34      	ldr	r3, [pc, #208]	@ (8001fcc <MX_LTDC_Init+0xfc>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001f00:	4b32      	ldr	r3, [pc, #200]	@ (8001fcc <MX_LTDC_Init+0xfc>)
 8001f02:	2228      	movs	r2, #40	@ 0x28
 8001f04:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001f06:	4b31      	ldr	r3, [pc, #196]	@ (8001fcc <MX_LTDC_Init+0xfc>)
 8001f08:	2209      	movs	r2, #9
 8001f0a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001f0c:	4b2f      	ldr	r3, [pc, #188]	@ (8001fcc <MX_LTDC_Init+0xfc>)
 8001f0e:	2235      	movs	r2, #53	@ 0x35
 8001f10:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001f12:	4b2e      	ldr	r3, [pc, #184]	@ (8001fcc <MX_LTDC_Init+0xfc>)
 8001f14:	220b      	movs	r2, #11
 8001f16:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001f18:	4b2c      	ldr	r3, [pc, #176]	@ (8001fcc <MX_LTDC_Init+0xfc>)
 8001f1a:	f240 2215 	movw	r2, #533	@ 0x215
 8001f1e:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001f20:	4b2a      	ldr	r3, [pc, #168]	@ (8001fcc <MX_LTDC_Init+0xfc>)
 8001f22:	f240 121b 	movw	r2, #283	@ 0x11b
 8001f26:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8001f28:	4b28      	ldr	r3, [pc, #160]	@ (8001fcc <MX_LTDC_Init+0xfc>)
 8001f2a:	f240 2235 	movw	r2, #565	@ 0x235
 8001f2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001f30:	4b26      	ldr	r3, [pc, #152]	@ (8001fcc <MX_LTDC_Init+0xfc>)
 8001f32:	f240 121d 	movw	r2, #285	@ 0x11d
 8001f36:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001f38:	4b24      	ldr	r3, [pc, #144]	@ (8001fcc <MX_LTDC_Init+0xfc>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001f40:	4b22      	ldr	r3, [pc, #136]	@ (8001fcc <MX_LTDC_Init+0xfc>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001f48:	4b20      	ldr	r3, [pc, #128]	@ (8001fcc <MX_LTDC_Init+0xfc>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001f50:	481e      	ldr	r0, [pc, #120]	@ (8001fcc <MX_LTDC_Init+0xfc>)
 8001f52:	f007 fef6 	bl	8009d42 <HAL_LTDC_Init>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001f5c:	f001 fbdc 	bl	8003718 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001f64:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001f68:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001f6e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001f72:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001f74:	2302      	movs	r3, #2
 8001f76:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001f78:	23ff      	movs	r3, #255	@ 0xff
 8001f7a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001f80:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001f84:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001f86:	2307      	movs	r3, #7
 8001f88:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001f8a:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8001f90:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8001f96:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001f9a:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001fae:	1d3b      	adds	r3, r7, #4
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4805      	ldr	r0, [pc, #20]	@ (8001fcc <MX_LTDC_Init+0xfc>)
 8001fb6:	f008 f823 	bl	800a000 <HAL_LTDC_ConfigLayer>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001fc0:	f001 fbaa 	bl	8003718 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001fc4:	bf00      	nop
 8001fc6:	3738      	adds	r7, #56	@ 0x38
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	2000125c 	.word	0x2000125c
 8001fd0:	40016800 	.word	0x40016800

08001fd4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001fd8:	4b12      	ldr	r3, [pc, #72]	@ (8002024 <MX_QUADSPI_Init+0x50>)
 8001fda:	4a13      	ldr	r2, [pc, #76]	@ (8002028 <MX_QUADSPI_Init+0x54>)
 8001fdc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8001fde:	4b11      	ldr	r3, [pc, #68]	@ (8002024 <MX_QUADSPI_Init+0x50>)
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8002024 <MX_QUADSPI_Init+0x50>)
 8001fe6:	2204      	movs	r2, #4
 8001fe8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001fea:	4b0e      	ldr	r3, [pc, #56]	@ (8002024 <MX_QUADSPI_Init+0x50>)
 8001fec:	2210      	movs	r2, #16
 8001fee:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8001ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8002024 <MX_QUADSPI_Init+0x50>)
 8001ff2:	2218      	movs	r2, #24
 8001ff4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8002024 <MX_QUADSPI_Init+0x50>)
 8001ff8:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8001ffc:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001ffe:	4b09      	ldr	r3, [pc, #36]	@ (8002024 <MX_QUADSPI_Init+0x50>)
 8002000:	2200      	movs	r2, #0
 8002002:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8002004:	4b07      	ldr	r3, [pc, #28]	@ (8002024 <MX_QUADSPI_Init+0x50>)
 8002006:	2200      	movs	r2, #0
 8002008:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800200a:	4b06      	ldr	r3, [pc, #24]	@ (8002024 <MX_QUADSPI_Init+0x50>)
 800200c:	2200      	movs	r2, #0
 800200e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002010:	4804      	ldr	r0, [pc, #16]	@ (8002024 <MX_QUADSPI_Init+0x50>)
 8002012:	f008 fa09 	bl	800a428 <HAL_QSPI_Init>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 800201c:	f001 fb7c 	bl	8003718 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002020:	bf00      	nop
 8002022:	bd80      	pop	{r7, pc}
 8002024:	20001304 	.word	0x20001304
 8002028:	a0001000 	.word	0xa0001000

0800202c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b090      	sub	sp, #64	@ 0x40
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002032:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	60da      	str	r2, [r3, #12]
 8002040:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002042:	2300      	movs	r3, #0
 8002044:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8002046:	463b      	mov	r3, r7
 8002048:	2228      	movs	r2, #40	@ 0x28
 800204a:	2100      	movs	r1, #0
 800204c:	4618      	mov	r0, r3
 800204e:	f019 f9f3 	bl	801b438 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002052:	4b46      	ldr	r3, [pc, #280]	@ (800216c <MX_RTC_Init+0x140>)
 8002054:	4a46      	ldr	r2, [pc, #280]	@ (8002170 <MX_RTC_Init+0x144>)
 8002056:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002058:	4b44      	ldr	r3, [pc, #272]	@ (800216c <MX_RTC_Init+0x140>)
 800205a:	2200      	movs	r2, #0
 800205c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800205e:	4b43      	ldr	r3, [pc, #268]	@ (800216c <MX_RTC_Init+0x140>)
 8002060:	227f      	movs	r2, #127	@ 0x7f
 8002062:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002064:	4b41      	ldr	r3, [pc, #260]	@ (800216c <MX_RTC_Init+0x140>)
 8002066:	22ff      	movs	r2, #255	@ 0xff
 8002068:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800206a:	4b40      	ldr	r3, [pc, #256]	@ (800216c <MX_RTC_Init+0x140>)
 800206c:	2200      	movs	r2, #0
 800206e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002070:	4b3e      	ldr	r3, [pc, #248]	@ (800216c <MX_RTC_Init+0x140>)
 8002072:	2200      	movs	r2, #0
 8002074:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002076:	4b3d      	ldr	r3, [pc, #244]	@ (800216c <MX_RTC_Init+0x140>)
 8002078:	2200      	movs	r2, #0
 800207a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800207c:	483b      	ldr	r0, [pc, #236]	@ (800216c <MX_RTC_Init+0x140>)
 800207e:	f009 fc81 	bl	800b984 <HAL_RTC_Init>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002088:	f001 fb46 	bl	8003718 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800208c:	2300      	movs	r3, #0
 800208e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8002092:	2300      	movs	r3, #0
 8002094:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8002098:	2300      	movs	r3, #0
 800209a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800209e:	2300      	movs	r3, #0
 80020a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80020a2:	2300      	movs	r3, #0
 80020a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80020a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020aa:	2201      	movs	r2, #1
 80020ac:	4619      	mov	r1, r3
 80020ae:	482f      	ldr	r0, [pc, #188]	@ (800216c <MX_RTC_Init+0x140>)
 80020b0:	f009 fcea 	bl	800ba88 <HAL_RTC_SetTime>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80020ba:	f001 fb2d 	bl	8003718 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80020be:	2301      	movs	r3, #1
 80020c0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80020c4:	2301      	movs	r3, #1
 80020c6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 80020ca:	2301      	movs	r3, #1
 80020cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80020d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020da:	2201      	movs	r2, #1
 80020dc:	4619      	mov	r1, r3
 80020de:	4823      	ldr	r0, [pc, #140]	@ (800216c <MX_RTC_Init+0x140>)
 80020e0:	f009 fdca 	bl	800bc78 <HAL_RTC_SetDate>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80020ea:	f001 fb15 	bl	8003718 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800210a:	2300      	movs	r3, #0
 800210c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002112:	2301      	movs	r3, #1
 8002114:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002118:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800211c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800211e:	463b      	mov	r3, r7
 8002120:	2201      	movs	r2, #1
 8002122:	4619      	mov	r1, r3
 8002124:	4811      	ldr	r0, [pc, #68]	@ (800216c <MX_RTC_Init+0x140>)
 8002126:	f009 fe7b 	bl	800be20 <HAL_RTC_SetAlarm>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8002130:	f001 faf2 	bl	8003718 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8002134:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002138:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800213a:	463b      	mov	r3, r7
 800213c:	2201      	movs	r2, #1
 800213e:	4619      	mov	r1, r3
 8002140:	480a      	ldr	r0, [pc, #40]	@ (800216c <MX_RTC_Init+0x140>)
 8002142:	f009 fe6d 	bl	800be20 <HAL_RTC_SetAlarm>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 800214c:	f001 fae4 	bl	8003718 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8002150:	2202      	movs	r2, #2
 8002152:	2100      	movs	r1, #0
 8002154:	4805      	ldr	r0, [pc, #20]	@ (800216c <MX_RTC_Init+0x140>)
 8002156:	f00a f84b 	bl	800c1f0 <HAL_RTCEx_SetTimeStamp>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8002160:	f001 fada 	bl	8003718 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002164:	bf00      	nop
 8002166:	3740      	adds	r7, #64	@ 0x40
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20001350 	.word	0x20001350
 8002170:	40002800 	.word	0x40002800

08002174 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8002178:	4b4d      	ldr	r3, [pc, #308]	@ (80022b0 <MX_SAI2_Init+0x13c>)
 800217a:	4a4e      	ldr	r2, [pc, #312]	@ (80022b4 <MX_SAI2_Init+0x140>)
 800217c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800217e:	4b4c      	ldr	r3, [pc, #304]	@ (80022b0 <MX_SAI2_Init+0x13c>)
 8002180:	2200      	movs	r2, #0
 8002182:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8002184:	4b4a      	ldr	r3, [pc, #296]	@ (80022b0 <MX_SAI2_Init+0x13c>)
 8002186:	2200      	movs	r2, #0
 8002188:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800218a:	4b49      	ldr	r3, [pc, #292]	@ (80022b0 <MX_SAI2_Init+0x13c>)
 800218c:	2240      	movs	r2, #64	@ 0x40
 800218e:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002190:	4b47      	ldr	r3, [pc, #284]	@ (80022b0 <MX_SAI2_Init+0x13c>)
 8002192:	2200      	movs	r2, #0
 8002194:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002196:	4b46      	ldr	r3, [pc, #280]	@ (80022b0 <MX_SAI2_Init+0x13c>)
 8002198:	2200      	movs	r2, #0
 800219a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800219c:	4b44      	ldr	r3, [pc, #272]	@ (80022b0 <MX_SAI2_Init+0x13c>)
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80021a2:	4b43      	ldr	r3, [pc, #268]	@ (80022b0 <MX_SAI2_Init+0x13c>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80021a8:	4b41      	ldr	r3, [pc, #260]	@ (80022b0 <MX_SAI2_Init+0x13c>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80021ae:	4b40      	ldr	r3, [pc, #256]	@ (80022b0 <MX_SAI2_Init+0x13c>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80021b4:	4b3e      	ldr	r3, [pc, #248]	@ (80022b0 <MX_SAI2_Init+0x13c>)
 80021b6:	4a40      	ldr	r2, [pc, #256]	@ (80022b8 <MX_SAI2_Init+0x144>)
 80021b8:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80021ba:	4b3d      	ldr	r3, [pc, #244]	@ (80022b0 <MX_SAI2_Init+0x13c>)
 80021bc:	2200      	movs	r2, #0
 80021be:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80021c0:	4b3b      	ldr	r3, [pc, #236]	@ (80022b0 <MX_SAI2_Init+0x13c>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80021c6:	4b3a      	ldr	r3, [pc, #232]	@ (80022b0 <MX_SAI2_Init+0x13c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80021cc:	4b38      	ldr	r3, [pc, #224]	@ (80022b0 <MX_SAI2_Init+0x13c>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80021d2:	4b37      	ldr	r3, [pc, #220]	@ (80022b0 <MX_SAI2_Init+0x13c>)
 80021d4:	2208      	movs	r2, #8
 80021d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80021d8:	4b35      	ldr	r3, [pc, #212]	@ (80022b0 <MX_SAI2_Init+0x13c>)
 80021da:	2201      	movs	r2, #1
 80021dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80021de:	4b34      	ldr	r3, [pc, #208]	@ (80022b0 <MX_SAI2_Init+0x13c>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80021e4:	4b32      	ldr	r3, [pc, #200]	@ (80022b0 <MX_SAI2_Init+0x13c>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80021ea:	4b31      	ldr	r3, [pc, #196]	@ (80022b0 <MX_SAI2_Init+0x13c>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80021f0:	4b2f      	ldr	r3, [pc, #188]	@ (80022b0 <MX_SAI2_Init+0x13c>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80021f6:	4b2e      	ldr	r3, [pc, #184]	@ (80022b0 <MX_SAI2_Init+0x13c>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80021fc:	4b2c      	ldr	r3, [pc, #176]	@ (80022b0 <MX_SAI2_Init+0x13c>)
 80021fe:	2201      	movs	r2, #1
 8002200:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8002202:	4b2b      	ldr	r3, [pc, #172]	@ (80022b0 <MX_SAI2_Init+0x13c>)
 8002204:	2200      	movs	r2, #0
 8002206:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8002208:	4829      	ldr	r0, [pc, #164]	@ (80022b0 <MX_SAI2_Init+0x13c>)
 800220a:	f00a f859 	bl	800c2c0 <HAL_SAI_Init>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8002214:	f001 fa80 	bl	8003718 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8002218:	4b28      	ldr	r3, [pc, #160]	@ (80022bc <MX_SAI2_Init+0x148>)
 800221a:	4a29      	ldr	r2, [pc, #164]	@ (80022c0 <MX_SAI2_Init+0x14c>)
 800221c:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800221e:	4b27      	ldr	r3, [pc, #156]	@ (80022bc <MX_SAI2_Init+0x148>)
 8002220:	2200      	movs	r2, #0
 8002222:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8002224:	4b25      	ldr	r3, [pc, #148]	@ (80022bc <MX_SAI2_Init+0x148>)
 8002226:	2203      	movs	r2, #3
 8002228:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 800222a:	4b24      	ldr	r3, [pc, #144]	@ (80022bc <MX_SAI2_Init+0x148>)
 800222c:	2240      	movs	r2, #64	@ 0x40
 800222e:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002230:	4b22      	ldr	r3, [pc, #136]	@ (80022bc <MX_SAI2_Init+0x148>)
 8002232:	2200      	movs	r2, #0
 8002234:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002236:	4b21      	ldr	r3, [pc, #132]	@ (80022bc <MX_SAI2_Init+0x148>)
 8002238:	2200      	movs	r2, #0
 800223a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800223c:	4b1f      	ldr	r3, [pc, #124]	@ (80022bc <MX_SAI2_Init+0x148>)
 800223e:	2201      	movs	r2, #1
 8002240:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002242:	4b1e      	ldr	r3, [pc, #120]	@ (80022bc <MX_SAI2_Init+0x148>)
 8002244:	2200      	movs	r2, #0
 8002246:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002248:	4b1c      	ldr	r3, [pc, #112]	@ (80022bc <MX_SAI2_Init+0x148>)
 800224a:	2200      	movs	r2, #0
 800224c:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800224e:	4b1b      	ldr	r3, [pc, #108]	@ (80022bc <MX_SAI2_Init+0x148>)
 8002250:	2200      	movs	r2, #0
 8002252:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002254:	4b19      	ldr	r3, [pc, #100]	@ (80022bc <MX_SAI2_Init+0x148>)
 8002256:	2200      	movs	r2, #0
 8002258:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800225a:	4b18      	ldr	r3, [pc, #96]	@ (80022bc <MX_SAI2_Init+0x148>)
 800225c:	2200      	movs	r2, #0
 800225e:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002260:	4b16      	ldr	r3, [pc, #88]	@ (80022bc <MX_SAI2_Init+0x148>)
 8002262:	2200      	movs	r2, #0
 8002264:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8002266:	4b15      	ldr	r3, [pc, #84]	@ (80022bc <MX_SAI2_Init+0x148>)
 8002268:	2208      	movs	r2, #8
 800226a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 800226c:	4b13      	ldr	r3, [pc, #76]	@ (80022bc <MX_SAI2_Init+0x148>)
 800226e:	2201      	movs	r2, #1
 8002270:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002272:	4b12      	ldr	r3, [pc, #72]	@ (80022bc <MX_SAI2_Init+0x148>)
 8002274:	2200      	movs	r2, #0
 8002276:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002278:	4b10      	ldr	r3, [pc, #64]	@ (80022bc <MX_SAI2_Init+0x148>)
 800227a:	2200      	movs	r2, #0
 800227c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800227e:	4b0f      	ldr	r3, [pc, #60]	@ (80022bc <MX_SAI2_Init+0x148>)
 8002280:	2200      	movs	r2, #0
 8002282:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8002284:	4b0d      	ldr	r3, [pc, #52]	@ (80022bc <MX_SAI2_Init+0x148>)
 8002286:	2200      	movs	r2, #0
 8002288:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800228a:	4b0c      	ldr	r3, [pc, #48]	@ (80022bc <MX_SAI2_Init+0x148>)
 800228c:	2200      	movs	r2, #0
 800228e:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8002290:	4b0a      	ldr	r3, [pc, #40]	@ (80022bc <MX_SAI2_Init+0x148>)
 8002292:	2201      	movs	r2, #1
 8002294:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8002296:	4b09      	ldr	r3, [pc, #36]	@ (80022bc <MX_SAI2_Init+0x148>)
 8002298:	2200      	movs	r2, #0
 800229a:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800229c:	4807      	ldr	r0, [pc, #28]	@ (80022bc <MX_SAI2_Init+0x148>)
 800229e:	f00a f80f 	bl	800c2c0 <HAL_SAI_Init>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 80022a8:	f001 fa36 	bl	8003718 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80022ac:	bf00      	nop
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20001370 	.word	0x20001370
 80022b4:	40015c04 	.word	0x40015c04
 80022b8:	0002ee00 	.word	0x0002ee00
 80022bc:	200013f4 	.word	0x200013f4
 80022c0:	40015c24 	.word	0x40015c24

080022c4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80022c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002308 <MX_SDMMC1_SD_Init+0x44>)
 80022ca:	4a10      	ldr	r2, [pc, #64]	@ (800230c <MX_SDMMC1_SD_Init+0x48>)
 80022cc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80022ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002308 <MX_SDMMC1_SD_Init+0x44>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80022d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002308 <MX_SDMMC1_SD_Init+0x44>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80022da:	4b0b      	ldr	r3, [pc, #44]	@ (8002308 <MX_SDMMC1_SD_Init+0x44>)
 80022dc:	2200      	movs	r2, #0
 80022de:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;  // ST 커뮤니티 가이드: 1-bit 모드로 변경
 80022e0:	4b09      	ldr	r3, [pc, #36]	@ (8002308 <MX_SDMMC1_SD_Init+0x44>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80022e6:	4b08      	ldr	r3, [pc, #32]	@ (8002308 <MX_SDMMC1_SD_Init+0x44>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 2;  // 클럭 속도 낮춤 (새로운 SD카드 호환성 개선)
 80022ec:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <MX_SDMMC1_SD_Init+0x44>)
 80022ee:	2202      	movs	r2, #2
 80022f0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  
  // Initialize SD card with HAL
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80022f2:	4805      	ldr	r0, [pc, #20]	@ (8002308 <MX_SDMMC1_SD_Init+0x44>)
 80022f4:	f00a f99a 	bl	800c62c <HAL_SD_Init>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 80022fe:	f001 fa0b 	bl	8003718 <Error_Handler>
  }

  /* USER CODE END SDMMC1_Init 2 */

}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20001478 	.word	0x20001478
 800230c:	40012c00 	.word	0x40012c00

08002310 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8002314:	4b15      	ldr	r3, [pc, #84]	@ (800236c <MX_SPDIFRX_Init+0x5c>)
 8002316:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800231a:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 800231c:	4b13      	ldr	r3, [pc, #76]	@ (800236c <MX_SPDIFRX_Init+0x5c>)
 800231e:	2200      	movs	r2, #0
 8002320:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8002322:	4b12      	ldr	r3, [pc, #72]	@ (800236c <MX_SPDIFRX_Init+0x5c>)
 8002324:	2200      	movs	r2, #0
 8002326:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8002328:	4b10      	ldr	r3, [pc, #64]	@ (800236c <MX_SPDIFRX_Init+0x5c>)
 800232a:	2200      	movs	r2, #0
 800232c:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 800232e:	4b0f      	ldr	r3, [pc, #60]	@ (800236c <MX_SPDIFRX_Init+0x5c>)
 8002330:	2200      	movs	r2, #0
 8002332:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8002334:	4b0d      	ldr	r3, [pc, #52]	@ (800236c <MX_SPDIFRX_Init+0x5c>)
 8002336:	2200      	movs	r2, #0
 8002338:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800233a:	4b0c      	ldr	r3, [pc, #48]	@ (800236c <MX_SPDIFRX_Init+0x5c>)
 800233c:	2200      	movs	r2, #0
 800233e:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8002340:	4b0a      	ldr	r3, [pc, #40]	@ (800236c <MX_SPDIFRX_Init+0x5c>)
 8002342:	2200      	movs	r2, #0
 8002344:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8002346:	4b09      	ldr	r3, [pc, #36]	@ (800236c <MX_SPDIFRX_Init+0x5c>)
 8002348:	2200      	movs	r2, #0
 800234a:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 800234c:	4b07      	ldr	r3, [pc, #28]	@ (800236c <MX_SPDIFRX_Init+0x5c>)
 800234e:	2200      	movs	r2, #0
 8002350:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8002352:	4b06      	ldr	r3, [pc, #24]	@ (800236c <MX_SPDIFRX_Init+0x5c>)
 8002354:	2200      	movs	r2, #0
 8002356:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8002358:	4804      	ldr	r0, [pc, #16]	@ (800236c <MX_SPDIFRX_Init+0x5c>)
 800235a:	f00b fb95 	bl	800da88 <HAL_SPDIFRX_Init>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8002364:	f001 f9d8 	bl	8003718 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8002368:	bf00      	nop
 800236a:	bd80      	pop	{r7, pc}
 800236c:	200014fc 	.word	0x200014fc

08002370 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002374:	4b1b      	ldr	r3, [pc, #108]	@ (80023e4 <MX_SPI2_Init+0x74>)
 8002376:	4a1c      	ldr	r2, [pc, #112]	@ (80023e8 <MX_SPI2_Init+0x78>)
 8002378:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800237a:	4b1a      	ldr	r3, [pc, #104]	@ (80023e4 <MX_SPI2_Init+0x74>)
 800237c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002380:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002382:	4b18      	ldr	r3, [pc, #96]	@ (80023e4 <MX_SPI2_Init+0x74>)
 8002384:	2200      	movs	r2, #0
 8002386:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002388:	4b16      	ldr	r3, [pc, #88]	@ (80023e4 <MX_SPI2_Init+0x74>)
 800238a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800238e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002390:	4b14      	ldr	r3, [pc, #80]	@ (80023e4 <MX_SPI2_Init+0x74>)
 8002392:	2200      	movs	r2, #0
 8002394:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002396:	4b13      	ldr	r3, [pc, #76]	@ (80023e4 <MX_SPI2_Init+0x74>)
 8002398:	2200      	movs	r2, #0
 800239a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800239c:	4b11      	ldr	r3, [pc, #68]	@ (80023e4 <MX_SPI2_Init+0x74>)
 800239e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023a2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023a4:	4b0f      	ldr	r3, [pc, #60]	@ (80023e4 <MX_SPI2_Init+0x74>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023aa:	4b0e      	ldr	r3, [pc, #56]	@ (80023e4 <MX_SPI2_Init+0x74>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80023b0:	4b0c      	ldr	r3, [pc, #48]	@ (80023e4 <MX_SPI2_Init+0x74>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023b6:	4b0b      	ldr	r3, [pc, #44]	@ (80023e4 <MX_SPI2_Init+0x74>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80023bc:	4b09      	ldr	r3, [pc, #36]	@ (80023e4 <MX_SPI2_Init+0x74>)
 80023be:	2207      	movs	r2, #7
 80023c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80023c2:	4b08      	ldr	r3, [pc, #32]	@ (80023e4 <MX_SPI2_Init+0x74>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80023c8:	4b06      	ldr	r3, [pc, #24]	@ (80023e4 <MX_SPI2_Init+0x74>)
 80023ca:	2208      	movs	r2, #8
 80023cc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80023ce:	4805      	ldr	r0, [pc, #20]	@ (80023e4 <MX_SPI2_Init+0x74>)
 80023d0:	f00b fbb6 	bl	800db40 <HAL_SPI_Init>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80023da:	f001 f99d 	bl	8003718 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20001548 	.word	0x20001548
 80023e8:	40003800 	.word	0x40003800

080023ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b09a      	sub	sp, #104	@ 0x68
 80023f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023f2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	605a      	str	r2, [r3, #4]
 80023fc:	609a      	str	r2, [r3, #8]
 80023fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002400:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800240c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]
 800241c:	615a      	str	r2, [r3, #20]
 800241e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002420:	1d3b      	adds	r3, r7, #4
 8002422:	222c      	movs	r2, #44	@ 0x2c
 8002424:	2100      	movs	r1, #0
 8002426:	4618      	mov	r0, r3
 8002428:	f019 f806 	bl	801b438 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800242c:	4b43      	ldr	r3, [pc, #268]	@ (800253c <MX_TIM1_Init+0x150>)
 800242e:	4a44      	ldr	r2, [pc, #272]	@ (8002540 <MX_TIM1_Init+0x154>)
 8002430:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002432:	4b42      	ldr	r3, [pc, #264]	@ (800253c <MX_TIM1_Init+0x150>)
 8002434:	2200      	movs	r2, #0
 8002436:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002438:	4b40      	ldr	r3, [pc, #256]	@ (800253c <MX_TIM1_Init+0x150>)
 800243a:	2200      	movs	r2, #0
 800243c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800243e:	4b3f      	ldr	r3, [pc, #252]	@ (800253c <MX_TIM1_Init+0x150>)
 8002440:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002444:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002446:	4b3d      	ldr	r3, [pc, #244]	@ (800253c <MX_TIM1_Init+0x150>)
 8002448:	2200      	movs	r2, #0
 800244a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800244c:	4b3b      	ldr	r3, [pc, #236]	@ (800253c <MX_TIM1_Init+0x150>)
 800244e:	2200      	movs	r2, #0
 8002450:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002452:	4b3a      	ldr	r3, [pc, #232]	@ (800253c <MX_TIM1_Init+0x150>)
 8002454:	2200      	movs	r2, #0
 8002456:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002458:	4838      	ldr	r0, [pc, #224]	@ (800253c <MX_TIM1_Init+0x150>)
 800245a:	f00b fc1c 	bl	800dc96 <HAL_TIM_Base_Init>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002464:	f001 f958 	bl	8003718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002468:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800246c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800246e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002472:	4619      	mov	r1, r3
 8002474:	4831      	ldr	r0, [pc, #196]	@ (800253c <MX_TIM1_Init+0x150>)
 8002476:	f00b ff4f 	bl	800e318 <HAL_TIM_ConfigClockSource>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002480:	f001 f94a 	bl	8003718 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002484:	482d      	ldr	r0, [pc, #180]	@ (800253c <MX_TIM1_Init+0x150>)
 8002486:	f00b fcd5 	bl	800de34 <HAL_TIM_PWM_Init>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002490:	f001 f942 	bl	8003718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002494:	2300      	movs	r3, #0
 8002496:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002498:	2300      	movs	r3, #0
 800249a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800249c:	2300      	movs	r3, #0
 800249e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024a0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80024a4:	4619      	mov	r1, r3
 80024a6:	4825      	ldr	r0, [pc, #148]	@ (800253c <MX_TIM1_Init+0x150>)
 80024a8:	f00c fbc6 	bl	800ec38 <HAL_TIMEx_MasterConfigSynchronization>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80024b2:	f001 f931 	bl	8003718 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024b6:	2360      	movs	r3, #96	@ 0x60
 80024b8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024be:	2300      	movs	r3, #0
 80024c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024c2:	2300      	movs	r3, #0
 80024c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024c6:	2300      	movs	r3, #0
 80024c8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024ca:	2300      	movs	r3, #0
 80024cc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024ce:	2300      	movs	r3, #0
 80024d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024d2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80024d6:	2200      	movs	r2, #0
 80024d8:	4619      	mov	r1, r3
 80024da:	4818      	ldr	r0, [pc, #96]	@ (800253c <MX_TIM1_Init+0x150>)
 80024dc:	f00b fe08 	bl	800e0f0 <HAL_TIM_PWM_ConfigChannel>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80024e6:	f001 f917 	bl	8003718 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024ea:	2300      	movs	r3, #0
 80024ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024ee:	2300      	movs	r3, #0
 80024f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002502:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002508:	2300      	movs	r3, #0
 800250a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800250c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002510:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002516:	2300      	movs	r3, #0
 8002518:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800251a:	1d3b      	adds	r3, r7, #4
 800251c:	4619      	mov	r1, r3
 800251e:	4807      	ldr	r0, [pc, #28]	@ (800253c <MX_TIM1_Init+0x150>)
 8002520:	f00c fc18 	bl	800ed54 <HAL_TIMEx_ConfigBreakDeadTime>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800252a:	f001 f8f5 	bl	8003718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800252e:	4803      	ldr	r0, [pc, #12]	@ (800253c <MX_TIM1_Init+0x150>)
 8002530:	f001 ff5a 	bl	80043e8 <HAL_TIM_MspPostInit>

}
 8002534:	bf00      	nop
 8002536:	3768      	adds	r7, #104	@ 0x68
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	200015ac 	.word	0x200015ac
 8002540:	40010000 	.word	0x40010000

08002544 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08e      	sub	sp, #56	@ 0x38
 8002548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800254a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	605a      	str	r2, [r3, #4]
 8002554:	609a      	str	r2, [r3, #8]
 8002556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002558:	f107 031c 	add.w	r3, r7, #28
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	605a      	str	r2, [r3, #4]
 8002562:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002564:	463b      	mov	r3, r7
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	605a      	str	r2, [r3, #4]
 800256c:	609a      	str	r2, [r3, #8]
 800256e:	60da      	str	r2, [r3, #12]
 8002570:	611a      	str	r2, [r3, #16]
 8002572:	615a      	str	r2, [r3, #20]
 8002574:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002576:	4b2d      	ldr	r3, [pc, #180]	@ (800262c <MX_TIM2_Init+0xe8>)
 8002578:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800257c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800257e:	4b2b      	ldr	r3, [pc, #172]	@ (800262c <MX_TIM2_Init+0xe8>)
 8002580:	2200      	movs	r2, #0
 8002582:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002584:	4b29      	ldr	r3, [pc, #164]	@ (800262c <MX_TIM2_Init+0xe8>)
 8002586:	2200      	movs	r2, #0
 8002588:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800258a:	4b28      	ldr	r3, [pc, #160]	@ (800262c <MX_TIM2_Init+0xe8>)
 800258c:	f04f 32ff 	mov.w	r2, #4294967295
 8002590:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002592:	4b26      	ldr	r3, [pc, #152]	@ (800262c <MX_TIM2_Init+0xe8>)
 8002594:	2200      	movs	r2, #0
 8002596:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002598:	4b24      	ldr	r3, [pc, #144]	@ (800262c <MX_TIM2_Init+0xe8>)
 800259a:	2200      	movs	r2, #0
 800259c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800259e:	4823      	ldr	r0, [pc, #140]	@ (800262c <MX_TIM2_Init+0xe8>)
 80025a0:	f00b fb79 	bl	800dc96 <HAL_TIM_Base_Init>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80025aa:	f001 f8b5 	bl	8003718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025b8:	4619      	mov	r1, r3
 80025ba:	481c      	ldr	r0, [pc, #112]	@ (800262c <MX_TIM2_Init+0xe8>)
 80025bc:	f00b feac 	bl	800e318 <HAL_TIM_ConfigClockSource>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80025c6:	f001 f8a7 	bl	8003718 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80025ca:	4818      	ldr	r0, [pc, #96]	@ (800262c <MX_TIM2_Init+0xe8>)
 80025cc:	f00b fc32 	bl	800de34 <HAL_TIM_PWM_Init>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80025d6:	f001 f89f 	bl	8003718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025de:	2300      	movs	r3, #0
 80025e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025e2:	f107 031c 	add.w	r3, r7, #28
 80025e6:	4619      	mov	r1, r3
 80025e8:	4810      	ldr	r0, [pc, #64]	@ (800262c <MX_TIM2_Init+0xe8>)
 80025ea:	f00c fb25 	bl	800ec38 <HAL_TIMEx_MasterConfigSynchronization>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80025f4:	f001 f890 	bl	8003718 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025f8:	2360      	movs	r3, #96	@ 0x60
 80025fa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002600:	2300      	movs	r3, #0
 8002602:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002604:	2300      	movs	r3, #0
 8002606:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002608:	463b      	mov	r3, r7
 800260a:	2200      	movs	r2, #0
 800260c:	4619      	mov	r1, r3
 800260e:	4807      	ldr	r0, [pc, #28]	@ (800262c <MX_TIM2_Init+0xe8>)
 8002610:	f00b fd6e 	bl	800e0f0 <HAL_TIM_PWM_ConfigChannel>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800261a:	f001 f87d 	bl	8003718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800261e:	4803      	ldr	r0, [pc, #12]	@ (800262c <MX_TIM2_Init+0xe8>)
 8002620:	f001 fee2 	bl	80043e8 <HAL_TIM_MspPostInit>

}
 8002624:	bf00      	nop
 8002626:	3738      	adds	r7, #56	@ 0x38
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	200015f8 	.word	0x200015f8

08002630 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b08e      	sub	sp, #56	@ 0x38
 8002634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002636:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	605a      	str	r2, [r3, #4]
 8002640:	609a      	str	r2, [r3, #8]
 8002642:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002644:	f107 031c 	add.w	r3, r7, #28
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002650:	463b      	mov	r3, r7
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	605a      	str	r2, [r3, #4]
 8002658:	609a      	str	r2, [r3, #8]
 800265a:	60da      	str	r2, [r3, #12]
 800265c:	611a      	str	r2, [r3, #16]
 800265e:	615a      	str	r2, [r3, #20]
 8002660:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002662:	4b2d      	ldr	r3, [pc, #180]	@ (8002718 <MX_TIM3_Init+0xe8>)
 8002664:	4a2d      	ldr	r2, [pc, #180]	@ (800271c <MX_TIM3_Init+0xec>)
 8002666:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002668:	4b2b      	ldr	r3, [pc, #172]	@ (8002718 <MX_TIM3_Init+0xe8>)
 800266a:	2200      	movs	r2, #0
 800266c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800266e:	4b2a      	ldr	r3, [pc, #168]	@ (8002718 <MX_TIM3_Init+0xe8>)
 8002670:	2200      	movs	r2, #0
 8002672:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002674:	4b28      	ldr	r3, [pc, #160]	@ (8002718 <MX_TIM3_Init+0xe8>)
 8002676:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800267a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800267c:	4b26      	ldr	r3, [pc, #152]	@ (8002718 <MX_TIM3_Init+0xe8>)
 800267e:	2200      	movs	r2, #0
 8002680:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002682:	4b25      	ldr	r3, [pc, #148]	@ (8002718 <MX_TIM3_Init+0xe8>)
 8002684:	2200      	movs	r2, #0
 8002686:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002688:	4823      	ldr	r0, [pc, #140]	@ (8002718 <MX_TIM3_Init+0xe8>)
 800268a:	f00b fb04 	bl	800dc96 <HAL_TIM_Base_Init>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002694:	f001 f840 	bl	8003718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002698:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800269c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800269e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80026a2:	4619      	mov	r1, r3
 80026a4:	481c      	ldr	r0, [pc, #112]	@ (8002718 <MX_TIM3_Init+0xe8>)
 80026a6:	f00b fe37 	bl	800e318 <HAL_TIM_ConfigClockSource>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80026b0:	f001 f832 	bl	8003718 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80026b4:	4818      	ldr	r0, [pc, #96]	@ (8002718 <MX_TIM3_Init+0xe8>)
 80026b6:	f00b fbbd 	bl	800de34 <HAL_TIM_PWM_Init>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80026c0:	f001 f82a 	bl	8003718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026c4:	2300      	movs	r3, #0
 80026c6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026c8:	2300      	movs	r3, #0
 80026ca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026cc:	f107 031c 	add.w	r3, r7, #28
 80026d0:	4619      	mov	r1, r3
 80026d2:	4811      	ldr	r0, [pc, #68]	@ (8002718 <MX_TIM3_Init+0xe8>)
 80026d4:	f00c fab0 	bl	800ec38 <HAL_TIMEx_MasterConfigSynchronization>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80026de:	f001 f81b 	bl	8003718 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026e2:	2360      	movs	r3, #96	@ 0x60
 80026e4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026ea:	2300      	movs	r3, #0
 80026ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026ee:	2300      	movs	r3, #0
 80026f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026f2:	463b      	mov	r3, r7
 80026f4:	2200      	movs	r2, #0
 80026f6:	4619      	mov	r1, r3
 80026f8:	4807      	ldr	r0, [pc, #28]	@ (8002718 <MX_TIM3_Init+0xe8>)
 80026fa:	f00b fcf9 	bl	800e0f0 <HAL_TIM_PWM_ConfigChannel>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002704:	f001 f808 	bl	8003718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002708:	4803      	ldr	r0, [pc, #12]	@ (8002718 <MX_TIM3_Init+0xe8>)
 800270a:	f001 fe6d 	bl	80043e8 <HAL_TIM_MspPostInit>

}
 800270e:	bf00      	nop
 8002710:	3738      	adds	r7, #56	@ 0x38
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	20001644 	.word	0x20001644
 800271c:	40000400 	.word	0x40000400

08002720 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b08e      	sub	sp, #56	@ 0x38
 8002724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002726:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	605a      	str	r2, [r3, #4]
 8002730:	609a      	str	r2, [r3, #8]
 8002732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002734:	f107 031c 	add.w	r3, r7, #28
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	605a      	str	r2, [r3, #4]
 800273e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002740:	463b      	mov	r3, r7
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	605a      	str	r2, [r3, #4]
 8002748:	609a      	str	r2, [r3, #8]
 800274a:	60da      	str	r2, [r3, #12]
 800274c:	611a      	str	r2, [r3, #16]
 800274e:	615a      	str	r2, [r3, #20]
 8002750:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002752:	4b2d      	ldr	r3, [pc, #180]	@ (8002808 <MX_TIM5_Init+0xe8>)
 8002754:	4a2d      	ldr	r2, [pc, #180]	@ (800280c <MX_TIM5_Init+0xec>)
 8002756:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002758:	4b2b      	ldr	r3, [pc, #172]	@ (8002808 <MX_TIM5_Init+0xe8>)
 800275a:	2200      	movs	r2, #0
 800275c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800275e:	4b2a      	ldr	r3, [pc, #168]	@ (8002808 <MX_TIM5_Init+0xe8>)
 8002760:	2200      	movs	r2, #0
 8002762:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002764:	4b28      	ldr	r3, [pc, #160]	@ (8002808 <MX_TIM5_Init+0xe8>)
 8002766:	f04f 32ff 	mov.w	r2, #4294967295
 800276a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800276c:	4b26      	ldr	r3, [pc, #152]	@ (8002808 <MX_TIM5_Init+0xe8>)
 800276e:	2200      	movs	r2, #0
 8002770:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002772:	4b25      	ldr	r3, [pc, #148]	@ (8002808 <MX_TIM5_Init+0xe8>)
 8002774:	2200      	movs	r2, #0
 8002776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002778:	4823      	ldr	r0, [pc, #140]	@ (8002808 <MX_TIM5_Init+0xe8>)
 800277a:	f00b fa8c 	bl	800dc96 <HAL_TIM_Base_Init>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002784:	f000 ffc8 	bl	8003718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002788:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800278c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800278e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002792:	4619      	mov	r1, r3
 8002794:	481c      	ldr	r0, [pc, #112]	@ (8002808 <MX_TIM5_Init+0xe8>)
 8002796:	f00b fdbf 	bl	800e318 <HAL_TIM_ConfigClockSource>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80027a0:	f000 ffba 	bl	8003718 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80027a4:	4818      	ldr	r0, [pc, #96]	@ (8002808 <MX_TIM5_Init+0xe8>)
 80027a6:	f00b fb45 	bl	800de34 <HAL_TIM_PWM_Init>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80027b0:	f000 ffb2 	bl	8003718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027b4:	2300      	movs	r3, #0
 80027b6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027b8:	2300      	movs	r3, #0
 80027ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80027bc:	f107 031c 	add.w	r3, r7, #28
 80027c0:	4619      	mov	r1, r3
 80027c2:	4811      	ldr	r0, [pc, #68]	@ (8002808 <MX_TIM5_Init+0xe8>)
 80027c4:	f00c fa38 	bl	800ec38 <HAL_TIMEx_MasterConfigSynchronization>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80027ce:	f000 ffa3 	bl	8003718 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027d2:	2360      	movs	r3, #96	@ 0x60
 80027d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027da:	2300      	movs	r3, #0
 80027dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027de:	2300      	movs	r3, #0
 80027e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80027e2:	463b      	mov	r3, r7
 80027e4:	220c      	movs	r2, #12
 80027e6:	4619      	mov	r1, r3
 80027e8:	4807      	ldr	r0, [pc, #28]	@ (8002808 <MX_TIM5_Init+0xe8>)
 80027ea:	f00b fc81 	bl	800e0f0 <HAL_TIM_PWM_ConfigChannel>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80027f4:	f000 ff90 	bl	8003718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80027f8:	4803      	ldr	r0, [pc, #12]	@ (8002808 <MX_TIM5_Init+0xe8>)
 80027fa:	f001 fdf5 	bl	80043e8 <HAL_TIM_MspPostInit>

}
 80027fe:	bf00      	nop
 8002800:	3738      	adds	r7, #56	@ 0x38
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	20001690 	.word	0x20001690
 800280c:	40000c00 	.word	0x40000c00

08002810 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002816:	f107 0310 	add.w	r3, r7, #16
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	605a      	str	r2, [r3, #4]
 8002820:	609a      	str	r2, [r3, #8]
 8002822:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002824:	1d3b      	adds	r3, r7, #4
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	605a      	str	r2, [r3, #4]
 800282c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800282e:	4b20      	ldr	r3, [pc, #128]	@ (80028b0 <MX_TIM8_Init+0xa0>)
 8002830:	4a20      	ldr	r2, [pc, #128]	@ (80028b4 <MX_TIM8_Init+0xa4>)
 8002832:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002834:	4b1e      	ldr	r3, [pc, #120]	@ (80028b0 <MX_TIM8_Init+0xa0>)
 8002836:	2200      	movs	r2, #0
 8002838:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800283a:	4b1d      	ldr	r3, [pc, #116]	@ (80028b0 <MX_TIM8_Init+0xa0>)
 800283c:	2200      	movs	r2, #0
 800283e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002840:	4b1b      	ldr	r3, [pc, #108]	@ (80028b0 <MX_TIM8_Init+0xa0>)
 8002842:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002846:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002848:	4b19      	ldr	r3, [pc, #100]	@ (80028b0 <MX_TIM8_Init+0xa0>)
 800284a:	2200      	movs	r2, #0
 800284c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800284e:	4b18      	ldr	r3, [pc, #96]	@ (80028b0 <MX_TIM8_Init+0xa0>)
 8002850:	2200      	movs	r2, #0
 8002852:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002854:	4b16      	ldr	r3, [pc, #88]	@ (80028b0 <MX_TIM8_Init+0xa0>)
 8002856:	2200      	movs	r2, #0
 8002858:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800285a:	4815      	ldr	r0, [pc, #84]	@ (80028b0 <MX_TIM8_Init+0xa0>)
 800285c:	f00b fa1b 	bl	800dc96 <HAL_TIM_Base_Init>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8002866:	f000 ff57 	bl	8003718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800286a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800286e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002870:	f107 0310 	add.w	r3, r7, #16
 8002874:	4619      	mov	r1, r3
 8002876:	480e      	ldr	r0, [pc, #56]	@ (80028b0 <MX_TIM8_Init+0xa0>)
 8002878:	f00b fd4e 	bl	800e318 <HAL_TIM_ConfigClockSource>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8002882:	f000 ff49 	bl	8003718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002886:	2300      	movs	r3, #0
 8002888:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800288a:	2300      	movs	r3, #0
 800288c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800288e:	2300      	movs	r3, #0
 8002890:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002892:	1d3b      	adds	r3, r7, #4
 8002894:	4619      	mov	r1, r3
 8002896:	4806      	ldr	r0, [pc, #24]	@ (80028b0 <MX_TIM8_Init+0xa0>)
 8002898:	f00c f9ce 	bl	800ec38 <HAL_TIMEx_MasterConfigSynchronization>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80028a2:	f000 ff39 	bl	8003718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80028a6:	bf00      	nop
 80028a8:	3720      	adds	r7, #32
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	200016dc 	.word	0x200016dc
 80028b4:	40010400 	.word	0x40010400

080028b8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b088      	sub	sp, #32
 80028bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80028be:	1d3b      	adds	r3, r7, #4
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	611a      	str	r2, [r3, #16]
 80028cc:	615a      	str	r2, [r3, #20]
 80028ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80028d0:	4b1a      	ldr	r3, [pc, #104]	@ (800293c <MX_TIM12_Init+0x84>)
 80028d2:	4a1b      	ldr	r2, [pc, #108]	@ (8002940 <MX_TIM12_Init+0x88>)
 80028d4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80028d6:	4b19      	ldr	r3, [pc, #100]	@ (800293c <MX_TIM12_Init+0x84>)
 80028d8:	2200      	movs	r2, #0
 80028da:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028dc:	4b17      	ldr	r3, [pc, #92]	@ (800293c <MX_TIM12_Init+0x84>)
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80028e2:	4b16      	ldr	r3, [pc, #88]	@ (800293c <MX_TIM12_Init+0x84>)
 80028e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80028e8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ea:	4b14      	ldr	r3, [pc, #80]	@ (800293c <MX_TIM12_Init+0x84>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028f0:	4b12      	ldr	r3, [pc, #72]	@ (800293c <MX_TIM12_Init+0x84>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80028f6:	4811      	ldr	r0, [pc, #68]	@ (800293c <MX_TIM12_Init+0x84>)
 80028f8:	f00b fa9c 	bl	800de34 <HAL_TIM_PWM_Init>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002902:	f000 ff09 	bl	8003718 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002906:	2360      	movs	r3, #96	@ 0x60
 8002908:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800290a:	2300      	movs	r3, #0
 800290c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002916:	1d3b      	adds	r3, r7, #4
 8002918:	2200      	movs	r2, #0
 800291a:	4619      	mov	r1, r3
 800291c:	4807      	ldr	r0, [pc, #28]	@ (800293c <MX_TIM12_Init+0x84>)
 800291e:	f00b fbe7 	bl	800e0f0 <HAL_TIM_PWM_ConfigChannel>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002928:	f000 fef6 	bl	8003718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800292c:	4803      	ldr	r0, [pc, #12]	@ (800293c <MX_TIM12_Init+0x84>)
 800292e:	f001 fd5b 	bl	80043e8 <HAL_TIM_MspPostInit>

}
 8002932:	bf00      	nop
 8002934:	3720      	adds	r7, #32
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20001728 	.word	0x20001728
 8002940:	40001800 	.word	0x40001800

08002944 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002948:	4b14      	ldr	r3, [pc, #80]	@ (800299c <MX_USART1_UART_Init+0x58>)
 800294a:	4a15      	ldr	r2, [pc, #84]	@ (80029a0 <MX_USART1_UART_Init+0x5c>)
 800294c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800294e:	4b13      	ldr	r3, [pc, #76]	@ (800299c <MX_USART1_UART_Init+0x58>)
 8002950:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002954:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002956:	4b11      	ldr	r3, [pc, #68]	@ (800299c <MX_USART1_UART_Init+0x58>)
 8002958:	2200      	movs	r2, #0
 800295a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800295c:	4b0f      	ldr	r3, [pc, #60]	@ (800299c <MX_USART1_UART_Init+0x58>)
 800295e:	2200      	movs	r2, #0
 8002960:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002962:	4b0e      	ldr	r3, [pc, #56]	@ (800299c <MX_USART1_UART_Init+0x58>)
 8002964:	2200      	movs	r2, #0
 8002966:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002968:	4b0c      	ldr	r3, [pc, #48]	@ (800299c <MX_USART1_UART_Init+0x58>)
 800296a:	220c      	movs	r2, #12
 800296c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800296e:	4b0b      	ldr	r3, [pc, #44]	@ (800299c <MX_USART1_UART_Init+0x58>)
 8002970:	2200      	movs	r2, #0
 8002972:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002974:	4b09      	ldr	r3, [pc, #36]	@ (800299c <MX_USART1_UART_Init+0x58>)
 8002976:	2200      	movs	r2, #0
 8002978:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800297a:	4b08      	ldr	r3, [pc, #32]	@ (800299c <MX_USART1_UART_Init+0x58>)
 800297c:	2200      	movs	r2, #0
 800297e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002980:	4b06      	ldr	r3, [pc, #24]	@ (800299c <MX_USART1_UART_Init+0x58>)
 8002982:	2200      	movs	r2, #0
 8002984:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002986:	4805      	ldr	r0, [pc, #20]	@ (800299c <MX_USART1_UART_Init+0x58>)
 8002988:	f00c fa80 	bl	800ee8c <HAL_UART_Init>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002992:	f000 fec1 	bl	8003718 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002996:	bf00      	nop
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	20001774 	.word	0x20001774
 80029a0:	40011000 	.word	0x40011000

080029a4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80029a8:	4b14      	ldr	r3, [pc, #80]	@ (80029fc <MX_USART6_UART_Init+0x58>)
 80029aa:	4a15      	ldr	r2, [pc, #84]	@ (8002a00 <MX_USART6_UART_Init+0x5c>)
 80029ac:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80029ae:	4b13      	ldr	r3, [pc, #76]	@ (80029fc <MX_USART6_UART_Init+0x58>)
 80029b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80029b4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80029b6:	4b11      	ldr	r3, [pc, #68]	@ (80029fc <MX_USART6_UART_Init+0x58>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80029bc:	4b0f      	ldr	r3, [pc, #60]	@ (80029fc <MX_USART6_UART_Init+0x58>)
 80029be:	2200      	movs	r2, #0
 80029c0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80029c2:	4b0e      	ldr	r3, [pc, #56]	@ (80029fc <MX_USART6_UART_Init+0x58>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80029c8:	4b0c      	ldr	r3, [pc, #48]	@ (80029fc <MX_USART6_UART_Init+0x58>)
 80029ca:	220c      	movs	r2, #12
 80029cc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ce:	4b0b      	ldr	r3, [pc, #44]	@ (80029fc <MX_USART6_UART_Init+0x58>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80029d4:	4b09      	ldr	r3, [pc, #36]	@ (80029fc <MX_USART6_UART_Init+0x58>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029da:	4b08      	ldr	r3, [pc, #32]	@ (80029fc <MX_USART6_UART_Init+0x58>)
 80029dc:	2200      	movs	r2, #0
 80029de:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029e0:	4b06      	ldr	r3, [pc, #24]	@ (80029fc <MX_USART6_UART_Init+0x58>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80029e6:	4805      	ldr	r0, [pc, #20]	@ (80029fc <MX_USART6_UART_Init+0x58>)
 80029e8:	f00c fa50 	bl	800ee8c <HAL_UART_Init>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80029f2:	f000 fe91 	bl	8003718 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80029f6:	bf00      	nop
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	200017fc 	.word	0x200017fc
 8002a00:	40011400 	.word	0x40011400

08002a04 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b088      	sub	sp, #32
 8002a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002a0a:	1d3b      	adds	r3, r7, #4
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	60da      	str	r2, [r3, #12]
 8002a16:	611a      	str	r2, [r3, #16]
 8002a18:	615a      	str	r2, [r3, #20]
 8002a1a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8002a9c <MX_FMC_Init+0x98>)
 8002a1e:	4a20      	ldr	r2, [pc, #128]	@ (8002aa0 <MX_FMC_Init+0x9c>)
 8002a20:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002a22:	4b1e      	ldr	r3, [pc, #120]	@ (8002a9c <MX_FMC_Init+0x98>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002a28:	4b1c      	ldr	r3, [pc, #112]	@ (8002a9c <MX_FMC_Init+0x98>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002a2e:	4b1b      	ldr	r3, [pc, #108]	@ (8002a9c <MX_FMC_Init+0x98>)
 8002a30:	2204      	movs	r2, #4
 8002a32:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002a34:	4b19      	ldr	r3, [pc, #100]	@ (8002a9c <MX_FMC_Init+0x98>)
 8002a36:	2210      	movs	r2, #16
 8002a38:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002a3a:	4b18      	ldr	r3, [pc, #96]	@ (8002a9c <MX_FMC_Init+0x98>)
 8002a3c:	2240      	movs	r2, #64	@ 0x40
 8002a3e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002a40:	4b16      	ldr	r3, [pc, #88]	@ (8002a9c <MX_FMC_Init+0x98>)
 8002a42:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002a46:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002a48:	4b14      	ldr	r3, [pc, #80]	@ (8002a9c <MX_FMC_Init+0x98>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002a4e:	4b13      	ldr	r3, [pc, #76]	@ (8002a9c <MX_FMC_Init+0x98>)
 8002a50:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a54:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002a56:	4b11      	ldr	r3, [pc, #68]	@ (8002a9c <MX_FMC_Init+0x98>)
 8002a58:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002a5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8002a9c <MX_FMC_Init+0x98>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002a64:	2302      	movs	r3, #2
 8002a66:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002a68:	2307      	movs	r3, #7
 8002a6a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002a6c:	2304      	movs	r3, #4
 8002a6e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002a70:	2307      	movs	r3, #7
 8002a72:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002a74:	2303      	movs	r3, #3
 8002a76:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002a80:	1d3b      	adds	r3, r7, #4
 8002a82:	4619      	mov	r1, r3
 8002a84:	4805      	ldr	r0, [pc, #20]	@ (8002a9c <MX_FMC_Init+0x98>)
 8002a86:	f00a ffcb 	bl	800da20 <HAL_SDRAM_Init>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002a90:	f000 fe42 	bl	8003718 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002a94:	bf00      	nop
 8002a96:	3720      	adds	r7, #32
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	20001884 	.word	0x20001884
 8002aa0:	a0000140 	.word	0xa0000140

08002aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b090      	sub	sp, #64	@ 0x40
 8002aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aaa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	605a      	str	r2, [r3, #4]
 8002ab4:	609a      	str	r2, [r3, #8]
 8002ab6:	60da      	str	r2, [r3, #12]
 8002ab8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002aba:	4bb0      	ldr	r3, [pc, #704]	@ (8002d7c <MX_GPIO_Init+0x2d8>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002abe:	4aaf      	ldr	r2, [pc, #700]	@ (8002d7c <MX_GPIO_Init+0x2d8>)
 8002ac0:	f043 0310 	orr.w	r3, r3, #16
 8002ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ac6:	4bad      	ldr	r3, [pc, #692]	@ (8002d7c <MX_GPIO_Init+0x2d8>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aca:	f003 0310 	and.w	r3, r3, #16
 8002ace:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ad2:	4baa      	ldr	r3, [pc, #680]	@ (8002d7c <MX_GPIO_Init+0x2d8>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad6:	4aa9      	ldr	r2, [pc, #676]	@ (8002d7c <MX_GPIO_Init+0x2d8>)
 8002ad8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ade:	4ba7      	ldr	r3, [pc, #668]	@ (8002d7c <MX_GPIO_Init+0x2d8>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aea:	4ba4      	ldr	r3, [pc, #656]	@ (8002d7c <MX_GPIO_Init+0x2d8>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aee:	4aa3      	ldr	r2, [pc, #652]	@ (8002d7c <MX_GPIO_Init+0x2d8>)
 8002af0:	f043 0302 	orr.w	r3, r3, #2
 8002af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002af6:	4ba1      	ldr	r3, [pc, #644]	@ (8002d7c <MX_GPIO_Init+0x2d8>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	623b      	str	r3, [r7, #32]
 8002b00:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b02:	4b9e      	ldr	r3, [pc, #632]	@ (8002d7c <MX_GPIO_Init+0x2d8>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b06:	4a9d      	ldr	r2, [pc, #628]	@ (8002d7c <MX_GPIO_Init+0x2d8>)
 8002b08:	f043 0308 	orr.w	r3, r3, #8
 8002b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b0e:	4b9b      	ldr	r3, [pc, #620]	@ (8002d7c <MX_GPIO_Init+0x2d8>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	61fb      	str	r3, [r7, #28]
 8002b18:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b1a:	4b98      	ldr	r3, [pc, #608]	@ (8002d7c <MX_GPIO_Init+0x2d8>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1e:	4a97      	ldr	r2, [pc, #604]	@ (8002d7c <MX_GPIO_Init+0x2d8>)
 8002b20:	f043 0304 	orr.w	r3, r3, #4
 8002b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b26:	4b95      	ldr	r3, [pc, #596]	@ (8002d7c <MX_GPIO_Init+0x2d8>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	61bb      	str	r3, [r7, #24]
 8002b30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b32:	4b92      	ldr	r3, [pc, #584]	@ (8002d7c <MX_GPIO_Init+0x2d8>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b36:	4a91      	ldr	r2, [pc, #580]	@ (8002d7c <MX_GPIO_Init+0x2d8>)
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b3e:	4b8f      	ldr	r3, [pc, #572]	@ (8002d7c <MX_GPIO_Init+0x2d8>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002b4a:	4b8c      	ldr	r3, [pc, #560]	@ (8002d7c <MX_GPIO_Init+0x2d8>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4e:	4a8b      	ldr	r2, [pc, #556]	@ (8002d7c <MX_GPIO_Init+0x2d8>)
 8002b50:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b56:	4b89      	ldr	r3, [pc, #548]	@ (8002d7c <MX_GPIO_Init+0x2d8>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b5e:	613b      	str	r3, [r7, #16]
 8002b60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002b62:	4b86      	ldr	r3, [pc, #536]	@ (8002d7c <MX_GPIO_Init+0x2d8>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b66:	4a85      	ldr	r2, [pc, #532]	@ (8002d7c <MX_GPIO_Init+0x2d8>)
 8002b68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b6e:	4b83      	ldr	r3, [pc, #524]	@ (8002d7c <MX_GPIO_Init+0x2d8>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002b7a:	4b80      	ldr	r3, [pc, #512]	@ (8002d7c <MX_GPIO_Init+0x2d8>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7e:	4a7f      	ldr	r2, [pc, #508]	@ (8002d7c <MX_GPIO_Init+0x2d8>)
 8002b80:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b86:	4b7d      	ldr	r3, [pc, #500]	@ (8002d7c <MX_GPIO_Init+0x2d8>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b8e:	60bb      	str	r3, [r7, #8]
 8002b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b92:	4b7a      	ldr	r3, [pc, #488]	@ (8002d7c <MX_GPIO_Init+0x2d8>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b96:	4a79      	ldr	r2, [pc, #484]	@ (8002d7c <MX_GPIO_Init+0x2d8>)
 8002b98:	f043 0320 	orr.w	r3, r3, #32
 8002b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b9e:	4b77      	ldr	r3, [pc, #476]	@ (8002d7c <MX_GPIO_Init+0x2d8>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba2:	f003 0320 	and.w	r3, r3, #32
 8002ba6:	607b      	str	r3, [r7, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002baa:	4b74      	ldr	r3, [pc, #464]	@ (8002d7c <MX_GPIO_Init+0x2d8>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bae:	4a73      	ldr	r2, [pc, #460]	@ (8002d7c <MX_GPIO_Init+0x2d8>)
 8002bb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bb6:	4b71      	ldr	r3, [pc, #452]	@ (8002d7c <MX_GPIO_Init+0x2d8>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bbe:	603b      	str	r3, [r7, #0]
 8002bc0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	2120      	movs	r1, #32
 8002bc6:	486e      	ldr	r0, [pc, #440]	@ (8002d80 <MX_GPIO_Init+0x2dc>)
 8002bc8:	f004 fe3a 	bl	8007840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8002bcc:	2200      	movs	r2, #0
 8002bce:	210c      	movs	r1, #12
 8002bd0:	486c      	ldr	r0, [pc, #432]	@ (8002d84 <MX_GPIO_Init+0x2e0>)
 8002bd2:	f004 fe35 	bl	8007840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	2108      	movs	r1, #8
 8002bda:	486b      	ldr	r0, [pc, #428]	@ (8002d88 <MX_GPIO_Init+0x2e4>)
 8002bdc:	f004 fe30 	bl	8007840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002be0:	2201      	movs	r2, #1
 8002be2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002be6:	4867      	ldr	r0, [pc, #412]	@ (8002d84 <MX_GPIO_Init+0x2e0>)
 8002be8:	f004 fe2a 	bl	8007840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002bec:	2200      	movs	r2, #0
 8002bee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002bf2:	4866      	ldr	r0, [pc, #408]	@ (8002d8c <MX_GPIO_Init+0x2e8>)
 8002bf4:	f004 fe24 	bl	8007840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	21c8      	movs	r1, #200	@ 0xc8
 8002bfc:	4864      	ldr	r0, [pc, #400]	@ (8002d90 <MX_GPIO_Init+0x2ec>)
 8002bfe:	f004 fe1f 	bl	8007840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002c02:	2308      	movs	r3, #8
 8002c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c06:	2300      	movs	r3, #0
 8002c08:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002c0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c12:	4619      	mov	r1, r3
 8002c14:	485f      	ldr	r0, [pc, #380]	@ (8002d94 <MX_GPIO_Init+0x2f0>)
 8002c16:	f004 fc67 	bl	80074e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8002c1a:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8002c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c20:	2302      	movs	r3, #2
 8002c22:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002c2c:	230a      	movs	r3, #10
 8002c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c34:	4619      	mov	r1, r3
 8002c36:	4858      	ldr	r0, [pc, #352]	@ (8002d98 <MX_GPIO_Init+0x2f4>)
 8002c38:	f004 fc56 	bl	80074e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002c3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c42:	2300      	movs	r3, #0
 8002c44:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002c4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4852      	ldr	r0, [pc, #328]	@ (8002d9c <MX_GPIO_Init+0x2f8>)
 8002c52:	f004 fc49 	bl	80074e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002c56:	2340      	movs	r3, #64	@ 0x40
 8002c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002c5a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002c5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002c64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4845      	ldr	r0, [pc, #276]	@ (8002d80 <MX_GPIO_Init+0x2dc>)
 8002c6c:	f004 fc3c 	bl	80074e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002c70:	2320      	movs	r3, #32
 8002c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c74:	2301      	movs	r3, #1
 8002c76:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002c80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c84:	4619      	mov	r1, r3
 8002c86:	483e      	ldr	r0, [pc, #248]	@ (8002d80 <MX_GPIO_Init+0x2dc>)
 8002c88:	f004 fc2e 	bl	80074e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8002c8c:	f241 030c 	movw	r3, #4108	@ 0x100c
 8002c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c92:	2301      	movs	r3, #1
 8002c94:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002c9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4837      	ldr	r0, [pc, #220]	@ (8002d84 <MX_GPIO_Init+0x2e0>)
 8002ca6:	f004 fc1f 	bl	80074e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002caa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002cb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4838      	ldr	r0, [pc, #224]	@ (8002da0 <MX_GPIO_Init+0x2fc>)
 8002cc0:	f004 fc12 	bl	80074e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002cc4:	2308      	movs	r3, #8
 8002cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002cd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cd8:	4619      	mov	r1, r3
 8002cda:	482b      	ldr	r0, [pc, #172]	@ (8002d88 <MX_GPIO_Init+0x2e4>)
 8002cdc:	f004 fc04 	bl	80074e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002ce0:	2310      	movs	r3, #16
 8002ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002cec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4823      	ldr	r0, [pc, #140]	@ (8002d80 <MX_GPIO_Init+0x2dc>)
 8002cf4:	f004 fbf8 	bl	80074e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002cf8:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002d06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	481f      	ldr	r0, [pc, #124]	@ (8002d8c <MX_GPIO_Init+0x2e8>)
 8002d0e:	f004 fbeb 	bl	80074e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002d12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d20:	2300      	movs	r3, #0
 8002d22:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002d24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4818      	ldr	r0, [pc, #96]	@ (8002d8c <MX_GPIO_Init+0x2e8>)
 8002d2c:	f004 fbdc 	bl	80074e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002d30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002d36:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002d3a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002d40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d44:	4619      	mov	r1, r3
 8002d46:	480f      	ldr	r0, [pc, #60]	@ (8002d84 <MX_GPIO_Init+0x2e0>)
 8002d48:	f004 fbce 	bl	80074e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002d4c:	2310      	movs	r3, #16
 8002d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d50:	2302      	movs	r3, #2
 8002d52:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d54:	2300      	movs	r3, #0
 8002d56:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002d5c:	230a      	movs	r3, #10
 8002d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002d60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d64:	4619      	mov	r1, r3
 8002d66:	4809      	ldr	r0, [pc, #36]	@ (8002d8c <MX_GPIO_Init+0x2e8>)
 8002d68:	f004 fbbe 	bl	80074e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002d6c:	23c8      	movs	r3, #200	@ 0xc8
 8002d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d70:	2301      	movs	r3, #1
 8002d72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d74:	2300      	movs	r3, #0
 8002d76:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d78:	e014      	b.n	8002da4 <MX_GPIO_Init+0x300>
 8002d7a:	bf00      	nop
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	40020c00 	.word	0x40020c00
 8002d84:	40022000 	.word	0x40022000
 8002d88:	40022800 	.word	0x40022800
 8002d8c:	40021c00 	.word	0x40021c00
 8002d90:	40021800 	.word	0x40021800
 8002d94:	40021000 	.word	0x40021000
 8002d98:	40020400 	.word	0x40020400
 8002d9c:	40022400 	.word	0x40022400
 8002da0:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da4:	2300      	movs	r3, #0
 8002da6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002da8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dac:	4619      	mov	r1, r3
 8002dae:	4819      	ldr	r0, [pc, #100]	@ (8002e14 <MX_GPIO_Init+0x370>)
 8002db0:	f004 fb9a 	bl	80074e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002db4:	2305      	movs	r3, #5
 8002db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db8:	2302      	movs	r3, #2
 8002dba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002dc4:	230a      	movs	r3, #10
 8002dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4812      	ldr	r0, [pc, #72]	@ (8002e18 <MX_GPIO_Init+0x374>)
 8002dd0:	f004 fb8a 	bl	80074e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002dd4:	2304      	movs	r3, #4
 8002dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002de0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002de4:	4619      	mov	r1, r3
 8002de6:	480b      	ldr	r0, [pc, #44]	@ (8002e14 <MX_GPIO_Init+0x370>)
 8002de8:	f004 fb7e 	bl	80074e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002dec:	2328      	movs	r3, #40	@ 0x28
 8002dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df0:	2302      	movs	r3, #2
 8002df2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df4:	2300      	movs	r3, #0
 8002df6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002dfc:	230a      	movs	r3, #10
 8002dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e04:	4619      	mov	r1, r3
 8002e06:	4805      	ldr	r0, [pc, #20]	@ (8002e1c <MX_GPIO_Init+0x378>)
 8002e08:	f004 fb6e 	bl	80074e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002e0c:	bf00      	nop
 8002e0e:	3740      	adds	r7, #64	@ 0x40
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40021800 	.word	0x40021800
 8002e18:	40020800 	.word	0x40020800
 8002e1c:	40020000 	.word	0x40020000

08002e20 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b0a4      	sub	sp, #144	@ 0x90
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8002e28:	f017 feac 	bl	801ab84 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  
  // SD Card 초기화는 이미 main()에서 우선 완료됨
  LOG_INFO("📋 SD card initialization completed in main() - checking status...");
 8002e2c:	49b0      	ldr	r1, [pc, #704]	@ (80030f0 <StartDefaultTask+0x2d0>)
 8002e2e:	2001      	movs	r0, #1
 8002e30:	f001 ff06 	bl	8004c40 <LOGGER_SendFormatted>
  
  LOG_INFO("=== STM32F746G-DISCO UART6 Test Started ===");
 8002e34:	49af      	ldr	r1, [pc, #700]	@ (80030f4 <StartDefaultTask+0x2d4>)
 8002e36:	2001      	movs	r0, #1
 8002e38:	f001 ff02 	bl	8004c40 <LOGGER_SendFormatted>
  LOG_INFO("System Clock: %lu MHz", SystemCoreClock / 1000000);
 8002e3c:	4bae      	ldr	r3, [pc, #696]	@ (80030f8 <StartDefaultTask+0x2d8>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4aae      	ldr	r2, [pc, #696]	@ (80030fc <StartDefaultTask+0x2dc>)
 8002e42:	fba2 2303 	umull	r2, r3, r2, r3
 8002e46:	0c9b      	lsrs	r3, r3, #18
 8002e48:	461a      	mov	r2, r3
 8002e4a:	49ad      	ldr	r1, [pc, #692]	@ (8003100 <StartDefaultTask+0x2e0>)
 8002e4c:	2001      	movs	r0, #1
 8002e4e:	f001 fef7 	bl	8004c40 <LOGGER_SendFormatted>
  LOG_INFO("UART6 Configuration: 115200 baud, 8N1");
 8002e52:	49ac      	ldr	r1, [pc, #688]	@ (8003104 <StartDefaultTask+0x2e4>)
 8002e54:	2001      	movs	r0, #1
 8002e56:	f001 fef3 	bl	8004c40 <LOGGER_SendFormatted>
  LOG_INFO("📌 CRITICAL: For loopback test, connect PC6(TX) to PC7(RX) with a wire!");
 8002e5a:	49ab      	ldr	r1, [pc, #684]	@ (8003108 <StartDefaultTask+0x2e8>)
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	f001 feef 	bl	8004c40 <LOGGER_SendFormatted>
  LOG_INFO("📌 UART6 Pins: PC6(TX) = Arduino D1, PC7(RX) = Arduino D0");
 8002e62:	49aa      	ldr	r1, [pc, #680]	@ (800310c <StartDefaultTask+0x2ec>)
 8002e64:	2001      	movs	r0, #1
 8002e66:	f001 feeb 	bl	8004c40 <LOGGER_SendFormatted>
  
  // FreeRTOS 커널 시작 후 SD카드 초기화
  LOG_INFO("📤 [TX_TASK] Initializing SD card storage (after FreeRTOS start)...");
 8002e6a:	49a9      	ldr	r1, [pc, #676]	@ (8003110 <StartDefaultTask+0x2f0>)
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	f001 fee7 	bl	8004c40 <LOGGER_SendFormatted>
  g_sd_initialization_result = SDStorage_Init();
 8002e72:	f7fe f94d 	bl	8001110 <SDStorage_Init>
 8002e76:	4603      	mov	r3, r0
 8002e78:	4aa6      	ldr	r2, [pc, #664]	@ (8003114 <StartDefaultTask+0x2f4>)
 8002e7a:	6013      	str	r3, [r2, #0]
  if (g_sd_initialization_result == SDSTORAGE_OK) {
 8002e7c:	4ba5      	ldr	r3, [pc, #660]	@ (8003114 <StartDefaultTask+0x2f4>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d104      	bne.n	8002e8e <StartDefaultTask+0x6e>
    LOG_INFO("📤 [TX_TASK] ✅ SD card initialized successfully - dual logging enabled");
 8002e84:	49a4      	ldr	r1, [pc, #656]	@ (8003118 <StartDefaultTask+0x2f8>)
 8002e86:	2001      	movs	r0, #1
 8002e88:	f001 feda 	bl	8004c40 <LOGGER_SendFormatted>
 8002e8c:	e006      	b.n	8002e9c <StartDefaultTask+0x7c>
  } else {
    LOG_WARN("📤 [TX_TASK] ⚠️ SD card init failed (code: %d) - terminal logging only", g_sd_initialization_result);
 8002e8e:	4ba1      	ldr	r3, [pc, #644]	@ (8003114 <StartDefaultTask+0x2f4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	461a      	mov	r2, r3
 8002e94:	49a1      	ldr	r1, [pc, #644]	@ (800311c <StartDefaultTask+0x2fc>)
 8002e96:	2002      	movs	r0, #2
 8002e98:	f001 fed2 	bl	8004c40 <LOGGER_SendFormatted>
  }

  // UART 연결 테스트
  LOG_INFO("📤 [TX_TASK] Testing UART6 connection...");
 8002e9c:	49a0      	ldr	r1, [pc, #640]	@ (8003120 <StartDefaultTask+0x300>)
 8002e9e:	2001      	movs	r0, #1
 8002ea0:	f001 fece 	bl	8004c40 <LOGGER_SendFormatted>
  
  UartStatus uart_status = UART_Connect("UART6");
 8002ea4:	489f      	ldr	r0, [pc, #636]	@ (8003124 <StartDefaultTask+0x304>)
 8002ea6:	f001 ff67 	bl	8004d78 <UART_Connect>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  if (uart_status == UART_STATUS_OK) {
 8002eb0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d109      	bne.n	8002ecc <StartDefaultTask+0xac>
    LOG_INFO("📤 [TX_TASK] ✓ UART6 connection SUCCESS");
 8002eb8:	499b      	ldr	r1, [pc, #620]	@ (8003128 <StartDefaultTask+0x308>)
 8002eba:	2001      	movs	r0, #1
 8002ebc:	f001 fec0 	bl	8004c40 <LOGGER_SendFormatted>
    LOG_ERROR("📤 [TX_TASK] Program terminated due to UART connection failure");
    goto idle_loop;
  }
  
  // UART 연결 상태 확인
  if (UART_IsConnected()) {
 8002ec0:	f002 f830 	bl	8004f24 <UART_IsConnected>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d035      	beq.n	8002f36 <StartDefaultTask+0x116>
 8002eca:	e00b      	b.n	8002ee4 <StartDefaultTask+0xc4>
    LOG_ERROR("📤 [TX_TASK] ✗ UART6 connection FAILED (status: %d)", uart_status);
 8002ecc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4996      	ldr	r1, [pc, #600]	@ (800312c <StartDefaultTask+0x30c>)
 8002ed4:	2003      	movs	r0, #3
 8002ed6:	f001 feb3 	bl	8004c40 <LOGGER_SendFormatted>
    LOG_ERROR("📤 [TX_TASK] Program terminated due to UART connection failure");
 8002eda:	4995      	ldr	r1, [pc, #596]	@ (8003130 <StartDefaultTask+0x310>)
 8002edc:	2003      	movs	r0, #3
 8002ede:	f001 feaf 	bl	8004c40 <LOGGER_SendFormatted>
    goto idle_loop;
 8002ee2:	e23f      	b.n	8003364 <StartDefaultTask+0x544>
    LOG_INFO("📤 [TX_TASK] ✓ UART6 is CONNECTED and ready");
 8002ee4:	4993      	ldr	r1, [pc, #588]	@ (8003134 <StartDefaultTask+0x314>)
 8002ee6:	2001      	movs	r0, #1
 8002ee8:	f001 feaa 	bl	8004c40 <LOGGER_SendFormatted>
    LOG_ERROR("📤 [TX_TASK] ✗ UART6 is NOT CONNECTED");
    LOG_ERROR("📤 [TX_TASK] Program terminated due to UART connection failure");
    goto idle_loop;
  }
  
  LOG_INFO("📤 [TX_TASK] Starting LoRa initialization and JOIN...");
 8002eec:	4992      	ldr	r1, [pc, #584]	@ (8003138 <StartDefaultTask+0x318>)
 8002eee:	2001      	movs	r0, #1
 8002ef0:	f001 fea6 	bl	8004c40 <LOGGER_SendFormatted>
  LOG_INFO("📤 [TX_TASK] Waiting for LoRa module boot-up (10 seconds)...");
 8002ef4:	4991      	ldr	r1, [pc, #580]	@ (800313c <StartDefaultTask+0x31c>)
 8002ef6:	2001      	movs	r0, #1
 8002ef8:	f001 fea2 	bl	8004c40 <LOGGER_SendFormatted>
  osDelay(10000); // 10초 대기 (LoRa 모듈 부팅 완료 대기)
 8002efc:	f242 7010 	movw	r0, #10000	@ 0x2710
 8002f00:	f014 fea0 	bl	8017c44 <osDelay>
  
  // LoraStarter 컨텍스트 초기화 (TDD 검증된 기본 설정 사용)
  LoraStarterContext lora_ctx;
  LoraStarter_InitWithDefaults(&lora_ctx, "TEST");
 8002f04:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f08:	498d      	ldr	r1, [pc, #564]	@ (8003140 <StartDefaultTask+0x320>)
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fd fc44 	bl	8000798 <LoraStarter_InitWithDefaults>
  
  LOG_INFO("=== LoRa Initialization ===");
 8002f10:	498c      	ldr	r1, [pc, #560]	@ (8003144 <StartDefaultTask+0x324>)
 8002f12:	2001      	movs	r0, #1
 8002f14:	f001 fe94 	bl	8004c40 <LOGGER_SendFormatted>
  LOG_INFO("📤 Commands: %d, Message: %s, Max retries: %d", 
 8002f18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f1a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002f1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	460b      	mov	r3, r1
 8002f22:	4989      	ldr	r1, [pc, #548]	@ (8003148 <StartDefaultTask+0x328>)
 8002f24:	2001      	movs	r0, #1
 8002f26:	f001 fe8b 	bl	8004c40 <LOGGER_SendFormatted>
           lora_ctx.num_commands, lora_ctx.send_message, lora_ctx.max_retry_count);
           
  // SD 카드 기본 쓰기 기능 테스트
  extern int g_sd_initialization_result; // main()에서 설정된 SD 결과
  if (g_sd_initialization_result == SDSTORAGE_OK) {
 8002f2a:	4b7a      	ldr	r3, [pc, #488]	@ (8003114 <StartDefaultTask+0x2f4>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f040 818a 	bne.w	8003248 <StartDefaultTask+0x428>
 8002f34:	e008      	b.n	8002f48 <StartDefaultTask+0x128>
    LOG_ERROR("📤 [TX_TASK] ✗ UART6 is NOT CONNECTED");
 8002f36:	4985      	ldr	r1, [pc, #532]	@ (800314c <StartDefaultTask+0x32c>)
 8002f38:	2003      	movs	r0, #3
 8002f3a:	f001 fe81 	bl	8004c40 <LOGGER_SendFormatted>
    LOG_ERROR("📤 [TX_TASK] Program terminated due to UART connection failure");
 8002f3e:	497c      	ldr	r1, [pc, #496]	@ (8003130 <StartDefaultTask+0x310>)
 8002f40:	2003      	movs	r0, #3
 8002f42:	f001 fe7d 	bl	8004c40 <LOGGER_SendFormatted>
    goto idle_loop;
 8002f46:	e20d      	b.n	8003364 <StartDefaultTask+0x544>
    LOG_INFO("🧪 Testing basic SD card write functionality...");
 8002f48:	4981      	ldr	r1, [pc, #516]	@ (8003150 <StartDefaultTask+0x330>)
 8002f4a:	2001      	movs	r0, #1
 8002f4c:	f001 fe78 	bl	8004c40 <LOGGER_SendFormatted>
    extern SD_HandleTypeDef hsd1;
    static uint8_t test_write_buffer[512];
    static uint8_t test_read_buffer[512];
    
    // 테스트 데이터 준비 (간단한 패턴)
    for(int i = 0; i < 512; i++) {
 8002f50:	2300      	movs	r3, #0
 8002f52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002f56:	e012      	b.n	8002f7e <StartDefaultTask+0x15e>
      test_write_buffer[i] = (uint8_t)(i % 256);
 8002f58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f5c:	425a      	negs	r2, r3
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	b2d2      	uxtb	r2, r2
 8002f62:	bf58      	it	pl
 8002f64:	4253      	negpl	r3, r2
 8002f66:	b2d9      	uxtb	r1, r3
 8002f68:	4a7a      	ldr	r2, [pc, #488]	@ (8003154 <StartDefaultTask+0x334>)
 8002f6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f6e:	4413      	add	r3, r2
 8002f70:	460a      	mov	r2, r1
 8002f72:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 512; i++) {
 8002f74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f78:	3301      	adds	r3, #1
 8002f7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002f7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f86:	dbe7      	blt.n	8002f58 <StartDefaultTask+0x138>
    }
    
    // SD카드 상태 재확인
    HAL_SD_CardStateTypeDef card_state_before = HAL_SD_GetCardState(&hsd1);
 8002f88:	4873      	ldr	r0, [pc, #460]	@ (8003158 <StartDefaultTask+0x338>)
 8002f8a:	f00a fb05 	bl	800d598 <HAL_SD_GetCardState>
 8002f8e:	66b8      	str	r0, [r7, #104]	@ 0x68
    LOG_INFO("📋 SD card state before write: %d", card_state_before);
 8002f90:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002f92:	4972      	ldr	r1, [pc, #456]	@ (800315c <StartDefaultTask+0x33c>)
 8002f94:	2001      	movs	r0, #1
 8002f96:	f001 fe53 	bl	8004c40 <LOGGER_SendFormatted>
    
    // SD카드 정보 확인
    HAL_SD_CardInfoTypeDef card_info;
    HAL_StatusTypeDef info_result = HAL_SD_GetCardInfo(&hsd1, &card_info);
 8002f9a:	f107 0308 	add.w	r3, r7, #8
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	486d      	ldr	r0, [pc, #436]	@ (8003158 <StartDefaultTask+0x338>)
 8002fa2:	f00a facd 	bl	800d540 <HAL_SD_GetCardInfo>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    LOG_INFO("📋 HAL_SD_GetCardInfo result: %d", info_result);
 8002fac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	496b      	ldr	r1, [pc, #428]	@ (8003160 <StartDefaultTask+0x340>)
 8002fb4:	2001      	movs	r0, #1
 8002fb6:	f001 fe43 	bl	8004c40 <LOGGER_SendFormatted>
    if(info_result == HAL_OK) {
 8002fba:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10b      	bne.n	8002fda <StartDefaultTask+0x1ba>
      LOG_INFO("📋 Card LogBlockNbr: %lu, LogBlockSize: %lu", card_info.LogBlockNbr, card_info.LogBlockSize);
 8002fc2:	6a3a      	ldr	r2, [r7, #32]
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc6:	4967      	ldr	r1, [pc, #412]	@ (8003164 <StartDefaultTask+0x344>)
 8002fc8:	2001      	movs	r0, #1
 8002fca:	f001 fe39 	bl	8004c40 <LOGGER_SendFormatted>
      LOG_INFO("📋 Card Type: %lu, Class: %lu", card_info.CardType, card_info.Class);
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	4965      	ldr	r1, [pc, #404]	@ (8003168 <StartDefaultTask+0x348>)
 8002fd4:	2001      	movs	r0, #1
 8002fd6:	f001 fe33 	bl	8004c40 <LOGGER_SendFormatted>
    }
    
    LOG_INFO("📝 Writing test pattern to sector 2000...");
 8002fda:	4964      	ldr	r1, [pc, #400]	@ (800316c <StartDefaultTask+0x34c>)
 8002fdc:	2001      	movs	r0, #1
 8002fde:	f001 fe2f 	bl	8004c40 <LOGGER_SendFormatted>
    HAL_StatusTypeDef write_result = HAL_SD_WriteBlocks(&hsd1, test_write_buffer, 2000, 1, 5000);
 8002fe2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	2301      	movs	r3, #1
 8002fea:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002fee:	4959      	ldr	r1, [pc, #356]	@ (8003154 <StartDefaultTask+0x334>)
 8002ff0:	4859      	ldr	r0, [pc, #356]	@ (8003158 <StartDefaultTask+0x338>)
 8002ff2:	f009 fda9 	bl	800cb48 <HAL_SD_WriteBlocks>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
    LOG_INFO("📝 HAL_SD_WriteBlocks result: %d", write_result);
 8002ffc:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8003000:	461a      	mov	r2, r3
 8003002:	495b      	ldr	r1, [pc, #364]	@ (8003170 <StartDefaultTask+0x350>)
 8003004:	2001      	movs	r0, #1
 8003006:	f001 fe1b 	bl	8004c40 <LOGGER_SendFormatted>
    
    // 쓰기 실패 시 에러 상태 분석
    if(write_result != HAL_OK) {
 800300a:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800300e:	2b00      	cmp	r3, #0
 8003010:	d031      	beq.n	8003076 <StartDefaultTask+0x256>
      HAL_SD_CardStateTypeDef card_state_after = HAL_SD_GetCardState(&hsd1);
 8003012:	4851      	ldr	r0, [pc, #324]	@ (8003158 <StartDefaultTask+0x338>)
 8003014:	f00a fac0 	bl	800d598 <HAL_SD_GetCardState>
 8003018:	6638      	str	r0, [r7, #96]	@ 0x60
      LOG_ERROR("📋 SD card state after failed write: %d", card_state_after);
 800301a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800301c:	4955      	ldr	r1, [pc, #340]	@ (8003174 <StartDefaultTask+0x354>)
 800301e:	2003      	movs	r0, #3
 8003020:	f001 fe0e 	bl	8004c40 <LOGGER_SendFormatted>
      LOG_ERROR("📋 SDMMC ErrorCode: 0x%08lX", hsd1.ErrorCode);
 8003024:	4b4c      	ldr	r3, [pc, #304]	@ (8003158 <StartDefaultTask+0x338>)
 8003026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003028:	461a      	mov	r2, r3
 800302a:	4953      	ldr	r1, [pc, #332]	@ (8003178 <StartDefaultTask+0x358>)
 800302c:	2003      	movs	r0, #3
 800302e:	f001 fe07 	bl	8004c40 <LOGGER_SendFormatted>
      
      // 일반적인 HAL 상태 코드 해석
      switch(write_result) {
 8003032:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8003036:	2b03      	cmp	r3, #3
 8003038:	d010      	beq.n	800305c <StartDefaultTask+0x23c>
 800303a:	2b03      	cmp	r3, #3
 800303c:	dc13      	bgt.n	8003066 <StartDefaultTask+0x246>
 800303e:	2b01      	cmp	r3, #1
 8003040:	d002      	beq.n	8003048 <StartDefaultTask+0x228>
 8003042:	2b02      	cmp	r3, #2
 8003044:	d005      	beq.n	8003052 <StartDefaultTask+0x232>
 8003046:	e00e      	b.n	8003066 <StartDefaultTask+0x246>
        case HAL_ERROR:
          LOG_ERROR("📋 HAL_ERROR - General error occurred");
 8003048:	494c      	ldr	r1, [pc, #304]	@ (800317c <StartDefaultTask+0x35c>)
 800304a:	2003      	movs	r0, #3
 800304c:	f001 fdf8 	bl	8004c40 <LOGGER_SendFormatted>
          break;
 8003050:	e011      	b.n	8003076 <StartDefaultTask+0x256>
        case HAL_BUSY:
          LOG_ERROR("📋 HAL_BUSY - SD card is busy");
 8003052:	494b      	ldr	r1, [pc, #300]	@ (8003180 <StartDefaultTask+0x360>)
 8003054:	2003      	movs	r0, #3
 8003056:	f001 fdf3 	bl	8004c40 <LOGGER_SendFormatted>
          break;
 800305a:	e00c      	b.n	8003076 <StartDefaultTask+0x256>
        case HAL_TIMEOUT:
          LOG_ERROR("📋 HAL_TIMEOUT - Operation timed out");
 800305c:	4949      	ldr	r1, [pc, #292]	@ (8003184 <StartDefaultTask+0x364>)
 800305e:	2003      	movs	r0, #3
 8003060:	f001 fdee 	bl	8004c40 <LOGGER_SendFormatted>
          break;
 8003064:	e007      	b.n	8003076 <StartDefaultTask+0x256>
        default:
          LOG_ERROR("📋 Unknown HAL status: %d", write_result);
 8003066:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800306a:	461a      	mov	r2, r3
 800306c:	4946      	ldr	r1, [pc, #280]	@ (8003188 <StartDefaultTask+0x368>)
 800306e:	2003      	movs	r0, #3
 8003070:	f001 fde6 	bl	8004c40 <LOGGER_SendFormatted>
          break;
 8003074:	bf00      	nop
      }
    }
    
    if(write_result == HAL_OK) {
 8003076:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800307a:	2b00      	cmp	r3, #0
 800307c:	f040 80c7 	bne.w	800320e <StartDefaultTask+0x3ee>
      // 쓰기 후 약간의 지연
      osDelay(100);
 8003080:	2064      	movs	r0, #100	@ 0x64
 8003082:	f014 fddf 	bl	8017c44 <osDelay>
      
      LOG_INFO("📖 Reading back from sector 2000...");
 8003086:	4941      	ldr	r1, [pc, #260]	@ (800318c <StartDefaultTask+0x36c>)
 8003088:	2001      	movs	r0, #1
 800308a:	f001 fdd9 	bl	8004c40 <LOGGER_SendFormatted>
      HAL_StatusTypeDef read_result = HAL_SD_ReadBlocks(&hsd1, test_read_buffer, 2000, 1, 5000);
 800308e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	2301      	movs	r3, #1
 8003096:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800309a:	493d      	ldr	r1, [pc, #244]	@ (8003190 <StartDefaultTask+0x370>)
 800309c:	482e      	ldr	r0, [pc, #184]	@ (8003158 <StartDefaultTask+0x338>)
 800309e:	f009 fb75 	bl	800c78c <HAL_SD_ReadBlocks>
 80030a2:	4603      	mov	r3, r0
 80030a4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      LOG_INFO("📖 HAL_SD_ReadBlocks result: %d", read_result);
 80030a8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80030ac:	461a      	mov	r2, r3
 80030ae:	4939      	ldr	r1, [pc, #228]	@ (8003194 <StartDefaultTask+0x374>)
 80030b0:	2001      	movs	r0, #1
 80030b2:	f001 fdc5 	bl	8004c40 <LOGGER_SendFormatted>
      
      if(read_result == HAL_OK) {
 80030b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f040 80a2 	bne.w	8003204 <StartDefaultTask+0x3e4>
        // 데이터 검증
        int match_count = 0;
 80030c0:	2300      	movs	r3, #0
 80030c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        int mismatch_count = 0;
 80030c6:	2300      	movs	r3, #0
 80030c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
        
        for(int i = 0; i < 512; i++) {
 80030ca:	2300      	movs	r3, #0
 80030cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80030ce:	e07c      	b.n	80031ca <StartDefaultTask+0x3aa>
          if(test_write_buffer[i] == test_read_buffer[i]) {
 80030d0:	4a20      	ldr	r2, [pc, #128]	@ (8003154 <StartDefaultTask+0x334>)
 80030d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030d4:	4413      	add	r3, r2
 80030d6:	781a      	ldrb	r2, [r3, #0]
 80030d8:	492d      	ldr	r1, [pc, #180]	@ (8003190 <StartDefaultTask+0x370>)
 80030da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030dc:	440b      	add	r3, r1
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d159      	bne.n	8003198 <StartDefaultTask+0x378>
            match_count++;
 80030e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80030e8:	3301      	adds	r3, #1
 80030ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80030ee:	e069      	b.n	80031c4 <StartDefaultTask+0x3a4>
 80030f0:	0801d190 	.word	0x0801d190
 80030f4:	0801d1d8 	.word	0x0801d1d8
 80030f8:	20000018 	.word	0x20000018
 80030fc:	431bde83 	.word	0x431bde83
 8003100:	0801d204 	.word	0x0801d204
 8003104:	0801d21c 	.word	0x0801d21c
 8003108:	0801d244 	.word	0x0801d244
 800310c:	0801d290 	.word	0x0801d290
 8003110:	0801d2cc 	.word	0x0801d2cc
 8003114:	20000014 	.word	0x20000014
 8003118:	0801d314 	.word	0x0801d314
 800311c:	0801d360 	.word	0x0801d360
 8003120:	0801d3b0 	.word	0x0801d3b0
 8003124:	0801d3dc 	.word	0x0801d3dc
 8003128:	0801d3e4 	.word	0x0801d3e4
 800312c:	0801d410 	.word	0x0801d410
 8003130:	0801d448 	.word	0x0801d448
 8003134:	0801d48c 	.word	0x0801d48c
 8003138:	0801d4e8 	.word	0x0801d4e8
 800313c:	0801d520 	.word	0x0801d520
 8003140:	0801d560 	.word	0x0801d560
 8003144:	0801d568 	.word	0x0801d568
 8003148:	0801d584 	.word	0x0801d584
 800314c:	0801d4bc 	.word	0x0801d4bc
 8003150:	0801d5b4 	.word	0x0801d5b4
 8003154:	20001b34 	.word	0x20001b34
 8003158:	20001478 	.word	0x20001478
 800315c:	0801d5e8 	.word	0x0801d5e8
 8003160:	0801d60c 	.word	0x0801d60c
 8003164:	0801d630 	.word	0x0801d630
 8003168:	0801d660 	.word	0x0801d660
 800316c:	0801d680 	.word	0x0801d680
 8003170:	0801d6ac 	.word	0x0801d6ac
 8003174:	0801d6d0 	.word	0x0801d6d0
 8003178:	0801d6fc 	.word	0x0801d6fc
 800317c:	0801d71c 	.word	0x0801d71c
 8003180:	0801d744 	.word	0x0801d744
 8003184:	0801d764 	.word	0x0801d764
 8003188:	0801d78c 	.word	0x0801d78c
 800318c:	0801d7a8 	.word	0x0801d7a8
 8003190:	20001d34 	.word	0x20001d34
 8003194:	0801d7d0 	.word	0x0801d7d0
          } else {
            mismatch_count++;
 8003198:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800319a:	3301      	adds	r3, #1
 800319c:	67fb      	str	r3, [r7, #124]	@ 0x7c
            if(mismatch_count <= 5) { // 처음 5개 불일치만 출력
 800319e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031a0:	2b05      	cmp	r3, #5
 80031a2:	dc0f      	bgt.n	80031c4 <StartDefaultTask+0x3a4>
              LOG_WARN("📊 Mismatch at byte %d: wrote 0x%02X, read 0x%02X", 
 80031a4:	4a7a      	ldr	r2, [pc, #488]	@ (8003390 <StartDefaultTask+0x570>)
 80031a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031a8:	4413      	add	r3, r2
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	4619      	mov	r1, r3
 80031ae:	4a79      	ldr	r2, [pc, #484]	@ (8003394 <StartDefaultTask+0x574>)
 80031b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031b2:	4413      	add	r3, r2
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	460b      	mov	r3, r1
 80031ba:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80031bc:	4976      	ldr	r1, [pc, #472]	@ (8003398 <StartDefaultTask+0x578>)
 80031be:	2002      	movs	r0, #2
 80031c0:	f001 fd3e 	bl	8004c40 <LOGGER_SendFormatted>
        for(int i = 0; i < 512; i++) {
 80031c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031c6:	3301      	adds	r3, #1
 80031c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031d0:	f6ff af7e 	blt.w	80030d0 <StartDefaultTask+0x2b0>
                       i, test_write_buffer[i], test_read_buffer[i]);
            }
          }
        }
        
        LOG_INFO("📊 Data verification: %d matches, %d mismatches out of 512 bytes", 
 80031d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80031da:	4970      	ldr	r1, [pc, #448]	@ (800339c <StartDefaultTask+0x57c>)
 80031dc:	2001      	movs	r0, #1
 80031de:	f001 fd2f 	bl	8004c40 <LOGGER_SendFormatted>
                 match_count, mismatch_count);
        
        if(mismatch_count == 0) {
 80031e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d104      	bne.n	80031f2 <StartDefaultTask+0x3d2>
          LOG_INFO("✅ SD card basic write/read test PASSED - data integrity OK");
 80031e8:	496d      	ldr	r1, [pc, #436]	@ (80033a0 <StartDefaultTask+0x580>)
 80031ea:	2001      	movs	r0, #1
 80031ec:	f001 fd28 	bl	8004c40 <LOGGER_SendFormatted>
 80031f0:	e011      	b.n	8003216 <StartDefaultTask+0x3f6>
        } else {
          LOG_WARN("⚠️ SD card write/read test FAILED - data corruption detected");
 80031f2:	496c      	ldr	r1, [pc, #432]	@ (80033a4 <StartDefaultTask+0x584>)
 80031f4:	2002      	movs	r0, #2
 80031f6:	f001 fd23 	bl	8004c40 <LOGGER_SendFormatted>
          LOG_WARN("💡 SD card may have wear-out or controller issues");
 80031fa:	496b      	ldr	r1, [pc, #428]	@ (80033a8 <StartDefaultTask+0x588>)
 80031fc:	2002      	movs	r0, #2
 80031fe:	f001 fd1f 	bl	8004c40 <LOGGER_SendFormatted>
 8003202:	e008      	b.n	8003216 <StartDefaultTask+0x3f6>
        }
      } else {
        LOG_ERROR("❌ Read back failed after successful write");
 8003204:	4969      	ldr	r1, [pc, #420]	@ (80033ac <StartDefaultTask+0x58c>)
 8003206:	2003      	movs	r0, #3
 8003208:	f001 fd1a 	bl	8004c40 <LOGGER_SendFormatted>
 800320c:	e003      	b.n	8003216 <StartDefaultTask+0x3f6>
      }
    } else {
      LOG_ERROR("❌ Basic write test failed");
 800320e:	4968      	ldr	r1, [pc, #416]	@ (80033b0 <StartDefaultTask+0x590>)
 8003210:	2003      	movs	r0, #3
 8003212:	f001 fd15 	bl	8004c40 <LOGGER_SendFormatted>
    }
    
    // SD 초기화 성공: Logger를 SD 백엔드로 설정
    LOG_INFO("🔄 Setting up dual logging (Terminal + SD Card)...");
 8003216:	4967      	ldr	r1, [pc, #412]	@ (80033b4 <StartDefaultTask+0x594>)
 8003218:	2001      	movs	r0, #1
 800321a:	f001 fd11 	bl	8004c40 <LOGGER_SendFormatted>
    int network_result = Network_InitSD();
 800321e:	f7fd fdad 	bl	8000d7c <Network_InitSD>
 8003222:	65b8      	str	r0, [r7, #88]	@ 0x58
    if (network_result == 0) {
 8003224:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003226:	2b00      	cmp	r3, #0
 8003228:	d108      	bne.n	800323c <StartDefaultTask+0x41c>
      LOG_INFO("✅ Dual logging activated - logs will be saved to SD card");
 800322a:	4963      	ldr	r1, [pc, #396]	@ (80033b8 <StartDefaultTask+0x598>)
 800322c:	2001      	movs	r0, #1
 800322e:	f001 fd07 	bl	8004c40 <LOGGER_SendFormatted>
      LOG_INFO("🗂️ LoRa logs location: lora_logs/ directory on SD card");
 8003232:	4962      	ldr	r1, [pc, #392]	@ (80033bc <StartDefaultTask+0x59c>)
 8003234:	2001      	movs	r0, #1
 8003236:	f001 fd03 	bl	8004c40 <LOGGER_SendFormatted>
 800323a:	e009      	b.n	8003250 <StartDefaultTask+0x430>
    } else {
      LOG_WARN("⚠️ SD logging setup failed (code: %d) - using terminal only", network_result);
 800323c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800323e:	4960      	ldr	r1, [pc, #384]	@ (80033c0 <StartDefaultTask+0x5a0>)
 8003240:	2002      	movs	r0, #2
 8003242:	f001 fcfd 	bl	8004c40 <LOGGER_SendFormatted>
 8003246:	e003      	b.n	8003250 <StartDefaultTask+0x430>
    }
  } else {
    LOG_INFO("📺 LoRa logs will be displayed on terminal only (SD not available)");
 8003248:	495e      	ldr	r1, [pc, #376]	@ (80033c4 <StartDefaultTask+0x5a4>)
 800324a:	2001      	movs	r0, #1
 800324c:	f001 fcf8 	bl	8004c40 <LOGGER_SendFormatted>
  
  // LoRa 프로세스 루프 (초기화 → JOIN → 주기적 전송)
  for(;;)
  {
    // 수신된 응답이 있으면 LoraStarter에 전달
    const char* rx_data = NULL;
 8003250:	2300      	movs	r3, #0
 8003252:	677b      	str	r3, [r7, #116]	@ 0x74
    if (lora_new_response) {
 8003254:	4b5c      	ldr	r3, [pc, #368]	@ (80033c8 <StartDefaultTask+0x5a8>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d009      	beq.n	8003272 <StartDefaultTask+0x452>
      rx_data = lora_rx_response;
 800325e:	4b5b      	ldr	r3, [pc, #364]	@ (80033cc <StartDefaultTask+0x5ac>)
 8003260:	677b      	str	r3, [r7, #116]	@ 0x74
      lora_new_response = false; // 플래그 클리어
 8003262:	4b59      	ldr	r3, [pc, #356]	@ (80033c8 <StartDefaultTask+0x5a8>)
 8003264:	2200      	movs	r2, #0
 8003266:	701a      	strb	r2, [r3, #0]
      LOG_DEBUG("[TX_TASK] Processing LoRa response: %.20s...", rx_data);
 8003268:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800326a:	4959      	ldr	r1, [pc, #356]	@ (80033d0 <StartDefaultTask+0x5b0>)
 800326c:	2000      	movs	r0, #0
 800326e:	f001 fce7 	bl	8004c40 <LOGGER_SendFormatted>
    }
    
    // LoraStarter 프로세스 실행
    LoraStarter_Process(&lora_ctx, rx_data);
 8003272:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003276:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003278:	4618      	mov	r0, r3
 800327a:	f7fd fad5 	bl	8000828 <LoraStarter_Process>
    
    // 상태별 처리 간격 및 디버깅
    LOG_DEBUG("[TX_TASK] LoRa State: %d, cmd_index: %d/%d", 
 800327e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003282:	4619      	mov	r1, r3
 8003284:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	4613      	mov	r3, r2
 800328c:	460a      	mov	r2, r1
 800328e:	4951      	ldr	r1, [pc, #324]	@ (80033d4 <StartDefaultTask+0x5b4>)
 8003290:	2000      	movs	r0, #0
 8003292:	f001 fcd5 	bl	8004c40 <LOGGER_SendFormatted>
              lora_ctx.state, lora_ctx.cmd_index, lora_ctx.num_commands);
    
    switch(lora_ctx.state) {
 8003296:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800329a:	2b0a      	cmp	r3, #10
 800329c:	d85c      	bhi.n	8003358 <StartDefaultTask+0x538>
 800329e:	a201      	add	r2, pc, #4	@ (adr r2, 80032a4 <StartDefaultTask+0x484>)
 80032a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a4:	080032d1 	.word	0x080032d1
 80032a8:	080032db 	.word	0x080032db
 80032ac:	080032f3 	.word	0x080032f3
 80032b0:	0800330b 	.word	0x0800330b
 80032b4:	08003315 	.word	0x08003315
 80032b8:	0800330b 	.word	0x0800330b
 80032bc:	08003315 	.word	0x08003315
 80032c0:	0800331f 	.word	0x0800331f
 80032c4:	08003335 	.word	0x08003335
 80032c8:	0800333f 	.word	0x0800333f
 80032cc:	0800333f 	.word	0x0800333f
      case LORA_STATE_INIT:
        osDelay(500); // 초기화 상태는 빠르게
 80032d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80032d4:	f014 fcb6 	bl	8017c44 <osDelay>
        break;
 80032d8:	e043      	b.n	8003362 <StartDefaultTask+0x542>
      case LORA_STATE_SEND_CMD:
        LOG_INFO("[TX_TASK] 📤 Sending command %d/%d", 
 80032da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032e0:	493d      	ldr	r1, [pc, #244]	@ (80033d8 <StartDefaultTask+0x5b8>)
 80032e2:	2001      	movs	r0, #1
 80032e4:	f001 fcac 	bl	8004c40 <LOGGER_SendFormatted>
                lora_ctx.cmd_index + 1, lora_ctx.num_commands);
        osDelay(1000); // 명령어 전송 후 1초 대기
 80032e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80032ec:	f014 fcaa 	bl	8017c44 <osDelay>
        break;
 80032f0:	e037      	b.n	8003362 <StartDefaultTask+0x542>
      case LORA_STATE_WAIT_OK:
        LOG_DEBUG("[TX_TASK] ⏳ Waiting for OK response to command %d", 
 80032f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032f4:	3301      	adds	r3, #1
 80032f6:	461a      	mov	r2, r3
 80032f8:	4938      	ldr	r1, [pc, #224]	@ (80033dc <StartDefaultTask+0x5bc>)
 80032fa:	2000      	movs	r0, #0
 80032fc:	f001 fca0 	bl	8004c40 <LOGGER_SendFormatted>
                 lora_ctx.cmd_index + 1);
        osDelay(2000); // OK 응답 대기 중 2초 간격
 8003300:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003304:	f014 fc9e 	bl	8017c44 <osDelay>
        break;
 8003308:	e02b      	b.n	8003362 <StartDefaultTask+0x542>
      case LORA_STATE_SEND_JOIN:
      case LORA_STATE_SEND_PERIODIC:
        osDelay(2000); // JOIN/SEND 명령어 전송 후 2초 대기
 800330a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800330e:	f014 fc99 	bl	8017c44 <osDelay>
        break;
 8003312:	e026      	b.n	8003362 <StartDefaultTask+0x542>
      case LORA_STATE_WAIT_JOIN_OK:
      case LORA_STATE_WAIT_SEND_RESPONSE:
        osDelay(3000); // JOIN/SEND 응답 대기 중 3초 간격
 8003314:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003318:	f014 fc94 	bl	8017c44 <osDelay>
        break;
 800331c:	e021      	b.n	8003362 <StartDefaultTask+0x542>
      case LORA_STATE_WAIT_SEND_INTERVAL:
        LOG_DEBUG("[TX_TASK] ⏳ Waiting for send interval (%u ms)", lora_ctx.send_interval_ms);
 800331e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003320:	461a      	mov	r2, r3
 8003322:	492f      	ldr	r1, [pc, #188]	@ (80033e0 <StartDefaultTask+0x5c0>)
 8003324:	2000      	movs	r0, #0
 8003326:	f001 fc8b 	bl	8004c40 <LOGGER_SendFormatted>
        osDelay(5000); // 주기적 전송 대기 중 5초 간격으로 체크
 800332a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800332e:	f014 fc89 	bl	8017c44 <osDelay>
        break;
 8003332:	e016      	b.n	8003362 <StartDefaultTask+0x542>
      case LORA_STATE_JOIN_RETRY:
        osDelay(5000); // 재시도 대기 5초
 8003334:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003338:	f014 fc84 	bl	8017c44 <osDelay>
        break;
 800333c:	e011      	b.n	8003362 <StartDefaultTask+0x542>
      case LORA_STATE_DONE:
      case LORA_STATE_ERROR:
        LOG_INFO("📤 [TX_TASK] LoRa process completed with state: %s", 
 800333e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003342:	2b09      	cmp	r3, #9
 8003344:	d101      	bne.n	800334a <StartDefaultTask+0x52a>
 8003346:	4b27      	ldr	r3, [pc, #156]	@ (80033e4 <StartDefaultTask+0x5c4>)
 8003348:	e000      	b.n	800334c <StartDefaultTask+0x52c>
 800334a:	4b27      	ldr	r3, [pc, #156]	@ (80033e8 <StartDefaultTask+0x5c8>)
 800334c:	461a      	mov	r2, r3
 800334e:	4927      	ldr	r1, [pc, #156]	@ (80033ec <StartDefaultTask+0x5cc>)
 8003350:	2001      	movs	r0, #1
 8003352:	f001 fc75 	bl	8004c40 <LOGGER_SendFormatted>
                lora_ctx.state == LORA_STATE_DONE ? "DONE" : "ERROR");
        goto idle_loop;
 8003356:	e005      	b.n	8003364 <StartDefaultTask+0x544>
      default:
        osDelay(1000);
 8003358:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800335c:	f014 fc72 	bl	8017c44 <osDelay>
        break;
 8003360:	bf00      	nop
  {
 8003362:	e775      	b.n	8003250 <StartDefaultTask+0x430>
    }
  }

idle_loop:
  /* Infinite idle loop */
  LOG_INFO("📤 [TX_TASK] Entering idle mode...");
 8003364:	4922      	ldr	r1, [pc, #136]	@ (80033f0 <StartDefaultTask+0x5d0>)
 8003366:	2001      	movs	r0, #1
 8003368:	f001 fc6a 	bl	8004c40 <LOGGER_SendFormatted>
  uint32_t idle_counter = 0;
 800336c:	2300      	movs	r3, #0
 800336e:	673b      	str	r3, [r7, #112]	@ 0x70
  
  for(;;)
  {
    // 30초마다 idle 상태 표시
    osDelay(30000);
 8003370:	f247 5030 	movw	r0, #30000	@ 0x7530
 8003374:	f014 fc66 	bl	8017c44 <osDelay>
    idle_counter++;
 8003378:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800337a:	3301      	adds	r3, #1
 800337c:	673b      	str	r3, [r7, #112]	@ 0x70
    LOG_INFO("📤 [TX_TASK] Idle mode: %lu minutes elapsed", idle_counter / 2);
 800337e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003380:	085b      	lsrs	r3, r3, #1
 8003382:	461a      	mov	r2, r3
 8003384:	491b      	ldr	r1, [pc, #108]	@ (80033f4 <StartDefaultTask+0x5d4>)
 8003386:	2001      	movs	r0, #1
 8003388:	f001 fc5a 	bl	8004c40 <LOGGER_SendFormatted>
    osDelay(30000);
 800338c:	bf00      	nop
 800338e:	e7ef      	b.n	8003370 <StartDefaultTask+0x550>
 8003390:	20001b34 	.word	0x20001b34
 8003394:	20001d34 	.word	0x20001d34
 8003398:	0801d7f4 	.word	0x0801d7f4
 800339c:	0801d828 	.word	0x0801d828
 80033a0:	0801d86c 	.word	0x0801d86c
 80033a4:	0801d8ac 	.word	0x0801d8ac
 80033a8:	0801d8f0 	.word	0x0801d8f0
 80033ac:	0801d924 	.word	0x0801d924
 80033b0:	0801d950 	.word	0x0801d950
 80033b4:	0801d96c 	.word	0x0801d96c
 80033b8:	0801d9a4 	.word	0x0801d9a4
 80033bc:	0801d9e0 	.word	0x0801d9e0
 80033c0:	0801da1c 	.word	0x0801da1c
 80033c4:	0801da5c 	.word	0x0801da5c
 80033c8:	20001ac4 	.word	0x20001ac4
 80033cc:	200018c4 	.word	0x200018c4
 80033d0:	0801daa4 	.word	0x0801daa4
 80033d4:	0801dad4 	.word	0x0801dad4
 80033d8:	0801db00 	.word	0x0801db00
 80033dc:	0801db28 	.word	0x0801db28
 80033e0:	0801db5c 	.word	0x0801db5c
 80033e4:	0801db8c 	.word	0x0801db8c
 80033e8:	0801db94 	.word	0x0801db94
 80033ec:	0801db9c 	.word	0x0801db9c
 80033f0:	0801dbd4 	.word	0x0801dbd4
 80033f4:	0801dbfc 	.word	0x0801dbfc

080033f8 <StartReceiveTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReceiveTask */
void StartReceiveTask(void const * argument)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80033fe:	af02      	add	r7, sp, #8
 8003400:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003404:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003408:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartReceiveTask */
  LOG_INFO("=== DMA-based Receive Task Started ===");
 800340a:	49a4      	ldr	r1, [pc, #656]	@ (800369c <StartReceiveTask+0x2a4>)
 800340c:	2001      	movs	r0, #1
 800340e:	f001 fc17 	bl	8004c40 <LOGGER_SendFormatted>
  
  // UART 초기화 대기
  osDelay(2000);
 8003412:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003416:	f014 fc15 	bl	8017c44 <osDelay>
  
  // TDD 모듈들을 사용한 DMA 기반 수신 태스크
  char local_buffer[512];
  int local_bytes_received = 0;
 800341a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800341e:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003422:	2200      	movs	r2, #0
 8003424:	601a      	str	r2, [r3, #0]
  
  for(;;)
  {
    // TDD UART 모듈을 통한 DMA 기반 수신 체크
    UartStatus status = UART_Receive(local_buffer, sizeof(local_buffer), &local_bytes_received);
 8003426:	f107 0208 	add.w	r2, r7, #8
 800342a:	f107 030c 	add.w	r3, r7, #12
 800342e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003432:	4618      	mov	r0, r3
 8003434:	f001 fd1c 	bl	8004e70 <UART_Receive>
 8003438:	4603      	mov	r3, r0
 800343a:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    
    // 디버깅용: 수신 상태 체크 (에러 상태일 때만)
    static uint32_t debug_counter = 0;
    debug_counter++;
 800343e:	4b98      	ldr	r3, [pc, #608]	@ (80036a0 <StartReceiveTask+0x2a8>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	3301      	adds	r3, #1
 8003444:	4a96      	ldr	r2, [pc, #600]	@ (80036a0 <StartReceiveTask+0x2a8>)
 8003446:	6013      	str	r3, [r2, #0]
    if (debug_counter % 200 == 0 && status != UART_STATUS_TIMEOUT) {  // 10초마다, 타임아웃 제외
 8003448:	4b95      	ldr	r3, [pc, #596]	@ (80036a0 <StartReceiveTask+0x2a8>)
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	4b95      	ldr	r3, [pc, #596]	@ (80036a4 <StartReceiveTask+0x2ac>)
 800344e:	fba3 1302 	umull	r1, r3, r3, r2
 8003452:	099b      	lsrs	r3, r3, #6
 8003454:	21c8      	movs	r1, #200	@ 0xc8
 8003456:	fb01 f303 	mul.w	r3, r1, r3
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	d116      	bne.n	800348e <StartReceiveTask+0x96>
 8003460:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 8003464:	2b02      	cmp	r3, #2
 8003466:	d012      	beq.n	800348e <StartReceiveTask+0x96>
      LOG_INFO("[RX_TASK] Status check #%lu: status=%d, bytes=%d", 
 8003468:	4b8d      	ldr	r3, [pc, #564]	@ (80036a0 <StartReceiveTask+0x2a8>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a8d      	ldr	r2, [pc, #564]	@ (80036a4 <StartReceiveTask+0x2ac>)
 800346e:	fba2 2303 	umull	r2, r3, r2, r3
 8003472:	099a      	lsrs	r2, r3, #6
 8003474:	f897 120e 	ldrb.w	r1, [r7, #526]	@ 0x20e
 8003478:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800347c:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	460b      	mov	r3, r1
 8003486:	4988      	ldr	r1, [pc, #544]	@ (80036a8 <StartReceiveTask+0x2b0>)
 8003488:	2001      	movs	r0, #1
 800348a:	f001 fbd9 	bl	8004c40 <LOGGER_SendFormatted>
               debug_counter / 200, status, local_bytes_received);
    }
    
    if (status == UART_STATUS_OK && local_bytes_received > 0) {
 800348e:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 8003492:	2b00      	cmp	r3, #0
 8003494:	f040 80fd 	bne.w	8003692 <StartReceiveTask+0x29a>
 8003498:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800349c:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f340 80f5 	ble.w	8003692 <StartReceiveTask+0x29a>
      // 수신 완료 - TDD ResponseHandler로 분석
      LOG_INFO("📥 RECV: '%s' (%d bytes)", local_buffer, local_bytes_received);
 80034a8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80034ac:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f107 020c 	add.w	r2, r7, #12
 80034b6:	497d      	ldr	r1, [pc, #500]	@ (80036ac <StartReceiveTask+0x2b4>)
 80034b8:	2001      	movs	r0, #1
 80034ba:	f001 fbc1 	bl	8004c40 <LOGGER_SendFormatted>
      
      // TDD ResponseHandler를 사용하여 응답 분석
      if (is_response_ok(local_buffer)) {
 80034be:	f107 030c 	add.w	r3, r7, #12
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fd fce2 	bl	8000e8c <is_response_ok>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d004      	beq.n	80034d8 <StartReceiveTask+0xe0>
        LOG_INFO("✅ OK response");
 80034ce:	4978      	ldr	r1, [pc, #480]	@ (80036b0 <StartReceiveTask+0x2b8>)
 80034d0:	2001      	movs	r0, #1
 80034d2:	f001 fbb5 	bl	8004c40 <LOGGER_SendFormatted>
 80034d6:	e04a      	b.n	800356e <StartReceiveTask+0x176>
      } else if (strstr(local_buffer, "+EVT:JOINED") != NULL) {
 80034d8:	f107 030c 	add.w	r3, r7, #12
 80034dc:	4975      	ldr	r1, [pc, #468]	@ (80036b4 <StartReceiveTask+0x2bc>)
 80034de:	4618      	mov	r0, r3
 80034e0:	f017 ffc5 	bl	801b46e <strstr>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d004      	beq.n	80034f4 <StartReceiveTask+0xfc>
        LOG_INFO("✅ JOIN response");
 80034ea:	4973      	ldr	r1, [pc, #460]	@ (80036b8 <StartReceiveTask+0x2c0>)
 80034ec:	2001      	movs	r0, #1
 80034ee:	f001 fba7 	bl	8004c40 <LOGGER_SendFormatted>
 80034f2:	e03c      	b.n	800356e <StartReceiveTask+0x176>
      } else if (strstr(local_buffer, "RAKwireless") != NULL) {
 80034f4:	f107 030c 	add.w	r3, r7, #12
 80034f8:	4970      	ldr	r1, [pc, #448]	@ (80036bc <StartReceiveTask+0x2c4>)
 80034fa:	4618      	mov	r0, r3
 80034fc:	f017 ffb7 	bl	801b46e <strstr>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d004      	beq.n	8003510 <StartReceiveTask+0x118>
        LOG_INFO("📡 LoRa module boot message (ignored)");
 8003506:	496e      	ldr	r1, [pc, #440]	@ (80036c0 <StartReceiveTask+0x2c8>)
 8003508:	2001      	movs	r0, #1
 800350a:	f001 fb99 	bl	8004c40 <LOGGER_SendFormatted>
 800350e:	e02e      	b.n	800356e <StartReceiveTask+0x176>
      } else {
        ResponseType response_type = ResponseHandler_ParseSendResponse(local_buffer);
 8003510:	f107 030c 	add.w	r3, r7, #12
 8003514:	4618      	mov	r0, r3
 8003516:	f7fd fda5 	bl	8001064 <ResponseHandler_ParseSendResponse>
 800351a:	4603      	mov	r3, r0
 800351c:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
        switch (response_type) {
 8003520:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
 8003524:	2b03      	cmp	r3, #3
 8003526:	d822      	bhi.n	800356e <StartReceiveTask+0x176>
 8003528:	a201      	add	r2, pc, #4	@ (adr r2, 8003530 <StartReceiveTask+0x138>)
 800352a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352e:	bf00      	nop
 8003530:	08003541 	.word	0x08003541
 8003534:	0800354b 	.word	0x0800354b
 8003538:	08003555 	.word	0x08003555
 800353c:	0800355f 	.word	0x0800355f
          case RESPONSE_OK:
            LOG_INFO("✅ OK");
 8003540:	4960      	ldr	r1, [pc, #384]	@ (80036c4 <StartReceiveTask+0x2cc>)
 8003542:	2001      	movs	r0, #1
 8003544:	f001 fb7c 	bl	8004c40 <LOGGER_SendFormatted>
            break;
 8003548:	e011      	b.n	800356e <StartReceiveTask+0x176>
          case RESPONSE_ERROR:
            LOG_WARN("⚠️ ERROR");
 800354a:	495f      	ldr	r1, [pc, #380]	@ (80036c8 <StartReceiveTask+0x2d0>)
 800354c:	2002      	movs	r0, #2
 800354e:	f001 fb77 	bl	8004c40 <LOGGER_SendFormatted>
            break;
 8003552:	e00c      	b.n	800356e <StartReceiveTask+0x176>
          case RESPONSE_TIMEOUT:
            LOG_WARN("⚠️ TIMEOUT");
 8003554:	495d      	ldr	r1, [pc, #372]	@ (80036cc <StartReceiveTask+0x2d4>)
 8003556:	2002      	movs	r0, #2
 8003558:	f001 fb72 	bl	8004c40 <LOGGER_SendFormatted>
            break;
 800355c:	e007      	b.n	800356e <StartReceiveTask+0x176>
          case RESPONSE_UNKNOWN:
            LOG_INFO("❓ UNKNOWN format: %.20s...", local_buffer);  // 처음 20자만 표시
 800355e:	f107 030c 	add.w	r3, r7, #12
 8003562:	461a      	mov	r2, r3
 8003564:	495a      	ldr	r1, [pc, #360]	@ (80036d0 <StartReceiveTask+0x2d8>)
 8003566:	2001      	movs	r0, #1
 8003568:	f001 fb6a 	bl	8004c40 <LOGGER_SendFormatted>
            break;
 800356c:	bf00      	nop
        }
      }
      
      // 전역 변수에 복사 (다른 태스크에서 사용 가능)
      memcpy(rx_buffer, local_buffer, local_bytes_received);
 800356e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003572:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	461a      	mov	r2, r3
 800357a:	f107 030c 	add.w	r3, r7, #12
 800357e:	4619      	mov	r1, r3
 8003580:	4854      	ldr	r0, [pc, #336]	@ (80036d4 <StartReceiveTask+0x2dc>)
 8003582:	f017 ffc7 	bl	801b514 <memcpy>
      rx_bytes_received = local_bytes_received;
 8003586:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800358a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a51      	ldr	r2, [pc, #324]	@ (80036d8 <StartReceiveTask+0x2e0>)
 8003592:	6013      	str	r3, [r2, #0]
      
      // LoRa 상태 머신에 전달할 응답만 필터링
      bool is_lora_command_response = false;
 8003594:	2300      	movs	r3, #0
 8003596:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
      
      if (is_response_ok(local_buffer)) {
 800359a:	f107 030c 	add.w	r3, r7, #12
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fd fc74 	bl	8000e8c <is_response_ok>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <StartReceiveTask+0x1ba>
        // OK 응답 - LoRa 명령에 대한 응답
        is_lora_command_response = true;
 80035aa:	2301      	movs	r3, #1
 80035ac:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 80035b0:	e03f      	b.n	8003632 <StartReceiveTask+0x23a>
      } else if (strstr(local_buffer, "+EVT:JOINED") != NULL) {
 80035b2:	f107 030c 	add.w	r3, r7, #12
 80035b6:	493f      	ldr	r1, [pc, #252]	@ (80036b4 <StartReceiveTask+0x2bc>)
 80035b8:	4618      	mov	r0, r3
 80035ba:	f017 ff58 	bl	801b46e <strstr>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <StartReceiveTask+0x1d4>
        // JOIN 성공 응답
        is_lora_command_response = true;
 80035c4:	2301      	movs	r3, #1
 80035c6:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 80035ca:	e032      	b.n	8003632 <StartReceiveTask+0x23a>
      } else if (strstr(local_buffer, "+EVT:") != NULL) {
 80035cc:	f107 030c 	add.w	r3, r7, #12
 80035d0:	4942      	ldr	r1, [pc, #264]	@ (80036dc <StartReceiveTask+0x2e4>)
 80035d2:	4618      	mov	r0, r3
 80035d4:	f017 ff4b 	bl	801b46e <strstr>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <StartReceiveTask+0x1ee>
        // 기타 LoRa 이벤트 응답들
        is_lora_command_response = true;
 80035de:	2301      	movs	r3, #1
 80035e0:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 80035e4:	e025      	b.n	8003632 <StartReceiveTask+0x23a>
      } else if (strstr(local_buffer, "RAKwireless") != NULL || strstr(local_buffer, "ORAKwireless") != NULL) {
 80035e6:	f107 030c 	add.w	r3, r7, #12
 80035ea:	4934      	ldr	r1, [pc, #208]	@ (80036bc <StartReceiveTask+0x2c4>)
 80035ec:	4618      	mov	r0, r3
 80035ee:	f017 ff3e 	bl	801b46e <strstr>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d108      	bne.n	800360a <StartReceiveTask+0x212>
 80035f8:	f107 030c 	add.w	r3, r7, #12
 80035fc:	4938      	ldr	r1, [pc, #224]	@ (80036e0 <StartReceiveTask+0x2e8>)
 80035fe:	4618      	mov	r0, r3
 8003600:	f017 ff35 	bl	801b46e <strstr>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d004      	beq.n	8003614 <StartReceiveTask+0x21c>
        // 부트 메시지 - LoRa 상태 머신에 전달하지 않음
        LOG_DEBUG("[RX_TASK] Boot message filtered out from LoRa state machine");
 800360a:	4936      	ldr	r1, [pc, #216]	@ (80036e4 <StartReceiveTask+0x2ec>)
 800360c:	2000      	movs	r0, #0
 800360e:	f001 fb17 	bl	8004c40 <LOGGER_SendFormatted>
 8003612:	e00e      	b.n	8003632 <StartReceiveTask+0x23a>
      } else {
        // 기타 응답들 (ERROR, TIMEOUT 등)
        ResponseType response_type = ResponseHandler_ParseSendResponse(local_buffer);
 8003614:	f107 030c 	add.w	r3, r7, #12
 8003618:	4618      	mov	r0, r3
 800361a:	f7fd fd23 	bl	8001064 <ResponseHandler_ParseSendResponse>
 800361e:	4603      	mov	r3, r0
 8003620:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
        if (response_type != RESPONSE_UNKNOWN) {
 8003624:	f897 320c 	ldrb.w	r3, [r7, #524]	@ 0x20c
 8003628:	2b03      	cmp	r3, #3
 800362a:	d002      	beq.n	8003632 <StartReceiveTask+0x23a>
          is_lora_command_response = true;
 800362c:	2301      	movs	r3, #1
 800362e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
        }
      }
      
      // LoRa 명령 응답만 전역 변수에 복사
      if (is_lora_command_response) {
 8003632:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8003636:	2b00      	cmp	r3, #0
 8003638:	d01d      	beq.n	8003676 <StartReceiveTask+0x27e>
        memcpy(lora_rx_response, local_buffer, local_bytes_received);
 800363a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800363e:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	461a      	mov	r2, r3
 8003646:	f107 030c 	add.w	r3, r7, #12
 800364a:	4619      	mov	r1, r3
 800364c:	4826      	ldr	r0, [pc, #152]	@ (80036e8 <StartReceiveTask+0x2f0>)
 800364e:	f017 ff61 	bl	801b514 <memcpy>
        lora_rx_response[local_bytes_received] = '\0';
 8003652:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003656:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a22      	ldr	r2, [pc, #136]	@ (80036e8 <StartReceiveTask+0x2f0>)
 800365e:	2100      	movs	r1, #0
 8003660:	54d1      	strb	r1, [r2, r3]
        lora_new_response = true;
 8003662:	4b22      	ldr	r3, [pc, #136]	@ (80036ec <StartReceiveTask+0x2f4>)
 8003664:	2201      	movs	r2, #1
 8003666:	701a      	strb	r2, [r3, #0]
        LOG_DEBUG("[RX_TASK] LoRa response forwarded to state machine: %.20s...", local_buffer);
 8003668:	f107 030c 	add.w	r3, r7, #12
 800366c:	461a      	mov	r2, r3
 800366e:	4920      	ldr	r1, [pc, #128]	@ (80036f0 <StartReceiveTask+0x2f8>)
 8003670:	2000      	movs	r0, #0
 8003672:	f001 fae5 	bl	8004c40 <LOGGER_SendFormatted>
      }
      
      // 버퍼 클리어
      memset(local_buffer, 0, sizeof(local_buffer));
 8003676:	f107 030c 	add.w	r3, r7, #12
 800367a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800367e:	2100      	movs	r1, #0
 8003680:	4618      	mov	r0, r3
 8003682:	f017 fed9 	bl	801b438 <memset>
      local_bytes_received = 0;
 8003686:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800368a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]
    }
    
    // DMA 기반이므로 긴 지연으로 CPU 사용률 감소
    osDelay(50);  // 50ms 지연 (DMA가 백그라운드에서 처리하므로 빠른 폴링 불필요)
 8003692:	2032      	movs	r0, #50	@ 0x32
 8003694:	f014 fad6 	bl	8017c44 <osDelay>
  {
 8003698:	e6c5      	b.n	8003426 <StartReceiveTask+0x2e>
 800369a:	bf00      	nop
 800369c:	0801dc2c 	.word	0x0801dc2c
 80036a0:	20001f34 	.word	0x20001f34
 80036a4:	51eb851f 	.word	0x51eb851f
 80036a8:	0801dc54 	.word	0x0801dc54
 80036ac:	0801dc88 	.word	0x0801dc88
 80036b0:	0801dca4 	.word	0x0801dca4
 80036b4:	0801dcb4 	.word	0x0801dcb4
 80036b8:	0801dcc0 	.word	0x0801dcc0
 80036bc:	0801dcd4 	.word	0x0801dcd4
 80036c0:	0801dce0 	.word	0x0801dce0
 80036c4:	0801dd08 	.word	0x0801dd08
 80036c8:	0801dd10 	.word	0x0801dd10
 80036cc:	0801dd20 	.word	0x0801dd20
 80036d0:	0801dd30 	.word	0x0801dd30
 80036d4:	20001f98 	.word	0x20001f98
 80036d8:	200018c0 	.word	0x200018c0
 80036dc:	0801dd50 	.word	0x0801dd50
 80036e0:	0801dd58 	.word	0x0801dd58
 80036e4:	0801dd68 	.word	0x0801dd68
 80036e8:	200018c4 	.word	0x200018c4
 80036ec:	20001ac4 	.word	0x20001ac4
 80036f0:	0801dda4 	.word	0x0801dda4

080036f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a04      	ldr	r2, [pc, #16]	@ (8003714 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d101      	bne.n	800370a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8003706:	f002 f817 	bl	8005738 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40001000 	.word	0x40001000

08003718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800371c:	b672      	cpsid	i
}
 800371e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003720:	bf00      	nop
 8003722:	e7fd      	b.n	8003720 <Error_Handler+0x8>

08003724 <MX_DMA_Init>:
  * @brief DMA Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA_Init(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800372a:	4b10      	ldr	r3, [pc, #64]	@ (800376c <MX_DMA_Init+0x48>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372e:	4a0f      	ldr	r2, [pc, #60]	@ (800376c <MX_DMA_Init+0x48>)
 8003730:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003734:	6313      	str	r3, [r2, #48]	@ 0x30
 8003736:	4b0d      	ldr	r3, [pc, #52]	@ (800376c <MX_DMA_Init+0x48>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800373e:	607b      	str	r3, [r7, #4]
 8003740:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration - USART6_RX */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8003742:	2200      	movs	r2, #0
 8003744:	2105      	movs	r1, #5
 8003746:	2039      	movs	r0, #57	@ 0x39
 8003748:	f002 fb8a 	bl	8005e60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800374c:	2039      	movs	r0, #57	@ 0x39
 800374e:	f002 fba3 	bl	8005e98 <HAL_NVIC_EnableIRQ>
  
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003752:	2200      	movs	r2, #0
 8003754:	2105      	movs	r1, #5
 8003756:	2047      	movs	r0, #71	@ 0x47
 8003758:	f002 fb82 	bl	8005e60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 800375c:	2047      	movs	r0, #71	@ 0x47
 800375e:	f002 fb9b 	bl	8005e98 <HAL_NVIC_EnableIRQ>
}
 8003762:	bf00      	nop
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40023800 	.word	0x40023800

08003770 <MX_USART6_DMA_Init>:
  * @brief DMA2 Stream1 DMA configuration for USART6 RX
  * @param None
  * @retval None
  */
void MX_USART6_DMA_Init(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* Configure DMA for USART6 RX */
  hdma_usart6_rx.Instance = DMA2_Stream1;
 8003774:	4b18      	ldr	r3, [pc, #96]	@ (80037d8 <MX_USART6_DMA_Init+0x68>)
 8003776:	4a19      	ldr	r2, [pc, #100]	@ (80037dc <MX_USART6_DMA_Init+0x6c>)
 8003778:	601a      	str	r2, [r3, #0]
  hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800377a:	4b17      	ldr	r3, [pc, #92]	@ (80037d8 <MX_USART6_DMA_Init+0x68>)
 800377c:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003780:	605a      	str	r2, [r3, #4]
  hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003782:	4b15      	ldr	r3, [pc, #84]	@ (80037d8 <MX_USART6_DMA_Init+0x68>)
 8003784:	2200      	movs	r2, #0
 8003786:	609a      	str	r2, [r3, #8]
  hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003788:	4b13      	ldr	r3, [pc, #76]	@ (80037d8 <MX_USART6_DMA_Init+0x68>)
 800378a:	2200      	movs	r2, #0
 800378c:	60da      	str	r2, [r3, #12]
  hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800378e:	4b12      	ldr	r3, [pc, #72]	@ (80037d8 <MX_USART6_DMA_Init+0x68>)
 8003790:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003794:	611a      	str	r2, [r3, #16]
  hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003796:	4b10      	ldr	r3, [pc, #64]	@ (80037d8 <MX_USART6_DMA_Init+0x68>)
 8003798:	2200      	movs	r2, #0
 800379a:	615a      	str	r2, [r3, #20]
  hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800379c:	4b0e      	ldr	r3, [pc, #56]	@ (80037d8 <MX_USART6_DMA_Init+0x68>)
 800379e:	2200      	movs	r2, #0
 80037a0:	619a      	str	r2, [r3, #24]
  hdma_usart6_rx.Init.Mode = DMA_NORMAL;    // 일반 모드로 변경
 80037a2:	4b0d      	ldr	r3, [pc, #52]	@ (80037d8 <MX_USART6_DMA_Init+0x68>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	61da      	str	r2, [r3, #28]
  hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80037a8:	4b0b      	ldr	r3, [pc, #44]	@ (80037d8 <MX_USART6_DMA_Init+0x68>)
 80037aa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80037ae:	621a      	str	r2, [r3, #32]
  hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037b0:	4b09      	ldr	r3, [pc, #36]	@ (80037d8 <MX_USART6_DMA_Init+0x68>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80037b6:	4808      	ldr	r0, [pc, #32]	@ (80037d8 <MX_USART6_DMA_Init+0x68>)
 80037b8:	f002 fce8 	bl	800618c <HAL_DMA_Init>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <MX_USART6_DMA_Init+0x56>
  {
    Error_Handler();
 80037c2:	f7ff ffa9 	bl	8003718 <Error_Handler>
  }

  /* Associate the initialized DMA handle to the UART handle */
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 80037c6:	4b06      	ldr	r3, [pc, #24]	@ (80037e0 <MX_USART6_DMA_Init+0x70>)
 80037c8:	4a03      	ldr	r2, [pc, #12]	@ (80037d8 <MX_USART6_DMA_Init+0x68>)
 80037ca:	675a      	str	r2, [r3, #116]	@ 0x74
 80037cc:	4b02      	ldr	r3, [pc, #8]	@ (80037d8 <MX_USART6_DMA_Init+0x68>)
 80037ce:	4a04      	ldr	r2, [pc, #16]	@ (80037e0 <MX_USART6_DMA_Init+0x70>)
 80037d0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80037d2:	bf00      	nop
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	20001ac8 	.word	0x20001ac8
 80037dc:	40026428 	.word	0x40026428
 80037e0:	200017fc 	.word	0x200017fc

080037e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80037ea:	4b11      	ldr	r3, [pc, #68]	@ (8003830 <HAL_MspInit+0x4c>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ee:	4a10      	ldr	r2, [pc, #64]	@ (8003830 <HAL_MspInit+0x4c>)
 80037f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80037f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003830 <HAL_MspInit+0x4c>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037fe:	607b      	str	r3, [r7, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003802:	4b0b      	ldr	r3, [pc, #44]	@ (8003830 <HAL_MspInit+0x4c>)
 8003804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003806:	4a0a      	ldr	r2, [pc, #40]	@ (8003830 <HAL_MspInit+0x4c>)
 8003808:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800380c:	6453      	str	r3, [r2, #68]	@ 0x44
 800380e:	4b08      	ldr	r3, [pc, #32]	@ (8003830 <HAL_MspInit+0x4c>)
 8003810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003812:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003816:	603b      	str	r3, [r7, #0]
 8003818:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800381a:	2200      	movs	r2, #0
 800381c:	210f      	movs	r1, #15
 800381e:	f06f 0001 	mvn.w	r0, #1
 8003822:	f002 fb1d 	bl	8005e60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	40023800 	.word	0x40023800

08003834 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b08a      	sub	sp, #40	@ 0x28
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800383c:	f107 0314 	add.w	r3, r7, #20
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	605a      	str	r2, [r3, #4]
 8003846:	609a      	str	r2, [r3, #8]
 8003848:	60da      	str	r2, [r3, #12]
 800384a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a21      	ldr	r2, [pc, #132]	@ (80038d8 <HAL_ADC_MspInit+0xa4>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d13c      	bne.n	80038d0 <HAL_ADC_MspInit+0x9c>
  {
    /* USER CODE BEGIN ADC3_MspInit 0 */

    /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003856:	4b21      	ldr	r3, [pc, #132]	@ (80038dc <HAL_ADC_MspInit+0xa8>)
 8003858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800385a:	4a20      	ldr	r2, [pc, #128]	@ (80038dc <HAL_ADC_MspInit+0xa8>)
 800385c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003860:	6453      	str	r3, [r2, #68]	@ 0x44
 8003862:	4b1e      	ldr	r3, [pc, #120]	@ (80038dc <HAL_ADC_MspInit+0xa8>)
 8003864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003866:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800386a:	613b      	str	r3, [r7, #16]
 800386c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800386e:	4b1b      	ldr	r3, [pc, #108]	@ (80038dc <HAL_ADC_MspInit+0xa8>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003872:	4a1a      	ldr	r2, [pc, #104]	@ (80038dc <HAL_ADC_MspInit+0xa8>)
 8003874:	f043 0320 	orr.w	r3, r3, #32
 8003878:	6313      	str	r3, [r2, #48]	@ 0x30
 800387a:	4b18      	ldr	r3, [pc, #96]	@ (80038dc <HAL_ADC_MspInit+0xa8>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387e:	f003 0320 	and.w	r3, r3, #32
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003886:	4b15      	ldr	r3, [pc, #84]	@ (80038dc <HAL_ADC_MspInit+0xa8>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388a:	4a14      	ldr	r2, [pc, #80]	@ (80038dc <HAL_ADC_MspInit+0xa8>)
 800388c:	f043 0301 	orr.w	r3, r3, #1
 8003890:	6313      	str	r3, [r2, #48]	@ 0x30
 8003892:	4b12      	ldr	r3, [pc, #72]	@ (80038dc <HAL_ADC_MspInit+0xa8>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	60bb      	str	r3, [r7, #8]
 800389c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800389e:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 80038a2:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038a4:	2303      	movs	r3, #3
 80038a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80038ac:	f107 0314 	add.w	r3, r7, #20
 80038b0:	4619      	mov	r1, r3
 80038b2:	480b      	ldr	r0, [pc, #44]	@ (80038e0 <HAL_ADC_MspInit+0xac>)
 80038b4:	f003 fe18 	bl	80074e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80038b8:	2301      	movs	r3, #1
 80038ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038bc:	2303      	movs	r3, #3
 80038be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c0:	2300      	movs	r3, #0
 80038c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80038c4:	f107 0314 	add.w	r3, r7, #20
 80038c8:	4619      	mov	r1, r3
 80038ca:	4806      	ldr	r0, [pc, #24]	@ (80038e4 <HAL_ADC_MspInit+0xb0>)
 80038cc:	f003 fe0c 	bl	80074e8 <HAL_GPIO_Init>

    /* USER CODE END ADC3_MspInit 1 */

  }

}
 80038d0:	bf00      	nop
 80038d2:	3728      	adds	r7, #40	@ 0x28
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40012200 	.word	0x40012200
 80038dc:	40023800 	.word	0x40023800
 80038e0:	40021400 	.word	0x40021400
 80038e4:	40020000 	.word	0x40020000

080038e8 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a0a      	ldr	r2, [pc, #40]	@ (8003920 <HAL_CRC_MspInit+0x38>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d10b      	bne.n	8003912 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80038fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003924 <HAL_CRC_MspInit+0x3c>)
 80038fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fe:	4a09      	ldr	r2, [pc, #36]	@ (8003924 <HAL_CRC_MspInit+0x3c>)
 8003900:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003904:	6313      	str	r3, [r2, #48]	@ 0x30
 8003906:	4b07      	ldr	r3, [pc, #28]	@ (8003924 <HAL_CRC_MspInit+0x3c>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8003912:	bf00      	nop
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	40023000 	.word	0x40023000
 8003924:	40023800 	.word	0x40023800

08003928 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b08e      	sub	sp, #56	@ 0x38
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003930:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	605a      	str	r2, [r3, #4]
 800393a:	609a      	str	r2, [r3, #8]
 800393c:	60da      	str	r2, [r3, #12]
 800393e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a50      	ldr	r2, [pc, #320]	@ (8003a88 <HAL_DCMI_MspInit+0x160>)
 8003946:	4293      	cmp	r3, r2
 8003948:	f040 809a 	bne.w	8003a80 <HAL_DCMI_MspInit+0x158>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800394c:	4b4f      	ldr	r3, [pc, #316]	@ (8003a8c <HAL_DCMI_MspInit+0x164>)
 800394e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003950:	4a4e      	ldr	r2, [pc, #312]	@ (8003a8c <HAL_DCMI_MspInit+0x164>)
 8003952:	f043 0301 	orr.w	r3, r3, #1
 8003956:	6353      	str	r3, [r2, #52]	@ 0x34
 8003958:	4b4c      	ldr	r3, [pc, #304]	@ (8003a8c <HAL_DCMI_MspInit+0x164>)
 800395a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	623b      	str	r3, [r7, #32]
 8003962:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003964:	4b49      	ldr	r3, [pc, #292]	@ (8003a8c <HAL_DCMI_MspInit+0x164>)
 8003966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003968:	4a48      	ldr	r2, [pc, #288]	@ (8003a8c <HAL_DCMI_MspInit+0x164>)
 800396a:	f043 0310 	orr.w	r3, r3, #16
 800396e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003970:	4b46      	ldr	r3, [pc, #280]	@ (8003a8c <HAL_DCMI_MspInit+0x164>)
 8003972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003974:	f003 0310 	and.w	r3, r3, #16
 8003978:	61fb      	str	r3, [r7, #28]
 800397a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800397c:	4b43      	ldr	r3, [pc, #268]	@ (8003a8c <HAL_DCMI_MspInit+0x164>)
 800397e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003980:	4a42      	ldr	r2, [pc, #264]	@ (8003a8c <HAL_DCMI_MspInit+0x164>)
 8003982:	f043 0308 	orr.w	r3, r3, #8
 8003986:	6313      	str	r3, [r2, #48]	@ 0x30
 8003988:	4b40      	ldr	r3, [pc, #256]	@ (8003a8c <HAL_DCMI_MspInit+0x164>)
 800398a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398c:	f003 0308 	and.w	r3, r3, #8
 8003990:	61bb      	str	r3, [r7, #24]
 8003992:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003994:	4b3d      	ldr	r3, [pc, #244]	@ (8003a8c <HAL_DCMI_MspInit+0x164>)
 8003996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003998:	4a3c      	ldr	r2, [pc, #240]	@ (8003a8c <HAL_DCMI_MspInit+0x164>)
 800399a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800399e:	6313      	str	r3, [r2, #48]	@ 0x30
 80039a0:	4b3a      	ldr	r3, [pc, #232]	@ (8003a8c <HAL_DCMI_MspInit+0x164>)
 80039a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a8:	617b      	str	r3, [r7, #20]
 80039aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80039ac:	4b37      	ldr	r3, [pc, #220]	@ (8003a8c <HAL_DCMI_MspInit+0x164>)
 80039ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b0:	4a36      	ldr	r2, [pc, #216]	@ (8003a8c <HAL_DCMI_MspInit+0x164>)
 80039b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80039b8:	4b34      	ldr	r3, [pc, #208]	@ (8003a8c <HAL_DCMI_MspInit+0x164>)
 80039ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039c0:	613b      	str	r3, [r7, #16]
 80039c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039c4:	4b31      	ldr	r3, [pc, #196]	@ (8003a8c <HAL_DCMI_MspInit+0x164>)
 80039c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c8:	4a30      	ldr	r2, [pc, #192]	@ (8003a8c <HAL_DCMI_MspInit+0x164>)
 80039ca:	f043 0301 	orr.w	r3, r3, #1
 80039ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80039d0:	4b2e      	ldr	r3, [pc, #184]	@ (8003a8c <HAL_DCMI_MspInit+0x164>)
 80039d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80039dc:	2360      	movs	r3, #96	@ 0x60
 80039de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e0:	2302      	movs	r3, #2
 80039e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e4:	2300      	movs	r3, #0
 80039e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e8:	2300      	movs	r3, #0
 80039ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80039ec:	230d      	movs	r3, #13
 80039ee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039f4:	4619      	mov	r1, r3
 80039f6:	4826      	ldr	r0, [pc, #152]	@ (8003a90 <HAL_DCMI_MspInit+0x168>)
 80039f8:	f003 fd76 	bl	80074e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80039fc:	2308      	movs	r3, #8
 80039fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a00:	2302      	movs	r3, #2
 8003a02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a04:	2300      	movs	r3, #0
 8003a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003a0c:	230d      	movs	r3, #13
 8003a0e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8003a10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a14:	4619      	mov	r1, r3
 8003a16:	481f      	ldr	r0, [pc, #124]	@ (8003a94 <HAL_DCMI_MspInit+0x16c>)
 8003a18:	f003 fd66 	bl	80074e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8003a1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a22:	2302      	movs	r3, #2
 8003a24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a26:	2300      	movs	r3, #0
 8003a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003a2e:	230d      	movs	r3, #13
 8003a30:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8003a32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a36:	4619      	mov	r1, r3
 8003a38:	4817      	ldr	r0, [pc, #92]	@ (8003a98 <HAL_DCMI_MspInit+0x170>)
 8003a3a:	f003 fd55 	bl	80074e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8003a3e:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8003a42:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a44:	2302      	movs	r3, #2
 8003a46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003a50:	230d      	movs	r3, #13
 8003a52:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003a54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4810      	ldr	r0, [pc, #64]	@ (8003a9c <HAL_DCMI_MspInit+0x174>)
 8003a5c:	f003 fd44 	bl	80074e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8003a60:	2350      	movs	r3, #80	@ 0x50
 8003a62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a64:	2302      	movs	r3, #2
 8003a66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003a70:	230d      	movs	r3, #13
 8003a72:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4809      	ldr	r0, [pc, #36]	@ (8003aa0 <HAL_DCMI_MspInit+0x178>)
 8003a7c:	f003 fd34 	bl	80074e8 <HAL_GPIO_Init>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 8003a80:	bf00      	nop
 8003a82:	3738      	adds	r7, #56	@ 0x38
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	50050000 	.word	0x50050000
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	40021000 	.word	0x40021000
 8003a94:	40020c00 	.word	0x40020c00
 8003a98:	40021800 	.word	0x40021800
 8003a9c:	40021c00 	.word	0x40021c00
 8003aa0:	40020000 	.word	0x40020000

08003aa4 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8003ae8 <HAL_DMA2D_MspInit+0x44>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d113      	bne.n	8003ade <HAL_DMA2D_MspInit+0x3a>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8003aec <HAL_DMA2D_MspInit+0x48>)
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aba:	4a0c      	ldr	r2, [pc, #48]	@ (8003aec <HAL_DMA2D_MspInit+0x48>)
 8003abc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8003aec <HAL_DMA2D_MspInit+0x48>)
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003aca:	60fb      	str	r3, [r7, #12]
 8003acc:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003ace:	2200      	movs	r2, #0
 8003ad0:	2105      	movs	r1, #5
 8003ad2:	205a      	movs	r0, #90	@ 0x5a
 8003ad4:	f002 f9c4 	bl	8005e60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003ad8:	205a      	movs	r0, #90	@ 0x5a
 8003ada:	f002 f9dd 	bl	8005e98 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8003ade:	bf00      	nop
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	4002b000 	.word	0x4002b000
 8003aec:	40023800 	.word	0x40023800

08003af0 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b08e      	sub	sp, #56	@ 0x38
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	605a      	str	r2, [r3, #4]
 8003b02:	609a      	str	r2, [r3, #8]
 8003b04:	60da      	str	r2, [r3, #12]
 8003b06:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a3f      	ldr	r2, [pc, #252]	@ (8003c0c <HAL_ETH_MspInit+0x11c>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d178      	bne.n	8003c04 <HAL_ETH_MspInit+0x114>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003b12:	4b3f      	ldr	r3, [pc, #252]	@ (8003c10 <HAL_ETH_MspInit+0x120>)
 8003b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b16:	4a3e      	ldr	r2, [pc, #248]	@ (8003c10 <HAL_ETH_MspInit+0x120>)
 8003b18:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b1e:	4b3c      	ldr	r3, [pc, #240]	@ (8003c10 <HAL_ETH_MspInit+0x120>)
 8003b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b26:	623b      	str	r3, [r7, #32]
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	4b39      	ldr	r3, [pc, #228]	@ (8003c10 <HAL_ETH_MspInit+0x120>)
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2e:	4a38      	ldr	r2, [pc, #224]	@ (8003c10 <HAL_ETH_MspInit+0x120>)
 8003b30:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b36:	4b36      	ldr	r3, [pc, #216]	@ (8003c10 <HAL_ETH_MspInit+0x120>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b3e:	61fb      	str	r3, [r7, #28]
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	4b33      	ldr	r3, [pc, #204]	@ (8003c10 <HAL_ETH_MspInit+0x120>)
 8003b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b46:	4a32      	ldr	r2, [pc, #200]	@ (8003c10 <HAL_ETH_MspInit+0x120>)
 8003b48:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b4e:	4b30      	ldr	r3, [pc, #192]	@ (8003c10 <HAL_ETH_MspInit+0x120>)
 8003b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b56:	61bb      	str	r3, [r7, #24]
 8003b58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003b5a:	4b2d      	ldr	r3, [pc, #180]	@ (8003c10 <HAL_ETH_MspInit+0x120>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5e:	4a2c      	ldr	r2, [pc, #176]	@ (8003c10 <HAL_ETH_MspInit+0x120>)
 8003b60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b66:	4b2a      	ldr	r3, [pc, #168]	@ (8003c10 <HAL_ETH_MspInit+0x120>)
 8003b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b72:	4b27      	ldr	r3, [pc, #156]	@ (8003c10 <HAL_ETH_MspInit+0x120>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b76:	4a26      	ldr	r2, [pc, #152]	@ (8003c10 <HAL_ETH_MspInit+0x120>)
 8003b78:	f043 0304 	orr.w	r3, r3, #4
 8003b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b7e:	4b24      	ldr	r3, [pc, #144]	@ (8003c10 <HAL_ETH_MspInit+0x120>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	613b      	str	r3, [r7, #16]
 8003b88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b8a:	4b21      	ldr	r3, [pc, #132]	@ (8003c10 <HAL_ETH_MspInit+0x120>)
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8e:	4a20      	ldr	r2, [pc, #128]	@ (8003c10 <HAL_ETH_MspInit+0x120>)
 8003b90:	f043 0301 	orr.w	r3, r3, #1
 8003b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b96:	4b1e      	ldr	r3, [pc, #120]	@ (8003c10 <HAL_ETH_MspInit+0x120>)
 8003b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8003ba2:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8003ba6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba8:	2302      	movs	r3, #2
 8003baa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bac:	2300      	movs	r3, #0
 8003bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003bb4:	230b      	movs	r3, #11
 8003bb6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003bb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4815      	ldr	r0, [pc, #84]	@ (8003c14 <HAL_ETH_MspInit+0x124>)
 8003bc0:	f003 fc92 	bl	80074e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003bc4:	2332      	movs	r3, #50	@ 0x32
 8003bc6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc8:	2302      	movs	r3, #2
 8003bca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003bd4:	230b      	movs	r3, #11
 8003bd6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003bdc:	4619      	mov	r1, r3
 8003bde:	480e      	ldr	r0, [pc, #56]	@ (8003c18 <HAL_ETH_MspInit+0x128>)
 8003be0:	f003 fc82 	bl	80074e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003be4:	2386      	movs	r3, #134	@ 0x86
 8003be6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be8:	2302      	movs	r3, #2
 8003bea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bec:	2300      	movs	r3, #0
 8003bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003bf4:	230b      	movs	r3, #11
 8003bf6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4807      	ldr	r0, [pc, #28]	@ (8003c1c <HAL_ETH_MspInit+0x12c>)
 8003c00:	f003 fc72 	bl	80074e8 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8003c04:	bf00      	nop
 8003c06:	3738      	adds	r7, #56	@ 0x38
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	40028000 	.word	0x40028000
 8003c10:	40023800 	.word	0x40023800
 8003c14:	40021800 	.word	0x40021800
 8003c18:	40020800 	.word	0x40020800
 8003c1c:	40020000 	.word	0x40020000

08003c20 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b0ac      	sub	sp, #176	@ 0xb0
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c28:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	605a      	str	r2, [r3, #4]
 8003c32:	609a      	str	r2, [r3, #8]
 8003c34:	60da      	str	r2, [r3, #12]
 8003c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003c38:	f107 0318 	add.w	r3, r7, #24
 8003c3c:	2284      	movs	r2, #132	@ 0x84
 8003c3e:	2100      	movs	r1, #0
 8003c40:	4618      	mov	r0, r3
 8003c42:	f017 fbf9 	bl	801b438 <memset>
  if(hi2c->Instance==I2C1)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a44      	ldr	r2, [pc, #272]	@ (8003d5c <HAL_I2C_MspInit+0x13c>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d13d      	bne.n	8003ccc <HAL_I2C_MspInit+0xac>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003c50:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003c54:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003c56:	2300      	movs	r3, #0
 8003c58:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c5a:	f107 0318 	add.w	r3, r7, #24
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f007 f960 	bl	800af24 <HAL_RCCEx_PeriphCLKConfig>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003c6a:	f7ff fd55 	bl	8003718 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c6e:	4b3c      	ldr	r3, [pc, #240]	@ (8003d60 <HAL_I2C_MspInit+0x140>)
 8003c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c72:	4a3b      	ldr	r2, [pc, #236]	@ (8003d60 <HAL_I2C_MspInit+0x140>)
 8003c74:	f043 0302 	orr.w	r3, r3, #2
 8003c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c7a:	4b39      	ldr	r3, [pc, #228]	@ (8003d60 <HAL_I2C_MspInit+0x140>)
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	617b      	str	r3, [r7, #20]
 8003c84:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8003c86:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003c8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c8e:	2312      	movs	r3, #18
 8003c90:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c94:	2301      	movs	r3, #1
 8003c96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003ca0:	2304      	movs	r3, #4
 8003ca2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ca6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003caa:	4619      	mov	r1, r3
 8003cac:	482d      	ldr	r0, [pc, #180]	@ (8003d64 <HAL_I2C_MspInit+0x144>)
 8003cae:	f003 fc1b 	bl	80074e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003cb2:	4b2b      	ldr	r3, [pc, #172]	@ (8003d60 <HAL_I2C_MspInit+0x140>)
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb6:	4a2a      	ldr	r2, [pc, #168]	@ (8003d60 <HAL_I2C_MspInit+0x140>)
 8003cb8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cbe:	4b28      	ldr	r3, [pc, #160]	@ (8003d60 <HAL_I2C_MspInit+0x140>)
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cc6:	613b      	str	r3, [r7, #16]
 8003cc8:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003cca:	e042      	b.n	8003d52 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a25      	ldr	r2, [pc, #148]	@ (8003d68 <HAL_I2C_MspInit+0x148>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d13d      	bne.n	8003d52 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003cd6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003cda:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ce2:	f107 0318 	add.w	r3, r7, #24
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f007 f91c 	bl	800af24 <HAL_RCCEx_PeriphCLKConfig>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8003cf2:	f7ff fd11 	bl	8003718 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d60 <HAL_I2C_MspInit+0x140>)
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cfa:	4a19      	ldr	r2, [pc, #100]	@ (8003d60 <HAL_I2C_MspInit+0x140>)
 8003cfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d02:	4b17      	ldr	r3, [pc, #92]	@ (8003d60 <HAL_I2C_MspInit+0x140>)
 8003d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003d0e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003d12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d16:	2312      	movs	r3, #18
 8003d18:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d22:	2303      	movs	r3, #3
 8003d24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003d28:	2304      	movs	r3, #4
 8003d2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003d2e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003d32:	4619      	mov	r1, r3
 8003d34:	480d      	ldr	r0, [pc, #52]	@ (8003d6c <HAL_I2C_MspInit+0x14c>)
 8003d36:	f003 fbd7 	bl	80074e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003d3a:	4b09      	ldr	r3, [pc, #36]	@ (8003d60 <HAL_I2C_MspInit+0x140>)
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3e:	4a08      	ldr	r2, [pc, #32]	@ (8003d60 <HAL_I2C_MspInit+0x140>)
 8003d40:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003d44:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d46:	4b06      	ldr	r3, [pc, #24]	@ (8003d60 <HAL_I2C_MspInit+0x140>)
 8003d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d4e:	60bb      	str	r3, [r7, #8]
 8003d50:	68bb      	ldr	r3, [r7, #8]
}
 8003d52:	bf00      	nop
 8003d54:	37b0      	adds	r7, #176	@ 0xb0
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	40005400 	.word	0x40005400
 8003d60:	40023800 	.word	0x40023800
 8003d64:	40020400 	.word	0x40020400
 8003d68:	40005c00 	.word	0x40005c00
 8003d6c:	40021c00 	.word	0x40021c00

08003d70 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b08e      	sub	sp, #56	@ 0x38
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	605a      	str	r2, [r3, #4]
 8003d82:	609a      	str	r2, [r3, #8]
 8003d84:	60da      	str	r2, [r3, #12]
 8003d86:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a55      	ldr	r2, [pc, #340]	@ (8003ee4 <HAL_LTDC_MspInit+0x174>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	f040 80a3 	bne.w	8003eda <HAL_LTDC_MspInit+0x16a>
  {
    /* USER CODE BEGIN LTDC_MspInit 0 */

    /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003d94:	4b54      	ldr	r3, [pc, #336]	@ (8003ee8 <HAL_LTDC_MspInit+0x178>)
 8003d96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d98:	4a53      	ldr	r2, [pc, #332]	@ (8003ee8 <HAL_LTDC_MspInit+0x178>)
 8003d9a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d9e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003da0:	4b51      	ldr	r3, [pc, #324]	@ (8003ee8 <HAL_LTDC_MspInit+0x178>)
 8003da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003da8:	623b      	str	r3, [r7, #32]
 8003daa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003dac:	4b4e      	ldr	r3, [pc, #312]	@ (8003ee8 <HAL_LTDC_MspInit+0x178>)
 8003dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db0:	4a4d      	ldr	r2, [pc, #308]	@ (8003ee8 <HAL_LTDC_MspInit+0x178>)
 8003db2:	f043 0310 	orr.w	r3, r3, #16
 8003db6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003db8:	4b4b      	ldr	r3, [pc, #300]	@ (8003ee8 <HAL_LTDC_MspInit+0x178>)
 8003dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dbc:	f003 0310 	and.w	r3, r3, #16
 8003dc0:	61fb      	str	r3, [r7, #28]
 8003dc2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003dc4:	4b48      	ldr	r3, [pc, #288]	@ (8003ee8 <HAL_LTDC_MspInit+0x178>)
 8003dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc8:	4a47      	ldr	r2, [pc, #284]	@ (8003ee8 <HAL_LTDC_MspInit+0x178>)
 8003dca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003dce:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dd0:	4b45      	ldr	r3, [pc, #276]	@ (8003ee8 <HAL_LTDC_MspInit+0x178>)
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dd8:	61bb      	str	r3, [r7, #24]
 8003dda:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003ddc:	4b42      	ldr	r3, [pc, #264]	@ (8003ee8 <HAL_LTDC_MspInit+0x178>)
 8003dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de0:	4a41      	ldr	r2, [pc, #260]	@ (8003ee8 <HAL_LTDC_MspInit+0x178>)
 8003de2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003de6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003de8:	4b3f      	ldr	r3, [pc, #252]	@ (8003ee8 <HAL_LTDC_MspInit+0x178>)
 8003dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003df0:	617b      	str	r3, [r7, #20]
 8003df2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003df4:	4b3c      	ldr	r3, [pc, #240]	@ (8003ee8 <HAL_LTDC_MspInit+0x178>)
 8003df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df8:	4a3b      	ldr	r2, [pc, #236]	@ (8003ee8 <HAL_LTDC_MspInit+0x178>)
 8003dfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003dfe:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e00:	4b39      	ldr	r3, [pc, #228]	@ (8003ee8 <HAL_LTDC_MspInit+0x178>)
 8003e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e08:	613b      	str	r3, [r7, #16]
 8003e0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003e0c:	4b36      	ldr	r3, [pc, #216]	@ (8003ee8 <HAL_LTDC_MspInit+0x178>)
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e10:	4a35      	ldr	r2, [pc, #212]	@ (8003ee8 <HAL_LTDC_MspInit+0x178>)
 8003e12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e16:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e18:	4b33      	ldr	r3, [pc, #204]	@ (8003ee8 <HAL_LTDC_MspInit+0x178>)
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003e24:	2310      	movs	r3, #16
 8003e26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e28:	2302      	movs	r3, #2
 8003e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e30:	2300      	movs	r3, #0
 8003e32:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003e34:	230e      	movs	r3, #14
 8003e36:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003e38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	482b      	ldr	r0, [pc, #172]	@ (8003eec <HAL_LTDC_MspInit+0x17c>)
 8003e40:	f003 fb52 	bl	80074e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003e44:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8003e48:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e52:	2300      	movs	r3, #0
 8003e54:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003e56:	230e      	movs	r3, #14
 8003e58:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003e5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e5e:	4619      	mov	r1, r3
 8003e60:	4823      	ldr	r0, [pc, #140]	@ (8003ef0 <HAL_LTDC_MspInit+0x180>)
 8003e62:	f003 fb41 	bl	80074e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8003e66:	23f7      	movs	r3, #247	@ 0xf7
 8003e68:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e72:	2300      	movs	r3, #0
 8003e74:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003e76:	230e      	movs	r3, #14
 8003e78:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003e7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e7e:	4619      	mov	r1, r3
 8003e80:	481c      	ldr	r0, [pc, #112]	@ (8003ef4 <HAL_LTDC_MspInit+0x184>)
 8003e82:	f003 fb31 	bl	80074e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003e86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e90:	2300      	movs	r3, #0
 8003e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e94:	2300      	movs	r3, #0
 8003e96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003e98:	2309      	movs	r3, #9
 8003e9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003e9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4815      	ldr	r0, [pc, #84]	@ (8003ef8 <HAL_LTDC_MspInit+0x188>)
 8003ea4:	f003 fb20 	bl	80074e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003ea8:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8003eac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eae:	2302      	movs	r3, #2
 8003eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003eba:	230e      	movs	r3, #14
 8003ebc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003ebe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	480d      	ldr	r0, [pc, #52]	@ (8003efc <HAL_LTDC_MspInit+0x18c>)
 8003ec6:	f003 fb0f 	bl	80074e8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003eca:	2200      	movs	r2, #0
 8003ecc:	2105      	movs	r1, #5
 8003ece:	2058      	movs	r0, #88	@ 0x58
 8003ed0:	f001 ffc6 	bl	8005e60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003ed4:	2058      	movs	r0, #88	@ 0x58
 8003ed6:	f001 ffdf 	bl	8005e98 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 8003eda:	bf00      	nop
 8003edc:	3738      	adds	r7, #56	@ 0x38
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	40016800 	.word	0x40016800
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	40022400 	.word	0x40022400
 8003ef4:	40022800 	.word	0x40022800
 8003ef8:	40021800 	.word	0x40021800
 8003efc:	40022000 	.word	0x40022000

08003f00 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b08c      	sub	sp, #48	@ 0x30
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f08:	f107 031c 	add.w	r3, r7, #28
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	605a      	str	r2, [r3, #4]
 8003f12:	609a      	str	r2, [r3, #8]
 8003f14:	60da      	str	r2, [r3, #12]
 8003f16:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a3b      	ldr	r2, [pc, #236]	@ (800400c <HAL_QSPI_MspInit+0x10c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d170      	bne.n	8004004 <HAL_QSPI_MspInit+0x104>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003f22:	4b3b      	ldr	r3, [pc, #236]	@ (8004010 <HAL_QSPI_MspInit+0x110>)
 8003f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f26:	4a3a      	ldr	r2, [pc, #232]	@ (8004010 <HAL_QSPI_MspInit+0x110>)
 8003f28:	f043 0302 	orr.w	r3, r3, #2
 8003f2c:	6393      	str	r3, [r2, #56]	@ 0x38
 8003f2e:	4b38      	ldr	r3, [pc, #224]	@ (8004010 <HAL_QSPI_MspInit+0x110>)
 8003f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	61bb      	str	r3, [r7, #24]
 8003f38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f3a:	4b35      	ldr	r3, [pc, #212]	@ (8004010 <HAL_QSPI_MspInit+0x110>)
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3e:	4a34      	ldr	r2, [pc, #208]	@ (8004010 <HAL_QSPI_MspInit+0x110>)
 8003f40:	f043 0310 	orr.w	r3, r3, #16
 8003f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f46:	4b32      	ldr	r3, [pc, #200]	@ (8004010 <HAL_QSPI_MspInit+0x110>)
 8003f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	617b      	str	r3, [r7, #20]
 8003f50:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f52:	4b2f      	ldr	r3, [pc, #188]	@ (8004010 <HAL_QSPI_MspInit+0x110>)
 8003f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f56:	4a2e      	ldr	r2, [pc, #184]	@ (8004010 <HAL_QSPI_MspInit+0x110>)
 8003f58:	f043 0302 	orr.w	r3, r3, #2
 8003f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f5e:	4b2c      	ldr	r3, [pc, #176]	@ (8004010 <HAL_QSPI_MspInit+0x110>)
 8003f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	613b      	str	r3, [r7, #16]
 8003f68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f6a:	4b29      	ldr	r3, [pc, #164]	@ (8004010 <HAL_QSPI_MspInit+0x110>)
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6e:	4a28      	ldr	r2, [pc, #160]	@ (8004010 <HAL_QSPI_MspInit+0x110>)
 8003f70:	f043 0308 	orr.w	r3, r3, #8
 8003f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f76:	4b26      	ldr	r3, [pc, #152]	@ (8004010 <HAL_QSPI_MspInit+0x110>)
 8003f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7a:	f003 0308 	and.w	r3, r3, #8
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8003f82:	2304      	movs	r3, #4
 8003f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f86:	2302      	movs	r3, #2
 8003f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003f92:	2309      	movs	r3, #9
 8003f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8003f96:	f107 031c 	add.w	r3, r7, #28
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	481d      	ldr	r0, [pc, #116]	@ (8004014 <HAL_QSPI_MspInit+0x114>)
 8003f9e:	f003 faa3 	bl	80074e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8003fa2:	2340      	movs	r3, #64	@ 0x40
 8003fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003faa:	2300      	movs	r3, #0
 8003fac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003fb2:	230a      	movs	r3, #10
 8003fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8003fb6:	f107 031c 	add.w	r3, r7, #28
 8003fba:	4619      	mov	r1, r3
 8003fbc:	4816      	ldr	r0, [pc, #88]	@ (8004018 <HAL_QSPI_MspInit+0x118>)
 8003fbe:	f003 fa93 	bl	80074e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003fc2:	2304      	movs	r3, #4
 8003fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003fd2:	2309      	movs	r3, #9
 8003fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fd6:	f107 031c 	add.w	r3, r7, #28
 8003fda:	4619      	mov	r1, r3
 8003fdc:	480e      	ldr	r0, [pc, #56]	@ (8004018 <HAL_QSPI_MspInit+0x118>)
 8003fde:	f003 fa83 	bl	80074e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8003fe2:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe8:	2302      	movs	r3, #2
 8003fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fec:	2300      	movs	r3, #0
 8003fee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003ff4:	2309      	movs	r3, #9
 8003ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ff8:	f107 031c 	add.w	r3, r7, #28
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4807      	ldr	r0, [pc, #28]	@ (800401c <HAL_QSPI_MspInit+0x11c>)
 8004000:	f003 fa72 	bl	80074e8 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8004004:	bf00      	nop
 8004006:	3730      	adds	r7, #48	@ 0x30
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	a0001000 	.word	0xa0001000
 8004010:	40023800 	.word	0x40023800
 8004014:	40021000 	.word	0x40021000
 8004018:	40020400 	.word	0x40020400
 800401c:	40020c00 	.word	0x40020c00

08004020 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b0a4      	sub	sp, #144	@ 0x90
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004028:	f107 030c 	add.w	r3, r7, #12
 800402c:	2284      	movs	r2, #132	@ 0x84
 800402e:	2100      	movs	r1, #0
 8004030:	4618      	mov	r0, r3
 8004032:	f017 fa01 	bl	801b438 <memset>
  if(hrtc->Instance==RTC)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a0e      	ldr	r2, [pc, #56]	@ (8004074 <HAL_RTC_MspInit+0x54>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d114      	bne.n	800406a <HAL_RTC_MspInit+0x4a>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004040:	2320      	movs	r3, #32
 8004042:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004044:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004048:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800404a:	f107 030c 	add.w	r3, r7, #12
 800404e:	4618      	mov	r0, r3
 8004050:	f006 ff68 	bl	800af24 <HAL_RCCEx_PeriphCLKConfig>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800405a:	f7ff fb5d 	bl	8003718 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800405e:	4b06      	ldr	r3, [pc, #24]	@ (8004078 <HAL_RTC_MspInit+0x58>)
 8004060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004062:	4a05      	ldr	r2, [pc, #20]	@ (8004078 <HAL_RTC_MspInit+0x58>)
 8004064:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004068:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 800406a:	bf00      	nop
 800406c:	3790      	adds	r7, #144	@ 0x90
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40002800 	.word	0x40002800
 8004078:	40023800 	.word	0x40023800

0800407c <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b08a      	sub	sp, #40	@ 0x28
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004084:	f107 0314 	add.w	r3, r7, #20
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	605a      	str	r2, [r3, #4]
 800408e:	609a      	str	r2, [r3, #8]
 8004090:	60da      	str	r2, [r3, #12]
 8004092:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a25      	ldr	r2, [pc, #148]	@ (8004130 <HAL_SD_MspInit+0xb4>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d144      	bne.n	8004128 <HAL_SD_MspInit+0xac>
  {
    /* USER CODE BEGIN SDMMC1_MspInit 0 */

    /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800409e:	4b25      	ldr	r3, [pc, #148]	@ (8004134 <HAL_SD_MspInit+0xb8>)
 80040a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a2:	4a24      	ldr	r2, [pc, #144]	@ (8004134 <HAL_SD_MspInit+0xb8>)
 80040a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80040a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80040aa:	4b22      	ldr	r3, [pc, #136]	@ (8004134 <HAL_SD_MspInit+0xb8>)
 80040ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040b2:	613b      	str	r3, [r7, #16]
 80040b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040b6:	4b1f      	ldr	r3, [pc, #124]	@ (8004134 <HAL_SD_MspInit+0xb8>)
 80040b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ba:	4a1e      	ldr	r2, [pc, #120]	@ (8004134 <HAL_SD_MspInit+0xb8>)
 80040bc:	f043 0304 	orr.w	r3, r3, #4
 80040c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80040c2:	4b1c      	ldr	r3, [pc, #112]	@ (8004134 <HAL_SD_MspInit+0xb8>)
 80040c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c6:	f003 0304 	and.w	r3, r3, #4
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040ce:	4b19      	ldr	r3, [pc, #100]	@ (8004134 <HAL_SD_MspInit+0xb8>)
 80040d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d2:	4a18      	ldr	r2, [pc, #96]	@ (8004134 <HAL_SD_MspInit+0xb8>)
 80040d4:	f043 0308 	orr.w	r3, r3, #8
 80040d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80040da:	4b16      	ldr	r3, [pc, #88]	@ (8004134 <HAL_SD_MspInit+0xb8>)
 80040dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	60bb      	str	r3, [r7, #8]
 80040e4:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80040e6:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80040ea:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ec:	2302      	movs	r3, #2
 80040ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f0:	2300      	movs	r3, #0
 80040f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040f4:	2303      	movs	r3, #3
 80040f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80040f8:	230c      	movs	r3, #12
 80040fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040fc:	f107 0314 	add.w	r3, r7, #20
 8004100:	4619      	mov	r1, r3
 8004102:	480d      	ldr	r0, [pc, #52]	@ (8004138 <HAL_SD_MspInit+0xbc>)
 8004104:	f003 f9f0 	bl	80074e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8004108:	2304      	movs	r3, #4
 800410a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800410c:	2302      	movs	r3, #2
 800410e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004110:	2300      	movs	r3, #0
 8004112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004114:	2303      	movs	r3, #3
 8004116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004118:	230c      	movs	r3, #12
 800411a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800411c:	f107 0314 	add.w	r3, r7, #20
 8004120:	4619      	mov	r1, r3
 8004122:	4806      	ldr	r0, [pc, #24]	@ (800413c <HAL_SD_MspInit+0xc0>)
 8004124:	f003 f9e0 	bl	80074e8 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8004128:	bf00      	nop
 800412a:	3728      	adds	r7, #40	@ 0x28
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40012c00 	.word	0x40012c00
 8004134:	40023800 	.word	0x40023800
 8004138:	40020800 	.word	0x40020800
 800413c:	40020c00 	.word	0x40020c00

08004140 <HAL_SPDIFRX_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspdifrx: SPDIFRX handle pointer
  * @retval None
  */
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b0aa      	sub	sp, #168	@ 0xa8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004148:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	605a      	str	r2, [r3, #4]
 8004152:	609a      	str	r2, [r3, #8]
 8004154:	60da      	str	r2, [r3, #12]
 8004156:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004158:	f107 0310 	add.w	r3, r7, #16
 800415c:	2284      	movs	r2, #132	@ 0x84
 800415e:	2100      	movs	r1, #0
 8004160:	4618      	mov	r0, r3
 8004162:	f017 f969 	bl	801b438 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 800416e:	d143      	bne.n	80041f8 <HAL_SPDIFRX_MspInit+0xb8>

    /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8004170:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004174:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8004176:	2364      	movs	r3, #100	@ 0x64
 8004178:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800417a:	2302      	movs	r3, #2
 800417c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800417e:	2302      	movs	r3, #2
 8004180:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8004182:	2302      	movs	r3, #2
 8004184:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8004186:	2301      	movs	r3, #1
 8004188:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800418a:	f107 0310 	add.w	r3, r7, #16
 800418e:	4618      	mov	r0, r3
 8004190:	f006 fec8 	bl	800af24 <HAL_RCCEx_PeriphCLKConfig>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 800419a:	f7ff fabd 	bl	8003718 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800419e:	4b18      	ldr	r3, [pc, #96]	@ (8004200 <HAL_SPDIFRX_MspInit+0xc0>)
 80041a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a2:	4a17      	ldr	r2, [pc, #92]	@ (8004200 <HAL_SPDIFRX_MspInit+0xc0>)
 80041a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80041aa:	4b15      	ldr	r3, [pc, #84]	@ (8004200 <HAL_SPDIFRX_MspInit+0xc0>)
 80041ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80041b6:	4b12      	ldr	r3, [pc, #72]	@ (8004200 <HAL_SPDIFRX_MspInit+0xc0>)
 80041b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ba:	4a11      	ldr	r2, [pc, #68]	@ (8004200 <HAL_SPDIFRX_MspInit+0xc0>)
 80041bc:	f043 0308 	orr.w	r3, r3, #8
 80041c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80041c2:	4b0f      	ldr	r3, [pc, #60]	@ (8004200 <HAL_SPDIFRX_MspInit+0xc0>)
 80041c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	60bb      	str	r3, [r7, #8]
 80041cc:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80041ce:	2380      	movs	r3, #128	@ 0x80
 80041d0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041d4:	2302      	movs	r3, #2
 80041d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041da:	2300      	movs	r3, #0
 80041dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041e0:	2300      	movs	r3, #0
 80041e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80041e6:	2308      	movs	r3, #8
 80041e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80041ec:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80041f0:	4619      	mov	r1, r3
 80041f2:	4804      	ldr	r0, [pc, #16]	@ (8004204 <HAL_SPDIFRX_MspInit+0xc4>)
 80041f4:	f003 f978 	bl	80074e8 <HAL_GPIO_Init>

    /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 80041f8:	bf00      	nop
 80041fa:	37a8      	adds	r7, #168	@ 0xa8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	40023800 	.word	0x40023800
 8004204:	40020c00 	.word	0x40020c00

08004208 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b08a      	sub	sp, #40	@ 0x28
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004210:	f107 0314 	add.w	r3, r7, #20
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	605a      	str	r2, [r3, #4]
 800421a:	609a      	str	r2, [r3, #8]
 800421c:	60da      	str	r2, [r3, #12]
 800421e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a25      	ldr	r2, [pc, #148]	@ (80042bc <HAL_SPI_MspInit+0xb4>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d144      	bne.n	80042b4 <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800422a:	4b25      	ldr	r3, [pc, #148]	@ (80042c0 <HAL_SPI_MspInit+0xb8>)
 800422c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422e:	4a24      	ldr	r2, [pc, #144]	@ (80042c0 <HAL_SPI_MspInit+0xb8>)
 8004230:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004234:	6413      	str	r3, [r2, #64]	@ 0x40
 8004236:	4b22      	ldr	r3, [pc, #136]	@ (80042c0 <HAL_SPI_MspInit+0xb8>)
 8004238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800423e:	613b      	str	r3, [r7, #16]
 8004240:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004242:	4b1f      	ldr	r3, [pc, #124]	@ (80042c0 <HAL_SPI_MspInit+0xb8>)
 8004244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004246:	4a1e      	ldr	r2, [pc, #120]	@ (80042c0 <HAL_SPI_MspInit+0xb8>)
 8004248:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800424c:	6313      	str	r3, [r2, #48]	@ 0x30
 800424e:	4b1c      	ldr	r3, [pc, #112]	@ (80042c0 <HAL_SPI_MspInit+0xb8>)
 8004250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800425a:	4b19      	ldr	r3, [pc, #100]	@ (80042c0 <HAL_SPI_MspInit+0xb8>)
 800425c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800425e:	4a18      	ldr	r2, [pc, #96]	@ (80042c0 <HAL_SPI_MspInit+0xb8>)
 8004260:	f043 0302 	orr.w	r3, r3, #2
 8004264:	6313      	str	r3, [r2, #48]	@ 0x30
 8004266:	4b16      	ldr	r3, [pc, #88]	@ (80042c0 <HAL_SPI_MspInit+0xb8>)
 8004268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	60bb      	str	r3, [r7, #8]
 8004270:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8004272:	2302      	movs	r3, #2
 8004274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004276:	2302      	movs	r3, #2
 8004278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800427a:	2300      	movs	r3, #0
 800427c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800427e:	2300      	movs	r3, #0
 8004280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004282:	2305      	movs	r3, #5
 8004284:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8004286:	f107 0314 	add.w	r3, r7, #20
 800428a:	4619      	mov	r1, r3
 800428c:	480d      	ldr	r0, [pc, #52]	@ (80042c4 <HAL_SPI_MspInit+0xbc>)
 800428e:	f003 f92b 	bl	80074e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8004292:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8004296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004298:	2302      	movs	r3, #2
 800429a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800429c:	2300      	movs	r3, #0
 800429e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042a0:	2300      	movs	r3, #0
 80042a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80042a4:	2305      	movs	r3, #5
 80042a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042a8:	f107 0314 	add.w	r3, r7, #20
 80042ac:	4619      	mov	r1, r3
 80042ae:	4806      	ldr	r0, [pc, #24]	@ (80042c8 <HAL_SPI_MspInit+0xc0>)
 80042b0:	f003 f91a 	bl	80074e8 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80042b4:	bf00      	nop
 80042b6:	3728      	adds	r7, #40	@ 0x28
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	40003800 	.word	0x40003800
 80042c0:	40023800 	.word	0x40023800
 80042c4:	40022000 	.word	0x40022000
 80042c8:	40020400 	.word	0x40020400

080042cc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b089      	sub	sp, #36	@ 0x24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a2e      	ldr	r2, [pc, #184]	@ (8004394 <HAL_TIM_Base_MspInit+0xc8>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d10c      	bne.n	80042f8 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80042de:	4b2e      	ldr	r3, [pc, #184]	@ (8004398 <HAL_TIM_Base_MspInit+0xcc>)
 80042e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e2:	4a2d      	ldr	r2, [pc, #180]	@ (8004398 <HAL_TIM_Base_MspInit+0xcc>)
 80042e4:	f043 0301 	orr.w	r3, r3, #1
 80042e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80042ea:	4b2b      	ldr	r3, [pc, #172]	@ (8004398 <HAL_TIM_Base_MspInit+0xcc>)
 80042ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	61fb      	str	r3, [r7, #28]
 80042f4:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 80042f6:	e046      	b.n	8004386 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004300:	d10c      	bne.n	800431c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004302:	4b25      	ldr	r3, [pc, #148]	@ (8004398 <HAL_TIM_Base_MspInit+0xcc>)
 8004304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004306:	4a24      	ldr	r2, [pc, #144]	@ (8004398 <HAL_TIM_Base_MspInit+0xcc>)
 8004308:	f043 0301 	orr.w	r3, r3, #1
 800430c:	6413      	str	r3, [r2, #64]	@ 0x40
 800430e:	4b22      	ldr	r3, [pc, #136]	@ (8004398 <HAL_TIM_Base_MspInit+0xcc>)
 8004310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	61bb      	str	r3, [r7, #24]
 8004318:	69bb      	ldr	r3, [r7, #24]
}
 800431a:	e034      	b.n	8004386 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a1e      	ldr	r2, [pc, #120]	@ (800439c <HAL_TIM_Base_MspInit+0xd0>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d10c      	bne.n	8004340 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004326:	4b1c      	ldr	r3, [pc, #112]	@ (8004398 <HAL_TIM_Base_MspInit+0xcc>)
 8004328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432a:	4a1b      	ldr	r2, [pc, #108]	@ (8004398 <HAL_TIM_Base_MspInit+0xcc>)
 800432c:	f043 0302 	orr.w	r3, r3, #2
 8004330:	6413      	str	r3, [r2, #64]	@ 0x40
 8004332:	4b19      	ldr	r3, [pc, #100]	@ (8004398 <HAL_TIM_Base_MspInit+0xcc>)
 8004334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	697b      	ldr	r3, [r7, #20]
}
 800433e:	e022      	b.n	8004386 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a16      	ldr	r2, [pc, #88]	@ (80043a0 <HAL_TIM_Base_MspInit+0xd4>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d10c      	bne.n	8004364 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800434a:	4b13      	ldr	r3, [pc, #76]	@ (8004398 <HAL_TIM_Base_MspInit+0xcc>)
 800434c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434e:	4a12      	ldr	r2, [pc, #72]	@ (8004398 <HAL_TIM_Base_MspInit+0xcc>)
 8004350:	f043 0308 	orr.w	r3, r3, #8
 8004354:	6413      	str	r3, [r2, #64]	@ 0x40
 8004356:	4b10      	ldr	r3, [pc, #64]	@ (8004398 <HAL_TIM_Base_MspInit+0xcc>)
 8004358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435a:	f003 0308 	and.w	r3, r3, #8
 800435e:	613b      	str	r3, [r7, #16]
 8004360:	693b      	ldr	r3, [r7, #16]
}
 8004362:	e010      	b.n	8004386 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a0e      	ldr	r2, [pc, #56]	@ (80043a4 <HAL_TIM_Base_MspInit+0xd8>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d10b      	bne.n	8004386 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800436e:	4b0a      	ldr	r3, [pc, #40]	@ (8004398 <HAL_TIM_Base_MspInit+0xcc>)
 8004370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004372:	4a09      	ldr	r2, [pc, #36]	@ (8004398 <HAL_TIM_Base_MspInit+0xcc>)
 8004374:	f043 0302 	orr.w	r3, r3, #2
 8004378:	6453      	str	r3, [r2, #68]	@ 0x44
 800437a:	4b07      	ldr	r3, [pc, #28]	@ (8004398 <HAL_TIM_Base_MspInit+0xcc>)
 800437c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	68fb      	ldr	r3, [r7, #12]
}
 8004386:	bf00      	nop
 8004388:	3724      	adds	r7, #36	@ 0x24
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	40010000 	.word	0x40010000
 8004398:	40023800 	.word	0x40023800
 800439c:	40000400 	.word	0x40000400
 80043a0:	40000c00 	.word	0x40000c00
 80043a4:	40010400 	.word	0x40010400

080043a8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a0a      	ldr	r2, [pc, #40]	@ (80043e0 <HAL_TIM_PWM_MspInit+0x38>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d10b      	bne.n	80043d2 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM12_MspInit 0 */

    /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80043ba:	4b0a      	ldr	r3, [pc, #40]	@ (80043e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80043bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043be:	4a09      	ldr	r2, [pc, #36]	@ (80043e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80043c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80043c6:	4b07      	ldr	r3, [pc, #28]	@ (80043e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80043c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM12_MspInit 1 */

  }

}
 80043d2:	bf00      	nop
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	40001800 	.word	0x40001800
 80043e4:	40023800 	.word	0x40023800

080043e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b08c      	sub	sp, #48	@ 0x30
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043f0:	f107 031c 	add.w	r3, r7, #28
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	605a      	str	r2, [r3, #4]
 80043fa:	609a      	str	r2, [r3, #8]
 80043fc:	60da      	str	r2, [r3, #12]
 80043fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a56      	ldr	r2, [pc, #344]	@ (8004560 <HAL_TIM_MspPostInit+0x178>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d11d      	bne.n	8004446 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800440a:	4b56      	ldr	r3, [pc, #344]	@ (8004564 <HAL_TIM_MspPostInit+0x17c>)
 800440c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440e:	4a55      	ldr	r2, [pc, #340]	@ (8004564 <HAL_TIM_MspPostInit+0x17c>)
 8004410:	f043 0301 	orr.w	r3, r3, #1
 8004414:	6313      	str	r3, [r2, #48]	@ 0x30
 8004416:	4b53      	ldr	r3, [pc, #332]	@ (8004564 <HAL_TIM_MspPostInit+0x17c>)
 8004418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	61bb      	str	r3, [r7, #24]
 8004420:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8004422:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004428:	2302      	movs	r3, #2
 800442a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800442c:	2300      	movs	r3, #0
 800442e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004430:	2300      	movs	r3, #0
 8004432:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004434:	2301      	movs	r3, #1
 8004436:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8004438:	f107 031c 	add.w	r3, r7, #28
 800443c:	4619      	mov	r1, r3
 800443e:	484a      	ldr	r0, [pc, #296]	@ (8004568 <HAL_TIM_MspPostInit+0x180>)
 8004440:	f003 f852 	bl	80074e8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8004444:	e087      	b.n	8004556 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800444e:	d11d      	bne.n	800448c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004450:	4b44      	ldr	r3, [pc, #272]	@ (8004564 <HAL_TIM_MspPostInit+0x17c>)
 8004452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004454:	4a43      	ldr	r2, [pc, #268]	@ (8004564 <HAL_TIM_MspPostInit+0x17c>)
 8004456:	f043 0301 	orr.w	r3, r3, #1
 800445a:	6313      	str	r3, [r2, #48]	@ 0x30
 800445c:	4b41      	ldr	r3, [pc, #260]	@ (8004564 <HAL_TIM_MspPostInit+0x17c>)
 800445e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	617b      	str	r3, [r7, #20]
 8004466:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8004468:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800446c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800446e:	2302      	movs	r3, #2
 8004470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004472:	2300      	movs	r3, #0
 8004474:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004476:	2300      	movs	r3, #0
 8004478:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800447a:	2301      	movs	r3, #1
 800447c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800447e:	f107 031c 	add.w	r3, r7, #28
 8004482:	4619      	mov	r1, r3
 8004484:	4838      	ldr	r0, [pc, #224]	@ (8004568 <HAL_TIM_MspPostInit+0x180>)
 8004486:	f003 f82f 	bl	80074e8 <HAL_GPIO_Init>
}
 800448a:	e064      	b.n	8004556 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a36      	ldr	r2, [pc, #216]	@ (800456c <HAL_TIM_MspPostInit+0x184>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d11c      	bne.n	80044d0 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004496:	4b33      	ldr	r3, [pc, #204]	@ (8004564 <HAL_TIM_MspPostInit+0x17c>)
 8004498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800449a:	4a32      	ldr	r2, [pc, #200]	@ (8004564 <HAL_TIM_MspPostInit+0x17c>)
 800449c:	f043 0302 	orr.w	r3, r3, #2
 80044a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80044a2:	4b30      	ldr	r3, [pc, #192]	@ (8004564 <HAL_TIM_MspPostInit+0x17c>)
 80044a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	613b      	str	r3, [r7, #16]
 80044ac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80044ae:	2310      	movs	r3, #16
 80044b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044b2:	2302      	movs	r3, #2
 80044b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b6:	2300      	movs	r3, #0
 80044b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ba:	2300      	movs	r3, #0
 80044bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80044be:	2302      	movs	r3, #2
 80044c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80044c2:	f107 031c 	add.w	r3, r7, #28
 80044c6:	4619      	mov	r1, r3
 80044c8:	4829      	ldr	r0, [pc, #164]	@ (8004570 <HAL_TIM_MspPostInit+0x188>)
 80044ca:	f003 f80d 	bl	80074e8 <HAL_GPIO_Init>
}
 80044ce:	e042      	b.n	8004556 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a27      	ldr	r2, [pc, #156]	@ (8004574 <HAL_TIM_MspPostInit+0x18c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d11c      	bne.n	8004514 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80044da:	4b22      	ldr	r3, [pc, #136]	@ (8004564 <HAL_TIM_MspPostInit+0x17c>)
 80044dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044de:	4a21      	ldr	r2, [pc, #132]	@ (8004564 <HAL_TIM_MspPostInit+0x17c>)
 80044e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80044e6:	4b1f      	ldr	r3, [pc, #124]	@ (8004564 <HAL_TIM_MspPostInit+0x17c>)
 80044e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80044f2:	2301      	movs	r3, #1
 80044f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f6:	2302      	movs	r3, #2
 80044f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044fe:	2300      	movs	r3, #0
 8004500:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004502:	2302      	movs	r3, #2
 8004504:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8004506:	f107 031c 	add.w	r3, r7, #28
 800450a:	4619      	mov	r1, r3
 800450c:	481a      	ldr	r0, [pc, #104]	@ (8004578 <HAL_TIM_MspPostInit+0x190>)
 800450e:	f002 ffeb 	bl	80074e8 <HAL_GPIO_Init>
}
 8004512:	e020      	b.n	8004556 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a18      	ldr	r2, [pc, #96]	@ (800457c <HAL_TIM_MspPostInit+0x194>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d11b      	bne.n	8004556 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800451e:	4b11      	ldr	r3, [pc, #68]	@ (8004564 <HAL_TIM_MspPostInit+0x17c>)
 8004520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004522:	4a10      	ldr	r2, [pc, #64]	@ (8004564 <HAL_TIM_MspPostInit+0x17c>)
 8004524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004528:	6313      	str	r3, [r2, #48]	@ 0x30
 800452a:	4b0e      	ldr	r3, [pc, #56]	@ (8004564 <HAL_TIM_MspPostInit+0x17c>)
 800452c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800452e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004532:	60bb      	str	r3, [r7, #8]
 8004534:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8004536:	2340      	movs	r3, #64	@ 0x40
 8004538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800453a:	2302      	movs	r3, #2
 800453c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800453e:	2300      	movs	r3, #0
 8004540:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004542:	2300      	movs	r3, #0
 8004544:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004546:	2309      	movs	r3, #9
 8004548:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800454a:	f107 031c 	add.w	r3, r7, #28
 800454e:	4619      	mov	r1, r3
 8004550:	480b      	ldr	r0, [pc, #44]	@ (8004580 <HAL_TIM_MspPostInit+0x198>)
 8004552:	f002 ffc9 	bl	80074e8 <HAL_GPIO_Init>
}
 8004556:	bf00      	nop
 8004558:	3730      	adds	r7, #48	@ 0x30
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	40010000 	.word	0x40010000
 8004564:	40023800 	.word	0x40023800
 8004568:	40020000 	.word	0x40020000
 800456c:	40000400 	.word	0x40000400
 8004570:	40020400 	.word	0x40020400
 8004574:	40000c00 	.word	0x40000c00
 8004578:	40022000 	.word	0x40022000
 800457c:	40001800 	.word	0x40001800
 8004580:	40021c00 	.word	0x40021c00

08004584 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b0ae      	sub	sp, #184	@ 0xb8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800458c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004590:	2200      	movs	r2, #0
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	605a      	str	r2, [r3, #4]
 8004596:	609a      	str	r2, [r3, #8]
 8004598:	60da      	str	r2, [r3, #12]
 800459a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800459c:	f107 0320 	add.w	r3, r7, #32
 80045a0:	2284      	movs	r2, #132	@ 0x84
 80045a2:	2100      	movs	r1, #0
 80045a4:	4618      	mov	r0, r3
 80045a6:	f016 ff47 	bl	801b438 <memset>
  if(huart->Instance==USART1)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a53      	ldr	r2, [pc, #332]	@ (80046fc <HAL_UART_MspInit+0x178>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d15d      	bne.n	8004670 <HAL_UART_MspInit+0xec>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80045b4:	2340      	movs	r3, #64	@ 0x40
 80045b6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80045b8:	2300      	movs	r3, #0
 80045ba:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80045bc:	f107 0320 	add.w	r3, r7, #32
 80045c0:	4618      	mov	r0, r3
 80045c2:	f006 fcaf 	bl	800af24 <HAL_RCCEx_PeriphCLKConfig>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80045cc:	f7ff f8a4 	bl	8003718 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80045d0:	4b4b      	ldr	r3, [pc, #300]	@ (8004700 <HAL_UART_MspInit+0x17c>)
 80045d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045d4:	4a4a      	ldr	r2, [pc, #296]	@ (8004700 <HAL_UART_MspInit+0x17c>)
 80045d6:	f043 0310 	orr.w	r3, r3, #16
 80045da:	6453      	str	r3, [r2, #68]	@ 0x44
 80045dc:	4b48      	ldr	r3, [pc, #288]	@ (8004700 <HAL_UART_MspInit+0x17c>)
 80045de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045e0:	f003 0310 	and.w	r3, r3, #16
 80045e4:	61fb      	str	r3, [r7, #28]
 80045e6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045e8:	4b45      	ldr	r3, [pc, #276]	@ (8004700 <HAL_UART_MspInit+0x17c>)
 80045ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ec:	4a44      	ldr	r2, [pc, #272]	@ (8004700 <HAL_UART_MspInit+0x17c>)
 80045ee:	f043 0302 	orr.w	r3, r3, #2
 80045f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80045f4:	4b42      	ldr	r3, [pc, #264]	@ (8004700 <HAL_UART_MspInit+0x17c>)
 80045f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	61bb      	str	r3, [r7, #24]
 80045fe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004600:	4b3f      	ldr	r3, [pc, #252]	@ (8004700 <HAL_UART_MspInit+0x17c>)
 8004602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004604:	4a3e      	ldr	r2, [pc, #248]	@ (8004700 <HAL_UART_MspInit+0x17c>)
 8004606:	f043 0301 	orr.w	r3, r3, #1
 800460a:	6313      	str	r3, [r2, #48]	@ 0x30
 800460c:	4b3c      	ldr	r3, [pc, #240]	@ (8004700 <HAL_UART_MspInit+0x17c>)
 800460e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	617b      	str	r3, [r7, #20]
 8004616:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8004618:	2380      	movs	r3, #128	@ 0x80
 800461a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800461e:	2302      	movs	r3, #2
 8004620:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004624:	2300      	movs	r3, #0
 8004626:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800462a:	2300      	movs	r3, #0
 800462c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004630:	2307      	movs	r3, #7
 8004632:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8004636:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800463a:	4619      	mov	r1, r3
 800463c:	4831      	ldr	r0, [pc, #196]	@ (8004704 <HAL_UART_MspInit+0x180>)
 800463e:	f002 ff53 	bl	80074e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8004642:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004646:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800464a:	2302      	movs	r3, #2
 800464c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004650:	2300      	movs	r3, #0
 8004652:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004656:	2300      	movs	r3, #0
 8004658:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800465c:	2307      	movs	r3, #7
 800465e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8004662:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004666:	4619      	mov	r1, r3
 8004668:	4827      	ldr	r0, [pc, #156]	@ (8004708 <HAL_UART_MspInit+0x184>)
 800466a:	f002 ff3d 	bl	80074e8 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 800466e:	e040      	b.n	80046f2 <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a25      	ldr	r2, [pc, #148]	@ (800470c <HAL_UART_MspInit+0x188>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d13b      	bne.n	80046f2 <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800467a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800467e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8004680:	2300      	movs	r3, #0
 8004682:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004684:	f107 0320 	add.w	r3, r7, #32
 8004688:	4618      	mov	r0, r3
 800468a:	f006 fc4b 	bl	800af24 <HAL_RCCEx_PeriphCLKConfig>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <HAL_UART_MspInit+0x114>
      Error_Handler();
 8004694:	f7ff f840 	bl	8003718 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004698:	4b19      	ldr	r3, [pc, #100]	@ (8004700 <HAL_UART_MspInit+0x17c>)
 800469a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800469c:	4a18      	ldr	r2, [pc, #96]	@ (8004700 <HAL_UART_MspInit+0x17c>)
 800469e:	f043 0320 	orr.w	r3, r3, #32
 80046a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80046a4:	4b16      	ldr	r3, [pc, #88]	@ (8004700 <HAL_UART_MspInit+0x17c>)
 80046a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046a8:	f003 0320 	and.w	r3, r3, #32
 80046ac:	613b      	str	r3, [r7, #16]
 80046ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046b0:	4b13      	ldr	r3, [pc, #76]	@ (8004700 <HAL_UART_MspInit+0x17c>)
 80046b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b4:	4a12      	ldr	r2, [pc, #72]	@ (8004700 <HAL_UART_MspInit+0x17c>)
 80046b6:	f043 0304 	orr.w	r3, r3, #4
 80046ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80046bc:	4b10      	ldr	r3, [pc, #64]	@ (8004700 <HAL_UART_MspInit+0x17c>)
 80046be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	60fb      	str	r3, [r7, #12]
 80046c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80046c8:	23c0      	movs	r3, #192	@ 0xc0
 80046ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ce:	2302      	movs	r3, #2
 80046d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d4:	2300      	movs	r3, #0
 80046d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046da:	2303      	movs	r3, #3
 80046dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80046e0:	2308      	movs	r3, #8
 80046e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046e6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80046ea:	4619      	mov	r1, r3
 80046ec:	4808      	ldr	r0, [pc, #32]	@ (8004710 <HAL_UART_MspInit+0x18c>)
 80046ee:	f002 fefb 	bl	80074e8 <HAL_GPIO_Init>
}
 80046f2:	bf00      	nop
 80046f4:	37b8      	adds	r7, #184	@ 0xb8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	40011000 	.word	0x40011000
 8004700:	40023800 	.word	0x40023800
 8004704:	40020400 	.word	0x40020400
 8004708:	40020000 	.word	0x40020000
 800470c:	40011400 	.word	0x40011400
 8004710:	40020800 	.word	0x40020800

08004714 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800471a:	1d3b      	adds	r3, r7, #4
 800471c:	2200      	movs	r2, #0
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	605a      	str	r2, [r3, #4]
 8004722:	609a      	str	r2, [r3, #8]
 8004724:	60da      	str	r2, [r3, #12]
 8004726:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004728:	4b3a      	ldr	r3, [pc, #232]	@ (8004814 <HAL_FMC_MspInit+0x100>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d16d      	bne.n	800480c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8004730:	4b38      	ldr	r3, [pc, #224]	@ (8004814 <HAL_FMC_MspInit+0x100>)
 8004732:	2201      	movs	r2, #1
 8004734:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004736:	4b38      	ldr	r3, [pc, #224]	@ (8004818 <HAL_FMC_MspInit+0x104>)
 8004738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800473a:	4a37      	ldr	r2, [pc, #220]	@ (8004818 <HAL_FMC_MspInit+0x104>)
 800473c:	f043 0301 	orr.w	r3, r3, #1
 8004740:	6393      	str	r3, [r2, #56]	@ 0x38
 8004742:	4b35      	ldr	r3, [pc, #212]	@ (8004818 <HAL_FMC_MspInit+0x104>)
 8004744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	603b      	str	r3, [r7, #0]
 800474c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800474e:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8004752:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004754:	2302      	movs	r3, #2
 8004756:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004758:	2300      	movs	r3, #0
 800475a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800475c:	2303      	movs	r3, #3
 800475e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004760:	230c      	movs	r3, #12
 8004762:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004764:	1d3b      	adds	r3, r7, #4
 8004766:	4619      	mov	r1, r3
 8004768:	482c      	ldr	r0, [pc, #176]	@ (800481c <HAL_FMC_MspInit+0x108>)
 800476a:	f002 febd 	bl	80074e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800476e:	f248 1333 	movw	r3, #33075	@ 0x8133
 8004772:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004774:	2302      	movs	r3, #2
 8004776:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004778:	2300      	movs	r3, #0
 800477a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800477c:	2303      	movs	r3, #3
 800477e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004780:	230c      	movs	r3, #12
 8004782:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004784:	1d3b      	adds	r3, r7, #4
 8004786:	4619      	mov	r1, r3
 8004788:	4825      	ldr	r0, [pc, #148]	@ (8004820 <HAL_FMC_MspInit+0x10c>)
 800478a:	f002 fead 	bl	80074e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800478e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8004792:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004794:	2302      	movs	r3, #2
 8004796:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004798:	2300      	movs	r3, #0
 800479a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800479c:	2303      	movs	r3, #3
 800479e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80047a0:	230c      	movs	r3, #12
 80047a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047a4:	1d3b      	adds	r3, r7, #4
 80047a6:	4619      	mov	r1, r3
 80047a8:	481e      	ldr	r0, [pc, #120]	@ (8004824 <HAL_FMC_MspInit+0x110>)
 80047aa:	f002 fe9d 	bl	80074e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80047ae:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80047b2:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047b4:	2302      	movs	r3, #2
 80047b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b8:	2300      	movs	r3, #0
 80047ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047bc:	2303      	movs	r3, #3
 80047be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80047c0:	230c      	movs	r3, #12
 80047c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80047c4:	1d3b      	adds	r3, r7, #4
 80047c6:	4619      	mov	r1, r3
 80047c8:	4817      	ldr	r0, [pc, #92]	@ (8004828 <HAL_FMC_MspInit+0x114>)
 80047ca:	f002 fe8d 	bl	80074e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80047ce:	2328      	movs	r3, #40	@ 0x28
 80047d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047d2:	2302      	movs	r3, #2
 80047d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d6:	2300      	movs	r3, #0
 80047d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047da:	2303      	movs	r3, #3
 80047dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80047de:	230c      	movs	r3, #12
 80047e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80047e2:	1d3b      	adds	r3, r7, #4
 80047e4:	4619      	mov	r1, r3
 80047e6:	4811      	ldr	r0, [pc, #68]	@ (800482c <HAL_FMC_MspInit+0x118>)
 80047e8:	f002 fe7e 	bl	80074e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80047ec:	2308      	movs	r3, #8
 80047ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047f0:	2302      	movs	r3, #2
 80047f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f4:	2300      	movs	r3, #0
 80047f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047f8:	2303      	movs	r3, #3
 80047fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80047fc:	230c      	movs	r3, #12
 80047fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8004800:	1d3b      	adds	r3, r7, #4
 8004802:	4619      	mov	r1, r3
 8004804:	480a      	ldr	r0, [pc, #40]	@ (8004830 <HAL_FMC_MspInit+0x11c>)
 8004806:	f002 fe6f 	bl	80074e8 <HAL_GPIO_Init>
 800480a:	e000      	b.n	800480e <HAL_FMC_MspInit+0xfa>
    return;
 800480c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800480e:	3718      	adds	r7, #24
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	20001f38 	.word	0x20001f38
 8004818:	40023800 	.word	0x40023800
 800481c:	40021000 	.word	0x40021000
 8004820:	40021800 	.word	0x40021800
 8004824:	40020c00 	.word	0x40020c00
 8004828:	40021400 	.word	0x40021400
 800482c:	40021c00 	.word	0x40021c00
 8004830:	40020800 	.word	0x40020800

08004834 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800483c:	f7ff ff6a 	bl	8004714 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8004840:	bf00      	nop
 8004842:	3708      	adds	r7, #8
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b08a      	sub	sp, #40	@ 0x28
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a2b      	ldr	r2, [pc, #172]	@ (8004904 <HAL_SAI_MspInit+0xbc>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d124      	bne.n	80048a4 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800485a:	4b2b      	ldr	r3, [pc, #172]	@ (8004908 <HAL_SAI_MspInit+0xc0>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10b      	bne.n	800487a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8004862:	4b2a      	ldr	r3, [pc, #168]	@ (800490c <HAL_SAI_MspInit+0xc4>)
 8004864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004866:	4a29      	ldr	r2, [pc, #164]	@ (800490c <HAL_SAI_MspInit+0xc4>)
 8004868:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800486c:	6453      	str	r3, [r2, #68]	@ 0x44
 800486e:	4b27      	ldr	r3, [pc, #156]	@ (800490c <HAL_SAI_MspInit+0xc4>)
 8004870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004872:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004876:	613b      	str	r3, [r7, #16]
 8004878:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800487a:	4b23      	ldr	r3, [pc, #140]	@ (8004908 <HAL_SAI_MspInit+0xc0>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	3301      	adds	r3, #1
 8004880:	4a21      	ldr	r2, [pc, #132]	@ (8004908 <HAL_SAI_MspInit+0xc0>)
 8004882:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8004884:	23f0      	movs	r3, #240	@ 0xf0
 8004886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004888:	2302      	movs	r3, #2
 800488a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800488c:	2300      	movs	r3, #0
 800488e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004890:	2300      	movs	r3, #0
 8004892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8004894:	230a      	movs	r3, #10
 8004896:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004898:	f107 0314 	add.w	r3, r7, #20
 800489c:	4619      	mov	r1, r3
 800489e:	481c      	ldr	r0, [pc, #112]	@ (8004910 <HAL_SAI_MspInit+0xc8>)
 80048a0:	f002 fe22 	bl	80074e8 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a1a      	ldr	r2, [pc, #104]	@ (8004914 <HAL_SAI_MspInit+0xcc>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d125      	bne.n	80048fa <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80048ae:	4b16      	ldr	r3, [pc, #88]	@ (8004908 <HAL_SAI_MspInit+0xc0>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10b      	bne.n	80048ce <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80048b6:	4b15      	ldr	r3, [pc, #84]	@ (800490c <HAL_SAI_MspInit+0xc4>)
 80048b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ba:	4a14      	ldr	r2, [pc, #80]	@ (800490c <HAL_SAI_MspInit+0xc4>)
 80048bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80048c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80048c2:	4b12      	ldr	r3, [pc, #72]	@ (800490c <HAL_SAI_MspInit+0xc4>)
 80048c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80048ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004908 <HAL_SAI_MspInit+0xc0>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	3301      	adds	r3, #1
 80048d4:	4a0c      	ldr	r2, [pc, #48]	@ (8004908 <HAL_SAI_MspInit+0xc0>)
 80048d6:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80048d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048de:	2302      	movs	r3, #2
 80048e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e2:	2300      	movs	r3, #0
 80048e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048e6:	2300      	movs	r3, #0
 80048e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80048ea:	230a      	movs	r3, #10
 80048ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80048ee:	f107 0314 	add.w	r3, r7, #20
 80048f2:	4619      	mov	r1, r3
 80048f4:	4808      	ldr	r0, [pc, #32]	@ (8004918 <HAL_SAI_MspInit+0xd0>)
 80048f6:	f002 fdf7 	bl	80074e8 <HAL_GPIO_Init>

    }
}
 80048fa:	bf00      	nop
 80048fc:	3728      	adds	r7, #40	@ 0x28
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	40015c04 	.word	0x40015c04
 8004908:	20001f3c 	.word	0x20001f3c
 800490c:	40023800 	.word	0x40023800
 8004910:	40022000 	.word	0x40022000
 8004914:	40015c24 	.word	0x40015c24
 8004918:	40021800 	.word	0x40021800

0800491c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b08e      	sub	sp, #56	@ 0x38
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004924:	2300      	movs	r3, #0
 8004926:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004928:	2300      	movs	r3, #0
 800492a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800492c:	4b33      	ldr	r3, [pc, #204]	@ (80049fc <HAL_InitTick+0xe0>)
 800492e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004930:	4a32      	ldr	r2, [pc, #200]	@ (80049fc <HAL_InitTick+0xe0>)
 8004932:	f043 0310 	orr.w	r3, r3, #16
 8004936:	6413      	str	r3, [r2, #64]	@ 0x40
 8004938:	4b30      	ldr	r3, [pc, #192]	@ (80049fc <HAL_InitTick+0xe0>)
 800493a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493c:	f003 0310 	and.w	r3, r3, #16
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004944:	f107 0210 	add.w	r2, r7, #16
 8004948:	f107 0314 	add.w	r3, r7, #20
 800494c:	4611      	mov	r1, r2
 800494e:	4618      	mov	r0, r3
 8004950:	f006 fab6 	bl	800aec0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004954:	6a3b      	ldr	r3, [r7, #32]
 8004956:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800495a:	2b00      	cmp	r3, #0
 800495c:	d103      	bne.n	8004966 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800495e:	f006 fa87 	bl	800ae70 <HAL_RCC_GetPCLK1Freq>
 8004962:	6378      	str	r0, [r7, #52]	@ 0x34
 8004964:	e004      	b.n	8004970 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004966:	f006 fa83 	bl	800ae70 <HAL_RCC_GetPCLK1Freq>
 800496a:	4603      	mov	r3, r0
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004972:	4a23      	ldr	r2, [pc, #140]	@ (8004a00 <HAL_InitTick+0xe4>)
 8004974:	fba2 2303 	umull	r2, r3, r2, r3
 8004978:	0c9b      	lsrs	r3, r3, #18
 800497a:	3b01      	subs	r3, #1
 800497c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800497e:	4b21      	ldr	r3, [pc, #132]	@ (8004a04 <HAL_InitTick+0xe8>)
 8004980:	4a21      	ldr	r2, [pc, #132]	@ (8004a08 <HAL_InitTick+0xec>)
 8004982:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004984:	4b1f      	ldr	r3, [pc, #124]	@ (8004a04 <HAL_InitTick+0xe8>)
 8004986:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800498a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800498c:	4a1d      	ldr	r2, [pc, #116]	@ (8004a04 <HAL_InitTick+0xe8>)
 800498e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004990:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004992:	4b1c      	ldr	r3, [pc, #112]	@ (8004a04 <HAL_InitTick+0xe8>)
 8004994:	2200      	movs	r2, #0
 8004996:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004998:	4b1a      	ldr	r3, [pc, #104]	@ (8004a04 <HAL_InitTick+0xe8>)
 800499a:	2200      	movs	r2, #0
 800499c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800499e:	4b19      	ldr	r3, [pc, #100]	@ (8004a04 <HAL_InitTick+0xe8>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80049a4:	4817      	ldr	r0, [pc, #92]	@ (8004a04 <HAL_InitTick+0xe8>)
 80049a6:	f009 f976 	bl	800dc96 <HAL_TIM_Base_Init>
 80049aa:	4603      	mov	r3, r0
 80049ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80049b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d11b      	bne.n	80049f0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80049b8:	4812      	ldr	r0, [pc, #72]	@ (8004a04 <HAL_InitTick+0xe8>)
 80049ba:	f009 f9c3 	bl	800dd44 <HAL_TIM_Base_Start_IT>
 80049be:	4603      	mov	r3, r0
 80049c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80049c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d111      	bne.n	80049f0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80049cc:	2036      	movs	r0, #54	@ 0x36
 80049ce:	f001 fa63 	bl	8005e98 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2b0f      	cmp	r3, #15
 80049d6:	d808      	bhi.n	80049ea <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80049d8:	2200      	movs	r2, #0
 80049da:	6879      	ldr	r1, [r7, #4]
 80049dc:	2036      	movs	r0, #54	@ 0x36
 80049de:	f001 fa3f 	bl	8005e60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80049e2:	4a0a      	ldr	r2, [pc, #40]	@ (8004a0c <HAL_InitTick+0xf0>)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6013      	str	r3, [r2, #0]
 80049e8:	e002      	b.n	80049f0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80049f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3738      	adds	r7, #56	@ 0x38
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40023800 	.word	0x40023800
 8004a00:	431bde83 	.word	0x431bde83
 8004a04:	20001f40 	.word	0x20001f40
 8004a08:	40001000 	.word	0x40001000
 8004a0c:	20000064 	.word	0x20000064

08004a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004a14:	bf00      	nop
 8004a16:	e7fd      	b.n	8004a14 <NMI_Handler+0x4>

08004a18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a1c:	bf00      	nop
 8004a1e:	e7fd      	b.n	8004a1c <HardFault_Handler+0x4>

08004a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a24:	bf00      	nop
 8004a26:	e7fd      	b.n	8004a24 <MemManage_Handler+0x4>

08004a28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a2c:	bf00      	nop
 8004a2e:	e7fd      	b.n	8004a2c <BusFault_Handler+0x4>

08004a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a34:	bf00      	nop
 8004a36:	e7fd      	b.n	8004a34 <UsageFault_Handler+0x4>

08004a38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a3c:	bf00      	nop
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
	...

08004a48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004a4c:	4802      	ldr	r0, [pc, #8]	@ (8004a58 <TIM6_DAC_IRQHandler+0x10>)
 8004a4e:	f009 fa48 	bl	800dee2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004a52:	bf00      	nop
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	20001f40 	.word	0x20001f40

08004a5c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8004a60:	4802      	ldr	r0, [pc, #8]	@ (8004a6c <OTG_FS_IRQHandler+0x10>)
 8004a62:	f003 f9e7 	bl	8007e34 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004a66:	bf00      	nop
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	2000a988 	.word	0x2000a988

08004a70 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004a74:	4802      	ldr	r0, [pc, #8]	@ (8004a80 <LTDC_IRQHandler+0x10>)
 8004a76:	f005 fa01 	bl	8009e7c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004a7a:	bf00      	nop
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	2000125c 	.word	0x2000125c

08004a84 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004a88:	4802      	ldr	r0, [pc, #8]	@ (8004a94 <DMA2D_IRQHandler+0x10>)
 8004a8a:	f002 f83d 	bl	8006b08 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8004a8e:	bf00      	nop
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	200010c4 	.word	0x200010c4

08004a98 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt (USART6_RX).
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004a9c:	4802      	ldr	r0, [pc, #8]	@ (8004aa8 <DMA2_Stream1_IRQHandler+0x10>)
 8004a9e:	f001 fd73 	bl	8006588 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004aa2:	bf00      	nop
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20001ac8 	.word	0x20001ac8

08004aac <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  
  // IDLE 인터럽트 체크 (메시지 끝 감지)
  if (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE)) {
 8004ab0:	4b09      	ldr	r3, [pc, #36]	@ (8004ad8 <USART6_IRQHandler+0x2c>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	f003 0310 	and.w	r3, r3, #16
 8004aba:	2b10      	cmp	r3, #16
 8004abc:	d106      	bne.n	8004acc <USART6_IRQHandler+0x20>
    __HAL_UART_CLEAR_IDLEFLAG(&huart6);  // IDLE 플래그 클리어
 8004abe:	4b06      	ldr	r3, [pc, #24]	@ (8004ad8 <USART6_IRQHandler+0x2c>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2210      	movs	r2, #16
 8004ac4:	621a      	str	r2, [r3, #32]
    
    // 외부 함수 호출
    extern void USER_UART_IDLECallback(UART_HandleTypeDef *huart);
    USER_UART_IDLECallback(&huart6);
 8004ac6:	4804      	ldr	r0, [pc, #16]	@ (8004ad8 <USART6_IRQHandler+0x2c>)
 8004ac8:	f000 fd6c 	bl	80055a4 <USER_UART_IDLECallback>
  }

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004acc:	4802      	ldr	r0, [pc, #8]	@ (8004ad8 <USART6_IRQHandler+0x2c>)
 8004ace:	f00a fc53 	bl	800f378 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004ad2:	bf00      	nop
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	200017fc 	.word	0x200017fc

08004adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ae4:	4a14      	ldr	r2, [pc, #80]	@ (8004b38 <_sbrk+0x5c>)
 8004ae6:	4b15      	ldr	r3, [pc, #84]	@ (8004b3c <_sbrk+0x60>)
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004af0:	4b13      	ldr	r3, [pc, #76]	@ (8004b40 <_sbrk+0x64>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d102      	bne.n	8004afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004af8:	4b11      	ldr	r3, [pc, #68]	@ (8004b40 <_sbrk+0x64>)
 8004afa:	4a12      	ldr	r2, [pc, #72]	@ (8004b44 <_sbrk+0x68>)
 8004afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004afe:	4b10      	ldr	r3, [pc, #64]	@ (8004b40 <_sbrk+0x64>)
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4413      	add	r3, r2
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d207      	bcs.n	8004b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b0c:	f016 fcd6 	bl	801b4bc <__errno>
 8004b10:	4603      	mov	r3, r0
 8004b12:	220c      	movs	r2, #12
 8004b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b16:	f04f 33ff 	mov.w	r3, #4294967295
 8004b1a:	e009      	b.n	8004b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b1c:	4b08      	ldr	r3, [pc, #32]	@ (8004b40 <_sbrk+0x64>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b22:	4b07      	ldr	r3, [pc, #28]	@ (8004b40 <_sbrk+0x64>)
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4413      	add	r3, r2
 8004b2a:	4a05      	ldr	r2, [pc, #20]	@ (8004b40 <_sbrk+0x64>)
 8004b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3718      	adds	r7, #24
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	20050000 	.word	0x20050000
 8004b3c:	00000400 	.word	0x00000400
 8004b40:	20001f8c 	.word	0x20001f8c
 8004b44:	2000aeb0 	.word	0x2000aeb0

08004b48 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b4c:	4b06      	ldr	r3, [pc, #24]	@ (8004b68 <SystemInit+0x20>)
 8004b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b52:	4a05      	ldr	r2, [pc, #20]	@ (8004b68 <SystemInit+0x20>)
 8004b54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004b58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b5c:	bf00      	nop
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	e000ed00 	.word	0xe000ed00

08004b6c <TIME_GetCurrentMs>:
// ============================================================================
// 기본 시간 함수
// ============================================================================

uint32_t TIME_GetCurrentMs(void)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
    return TIME_Platform_GetCurrentMs();
 8004b70:	f000 f803 	bl	8004b7a <TIME_Platform_GetCurrentMs>
 8004b74:	4603      	mov	r3, r0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <TIME_Platform_GetCurrentMs>:
#include "time.h"
#include "stm32f7xx_hal.h"

// STM32용 플랫폼 함수들
uint32_t TIME_Platform_GetCurrentMs(void)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	af00      	add	r7, sp, #0
    return HAL_GetTick();  // HAL_GetTick()은 1ms 단위로 시간을 반환
 8004b7e:	f000 fdef 	bl	8005760 <HAL_GetTick>
 8004b82:	4603      	mov	r3, r0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <LOGGER_Connect>:
    .enable_network = true,
    .server_ip = "",
    .server_port = 0
};

LoggerStatus LOGGER_Connect(const char* server_ip, int port) {
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
    if (server_ip == NULL) return LOGGER_STATUS_ERROR;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d102      	bne.n	8004b9e <LOGGER_Connect+0x16>
 8004b98:	f04f 33ff 	mov.w	r3, #4294967295
 8004b9c:	e016      	b.n	8004bcc <LOGGER_Connect+0x44>
    strncpy(current_config.server_ip, server_ip, sizeof(current_config.server_ip) - 1);
 8004b9e:	223f      	movs	r2, #63	@ 0x3f
 8004ba0:	6879      	ldr	r1, [r7, #4]
 8004ba2:	480c      	ldr	r0, [pc, #48]	@ (8004bd4 <LOGGER_Connect+0x4c>)
 8004ba4:	f016 fc50 	bl	801b448 <strncpy>
    current_config.server_port = port;
 8004ba8:	4a0b      	ldr	r2, [pc, #44]	@ (8004bd8 <LOGGER_Connect+0x50>)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	6453      	str	r3, [r2, #68]	@ 0x44
    LoggerStatus status = LOGGER_Platform_Connect(server_ip, port);
 8004bae:	6839      	ldr	r1, [r7, #0]
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 f8a5 	bl	8004d00 <LOGGER_Platform_Connect>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	73fb      	strb	r3, [r7, #15]
    if (status == LOGGER_STATUS_OK) {
 8004bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d102      	bne.n	8004bc8 <LOGGER_Connect+0x40>
        logger_connected = true;
 8004bc2:	4b06      	ldr	r3, [pc, #24]	@ (8004bdc <LOGGER_Connect+0x54>)
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	701a      	strb	r2, [r3, #0]
    }
    return status;
 8004bc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	2000001f 	.word	0x2000001f
 8004bd8:	2000001c 	.word	0x2000001c
 8004bdc:	20001f90 	.word	0x20001f90

08004be0 <LOGGER_Send>:
        logger_connected = false;
    }
    return status;
}

LoggerStatus LOGGER_Send(const char* message) {
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
    if (!logger_connected || message == NULL) return LOGGER_STATUS_ERROR;
 8004be8:	4b14      	ldr	r3, [pc, #80]	@ (8004c3c <LOGGER_Send+0x5c>)
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	f083 0301 	eor.w	r3, r3, #1
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d102      	bne.n	8004bfc <LOGGER_Send+0x1c>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d102      	bne.n	8004c02 <LOGGER_Send+0x22>
 8004bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8004c00:	e017      	b.n	8004c32 <LOGGER_Send+0x52>
    
    // Network 모듈을 통해 로그 전송 (SD카드 또는 소켓)
    if (Network_IsConnected()) {
 8004c02:	f7fc f925 	bl	8000e50 <Network_IsConnected>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00e      	beq.n	8004c2a <LOGGER_Send+0x4a>
        int result = Network_SendBinary(message, strlen(message) + 1); // null terminator 포함
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f7fb fb09 	bl	8000224 <strlen>
 8004c12:	4603      	mov	r3, r0
 8004c14:	3301      	adds	r3, #1
 8004c16:	4619      	mov	r1, r3
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f7fc f8cf 	bl	8000dbc <Network_SendBinary>
 8004c1e:	60f8      	str	r0, [r7, #12]
        if (result == NETWORK_OK) {
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <LOGGER_Send+0x4a>
            return LOGGER_STATUS_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	e003      	b.n	8004c32 <LOGGER_Send+0x52>
        }
    }
    
    // Network 모듈 사용 실패 시 기존 플랫폼 방식 사용
    return LOGGER_Platform_Send(message);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f874 	bl	8004d18 <LOGGER_Platform_Send>
 8004c30:	4603      	mov	r3, r0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	20001f90 	.word	0x20001f90

08004c40 <LOGGER_SendFormatted>:

bool LOGGER_IsConnected(void) {
    return logger_connected;
}

void LOGGER_SendFormatted(LogLevel level, const char* format, ...) {
 8004c40:	b40e      	push	{r1, r2, r3}
 8004c42:	b590      	push	{r4, r7, lr}
 8004c44:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c50:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8004c54:	701a      	strb	r2, [r3, #0]
    if (level < current_config.level) return;
 8004c56:	4b27      	ldr	r3, [pc, #156]	@ (8004cf4 <LOGGER_SendFormatted+0xb4>)
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004c5e:	f2a2 2219 	subw	r2, r2, #537	@ 0x219
 8004c62:	7812      	ldrb	r2, [r2, #0]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d33c      	bcc.n	8004ce2 <LOGGER_SendFormatted+0xa2>
    
    char buffer[512];
    const char* level_str[] = {"[DEBUG]", "[INFO]", "[WARN]", "[ERROR]"};
 8004c68:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c6c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004c70:	4a21      	ldr	r2, [pc, #132]	@ (8004cf8 <LOGGER_SendFormatted+0xb8>)
 8004c72:	461c      	mov	r4, r3
 8004c74:	4613      	mov	r3, r2
 8004c76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    // 레벨 문자열 추가
    int offset = snprintf(buffer, sizeof(buffer), "%s ", level_str[level]);
 8004c7c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c80:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8004c84:	781a      	ldrb	r2, [r3, #0]
 8004c86:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c8a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c92:	f107 001c 	add.w	r0, r7, #28
 8004c96:	4a19      	ldr	r2, [pc, #100]	@ (8004cfc <LOGGER_SendFormatted+0xbc>)
 8004c98:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004c9c:	f016 fb28 	bl	801b2f0 <sniprintf>
 8004ca0:	f8c7 021c 	str.w	r0, [r7, #540]	@ 0x21c
    
    // 가변 인수 처리
    va_list args;
    va_start(args, format);
 8004ca4:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8004ca8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004cac:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004cb0:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer + offset, sizeof(buffer) - offset, format, args);
 8004cb2:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004cb6:	f107 021c 	add.w	r2, r7, #28
 8004cba:	18d0      	adds	r0, r2, r3
 8004cbc:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004cc0:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 8004cc4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004cc8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8004cd2:	f016 fb93 	bl	801b3fc <vsniprintf>
    va_end(args);
    
    LOGGER_Send(buffer);
 8004cd6:	f107 031c 	add.w	r3, r7, #28
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7ff ff80 	bl	8004be0 <LOGGER_Send>
 8004ce0:	e000      	b.n	8004ce4 <LOGGER_SendFormatted+0xa4>
    if (level < current_config.level) return;
 8004ce2:	bf00      	nop
}
 8004ce4:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004cee:	b003      	add	sp, #12
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	2000001c 	.word	0x2000001c
 8004cf8:	0801de10 	.word	0x0801de10
 8004cfc:	0801de20 	.word	0x0801de20

08004d00 <LOGGER_Platform_Connect>:
#include "stm32f7xx_hal.h"
#include <string.h>

extern UART_HandleTypeDef huart1; // CubeMX가 생성한 UART1 (Virtual COM Port)

LoggerStatus LOGGER_Platform_Connect(const char* server_ip, int port) {
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
    (void)server_ip; (void)port;
    // STM32에서는 UART1이 이미 초기화되어 있으므로 추가 설정 불필요
    return LOGGER_STATUS_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <LOGGER_Platform_Send>:

LoggerStatus LOGGER_Platform_Disconnect(void) {
    return LOGGER_STATUS_OK;
}

LoggerStatus LOGGER_Platform_Send(const char* message) {
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
    if (message == NULL) return LOGGER_STATUS_ERROR;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d102      	bne.n	8004d2c <LOGGER_Platform_Send+0x14>
 8004d26:	f04f 33ff 	mov.w	r3, #4294967295
 8004d2a:	e01c      	b.n	8004d66 <LOGGER_Platform_Send+0x4e>
    
    // UART1을 통해 메시지 전송 (Virtual COM Port)
    int len = strlen(message);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f7fb fa79 	bl	8000224 <strlen>
 8004d32:	4603      	mov	r3, r0
 8004d34:	60fb      	str	r3, [r7, #12]
    if (len > 0) {
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	dd12      	ble.n	8004d62 <LOGGER_Platform_Send+0x4a>
        if (HAL_UART_Transmit(&huart1, (uint8_t*)message, len, 1000) == HAL_OK) {
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004d44:	6879      	ldr	r1, [r7, #4]
 8004d46:	480a      	ldr	r0, [pc, #40]	@ (8004d70 <LOGGER_Platform_Send+0x58>)
 8004d48:	f00a f8ee 	bl	800ef28 <HAL_UART_Transmit>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d107      	bne.n	8004d62 <LOGGER_Platform_Send+0x4a>
            // 줄바꿈 추가
            HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 100);
 8004d52:	2364      	movs	r3, #100	@ 0x64
 8004d54:	2202      	movs	r2, #2
 8004d56:	4907      	ldr	r1, [pc, #28]	@ (8004d74 <LOGGER_Platform_Send+0x5c>)
 8004d58:	4805      	ldr	r0, [pc, #20]	@ (8004d70 <LOGGER_Platform_Send+0x58>)
 8004d5a:	f00a f8e5 	bl	800ef28 <HAL_UART_Transmit>
            return LOGGER_STATUS_OK;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	e001      	b.n	8004d66 <LOGGER_Platform_Send+0x4e>
        }
    }
    return LOGGER_STATUS_ERROR;
 8004d62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	20001774 	.word	0x20001774
 8004d74:	0801de24 	.word	0x0801de24

08004d78 <UART_Connect>:
    .timeout_ms = UART_DEFAULT_TIMEOUT_MS
};

// 공통 함수들 (테스트와 실제 빌드 모두에서 사용)
UartStatus UART_Connect(const char* port)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
    if (port == NULL) {
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d105      	bne.n	8004d92 <UART_Connect+0x1a>
        LOG_ERROR("[UART] Connect failed: NULL port");
 8004d86:	4913      	ldr	r1, [pc, #76]	@ (8004dd4 <UART_Connect+0x5c>)
 8004d88:	2003      	movs	r0, #3
 8004d8a:	f7ff ff59 	bl	8004c40 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e01c      	b.n	8004dcc <UART_Connect+0x54>
    }

    LOG_INFO("[UART] Connecting to %s", port);
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	4910      	ldr	r1, [pc, #64]	@ (8004dd8 <UART_Connect+0x60>)
 8004d96:	2001      	movs	r0, #1
 8004d98:	f7ff ff52 	bl	8004c40 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Connect(port);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 f8fb 	bl	8004f98 <UART_Platform_Connect>
 8004da2:	4603      	mov	r3, r0
 8004da4:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 8004da6:	7bfb      	ldrb	r3, [r7, #15]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d108      	bne.n	8004dbe <UART_Connect+0x46>
        uart_connected = true;
 8004dac:	4b0b      	ldr	r3, [pc, #44]	@ (8004ddc <UART_Connect+0x64>)
 8004dae:	2201      	movs	r2, #1
 8004db0:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART] Successfully connected to %s", port);
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	490a      	ldr	r1, [pc, #40]	@ (8004de0 <UART_Connect+0x68>)
 8004db6:	2001      	movs	r0, #1
 8004db8:	f7ff ff42 	bl	8004c40 <LOGGER_SendFormatted>
 8004dbc:	e005      	b.n	8004dca <UART_Connect+0x52>
    } else {
        LOG_ERROR("[UART] Failed to connect to %s (status: %d)", port, status);
 8004dbe:	7bfb      	ldrb	r3, [r7, #15]
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	4908      	ldr	r1, [pc, #32]	@ (8004de4 <UART_Connect+0x6c>)
 8004dc4:	2003      	movs	r0, #3
 8004dc6:	f7ff ff3b 	bl	8004c40 <LOGGER_SendFormatted>
    }

    return status;
 8004dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	0801de28 	.word	0x0801de28
 8004dd8:	0801de4c 	.word	0x0801de4c
 8004ddc:	20001f91 	.word	0x20001f91
 8004de0:	0801de64 	.word	0x0801de64
 8004de4:	0801de88 	.word	0x0801de88

08004de8 <UART_Send>:

    return status;
}

UartStatus UART_Send(const char* data)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
    if (!uart_connected) {
 8004df0:	4b19      	ldr	r3, [pc, #100]	@ (8004e58 <UART_Send+0x70>)
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	f083 0301 	eor.w	r3, r3, #1
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d005      	beq.n	8004e0a <UART_Send+0x22>
        LOG_ERROR("[UART] Send failed: not connected");
 8004dfe:	4917      	ldr	r1, [pc, #92]	@ (8004e5c <UART_Send+0x74>)
 8004e00:	2003      	movs	r0, #3
 8004e02:	f7ff ff1d 	bl	8004c40 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e022      	b.n	8004e50 <UART_Send+0x68>
    }

    if (data == NULL) {
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d105      	bne.n	8004e1c <UART_Send+0x34>
        LOG_ERROR("[UART] Send failed: NULL data");
 8004e10:	4913      	ldr	r1, [pc, #76]	@ (8004e60 <UART_Send+0x78>)
 8004e12:	2003      	movs	r0, #3
 8004e14:	f7ff ff14 	bl	8004c40 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e019      	b.n	8004e50 <UART_Send+0x68>
    }

    LOG_DEBUG("[UART] Sending data: %s", data);
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	4911      	ldr	r1, [pc, #68]	@ (8004e64 <UART_Send+0x7c>)
 8004e20:	2000      	movs	r0, #0
 8004e22:	f7ff ff0d 	bl	8004c40 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Send(data);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f99e 	bl	8005168 <UART_Platform_Send>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d105      	bne.n	8004e42 <UART_Send+0x5a>
        LOG_DEBUG("[UART] Send successful: %s", data);
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	490b      	ldr	r1, [pc, #44]	@ (8004e68 <UART_Send+0x80>)
 8004e3a:	2000      	movs	r0, #0
 8004e3c:	f7ff ff00 	bl	8004c40 <LOGGER_SendFormatted>
 8004e40:	e005      	b.n	8004e4e <UART_Send+0x66>
    } else {
        LOG_ERROR("[UART] Send failed: %s (status: %d)", data, status);
 8004e42:	7bfb      	ldrb	r3, [r7, #15]
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	4909      	ldr	r1, [pc, #36]	@ (8004e6c <UART_Send+0x84>)
 8004e48:	2003      	movs	r0, #3
 8004e4a:	f7ff fef9 	bl	8004c40 <LOGGER_SendFormatted>
    }

    return status;
 8004e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	20001f91 	.word	0x20001f91
 8004e5c:	0801deb4 	.word	0x0801deb4
 8004e60:	0801ded8 	.word	0x0801ded8
 8004e64:	0801def8 	.word	0x0801def8
 8004e68:	0801df10 	.word	0x0801df10
 8004e6c:	0801df2c 	.word	0x0801df2c

08004e70 <UART_Receive>:

UartStatus UART_Receive(char* buffer, int buffer_size, int* bytes_received)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
    if (!uart_connected) {
 8004e7c:	4b22      	ldr	r3, [pc, #136]	@ (8004f08 <UART_Receive+0x98>)
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	f083 0301 	eor.w	r3, r3, #1
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d005      	beq.n	8004e96 <UART_Receive+0x26>
        LOG_ERROR("[UART] Receive failed: not connected");
 8004e8a:	4920      	ldr	r1, [pc, #128]	@ (8004f0c <UART_Receive+0x9c>)
 8004e8c:	2003      	movs	r0, #3
 8004e8e:	f7ff fed7 	bl	8004c40 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e034      	b.n	8004f00 <UART_Receive+0x90>
    }

    if (buffer == NULL || buffer_size <= 0 || bytes_received == NULL) {
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d005      	beq.n	8004ea8 <UART_Receive+0x38>
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	dd02      	ble.n	8004ea8 <UART_Receive+0x38>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d105      	bne.n	8004eb4 <UART_Receive+0x44>
        LOG_ERROR("[UART] Receive failed: invalid parameters");
 8004ea8:	4919      	ldr	r1, [pc, #100]	@ (8004f10 <UART_Receive+0xa0>)
 8004eaa:	2003      	movs	r0, #3
 8004eac:	f7ff fec8 	bl	8004c40 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e025      	b.n	8004f00 <UART_Receive+0x90>
    }

    LOG_DEBUG("[UART] Receiving data (buffer_size: %d)", buffer_size);
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	4917      	ldr	r1, [pc, #92]	@ (8004f14 <UART_Receive+0xa4>)
 8004eb8:	2000      	movs	r0, #0
 8004eba:	f7ff fec1 	bl	8004c40 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Receive(buffer, buffer_size, bytes_received);
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	68b9      	ldr	r1, [r7, #8]
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 f98c 	bl	80051e0 <UART_Platform_Receive>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	75fb      	strb	r3, [r7, #23]

    if (status == UART_STATUS_OK) {
 8004ecc:	7dfb      	ldrb	r3, [r7, #23]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d107      	bne.n	8004ee2 <UART_Receive+0x72>
        LOG_DEBUG("[UART] Received %d bytes: %s", *bytes_received, buffer);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	490f      	ldr	r1, [pc, #60]	@ (8004f18 <UART_Receive+0xa8>)
 8004eda:	2000      	movs	r0, #0
 8004edc:	f7ff feb0 	bl	8004c40 <LOGGER_SendFormatted>
 8004ee0:	e00d      	b.n	8004efe <UART_Receive+0x8e>
    } else if (status == UART_STATUS_TIMEOUT) {
 8004ee2:	7dfb      	ldrb	r3, [r7, #23]
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d104      	bne.n	8004ef2 <UART_Receive+0x82>
        LOG_DEBUG("[UART] Receive timeout");
 8004ee8:	490c      	ldr	r1, [pc, #48]	@ (8004f1c <UART_Receive+0xac>)
 8004eea:	2000      	movs	r0, #0
 8004eec:	f7ff fea8 	bl	8004c40 <LOGGER_SendFormatted>
 8004ef0:	e005      	b.n	8004efe <UART_Receive+0x8e>
    } else {
        LOG_ERROR("[UART] Receive failed (status: %d)", status);
 8004ef2:	7dfb      	ldrb	r3, [r7, #23]
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	490a      	ldr	r1, [pc, #40]	@ (8004f20 <UART_Receive+0xb0>)
 8004ef8:	2003      	movs	r0, #3
 8004efa:	f7ff fea1 	bl	8004c40 <LOGGER_SendFormatted>
    }

    return status;
 8004efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3718      	adds	r7, #24
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	20001f91 	.word	0x20001f91
 8004f0c:	0801df50 	.word	0x0801df50
 8004f10:	0801df78 	.word	0x0801df78
 8004f14:	0801dfa4 	.word	0x0801dfa4
 8004f18:	0801dfcc 	.word	0x0801dfcc
 8004f1c:	0801dfec 	.word	0x0801dfec
 8004f20:	0801e004 	.word	0x0801e004

08004f24 <UART_IsConnected>:
    LOG_DEBUG("[UART] Configuration saved (not connected)");
    return UART_STATUS_OK;
}

bool UART_IsConnected(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
    return uart_connected;
 8004f28:	4b03      	ldr	r3, [pc, #12]	@ (8004f38 <UART_IsConnected+0x14>)
 8004f2a:	781b      	ldrb	r3, [r3, #0]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	20001f91 	.word	0x20001f91

08004f3c <flush_rx_buffer>:
// 내부 상태 변수들
static bool uart_initialized = false;
static bool dma_receiving = false;

// 수신 버퍼 플러시 함수
static void flush_rx_buffer(void) {
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
    uint8_t dummy;
    int flush_count = 0;
 8004f42:	2300      	movs	r3, #0
 8004f44:	607b      	str	r3, [r7, #4]
    
    // 방법 1: 직접 레지스터 체크로 기존 데이터 클리어
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 8004f46:	e007      	b.n	8004f58 <flush_rx_buffer+0x1c>
        dummy = (uint8_t)(huart6.Instance->RDR & 0xFF);
 8004f48:	4b12      	ldr	r3, [pc, #72]	@ (8004f94 <flush_rx_buffer+0x58>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	70fb      	strb	r3, [r7, #3]
        flush_count++;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	3301      	adds	r3, #1
 8004f56:	607b      	str	r3, [r7, #4]
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 8004f58:	4b0e      	ldr	r3, [pc, #56]	@ (8004f94 <flush_rx_buffer+0x58>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	f003 0320 	and.w	r3, r3, #32
 8004f62:	2b20      	cmp	r3, #32
 8004f64:	d106      	bne.n	8004f74 <flush_rx_buffer+0x38>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b63      	cmp	r3, #99	@ 0x63
 8004f6a:	dded      	ble.n	8004f48 <flush_rx_buffer+0xc>
    }
    
    // 방법 2: HAL로 남은 데이터 클리어 (타임아웃 1ms)
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 8004f6c:	e002      	b.n	8004f74 <flush_rx_buffer+0x38>
        flush_count++;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	3301      	adds	r3, #1
 8004f72:	607b      	str	r3, [r7, #4]
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 8004f74:	1cf9      	adds	r1, r7, #3
 8004f76:	2301      	movs	r3, #1
 8004f78:	2201      	movs	r2, #1
 8004f7a:	4806      	ldr	r0, [pc, #24]	@ (8004f94 <flush_rx_buffer+0x58>)
 8004f7c:	f00a f85d 	bl	800f03a <HAL_UART_Receive>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d102      	bne.n	8004f8c <flush_rx_buffer+0x50>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b63      	cmp	r3, #99	@ 0x63
 8004f8a:	ddf0      	ble.n	8004f6e <flush_rx_buffer+0x32>
    }
}
 8004f8c:	bf00      	nop
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	200017fc 	.word	0x200017fc

08004f98 <UART_Platform_Connect>:

UartStatus UART_Platform_Connect(const char* port) {
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
    // STM32에서는 이미 HAL_UART_Init()이 실행됨
    uart_initialized = true;
 8004fa0:	4b5b      	ldr	r3, [pc, #364]	@ (8005110 <UART_Platform_Connect+0x178>)
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	701a      	strb	r2, [r3, #0]
    
    // UART 상태 체크 및 리셋
    LOG_INFO("[UART_STM32] UART gState: %d, RxState: %d", 
 8004fa6:	4b5b      	ldr	r3, [pc, #364]	@ (8005114 <UART_Platform_Connect+0x17c>)
 8004fa8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004faa:	4b5a      	ldr	r3, [pc, #360]	@ (8005114 <UART_Platform_Connect+0x17c>)
 8004fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fb0:	4959      	ldr	r1, [pc, #356]	@ (8005118 <UART_Platform_Connect+0x180>)
 8004fb2:	2001      	movs	r0, #1
 8004fb4:	f7ff fe44 	bl	8004c40 <LOGGER_SendFormatted>
             huart6.gState, huart6.RxState);
    
    // DMA 핸들 연결 상태 확인
    if (huart6.hdmarx != NULL) {
 8004fb8:	4b56      	ldr	r3, [pc, #344]	@ (8005114 <UART_Platform_Connect+0x17c>)
 8004fba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00e      	beq.n	8004fde <UART_Platform_Connect+0x46>
        LOG_INFO("[UART_STM32] DMA RX handle is connected");
 8004fc0:	4956      	ldr	r1, [pc, #344]	@ (800511c <UART_Platform_Connect+0x184>)
 8004fc2:	2001      	movs	r0, #1
 8004fc4:	f7ff fe3c 	bl	8004c40 <LOGGER_SendFormatted>
        LOG_INFO("[UART_STM32] DMA State: %d", huart6.hdmarx->State);
 8004fc8:	4b52      	ldr	r3, [pc, #328]	@ (8005114 <UART_Platform_Connect+0x17c>)
 8004fca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fcc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	4952      	ldr	r1, [pc, #328]	@ (8005120 <UART_Platform_Connect+0x188>)
 8004fd6:	2001      	movs	r0, #1
 8004fd8:	f7ff fe32 	bl	8004c40 <LOGGER_SendFormatted>
 8004fdc:	e018      	b.n	8005010 <UART_Platform_Connect+0x78>
    } else {
        LOG_ERROR("[UART_STM32] DMA RX handle is NULL - DMA not initialized!");
 8004fde:	4951      	ldr	r1, [pc, #324]	@ (8005124 <UART_Platform_Connect+0x18c>)
 8004fe0:	2003      	movs	r0, #3
 8004fe2:	f7ff fe2d 	bl	8004c40 <LOGGER_SendFormatted>
        
        // DMA 핸들 강제 연결 시도
        extern DMA_HandleTypeDef hdma_usart6_rx;
        __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8004fe6:	4b4b      	ldr	r3, [pc, #300]	@ (8005114 <UART_Platform_Connect+0x17c>)
 8004fe8:	4a4f      	ldr	r2, [pc, #316]	@ (8005128 <UART_Platform_Connect+0x190>)
 8004fea:	675a      	str	r2, [r3, #116]	@ 0x74
 8004fec:	4b4e      	ldr	r3, [pc, #312]	@ (8005128 <UART_Platform_Connect+0x190>)
 8004fee:	4a49      	ldr	r2, [pc, #292]	@ (8005114 <UART_Platform_Connect+0x17c>)
 8004ff0:	639a      	str	r2, [r3, #56]	@ 0x38
        
        if (huart6.hdmarx != NULL) {
 8004ff2:	4b48      	ldr	r3, [pc, #288]	@ (8005114 <UART_Platform_Connect+0x17c>)
 8004ff4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d004      	beq.n	8005004 <UART_Platform_Connect+0x6c>
            LOG_INFO("[UART_STM32] DMA RX handle manually linked");
 8004ffa:	494c      	ldr	r1, [pc, #304]	@ (800512c <UART_Platform_Connect+0x194>)
 8004ffc:	2001      	movs	r0, #1
 8004ffe:	f7ff fe1f 	bl	8004c40 <LOGGER_SendFormatted>
 8005002:	e005      	b.n	8005010 <UART_Platform_Connect+0x78>
        } else {
            LOG_ERROR("[UART_STM32] Failed to link DMA RX handle");
 8005004:	494a      	ldr	r1, [pc, #296]	@ (8005130 <UART_Platform_Connect+0x198>)
 8005006:	2003      	movs	r0, #3
 8005008:	f7ff fe1a 	bl	8004c40 <LOGGER_SendFormatted>
            return UART_STATUS_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e07a      	b.n	8005106 <UART_Platform_Connect+0x16e>
        }
    }
    
    // 이전에 시작된 DMA 작업이 있으면 중지
    if (dma_receiving) {
 8005010:	4b48      	ldr	r3, [pc, #288]	@ (8005134 <UART_Platform_Connect+0x19c>)
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d009      	beq.n	800502c <UART_Platform_Connect+0x94>
        HAL_UART_DMAStop(&huart6);
 8005018:	483e      	ldr	r0, [pc, #248]	@ (8005114 <UART_Platform_Connect+0x17c>)
 800501a:	f00a f91a 	bl	800f252 <HAL_UART_DMAStop>
        dma_receiving = false;
 800501e:	4b45      	ldr	r3, [pc, #276]	@ (8005134 <UART_Platform_Connect+0x19c>)
 8005020:	2200      	movs	r2, #0
 8005022:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] Previous DMA reception stopped");
 8005024:	4944      	ldr	r1, [pc, #272]	@ (8005138 <UART_Platform_Connect+0x1a0>)
 8005026:	2001      	movs	r0, #1
 8005028:	f7ff fe0a 	bl	8004c40 <LOGGER_SendFormatted>
    }
    
    // UART 상태를 READY로 강제 설정
    huart6.gState = HAL_UART_STATE_READY;
 800502c:	4b39      	ldr	r3, [pc, #228]	@ (8005114 <UART_Platform_Connect+0x17c>)
 800502e:	2220      	movs	r2, #32
 8005030:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart6.RxState = HAL_UART_STATE_READY;
 8005032:	4b38      	ldr	r3, [pc, #224]	@ (8005114 <UART_Platform_Connect+0x17c>)
 8005034:	2220      	movs	r2, #32
 8005036:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    
    // DMA 상태도 READY로 설정
    if (huart6.hdmarx != NULL) {
 800503a:	4b36      	ldr	r3, [pc, #216]	@ (8005114 <UART_Platform_Connect+0x17c>)
 800503c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800503e:	2b00      	cmp	r3, #0
 8005040:	d026      	beq.n	8005090 <UART_Platform_Connect+0xf8>
        // DMA 재초기화 (기존 상태 문제 해결)
        if (huart6.hdmarx->State != HAL_DMA_STATE_READY) {
 8005042:	4b34      	ldr	r3, [pc, #208]	@ (8005114 <UART_Platform_Connect+0x17c>)
 8005044:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005046:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b01      	cmp	r3, #1
 800504e:	d01a      	beq.n	8005086 <UART_Platform_Connect+0xee>
            LOG_INFO("[UART_STM32] DMA not ready, reinitializing...");
 8005050:	493a      	ldr	r1, [pc, #232]	@ (800513c <UART_Platform_Connect+0x1a4>)
 8005052:	2001      	movs	r0, #1
 8005054:	f7ff fdf4 	bl	8004c40 <LOGGER_SendFormatted>
            HAL_DMA_DeInit(huart6.hdmarx);
 8005058:	4b2e      	ldr	r3, [pc, #184]	@ (8005114 <UART_Platform_Connect+0x17c>)
 800505a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800505c:	4618      	mov	r0, r3
 800505e:	f001 f943 	bl	80062e8 <HAL_DMA_DeInit>
            if (HAL_DMA_Init(huart6.hdmarx) != HAL_OK) {
 8005062:	4b2c      	ldr	r3, [pc, #176]	@ (8005114 <UART_Platform_Connect+0x17c>)
 8005064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005066:	4618      	mov	r0, r3
 8005068:	f001 f890 	bl	800618c <HAL_DMA_Init>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d005      	beq.n	800507e <UART_Platform_Connect+0xe6>
                LOG_ERROR("[UART_STM32] DMA reinitialization failed");
 8005072:	4933      	ldr	r1, [pc, #204]	@ (8005140 <UART_Platform_Connect+0x1a8>)
 8005074:	2003      	movs	r0, #3
 8005076:	f7ff fde3 	bl	8004c40 <LOGGER_SendFormatted>
                return UART_STATUS_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e043      	b.n	8005106 <UART_Platform_Connect+0x16e>
            }
            LOG_INFO("[UART_STM32] DMA reinitialized successfully");
 800507e:	4931      	ldr	r1, [pc, #196]	@ (8005144 <UART_Platform_Connect+0x1ac>)
 8005080:	2001      	movs	r0, #1
 8005082:	f7ff fddd 	bl	8004c40 <LOGGER_SendFormatted>
        }
        huart6.hdmarx->State = HAL_DMA_STATE_READY;
 8005086:	4b23      	ldr	r3, [pc, #140]	@ (8005114 <UART_Platform_Connect+0x17c>)
 8005088:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 초기 버퍼 플러시
    flush_rx_buffer();
 8005090:	f7ff ff54 	bl	8004f3c <flush_rx_buffer>
    
    // DMA 기반 연속 수신 시작
    uart_rx_complete_flag = 0;
 8005094:	4b2c      	ldr	r3, [pc, #176]	@ (8005148 <UART_Platform_Connect+0x1b0>)
 8005096:	2200      	movs	r2, #0
 8005098:	701a      	strb	r2, [r3, #0]
    uart_rx_error_flag = 0;
 800509a:	4b2c      	ldr	r3, [pc, #176]	@ (800514c <UART_Platform_Connect+0x1b4>)
 800509c:	2200      	movs	r2, #0
 800509e:	701a      	strb	r2, [r3, #0]
    uart_rx_length = 0;
 80050a0:	4b2b      	ldr	r3, [pc, #172]	@ (8005150 <UART_Platform_Connect+0x1b8>)
 80050a2:	2200      	movs	r2, #0
 80050a4:	801a      	strh	r2, [r3, #0]
    
    // DMA 수신 버퍼 클리어
    memset(rx_buffer, 0, sizeof(rx_buffer));
 80050a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050aa:	2100      	movs	r1, #0
 80050ac:	4829      	ldr	r0, [pc, #164]	@ (8005154 <UART_Platform_Connect+0x1bc>)
 80050ae:	f016 f9c3 	bl	801b438 <memset>
    
    LOG_INFO("[UART_STM32] Starting DMA reception...");
 80050b2:	4929      	ldr	r1, [pc, #164]	@ (8005158 <UART_Platform_Connect+0x1c0>)
 80050b4:	2001      	movs	r0, #1
 80050b6:	f7ff fdc3 	bl	8004c40 <LOGGER_SendFormatted>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(&huart6, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 80050ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050be:	4925      	ldr	r1, [pc, #148]	@ (8005154 <UART_Platform_Connect+0x1bc>)
 80050c0:	4814      	ldr	r0, [pc, #80]	@ (8005114 <UART_Platform_Connect+0x17c>)
 80050c2:	f00a f882 	bl	800f1ca <HAL_UART_Receive_DMA>
 80050c6:	4603      	mov	r3, r0
 80050c8:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 80050ca:	7bfb      	ldrb	r3, [r7, #15]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10a      	bne.n	80050e6 <UART_Platform_Connect+0x14e>
        dma_receiving = true;
 80050d0:	4b18      	ldr	r3, [pc, #96]	@ (8005134 <UART_Platform_Connect+0x19c>)
 80050d2:	2201      	movs	r2, #1
 80050d4:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] ✓ DMA continuous reception started (buffer size: %d)", sizeof(rx_buffer));
 80050d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050da:	4920      	ldr	r1, [pc, #128]	@ (800515c <UART_Platform_Connect+0x1c4>)
 80050dc:	2001      	movs	r0, #1
 80050de:	f7ff fdaf 	bl	8004c40 <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
                  huart6.gState, huart6.RxState);
        return UART_STATUS_ERROR;
    }
    
    return UART_STATUS_OK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	e00f      	b.n	8005106 <UART_Platform_Connect+0x16e>
        LOG_ERROR("[UART_STM32] ✗ Failed to start DMA reception (status: %d)", status);
 80050e6:	7bfb      	ldrb	r3, [r7, #15]
 80050e8:	461a      	mov	r2, r3
 80050ea:	491d      	ldr	r1, [pc, #116]	@ (8005160 <UART_Platform_Connect+0x1c8>)
 80050ec:	2003      	movs	r0, #3
 80050ee:	f7ff fda7 	bl	8004c40 <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
 80050f2:	4b08      	ldr	r3, [pc, #32]	@ (8005114 <UART_Platform_Connect+0x17c>)
 80050f4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80050f6:	4b07      	ldr	r3, [pc, #28]	@ (8005114 <UART_Platform_Connect+0x17c>)
 80050f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050fc:	4919      	ldr	r1, [pc, #100]	@ (8005164 <UART_Platform_Connect+0x1cc>)
 80050fe:	2003      	movs	r0, #3
 8005100:	f7ff fd9e 	bl	8004c40 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005104:	2301      	movs	r3, #1
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	20002198 	.word	0x20002198
 8005114:	200017fc 	.word	0x200017fc
 8005118:	0801e200 	.word	0x0801e200
 800511c:	0801e22c 	.word	0x0801e22c
 8005120:	0801e254 	.word	0x0801e254
 8005124:	0801e270 	.word	0x0801e270
 8005128:	20001ac8 	.word	0x20001ac8
 800512c:	0801e2ac 	.word	0x0801e2ac
 8005130:	0801e2d8 	.word	0x0801e2d8
 8005134:	20002199 	.word	0x20002199
 8005138:	0801e304 	.word	0x0801e304
 800513c:	0801e330 	.word	0x0801e330
 8005140:	0801e360 	.word	0x0801e360
 8005144:	0801e38c 	.word	0x0801e38c
 8005148:	20001f92 	.word	0x20001f92
 800514c:	20001f93 	.word	0x20001f93
 8005150:	20001f94 	.word	0x20001f94
 8005154:	20001f98 	.word	0x20001f98
 8005158:	0801e3b8 	.word	0x0801e3b8
 800515c:	0801e3e0 	.word	0x0801e3e0
 8005160:	0801e424 	.word	0x0801e424
 8005164:	0801e460 	.word	0x0801e460

08005168 <UART_Platform_Send>:
    uart_initialized = false;
    
    return UART_STATUS_OK;
}

UartStatus UART_Platform_Send(const char* data) {
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
    if (data == NULL || !uart_initialized) return UART_STATUS_ERROR;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d006      	beq.n	8005184 <UART_Platform_Send+0x1c>
 8005176:	4b17      	ldr	r3, [pc, #92]	@ (80051d4 <UART_Platform_Send+0x6c>)
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	f083 0301 	eor.w	r3, r3, #1
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <UART_Platform_Send+0x20>
 8005184:	2301      	movs	r3, #1
 8005186:	e021      	b.n	80051cc <UART_Platform_Send+0x64>
    
    int len = strlen(data);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f7fb f84b 	bl	8000224 <strlen>
 800518e:	4603      	mov	r3, r0
 8005190:	60fb      	str	r3, [r7, #12]
    if (len == 0) return UART_STATUS_OK;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <UART_Platform_Send+0x34>
 8005198:	2300      	movs	r3, #0
 800519a:	e017      	b.n	80051cc <UART_Platform_Send+0x64>
    
    // 송신 전 수신 버퍼 플러시 (깨끗한 상태에서 시작)
    flush_rx_buffer();
 800519c:	f7ff fece 	bl	8004f3c <flush_rx_buffer>
    
    // 단순한 송신
    HAL_StatusTypeDef tx_status = HAL_UART_Transmit(&huart6, (uint8_t*)data, len, 1000);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80051a8:	6879      	ldr	r1, [r7, #4]
 80051aa:	480b      	ldr	r0, [pc, #44]	@ (80051d8 <UART_Platform_Send+0x70>)
 80051ac:	f009 febc 	bl	800ef28 <HAL_UART_Transmit>
 80051b0:	4603      	mov	r3, r0
 80051b2:	72fb      	strb	r3, [r7, #11]
    
    if (tx_status == HAL_OK) {
 80051b4:	7afb      	ldrb	r3, [r7, #11]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <UART_Platform_Send+0x56>
        return UART_STATUS_OK;
 80051ba:	2300      	movs	r3, #0
 80051bc:	e006      	b.n	80051cc <UART_Platform_Send+0x64>
    } else {
        LOG_ERROR("[UART_STM32] ✗ Transmission failed (HAL status: %d)", tx_status);
 80051be:	7afb      	ldrb	r3, [r7, #11]
 80051c0:	461a      	mov	r2, r3
 80051c2:	4906      	ldr	r1, [pc, #24]	@ (80051dc <UART_Platform_Send+0x74>)
 80051c4:	2003      	movs	r0, #3
 80051c6:	f7ff fd3b 	bl	8004c40 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 80051ca:	2301      	movs	r3, #1
    }
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	20002198 	.word	0x20002198
 80051d8:	200017fc 	.word	0x200017fc
 80051dc:	0801e4c0 	.word	0x0801e4c0

080051e0 <UART_Platform_Receive>:

UartStatus UART_Platform_Receive(char* buffer, int buffer_size, int* bytes_received) {
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b08a      	sub	sp, #40	@ 0x28
 80051e4:	af02      	add	r7, sp, #8
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
    if (buffer == NULL || bytes_received == NULL || !uart_initialized) {
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d009      	beq.n	8005206 <UART_Platform_Receive+0x26>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d006      	beq.n	8005206 <UART_Platform_Receive+0x26>
 80051f8:	4b74      	ldr	r3, [pc, #464]	@ (80053cc <UART_Platform_Receive+0x1ec>)
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	f083 0301 	eor.w	r3, r3, #1
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <UART_Platform_Receive+0x2a>
        return UART_STATUS_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e0dc      	b.n	80053c4 <UART_Platform_Receive+0x1e4>
    }
    
    if (buffer_size <= 0) {
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	2b00      	cmp	r3, #0
 800520e:	dc04      	bgt.n	800521a <UART_Platform_Receive+0x3a>
        *bytes_received = 0;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	601a      	str	r2, [r3, #0]
        return UART_STATUS_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e0d4      	b.n	80053c4 <UART_Platform_Receive+0x1e4>
    }
    
    *bytes_received = 0;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	601a      	str	r2, [r3, #0]
    
    // DMA 수신이 시작되지 않았으면 에러
    if (!dma_receiving) {
 8005220:	4b6b      	ldr	r3, [pc, #428]	@ (80053d0 <UART_Platform_Receive+0x1f0>)
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	f083 0301 	eor.w	r3, r3, #1
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <UART_Platform_Receive+0x52>
        return UART_STATUS_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e0c8      	b.n	80053c4 <UART_Platform_Receive+0x1e4>
    }
    
    // 에러 체크
    if (uart_rx_error_flag) {
 8005232:	4b68      	ldr	r3, [pc, #416]	@ (80053d4 <UART_Platform_Receive+0x1f4>)
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	d008      	beq.n	800524e <UART_Platform_Receive+0x6e>
        uart_rx_error_flag = 0;  // 플래그 클리어
 800523c:	4b65      	ldr	r3, [pc, #404]	@ (80053d4 <UART_Platform_Receive+0x1f4>)
 800523e:	2200      	movs	r2, #0
 8005240:	701a      	strb	r2, [r3, #0]
        LOG_WARN("[UART_STM32] ⚠ DMA reception error occurred");
 8005242:	4965      	ldr	r1, [pc, #404]	@ (80053d8 <UART_Platform_Receive+0x1f8>)
 8005244:	2002      	movs	r0, #2
 8005246:	f7ff fcfb 	bl	8004c40 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e0ba      	b.n	80053c4 <UART_Platform_Receive+0x1e4>
    }
    
    // DMA 수신 완료 체크
    if (uart_rx_complete_flag) {
 800524e:	4b63      	ldr	r3, [pc, #396]	@ (80053dc <UART_Platform_Receive+0x1fc>)
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b00      	cmp	r3, #0
 8005256:	f000 80b4 	beq.w	80053c2 <UART_Platform_Receive+0x1e2>
        uart_rx_complete_flag = 0;  // 플래그 클리어
 800525a:	4b60      	ldr	r3, [pc, #384]	@ (80053dc <UART_Platform_Receive+0x1fc>)
 800525c:	2200      	movs	r2, #0
 800525e:	701a      	strb	r2, [r3, #0]
        
        // 실제 수신된 바이트 수 확인
        uint16_t received_length = uart_rx_length;
 8005260:	4b5f      	ldr	r3, [pc, #380]	@ (80053e0 <UART_Platform_Receive+0x200>)
 8005262:	881b      	ldrh	r3, [r3, #0]
 8005264:	837b      	strh	r3, [r7, #26]
        LOG_INFO("[UART_STM32] DMA received %d bytes", received_length);
 8005266:	8b7b      	ldrh	r3, [r7, #26]
 8005268:	461a      	mov	r2, r3
 800526a:	495e      	ldr	r1, [pc, #376]	@ (80053e4 <UART_Platform_Receive+0x204>)
 800526c:	2001      	movs	r0, #1
 800526e:	f7ff fce7 	bl	8004c40 <LOGGER_SendFormatted>
        
        if (received_length > 0 && received_length <= buffer_size - 1) {
 8005272:	8b7b      	ldrh	r3, [r7, #26]
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 809e 	beq.w	80053b6 <UART_Platform_Receive+0x1d6>
 800527a:	8b7b      	ldrh	r3, [r7, #26]
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	429a      	cmp	r2, r3
 8005280:	f340 8099 	ble.w	80053b6 <UART_Platform_Receive+0x1d6>
            // 데이터 복사
            memcpy(buffer, rx_buffer, received_length);
 8005284:	8b7b      	ldrh	r3, [r7, #26]
 8005286:	461a      	mov	r2, r3
 8005288:	4957      	ldr	r1, [pc, #348]	@ (80053e8 <UART_Platform_Receive+0x208>)
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f016 f942 	bl	801b514 <memcpy>
            buffer[received_length] = '\0';  // null terminate
 8005290:	8b7b      	ldrh	r3, [r7, #26]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	4413      	add	r3, r2
 8005296:	2200      	movs	r2, #0
 8005298:	701a      	strb	r2, [r3, #0]
            *bytes_received = received_length;
 800529a:	8b7a      	ldrh	r2, [r7, #26]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	601a      	str	r2, [r3, #0]
            
            // 수신된 데이터 로그 (간단하게)
            LOG_INFO("[UART_STM32] Received data (%d bytes): '%s'", received_length, buffer);
 80052a0:	8b7a      	ldrh	r2, [r7, #26]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	4951      	ldr	r1, [pc, #324]	@ (80053ec <UART_Platform_Receive+0x20c>)
 80052a6:	2001      	movs	r0, #1
 80052a8:	f7ff fcca 	bl	8004c40 <LOGGER_SendFormatted>
            
            // 새로운 수신을 위해 DMA 완전 리셋 후 재시작
            memset(rx_buffer, 0, sizeof(rx_buffer));
 80052ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052b0:	2100      	movs	r1, #0
 80052b2:	484d      	ldr	r0, [pc, #308]	@ (80053e8 <UART_Platform_Receive+0x208>)
 80052b4:	f016 f8c0 	bl	801b438 <memset>
            
            // 1. DMA 완전 정지
            HAL_UART_DMAStop(&huart6);
 80052b8:	484d      	ldr	r0, [pc, #308]	@ (80053f0 <UART_Platform_Receive+0x210>)
 80052ba:	f009 ffca 	bl	800f252 <HAL_UART_DMAStop>
            
            // 2. 모든 UART 에러 플래그 클리어
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_PEF);
 80052be:	4b4c      	ldr	r3, [pc, #304]	@ (80053f0 <UART_Platform_Receive+0x210>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2201      	movs	r2, #1
 80052c4:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_FEF);
 80052c6:	4b4a      	ldr	r3, [pc, #296]	@ (80053f0 <UART_Platform_Receive+0x210>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2202      	movs	r2, #2
 80052cc:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_NEF);
 80052ce:	4b48      	ldr	r3, [pc, #288]	@ (80053f0 <UART_Platform_Receive+0x210>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2204      	movs	r2, #4
 80052d4:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_OREF);
 80052d6:	4b46      	ldr	r3, [pc, #280]	@ (80053f0 <UART_Platform_Receive+0x210>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2208      	movs	r2, #8
 80052dc:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_IDLEF);
 80052de:	4b44      	ldr	r3, [pc, #272]	@ (80053f0 <UART_Platform_Receive+0x210>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2210      	movs	r2, #16
 80052e4:	621a      	str	r2, [r3, #32]
            
            // 3. DMA 스트림이 완전히 정지될 때까지 대기
            if (huart6.hdmarx != NULL) {
 80052e6:	4b42      	ldr	r3, [pc, #264]	@ (80053f0 <UART_Platform_Receive+0x210>)
 80052e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d025      	beq.n	800533a <UART_Platform_Receive+0x15a>
                int timeout = 1000;
 80052ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80052f2:	61fb      	str	r3, [r7, #28]
                while (huart6.hdmarx->State != HAL_DMA_STATE_READY && timeout > 0) {
 80052f4:	e00b      	b.n	800530e <UART_Platform_Receive+0x12e>
                    timeout--;
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	3b01      	subs	r3, #1
 80052fa:	61fb      	str	r3, [r7, #28]
                    for(volatile int i = 0; i < 100; i++); // 짧은 지연
 80052fc:	2300      	movs	r3, #0
 80052fe:	617b      	str	r3, [r7, #20]
 8005300:	e002      	b.n	8005308 <UART_Platform_Receive+0x128>
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	3301      	adds	r3, #1
 8005306:	617b      	str	r3, [r7, #20]
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	2b63      	cmp	r3, #99	@ 0x63
 800530c:	ddf9      	ble.n	8005302 <UART_Platform_Receive+0x122>
                while (huart6.hdmarx->State != HAL_DMA_STATE_READY && timeout > 0) {
 800530e:	4b38      	ldr	r3, [pc, #224]	@ (80053f0 <UART_Platform_Receive+0x210>)
 8005310:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005312:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b01      	cmp	r3, #1
 800531a:	d002      	beq.n	8005322 <UART_Platform_Receive+0x142>
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	2b00      	cmp	r3, #0
 8005320:	dce9      	bgt.n	80052f6 <UART_Platform_Receive+0x116>
                }
                
                if (timeout == 0) {
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d108      	bne.n	800533a <UART_Platform_Receive+0x15a>
                    LOG_WARN("[UART_STM32] DMA did not reach READY state, forcing reset");
 8005328:	4932      	ldr	r1, [pc, #200]	@ (80053f4 <UART_Platform_Receive+0x214>)
 800532a:	2002      	movs	r0, #2
 800532c:	f7ff fc88 	bl	8004c40 <LOGGER_SendFormatted>
                    huart6.hdmarx->State = HAL_DMA_STATE_READY;
 8005330:	4b2f      	ldr	r3, [pc, #188]	@ (80053f0 <UART_Platform_Receive+0x210>)
 8005332:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005334:	2201      	movs	r2, #1
 8005336:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                }
            }
            
            // 4. UART 상태 리셋 (DMA 완전 정지 후)
            huart6.RxState = HAL_UART_STATE_READY;
 800533a:	4b2d      	ldr	r3, [pc, #180]	@ (80053f0 <UART_Platform_Receive+0x210>)
 800533c:	2220      	movs	r2, #32
 800533e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
            huart6.gState = HAL_UART_STATE_READY;
 8005342:	4b2b      	ldr	r3, [pc, #172]	@ (80053f0 <UART_Platform_Receive+0x210>)
 8005344:	2220      	movs	r2, #32
 8005346:	67da      	str	r2, [r3, #124]	@ 0x7c
            
            // 5. 충분한 지연 후 재시작
            for(volatile int i = 0; i < 10000; i++); // 더 긴 지연
 8005348:	2300      	movs	r3, #0
 800534a:	613b      	str	r3, [r7, #16]
 800534c:	e002      	b.n	8005354 <UART_Platform_Receive+0x174>
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	3301      	adds	r3, #1
 8005352:	613b      	str	r3, [r7, #16]
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	f242 720f 	movw	r2, #9999	@ 0x270f
 800535a:	4293      	cmp	r3, r2
 800535c:	ddf7      	ble.n	800534e <UART_Platform_Receive+0x16e>
            
            // 6. DMA 재시작
            HAL_StatusTypeDef restart_status = HAL_UART_Receive_DMA(&huart6, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 800535e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005362:	4921      	ldr	r1, [pc, #132]	@ (80053e8 <UART_Platform_Receive+0x208>)
 8005364:	4822      	ldr	r0, [pc, #136]	@ (80053f0 <UART_Platform_Receive+0x210>)
 8005366:	f009 ff30 	bl	800f1ca <HAL_UART_Receive_DMA>
 800536a:	4603      	mov	r3, r0
 800536c:	767b      	strb	r3, [r7, #25]
            if (restart_status == HAL_OK) {
 800536e:	7e7b      	ldrb	r3, [r7, #25]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d104      	bne.n	800537e <UART_Platform_Receive+0x19e>
                LOG_DEBUG("[UART_STM32] DMA restarted for next reception");
 8005374:	4920      	ldr	r1, [pc, #128]	@ (80053f8 <UART_Platform_Receive+0x218>)
 8005376:	2000      	movs	r0, #0
 8005378:	f7ff fc62 	bl	8004c40 <LOGGER_SendFormatted>
 800537c:	e019      	b.n	80053b2 <UART_Platform_Receive+0x1d2>
            } else {
                LOG_WARN("[UART_STM32] DMA restart failed (status: %d), UART state: g=%d rx=%d", 
 800537e:	7e7a      	ldrb	r2, [r7, #25]
 8005380:	4b1b      	ldr	r3, [pc, #108]	@ (80053f0 <UART_Platform_Receive+0x210>)
 8005382:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 8005384:	4b1a      	ldr	r3, [pc, #104]	@ (80053f0 <UART_Platform_Receive+0x210>)
 8005386:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	460b      	mov	r3, r1
 800538e:	491b      	ldr	r1, [pc, #108]	@ (80053fc <UART_Platform_Receive+0x21c>)
 8005390:	2002      	movs	r0, #2
 8005392:	f7ff fc55 	bl	8004c40 <LOGGER_SendFormatted>
                        restart_status, huart6.gState, huart6.RxState);
                if (huart6.hdmarx != NULL) {
 8005396:	4b16      	ldr	r3, [pc, #88]	@ (80053f0 <UART_Platform_Receive+0x210>)
 8005398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800539a:	2b00      	cmp	r3, #0
 800539c:	d009      	beq.n	80053b2 <UART_Platform_Receive+0x1d2>
                    LOG_WARN("[UART_STM32] DMA state: %d", huart6.hdmarx->State);
 800539e:	4b14      	ldr	r3, [pc, #80]	@ (80053f0 <UART_Platform_Receive+0x210>)
 80053a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	461a      	mov	r2, r3
 80053aa:	4915      	ldr	r1, [pc, #84]	@ (8005400 <UART_Platform_Receive+0x220>)
 80053ac:	2002      	movs	r0, #2
 80053ae:	f7ff fc47 	bl	8004c40 <LOGGER_SendFormatted>
                }
            }
            
            return UART_STATUS_OK;
 80053b2:	2300      	movs	r3, #0
 80053b4:	e006      	b.n	80053c4 <UART_Platform_Receive+0x1e4>
        } else {
            LOG_WARN("[UART_STM32] Invalid received length: %d (buffer size: %d)", received_length, buffer_size);
 80053b6:	8b7a      	ldrh	r2, [r7, #26]
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	4912      	ldr	r1, [pc, #72]	@ (8005404 <UART_Platform_Receive+0x224>)
 80053bc:	2002      	movs	r0, #2
 80053be:	f7ff fc3f 	bl	8004c40 <LOGGER_SendFormatted>
        }
    }
    
    // 수신된 데이터 없음
    return UART_STATUS_TIMEOUT;
 80053c2:	2302      	movs	r3, #2
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3720      	adds	r7, #32
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	20002198 	.word	0x20002198
 80053d0:	20002199 	.word	0x20002199
 80053d4:	20001f93 	.word	0x20001f93
 80053d8:	0801e4f8 	.word	0x0801e4f8
 80053dc:	20001f92 	.word	0x20001f92
 80053e0:	20001f94 	.word	0x20001f94
 80053e4:	0801e528 	.word	0x0801e528
 80053e8:	20001f98 	.word	0x20001f98
 80053ec:	0801e54c 	.word	0x0801e54c
 80053f0:	200017fc 	.word	0x200017fc
 80053f4:	0801e578 	.word	0x0801e578
 80053f8:	0801e5b4 	.word	0x0801e5b4
 80053fc:	0801e5e4 	.word	0x0801e5e4
 8005400:	0801e62c 	.word	0x0801e62c
 8005404:	0801e648 	.word	0x0801e648

08005408 <HAL_UART_RxCpltCallback>:
// ============================================================================
// HAL UART 콜백 함수들 - main.c에서 이동됨
// ============================================================================

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a0a      	ldr	r2, [pc, #40]	@ (8005440 <HAL_UART_RxCpltCallback+0x38>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d10e      	bne.n	8005438 <HAL_UART_RxCpltCallback+0x30>
  {
    // DMA 수신 완료 (전체 버퍼) - 거의 발생하지 않음
    uart_rx_complete_flag = 1;
 800541a:	4b0a      	ldr	r3, [pc, #40]	@ (8005444 <HAL_UART_RxCpltCallback+0x3c>)
 800541c:	2201      	movs	r2, #1
 800541e:	701a      	strb	r2, [r3, #0]
    uart_rx_length = sizeof(rx_buffer);
 8005420:	4b09      	ldr	r3, [pc, #36]	@ (8005448 <HAL_UART_RxCpltCallback+0x40>)
 8005422:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005426:	801a      	strh	r2, [r3, #0]
    LOG_INFO("[DMA] RxCpltCallback: Full buffer received (%d bytes)", uart_rx_length);
 8005428:	4b07      	ldr	r3, [pc, #28]	@ (8005448 <HAL_UART_RxCpltCallback+0x40>)
 800542a:	881b      	ldrh	r3, [r3, #0]
 800542c:	b29b      	uxth	r3, r3
 800542e:	461a      	mov	r2, r3
 8005430:	4906      	ldr	r1, [pc, #24]	@ (800544c <HAL_UART_RxCpltCallback+0x44>)
 8005432:	2001      	movs	r0, #1
 8005434:	f7ff fc04 	bl	8004c40 <LOGGER_SendFormatted>
  }
}
 8005438:	bf00      	nop
 800543a:	3708      	adds	r7, #8
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	40011400 	.word	0x40011400
 8005444:	20001f92 	.word	0x20001f92
 8005448:	20001f94 	.word	0x20001f94
 800544c:	0801e684 	.word	0x0801e684

08005450 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a05      	ldr	r2, [pc, #20]	@ (8005474 <HAL_UART_RxHalfCpltCallback+0x24>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d103      	bne.n	800546a <HAL_UART_RxHalfCpltCallback+0x1a>
  {
    // DMA 수신 절반 완료 - NORMAL 모드에서는 처리하지 않음 (IDLE 인터럽트가 처리)
    LOG_WARN("[DMA] RxHalfCpltCallback: Half buffer reached but ignoring in NORMAL mode");
 8005462:	4905      	ldr	r1, [pc, #20]	@ (8005478 <HAL_UART_RxHalfCpltCallback+0x28>)
 8005464:	2002      	movs	r0, #2
 8005466:	f7ff fbeb 	bl	8004c40 <LOGGER_SendFormatted>
    // uart_rx_complete_flag는 설정하지 않음 - IDLE 인터럽트에서만 설정
  }
}
 800546a:	bf00      	nop
 800546c:	3708      	adds	r7, #8
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	40011400 	.word	0x40011400
 8005478:	0801e6bc 	.word	0x0801e6bc

0800547c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a3c      	ldr	r2, [pc, #240]	@ (800557c <HAL_UART_ErrorCallback+0x100>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d171      	bne.n	8005572 <HAL_UART_ErrorCallback+0xf6>
  {
    // UART 에러 발생
    uart_rx_error_flag = 1;
 800548e:	4b3c      	ldr	r3, [pc, #240]	@ (8005580 <HAL_UART_ErrorCallback+0x104>)
 8005490:	2201      	movs	r2, #1
 8005492:	701a      	strb	r2, [r3, #0]
    LOG_WARN("[DMA] ErrorCallback: UART error occurred");
 8005494:	493b      	ldr	r1, [pc, #236]	@ (8005584 <HAL_UART_ErrorCallback+0x108>)
 8005496:	2002      	movs	r0, #2
 8005498:	f7ff fbd2 	bl	8004c40 <LOGGER_SendFormatted>
    
    // 모든 에러 플래그 클리어
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) {
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	f003 0308 	and.w	r3, r3, #8
 80054a6:	2b08      	cmp	r3, #8
 80054a8:	d107      	bne.n	80054ba <HAL_UART_ErrorCallback+0x3e>
      __HAL_UART_CLEAR_OREFLAG(huart);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2208      	movs	r2, #8
 80054b0:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Overrun error cleared");
 80054b2:	4935      	ldr	r1, [pc, #212]	@ (8005588 <HAL_UART_ErrorCallback+0x10c>)
 80054b4:	2002      	movs	r0, #2
 80054b6:	f7ff fbc3 	bl	8004c40 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) {
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	69db      	ldr	r3, [r3, #28]
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b04      	cmp	r3, #4
 80054c6:	d107      	bne.n	80054d8 <HAL_UART_ErrorCallback+0x5c>
      __HAL_UART_CLEAR_NEFLAG(huart);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2204      	movs	r2, #4
 80054ce:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Noise error cleared");
 80054d0:	492e      	ldr	r1, [pc, #184]	@ (800558c <HAL_UART_ErrorCallback+0x110>)
 80054d2:	2002      	movs	r0, #2
 80054d4:	f7ff fbb4 	bl	8004c40 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) {
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	69db      	ldr	r3, [r3, #28]
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d107      	bne.n	80054f6 <HAL_UART_ErrorCallback+0x7a>
      __HAL_UART_CLEAR_FEFLAG(huart);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2202      	movs	r2, #2
 80054ec:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Frame error cleared");
 80054ee:	4928      	ldr	r1, [pc, #160]	@ (8005590 <HAL_UART_ErrorCallback+0x114>)
 80054f0:	2002      	movs	r0, #2
 80054f2:	f7ff fba5 	bl	8004c40 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) {
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	69db      	ldr	r3, [r3, #28]
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b01      	cmp	r3, #1
 8005502:	d107      	bne.n	8005514 <HAL_UART_ErrorCallback+0x98>
      __HAL_UART_CLEAR_PEFLAG(huart);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2201      	movs	r2, #1
 800550a:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Parity error cleared");
 800550c:	4921      	ldr	r1, [pc, #132]	@ (8005594 <HAL_UART_ErrorCallback+0x118>)
 800550e:	2002      	movs	r0, #2
 8005510:	f7ff fb96 	bl	8004c40 <LOGGER_SendFormatted>
    }
    
    // UART와 DMA 상태 강제 리셋
    HAL_UART_DMAStop(huart);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f009 fe9c 	bl	800f252 <HAL_UART_DMAStop>
    huart->gState = HAL_UART_STATE_READY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2220      	movs	r2, #32
 800551e:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->RxState = HAL_UART_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2220      	movs	r2, #32
 8005524:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (huart->hdmarx != NULL) {
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800552c:	2b00      	cmp	r3, #0
 800552e:	d004      	beq.n	800553a <HAL_UART_ErrorCallback+0xbe>
      huart->hdmarx->State = HAL_DMA_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005534:	2201      	movs	r2, #1
 8005536:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 버퍼 클리어 후 DMA 재시작 (일반 모드)
    memset(rx_buffer, 0, sizeof(rx_buffer));
 800553a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800553e:	2100      	movs	r1, #0
 8005540:	4815      	ldr	r0, [pc, #84]	@ (8005598 <HAL_UART_ErrorCallback+0x11c>)
 8005542:	f015 ff79 	bl	801b438 <memset>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(huart, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8005546:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800554a:	4913      	ldr	r1, [pc, #76]	@ (8005598 <HAL_UART_ErrorCallback+0x11c>)
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f009 fe3c 	bl	800f1ca <HAL_UART_Receive_DMA>
 8005552:	4603      	mov	r3, r0
 8005554:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8005556:	7bfb      	ldrb	r3, [r7, #15]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d104      	bne.n	8005566 <HAL_UART_ErrorCallback+0xea>
      LOG_INFO("[DMA] Error recovery: DMA restarted successfully");
 800555c:	490f      	ldr	r1, [pc, #60]	@ (800559c <HAL_UART_ErrorCallback+0x120>)
 800555e:	2001      	movs	r0, #1
 8005560:	f7ff fb6e 	bl	8004c40 <LOGGER_SendFormatted>
    } else {
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
    }
  }
}
 8005564:	e005      	b.n	8005572 <HAL_UART_ErrorCallback+0xf6>
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
 8005566:	7bfb      	ldrb	r3, [r7, #15]
 8005568:	461a      	mov	r2, r3
 800556a:	490d      	ldr	r1, [pc, #52]	@ (80055a0 <HAL_UART_ErrorCallback+0x124>)
 800556c:	2003      	movs	r0, #3
 800556e:	f7ff fb67 	bl	8004c40 <LOGGER_SendFormatted>
}
 8005572:	bf00      	nop
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	40011400 	.word	0x40011400
 8005580:	20001f93 	.word	0x20001f93
 8005584:	0801e708 	.word	0x0801e708
 8005588:	0801e734 	.word	0x0801e734
 800558c:	0801e750 	.word	0x0801e750
 8005590:	0801e76c 	.word	0x0801e76c
 8005594:	0801e788 	.word	0x0801e788
 8005598:	20001f98 	.word	0x20001f98
 800559c:	0801e7a4 	.word	0x0801e7a4
 80055a0:	0801e7d8 	.word	0x0801e7d8

080055a4 <USER_UART_IDLECallback>:

// UART IDLE 인터럽트 콜백 (메시지 끝 감지)
void USER_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af02      	add	r7, sp, #8
 80055aa:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a3e      	ldr	r2, [pc, #248]	@ (80056ac <USER_UART_IDLECallback+0x108>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d175      	bne.n	80056a2 <USER_UART_IDLECallback+0xfe>
  {
    // UART 에러 상태 체크
    uint32_t error_flags = 0;
 80055b6:	2300      	movs	r3, #0
 80055b8:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) error_flags |= 0x01;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69db      	ldr	r3, [r3, #28]
 80055c0:	f003 0308 	and.w	r3, r3, #8
 80055c4:	2b08      	cmp	r3, #8
 80055c6:	d103      	bne.n	80055d0 <USER_UART_IDLECallback+0x2c>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f043 0301 	orr.w	r3, r3, #1
 80055ce:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) error_flags |= 0x02;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d103      	bne.n	80055e6 <USER_UART_IDLECallback+0x42>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f043 0302 	orr.w	r3, r3, #2
 80055e4:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) error_flags |= 0x04;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	69db      	ldr	r3, [r3, #28]
 80055ec:	f003 0304 	and.w	r3, r3, #4
 80055f0:	2b04      	cmp	r3, #4
 80055f2:	d103      	bne.n	80055fc <USER_UART_IDLECallback+0x58>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f043 0304 	orr.w	r3, r3, #4
 80055fa:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) error_flags |= 0x08;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	69db      	ldr	r3, [r3, #28]
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b01      	cmp	r3, #1
 8005608:	d103      	bne.n	8005612 <USER_UART_IDLECallback+0x6e>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f043 0308 	orr.w	r3, r3, #8
 8005610:	60fb      	str	r3, [r7, #12]
    
    // IDLE 감지 - 메시지 끝
    uint16_t remaining = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	817b      	strh	r3, [r7, #10]
    uart_rx_length = sizeof(rx_buffer) - remaining;
 800561c:	897b      	ldrh	r3, [r7, #10]
 800561e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8005622:	b29a      	uxth	r2, r3
 8005624:	4b22      	ldr	r3, [pc, #136]	@ (80056b0 <USER_UART_IDLECallback+0x10c>)
 8005626:	801a      	strh	r2, [r3, #0]
    
    if (uart_rx_length > 0) {
 8005628:	4b21      	ldr	r3, [pc, #132]	@ (80056b0 <USER_UART_IDLECallback+0x10c>)
 800562a:	881b      	ldrh	r3, [r3, #0]
 800562c:	b29b      	uxth	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d033      	beq.n	800569a <USER_UART_IDLECallback+0xf6>
      uart_rx_complete_flag = 1;
 8005632:	4b20      	ldr	r3, [pc, #128]	@ (80056b4 <USER_UART_IDLECallback+0x110>)
 8005634:	2201      	movs	r2, #1
 8005636:	701a      	strb	r2, [r3, #0]
      if (error_flags != 0) {
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d009      	beq.n	8005652 <USER_UART_IDLECallback+0xae>
        LOG_WARN("[DMA] IDLE detected: %d bytes received (UART errors: 0x%02lX)", uart_rx_length, error_flags);
 800563e:	4b1c      	ldr	r3, [pc, #112]	@ (80056b0 <USER_UART_IDLECallback+0x10c>)
 8005640:	881b      	ldrh	r3, [r3, #0]
 8005642:	b29b      	uxth	r3, r3
 8005644:	461a      	mov	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	491b      	ldr	r1, [pc, #108]	@ (80056b8 <USER_UART_IDLECallback+0x114>)
 800564a:	2002      	movs	r0, #2
 800564c:	f7ff faf8 	bl	8004c40 <LOGGER_SendFormatted>
 8005650:	e007      	b.n	8005662 <USER_UART_IDLECallback+0xbe>
      } else {
        LOG_INFO("[DMA] IDLE detected: %d bytes received", uart_rx_length);
 8005652:	4b17      	ldr	r3, [pc, #92]	@ (80056b0 <USER_UART_IDLECallback+0x10c>)
 8005654:	881b      	ldrh	r3, [r3, #0]
 8005656:	b29b      	uxth	r3, r3
 8005658:	461a      	mov	r2, r3
 800565a:	4918      	ldr	r1, [pc, #96]	@ (80056bc <USER_UART_IDLECallback+0x118>)
 800565c:	2001      	movs	r0, #1
 800565e:	f7ff faef 	bl	8004c40 <LOGGER_SendFormatted>
      }
      
      // 첫 몇 바이트 확인 (디버깅용)
      if (uart_rx_length >= 4) {
 8005662:	4b13      	ldr	r3, [pc, #76]	@ (80056b0 <USER_UART_IDLECallback+0x10c>)
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	b29b      	uxth	r3, r3
 8005668:	2b03      	cmp	r3, #3
 800566a:	d912      	bls.n	8005692 <USER_UART_IDLECallback+0xee>
        LOG_DEBUG("[DMA] First 4 bytes: %02X %02X %02X %02X", 
 800566c:	4b14      	ldr	r3, [pc, #80]	@ (80056c0 <USER_UART_IDLECallback+0x11c>)
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	4619      	mov	r1, r3
 8005672:	4b13      	ldr	r3, [pc, #76]	@ (80056c0 <USER_UART_IDLECallback+0x11c>)
 8005674:	785b      	ldrb	r3, [r3, #1]
 8005676:	4618      	mov	r0, r3
 8005678:	4b11      	ldr	r3, [pc, #68]	@ (80056c0 <USER_UART_IDLECallback+0x11c>)
 800567a:	789b      	ldrb	r3, [r3, #2]
 800567c:	461a      	mov	r2, r3
 800567e:	4b10      	ldr	r3, [pc, #64]	@ (80056c0 <USER_UART_IDLECallback+0x11c>)
 8005680:	78db      	ldrb	r3, [r3, #3]
 8005682:	9301      	str	r3, [sp, #4]
 8005684:	9200      	str	r2, [sp, #0]
 8005686:	4603      	mov	r3, r0
 8005688:	460a      	mov	r2, r1
 800568a:	490e      	ldr	r1, [pc, #56]	@ (80056c4 <USER_UART_IDLECallback+0x120>)
 800568c:	2000      	movs	r0, #0
 800568e:	f7ff fad7 	bl	8004c40 <LOGGER_SendFormatted>
                  rx_buffer[0], rx_buffer[1], rx_buffer[2], rx_buffer[3]);
      }
      
      // DMA 중지 (일반 모드에서는 자동으로 완료됨)
      HAL_UART_DMAStop(huart);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f009 fddd 	bl	800f252 <HAL_UART_DMAStop>
      // 다음 수신을 위해 즉시 재시작하지 않음 - uart_stm32.c에서 처리
    } else {
      LOG_DEBUG("[DMA] IDLE detected but no data");
    }
  }
}
 8005698:	e003      	b.n	80056a2 <USER_UART_IDLECallback+0xfe>
      LOG_DEBUG("[DMA] IDLE detected but no data");
 800569a:	490b      	ldr	r1, [pc, #44]	@ (80056c8 <USER_UART_IDLECallback+0x124>)
 800569c:	2000      	movs	r0, #0
 800569e:	f7ff facf 	bl	8004c40 <LOGGER_SendFormatted>
}
 80056a2:	bf00      	nop
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	40011400 	.word	0x40011400
 80056b0:	20001f94 	.word	0x20001f94
 80056b4:	20001f92 	.word	0x20001f92
 80056b8:	0801e810 	.word	0x0801e810
 80056bc:	0801e850 	.word	0x0801e850
 80056c0:	20001f98 	.word	0x20001f98
 80056c4:	0801e878 	.word	0x0801e878
 80056c8:	0801e8a4 	.word	0x0801e8a4

080056cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80056cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005704 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80056d0:	f7ff fa3a 	bl	8004b48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80056d4:	480c      	ldr	r0, [pc, #48]	@ (8005708 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80056d6:	490d      	ldr	r1, [pc, #52]	@ (800570c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80056d8:	4a0d      	ldr	r2, [pc, #52]	@ (8005710 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80056da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80056dc:	e002      	b.n	80056e4 <LoopCopyDataInit>

080056de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80056de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80056e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80056e2:	3304      	adds	r3, #4

080056e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80056e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80056e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80056e8:	d3f9      	bcc.n	80056de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80056ea:	4a0a      	ldr	r2, [pc, #40]	@ (8005714 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80056ec:	4c0a      	ldr	r4, [pc, #40]	@ (8005718 <LoopFillZerobss+0x22>)
  movs r3, #0
 80056ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80056f0:	e001      	b.n	80056f6 <LoopFillZerobss>

080056f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80056f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80056f4:	3204      	adds	r2, #4

080056f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80056f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80056f8:	d3fb      	bcc.n	80056f2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80056fa:	f015 fee5 	bl	801b4c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80056fe:	f7fc f88f 	bl	8001820 <main>
  bx  lr    
 8005702:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005704:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800570c:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8005710:	0801ed68 	.word	0x0801ed68
  ldr r2, =_sbss
 8005714:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8005718:	2000aeb0 	.word	0x2000aeb0

0800571c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800571c:	e7fe      	b.n	800571c <ADC_IRQHandler>

0800571e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005722:	2003      	movs	r0, #3
 8005724:	f000 fb91 	bl	8005e4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005728:	2000      	movs	r0, #0
 800572a:	f7ff f8f7 	bl	800491c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800572e:	f7fe f859 	bl	80037e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	bd80      	pop	{r7, pc}

08005738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005738:	b480      	push	{r7}
 800573a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800573c:	4b06      	ldr	r3, [pc, #24]	@ (8005758 <HAL_IncTick+0x20>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	461a      	mov	r2, r3
 8005742:	4b06      	ldr	r3, [pc, #24]	@ (800575c <HAL_IncTick+0x24>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4413      	add	r3, r2
 8005748:	4a04      	ldr	r2, [pc, #16]	@ (800575c <HAL_IncTick+0x24>)
 800574a:	6013      	str	r3, [r2, #0]
}
 800574c:	bf00      	nop
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	20000068 	.word	0x20000068
 800575c:	2000219c 	.word	0x2000219c

08005760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005760:	b480      	push	{r7}
 8005762:	af00      	add	r7, sp, #0
  return uwTick;
 8005764:	4b03      	ldr	r3, [pc, #12]	@ (8005774 <HAL_GetTick+0x14>)
 8005766:	681b      	ldr	r3, [r3, #0]
}
 8005768:	4618      	mov	r0, r3
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	2000219c 	.word	0x2000219c

08005778 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005780:	f7ff ffee 	bl	8005760 <HAL_GetTick>
 8005784:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005790:	d005      	beq.n	800579e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005792:	4b0a      	ldr	r3, [pc, #40]	@ (80057bc <HAL_Delay+0x44>)
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	461a      	mov	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4413      	add	r3, r2
 800579c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800579e:	bf00      	nop
 80057a0:	f7ff ffde 	bl	8005760 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d8f7      	bhi.n	80057a0 <HAL_Delay+0x28>
  {
  }
}
 80057b0:	bf00      	nop
 80057b2:	bf00      	nop
 80057b4:	3710      	adds	r7, #16
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	20000068 	.word	0x20000068

080057c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80057c8:	2300      	movs	r3, #0
 80057ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e031      	b.n	800583a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d109      	bne.n	80057f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7fe f828 	bl	8003834 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f6:	f003 0310 	and.w	r3, r3, #16
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d116      	bne.n	800582c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005802:	4b10      	ldr	r3, [pc, #64]	@ (8005844 <HAL_ADC_Init+0x84>)
 8005804:	4013      	ands	r3, r2
 8005806:	f043 0202 	orr.w	r2, r3, #2
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f974 	bl	8005afc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800581e:	f023 0303 	bic.w	r3, r3, #3
 8005822:	f043 0201 	orr.w	r2, r3, #1
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	641a      	str	r2, [r3, #64]	@ 0x40
 800582a:	e001      	b.n	8005830 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005838:	7bfb      	ldrb	r3, [r7, #15]
}
 800583a:	4618      	mov	r0, r3
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	ffffeefd 	.word	0xffffeefd

08005848 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005852:	2300      	movs	r3, #0
 8005854:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800585c:	2b01      	cmp	r3, #1
 800585e:	d101      	bne.n	8005864 <HAL_ADC_ConfigChannel+0x1c>
 8005860:	2302      	movs	r3, #2
 8005862:	e13a      	b.n	8005ada <HAL_ADC_ConfigChannel+0x292>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2b09      	cmp	r3, #9
 8005872:	d93a      	bls.n	80058ea <HAL_ADC_ConfigChannel+0xa2>
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800587c:	d035      	beq.n	80058ea <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68d9      	ldr	r1, [r3, #12]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	b29b      	uxth	r3, r3
 800588a:	461a      	mov	r2, r3
 800588c:	4613      	mov	r3, r2
 800588e:	005b      	lsls	r3, r3, #1
 8005890:	4413      	add	r3, r2
 8005892:	3b1e      	subs	r3, #30
 8005894:	2207      	movs	r2, #7
 8005896:	fa02 f303 	lsl.w	r3, r2, r3
 800589a:	43da      	mvns	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	400a      	ands	r2, r1
 80058a2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a8f      	ldr	r2, [pc, #572]	@ (8005ae8 <HAL_ADC_ConfigChannel+0x2a0>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d10a      	bne.n	80058c4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68d9      	ldr	r1, [r3, #12]
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	061a      	lsls	r2, r3, #24
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80058c2:	e039      	b.n	8005938 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68d9      	ldr	r1, [r3, #12]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	689a      	ldr	r2, [r3, #8]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	4618      	mov	r0, r3
 80058d6:	4603      	mov	r3, r0
 80058d8:	005b      	lsls	r3, r3, #1
 80058da:	4403      	add	r3, r0
 80058dc:	3b1e      	subs	r3, #30
 80058de:	409a      	lsls	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	430a      	orrs	r2, r1
 80058e6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80058e8:	e026      	b.n	8005938 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6919      	ldr	r1, [r3, #16]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	461a      	mov	r2, r3
 80058f8:	4613      	mov	r3, r2
 80058fa:	005b      	lsls	r3, r3, #1
 80058fc:	4413      	add	r3, r2
 80058fe:	f003 031f 	and.w	r3, r3, #31
 8005902:	2207      	movs	r2, #7
 8005904:	fa02 f303 	lsl.w	r3, r2, r3
 8005908:	43da      	mvns	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	400a      	ands	r2, r1
 8005910:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	6919      	ldr	r1, [r3, #16]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	689a      	ldr	r2, [r3, #8]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	b29b      	uxth	r3, r3
 8005922:	4618      	mov	r0, r3
 8005924:	4603      	mov	r3, r0
 8005926:	005b      	lsls	r3, r3, #1
 8005928:	4403      	add	r3, r0
 800592a:	f003 031f 	and.w	r3, r3, #31
 800592e:	409a      	lsls	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	430a      	orrs	r2, r1
 8005936:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	2b06      	cmp	r3, #6
 800593e:	d824      	bhi.n	800598a <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	4613      	mov	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4413      	add	r3, r2
 8005950:	3b05      	subs	r3, #5
 8005952:	221f      	movs	r2, #31
 8005954:	fa02 f303 	lsl.w	r3, r2, r3
 8005958:	43da      	mvns	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	400a      	ands	r2, r1
 8005960:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	b29b      	uxth	r3, r3
 800596e:	4618      	mov	r0, r3
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	4613      	mov	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	3b05      	subs	r3, #5
 800597c:	fa00 f203 	lsl.w	r2, r0, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	430a      	orrs	r2, r1
 8005986:	635a      	str	r2, [r3, #52]	@ 0x34
 8005988:	e04c      	b.n	8005a24 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	2b0c      	cmp	r3, #12
 8005990:	d824      	bhi.n	80059dc <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	4613      	mov	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4413      	add	r3, r2
 80059a2:	3b23      	subs	r3, #35	@ 0x23
 80059a4:	221f      	movs	r2, #31
 80059a6:	fa02 f303 	lsl.w	r3, r2, r3
 80059aa:	43da      	mvns	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	400a      	ands	r2, r1
 80059b2:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	b29b      	uxth	r3, r3
 80059c0:	4618      	mov	r0, r3
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	4613      	mov	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4413      	add	r3, r2
 80059cc:	3b23      	subs	r3, #35	@ 0x23
 80059ce:	fa00 f203 	lsl.w	r2, r0, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	430a      	orrs	r2, r1
 80059d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80059da:	e023      	b.n	8005a24 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	4613      	mov	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4413      	add	r3, r2
 80059ec:	3b41      	subs	r3, #65	@ 0x41
 80059ee:	221f      	movs	r2, #31
 80059f0:	fa02 f303 	lsl.w	r3, r2, r3
 80059f4:	43da      	mvns	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	400a      	ands	r2, r1
 80059fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	4613      	mov	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	3b41      	subs	r3, #65	@ 0x41
 8005a18:	fa00 f203 	lsl.w	r2, r0, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	430a      	orrs	r2, r1
 8005a22:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a30      	ldr	r2, [pc, #192]	@ (8005aec <HAL_ADC_ConfigChannel+0x2a4>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d10a      	bne.n	8005a44 <HAL_ADC_ConfigChannel+0x1fc>
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a36:	d105      	bne.n	8005a44 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005a38:	4b2d      	ldr	r3, [pc, #180]	@ (8005af0 <HAL_ADC_ConfigChannel+0x2a8>)
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	4a2c      	ldr	r2, [pc, #176]	@ (8005af0 <HAL_ADC_ConfigChannel+0x2a8>)
 8005a3e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005a42:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a28      	ldr	r2, [pc, #160]	@ (8005aec <HAL_ADC_ConfigChannel+0x2a4>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d10f      	bne.n	8005a6e <HAL_ADC_ConfigChannel+0x226>
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2b12      	cmp	r3, #18
 8005a54:	d10b      	bne.n	8005a6e <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8005a56:	4b26      	ldr	r3, [pc, #152]	@ (8005af0 <HAL_ADC_ConfigChannel+0x2a8>)
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	4a25      	ldr	r2, [pc, #148]	@ (8005af0 <HAL_ADC_ConfigChannel+0x2a8>)
 8005a5c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005a60:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005a62:	4b23      	ldr	r3, [pc, #140]	@ (8005af0 <HAL_ADC_ConfigChannel+0x2a8>)
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	4a22      	ldr	r2, [pc, #136]	@ (8005af0 <HAL_ADC_ConfigChannel+0x2a8>)
 8005a68:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005a6c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a1e      	ldr	r2, [pc, #120]	@ (8005aec <HAL_ADC_ConfigChannel+0x2a4>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d12b      	bne.n	8005ad0 <HAL_ADC_ConfigChannel+0x288>
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a1a      	ldr	r2, [pc, #104]	@ (8005ae8 <HAL_ADC_ConfigChannel+0x2a0>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d003      	beq.n	8005a8a <HAL_ADC_ConfigChannel+0x242>
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2b11      	cmp	r3, #17
 8005a88:	d122      	bne.n	8005ad0 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8005a8a:	4b19      	ldr	r3, [pc, #100]	@ (8005af0 <HAL_ADC_ConfigChannel+0x2a8>)
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	4a18      	ldr	r2, [pc, #96]	@ (8005af0 <HAL_ADC_ConfigChannel+0x2a8>)
 8005a90:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8005a94:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005a96:	4b16      	ldr	r3, [pc, #88]	@ (8005af0 <HAL_ADC_ConfigChannel+0x2a8>)
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	4a15      	ldr	r2, [pc, #84]	@ (8005af0 <HAL_ADC_ConfigChannel+0x2a8>)
 8005a9c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005aa0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a10      	ldr	r2, [pc, #64]	@ (8005ae8 <HAL_ADC_ConfigChannel+0x2a0>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d111      	bne.n	8005ad0 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005aac:	4b11      	ldr	r3, [pc, #68]	@ (8005af4 <HAL_ADC_ConfigChannel+0x2ac>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a11      	ldr	r2, [pc, #68]	@ (8005af8 <HAL_ADC_ConfigChannel+0x2b0>)
 8005ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab6:	0c9a      	lsrs	r2, r3, #18
 8005ab8:	4613      	mov	r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	005b      	lsls	r3, r3, #1
 8005ac0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005ac2:	e002      	b.n	8005aca <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1f9      	bne.n	8005ac4 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	10000012 	.word	0x10000012
 8005aec:	40012000 	.word	0x40012000
 8005af0:	40012300 	.word	0x40012300
 8005af4:	20000018 	.word	0x20000018
 8005af8:	431bde83 	.word	0x431bde83

08005afc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005b04:	4b78      	ldr	r3, [pc, #480]	@ (8005ce8 <ADC_Init+0x1ec>)
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	4a77      	ldr	r2, [pc, #476]	@ (8005ce8 <ADC_Init+0x1ec>)
 8005b0a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8005b0e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005b10:	4b75      	ldr	r3, [pc, #468]	@ (8005ce8 <ADC_Init+0x1ec>)
 8005b12:	685a      	ldr	r2, [r3, #4]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	4973      	ldr	r1, [pc, #460]	@ (8005ce8 <ADC_Init+0x1ec>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	6859      	ldr	r1, [r3, #4]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	021a      	lsls	r2, r3, #8
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005b50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	6859      	ldr	r1, [r3, #4]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689a      	ldr	r2, [r3, #8]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	430a      	orrs	r2, r1
 8005b62:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689a      	ldr	r2, [r3, #8]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	6899      	ldr	r1, [r3, #8]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68da      	ldr	r2, [r3, #12]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	430a      	orrs	r2, r1
 8005b84:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b8a:	4a58      	ldr	r2, [pc, #352]	@ (8005cec <ADC_Init+0x1f0>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d022      	beq.n	8005bd6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	689a      	ldr	r2, [r3, #8]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005b9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6899      	ldr	r1, [r3, #8]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005bc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	6899      	ldr	r1, [r3, #8]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	609a      	str	r2, [r3, #8]
 8005bd4:	e00f      	b.n	8005bf6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	689a      	ldr	r2, [r3, #8]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005be4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	689a      	ldr	r2, [r3, #8]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005bf4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	689a      	ldr	r2, [r3, #8]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f022 0202 	bic.w	r2, r2, #2
 8005c04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	6899      	ldr	r1, [r3, #8]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	005a      	lsls	r2, r3, #1
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	430a      	orrs	r2, r1
 8005c18:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d01b      	beq.n	8005c5c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	685a      	ldr	r2, [r3, #4]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c32:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005c42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6859      	ldr	r1, [r3, #4]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	035a      	lsls	r2, r3, #13
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	430a      	orrs	r2, r1
 8005c58:	605a      	str	r2, [r3, #4]
 8005c5a:	e007      	b.n	8005c6c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005c7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	3b01      	subs	r3, #1
 8005c88:	051a      	lsls	r2, r3, #20
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689a      	ldr	r2, [r3, #8]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005ca0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6899      	ldr	r1, [r3, #8]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005cae:	025a      	lsls	r2, r3, #9
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	689a      	ldr	r2, [r3, #8]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6899      	ldr	r1, [r3, #8]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	029a      	lsls	r2, r3, #10
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	609a      	str	r2, [r3, #8]
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr
 8005ce8:	40012300 	.word	0x40012300
 8005cec:	0f000001 	.word	0x0f000001

08005cf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f003 0307 	and.w	r3, r3, #7
 8005cfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d00:	4b0b      	ldr	r3, [pc, #44]	@ (8005d30 <__NVIC_SetPriorityGrouping+0x40>)
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005d18:	4b06      	ldr	r3, [pc, #24]	@ (8005d34 <__NVIC_SetPriorityGrouping+0x44>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d1e:	4a04      	ldr	r2, [pc, #16]	@ (8005d30 <__NVIC_SetPriorityGrouping+0x40>)
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	60d3      	str	r3, [r2, #12]
}
 8005d24:	bf00      	nop
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr
 8005d30:	e000ed00 	.word	0xe000ed00
 8005d34:	05fa0000 	.word	0x05fa0000

08005d38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d3c:	4b04      	ldr	r3, [pc, #16]	@ (8005d50 <__NVIC_GetPriorityGrouping+0x18>)
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	0a1b      	lsrs	r3, r3, #8
 8005d42:	f003 0307 	and.w	r3, r3, #7
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr
 8005d50:	e000ed00 	.word	0xe000ed00

08005d54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	db0b      	blt.n	8005d7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d66:	79fb      	ldrb	r3, [r7, #7]
 8005d68:	f003 021f 	and.w	r2, r3, #31
 8005d6c:	4907      	ldr	r1, [pc, #28]	@ (8005d8c <__NVIC_EnableIRQ+0x38>)
 8005d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d72:	095b      	lsrs	r3, r3, #5
 8005d74:	2001      	movs	r0, #1
 8005d76:	fa00 f202 	lsl.w	r2, r0, r2
 8005d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005d7e:	bf00      	nop
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	e000e100 	.word	0xe000e100

08005d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	4603      	mov	r3, r0
 8005d98:	6039      	str	r1, [r7, #0]
 8005d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	db0a      	blt.n	8005dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	490c      	ldr	r1, [pc, #48]	@ (8005ddc <__NVIC_SetPriority+0x4c>)
 8005daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dae:	0112      	lsls	r2, r2, #4
 8005db0:	b2d2      	uxtb	r2, r2
 8005db2:	440b      	add	r3, r1
 8005db4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005db8:	e00a      	b.n	8005dd0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	4908      	ldr	r1, [pc, #32]	@ (8005de0 <__NVIC_SetPriority+0x50>)
 8005dc0:	79fb      	ldrb	r3, [r7, #7]
 8005dc2:	f003 030f 	and.w	r3, r3, #15
 8005dc6:	3b04      	subs	r3, #4
 8005dc8:	0112      	lsls	r2, r2, #4
 8005dca:	b2d2      	uxtb	r2, r2
 8005dcc:	440b      	add	r3, r1
 8005dce:	761a      	strb	r2, [r3, #24]
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	e000e100 	.word	0xe000e100
 8005de0:	e000ed00 	.word	0xe000ed00

08005de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b089      	sub	sp, #36	@ 0x24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f003 0307 	and.w	r3, r3, #7
 8005df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	f1c3 0307 	rsb	r3, r3, #7
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	bf28      	it	cs
 8005e02:	2304      	movcs	r3, #4
 8005e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	3304      	adds	r3, #4
 8005e0a:	2b06      	cmp	r3, #6
 8005e0c:	d902      	bls.n	8005e14 <NVIC_EncodePriority+0x30>
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	3b03      	subs	r3, #3
 8005e12:	e000      	b.n	8005e16 <NVIC_EncodePriority+0x32>
 8005e14:	2300      	movs	r3, #0
 8005e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e18:	f04f 32ff 	mov.w	r2, #4294967295
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e22:	43da      	mvns	r2, r3
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	401a      	ands	r2, r3
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	fa01 f303 	lsl.w	r3, r1, r3
 8005e36:	43d9      	mvns	r1, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e3c:	4313      	orrs	r3, r2
         );
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3724      	adds	r7, #36	@ 0x24
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b082      	sub	sp, #8
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7ff ff4c 	bl	8005cf0 <__NVIC_SetPriorityGrouping>
}
 8005e58:	bf00      	nop
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	4603      	mov	r3, r0
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
 8005e6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005e72:	f7ff ff61 	bl	8005d38 <__NVIC_GetPriorityGrouping>
 8005e76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	68b9      	ldr	r1, [r7, #8]
 8005e7c:	6978      	ldr	r0, [r7, #20]
 8005e7e:	f7ff ffb1 	bl	8005de4 <NVIC_EncodePriority>
 8005e82:	4602      	mov	r2, r0
 8005e84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e88:	4611      	mov	r1, r2
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7ff ff80 	bl	8005d90 <__NVIC_SetPriority>
}
 8005e90:	bf00      	nop
 8005e92:	3718      	adds	r7, #24
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7ff ff54 	bl	8005d54 <__NVIC_EnableIRQ>
}
 8005eac:	bf00      	nop
 8005eae:	3708      	adds	r7, #8
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e054      	b.n	8005f70 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	7f5b      	ldrb	r3, [r3, #29]
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d105      	bne.n	8005edc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7fd fd06 	bl	80038e8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2202      	movs	r2, #2
 8005ee0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	791b      	ldrb	r3, [r3, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d10c      	bne.n	8005f04 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a22      	ldr	r2, [pc, #136]	@ (8005f78 <HAL_CRC_Init+0xc4>)
 8005ef0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	689a      	ldr	r2, [r3, #8]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f022 0218 	bic.w	r2, r2, #24
 8005f00:	609a      	str	r2, [r3, #8]
 8005f02:	e00c      	b.n	8005f1e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6899      	ldr	r1, [r3, #8]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 f834 	bl	8005f7c <HAL_CRCEx_Polynomial_Set>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d001      	beq.n	8005f1e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e028      	b.n	8005f70 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	795b      	ldrb	r3, [r3, #5]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d105      	bne.n	8005f32 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f2e:	611a      	str	r2, [r3, #16]
 8005f30:	e004      	b.n	8005f3c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	6912      	ldr	r2, [r2, #16]
 8005f3a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	695a      	ldr	r2, [r3, #20]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	699a      	ldr	r2, [r3, #24]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	430a      	orrs	r2, r1
 8005f66:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3708      	adds	r7, #8
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	04c11db7 	.word	0x04c11db7

08005f7c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005f8c:	231f      	movs	r3, #31
 8005f8e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d102      	bne.n	8005fa0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	75fb      	strb	r3, [r7, #23]
 8005f9e:	e063      	b.n	8006068 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005fa0:	bf00      	nop
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	1e5a      	subs	r2, r3, #1
 8005fa6:	613a      	str	r2, [r7, #16]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d009      	beq.n	8005fc0 <HAL_CRCEx_Polynomial_Set+0x44>
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f003 031f 	and.w	r3, r3, #31
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8005fb8:	f003 0301 	and.w	r3, r3, #1
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d0f0      	beq.n	8005fa2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b18      	cmp	r3, #24
 8005fc4:	d846      	bhi.n	8006054 <HAL_CRCEx_Polynomial_Set+0xd8>
 8005fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8005fcc <HAL_CRCEx_Polynomial_Set+0x50>)
 8005fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fcc:	0800605b 	.word	0x0800605b
 8005fd0:	08006055 	.word	0x08006055
 8005fd4:	08006055 	.word	0x08006055
 8005fd8:	08006055 	.word	0x08006055
 8005fdc:	08006055 	.word	0x08006055
 8005fe0:	08006055 	.word	0x08006055
 8005fe4:	08006055 	.word	0x08006055
 8005fe8:	08006055 	.word	0x08006055
 8005fec:	08006049 	.word	0x08006049
 8005ff0:	08006055 	.word	0x08006055
 8005ff4:	08006055 	.word	0x08006055
 8005ff8:	08006055 	.word	0x08006055
 8005ffc:	08006055 	.word	0x08006055
 8006000:	08006055 	.word	0x08006055
 8006004:	08006055 	.word	0x08006055
 8006008:	08006055 	.word	0x08006055
 800600c:	0800603d 	.word	0x0800603d
 8006010:	08006055 	.word	0x08006055
 8006014:	08006055 	.word	0x08006055
 8006018:	08006055 	.word	0x08006055
 800601c:	08006055 	.word	0x08006055
 8006020:	08006055 	.word	0x08006055
 8006024:	08006055 	.word	0x08006055
 8006028:	08006055 	.word	0x08006055
 800602c:	08006031 	.word	0x08006031
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	2b06      	cmp	r3, #6
 8006034:	d913      	bls.n	800605e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800603a:	e010      	b.n	800605e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	2b07      	cmp	r3, #7
 8006040:	d90f      	bls.n	8006062 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006046:	e00c      	b.n	8006062 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	2b0f      	cmp	r3, #15
 800604c:	d90b      	bls.n	8006066 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006052:	e008      	b.n	8006066 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	75fb      	strb	r3, [r7, #23]
        break;
 8006058:	e006      	b.n	8006068 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800605a:	bf00      	nop
 800605c:	e004      	b.n	8006068 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800605e:	bf00      	nop
 8006060:	e002      	b.n	8006068 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006062:	bf00      	nop
 8006064:	e000      	b.n	8006068 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006066:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8006068:	7dfb      	ldrb	r3, [r7, #23]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10d      	bne.n	800608a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f023 0118 	bic.w	r1, r3, #24
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	430a      	orrs	r2, r1
 8006088:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800608a:	7dfb      	ldrb	r3, [r7, #23]
}
 800608c:	4618      	mov	r0, r3
 800608e:	371c      	adds	r7, #28
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d101      	bne.n	80060aa <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e069      	b.n	800617e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d102      	bne.n	80060bc <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7fd fc36 	bl	8003928 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2202      	movs	r2, #2
 80060c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d002      	beq.n	80060d2 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	6819      	ldr	r1, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	4b2a      	ldr	r3, [pc, #168]	@ (8006188 <HAL_DCMI_Init+0xf0>)
 80060de:	400b      	ands	r3, r1
 80060e0:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6819      	ldr	r1, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685a      	ldr	r2, [r3, #4]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	695b      	ldr	r3, [r3, #20]
 80060f0:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80060f6:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006102:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800610e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006114:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800611a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006120:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006126:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	430a      	orrs	r2, r1
 800612e:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	2b10      	cmp	r3, #16
 8006136:	d112      	bne.n	800615e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	7f1b      	ldrb	r3, [r3, #28]
 800613c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	7f5b      	ldrb	r3, [r3, #29]
 8006142:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006144:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	7f9b      	ldrb	r3, [r3, #30]
 800614a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800614c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	7fdb      	ldrb	r3, [r3, #31]
 8006154:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800615a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800615c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68da      	ldr	r2, [r3, #12]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f042 021e 	orr.w	r2, r2, #30
 800616c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3708      	adds	r7, #8
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	ffe0f007 	.word	0xffe0f007

0800618c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b086      	sub	sp, #24
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006194:	2300      	movs	r3, #0
 8006196:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006198:	f7ff fae2 	bl	8005760 <HAL_GetTick>
 800619c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d101      	bne.n	80061a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e099      	b.n	80062dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2202      	movs	r2, #2
 80061ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f022 0201 	bic.w	r2, r2, #1
 80061c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80061c8:	e00f      	b.n	80061ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80061ca:	f7ff fac9 	bl	8005760 <HAL_GetTick>
 80061ce:	4602      	mov	r2, r0
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	2b05      	cmp	r3, #5
 80061d6:	d908      	bls.n	80061ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2220      	movs	r2, #32
 80061dc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2203      	movs	r2, #3
 80061e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e078      	b.n	80062dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0301 	and.w	r3, r3, #1
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1e8      	bne.n	80061ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	4b38      	ldr	r3, [pc, #224]	@ (80062e4 <HAL_DMA_Init+0x158>)
 8006204:	4013      	ands	r3, r2
 8006206:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006216:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006222:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800622e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a1b      	ldr	r3, [r3, #32]
 8006234:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	4313      	orrs	r3, r2
 800623a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006240:	2b04      	cmp	r3, #4
 8006242:	d107      	bne.n	8006254 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800624c:	4313      	orrs	r3, r2
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	4313      	orrs	r3, r2
 8006252:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	f023 0307 	bic.w	r3, r3, #7
 800626a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	4313      	orrs	r3, r2
 8006274:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800627a:	2b04      	cmp	r3, #4
 800627c:	d117      	bne.n	80062ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	4313      	orrs	r3, r2
 8006286:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00e      	beq.n	80062ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 fb73 	bl	800697c <DMA_CheckFifoParam>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d008      	beq.n	80062ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2240      	movs	r2, #64	@ 0x40
 80062a0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80062aa:	2301      	movs	r3, #1
 80062ac:	e016      	b.n	80062dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fb2a 	bl	8006910 <DMA_CalcBaseAndBitshift>
 80062bc:	4603      	mov	r3, r0
 80062be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062c4:	223f      	movs	r2, #63	@ 0x3f
 80062c6:	409a      	lsls	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3718      	adds	r7, #24
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	f010803f 	.word	0xf010803f

080062e8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e050      	b.n	800639c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b02      	cmp	r3, #2
 8006304:	d101      	bne.n	800630a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006306:	2302      	movs	r3, #2
 8006308:	e048      	b.n	800639c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f022 0201 	bic.w	r2, r2, #1
 8006318:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2200      	movs	r2, #0
 8006320:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2200      	movs	r2, #0
 8006328:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2200      	movs	r2, #0
 8006330:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2200      	movs	r2, #0
 8006338:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2200      	movs	r2, #0
 8006340:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2221      	movs	r2, #33	@ 0x21
 8006348:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fae0 	bl	8006910 <DMA_CalcBaseAndBitshift>
 8006350:	4603      	mov	r3, r0
 8006352:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006358:	223f      	movs	r2, #63	@ 0x3f
 800635a:	409a      	lsls	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3710      	adds	r7, #16
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
 80063b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063b2:	2300      	movs	r3, #0
 80063b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d101      	bne.n	80063ca <HAL_DMA_Start_IT+0x26>
 80063c6:	2302      	movs	r3, #2
 80063c8:	e048      	b.n	800645c <HAL_DMA_Start_IT+0xb8>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d137      	bne.n	800644e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2202      	movs	r2, #2
 80063e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	68b9      	ldr	r1, [r7, #8]
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f000 fa5e 	bl	80068b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063fc:	223f      	movs	r2, #63	@ 0x3f
 80063fe:	409a      	lsls	r2, r3
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f042 0216 	orr.w	r2, r2, #22
 8006412:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	695a      	ldr	r2, [r3, #20]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006422:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006428:	2b00      	cmp	r3, #0
 800642a:	d007      	beq.n	800643c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f042 0208 	orr.w	r2, r2, #8
 800643a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f042 0201 	orr.w	r2, r2, #1
 800644a:	601a      	str	r2, [r3, #0]
 800644c:	e005      	b.n	800645a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006456:	2302      	movs	r3, #2
 8006458:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800645a:	7dfb      	ldrb	r3, [r7, #23]
}
 800645c:	4618      	mov	r0, r3
 800645e:	3718      	adds	r7, #24
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006470:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006472:	f7ff f975 	bl	8005760 <HAL_GetTick>
 8006476:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800647e:	b2db      	uxtb	r3, r3
 8006480:	2b02      	cmp	r3, #2
 8006482:	d008      	beq.n	8006496 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2280      	movs	r2, #128	@ 0x80
 8006488:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e052      	b.n	800653c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f022 0216 	bic.w	r2, r2, #22
 80064a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	695a      	ldr	r2, [r3, #20]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80064b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d103      	bne.n	80064c6 <HAL_DMA_Abort+0x62>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d007      	beq.n	80064d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f022 0208 	bic.w	r2, r2, #8
 80064d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f022 0201 	bic.w	r2, r2, #1
 80064e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80064e6:	e013      	b.n	8006510 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80064e8:	f7ff f93a 	bl	8005760 <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	2b05      	cmp	r3, #5
 80064f4:	d90c      	bls.n	8006510 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2220      	movs	r2, #32
 80064fa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2203      	movs	r2, #3
 8006500:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e015      	b.n	800653c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1e4      	bne.n	80064e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006522:	223f      	movs	r2, #63	@ 0x3f
 8006524:	409a      	lsls	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2201      	movs	r2, #1
 800652e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006552:	b2db      	uxtb	r3, r3
 8006554:	2b02      	cmp	r3, #2
 8006556:	d004      	beq.n	8006562 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2280      	movs	r2, #128	@ 0x80
 800655c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e00c      	b.n	800657c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2205      	movs	r2, #5
 8006566:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f022 0201 	bic.w	r2, r2, #1
 8006578:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b086      	sub	sp, #24
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8006590:	2300      	movs	r3, #0
 8006592:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8006594:	4b8e      	ldr	r3, [pc, #568]	@ (80067d0 <HAL_DMA_IRQHandler+0x248>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a8e      	ldr	r2, [pc, #568]	@ (80067d4 <HAL_DMA_IRQHandler+0x24c>)
 800659a:	fba2 2303 	umull	r2, r3, r2, r3
 800659e:	0a9b      	lsrs	r3, r3, #10
 80065a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065b2:	2208      	movs	r2, #8
 80065b4:	409a      	lsls	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	4013      	ands	r3, r2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d01a      	beq.n	80065f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0304 	and.w	r3, r3, #4
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d013      	beq.n	80065f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f022 0204 	bic.w	r2, r2, #4
 80065da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065e0:	2208      	movs	r2, #8
 80065e2:	409a      	lsls	r2, r3
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065ec:	f043 0201 	orr.w	r2, r3, #1
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065f8:	2201      	movs	r2, #1
 80065fa:	409a      	lsls	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	4013      	ands	r3, r2
 8006600:	2b00      	cmp	r3, #0
 8006602:	d012      	beq.n	800662a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00b      	beq.n	800662a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006616:	2201      	movs	r2, #1
 8006618:	409a      	lsls	r2, r3
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006622:	f043 0202 	orr.w	r2, r3, #2
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800662e:	2204      	movs	r2, #4
 8006630:	409a      	lsls	r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	4013      	ands	r3, r2
 8006636:	2b00      	cmp	r3, #0
 8006638:	d012      	beq.n	8006660 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0302 	and.w	r3, r3, #2
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00b      	beq.n	8006660 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800664c:	2204      	movs	r2, #4
 800664e:	409a      	lsls	r2, r3
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006658:	f043 0204 	orr.w	r2, r3, #4
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006664:	2210      	movs	r2, #16
 8006666:	409a      	lsls	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	4013      	ands	r3, r2
 800666c:	2b00      	cmp	r3, #0
 800666e:	d043      	beq.n	80066f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0308 	and.w	r3, r3, #8
 800667a:	2b00      	cmp	r3, #0
 800667c:	d03c      	beq.n	80066f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006682:	2210      	movs	r2, #16
 8006684:	409a      	lsls	r2, r3
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006694:	2b00      	cmp	r3, #0
 8006696:	d018      	beq.n	80066ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d108      	bne.n	80066b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d024      	beq.n	80066f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	4798      	blx	r3
 80066b6:	e01f      	b.n	80066f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d01b      	beq.n	80066f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	4798      	blx	r3
 80066c8:	e016      	b.n	80066f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d107      	bne.n	80066e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f022 0208 	bic.w	r2, r2, #8
 80066e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d003      	beq.n	80066f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066fc:	2220      	movs	r2, #32
 80066fe:	409a      	lsls	r2, r3
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4013      	ands	r3, r2
 8006704:	2b00      	cmp	r3, #0
 8006706:	f000 808f 	beq.w	8006828 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0310 	and.w	r3, r3, #16
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 8087 	beq.w	8006828 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800671e:	2220      	movs	r2, #32
 8006720:	409a      	lsls	r2, r3
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b05      	cmp	r3, #5
 8006730:	d136      	bne.n	80067a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f022 0216 	bic.w	r2, r2, #22
 8006740:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	695a      	ldr	r2, [r3, #20]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006750:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006756:	2b00      	cmp	r3, #0
 8006758:	d103      	bne.n	8006762 <HAL_DMA_IRQHandler+0x1da>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800675e:	2b00      	cmp	r3, #0
 8006760:	d007      	beq.n	8006772 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f022 0208 	bic.w	r2, r2, #8
 8006770:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006776:	223f      	movs	r2, #63	@ 0x3f
 8006778:	409a      	lsls	r2, r3
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006792:	2b00      	cmp	r3, #0
 8006794:	d07e      	beq.n	8006894 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	4798      	blx	r3
        }
        return;
 800679e:	e079      	b.n	8006894 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d01d      	beq.n	80067ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d10d      	bne.n	80067d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d031      	beq.n	8006828 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	4798      	blx	r3
 80067cc:	e02c      	b.n	8006828 <HAL_DMA_IRQHandler+0x2a0>
 80067ce:	bf00      	nop
 80067d0:	20000018 	.word	0x20000018
 80067d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d023      	beq.n	8006828 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	4798      	blx	r3
 80067e8:	e01e      	b.n	8006828 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10f      	bne.n	8006818 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f022 0210 	bic.w	r2, r2, #16
 8006806:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800681c:	2b00      	cmp	r3, #0
 800681e:	d003      	beq.n	8006828 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800682c:	2b00      	cmp	r3, #0
 800682e:	d032      	beq.n	8006896 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006834:	f003 0301 	and.w	r3, r3, #1
 8006838:	2b00      	cmp	r3, #0
 800683a:	d022      	beq.n	8006882 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2205      	movs	r2, #5
 8006840:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f022 0201 	bic.w	r2, r2, #1
 8006852:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	3301      	adds	r3, #1
 8006858:	60bb      	str	r3, [r7, #8]
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	429a      	cmp	r2, r3
 800685e:	d307      	bcc.n	8006870 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1f2      	bne.n	8006854 <HAL_DMA_IRQHandler+0x2cc>
 800686e:	e000      	b.n	8006872 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006870:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2201      	movs	r2, #1
 8006876:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006886:	2b00      	cmp	r3, #0
 8006888:	d005      	beq.n	8006896 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	4798      	blx	r3
 8006892:	e000      	b.n	8006896 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006894:	bf00      	nop
    }
  }
}
 8006896:	3718      	adds	r7, #24
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
 80068c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80068d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	2b40      	cmp	r3, #64	@ 0x40
 80068e0:	d108      	bne.n	80068f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80068f2:	e007      	b.n	8006904 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	60da      	str	r2, [r3, #12]
}
 8006904:	bf00      	nop
 8006906:	3714      	adds	r7, #20
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	b2db      	uxtb	r3, r3
 800691e:	3b10      	subs	r3, #16
 8006920:	4a13      	ldr	r2, [pc, #76]	@ (8006970 <DMA_CalcBaseAndBitshift+0x60>)
 8006922:	fba2 2303 	umull	r2, r3, r2, r3
 8006926:	091b      	lsrs	r3, r3, #4
 8006928:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800692a:	4a12      	ldr	r2, [pc, #72]	@ (8006974 <DMA_CalcBaseAndBitshift+0x64>)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	4413      	add	r3, r2
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	461a      	mov	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2b03      	cmp	r3, #3
 800693c:	d908      	bls.n	8006950 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	461a      	mov	r2, r3
 8006944:	4b0c      	ldr	r3, [pc, #48]	@ (8006978 <DMA_CalcBaseAndBitshift+0x68>)
 8006946:	4013      	ands	r3, r2
 8006948:	1d1a      	adds	r2, r3, #4
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	659a      	str	r2, [r3, #88]	@ 0x58
 800694e:	e006      	b.n	800695e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	461a      	mov	r2, r3
 8006956:	4b08      	ldr	r3, [pc, #32]	@ (8006978 <DMA_CalcBaseAndBitshift+0x68>)
 8006958:	4013      	ands	r3, r2
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006962:	4618      	mov	r0, r3
 8006964:	3714      	adds	r7, #20
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	aaaaaaab 	.word	0xaaaaaaab
 8006974:	0801ec68 	.word	0x0801ec68
 8006978:	fffffc00 	.word	0xfffffc00

0800697c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006984:	2300      	movs	r3, #0
 8006986:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800698c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d11f      	bne.n	80069d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	2b03      	cmp	r3, #3
 800699a:	d856      	bhi.n	8006a4a <DMA_CheckFifoParam+0xce>
 800699c:	a201      	add	r2, pc, #4	@ (adr r2, 80069a4 <DMA_CheckFifoParam+0x28>)
 800699e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a2:	bf00      	nop
 80069a4:	080069b5 	.word	0x080069b5
 80069a8:	080069c7 	.word	0x080069c7
 80069ac:	080069b5 	.word	0x080069b5
 80069b0:	08006a4b 	.word	0x08006a4b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d046      	beq.n	8006a4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069c4:	e043      	b.n	8006a4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80069ce:	d140      	bne.n	8006a52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069d4:	e03d      	b.n	8006a52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069de:	d121      	bne.n	8006a24 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	2b03      	cmp	r3, #3
 80069e4:	d837      	bhi.n	8006a56 <DMA_CheckFifoParam+0xda>
 80069e6:	a201      	add	r2, pc, #4	@ (adr r2, 80069ec <DMA_CheckFifoParam+0x70>)
 80069e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ec:	080069fd 	.word	0x080069fd
 80069f0:	08006a03 	.word	0x08006a03
 80069f4:	080069fd 	.word	0x080069fd
 80069f8:	08006a15 	.word	0x08006a15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006a00:	e030      	b.n	8006a64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d025      	beq.n	8006a5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a12:	e022      	b.n	8006a5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a18:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006a1c:	d11f      	bne.n	8006a5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006a22:	e01c      	b.n	8006a5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d903      	bls.n	8006a32 <DMA_CheckFifoParam+0xb6>
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	2b03      	cmp	r3, #3
 8006a2e:	d003      	beq.n	8006a38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006a30:	e018      	b.n	8006a64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	73fb      	strb	r3, [r7, #15]
      break;
 8006a36:	e015      	b.n	8006a64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00e      	beq.n	8006a62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	73fb      	strb	r3, [r7, #15]
      break;
 8006a48:	e00b      	b.n	8006a62 <DMA_CheckFifoParam+0xe6>
      break;
 8006a4a:	bf00      	nop
 8006a4c:	e00a      	b.n	8006a64 <DMA_CheckFifoParam+0xe8>
      break;
 8006a4e:	bf00      	nop
 8006a50:	e008      	b.n	8006a64 <DMA_CheckFifoParam+0xe8>
      break;
 8006a52:	bf00      	nop
 8006a54:	e006      	b.n	8006a64 <DMA_CheckFifoParam+0xe8>
      break;
 8006a56:	bf00      	nop
 8006a58:	e004      	b.n	8006a64 <DMA_CheckFifoParam+0xe8>
      break;
 8006a5a:	bf00      	nop
 8006a5c:	e002      	b.n	8006a64 <DMA_CheckFifoParam+0xe8>
      break;   
 8006a5e:	bf00      	nop
 8006a60:	e000      	b.n	8006a64 <DMA_CheckFifoParam+0xe8>
      break;
 8006a62:	bf00      	nop
    }
  } 
  
  return status; 
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3714      	adds	r7, #20
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop

08006a74 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d101      	bne.n	8006a86 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e039      	b.n	8006afa <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d106      	bne.n	8006aa0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f7fd f802 	bl	8003aa4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685a      	ldr	r2, [r3, #4]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	430a      	orrs	r2, r1
 8006abc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ac4:	f023 0107 	bic.w	r1, r3, #7
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	689a      	ldr	r2, [r3, #8]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	430a      	orrs	r2, r1
 8006ad2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ada:	4b0a      	ldr	r3, [pc, #40]	@ (8006b04 <HAL_DMA2D_Init+0x90>)
 8006adc:	4013      	ands	r3, r2
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	68d1      	ldr	r1, [r2, #12]
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	6812      	ldr	r2, [r2, #0]
 8006ae6:	430b      	orrs	r3, r1
 8006ae8:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	ffffc000 	.word	0xffffc000

08006b08 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f003 0301 	and.w	r3, r3, #1
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d026      	beq.n	8006b78 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d021      	beq.n	8006b78 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006b42:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b48:	f043 0201 	orr.w	r2, r3, #1
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2201      	movs	r2, #1
 8006b56:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2204      	movs	r2, #4
 8006b5c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	695b      	ldr	r3, [r3, #20]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d003      	beq.n	8006b78 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	695b      	ldr	r3, [r3, #20]
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f003 0320 	and.w	r3, r3, #32
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d026      	beq.n	8006bd0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d021      	beq.n	8006bd0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006b9a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ba8:	f043 0202 	orr.w	r2, r3, #2
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2204      	movs	r2, #4
 8006bb4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	695b      	ldr	r3, [r3, #20]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d003      	beq.n	8006bd0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	695b      	ldr	r3, [r3, #20]
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f003 0308 	and.w	r3, r3, #8
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d026      	beq.n	8006c28 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d021      	beq.n	8006c28 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006bf2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2208      	movs	r2, #8
 8006bfa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c00:	f043 0204 	orr.w	r2, r3, #4
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2204      	movs	r2, #4
 8006c0c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	695b      	ldr	r3, [r3, #20]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d003      	beq.n	8006c28 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	695b      	ldr	r3, [r3, #20]
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f003 0304 	and.w	r3, r3, #4
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d013      	beq.n	8006c5a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d00e      	beq.n	8006c5a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c4a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2204      	movs	r2, #4
 8006c52:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f853 	bl	8006d00 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f003 0302 	and.w	r3, r3, #2
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d024      	beq.n	8006cae <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d01f      	beq.n	8006cae <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006c7c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2202      	movs	r2, #2
 8006c84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2201      	movs	r2, #1
 8006c92:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d003      	beq.n	8006cae <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f003 0310 	and.w	r3, r3, #16
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d01f      	beq.n	8006cf8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d01a      	beq.n	8006cf8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006cd0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2210      	movs	r2, #16
 8006cd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f80e 	bl	8006d14 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8006cf8:	bf00      	nop
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b087      	sub	sp, #28
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d101      	bne.n	8006d48 <HAL_DMA2D_ConfigLayer+0x20>
 8006d44:	2302      	movs	r3, #2
 8006d46:	e079      	b.n	8006e3c <HAL_DMA2D_ConfigLayer+0x114>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2202      	movs	r2, #2
 8006d54:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	011b      	lsls	r3, r3, #4
 8006d5c:	3318      	adds	r3, #24
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	4413      	add	r3, r2
 8006d62:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	041b      	lsls	r3, r3, #16
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8006d72:	4b35      	ldr	r3, [pc, #212]	@ (8006e48 <HAL_DMA2D_ConfigLayer+0x120>)
 8006d74:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	2b0a      	cmp	r3, #10
 8006d7c:	d003      	beq.n	8006d86 <HAL_DMA2D_ConfigLayer+0x5e>
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	2b09      	cmp	r3, #9
 8006d84:	d107      	bne.n	8006d96 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	617b      	str	r3, [r7, #20]
 8006d94:	e005      	b.n	8006da2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	061b      	lsls	r3, r3, #24
 8006d9c:	697a      	ldr	r2, [r7, #20]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d120      	bne.n	8006dea <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	43db      	mvns	r3, r3
 8006db2:	ea02 0103 	and.w	r1, r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	6812      	ldr	r2, [r2, #0]
 8006dc8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	2b0a      	cmp	r3, #10
 8006dd0:	d003      	beq.n	8006dda <HAL_DMA2D_ConfigLayer+0xb2>
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	2b09      	cmp	r3, #9
 8006dd8:	d127      	bne.n	8006e2a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	68da      	ldr	r2, [r3, #12]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006de6:	629a      	str	r2, [r3, #40]	@ 0x28
 8006de8:	e01f      	b.n	8006e2a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	69da      	ldr	r2, [r3, #28]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	43db      	mvns	r3, r3
 8006df4:	ea02 0103 	and.w	r1, r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	697a      	ldr	r2, [r7, #20]
 8006dfe:	430a      	orrs	r2, r1
 8006e00:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	693a      	ldr	r2, [r7, #16]
 8006e08:	6812      	ldr	r2, [r2, #0]
 8006e0a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	2b0a      	cmp	r3, #10
 8006e12:	d003      	beq.n	8006e1c <HAL_DMA2D_ConfigLayer+0xf4>
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	2b09      	cmp	r3, #9
 8006e1a:	d106      	bne.n	8006e2a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	68da      	ldr	r2, [r3, #12]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006e28:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	371c      	adds	r7, #28
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr
 8006e48:	ff03000f 	.word	0xff03000f

08006e4c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d101      	bne.n	8006e5e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e086      	b.n	8006f6c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d106      	bne.n	8006e76 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2220      	movs	r2, #32
 8006e6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f7fc fe3d 	bl	8003af0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e76:	4b3f      	ldr	r3, [pc, #252]	@ (8006f74 <HAL_ETH_Init+0x128>)
 8006e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e7a:	4a3e      	ldr	r2, [pc, #248]	@ (8006f74 <HAL_ETH_Init+0x128>)
 8006e7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006e80:	6453      	str	r3, [r2, #68]	@ 0x44
 8006e82:	4b3c      	ldr	r3, [pc, #240]	@ (8006f74 <HAL_ETH_Init+0x128>)
 8006e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e8a:	60bb      	str	r3, [r7, #8]
 8006e8c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8006e8e:	4b3a      	ldr	r3, [pc, #232]	@ (8006f78 <HAL_ETH_Init+0x12c>)
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	4a39      	ldr	r2, [pc, #228]	@ (8006f78 <HAL_ETH_Init+0x12c>)
 8006e94:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006e98:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8006e9a:	4b37      	ldr	r3, [pc, #220]	@ (8006f78 <HAL_ETH_Init+0x12c>)
 8006e9c:	685a      	ldr	r2, [r3, #4]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	4935      	ldr	r1, [pc, #212]	@ (8006f78 <HAL_ETH_Init+0x12c>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8006ea8:	4b33      	ldr	r3, [pc, #204]	@ (8006f78 <HAL_ETH_Init+0x12c>)
 8006eaa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	6812      	ldr	r2, [r2, #0]
 8006eba:	f043 0301 	orr.w	r3, r3, #1
 8006ebe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006ec2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ec4:	f7fe fc4c 	bl	8005760 <HAL_GetTick>
 8006ec8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8006eca:	e011      	b.n	8006ef0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8006ecc:	f7fe fc48 	bl	8005760 <HAL_GetTick>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006eda:	d909      	bls.n	8006ef0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2204      	movs	r2, #4
 8006ee0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	22e0      	movs	r2, #224	@ 0xe0
 8006ee8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e03d      	b.n	8006f6c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1e4      	bne.n	8006ecc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f97a 	bl	80071fc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 fa25 	bl	8007358 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 fa7b 	bl	800740a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	461a      	mov	r2, r3
 8006f1a:	2100      	movs	r1, #0
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 f9e3 	bl	80072e8 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8006f30:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8006f7c <HAL_ETH_Init+0x130>)
 8006f40:	430b      	orrs	r3, r1
 8006f42:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8006f56:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2210      	movs	r2, #16
 8006f66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	40023800 	.word	0x40023800
 8006f78:	40013800 	.word	0x40013800
 8006f7c:	00020060 	.word	0x00020060

08006f80 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	4b53      	ldr	r3, [pc, #332]	@ (80070e4 <ETH_SetMACConfig+0x164>)
 8006f96:	4013      	ands	r3, r2
 8006f98:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	7b9b      	ldrb	r3, [r3, #14]
 8006f9e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8006fa0:	683a      	ldr	r2, [r7, #0]
 8006fa2:	7c12      	ldrb	r2, [r2, #16]
 8006fa4:	2a00      	cmp	r2, #0
 8006fa6:	d102      	bne.n	8006fae <ETH_SetMACConfig+0x2e>
 8006fa8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006fac:	e000      	b.n	8006fb0 <ETH_SetMACConfig+0x30>
 8006fae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8006fb0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8006fb2:	683a      	ldr	r2, [r7, #0]
 8006fb4:	7c52      	ldrb	r2, [r2, #17]
 8006fb6:	2a00      	cmp	r2, #0
 8006fb8:	d102      	bne.n	8006fc0 <ETH_SetMACConfig+0x40>
 8006fba:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8006fbe:	e000      	b.n	8006fc2 <ETH_SetMACConfig+0x42>
 8006fc0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8006fc2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8006fc8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	7fdb      	ldrb	r3, [r3, #31]
 8006fce:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8006fd0:	431a      	orrs	r2, r3
                        macconf->Speed |
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8006fd6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8006fd8:	683a      	ldr	r2, [r7, #0]
 8006fda:	7f92      	ldrb	r2, [r2, #30]
 8006fdc:	2a00      	cmp	r2, #0
 8006fde:	d102      	bne.n	8006fe6 <ETH_SetMACConfig+0x66>
 8006fe0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006fe4:	e000      	b.n	8006fe8 <ETH_SetMACConfig+0x68>
 8006fe6:	2200      	movs	r2, #0
                        macconf->Speed |
 8006fe8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	7f1b      	ldrb	r3, [r3, #28]
 8006fee:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8006ff0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8006ff6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	791b      	ldrb	r3, [r3, #4]
 8006ffc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8006ffe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8007000:	683a      	ldr	r2, [r7, #0]
 8007002:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007006:	2a00      	cmp	r2, #0
 8007008:	d102      	bne.n	8007010 <ETH_SetMACConfig+0x90>
 800700a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800700e:	e000      	b.n	8007012 <ETH_SetMACConfig+0x92>
 8007010:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8007012:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	7bdb      	ldrb	r3, [r3, #15]
 8007018:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800701a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8007020:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007028:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800702a:	4313      	orrs	r3, r2
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	4313      	orrs	r3, r2
 8007030:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007042:	2001      	movs	r0, #1
 8007044:	f7fe fb98 	bl	8005778 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800705e:	4013      	ands	r3, r2
 8007060:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007066:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8007068:	683a      	ldr	r2, [r7, #0]
 800706a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800706e:	2a00      	cmp	r2, #0
 8007070:	d101      	bne.n	8007076 <ETH_SetMACConfig+0xf6>
 8007072:	2280      	movs	r2, #128	@ 0x80
 8007074:	e000      	b.n	8007078 <ETH_SetMACConfig+0xf8>
 8007076:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007078:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800707e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8007080:	683a      	ldr	r2, [r7, #0]
 8007082:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8007086:	2a01      	cmp	r2, #1
 8007088:	d101      	bne.n	800708e <ETH_SetMACConfig+0x10e>
 800708a:	2208      	movs	r2, #8
 800708c:	e000      	b.n	8007090 <ETH_SetMACConfig+0x110>
 800708e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8007090:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8007092:	683a      	ldr	r2, [r7, #0]
 8007094:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8007098:	2a01      	cmp	r2, #1
 800709a:	d101      	bne.n	80070a0 <ETH_SetMACConfig+0x120>
 800709c:	2204      	movs	r2, #4
 800709e:	e000      	b.n	80070a2 <ETH_SetMACConfig+0x122>
 80070a0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80070a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80070a4:	683a      	ldr	r2, [r7, #0]
 80070a6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80070aa:	2a01      	cmp	r2, #1
 80070ac:	d101      	bne.n	80070b2 <ETH_SetMACConfig+0x132>
 80070ae:	2202      	movs	r2, #2
 80070b0:	e000      	b.n	80070b4 <ETH_SetMACConfig+0x134>
 80070b2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80070b4:	4313      	orrs	r3, r2
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	699b      	ldr	r3, [r3, #24]
 80070ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80070cc:	2001      	movs	r0, #1
 80070ce:	f7fe fb53 	bl	8005778 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	619a      	str	r2, [r3, #24]
}
 80070da:	bf00      	nop
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	fd20810f 	.word	0xfd20810f

080070e8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	4b3d      	ldr	r3, [pc, #244]	@ (80071f8 <ETH_SetDMAConfig+0x110>)
 8007102:	4013      	ands	r3, r2
 8007104:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	7b1b      	ldrb	r3, [r3, #12]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d102      	bne.n	8007114 <ETH_SetDMAConfig+0x2c>
 800710e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007112:	e000      	b.n	8007116 <ETH_SetDMAConfig+0x2e>
 8007114:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	7b5b      	ldrb	r3, [r3, #13]
 800711a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800711c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800711e:	683a      	ldr	r2, [r7, #0]
 8007120:	7f52      	ldrb	r2, [r2, #29]
 8007122:	2a00      	cmp	r2, #0
 8007124:	d102      	bne.n	800712c <ETH_SetDMAConfig+0x44>
 8007126:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800712a:	e000      	b.n	800712e <ETH_SetDMAConfig+0x46>
 800712c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800712e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	7b9b      	ldrb	r3, [r3, #14]
 8007134:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8007136:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800713c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	7f1b      	ldrb	r3, [r3, #28]
 8007142:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8007144:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	7f9b      	ldrb	r3, [r3, #30]
 800714a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800714c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8007152:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800715a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800715c:	4313      	orrs	r3, r2
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	4313      	orrs	r3, r2
 8007162:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800716c:	461a      	mov	r2, r3
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800717e:	2001      	movs	r0, #1
 8007180:	f7fe fafa 	bl	8005778 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800718c:	461a      	mov	r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	791b      	ldrb	r3, [r3, #4]
 8007196:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800719c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80071a2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80071a8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80071b0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80071b2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071b8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80071ba:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80071c0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	6812      	ldr	r2, [r2, #0]
 80071c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80071ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80071ce:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80071dc:	2001      	movs	r0, #1
 80071de:	f7fe facb 	bl	8005778 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071ea:	461a      	mov	r2, r3
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6013      	str	r3, [r2, #0]
}
 80071f0:	bf00      	nop
 80071f2:	3710      	adds	r7, #16
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	f8de3f23 	.word	0xf8de3f23

080071fc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b0a6      	sub	sp, #152	@ 0x98
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8007204:	2301      	movs	r3, #1
 8007206:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800720a:	2301      	movs	r3, #1
 800720c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8007210:	2300      	movs	r3, #0
 8007212:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8007214:	2300      	movs	r3, #0
 8007216:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800721a:	2301      	movs	r3, #1
 800721c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8007220:	2300      	movs	r3, #0
 8007222:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8007226:	2301      	movs	r3, #1
 8007228:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800722c:	2301      	movs	r3, #1
 800722e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8007232:	2300      	movs	r3, #0
 8007234:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8007238:	2300      	movs	r3, #0
 800723a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800723e:	2300      	movs	r3, #0
 8007240:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8007242:	2300      	movs	r3, #0
 8007244:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8007248:	2300      	movs	r3, #0
 800724a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800724c:	2300      	movs	r3, #0
 800724e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8007252:	2300      	movs	r3, #0
 8007254:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8007258:	2300      	movs	r3, #0
 800725a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800725e:	2300      	movs	r3, #0
 8007260:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8007264:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007268:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800726a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800726e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8007270:	2300      	movs	r3, #0
 8007272:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8007276:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800727a:	4619      	mov	r1, r3
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f7ff fe7f 	bl	8006f80 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8007282:	2301      	movs	r3, #1
 8007284:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8007286:	2301      	movs	r3, #1
 8007288:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800728a:	2301      	movs	r3, #1
 800728c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8007290:	2301      	movs	r3, #1
 8007292:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8007294:	2300      	movs	r3, #0
 8007296:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8007298:	2300      	movs	r3, #0
 800729a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800729e:	2300      	movs	r3, #0
 80072a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80072a4:	2300      	movs	r3, #0
 80072a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80072a8:	2301      	movs	r3, #1
 80072aa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80072ae:	2301      	movs	r3, #1
 80072b0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80072b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80072b6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80072b8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80072bc:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80072be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80072c2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80072c4:	2301      	movs	r3, #1
 80072c6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80072ca:	2300      	movs	r3, #0
 80072cc:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80072ce:	2300      	movs	r3, #0
 80072d0:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80072d2:	f107 0308 	add.w	r3, r7, #8
 80072d6:	4619      	mov	r1, r3
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f7ff ff05 	bl	80070e8 <ETH_SetDMAConfig>
}
 80072de:	bf00      	nop
 80072e0:	3798      	adds	r7, #152	@ 0x98
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
	...

080072e8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b087      	sub	sp, #28
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	3305      	adds	r3, #5
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	021b      	lsls	r3, r3, #8
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	3204      	adds	r2, #4
 8007300:	7812      	ldrb	r2, [r2, #0]
 8007302:	4313      	orrs	r3, r2
 8007304:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8007306:	68ba      	ldr	r2, [r7, #8]
 8007308:	4b11      	ldr	r3, [pc, #68]	@ (8007350 <ETH_MACAddressConfig+0x68>)
 800730a:	4413      	add	r3, r2
 800730c:	461a      	mov	r2, r3
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	3303      	adds	r3, #3
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	061a      	lsls	r2, r3, #24
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	3302      	adds	r3, #2
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	041b      	lsls	r3, r3, #16
 8007322:	431a      	orrs	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	3301      	adds	r3, #1
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	021b      	lsls	r3, r3, #8
 800732c:	4313      	orrs	r3, r2
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	7812      	ldrb	r2, [r2, #0]
 8007332:	4313      	orrs	r3, r2
 8007334:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8007336:	68ba      	ldr	r2, [r7, #8]
 8007338:	4b06      	ldr	r3, [pc, #24]	@ (8007354 <ETH_MACAddressConfig+0x6c>)
 800733a:	4413      	add	r3, r2
 800733c:	461a      	mov	r2, r3
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	6013      	str	r3, [r2, #0]
}
 8007342:	bf00      	nop
 8007344:	371c      	adds	r7, #28
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	40028040 	.word	0x40028040
 8007354:	40028044 	.word	0x40028044

08007358 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007360:	2300      	movs	r3, #0
 8007362:	60fb      	str	r3, [r7, #12]
 8007364:	e03e      	b.n	80073e4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	68d9      	ldr	r1, [r3, #12]
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	4613      	mov	r3, r2
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	4413      	add	r3, r2
 8007372:	00db      	lsls	r3, r3, #3
 8007374:	440b      	add	r3, r1
 8007376:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	2200      	movs	r2, #0
 800737c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	2200      	movs	r2, #0
 8007382:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	2200      	movs	r2, #0
 8007388:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	2200      	movs	r2, #0
 800738e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8007390:	68b9      	ldr	r1, [r7, #8]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	3206      	adds	r2, #6
 8007398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d80c      	bhi.n	80073c8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	68d9      	ldr	r1, [r3, #12]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	1c5a      	adds	r2, r3, #1
 80073b6:	4613      	mov	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	4413      	add	r3, r2
 80073bc:	00db      	lsls	r3, r3, #3
 80073be:	440b      	add	r3, r1
 80073c0:	461a      	mov	r2, r3
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	60da      	str	r2, [r3, #12]
 80073c6:	e004      	b.n	80073d2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	461a      	mov	r2, r3
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	3301      	adds	r3, #1
 80073e2:	60fb      	str	r3, [r7, #12]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2b03      	cmp	r3, #3
 80073e8:	d9bd      	bls.n	8007366 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	68da      	ldr	r2, [r3, #12]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073fc:	611a      	str	r2, [r3, #16]
}
 80073fe:	bf00      	nop
 8007400:	3714      	adds	r7, #20
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr

0800740a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800740a:	b480      	push	{r7}
 800740c:	b085      	sub	sp, #20
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007412:	2300      	movs	r3, #0
 8007414:	60fb      	str	r3, [r7, #12]
 8007416:	e048      	b.n	80074aa <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6919      	ldr	r1, [r3, #16]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	4613      	mov	r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	00db      	lsls	r3, r3, #3
 8007426:	440b      	add	r3, r1
 8007428:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	2200      	movs	r2, #0
 800742e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	2200      	movs	r2, #0
 8007434:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	2200      	movs	r2, #0
 800743a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	2200      	movs	r2, #0
 8007440:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	2200      	movs	r2, #0
 8007446:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	2200      	movs	r2, #0
 800744c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007454:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800746e:	68b9      	ldr	r1, [r7, #8]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	3212      	adds	r2, #18
 8007476:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2b02      	cmp	r3, #2
 800747e:	d80c      	bhi.n	800749a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6919      	ldr	r1, [r3, #16]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	1c5a      	adds	r2, r3, #1
 8007488:	4613      	mov	r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4413      	add	r3, r2
 800748e:	00db      	lsls	r3, r3, #3
 8007490:	440b      	add	r3, r1
 8007492:	461a      	mov	r2, r3
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	60da      	str	r2, [r3, #12]
 8007498:	e004      	b.n	80074a4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	461a      	mov	r2, r3
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	3301      	adds	r3, #1
 80074a8:	60fb      	str	r3, [r7, #12]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2b03      	cmp	r3, #3
 80074ae:	d9b3      	bls.n	8007418 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	691a      	ldr	r2, [r3, #16]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074da:	60da      	str	r2, [r3, #12]
}
 80074dc:	bf00      	nop
 80074de:	3714      	adds	r7, #20
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b089      	sub	sp, #36	@ 0x24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80074f2:	2300      	movs	r3, #0
 80074f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80074f6:	2300      	movs	r3, #0
 80074f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80074fa:	2300      	movs	r3, #0
 80074fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80074fe:	2300      	movs	r3, #0
 8007500:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8007502:	2300      	movs	r3, #0
 8007504:	61fb      	str	r3, [r7, #28]
 8007506:	e175      	b.n	80077f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007508:	2201      	movs	r2, #1
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	fa02 f303 	lsl.w	r3, r2, r3
 8007510:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	697a      	ldr	r2, [r7, #20]
 8007518:	4013      	ands	r3, r2
 800751a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800751c:	693a      	ldr	r2, [r7, #16]
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	429a      	cmp	r2, r3
 8007522:	f040 8164 	bne.w	80077ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	f003 0303 	and.w	r3, r3, #3
 800752e:	2b01      	cmp	r3, #1
 8007530:	d005      	beq.n	800753e <HAL_GPIO_Init+0x56>
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	f003 0303 	and.w	r3, r3, #3
 800753a:	2b02      	cmp	r3, #2
 800753c:	d130      	bne.n	80075a0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	005b      	lsls	r3, r3, #1
 8007548:	2203      	movs	r2, #3
 800754a:	fa02 f303 	lsl.w	r3, r2, r3
 800754e:	43db      	mvns	r3, r3
 8007550:	69ba      	ldr	r2, [r7, #24]
 8007552:	4013      	ands	r3, r2
 8007554:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	68da      	ldr	r2, [r3, #12]
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	005b      	lsls	r3, r3, #1
 800755e:	fa02 f303 	lsl.w	r3, r2, r3
 8007562:	69ba      	ldr	r2, [r7, #24]
 8007564:	4313      	orrs	r3, r2
 8007566:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	69ba      	ldr	r2, [r7, #24]
 800756c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007574:	2201      	movs	r2, #1
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	fa02 f303 	lsl.w	r3, r2, r3
 800757c:	43db      	mvns	r3, r3
 800757e:	69ba      	ldr	r2, [r7, #24]
 8007580:	4013      	ands	r3, r2
 8007582:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	091b      	lsrs	r3, r3, #4
 800758a:	f003 0201 	and.w	r2, r3, #1
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	fa02 f303 	lsl.w	r3, r2, r3
 8007594:	69ba      	ldr	r2, [r7, #24]
 8007596:	4313      	orrs	r3, r2
 8007598:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	69ba      	ldr	r2, [r7, #24]
 800759e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	f003 0303 	and.w	r3, r3, #3
 80075a8:	2b03      	cmp	r3, #3
 80075aa:	d017      	beq.n	80075dc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	005b      	lsls	r3, r3, #1
 80075b6:	2203      	movs	r2, #3
 80075b8:	fa02 f303 	lsl.w	r3, r2, r3
 80075bc:	43db      	mvns	r3, r3
 80075be:	69ba      	ldr	r2, [r7, #24]
 80075c0:	4013      	ands	r3, r2
 80075c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	689a      	ldr	r2, [r3, #8]
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	005b      	lsls	r3, r3, #1
 80075cc:	fa02 f303 	lsl.w	r3, r2, r3
 80075d0:	69ba      	ldr	r2, [r7, #24]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	69ba      	ldr	r2, [r7, #24]
 80075da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	f003 0303 	and.w	r3, r3, #3
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	d123      	bne.n	8007630 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	08da      	lsrs	r2, r3, #3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	3208      	adds	r2, #8
 80075f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	f003 0307 	and.w	r3, r3, #7
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	220f      	movs	r2, #15
 8007600:	fa02 f303 	lsl.w	r3, r2, r3
 8007604:	43db      	mvns	r3, r3
 8007606:	69ba      	ldr	r2, [r7, #24]
 8007608:	4013      	ands	r3, r2
 800760a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	691a      	ldr	r2, [r3, #16]
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	f003 0307 	and.w	r3, r3, #7
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	fa02 f303 	lsl.w	r3, r2, r3
 800761c:	69ba      	ldr	r2, [r7, #24]
 800761e:	4313      	orrs	r3, r2
 8007620:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	08da      	lsrs	r2, r3, #3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	3208      	adds	r2, #8
 800762a:	69b9      	ldr	r1, [r7, #24]
 800762c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	005b      	lsls	r3, r3, #1
 800763a:	2203      	movs	r2, #3
 800763c:	fa02 f303 	lsl.w	r3, r2, r3
 8007640:	43db      	mvns	r3, r3
 8007642:	69ba      	ldr	r2, [r7, #24]
 8007644:	4013      	ands	r3, r2
 8007646:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	f003 0203 	and.w	r2, r3, #3
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	005b      	lsls	r3, r3, #1
 8007654:	fa02 f303 	lsl.w	r3, r2, r3
 8007658:	69ba      	ldr	r2, [r7, #24]
 800765a:	4313      	orrs	r3, r2
 800765c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	69ba      	ldr	r2, [r7, #24]
 8007662:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800766c:	2b00      	cmp	r3, #0
 800766e:	f000 80be 	beq.w	80077ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007672:	4b66      	ldr	r3, [pc, #408]	@ (800780c <HAL_GPIO_Init+0x324>)
 8007674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007676:	4a65      	ldr	r2, [pc, #404]	@ (800780c <HAL_GPIO_Init+0x324>)
 8007678:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800767c:	6453      	str	r3, [r2, #68]	@ 0x44
 800767e:	4b63      	ldr	r3, [pc, #396]	@ (800780c <HAL_GPIO_Init+0x324>)
 8007680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007682:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007686:	60fb      	str	r3, [r7, #12]
 8007688:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800768a:	4a61      	ldr	r2, [pc, #388]	@ (8007810 <HAL_GPIO_Init+0x328>)
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	089b      	lsrs	r3, r3, #2
 8007690:	3302      	adds	r3, #2
 8007692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007696:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	f003 0303 	and.w	r3, r3, #3
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	220f      	movs	r2, #15
 80076a2:	fa02 f303 	lsl.w	r3, r2, r3
 80076a6:	43db      	mvns	r3, r3
 80076a8:	69ba      	ldr	r2, [r7, #24]
 80076aa:	4013      	ands	r3, r2
 80076ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a58      	ldr	r2, [pc, #352]	@ (8007814 <HAL_GPIO_Init+0x32c>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d037      	beq.n	8007726 <HAL_GPIO_Init+0x23e>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a57      	ldr	r2, [pc, #348]	@ (8007818 <HAL_GPIO_Init+0x330>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d031      	beq.n	8007722 <HAL_GPIO_Init+0x23a>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a56      	ldr	r2, [pc, #344]	@ (800781c <HAL_GPIO_Init+0x334>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d02b      	beq.n	800771e <HAL_GPIO_Init+0x236>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a55      	ldr	r2, [pc, #340]	@ (8007820 <HAL_GPIO_Init+0x338>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d025      	beq.n	800771a <HAL_GPIO_Init+0x232>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a54      	ldr	r2, [pc, #336]	@ (8007824 <HAL_GPIO_Init+0x33c>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d01f      	beq.n	8007716 <HAL_GPIO_Init+0x22e>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a53      	ldr	r2, [pc, #332]	@ (8007828 <HAL_GPIO_Init+0x340>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d019      	beq.n	8007712 <HAL_GPIO_Init+0x22a>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a52      	ldr	r2, [pc, #328]	@ (800782c <HAL_GPIO_Init+0x344>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d013      	beq.n	800770e <HAL_GPIO_Init+0x226>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a51      	ldr	r2, [pc, #324]	@ (8007830 <HAL_GPIO_Init+0x348>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d00d      	beq.n	800770a <HAL_GPIO_Init+0x222>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a50      	ldr	r2, [pc, #320]	@ (8007834 <HAL_GPIO_Init+0x34c>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d007      	beq.n	8007706 <HAL_GPIO_Init+0x21e>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a4f      	ldr	r2, [pc, #316]	@ (8007838 <HAL_GPIO_Init+0x350>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d101      	bne.n	8007702 <HAL_GPIO_Init+0x21a>
 80076fe:	2309      	movs	r3, #9
 8007700:	e012      	b.n	8007728 <HAL_GPIO_Init+0x240>
 8007702:	230a      	movs	r3, #10
 8007704:	e010      	b.n	8007728 <HAL_GPIO_Init+0x240>
 8007706:	2308      	movs	r3, #8
 8007708:	e00e      	b.n	8007728 <HAL_GPIO_Init+0x240>
 800770a:	2307      	movs	r3, #7
 800770c:	e00c      	b.n	8007728 <HAL_GPIO_Init+0x240>
 800770e:	2306      	movs	r3, #6
 8007710:	e00a      	b.n	8007728 <HAL_GPIO_Init+0x240>
 8007712:	2305      	movs	r3, #5
 8007714:	e008      	b.n	8007728 <HAL_GPIO_Init+0x240>
 8007716:	2304      	movs	r3, #4
 8007718:	e006      	b.n	8007728 <HAL_GPIO_Init+0x240>
 800771a:	2303      	movs	r3, #3
 800771c:	e004      	b.n	8007728 <HAL_GPIO_Init+0x240>
 800771e:	2302      	movs	r3, #2
 8007720:	e002      	b.n	8007728 <HAL_GPIO_Init+0x240>
 8007722:	2301      	movs	r3, #1
 8007724:	e000      	b.n	8007728 <HAL_GPIO_Init+0x240>
 8007726:	2300      	movs	r3, #0
 8007728:	69fa      	ldr	r2, [r7, #28]
 800772a:	f002 0203 	and.w	r2, r2, #3
 800772e:	0092      	lsls	r2, r2, #2
 8007730:	4093      	lsls	r3, r2
 8007732:	69ba      	ldr	r2, [r7, #24]
 8007734:	4313      	orrs	r3, r2
 8007736:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007738:	4935      	ldr	r1, [pc, #212]	@ (8007810 <HAL_GPIO_Init+0x328>)
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	089b      	lsrs	r3, r3, #2
 800773e:	3302      	adds	r3, #2
 8007740:	69ba      	ldr	r2, [r7, #24]
 8007742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007746:	4b3d      	ldr	r3, [pc, #244]	@ (800783c <HAL_GPIO_Init+0x354>)
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	43db      	mvns	r3, r3
 8007750:	69ba      	ldr	r2, [r7, #24]
 8007752:	4013      	ands	r3, r2
 8007754:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800775e:	2b00      	cmp	r3, #0
 8007760:	d003      	beq.n	800776a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007762:	69ba      	ldr	r2, [r7, #24]
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	4313      	orrs	r3, r2
 8007768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800776a:	4a34      	ldr	r2, [pc, #208]	@ (800783c <HAL_GPIO_Init+0x354>)
 800776c:	69bb      	ldr	r3, [r7, #24]
 800776e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007770:	4b32      	ldr	r3, [pc, #200]	@ (800783c <HAL_GPIO_Init+0x354>)
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	43db      	mvns	r3, r3
 800777a:	69ba      	ldr	r2, [r7, #24]
 800777c:	4013      	ands	r3, r2
 800777e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007788:	2b00      	cmp	r3, #0
 800778a:	d003      	beq.n	8007794 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800778c:	69ba      	ldr	r2, [r7, #24]
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	4313      	orrs	r3, r2
 8007792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007794:	4a29      	ldr	r2, [pc, #164]	@ (800783c <HAL_GPIO_Init+0x354>)
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800779a:	4b28      	ldr	r3, [pc, #160]	@ (800783c <HAL_GPIO_Init+0x354>)
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	43db      	mvns	r3, r3
 80077a4:	69ba      	ldr	r2, [r7, #24]
 80077a6:	4013      	ands	r3, r2
 80077a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d003      	beq.n	80077be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80077b6:	69ba      	ldr	r2, [r7, #24]
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80077be:	4a1f      	ldr	r2, [pc, #124]	@ (800783c <HAL_GPIO_Init+0x354>)
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80077c4:	4b1d      	ldr	r3, [pc, #116]	@ (800783c <HAL_GPIO_Init+0x354>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	43db      	mvns	r3, r3
 80077ce:	69ba      	ldr	r2, [r7, #24]
 80077d0:	4013      	ands	r3, r2
 80077d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d003      	beq.n	80077e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80077e0:	69ba      	ldr	r2, [r7, #24]
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80077e8:	4a14      	ldr	r2, [pc, #80]	@ (800783c <HAL_GPIO_Init+0x354>)
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	3301      	adds	r3, #1
 80077f2:	61fb      	str	r3, [r7, #28]
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	2b0f      	cmp	r3, #15
 80077f8:	f67f ae86 	bls.w	8007508 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80077fc:	bf00      	nop
 80077fe:	bf00      	nop
 8007800:	3724      	adds	r7, #36	@ 0x24
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	40023800 	.word	0x40023800
 8007810:	40013800 	.word	0x40013800
 8007814:	40020000 	.word	0x40020000
 8007818:	40020400 	.word	0x40020400
 800781c:	40020800 	.word	0x40020800
 8007820:	40020c00 	.word	0x40020c00
 8007824:	40021000 	.word	0x40021000
 8007828:	40021400 	.word	0x40021400
 800782c:	40021800 	.word	0x40021800
 8007830:	40021c00 	.word	0x40021c00
 8007834:	40022000 	.word	0x40022000
 8007838:	40022400 	.word	0x40022400
 800783c:	40013c00 	.word	0x40013c00

08007840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	460b      	mov	r3, r1
 800784a:	807b      	strh	r3, [r7, #2]
 800784c:	4613      	mov	r3, r2
 800784e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007850:	787b      	ldrb	r3, [r7, #1]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d003      	beq.n	800785e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007856:	887a      	ldrh	r2, [r7, #2]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800785c:	e003      	b.n	8007866 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800785e:	887b      	ldrh	r3, [r7, #2]
 8007860:	041a      	lsls	r2, r3, #16
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	619a      	str	r2, [r3, #24]
}
 8007866:	bf00      	nop
 8007868:	370c      	adds	r7, #12
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8007872:	b580      	push	{r7, lr}
 8007874:	b086      	sub	sp, #24
 8007876:	af02      	add	r7, sp, #8
 8007878:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d101      	bne.n	8007884 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	e059      	b.n	8007938 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8007890:	b2db      	uxtb	r3, r3
 8007892:	2b00      	cmp	r3, #0
 8007894:	d106      	bne.n	80078a4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f013 f9c4 	bl	801ac2c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2203      	movs	r2, #3
 80078a8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80078b2:	d102      	bne.n	80078ba <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4618      	mov	r0, r3
 80078c0:	f009 fd17 	bl	80112f2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6818      	ldr	r0, [r3, #0]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	7c1a      	ldrb	r2, [r3, #16]
 80078cc:	f88d 2000 	strb.w	r2, [sp]
 80078d0:	3304      	adds	r3, #4
 80078d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80078d4:	f009 fca2 	bl	801121c <USB_CoreInit>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d005      	beq.n	80078ea <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2202      	movs	r2, #2
 80078e2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e026      	b.n	8007938 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2101      	movs	r1, #1
 80078f0:	4618      	mov	r0, r3
 80078f2:	f009 fd0f 	bl	8011314 <USB_SetCurrentMode>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d005      	beq.n	8007908 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2202      	movs	r2, #2
 8007900:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e017      	b.n	8007938 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6818      	ldr	r0, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	7c1a      	ldrb	r2, [r3, #16]
 8007910:	f88d 2000 	strb.w	r2, [sp]
 8007914:	3304      	adds	r3, #4
 8007916:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007918:	f009 feb8 	bl	801168c <USB_HostInit>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d005      	beq.n	800792e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2202      	movs	r2, #2
 8007926:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e004      	b.n	8007938 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2201      	movs	r2, #1
 8007932:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007940:	b590      	push	{r4, r7, lr}
 8007942:	b08b      	sub	sp, #44	@ 0x2c
 8007944:	af04      	add	r7, sp, #16
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	4608      	mov	r0, r1
 800794a:	4611      	mov	r1, r2
 800794c:	461a      	mov	r2, r3
 800794e:	4603      	mov	r3, r0
 8007950:	70fb      	strb	r3, [r7, #3]
 8007952:	460b      	mov	r3, r1
 8007954:	70bb      	strb	r3, [r7, #2]
 8007956:	4613      	mov	r3, r2
 8007958:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800795a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800795c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8007964:	2b01      	cmp	r3, #1
 8007966:	d101      	bne.n	800796c <HAL_HCD_HC_Init+0x2c>
 8007968:	2302      	movs	r3, #2
 800796a:	e09d      	b.n	8007aa8 <HAL_HCD_HC_Init+0x168>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8007974:	78fa      	ldrb	r2, [r7, #3]
 8007976:	6879      	ldr	r1, [r7, #4]
 8007978:	4613      	mov	r3, r2
 800797a:	011b      	lsls	r3, r3, #4
 800797c:	1a9b      	subs	r3, r3, r2
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	440b      	add	r3, r1
 8007982:	3319      	adds	r3, #25
 8007984:	2200      	movs	r2, #0
 8007986:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8007988:	78fa      	ldrb	r2, [r7, #3]
 800798a:	6879      	ldr	r1, [r7, #4]
 800798c:	4613      	mov	r3, r2
 800798e:	011b      	lsls	r3, r3, #4
 8007990:	1a9b      	subs	r3, r3, r2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	440b      	add	r3, r1
 8007996:	3314      	adds	r3, #20
 8007998:	787a      	ldrb	r2, [r7, #1]
 800799a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800799c:	78fa      	ldrb	r2, [r7, #3]
 800799e:	6879      	ldr	r1, [r7, #4]
 80079a0:	4613      	mov	r3, r2
 80079a2:	011b      	lsls	r3, r3, #4
 80079a4:	1a9b      	subs	r3, r3, r2
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	440b      	add	r3, r1
 80079aa:	3315      	adds	r3, #21
 80079ac:	78fa      	ldrb	r2, [r7, #3]
 80079ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80079b0:	78fa      	ldrb	r2, [r7, #3]
 80079b2:	6879      	ldr	r1, [r7, #4]
 80079b4:	4613      	mov	r3, r2
 80079b6:	011b      	lsls	r3, r3, #4
 80079b8:	1a9b      	subs	r3, r3, r2
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	440b      	add	r3, r1
 80079be:	3326      	adds	r3, #38	@ 0x26
 80079c0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80079c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80079c6:	78fa      	ldrb	r2, [r7, #3]
 80079c8:	78bb      	ldrb	r3, [r7, #2]
 80079ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079ce:	b2d8      	uxtb	r0, r3
 80079d0:	6879      	ldr	r1, [r7, #4]
 80079d2:	4613      	mov	r3, r2
 80079d4:	011b      	lsls	r3, r3, #4
 80079d6:	1a9b      	subs	r3, r3, r2
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	440b      	add	r3, r1
 80079dc:	3316      	adds	r3, #22
 80079de:	4602      	mov	r2, r0
 80079e0:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80079e2:	78fb      	ldrb	r3, [r7, #3]
 80079e4:	4619      	mov	r1, r3
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 fbc8 	bl	800817c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80079ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	da0a      	bge.n	8007a0a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80079f4:	78fa      	ldrb	r2, [r7, #3]
 80079f6:	6879      	ldr	r1, [r7, #4]
 80079f8:	4613      	mov	r3, r2
 80079fa:	011b      	lsls	r3, r3, #4
 80079fc:	1a9b      	subs	r3, r3, r2
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	440b      	add	r3, r1
 8007a02:	3317      	adds	r3, #23
 8007a04:	2201      	movs	r2, #1
 8007a06:	701a      	strb	r2, [r3, #0]
 8007a08:	e009      	b.n	8007a1e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8007a0a:	78fa      	ldrb	r2, [r7, #3]
 8007a0c:	6879      	ldr	r1, [r7, #4]
 8007a0e:	4613      	mov	r3, r2
 8007a10:	011b      	lsls	r3, r3, #4
 8007a12:	1a9b      	subs	r3, r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	440b      	add	r3, r1
 8007a18:	3317      	adds	r3, #23
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4618      	mov	r0, r3
 8007a24:	f009 ff8a 	bl	801193c <USB_GetHostSpeed>
 8007a28:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8007a2a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d10b      	bne.n	8007a4a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8007a32:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d107      	bne.n	8007a4a <HAL_HCD_HC_Init+0x10a>
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d104      	bne.n	8007a4a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	2bbc      	cmp	r3, #188	@ 0xbc
 8007a44:	d901      	bls.n	8007a4a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8007a46:	23bc      	movs	r3, #188	@ 0xbc
 8007a48:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8007a4a:	78fa      	ldrb	r2, [r7, #3]
 8007a4c:	6879      	ldr	r1, [r7, #4]
 8007a4e:	4613      	mov	r3, r2
 8007a50:	011b      	lsls	r3, r3, #4
 8007a52:	1a9b      	subs	r3, r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	440b      	add	r3, r1
 8007a58:	3318      	adds	r3, #24
 8007a5a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8007a5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8007a60:	78fa      	ldrb	r2, [r7, #3]
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	b298      	uxth	r0, r3
 8007a66:	6879      	ldr	r1, [r7, #4]
 8007a68:	4613      	mov	r3, r2
 8007a6a:	011b      	lsls	r3, r3, #4
 8007a6c:	1a9b      	subs	r3, r3, r2
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	440b      	add	r3, r1
 8007a72:	3328      	adds	r3, #40	@ 0x28
 8007a74:	4602      	mov	r2, r0
 8007a76:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6818      	ldr	r0, [r3, #0]
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	787c      	ldrb	r4, [r7, #1]
 8007a82:	78ba      	ldrb	r2, [r7, #2]
 8007a84:	78f9      	ldrb	r1, [r7, #3]
 8007a86:	9302      	str	r3, [sp, #8]
 8007a88:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007a8c:	9301      	str	r3, [sp, #4]
 8007a8e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007a92:	9300      	str	r3, [sp, #0]
 8007a94:	4623      	mov	r3, r4
 8007a96:	f009 ff79 	bl	801198c <USB_HC_Init>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8007aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	371c      	adds	r7, #28
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd90      	pop	{r4, r7, pc}

08007ab0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	460b      	mov	r3, r1
 8007aba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007abc:	2300      	movs	r3, #0
 8007abe:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d101      	bne.n	8007ace <HAL_HCD_HC_Halt+0x1e>
 8007aca:	2302      	movs	r3, #2
 8007acc:	e00f      	b.n	8007aee <HAL_HCD_HC_Halt+0x3e>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	78fa      	ldrb	r2, [r7, #3]
 8007adc:	4611      	mov	r1, r2
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f00a fb0b 	bl	80120fa <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8007aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
	...

08007af8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	4608      	mov	r0, r1
 8007b02:	4611      	mov	r1, r2
 8007b04:	461a      	mov	r2, r3
 8007b06:	4603      	mov	r3, r0
 8007b08:	70fb      	strb	r3, [r7, #3]
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	70bb      	strb	r3, [r7, #2]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8007b12:	78fa      	ldrb	r2, [r7, #3]
 8007b14:	6879      	ldr	r1, [r7, #4]
 8007b16:	4613      	mov	r3, r2
 8007b18:	011b      	lsls	r3, r3, #4
 8007b1a:	1a9b      	subs	r3, r3, r2
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	440b      	add	r3, r1
 8007b20:	3317      	adds	r3, #23
 8007b22:	78ba      	ldrb	r2, [r7, #2]
 8007b24:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8007b26:	78fa      	ldrb	r2, [r7, #3]
 8007b28:	6879      	ldr	r1, [r7, #4]
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	011b      	lsls	r3, r3, #4
 8007b2e:	1a9b      	subs	r3, r3, r2
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	440b      	add	r3, r1
 8007b34:	3326      	adds	r3, #38	@ 0x26
 8007b36:	787a      	ldrb	r2, [r7, #1]
 8007b38:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8007b3a:	7c3b      	ldrb	r3, [r7, #16]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d114      	bne.n	8007b6a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8007b40:	78fa      	ldrb	r2, [r7, #3]
 8007b42:	6879      	ldr	r1, [r7, #4]
 8007b44:	4613      	mov	r3, r2
 8007b46:	011b      	lsls	r3, r3, #4
 8007b48:	1a9b      	subs	r3, r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	440b      	add	r3, r1
 8007b4e:	332a      	adds	r3, #42	@ 0x2a
 8007b50:	2203      	movs	r2, #3
 8007b52:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8007b54:	78fa      	ldrb	r2, [r7, #3]
 8007b56:	6879      	ldr	r1, [r7, #4]
 8007b58:	4613      	mov	r3, r2
 8007b5a:	011b      	lsls	r3, r3, #4
 8007b5c:	1a9b      	subs	r3, r3, r2
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	440b      	add	r3, r1
 8007b62:	3319      	adds	r3, #25
 8007b64:	7f3a      	ldrb	r2, [r7, #28]
 8007b66:	701a      	strb	r2, [r3, #0]
 8007b68:	e009      	b.n	8007b7e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007b6a:	78fa      	ldrb	r2, [r7, #3]
 8007b6c:	6879      	ldr	r1, [r7, #4]
 8007b6e:	4613      	mov	r3, r2
 8007b70:	011b      	lsls	r3, r3, #4
 8007b72:	1a9b      	subs	r3, r3, r2
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	440b      	add	r3, r1
 8007b78:	332a      	adds	r3, #42	@ 0x2a
 8007b7a:	2202      	movs	r2, #2
 8007b7c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8007b7e:	787b      	ldrb	r3, [r7, #1]
 8007b80:	2b03      	cmp	r3, #3
 8007b82:	f200 8102 	bhi.w	8007d8a <HAL_HCD_HC_SubmitRequest+0x292>
 8007b86:	a201      	add	r2, pc, #4	@ (adr r2, 8007b8c <HAL_HCD_HC_SubmitRequest+0x94>)
 8007b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8c:	08007b9d 	.word	0x08007b9d
 8007b90:	08007d75 	.word	0x08007d75
 8007b94:	08007c61 	.word	0x08007c61
 8007b98:	08007ceb 	.word	0x08007ceb
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8007b9c:	7c3b      	ldrb	r3, [r7, #16]
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	f040 80f5 	bne.w	8007d8e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8007ba4:	78bb      	ldrb	r3, [r7, #2]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d12d      	bne.n	8007c06 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8007baa:	8b3b      	ldrh	r3, [r7, #24]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d109      	bne.n	8007bc4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8007bb0:	78fa      	ldrb	r2, [r7, #3]
 8007bb2:	6879      	ldr	r1, [r7, #4]
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	011b      	lsls	r3, r3, #4
 8007bb8:	1a9b      	subs	r3, r3, r2
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	440b      	add	r3, r1
 8007bbe:	333d      	adds	r3, #61	@ 0x3d
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8007bc4:	78fa      	ldrb	r2, [r7, #3]
 8007bc6:	6879      	ldr	r1, [r7, #4]
 8007bc8:	4613      	mov	r3, r2
 8007bca:	011b      	lsls	r3, r3, #4
 8007bcc:	1a9b      	subs	r3, r3, r2
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	440b      	add	r3, r1
 8007bd2:	333d      	adds	r3, #61	@ 0x3d
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10a      	bne.n	8007bf0 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007bda:	78fa      	ldrb	r2, [r7, #3]
 8007bdc:	6879      	ldr	r1, [r7, #4]
 8007bde:	4613      	mov	r3, r2
 8007be0:	011b      	lsls	r3, r3, #4
 8007be2:	1a9b      	subs	r3, r3, r2
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	440b      	add	r3, r1
 8007be8:	332a      	adds	r3, #42	@ 0x2a
 8007bea:	2200      	movs	r2, #0
 8007bec:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8007bee:	e0ce      	b.n	8007d8e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007bf0:	78fa      	ldrb	r2, [r7, #3]
 8007bf2:	6879      	ldr	r1, [r7, #4]
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	011b      	lsls	r3, r3, #4
 8007bf8:	1a9b      	subs	r3, r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	440b      	add	r3, r1
 8007bfe:	332a      	adds	r3, #42	@ 0x2a
 8007c00:	2202      	movs	r2, #2
 8007c02:	701a      	strb	r2, [r3, #0]
      break;
 8007c04:	e0c3      	b.n	8007d8e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8007c06:	78fa      	ldrb	r2, [r7, #3]
 8007c08:	6879      	ldr	r1, [r7, #4]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	011b      	lsls	r3, r3, #4
 8007c0e:	1a9b      	subs	r3, r3, r2
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	440b      	add	r3, r1
 8007c14:	331a      	adds	r3, #26
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	f040 80b8 	bne.w	8007d8e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8007c1e:	78fa      	ldrb	r2, [r7, #3]
 8007c20:	6879      	ldr	r1, [r7, #4]
 8007c22:	4613      	mov	r3, r2
 8007c24:	011b      	lsls	r3, r3, #4
 8007c26:	1a9b      	subs	r3, r3, r2
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	440b      	add	r3, r1
 8007c2c:	333c      	adds	r3, #60	@ 0x3c
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d10a      	bne.n	8007c4a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007c34:	78fa      	ldrb	r2, [r7, #3]
 8007c36:	6879      	ldr	r1, [r7, #4]
 8007c38:	4613      	mov	r3, r2
 8007c3a:	011b      	lsls	r3, r3, #4
 8007c3c:	1a9b      	subs	r3, r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	440b      	add	r3, r1
 8007c42:	332a      	adds	r3, #42	@ 0x2a
 8007c44:	2200      	movs	r2, #0
 8007c46:	701a      	strb	r2, [r3, #0]
      break;
 8007c48:	e0a1      	b.n	8007d8e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007c4a:	78fa      	ldrb	r2, [r7, #3]
 8007c4c:	6879      	ldr	r1, [r7, #4]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	011b      	lsls	r3, r3, #4
 8007c52:	1a9b      	subs	r3, r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	440b      	add	r3, r1
 8007c58:	332a      	adds	r3, #42	@ 0x2a
 8007c5a:	2202      	movs	r2, #2
 8007c5c:	701a      	strb	r2, [r3, #0]
      break;
 8007c5e:	e096      	b.n	8007d8e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8007c60:	78bb      	ldrb	r3, [r7, #2]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d120      	bne.n	8007ca8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8007c66:	78fa      	ldrb	r2, [r7, #3]
 8007c68:	6879      	ldr	r1, [r7, #4]
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	011b      	lsls	r3, r3, #4
 8007c6e:	1a9b      	subs	r3, r3, r2
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	440b      	add	r3, r1
 8007c74:	333d      	adds	r3, #61	@ 0x3d
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10a      	bne.n	8007c92 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007c7c:	78fa      	ldrb	r2, [r7, #3]
 8007c7e:	6879      	ldr	r1, [r7, #4]
 8007c80:	4613      	mov	r3, r2
 8007c82:	011b      	lsls	r3, r3, #4
 8007c84:	1a9b      	subs	r3, r3, r2
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	440b      	add	r3, r1
 8007c8a:	332a      	adds	r3, #42	@ 0x2a
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8007c90:	e07e      	b.n	8007d90 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007c92:	78fa      	ldrb	r2, [r7, #3]
 8007c94:	6879      	ldr	r1, [r7, #4]
 8007c96:	4613      	mov	r3, r2
 8007c98:	011b      	lsls	r3, r3, #4
 8007c9a:	1a9b      	subs	r3, r3, r2
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	440b      	add	r3, r1
 8007ca0:	332a      	adds	r3, #42	@ 0x2a
 8007ca2:	2202      	movs	r2, #2
 8007ca4:	701a      	strb	r2, [r3, #0]
      break;
 8007ca6:	e073      	b.n	8007d90 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8007ca8:	78fa      	ldrb	r2, [r7, #3]
 8007caa:	6879      	ldr	r1, [r7, #4]
 8007cac:	4613      	mov	r3, r2
 8007cae:	011b      	lsls	r3, r3, #4
 8007cb0:	1a9b      	subs	r3, r3, r2
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	440b      	add	r3, r1
 8007cb6:	333c      	adds	r3, #60	@ 0x3c
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d10a      	bne.n	8007cd4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007cbe:	78fa      	ldrb	r2, [r7, #3]
 8007cc0:	6879      	ldr	r1, [r7, #4]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	011b      	lsls	r3, r3, #4
 8007cc6:	1a9b      	subs	r3, r3, r2
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	440b      	add	r3, r1
 8007ccc:	332a      	adds	r3, #42	@ 0x2a
 8007cce:	2200      	movs	r2, #0
 8007cd0:	701a      	strb	r2, [r3, #0]
      break;
 8007cd2:	e05d      	b.n	8007d90 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007cd4:	78fa      	ldrb	r2, [r7, #3]
 8007cd6:	6879      	ldr	r1, [r7, #4]
 8007cd8:	4613      	mov	r3, r2
 8007cda:	011b      	lsls	r3, r3, #4
 8007cdc:	1a9b      	subs	r3, r3, r2
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	440b      	add	r3, r1
 8007ce2:	332a      	adds	r3, #42	@ 0x2a
 8007ce4:	2202      	movs	r2, #2
 8007ce6:	701a      	strb	r2, [r3, #0]
      break;
 8007ce8:	e052      	b.n	8007d90 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8007cea:	78bb      	ldrb	r3, [r7, #2]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d120      	bne.n	8007d32 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8007cf0:	78fa      	ldrb	r2, [r7, #3]
 8007cf2:	6879      	ldr	r1, [r7, #4]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	011b      	lsls	r3, r3, #4
 8007cf8:	1a9b      	subs	r3, r3, r2
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	440b      	add	r3, r1
 8007cfe:	333d      	adds	r3, #61	@ 0x3d
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d10a      	bne.n	8007d1c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007d06:	78fa      	ldrb	r2, [r7, #3]
 8007d08:	6879      	ldr	r1, [r7, #4]
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	011b      	lsls	r3, r3, #4
 8007d0e:	1a9b      	subs	r3, r3, r2
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	440b      	add	r3, r1
 8007d14:	332a      	adds	r3, #42	@ 0x2a
 8007d16:	2200      	movs	r2, #0
 8007d18:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8007d1a:	e039      	b.n	8007d90 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007d1c:	78fa      	ldrb	r2, [r7, #3]
 8007d1e:	6879      	ldr	r1, [r7, #4]
 8007d20:	4613      	mov	r3, r2
 8007d22:	011b      	lsls	r3, r3, #4
 8007d24:	1a9b      	subs	r3, r3, r2
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	440b      	add	r3, r1
 8007d2a:	332a      	adds	r3, #42	@ 0x2a
 8007d2c:	2202      	movs	r2, #2
 8007d2e:	701a      	strb	r2, [r3, #0]
      break;
 8007d30:	e02e      	b.n	8007d90 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8007d32:	78fa      	ldrb	r2, [r7, #3]
 8007d34:	6879      	ldr	r1, [r7, #4]
 8007d36:	4613      	mov	r3, r2
 8007d38:	011b      	lsls	r3, r3, #4
 8007d3a:	1a9b      	subs	r3, r3, r2
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	440b      	add	r3, r1
 8007d40:	333c      	adds	r3, #60	@ 0x3c
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d10a      	bne.n	8007d5e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007d48:	78fa      	ldrb	r2, [r7, #3]
 8007d4a:	6879      	ldr	r1, [r7, #4]
 8007d4c:	4613      	mov	r3, r2
 8007d4e:	011b      	lsls	r3, r3, #4
 8007d50:	1a9b      	subs	r3, r3, r2
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	440b      	add	r3, r1
 8007d56:	332a      	adds	r3, #42	@ 0x2a
 8007d58:	2200      	movs	r2, #0
 8007d5a:	701a      	strb	r2, [r3, #0]
      break;
 8007d5c:	e018      	b.n	8007d90 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007d5e:	78fa      	ldrb	r2, [r7, #3]
 8007d60:	6879      	ldr	r1, [r7, #4]
 8007d62:	4613      	mov	r3, r2
 8007d64:	011b      	lsls	r3, r3, #4
 8007d66:	1a9b      	subs	r3, r3, r2
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	440b      	add	r3, r1
 8007d6c:	332a      	adds	r3, #42	@ 0x2a
 8007d6e:	2202      	movs	r2, #2
 8007d70:	701a      	strb	r2, [r3, #0]
      break;
 8007d72:	e00d      	b.n	8007d90 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007d74:	78fa      	ldrb	r2, [r7, #3]
 8007d76:	6879      	ldr	r1, [r7, #4]
 8007d78:	4613      	mov	r3, r2
 8007d7a:	011b      	lsls	r3, r3, #4
 8007d7c:	1a9b      	subs	r3, r3, r2
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	440b      	add	r3, r1
 8007d82:	332a      	adds	r3, #42	@ 0x2a
 8007d84:	2200      	movs	r2, #0
 8007d86:	701a      	strb	r2, [r3, #0]
      break;
 8007d88:	e002      	b.n	8007d90 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8007d8a:	bf00      	nop
 8007d8c:	e000      	b.n	8007d90 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8007d8e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8007d90:	78fa      	ldrb	r2, [r7, #3]
 8007d92:	6879      	ldr	r1, [r7, #4]
 8007d94:	4613      	mov	r3, r2
 8007d96:	011b      	lsls	r3, r3, #4
 8007d98:	1a9b      	subs	r3, r3, r2
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	440b      	add	r3, r1
 8007d9e:	332c      	adds	r3, #44	@ 0x2c
 8007da0:	697a      	ldr	r2, [r7, #20]
 8007da2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8007da4:	78fa      	ldrb	r2, [r7, #3]
 8007da6:	8b39      	ldrh	r1, [r7, #24]
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	4613      	mov	r3, r2
 8007dac:	011b      	lsls	r3, r3, #4
 8007dae:	1a9b      	subs	r3, r3, r2
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	4403      	add	r3, r0
 8007db4:	3334      	adds	r3, #52	@ 0x34
 8007db6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8007db8:	78fa      	ldrb	r2, [r7, #3]
 8007dba:	6879      	ldr	r1, [r7, #4]
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	011b      	lsls	r3, r3, #4
 8007dc0:	1a9b      	subs	r3, r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	440b      	add	r3, r1
 8007dc6:	334c      	adds	r3, #76	@ 0x4c
 8007dc8:	2200      	movs	r2, #0
 8007dca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8007dcc:	78fa      	ldrb	r2, [r7, #3]
 8007dce:	6879      	ldr	r1, [r7, #4]
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	011b      	lsls	r3, r3, #4
 8007dd4:	1a9b      	subs	r3, r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	440b      	add	r3, r1
 8007dda:	3338      	adds	r3, #56	@ 0x38
 8007ddc:	2200      	movs	r2, #0
 8007dde:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8007de0:	78fa      	ldrb	r2, [r7, #3]
 8007de2:	6879      	ldr	r1, [r7, #4]
 8007de4:	4613      	mov	r3, r2
 8007de6:	011b      	lsls	r3, r3, #4
 8007de8:	1a9b      	subs	r3, r3, r2
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	440b      	add	r3, r1
 8007dee:	3315      	adds	r3, #21
 8007df0:	78fa      	ldrb	r2, [r7, #3]
 8007df2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8007df4:	78fa      	ldrb	r2, [r7, #3]
 8007df6:	6879      	ldr	r1, [r7, #4]
 8007df8:	4613      	mov	r3, r2
 8007dfa:	011b      	lsls	r3, r3, #4
 8007dfc:	1a9b      	subs	r3, r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	440b      	add	r3, r1
 8007e02:	334d      	adds	r3, #77	@ 0x4d
 8007e04:	2200      	movs	r2, #0
 8007e06:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6818      	ldr	r0, [r3, #0]
 8007e0c:	78fa      	ldrb	r2, [r7, #3]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	011b      	lsls	r3, r3, #4
 8007e12:	1a9b      	subs	r3, r3, r2
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	3310      	adds	r3, #16
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	1d19      	adds	r1, r3, #4
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	799b      	ldrb	r3, [r3, #6]
 8007e22:	461a      	mov	r2, r3
 8007e24:	f009 fede 	bl	8011be4 <USB_HC_StartXfer>
 8007e28:	4603      	mov	r3, r0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop

08007e34 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b086      	sub	sp, #24
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f009 fbd8 	bl	8011600 <USB_GetMode>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	f040 80fb 	bne.w	800804e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f009 fb9b 	bl	8011598 <USB_ReadInterrupts>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	f000 80f1 	beq.w	800804c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f009 fb92 	bl	8011598 <USB_ReadInterrupts>
 8007e74:	4603      	mov	r3, r0
 8007e76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007e7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e7e:	d104      	bne.n	8007e8a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8007e88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f009 fb82 	bl	8011598 <USB_ReadInterrupts>
 8007e94:	4603      	mov	r3, r0
 8007e96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e9e:	d104      	bne.n	8007eaa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007ea8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f009 fb72 	bl	8011598 <USB_ReadInterrupts>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007eba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007ebe:	d104      	bne.n	8007eca <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007ec8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f009 fb62 	bl	8011598 <USB_ReadInterrupts>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	f003 0302 	and.w	r3, r3, #2
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d103      	bne.n	8007ee6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4618      	mov	r0, r3
 8007eec:	f009 fb54 	bl	8011598 <USB_ReadInterrupts>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ef6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007efa:	d120      	bne.n	8007f3e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8007f04:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d113      	bne.n	8007f3e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8007f16:	2110      	movs	r1, #16
 8007f18:	6938      	ldr	r0, [r7, #16]
 8007f1a:	f009 fa47 	bl	80113ac <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8007f1e:	6938      	ldr	r0, [r7, #16]
 8007f20:	f009 fa76 	bl	8011410 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	7a5b      	ldrb	r3, [r3, #9]
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d105      	bne.n	8007f38 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2101      	movs	r1, #1
 8007f32:	4618      	mov	r0, r3
 8007f34:	f009 fc62 	bl	80117fc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f012 fee9 	bl	801ad10 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4618      	mov	r0, r3
 8007f44:	f009 fb28 	bl	8011598 <USB_ReadInterrupts>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007f4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f52:	d102      	bne.n	8007f5a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f001 fd4d 	bl	80099f4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f009 fb1a 	bl	8011598 <USB_ReadInterrupts>
 8007f64:	4603      	mov	r3, r0
 8007f66:	f003 0308 	and.w	r3, r3, #8
 8007f6a:	2b08      	cmp	r3, #8
 8007f6c:	d106      	bne.n	8007f7c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f012 feb2 	bl	801acd8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2208      	movs	r2, #8
 8007f7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4618      	mov	r0, r3
 8007f82:	f009 fb09 	bl	8011598 <USB_ReadInterrupts>
 8007f86:	4603      	mov	r3, r0
 8007f88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f90:	d139      	bne.n	8008006 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4618      	mov	r0, r3
 8007f98:	f00a f89e 	bl	80120d8 <USB_HC_ReadInterrupt>
 8007f9c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	617b      	str	r3, [r7, #20]
 8007fa2:	e025      	b.n	8007ff0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	f003 030f 	and.w	r3, r3, #15
 8007faa:	68ba      	ldr	r2, [r7, #8]
 8007fac:	fa22 f303 	lsr.w	r3, r2, r3
 8007fb0:	f003 0301 	and.w	r3, r3, #1
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d018      	beq.n	8007fea <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	015a      	lsls	r2, r3, #5
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007fca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fce:	d106      	bne.n	8007fde <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f905 	bl	80081e6 <HCD_HC_IN_IRQHandler>
 8007fdc:	e005      	b.n	8007fea <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 ff67 	bl	8008eb8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	3301      	adds	r3, #1
 8007fee:	617b      	str	r3, [r7, #20]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	795b      	ldrb	r3, [r3, #5]
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d3d3      	bcc.n	8007fa4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8008004:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4618      	mov	r0, r3
 800800c:	f009 fac4 	bl	8011598 <USB_ReadInterrupts>
 8008010:	4603      	mov	r3, r0
 8008012:	f003 0310 	and.w	r3, r3, #16
 8008016:	2b10      	cmp	r3, #16
 8008018:	d101      	bne.n	800801e <HAL_HCD_IRQHandler+0x1ea>
 800801a:	2301      	movs	r3, #1
 800801c:	e000      	b.n	8008020 <HAL_HCD_IRQHandler+0x1ec>
 800801e:	2300      	movs	r3, #0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d014      	beq.n	800804e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	699a      	ldr	r2, [r3, #24]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f022 0210 	bic.w	r2, r2, #16
 8008032:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f001 fbfe 	bl	8009836 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	699a      	ldr	r2, [r3, #24]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f042 0210 	orr.w	r2, r2, #16
 8008048:	619a      	str	r2, [r3, #24]
 800804a:	e000      	b.n	800804e <HAL_HCD_IRQHandler+0x21a>
      return;
 800804c:	bf00      	nop
    }
  }
}
 800804e:	3718      	adds	r7, #24
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8008062:	2b01      	cmp	r3, #1
 8008064:	d101      	bne.n	800806a <HAL_HCD_Start+0x16>
 8008066:	2302      	movs	r3, #2
 8008068:	e013      	b.n	8008092 <HAL_HCD_Start+0x3e>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2201      	movs	r2, #1
 800806e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2101      	movs	r1, #1
 8008078:	4618      	mov	r0, r3
 800807a:	f009 fc26 	bl	80118ca <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4618      	mov	r0, r3
 8008084:	f009 f924 	bl	80112d0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	3708      	adds	r7, #8
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b082      	sub	sp, #8
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d101      	bne.n	80080b0 <HAL_HCD_Stop+0x16>
 80080ac:	2302      	movs	r3, #2
 80080ae:	e00d      	b.n	80080cc <HAL_HCD_Stop+0x32>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4618      	mov	r0, r3
 80080be:	f00a f979 	bl	80123b4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3708      	adds	r7, #8
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f009 fbc8 	bl	8011876 <USB_ResetPort>
 80080e6:	4603      	mov	r3, r0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3708      	adds	r7, #8
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	460b      	mov	r3, r1
 80080fa:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80080fc:	78fa      	ldrb	r2, [r7, #3]
 80080fe:	6879      	ldr	r1, [r7, #4]
 8008100:	4613      	mov	r3, r2
 8008102:	011b      	lsls	r3, r3, #4
 8008104:	1a9b      	subs	r3, r3, r2
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	440b      	add	r3, r1
 800810a:	334c      	adds	r3, #76	@ 0x4c
 800810c:	781b      	ldrb	r3, [r3, #0]
}
 800810e:	4618      	mov	r0, r3
 8008110:	370c      	adds	r7, #12
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr

0800811a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800811a:	b480      	push	{r7}
 800811c:	b083      	sub	sp, #12
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
 8008122:	460b      	mov	r3, r1
 8008124:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8008126:	78fa      	ldrb	r2, [r7, #3]
 8008128:	6879      	ldr	r1, [r7, #4]
 800812a:	4613      	mov	r3, r2
 800812c:	011b      	lsls	r3, r3, #4
 800812e:	1a9b      	subs	r3, r3, r2
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	440b      	add	r3, r1
 8008134:	3338      	adds	r3, #56	@ 0x38
 8008136:	681b      	ldr	r3, [r3, #0]
}
 8008138:	4618      	mov	r0, r3
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4618      	mov	r0, r3
 8008152:	f009 fc0a 	bl	801196a <USB_GetCurrentFrame>
 8008156:	4603      	mov	r3, r0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4618      	mov	r0, r3
 800816e:	f009 fbe5 	bl	801193c <USB_GetHostSpeed>
 8008172:	4603      	mov	r3, r0
}
 8008174:	4618      	mov	r0, r3
 8008176:	3708      	adds	r7, #8
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	460b      	mov	r3, r1
 8008186:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8008188:	78fa      	ldrb	r2, [r7, #3]
 800818a:	6879      	ldr	r1, [r7, #4]
 800818c:	4613      	mov	r3, r2
 800818e:	011b      	lsls	r3, r3, #4
 8008190:	1a9b      	subs	r3, r3, r2
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	440b      	add	r3, r1
 8008196:	331a      	adds	r3, #26
 8008198:	2200      	movs	r2, #0
 800819a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800819c:	78fa      	ldrb	r2, [r7, #3]
 800819e:	6879      	ldr	r1, [r7, #4]
 80081a0:	4613      	mov	r3, r2
 80081a2:	011b      	lsls	r3, r3, #4
 80081a4:	1a9b      	subs	r3, r3, r2
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	440b      	add	r3, r1
 80081aa:	331b      	adds	r3, #27
 80081ac:	2200      	movs	r2, #0
 80081ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80081b0:	78fa      	ldrb	r2, [r7, #3]
 80081b2:	6879      	ldr	r1, [r7, #4]
 80081b4:	4613      	mov	r3, r2
 80081b6:	011b      	lsls	r3, r3, #4
 80081b8:	1a9b      	subs	r3, r3, r2
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	440b      	add	r3, r1
 80081be:	3325      	adds	r3, #37	@ 0x25
 80081c0:	2200      	movs	r2, #0
 80081c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80081c4:	78fa      	ldrb	r2, [r7, #3]
 80081c6:	6879      	ldr	r1, [r7, #4]
 80081c8:	4613      	mov	r3, r2
 80081ca:	011b      	lsls	r3, r3, #4
 80081cc:	1a9b      	subs	r3, r3, r2
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	440b      	add	r3, r1
 80081d2:	3324      	adds	r3, #36	@ 0x24
 80081d4:	2200      	movs	r2, #0
 80081d6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	370c      	adds	r7, #12
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr

080081e6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80081e6:	b580      	push	{r7, lr}
 80081e8:	b086      	sub	sp, #24
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	460b      	mov	r3, r1
 80081f0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	78fa      	ldrb	r2, [r7, #3]
 8008202:	4611      	mov	r1, r2
 8008204:	4618      	mov	r0, r3
 8008206:	f009 f9da 	bl	80115be <USB_ReadChInterrupts>
 800820a:	4603      	mov	r3, r0
 800820c:	f003 0304 	and.w	r3, r3, #4
 8008210:	2b04      	cmp	r3, #4
 8008212:	d11a      	bne.n	800824a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8008214:	78fb      	ldrb	r3, [r7, #3]
 8008216:	015a      	lsls	r2, r3, #5
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	4413      	add	r3, r2
 800821c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008220:	461a      	mov	r2, r3
 8008222:	2304      	movs	r3, #4
 8008224:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8008226:	78fa      	ldrb	r2, [r7, #3]
 8008228:	6879      	ldr	r1, [r7, #4]
 800822a:	4613      	mov	r3, r2
 800822c:	011b      	lsls	r3, r3, #4
 800822e:	1a9b      	subs	r3, r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	440b      	add	r3, r1
 8008234:	334d      	adds	r3, #77	@ 0x4d
 8008236:	2207      	movs	r2, #7
 8008238:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	78fa      	ldrb	r2, [r7, #3]
 8008240:	4611      	mov	r1, r2
 8008242:	4618      	mov	r0, r3
 8008244:	f009 ff59 	bl	80120fa <USB_HC_Halt>
 8008248:	e09e      	b.n	8008388 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	78fa      	ldrb	r2, [r7, #3]
 8008250:	4611      	mov	r1, r2
 8008252:	4618      	mov	r0, r3
 8008254:	f009 f9b3 	bl	80115be <USB_ReadChInterrupts>
 8008258:	4603      	mov	r3, r0
 800825a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800825e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008262:	d11b      	bne.n	800829c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8008264:	78fb      	ldrb	r3, [r7, #3]
 8008266:	015a      	lsls	r2, r3, #5
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	4413      	add	r3, r2
 800826c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008270:	461a      	mov	r2, r3
 8008272:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008276:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8008278:	78fa      	ldrb	r2, [r7, #3]
 800827a:	6879      	ldr	r1, [r7, #4]
 800827c:	4613      	mov	r3, r2
 800827e:	011b      	lsls	r3, r3, #4
 8008280:	1a9b      	subs	r3, r3, r2
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	440b      	add	r3, r1
 8008286:	334d      	adds	r3, #77	@ 0x4d
 8008288:	2208      	movs	r2, #8
 800828a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	78fa      	ldrb	r2, [r7, #3]
 8008292:	4611      	mov	r1, r2
 8008294:	4618      	mov	r0, r3
 8008296:	f009 ff30 	bl	80120fa <USB_HC_Halt>
 800829a:	e075      	b.n	8008388 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	78fa      	ldrb	r2, [r7, #3]
 80082a2:	4611      	mov	r1, r2
 80082a4:	4618      	mov	r0, r3
 80082a6:	f009 f98a 	bl	80115be <USB_ReadChInterrupts>
 80082aa:	4603      	mov	r3, r0
 80082ac:	f003 0308 	and.w	r3, r3, #8
 80082b0:	2b08      	cmp	r3, #8
 80082b2:	d11a      	bne.n	80082ea <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80082b4:	78fb      	ldrb	r3, [r7, #3]
 80082b6:	015a      	lsls	r2, r3, #5
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	4413      	add	r3, r2
 80082bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082c0:	461a      	mov	r2, r3
 80082c2:	2308      	movs	r3, #8
 80082c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80082c6:	78fa      	ldrb	r2, [r7, #3]
 80082c8:	6879      	ldr	r1, [r7, #4]
 80082ca:	4613      	mov	r3, r2
 80082cc:	011b      	lsls	r3, r3, #4
 80082ce:	1a9b      	subs	r3, r3, r2
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	440b      	add	r3, r1
 80082d4:	334d      	adds	r3, #77	@ 0x4d
 80082d6:	2206      	movs	r2, #6
 80082d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	78fa      	ldrb	r2, [r7, #3]
 80082e0:	4611      	mov	r1, r2
 80082e2:	4618      	mov	r0, r3
 80082e4:	f009 ff09 	bl	80120fa <USB_HC_Halt>
 80082e8:	e04e      	b.n	8008388 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	78fa      	ldrb	r2, [r7, #3]
 80082f0:	4611      	mov	r1, r2
 80082f2:	4618      	mov	r0, r3
 80082f4:	f009 f963 	bl	80115be <USB_ReadChInterrupts>
 80082f8:	4603      	mov	r3, r0
 80082fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80082fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008302:	d11b      	bne.n	800833c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8008304:	78fb      	ldrb	r3, [r7, #3]
 8008306:	015a      	lsls	r2, r3, #5
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	4413      	add	r3, r2
 800830c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008310:	461a      	mov	r2, r3
 8008312:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008316:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8008318:	78fa      	ldrb	r2, [r7, #3]
 800831a:	6879      	ldr	r1, [r7, #4]
 800831c:	4613      	mov	r3, r2
 800831e:	011b      	lsls	r3, r3, #4
 8008320:	1a9b      	subs	r3, r3, r2
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	440b      	add	r3, r1
 8008326:	334d      	adds	r3, #77	@ 0x4d
 8008328:	2209      	movs	r2, #9
 800832a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	78fa      	ldrb	r2, [r7, #3]
 8008332:	4611      	mov	r1, r2
 8008334:	4618      	mov	r0, r3
 8008336:	f009 fee0 	bl	80120fa <USB_HC_Halt>
 800833a:	e025      	b.n	8008388 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	78fa      	ldrb	r2, [r7, #3]
 8008342:	4611      	mov	r1, r2
 8008344:	4618      	mov	r0, r3
 8008346:	f009 f93a 	bl	80115be <USB_ReadChInterrupts>
 800834a:	4603      	mov	r3, r0
 800834c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008350:	2b80      	cmp	r3, #128	@ 0x80
 8008352:	d119      	bne.n	8008388 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8008354:	78fb      	ldrb	r3, [r7, #3]
 8008356:	015a      	lsls	r2, r3, #5
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	4413      	add	r3, r2
 800835c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008360:	461a      	mov	r2, r3
 8008362:	2380      	movs	r3, #128	@ 0x80
 8008364:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8008366:	78fa      	ldrb	r2, [r7, #3]
 8008368:	6879      	ldr	r1, [r7, #4]
 800836a:	4613      	mov	r3, r2
 800836c:	011b      	lsls	r3, r3, #4
 800836e:	1a9b      	subs	r3, r3, r2
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	440b      	add	r3, r1
 8008374:	334d      	adds	r3, #77	@ 0x4d
 8008376:	2207      	movs	r2, #7
 8008378:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	78fa      	ldrb	r2, [r7, #3]
 8008380:	4611      	mov	r1, r2
 8008382:	4618      	mov	r0, r3
 8008384:	f009 feb9 	bl	80120fa <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	78fa      	ldrb	r2, [r7, #3]
 800838e:	4611      	mov	r1, r2
 8008390:	4618      	mov	r0, r3
 8008392:	f009 f914 	bl	80115be <USB_ReadChInterrupts>
 8008396:	4603      	mov	r3, r0
 8008398:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800839c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083a0:	d112      	bne.n	80083c8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	78fa      	ldrb	r2, [r7, #3]
 80083a8:	4611      	mov	r1, r2
 80083aa:	4618      	mov	r0, r3
 80083ac:	f009 fea5 	bl	80120fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80083b0:	78fb      	ldrb	r3, [r7, #3]
 80083b2:	015a      	lsls	r2, r3, #5
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	4413      	add	r3, r2
 80083b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083bc:	461a      	mov	r2, r3
 80083be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80083c2:	6093      	str	r3, [r2, #8]
 80083c4:	f000 bd75 	b.w	8008eb2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	78fa      	ldrb	r2, [r7, #3]
 80083ce:	4611      	mov	r1, r2
 80083d0:	4618      	mov	r0, r3
 80083d2:	f009 f8f4 	bl	80115be <USB_ReadChInterrupts>
 80083d6:	4603      	mov	r3, r0
 80083d8:	f003 0301 	and.w	r3, r3, #1
 80083dc:	2b01      	cmp	r3, #1
 80083de:	f040 8128 	bne.w	8008632 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80083e2:	78fb      	ldrb	r3, [r7, #3]
 80083e4:	015a      	lsls	r2, r3, #5
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	4413      	add	r3, r2
 80083ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083ee:	461a      	mov	r2, r3
 80083f0:	2320      	movs	r3, #32
 80083f2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80083f4:	78fa      	ldrb	r2, [r7, #3]
 80083f6:	6879      	ldr	r1, [r7, #4]
 80083f8:	4613      	mov	r3, r2
 80083fa:	011b      	lsls	r3, r3, #4
 80083fc:	1a9b      	subs	r3, r3, r2
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	440b      	add	r3, r1
 8008402:	331b      	adds	r3, #27
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	2b01      	cmp	r3, #1
 8008408:	d119      	bne.n	800843e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800840a:	78fa      	ldrb	r2, [r7, #3]
 800840c:	6879      	ldr	r1, [r7, #4]
 800840e:	4613      	mov	r3, r2
 8008410:	011b      	lsls	r3, r3, #4
 8008412:	1a9b      	subs	r3, r3, r2
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	440b      	add	r3, r1
 8008418:	331b      	adds	r3, #27
 800841a:	2200      	movs	r2, #0
 800841c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800841e:	78fb      	ldrb	r3, [r7, #3]
 8008420:	015a      	lsls	r2, r3, #5
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	4413      	add	r3, r2
 8008426:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	78fa      	ldrb	r2, [r7, #3]
 800842e:	0151      	lsls	r1, r2, #5
 8008430:	693a      	ldr	r2, [r7, #16]
 8008432:	440a      	add	r2, r1
 8008434:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008438:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800843c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	799b      	ldrb	r3, [r3, #6]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d01b      	beq.n	800847e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8008446:	78fa      	ldrb	r2, [r7, #3]
 8008448:	6879      	ldr	r1, [r7, #4]
 800844a:	4613      	mov	r3, r2
 800844c:	011b      	lsls	r3, r3, #4
 800844e:	1a9b      	subs	r3, r3, r2
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	440b      	add	r3, r1
 8008454:	3330      	adds	r3, #48	@ 0x30
 8008456:	6819      	ldr	r1, [r3, #0]
 8008458:	78fb      	ldrb	r3, [r7, #3]
 800845a:	015a      	lsls	r2, r3, #5
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	4413      	add	r3, r2
 8008460:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008464:	691b      	ldr	r3, [r3, #16]
 8008466:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800846a:	78fa      	ldrb	r2, [r7, #3]
 800846c:	1ac9      	subs	r1, r1, r3
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	4613      	mov	r3, r2
 8008472:	011b      	lsls	r3, r3, #4
 8008474:	1a9b      	subs	r3, r3, r2
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	4403      	add	r3, r0
 800847a:	3338      	adds	r3, #56	@ 0x38
 800847c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800847e:	78fa      	ldrb	r2, [r7, #3]
 8008480:	6879      	ldr	r1, [r7, #4]
 8008482:	4613      	mov	r3, r2
 8008484:	011b      	lsls	r3, r3, #4
 8008486:	1a9b      	subs	r3, r3, r2
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	440b      	add	r3, r1
 800848c:	334d      	adds	r3, #77	@ 0x4d
 800848e:	2201      	movs	r2, #1
 8008490:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8008492:	78fa      	ldrb	r2, [r7, #3]
 8008494:	6879      	ldr	r1, [r7, #4]
 8008496:	4613      	mov	r3, r2
 8008498:	011b      	lsls	r3, r3, #4
 800849a:	1a9b      	subs	r3, r3, r2
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	440b      	add	r3, r1
 80084a0:	3344      	adds	r3, #68	@ 0x44
 80084a2:	2200      	movs	r2, #0
 80084a4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80084a6:	78fb      	ldrb	r3, [r7, #3]
 80084a8:	015a      	lsls	r2, r3, #5
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	4413      	add	r3, r2
 80084ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084b2:	461a      	mov	r2, r3
 80084b4:	2301      	movs	r3, #1
 80084b6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80084b8:	78fa      	ldrb	r2, [r7, #3]
 80084ba:	6879      	ldr	r1, [r7, #4]
 80084bc:	4613      	mov	r3, r2
 80084be:	011b      	lsls	r3, r3, #4
 80084c0:	1a9b      	subs	r3, r3, r2
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	440b      	add	r3, r1
 80084c6:	3326      	adds	r3, #38	@ 0x26
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00a      	beq.n	80084e4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80084ce:	78fa      	ldrb	r2, [r7, #3]
 80084d0:	6879      	ldr	r1, [r7, #4]
 80084d2:	4613      	mov	r3, r2
 80084d4:	011b      	lsls	r3, r3, #4
 80084d6:	1a9b      	subs	r3, r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	440b      	add	r3, r1
 80084dc:	3326      	adds	r3, #38	@ 0x26
 80084de:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	d110      	bne.n	8008506 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	78fa      	ldrb	r2, [r7, #3]
 80084ea:	4611      	mov	r1, r2
 80084ec:	4618      	mov	r0, r3
 80084ee:	f009 fe04 	bl	80120fa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80084f2:	78fb      	ldrb	r3, [r7, #3]
 80084f4:	015a      	lsls	r2, r3, #5
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	4413      	add	r3, r2
 80084fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084fe:	461a      	mov	r2, r3
 8008500:	2310      	movs	r3, #16
 8008502:	6093      	str	r3, [r2, #8]
 8008504:	e03d      	b.n	8008582 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8008506:	78fa      	ldrb	r2, [r7, #3]
 8008508:	6879      	ldr	r1, [r7, #4]
 800850a:	4613      	mov	r3, r2
 800850c:	011b      	lsls	r3, r3, #4
 800850e:	1a9b      	subs	r3, r3, r2
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	440b      	add	r3, r1
 8008514:	3326      	adds	r3, #38	@ 0x26
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	2b03      	cmp	r3, #3
 800851a:	d00a      	beq.n	8008532 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800851c:	78fa      	ldrb	r2, [r7, #3]
 800851e:	6879      	ldr	r1, [r7, #4]
 8008520:	4613      	mov	r3, r2
 8008522:	011b      	lsls	r3, r3, #4
 8008524:	1a9b      	subs	r3, r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	440b      	add	r3, r1
 800852a:	3326      	adds	r3, #38	@ 0x26
 800852c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800852e:	2b01      	cmp	r3, #1
 8008530:	d127      	bne.n	8008582 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008532:	78fb      	ldrb	r3, [r7, #3]
 8008534:	015a      	lsls	r2, r3, #5
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	4413      	add	r3, r2
 800853a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	78fa      	ldrb	r2, [r7, #3]
 8008542:	0151      	lsls	r1, r2, #5
 8008544:	693a      	ldr	r2, [r7, #16]
 8008546:	440a      	add	r2, r1
 8008548:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800854c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008550:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8008552:	78fa      	ldrb	r2, [r7, #3]
 8008554:	6879      	ldr	r1, [r7, #4]
 8008556:	4613      	mov	r3, r2
 8008558:	011b      	lsls	r3, r3, #4
 800855a:	1a9b      	subs	r3, r3, r2
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	440b      	add	r3, r1
 8008560:	334c      	adds	r3, #76	@ 0x4c
 8008562:	2201      	movs	r2, #1
 8008564:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8008566:	78fa      	ldrb	r2, [r7, #3]
 8008568:	6879      	ldr	r1, [r7, #4]
 800856a:	4613      	mov	r3, r2
 800856c:	011b      	lsls	r3, r3, #4
 800856e:	1a9b      	subs	r3, r3, r2
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	440b      	add	r3, r1
 8008574:	334c      	adds	r3, #76	@ 0x4c
 8008576:	781a      	ldrb	r2, [r3, #0]
 8008578:	78fb      	ldrb	r3, [r7, #3]
 800857a:	4619      	mov	r1, r3
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f012 fbd5 	bl	801ad2c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	799b      	ldrb	r3, [r3, #6]
 8008586:	2b01      	cmp	r3, #1
 8008588:	d13b      	bne.n	8008602 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800858a:	78fa      	ldrb	r2, [r7, #3]
 800858c:	6879      	ldr	r1, [r7, #4]
 800858e:	4613      	mov	r3, r2
 8008590:	011b      	lsls	r3, r3, #4
 8008592:	1a9b      	subs	r3, r3, r2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	440b      	add	r3, r1
 8008598:	3338      	adds	r3, #56	@ 0x38
 800859a:	6819      	ldr	r1, [r3, #0]
 800859c:	78fa      	ldrb	r2, [r7, #3]
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	4613      	mov	r3, r2
 80085a2:	011b      	lsls	r3, r3, #4
 80085a4:	1a9b      	subs	r3, r3, r2
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	4403      	add	r3, r0
 80085aa:	3328      	adds	r3, #40	@ 0x28
 80085ac:	881b      	ldrh	r3, [r3, #0]
 80085ae:	440b      	add	r3, r1
 80085b0:	1e59      	subs	r1, r3, #1
 80085b2:	78fa      	ldrb	r2, [r7, #3]
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	4613      	mov	r3, r2
 80085b8:	011b      	lsls	r3, r3, #4
 80085ba:	1a9b      	subs	r3, r3, r2
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	4403      	add	r3, r0
 80085c0:	3328      	adds	r3, #40	@ 0x28
 80085c2:	881b      	ldrh	r3, [r3, #0]
 80085c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80085c8:	f003 0301 	and.w	r3, r3, #1
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	f000 8470 	beq.w	8008eb2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80085d2:	78fa      	ldrb	r2, [r7, #3]
 80085d4:	6879      	ldr	r1, [r7, #4]
 80085d6:	4613      	mov	r3, r2
 80085d8:	011b      	lsls	r3, r3, #4
 80085da:	1a9b      	subs	r3, r3, r2
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	440b      	add	r3, r1
 80085e0:	333c      	adds	r3, #60	@ 0x3c
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	78fa      	ldrb	r2, [r7, #3]
 80085e6:	f083 0301 	eor.w	r3, r3, #1
 80085ea:	b2d8      	uxtb	r0, r3
 80085ec:	6879      	ldr	r1, [r7, #4]
 80085ee:	4613      	mov	r3, r2
 80085f0:	011b      	lsls	r3, r3, #4
 80085f2:	1a9b      	subs	r3, r3, r2
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	440b      	add	r3, r1
 80085f8:	333c      	adds	r3, #60	@ 0x3c
 80085fa:	4602      	mov	r2, r0
 80085fc:	701a      	strb	r2, [r3, #0]
 80085fe:	f000 bc58 	b.w	8008eb2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8008602:	78fa      	ldrb	r2, [r7, #3]
 8008604:	6879      	ldr	r1, [r7, #4]
 8008606:	4613      	mov	r3, r2
 8008608:	011b      	lsls	r3, r3, #4
 800860a:	1a9b      	subs	r3, r3, r2
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	440b      	add	r3, r1
 8008610:	333c      	adds	r3, #60	@ 0x3c
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	78fa      	ldrb	r2, [r7, #3]
 8008616:	f083 0301 	eor.w	r3, r3, #1
 800861a:	b2d8      	uxtb	r0, r3
 800861c:	6879      	ldr	r1, [r7, #4]
 800861e:	4613      	mov	r3, r2
 8008620:	011b      	lsls	r3, r3, #4
 8008622:	1a9b      	subs	r3, r3, r2
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	440b      	add	r3, r1
 8008628:	333c      	adds	r3, #60	@ 0x3c
 800862a:	4602      	mov	r2, r0
 800862c:	701a      	strb	r2, [r3, #0]
 800862e:	f000 bc40 	b.w	8008eb2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	78fa      	ldrb	r2, [r7, #3]
 8008638:	4611      	mov	r1, r2
 800863a:	4618      	mov	r0, r3
 800863c:	f008 ffbf 	bl	80115be <USB_ReadChInterrupts>
 8008640:	4603      	mov	r3, r0
 8008642:	f003 0320 	and.w	r3, r3, #32
 8008646:	2b20      	cmp	r3, #32
 8008648:	d131      	bne.n	80086ae <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800864a:	78fb      	ldrb	r3, [r7, #3]
 800864c:	015a      	lsls	r2, r3, #5
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	4413      	add	r3, r2
 8008652:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008656:	461a      	mov	r2, r3
 8008658:	2320      	movs	r3, #32
 800865a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800865c:	78fa      	ldrb	r2, [r7, #3]
 800865e:	6879      	ldr	r1, [r7, #4]
 8008660:	4613      	mov	r3, r2
 8008662:	011b      	lsls	r3, r3, #4
 8008664:	1a9b      	subs	r3, r3, r2
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	440b      	add	r3, r1
 800866a:	331a      	adds	r3, #26
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	2b01      	cmp	r3, #1
 8008670:	f040 841f 	bne.w	8008eb2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8008674:	78fa      	ldrb	r2, [r7, #3]
 8008676:	6879      	ldr	r1, [r7, #4]
 8008678:	4613      	mov	r3, r2
 800867a:	011b      	lsls	r3, r3, #4
 800867c:	1a9b      	subs	r3, r3, r2
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	440b      	add	r3, r1
 8008682:	331b      	adds	r3, #27
 8008684:	2201      	movs	r2, #1
 8008686:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8008688:	78fa      	ldrb	r2, [r7, #3]
 800868a:	6879      	ldr	r1, [r7, #4]
 800868c:	4613      	mov	r3, r2
 800868e:	011b      	lsls	r3, r3, #4
 8008690:	1a9b      	subs	r3, r3, r2
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	440b      	add	r3, r1
 8008696:	334d      	adds	r3, #77	@ 0x4d
 8008698:	2203      	movs	r2, #3
 800869a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	78fa      	ldrb	r2, [r7, #3]
 80086a2:	4611      	mov	r1, r2
 80086a4:	4618      	mov	r0, r3
 80086a6:	f009 fd28 	bl	80120fa <USB_HC_Halt>
 80086aa:	f000 bc02 	b.w	8008eb2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	78fa      	ldrb	r2, [r7, #3]
 80086b4:	4611      	mov	r1, r2
 80086b6:	4618      	mov	r0, r3
 80086b8:	f008 ff81 	bl	80115be <USB_ReadChInterrupts>
 80086bc:	4603      	mov	r3, r0
 80086be:	f003 0302 	and.w	r3, r3, #2
 80086c2:	2b02      	cmp	r3, #2
 80086c4:	f040 8305 	bne.w	8008cd2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80086c8:	78fb      	ldrb	r3, [r7, #3]
 80086ca:	015a      	lsls	r2, r3, #5
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	4413      	add	r3, r2
 80086d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086d4:	461a      	mov	r2, r3
 80086d6:	2302      	movs	r3, #2
 80086d8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80086da:	78fa      	ldrb	r2, [r7, #3]
 80086dc:	6879      	ldr	r1, [r7, #4]
 80086de:	4613      	mov	r3, r2
 80086e0:	011b      	lsls	r3, r3, #4
 80086e2:	1a9b      	subs	r3, r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	440b      	add	r3, r1
 80086e8:	334d      	adds	r3, #77	@ 0x4d
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d114      	bne.n	800871a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80086f0:	78fa      	ldrb	r2, [r7, #3]
 80086f2:	6879      	ldr	r1, [r7, #4]
 80086f4:	4613      	mov	r3, r2
 80086f6:	011b      	lsls	r3, r3, #4
 80086f8:	1a9b      	subs	r3, r3, r2
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	440b      	add	r3, r1
 80086fe:	334d      	adds	r3, #77	@ 0x4d
 8008700:	2202      	movs	r2, #2
 8008702:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8008704:	78fa      	ldrb	r2, [r7, #3]
 8008706:	6879      	ldr	r1, [r7, #4]
 8008708:	4613      	mov	r3, r2
 800870a:	011b      	lsls	r3, r3, #4
 800870c:	1a9b      	subs	r3, r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	440b      	add	r3, r1
 8008712:	334c      	adds	r3, #76	@ 0x4c
 8008714:	2201      	movs	r2, #1
 8008716:	701a      	strb	r2, [r3, #0]
 8008718:	e2cc      	b.n	8008cb4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800871a:	78fa      	ldrb	r2, [r7, #3]
 800871c:	6879      	ldr	r1, [r7, #4]
 800871e:	4613      	mov	r3, r2
 8008720:	011b      	lsls	r3, r3, #4
 8008722:	1a9b      	subs	r3, r3, r2
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	440b      	add	r3, r1
 8008728:	334d      	adds	r3, #77	@ 0x4d
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	2b06      	cmp	r3, #6
 800872e:	d114      	bne.n	800875a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008730:	78fa      	ldrb	r2, [r7, #3]
 8008732:	6879      	ldr	r1, [r7, #4]
 8008734:	4613      	mov	r3, r2
 8008736:	011b      	lsls	r3, r3, #4
 8008738:	1a9b      	subs	r3, r3, r2
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	440b      	add	r3, r1
 800873e:	334d      	adds	r3, #77	@ 0x4d
 8008740:	2202      	movs	r2, #2
 8008742:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8008744:	78fa      	ldrb	r2, [r7, #3]
 8008746:	6879      	ldr	r1, [r7, #4]
 8008748:	4613      	mov	r3, r2
 800874a:	011b      	lsls	r3, r3, #4
 800874c:	1a9b      	subs	r3, r3, r2
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	440b      	add	r3, r1
 8008752:	334c      	adds	r3, #76	@ 0x4c
 8008754:	2205      	movs	r2, #5
 8008756:	701a      	strb	r2, [r3, #0]
 8008758:	e2ac      	b.n	8008cb4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800875a:	78fa      	ldrb	r2, [r7, #3]
 800875c:	6879      	ldr	r1, [r7, #4]
 800875e:	4613      	mov	r3, r2
 8008760:	011b      	lsls	r3, r3, #4
 8008762:	1a9b      	subs	r3, r3, r2
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	440b      	add	r3, r1
 8008768:	334d      	adds	r3, #77	@ 0x4d
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	2b07      	cmp	r3, #7
 800876e:	d00b      	beq.n	8008788 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8008770:	78fa      	ldrb	r2, [r7, #3]
 8008772:	6879      	ldr	r1, [r7, #4]
 8008774:	4613      	mov	r3, r2
 8008776:	011b      	lsls	r3, r3, #4
 8008778:	1a9b      	subs	r3, r3, r2
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	440b      	add	r3, r1
 800877e:	334d      	adds	r3, #77	@ 0x4d
 8008780:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8008782:	2b09      	cmp	r3, #9
 8008784:	f040 80a6 	bne.w	80088d4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008788:	78fa      	ldrb	r2, [r7, #3]
 800878a:	6879      	ldr	r1, [r7, #4]
 800878c:	4613      	mov	r3, r2
 800878e:	011b      	lsls	r3, r3, #4
 8008790:	1a9b      	subs	r3, r3, r2
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	440b      	add	r3, r1
 8008796:	334d      	adds	r3, #77	@ 0x4d
 8008798:	2202      	movs	r2, #2
 800879a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800879c:	78fa      	ldrb	r2, [r7, #3]
 800879e:	6879      	ldr	r1, [r7, #4]
 80087a0:	4613      	mov	r3, r2
 80087a2:	011b      	lsls	r3, r3, #4
 80087a4:	1a9b      	subs	r3, r3, r2
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	440b      	add	r3, r1
 80087aa:	3344      	adds	r3, #68	@ 0x44
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	1c59      	adds	r1, r3, #1
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	4613      	mov	r3, r2
 80087b4:	011b      	lsls	r3, r3, #4
 80087b6:	1a9b      	subs	r3, r3, r2
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	4403      	add	r3, r0
 80087bc:	3344      	adds	r3, #68	@ 0x44
 80087be:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80087c0:	78fa      	ldrb	r2, [r7, #3]
 80087c2:	6879      	ldr	r1, [r7, #4]
 80087c4:	4613      	mov	r3, r2
 80087c6:	011b      	lsls	r3, r3, #4
 80087c8:	1a9b      	subs	r3, r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	440b      	add	r3, r1
 80087ce:	3344      	adds	r3, #68	@ 0x44
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	2b02      	cmp	r3, #2
 80087d4:	d943      	bls.n	800885e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80087d6:	78fa      	ldrb	r2, [r7, #3]
 80087d8:	6879      	ldr	r1, [r7, #4]
 80087da:	4613      	mov	r3, r2
 80087dc:	011b      	lsls	r3, r3, #4
 80087de:	1a9b      	subs	r3, r3, r2
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	440b      	add	r3, r1
 80087e4:	3344      	adds	r3, #68	@ 0x44
 80087e6:	2200      	movs	r2, #0
 80087e8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80087ea:	78fa      	ldrb	r2, [r7, #3]
 80087ec:	6879      	ldr	r1, [r7, #4]
 80087ee:	4613      	mov	r3, r2
 80087f0:	011b      	lsls	r3, r3, #4
 80087f2:	1a9b      	subs	r3, r3, r2
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	440b      	add	r3, r1
 80087f8:	331a      	adds	r3, #26
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d123      	bne.n	8008848 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8008800:	78fa      	ldrb	r2, [r7, #3]
 8008802:	6879      	ldr	r1, [r7, #4]
 8008804:	4613      	mov	r3, r2
 8008806:	011b      	lsls	r3, r3, #4
 8008808:	1a9b      	subs	r3, r3, r2
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	440b      	add	r3, r1
 800880e:	331b      	adds	r3, #27
 8008810:	2200      	movs	r2, #0
 8008812:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8008814:	78fa      	ldrb	r2, [r7, #3]
 8008816:	6879      	ldr	r1, [r7, #4]
 8008818:	4613      	mov	r3, r2
 800881a:	011b      	lsls	r3, r3, #4
 800881c:	1a9b      	subs	r3, r3, r2
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	440b      	add	r3, r1
 8008822:	331c      	adds	r3, #28
 8008824:	2200      	movs	r2, #0
 8008826:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008828:	78fb      	ldrb	r3, [r7, #3]
 800882a:	015a      	lsls	r2, r3, #5
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	4413      	add	r3, r2
 8008830:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	78fa      	ldrb	r2, [r7, #3]
 8008838:	0151      	lsls	r1, r2, #5
 800883a:	693a      	ldr	r2, [r7, #16]
 800883c:	440a      	add	r2, r1
 800883e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008842:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008846:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8008848:	78fa      	ldrb	r2, [r7, #3]
 800884a:	6879      	ldr	r1, [r7, #4]
 800884c:	4613      	mov	r3, r2
 800884e:	011b      	lsls	r3, r3, #4
 8008850:	1a9b      	subs	r3, r3, r2
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	440b      	add	r3, r1
 8008856:	334c      	adds	r3, #76	@ 0x4c
 8008858:	2204      	movs	r2, #4
 800885a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800885c:	e229      	b.n	8008cb2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800885e:	78fa      	ldrb	r2, [r7, #3]
 8008860:	6879      	ldr	r1, [r7, #4]
 8008862:	4613      	mov	r3, r2
 8008864:	011b      	lsls	r3, r3, #4
 8008866:	1a9b      	subs	r3, r3, r2
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	440b      	add	r3, r1
 800886c:	334c      	adds	r3, #76	@ 0x4c
 800886e:	2202      	movs	r2, #2
 8008870:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008872:	78fa      	ldrb	r2, [r7, #3]
 8008874:	6879      	ldr	r1, [r7, #4]
 8008876:	4613      	mov	r3, r2
 8008878:	011b      	lsls	r3, r3, #4
 800887a:	1a9b      	subs	r3, r3, r2
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	440b      	add	r3, r1
 8008880:	3326      	adds	r3, #38	@ 0x26
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00b      	beq.n	80088a0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008888:	78fa      	ldrb	r2, [r7, #3]
 800888a:	6879      	ldr	r1, [r7, #4]
 800888c:	4613      	mov	r3, r2
 800888e:	011b      	lsls	r3, r3, #4
 8008890:	1a9b      	subs	r3, r3, r2
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	440b      	add	r3, r1
 8008896:	3326      	adds	r3, #38	@ 0x26
 8008898:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800889a:	2b02      	cmp	r3, #2
 800889c:	f040 8209 	bne.w	8008cb2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80088a0:	78fb      	ldrb	r3, [r7, #3]
 80088a2:	015a      	lsls	r2, r3, #5
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	4413      	add	r3, r2
 80088a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80088b6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80088be:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80088c0:	78fb      	ldrb	r3, [r7, #3]
 80088c2:	015a      	lsls	r2, r3, #5
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	4413      	add	r3, r2
 80088c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088cc:	461a      	mov	r2, r3
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80088d2:	e1ee      	b.n	8008cb2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80088d4:	78fa      	ldrb	r2, [r7, #3]
 80088d6:	6879      	ldr	r1, [r7, #4]
 80088d8:	4613      	mov	r3, r2
 80088da:	011b      	lsls	r3, r3, #4
 80088dc:	1a9b      	subs	r3, r3, r2
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	440b      	add	r3, r1
 80088e2:	334d      	adds	r3, #77	@ 0x4d
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	2b05      	cmp	r3, #5
 80088e8:	f040 80c8 	bne.w	8008a7c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80088ec:	78fa      	ldrb	r2, [r7, #3]
 80088ee:	6879      	ldr	r1, [r7, #4]
 80088f0:	4613      	mov	r3, r2
 80088f2:	011b      	lsls	r3, r3, #4
 80088f4:	1a9b      	subs	r3, r3, r2
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	440b      	add	r3, r1
 80088fa:	334d      	adds	r3, #77	@ 0x4d
 80088fc:	2202      	movs	r2, #2
 80088fe:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008900:	78fa      	ldrb	r2, [r7, #3]
 8008902:	6879      	ldr	r1, [r7, #4]
 8008904:	4613      	mov	r3, r2
 8008906:	011b      	lsls	r3, r3, #4
 8008908:	1a9b      	subs	r3, r3, r2
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	440b      	add	r3, r1
 800890e:	331b      	adds	r3, #27
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	2b01      	cmp	r3, #1
 8008914:	f040 81ce 	bne.w	8008cb4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8008918:	78fa      	ldrb	r2, [r7, #3]
 800891a:	6879      	ldr	r1, [r7, #4]
 800891c:	4613      	mov	r3, r2
 800891e:	011b      	lsls	r3, r3, #4
 8008920:	1a9b      	subs	r3, r3, r2
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	440b      	add	r3, r1
 8008926:	3326      	adds	r3, #38	@ 0x26
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	2b03      	cmp	r3, #3
 800892c:	d16b      	bne.n	8008a06 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800892e:	78fa      	ldrb	r2, [r7, #3]
 8008930:	6879      	ldr	r1, [r7, #4]
 8008932:	4613      	mov	r3, r2
 8008934:	011b      	lsls	r3, r3, #4
 8008936:	1a9b      	subs	r3, r3, r2
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	440b      	add	r3, r1
 800893c:	3348      	adds	r3, #72	@ 0x48
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	1c59      	adds	r1, r3, #1
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	4613      	mov	r3, r2
 8008946:	011b      	lsls	r3, r3, #4
 8008948:	1a9b      	subs	r3, r3, r2
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	4403      	add	r3, r0
 800894e:	3348      	adds	r3, #72	@ 0x48
 8008950:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8008952:	78fa      	ldrb	r2, [r7, #3]
 8008954:	6879      	ldr	r1, [r7, #4]
 8008956:	4613      	mov	r3, r2
 8008958:	011b      	lsls	r3, r3, #4
 800895a:	1a9b      	subs	r3, r3, r2
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	440b      	add	r3, r1
 8008960:	3348      	adds	r3, #72	@ 0x48
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2b02      	cmp	r3, #2
 8008966:	d943      	bls.n	80089f0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8008968:	78fa      	ldrb	r2, [r7, #3]
 800896a:	6879      	ldr	r1, [r7, #4]
 800896c:	4613      	mov	r3, r2
 800896e:	011b      	lsls	r3, r3, #4
 8008970:	1a9b      	subs	r3, r3, r2
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	440b      	add	r3, r1
 8008976:	3348      	adds	r3, #72	@ 0x48
 8008978:	2200      	movs	r2, #0
 800897a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800897c:	78fa      	ldrb	r2, [r7, #3]
 800897e:	6879      	ldr	r1, [r7, #4]
 8008980:	4613      	mov	r3, r2
 8008982:	011b      	lsls	r3, r3, #4
 8008984:	1a9b      	subs	r3, r3, r2
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	440b      	add	r3, r1
 800898a:	331b      	adds	r3, #27
 800898c:	2200      	movs	r2, #0
 800898e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8008990:	78fa      	ldrb	r2, [r7, #3]
 8008992:	6879      	ldr	r1, [r7, #4]
 8008994:	4613      	mov	r3, r2
 8008996:	011b      	lsls	r3, r3, #4
 8008998:	1a9b      	subs	r3, r3, r2
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	440b      	add	r3, r1
 800899e:	3344      	adds	r3, #68	@ 0x44
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2b02      	cmp	r3, #2
 80089a4:	d809      	bhi.n	80089ba <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80089a6:	78fa      	ldrb	r2, [r7, #3]
 80089a8:	6879      	ldr	r1, [r7, #4]
 80089aa:	4613      	mov	r3, r2
 80089ac:	011b      	lsls	r3, r3, #4
 80089ae:	1a9b      	subs	r3, r3, r2
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	440b      	add	r3, r1
 80089b4:	331c      	adds	r3, #28
 80089b6:	2201      	movs	r2, #1
 80089b8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80089ba:	78fb      	ldrb	r3, [r7, #3]
 80089bc:	015a      	lsls	r2, r3, #5
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	4413      	add	r3, r2
 80089c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	78fa      	ldrb	r2, [r7, #3]
 80089ca:	0151      	lsls	r1, r2, #5
 80089cc:	693a      	ldr	r2, [r7, #16]
 80089ce:	440a      	add	r2, r1
 80089d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089d8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80089da:	78fa      	ldrb	r2, [r7, #3]
 80089dc:	6879      	ldr	r1, [r7, #4]
 80089de:	4613      	mov	r3, r2
 80089e0:	011b      	lsls	r3, r3, #4
 80089e2:	1a9b      	subs	r3, r3, r2
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	440b      	add	r3, r1
 80089e8:	334c      	adds	r3, #76	@ 0x4c
 80089ea:	2204      	movs	r2, #4
 80089ec:	701a      	strb	r2, [r3, #0]
 80089ee:	e014      	b.n	8008a1a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80089f0:	78fa      	ldrb	r2, [r7, #3]
 80089f2:	6879      	ldr	r1, [r7, #4]
 80089f4:	4613      	mov	r3, r2
 80089f6:	011b      	lsls	r3, r3, #4
 80089f8:	1a9b      	subs	r3, r3, r2
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	440b      	add	r3, r1
 80089fe:	334c      	adds	r3, #76	@ 0x4c
 8008a00:	2202      	movs	r2, #2
 8008a02:	701a      	strb	r2, [r3, #0]
 8008a04:	e009      	b.n	8008a1a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008a06:	78fa      	ldrb	r2, [r7, #3]
 8008a08:	6879      	ldr	r1, [r7, #4]
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	011b      	lsls	r3, r3, #4
 8008a0e:	1a9b      	subs	r3, r3, r2
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	440b      	add	r3, r1
 8008a14:	334c      	adds	r3, #76	@ 0x4c
 8008a16:	2202      	movs	r2, #2
 8008a18:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008a1a:	78fa      	ldrb	r2, [r7, #3]
 8008a1c:	6879      	ldr	r1, [r7, #4]
 8008a1e:	4613      	mov	r3, r2
 8008a20:	011b      	lsls	r3, r3, #4
 8008a22:	1a9b      	subs	r3, r3, r2
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	440b      	add	r3, r1
 8008a28:	3326      	adds	r3, #38	@ 0x26
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d00b      	beq.n	8008a48 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008a30:	78fa      	ldrb	r2, [r7, #3]
 8008a32:	6879      	ldr	r1, [r7, #4]
 8008a34:	4613      	mov	r3, r2
 8008a36:	011b      	lsls	r3, r3, #4
 8008a38:	1a9b      	subs	r3, r3, r2
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	440b      	add	r3, r1
 8008a3e:	3326      	adds	r3, #38	@ 0x26
 8008a40:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008a42:	2b02      	cmp	r3, #2
 8008a44:	f040 8136 	bne.w	8008cb4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8008a48:	78fb      	ldrb	r3, [r7, #3]
 8008a4a:	015a      	lsls	r2, r3, #5
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	4413      	add	r3, r2
 8008a50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008a5e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008a66:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8008a68:	78fb      	ldrb	r3, [r7, #3]
 8008a6a:	015a      	lsls	r2, r3, #5
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	4413      	add	r3, r2
 8008a70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a74:	461a      	mov	r2, r3
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	6013      	str	r3, [r2, #0]
 8008a7a:	e11b      	b.n	8008cb4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8008a7c:	78fa      	ldrb	r2, [r7, #3]
 8008a7e:	6879      	ldr	r1, [r7, #4]
 8008a80:	4613      	mov	r3, r2
 8008a82:	011b      	lsls	r3, r3, #4
 8008a84:	1a9b      	subs	r3, r3, r2
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	440b      	add	r3, r1
 8008a8a:	334d      	adds	r3, #77	@ 0x4d
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	2b03      	cmp	r3, #3
 8008a90:	f040 8081 	bne.w	8008b96 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008a94:	78fa      	ldrb	r2, [r7, #3]
 8008a96:	6879      	ldr	r1, [r7, #4]
 8008a98:	4613      	mov	r3, r2
 8008a9a:	011b      	lsls	r3, r3, #4
 8008a9c:	1a9b      	subs	r3, r3, r2
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	440b      	add	r3, r1
 8008aa2:	334d      	adds	r3, #77	@ 0x4d
 8008aa4:	2202      	movs	r2, #2
 8008aa6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008aa8:	78fa      	ldrb	r2, [r7, #3]
 8008aaa:	6879      	ldr	r1, [r7, #4]
 8008aac:	4613      	mov	r3, r2
 8008aae:	011b      	lsls	r3, r3, #4
 8008ab0:	1a9b      	subs	r3, r3, r2
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	440b      	add	r3, r1
 8008ab6:	331b      	adds	r3, #27
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	f040 80fa 	bne.w	8008cb4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008ac0:	78fa      	ldrb	r2, [r7, #3]
 8008ac2:	6879      	ldr	r1, [r7, #4]
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	011b      	lsls	r3, r3, #4
 8008ac8:	1a9b      	subs	r3, r3, r2
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	440b      	add	r3, r1
 8008ace:	334c      	adds	r3, #76	@ 0x4c
 8008ad0:	2202      	movs	r2, #2
 8008ad2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008ad4:	78fb      	ldrb	r3, [r7, #3]
 8008ad6:	015a      	lsls	r2, r3, #5
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	4413      	add	r3, r2
 8008adc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	78fa      	ldrb	r2, [r7, #3]
 8008ae4:	0151      	lsls	r1, r2, #5
 8008ae6:	693a      	ldr	r2, [r7, #16]
 8008ae8:	440a      	add	r2, r1
 8008aea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008aee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008af2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008af4:	78fb      	ldrb	r3, [r7, #3]
 8008af6:	015a      	lsls	r2, r3, #5
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	4413      	add	r3, r2
 8008afc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b00:	68db      	ldr	r3, [r3, #12]
 8008b02:	78fa      	ldrb	r2, [r7, #3]
 8008b04:	0151      	lsls	r1, r2, #5
 8008b06:	693a      	ldr	r2, [r7, #16]
 8008b08:	440a      	add	r2, r1
 8008b0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b12:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8008b14:	78fb      	ldrb	r3, [r7, #3]
 8008b16:	015a      	lsls	r2, r3, #5
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	78fa      	ldrb	r2, [r7, #3]
 8008b24:	0151      	lsls	r1, r2, #5
 8008b26:	693a      	ldr	r2, [r7, #16]
 8008b28:	440a      	add	r2, r1
 8008b2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b2e:	f023 0320 	bic.w	r3, r3, #32
 8008b32:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008b34:	78fa      	ldrb	r2, [r7, #3]
 8008b36:	6879      	ldr	r1, [r7, #4]
 8008b38:	4613      	mov	r3, r2
 8008b3a:	011b      	lsls	r3, r3, #4
 8008b3c:	1a9b      	subs	r3, r3, r2
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	440b      	add	r3, r1
 8008b42:	3326      	adds	r3, #38	@ 0x26
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00b      	beq.n	8008b62 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008b4a:	78fa      	ldrb	r2, [r7, #3]
 8008b4c:	6879      	ldr	r1, [r7, #4]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	011b      	lsls	r3, r3, #4
 8008b52:	1a9b      	subs	r3, r3, r2
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	440b      	add	r3, r1
 8008b58:	3326      	adds	r3, #38	@ 0x26
 8008b5a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	f040 80a9 	bne.w	8008cb4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8008b62:	78fb      	ldrb	r3, [r7, #3]
 8008b64:	015a      	lsls	r2, r3, #5
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	4413      	add	r3, r2
 8008b6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008b78:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008b80:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8008b82:	78fb      	ldrb	r3, [r7, #3]
 8008b84:	015a      	lsls	r2, r3, #5
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	4413      	add	r3, r2
 8008b8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b8e:	461a      	mov	r2, r3
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6013      	str	r3, [r2, #0]
 8008b94:	e08e      	b.n	8008cb4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8008b96:	78fa      	ldrb	r2, [r7, #3]
 8008b98:	6879      	ldr	r1, [r7, #4]
 8008b9a:	4613      	mov	r3, r2
 8008b9c:	011b      	lsls	r3, r3, #4
 8008b9e:	1a9b      	subs	r3, r3, r2
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	440b      	add	r3, r1
 8008ba4:	334d      	adds	r3, #77	@ 0x4d
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	2b04      	cmp	r3, #4
 8008baa:	d143      	bne.n	8008c34 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008bac:	78fa      	ldrb	r2, [r7, #3]
 8008bae:	6879      	ldr	r1, [r7, #4]
 8008bb0:	4613      	mov	r3, r2
 8008bb2:	011b      	lsls	r3, r3, #4
 8008bb4:	1a9b      	subs	r3, r3, r2
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	440b      	add	r3, r1
 8008bba:	334d      	adds	r3, #77	@ 0x4d
 8008bbc:	2202      	movs	r2, #2
 8008bbe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008bc0:	78fa      	ldrb	r2, [r7, #3]
 8008bc2:	6879      	ldr	r1, [r7, #4]
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	011b      	lsls	r3, r3, #4
 8008bc8:	1a9b      	subs	r3, r3, r2
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	440b      	add	r3, r1
 8008bce:	334c      	adds	r3, #76	@ 0x4c
 8008bd0:	2202      	movs	r2, #2
 8008bd2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008bd4:	78fa      	ldrb	r2, [r7, #3]
 8008bd6:	6879      	ldr	r1, [r7, #4]
 8008bd8:	4613      	mov	r3, r2
 8008bda:	011b      	lsls	r3, r3, #4
 8008bdc:	1a9b      	subs	r3, r3, r2
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	440b      	add	r3, r1
 8008be2:	3326      	adds	r3, #38	@ 0x26
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00a      	beq.n	8008c00 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008bea:	78fa      	ldrb	r2, [r7, #3]
 8008bec:	6879      	ldr	r1, [r7, #4]
 8008bee:	4613      	mov	r3, r2
 8008bf0:	011b      	lsls	r3, r3, #4
 8008bf2:	1a9b      	subs	r3, r3, r2
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	440b      	add	r3, r1
 8008bf8:	3326      	adds	r3, #38	@ 0x26
 8008bfa:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d159      	bne.n	8008cb4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8008c00:	78fb      	ldrb	r3, [r7, #3]
 8008c02:	015a      	lsls	r2, r3, #5
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	4413      	add	r3, r2
 8008c08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008c16:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c1e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8008c20:	78fb      	ldrb	r3, [r7, #3]
 8008c22:	015a      	lsls	r2, r3, #5
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	4413      	add	r3, r2
 8008c28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6013      	str	r3, [r2, #0]
 8008c32:	e03f      	b.n	8008cb4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8008c34:	78fa      	ldrb	r2, [r7, #3]
 8008c36:	6879      	ldr	r1, [r7, #4]
 8008c38:	4613      	mov	r3, r2
 8008c3a:	011b      	lsls	r3, r3, #4
 8008c3c:	1a9b      	subs	r3, r3, r2
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	440b      	add	r3, r1
 8008c42:	334d      	adds	r3, #77	@ 0x4d
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	2b08      	cmp	r3, #8
 8008c48:	d126      	bne.n	8008c98 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008c4a:	78fa      	ldrb	r2, [r7, #3]
 8008c4c:	6879      	ldr	r1, [r7, #4]
 8008c4e:	4613      	mov	r3, r2
 8008c50:	011b      	lsls	r3, r3, #4
 8008c52:	1a9b      	subs	r3, r3, r2
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	440b      	add	r3, r1
 8008c58:	334d      	adds	r3, #77	@ 0x4d
 8008c5a:	2202      	movs	r2, #2
 8008c5c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8008c5e:	78fa      	ldrb	r2, [r7, #3]
 8008c60:	6879      	ldr	r1, [r7, #4]
 8008c62:	4613      	mov	r3, r2
 8008c64:	011b      	lsls	r3, r3, #4
 8008c66:	1a9b      	subs	r3, r3, r2
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	440b      	add	r3, r1
 8008c6c:	3344      	adds	r3, #68	@ 0x44
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	1c59      	adds	r1, r3, #1
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	4613      	mov	r3, r2
 8008c76:	011b      	lsls	r3, r3, #4
 8008c78:	1a9b      	subs	r3, r3, r2
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	4403      	add	r3, r0
 8008c7e:	3344      	adds	r3, #68	@ 0x44
 8008c80:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8008c82:	78fa      	ldrb	r2, [r7, #3]
 8008c84:	6879      	ldr	r1, [r7, #4]
 8008c86:	4613      	mov	r3, r2
 8008c88:	011b      	lsls	r3, r3, #4
 8008c8a:	1a9b      	subs	r3, r3, r2
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	440b      	add	r3, r1
 8008c90:	334c      	adds	r3, #76	@ 0x4c
 8008c92:	2204      	movs	r2, #4
 8008c94:	701a      	strb	r2, [r3, #0]
 8008c96:	e00d      	b.n	8008cb4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8008c98:	78fa      	ldrb	r2, [r7, #3]
 8008c9a:	6879      	ldr	r1, [r7, #4]
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	011b      	lsls	r3, r3, #4
 8008ca0:	1a9b      	subs	r3, r3, r2
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	440b      	add	r3, r1
 8008ca6:	334d      	adds	r3, #77	@ 0x4d
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	2b02      	cmp	r3, #2
 8008cac:	f000 8100 	beq.w	8008eb0 <HCD_HC_IN_IRQHandler+0xcca>
 8008cb0:	e000      	b.n	8008cb4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008cb2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8008cb4:	78fa      	ldrb	r2, [r7, #3]
 8008cb6:	6879      	ldr	r1, [r7, #4]
 8008cb8:	4613      	mov	r3, r2
 8008cba:	011b      	lsls	r3, r3, #4
 8008cbc:	1a9b      	subs	r3, r3, r2
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	440b      	add	r3, r1
 8008cc2:	334c      	adds	r3, #76	@ 0x4c
 8008cc4:	781a      	ldrb	r2, [r3, #0]
 8008cc6:	78fb      	ldrb	r3, [r7, #3]
 8008cc8:	4619      	mov	r1, r3
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f012 f82e 	bl	801ad2c <HAL_HCD_HC_NotifyURBChange_Callback>
 8008cd0:	e0ef      	b.n	8008eb2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	78fa      	ldrb	r2, [r7, #3]
 8008cd8:	4611      	mov	r1, r2
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f008 fc6f 	bl	80115be <USB_ReadChInterrupts>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ce6:	2b40      	cmp	r3, #64	@ 0x40
 8008ce8:	d12f      	bne.n	8008d4a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8008cea:	78fb      	ldrb	r3, [r7, #3]
 8008cec:	015a      	lsls	r2, r3, #5
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	2340      	movs	r3, #64	@ 0x40
 8008cfa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8008cfc:	78fa      	ldrb	r2, [r7, #3]
 8008cfe:	6879      	ldr	r1, [r7, #4]
 8008d00:	4613      	mov	r3, r2
 8008d02:	011b      	lsls	r3, r3, #4
 8008d04:	1a9b      	subs	r3, r3, r2
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	440b      	add	r3, r1
 8008d0a:	334d      	adds	r3, #77	@ 0x4d
 8008d0c:	2205      	movs	r2, #5
 8008d0e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8008d10:	78fa      	ldrb	r2, [r7, #3]
 8008d12:	6879      	ldr	r1, [r7, #4]
 8008d14:	4613      	mov	r3, r2
 8008d16:	011b      	lsls	r3, r3, #4
 8008d18:	1a9b      	subs	r3, r3, r2
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	440b      	add	r3, r1
 8008d1e:	331a      	adds	r3, #26
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d109      	bne.n	8008d3a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8008d26:	78fa      	ldrb	r2, [r7, #3]
 8008d28:	6879      	ldr	r1, [r7, #4]
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	011b      	lsls	r3, r3, #4
 8008d2e:	1a9b      	subs	r3, r3, r2
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	440b      	add	r3, r1
 8008d34:	3344      	adds	r3, #68	@ 0x44
 8008d36:	2200      	movs	r2, #0
 8008d38:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	78fa      	ldrb	r2, [r7, #3]
 8008d40:	4611      	mov	r1, r2
 8008d42:	4618      	mov	r0, r3
 8008d44:	f009 f9d9 	bl	80120fa <USB_HC_Halt>
 8008d48:	e0b3      	b.n	8008eb2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	78fa      	ldrb	r2, [r7, #3]
 8008d50:	4611      	mov	r1, r2
 8008d52:	4618      	mov	r0, r3
 8008d54:	f008 fc33 	bl	80115be <USB_ReadChInterrupts>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	f003 0310 	and.w	r3, r3, #16
 8008d5e:	2b10      	cmp	r3, #16
 8008d60:	f040 80a7 	bne.w	8008eb2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8008d64:	78fa      	ldrb	r2, [r7, #3]
 8008d66:	6879      	ldr	r1, [r7, #4]
 8008d68:	4613      	mov	r3, r2
 8008d6a:	011b      	lsls	r3, r3, #4
 8008d6c:	1a9b      	subs	r3, r3, r2
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	440b      	add	r3, r1
 8008d72:	3326      	adds	r3, #38	@ 0x26
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	2b03      	cmp	r3, #3
 8008d78:	d11b      	bne.n	8008db2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8008d7a:	78fa      	ldrb	r2, [r7, #3]
 8008d7c:	6879      	ldr	r1, [r7, #4]
 8008d7e:	4613      	mov	r3, r2
 8008d80:	011b      	lsls	r3, r3, #4
 8008d82:	1a9b      	subs	r3, r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	440b      	add	r3, r1
 8008d88:	3344      	adds	r3, #68	@ 0x44
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8008d8e:	78fa      	ldrb	r2, [r7, #3]
 8008d90:	6879      	ldr	r1, [r7, #4]
 8008d92:	4613      	mov	r3, r2
 8008d94:	011b      	lsls	r3, r3, #4
 8008d96:	1a9b      	subs	r3, r3, r2
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	440b      	add	r3, r1
 8008d9c:	334d      	adds	r3, #77	@ 0x4d
 8008d9e:	2204      	movs	r2, #4
 8008da0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	78fa      	ldrb	r2, [r7, #3]
 8008da8:	4611      	mov	r1, r2
 8008daa:	4618      	mov	r0, r3
 8008dac:	f009 f9a5 	bl	80120fa <USB_HC_Halt>
 8008db0:	e03f      	b.n	8008e32 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008db2:	78fa      	ldrb	r2, [r7, #3]
 8008db4:	6879      	ldr	r1, [r7, #4]
 8008db6:	4613      	mov	r3, r2
 8008db8:	011b      	lsls	r3, r3, #4
 8008dba:	1a9b      	subs	r3, r3, r2
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	440b      	add	r3, r1
 8008dc0:	3326      	adds	r3, #38	@ 0x26
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d00a      	beq.n	8008dde <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008dc8:	78fa      	ldrb	r2, [r7, #3]
 8008dca:	6879      	ldr	r1, [r7, #4]
 8008dcc:	4613      	mov	r3, r2
 8008dce:	011b      	lsls	r3, r3, #4
 8008dd0:	1a9b      	subs	r3, r3, r2
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	440b      	add	r3, r1
 8008dd6:	3326      	adds	r3, #38	@ 0x26
 8008dd8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008dda:	2b02      	cmp	r3, #2
 8008ddc:	d129      	bne.n	8008e32 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8008dde:	78fa      	ldrb	r2, [r7, #3]
 8008de0:	6879      	ldr	r1, [r7, #4]
 8008de2:	4613      	mov	r3, r2
 8008de4:	011b      	lsls	r3, r3, #4
 8008de6:	1a9b      	subs	r3, r3, r2
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	440b      	add	r3, r1
 8008dec:	3344      	adds	r3, #68	@ 0x44
 8008dee:	2200      	movs	r2, #0
 8008df0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	799b      	ldrb	r3, [r3, #6]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d00a      	beq.n	8008e10 <HCD_HC_IN_IRQHandler+0xc2a>
 8008dfa:	78fa      	ldrb	r2, [r7, #3]
 8008dfc:	6879      	ldr	r1, [r7, #4]
 8008dfe:	4613      	mov	r3, r2
 8008e00:	011b      	lsls	r3, r3, #4
 8008e02:	1a9b      	subs	r3, r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	440b      	add	r3, r1
 8008e08:	331b      	adds	r3, #27
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d110      	bne.n	8008e32 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8008e10:	78fa      	ldrb	r2, [r7, #3]
 8008e12:	6879      	ldr	r1, [r7, #4]
 8008e14:	4613      	mov	r3, r2
 8008e16:	011b      	lsls	r3, r3, #4
 8008e18:	1a9b      	subs	r3, r3, r2
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	440b      	add	r3, r1
 8008e1e:	334d      	adds	r3, #77	@ 0x4d
 8008e20:	2204      	movs	r2, #4
 8008e22:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	78fa      	ldrb	r2, [r7, #3]
 8008e2a:	4611      	mov	r1, r2
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f009 f964 	bl	80120fa <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8008e32:	78fa      	ldrb	r2, [r7, #3]
 8008e34:	6879      	ldr	r1, [r7, #4]
 8008e36:	4613      	mov	r3, r2
 8008e38:	011b      	lsls	r3, r3, #4
 8008e3a:	1a9b      	subs	r3, r3, r2
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	440b      	add	r3, r1
 8008e40:	331b      	adds	r3, #27
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d129      	bne.n	8008e9c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8008e48:	78fa      	ldrb	r2, [r7, #3]
 8008e4a:	6879      	ldr	r1, [r7, #4]
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	011b      	lsls	r3, r3, #4
 8008e50:	1a9b      	subs	r3, r3, r2
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	440b      	add	r3, r1
 8008e56:	331b      	adds	r3, #27
 8008e58:	2200      	movs	r2, #0
 8008e5a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008e5c:	78fb      	ldrb	r3, [r7, #3]
 8008e5e:	015a      	lsls	r2, r3, #5
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	4413      	add	r3, r2
 8008e64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	78fa      	ldrb	r2, [r7, #3]
 8008e6c:	0151      	lsls	r1, r2, #5
 8008e6e:	693a      	ldr	r2, [r7, #16]
 8008e70:	440a      	add	r2, r1
 8008e72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e7a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8008e7c:	78fb      	ldrb	r3, [r7, #3]
 8008e7e:	015a      	lsls	r2, r3, #5
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	4413      	add	r3, r2
 8008e84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	78fa      	ldrb	r2, [r7, #3]
 8008e8c:	0151      	lsls	r1, r2, #5
 8008e8e:	693a      	ldr	r2, [r7, #16]
 8008e90:	440a      	add	r2, r1
 8008e92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e96:	f043 0320 	orr.w	r3, r3, #32
 8008e9a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8008e9c:	78fb      	ldrb	r3, [r7, #3]
 8008e9e:	015a      	lsls	r2, r3, #5
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	2310      	movs	r3, #16
 8008eac:	6093      	str	r3, [r2, #8]
 8008eae:	e000      	b.n	8008eb2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8008eb0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8008eb2:	3718      	adds	r7, #24
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b086      	sub	sp, #24
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	78fa      	ldrb	r2, [r7, #3]
 8008ed4:	4611      	mov	r1, r2
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f008 fb71 	bl	80115be <USB_ReadChInterrupts>
 8008edc:	4603      	mov	r3, r0
 8008ede:	f003 0304 	and.w	r3, r3, #4
 8008ee2:	2b04      	cmp	r3, #4
 8008ee4:	d11b      	bne.n	8008f1e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8008ee6:	78fb      	ldrb	r3, [r7, #3]
 8008ee8:	015a      	lsls	r2, r3, #5
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	4413      	add	r3, r2
 8008eee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	2304      	movs	r3, #4
 8008ef6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8008ef8:	78fa      	ldrb	r2, [r7, #3]
 8008efa:	6879      	ldr	r1, [r7, #4]
 8008efc:	4613      	mov	r3, r2
 8008efe:	011b      	lsls	r3, r3, #4
 8008f00:	1a9b      	subs	r3, r3, r2
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	440b      	add	r3, r1
 8008f06:	334d      	adds	r3, #77	@ 0x4d
 8008f08:	2207      	movs	r2, #7
 8008f0a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	78fa      	ldrb	r2, [r7, #3]
 8008f12:	4611      	mov	r1, r2
 8008f14:	4618      	mov	r0, r3
 8008f16:	f009 f8f0 	bl	80120fa <USB_HC_Halt>
 8008f1a:	f000 bc89 	b.w	8009830 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	78fa      	ldrb	r2, [r7, #3]
 8008f24:	4611      	mov	r1, r2
 8008f26:	4618      	mov	r0, r3
 8008f28:	f008 fb49 	bl	80115be <USB_ReadChInterrupts>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	f003 0320 	and.w	r3, r3, #32
 8008f32:	2b20      	cmp	r3, #32
 8008f34:	f040 8082 	bne.w	800903c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8008f38:	78fb      	ldrb	r3, [r7, #3]
 8008f3a:	015a      	lsls	r2, r3, #5
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	4413      	add	r3, r2
 8008f40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f44:	461a      	mov	r2, r3
 8008f46:	2320      	movs	r3, #32
 8008f48:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8008f4a:	78fa      	ldrb	r2, [r7, #3]
 8008f4c:	6879      	ldr	r1, [r7, #4]
 8008f4e:	4613      	mov	r3, r2
 8008f50:	011b      	lsls	r3, r3, #4
 8008f52:	1a9b      	subs	r3, r3, r2
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	440b      	add	r3, r1
 8008f58:	3319      	adds	r3, #25
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d124      	bne.n	8008faa <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8008f60:	78fa      	ldrb	r2, [r7, #3]
 8008f62:	6879      	ldr	r1, [r7, #4]
 8008f64:	4613      	mov	r3, r2
 8008f66:	011b      	lsls	r3, r3, #4
 8008f68:	1a9b      	subs	r3, r3, r2
 8008f6a:	009b      	lsls	r3, r3, #2
 8008f6c:	440b      	add	r3, r1
 8008f6e:	3319      	adds	r3, #25
 8008f70:	2200      	movs	r2, #0
 8008f72:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008f74:	78fa      	ldrb	r2, [r7, #3]
 8008f76:	6879      	ldr	r1, [r7, #4]
 8008f78:	4613      	mov	r3, r2
 8008f7a:	011b      	lsls	r3, r3, #4
 8008f7c:	1a9b      	subs	r3, r3, r2
 8008f7e:	009b      	lsls	r3, r3, #2
 8008f80:	440b      	add	r3, r1
 8008f82:	334c      	adds	r3, #76	@ 0x4c
 8008f84:	2202      	movs	r2, #2
 8008f86:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8008f88:	78fa      	ldrb	r2, [r7, #3]
 8008f8a:	6879      	ldr	r1, [r7, #4]
 8008f8c:	4613      	mov	r3, r2
 8008f8e:	011b      	lsls	r3, r3, #4
 8008f90:	1a9b      	subs	r3, r3, r2
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	440b      	add	r3, r1
 8008f96:	334d      	adds	r3, #77	@ 0x4d
 8008f98:	2203      	movs	r2, #3
 8008f9a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	78fa      	ldrb	r2, [r7, #3]
 8008fa2:	4611      	mov	r1, r2
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f009 f8a8 	bl	80120fa <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8008faa:	78fa      	ldrb	r2, [r7, #3]
 8008fac:	6879      	ldr	r1, [r7, #4]
 8008fae:	4613      	mov	r3, r2
 8008fb0:	011b      	lsls	r3, r3, #4
 8008fb2:	1a9b      	subs	r3, r3, r2
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	440b      	add	r3, r1
 8008fb8:	331a      	adds	r3, #26
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	f040 8437 	bne.w	8009830 <HCD_HC_OUT_IRQHandler+0x978>
 8008fc2:	78fa      	ldrb	r2, [r7, #3]
 8008fc4:	6879      	ldr	r1, [r7, #4]
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	011b      	lsls	r3, r3, #4
 8008fca:	1a9b      	subs	r3, r3, r2
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	440b      	add	r3, r1
 8008fd0:	331b      	adds	r3, #27
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	f040 842b 	bne.w	8009830 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8008fda:	78fa      	ldrb	r2, [r7, #3]
 8008fdc:	6879      	ldr	r1, [r7, #4]
 8008fde:	4613      	mov	r3, r2
 8008fe0:	011b      	lsls	r3, r3, #4
 8008fe2:	1a9b      	subs	r3, r3, r2
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	440b      	add	r3, r1
 8008fe8:	3326      	adds	r3, #38	@ 0x26
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d009      	beq.n	8009004 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8008ff0:	78fa      	ldrb	r2, [r7, #3]
 8008ff2:	6879      	ldr	r1, [r7, #4]
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	011b      	lsls	r3, r3, #4
 8008ff8:	1a9b      	subs	r3, r3, r2
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	440b      	add	r3, r1
 8008ffe:	331b      	adds	r3, #27
 8009000:	2201      	movs	r2, #1
 8009002:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8009004:	78fa      	ldrb	r2, [r7, #3]
 8009006:	6879      	ldr	r1, [r7, #4]
 8009008:	4613      	mov	r3, r2
 800900a:	011b      	lsls	r3, r3, #4
 800900c:	1a9b      	subs	r3, r3, r2
 800900e:	009b      	lsls	r3, r3, #2
 8009010:	440b      	add	r3, r1
 8009012:	334d      	adds	r3, #77	@ 0x4d
 8009014:	2203      	movs	r2, #3
 8009016:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	78fa      	ldrb	r2, [r7, #3]
 800901e:	4611      	mov	r1, r2
 8009020:	4618      	mov	r0, r3
 8009022:	f009 f86a 	bl	80120fa <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8009026:	78fa      	ldrb	r2, [r7, #3]
 8009028:	6879      	ldr	r1, [r7, #4]
 800902a:	4613      	mov	r3, r2
 800902c:	011b      	lsls	r3, r3, #4
 800902e:	1a9b      	subs	r3, r3, r2
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	440b      	add	r3, r1
 8009034:	3344      	adds	r3, #68	@ 0x44
 8009036:	2200      	movs	r2, #0
 8009038:	601a      	str	r2, [r3, #0]
 800903a:	e3f9      	b.n	8009830 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	78fa      	ldrb	r2, [r7, #3]
 8009042:	4611      	mov	r1, r2
 8009044:	4618      	mov	r0, r3
 8009046:	f008 faba 	bl	80115be <USB_ReadChInterrupts>
 800904a:	4603      	mov	r3, r0
 800904c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009050:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009054:	d111      	bne.n	800907a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8009056:	78fb      	ldrb	r3, [r7, #3]
 8009058:	015a      	lsls	r2, r3, #5
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	4413      	add	r3, r2
 800905e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009062:	461a      	mov	r2, r3
 8009064:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009068:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	78fa      	ldrb	r2, [r7, #3]
 8009070:	4611      	mov	r1, r2
 8009072:	4618      	mov	r0, r3
 8009074:	f009 f841 	bl	80120fa <USB_HC_Halt>
 8009078:	e3da      	b.n	8009830 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	78fa      	ldrb	r2, [r7, #3]
 8009080:	4611      	mov	r1, r2
 8009082:	4618      	mov	r0, r3
 8009084:	f008 fa9b 	bl	80115be <USB_ReadChInterrupts>
 8009088:	4603      	mov	r3, r0
 800908a:	f003 0301 	and.w	r3, r3, #1
 800908e:	2b01      	cmp	r3, #1
 8009090:	d168      	bne.n	8009164 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8009092:	78fa      	ldrb	r2, [r7, #3]
 8009094:	6879      	ldr	r1, [r7, #4]
 8009096:	4613      	mov	r3, r2
 8009098:	011b      	lsls	r3, r3, #4
 800909a:	1a9b      	subs	r3, r3, r2
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	440b      	add	r3, r1
 80090a0:	3344      	adds	r3, #68	@ 0x44
 80090a2:	2200      	movs	r2, #0
 80090a4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	78fa      	ldrb	r2, [r7, #3]
 80090ac:	4611      	mov	r1, r2
 80090ae:	4618      	mov	r0, r3
 80090b0:	f008 fa85 	bl	80115be <USB_ReadChInterrupts>
 80090b4:	4603      	mov	r3, r0
 80090b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090ba:	2b40      	cmp	r3, #64	@ 0x40
 80090bc:	d112      	bne.n	80090e4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80090be:	78fa      	ldrb	r2, [r7, #3]
 80090c0:	6879      	ldr	r1, [r7, #4]
 80090c2:	4613      	mov	r3, r2
 80090c4:	011b      	lsls	r3, r3, #4
 80090c6:	1a9b      	subs	r3, r3, r2
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	440b      	add	r3, r1
 80090cc:	3319      	adds	r3, #25
 80090ce:	2201      	movs	r2, #1
 80090d0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80090d2:	78fb      	ldrb	r3, [r7, #3]
 80090d4:	015a      	lsls	r2, r3, #5
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	4413      	add	r3, r2
 80090da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090de:	461a      	mov	r2, r3
 80090e0:	2340      	movs	r3, #64	@ 0x40
 80090e2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80090e4:	78fa      	ldrb	r2, [r7, #3]
 80090e6:	6879      	ldr	r1, [r7, #4]
 80090e8:	4613      	mov	r3, r2
 80090ea:	011b      	lsls	r3, r3, #4
 80090ec:	1a9b      	subs	r3, r3, r2
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	440b      	add	r3, r1
 80090f2:	331b      	adds	r3, #27
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d019      	beq.n	800912e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80090fa:	78fa      	ldrb	r2, [r7, #3]
 80090fc:	6879      	ldr	r1, [r7, #4]
 80090fe:	4613      	mov	r3, r2
 8009100:	011b      	lsls	r3, r3, #4
 8009102:	1a9b      	subs	r3, r3, r2
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	440b      	add	r3, r1
 8009108:	331b      	adds	r3, #27
 800910a:	2200      	movs	r2, #0
 800910c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800910e:	78fb      	ldrb	r3, [r7, #3]
 8009110:	015a      	lsls	r2, r3, #5
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	4413      	add	r3, r2
 8009116:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	78fa      	ldrb	r2, [r7, #3]
 800911e:	0151      	lsls	r1, r2, #5
 8009120:	693a      	ldr	r2, [r7, #16]
 8009122:	440a      	add	r2, r1
 8009124:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009128:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800912c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800912e:	78fb      	ldrb	r3, [r7, #3]
 8009130:	015a      	lsls	r2, r3, #5
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	4413      	add	r3, r2
 8009136:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800913a:	461a      	mov	r2, r3
 800913c:	2301      	movs	r3, #1
 800913e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8009140:	78fa      	ldrb	r2, [r7, #3]
 8009142:	6879      	ldr	r1, [r7, #4]
 8009144:	4613      	mov	r3, r2
 8009146:	011b      	lsls	r3, r3, #4
 8009148:	1a9b      	subs	r3, r3, r2
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	440b      	add	r3, r1
 800914e:	334d      	adds	r3, #77	@ 0x4d
 8009150:	2201      	movs	r2, #1
 8009152:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	78fa      	ldrb	r2, [r7, #3]
 800915a:	4611      	mov	r1, r2
 800915c:	4618      	mov	r0, r3
 800915e:	f008 ffcc 	bl	80120fa <USB_HC_Halt>
 8009162:	e365      	b.n	8009830 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	78fa      	ldrb	r2, [r7, #3]
 800916a:	4611      	mov	r1, r2
 800916c:	4618      	mov	r0, r3
 800916e:	f008 fa26 	bl	80115be <USB_ReadChInterrupts>
 8009172:	4603      	mov	r3, r0
 8009174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009178:	2b40      	cmp	r3, #64	@ 0x40
 800917a:	d139      	bne.n	80091f0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800917c:	78fa      	ldrb	r2, [r7, #3]
 800917e:	6879      	ldr	r1, [r7, #4]
 8009180:	4613      	mov	r3, r2
 8009182:	011b      	lsls	r3, r3, #4
 8009184:	1a9b      	subs	r3, r3, r2
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	440b      	add	r3, r1
 800918a:	334d      	adds	r3, #77	@ 0x4d
 800918c:	2205      	movs	r2, #5
 800918e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8009190:	78fa      	ldrb	r2, [r7, #3]
 8009192:	6879      	ldr	r1, [r7, #4]
 8009194:	4613      	mov	r3, r2
 8009196:	011b      	lsls	r3, r3, #4
 8009198:	1a9b      	subs	r3, r3, r2
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	440b      	add	r3, r1
 800919e:	331a      	adds	r3, #26
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d109      	bne.n	80091ba <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80091a6:	78fa      	ldrb	r2, [r7, #3]
 80091a8:	6879      	ldr	r1, [r7, #4]
 80091aa:	4613      	mov	r3, r2
 80091ac:	011b      	lsls	r3, r3, #4
 80091ae:	1a9b      	subs	r3, r3, r2
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	440b      	add	r3, r1
 80091b4:	3319      	adds	r3, #25
 80091b6:	2201      	movs	r2, #1
 80091b8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80091ba:	78fa      	ldrb	r2, [r7, #3]
 80091bc:	6879      	ldr	r1, [r7, #4]
 80091be:	4613      	mov	r3, r2
 80091c0:	011b      	lsls	r3, r3, #4
 80091c2:	1a9b      	subs	r3, r3, r2
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	440b      	add	r3, r1
 80091c8:	3344      	adds	r3, #68	@ 0x44
 80091ca:	2200      	movs	r2, #0
 80091cc:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	78fa      	ldrb	r2, [r7, #3]
 80091d4:	4611      	mov	r1, r2
 80091d6:	4618      	mov	r0, r3
 80091d8:	f008 ff8f 	bl	80120fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80091dc:	78fb      	ldrb	r3, [r7, #3]
 80091de:	015a      	lsls	r2, r3, #5
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	4413      	add	r3, r2
 80091e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091e8:	461a      	mov	r2, r3
 80091ea:	2340      	movs	r3, #64	@ 0x40
 80091ec:	6093      	str	r3, [r2, #8]
 80091ee:	e31f      	b.n	8009830 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	78fa      	ldrb	r2, [r7, #3]
 80091f6:	4611      	mov	r1, r2
 80091f8:	4618      	mov	r0, r3
 80091fa:	f008 f9e0 	bl	80115be <USB_ReadChInterrupts>
 80091fe:	4603      	mov	r3, r0
 8009200:	f003 0308 	and.w	r3, r3, #8
 8009204:	2b08      	cmp	r3, #8
 8009206:	d11a      	bne.n	800923e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8009208:	78fb      	ldrb	r3, [r7, #3]
 800920a:	015a      	lsls	r2, r3, #5
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	4413      	add	r3, r2
 8009210:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009214:	461a      	mov	r2, r3
 8009216:	2308      	movs	r3, #8
 8009218:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800921a:	78fa      	ldrb	r2, [r7, #3]
 800921c:	6879      	ldr	r1, [r7, #4]
 800921e:	4613      	mov	r3, r2
 8009220:	011b      	lsls	r3, r3, #4
 8009222:	1a9b      	subs	r3, r3, r2
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	440b      	add	r3, r1
 8009228:	334d      	adds	r3, #77	@ 0x4d
 800922a:	2206      	movs	r2, #6
 800922c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	78fa      	ldrb	r2, [r7, #3]
 8009234:	4611      	mov	r1, r2
 8009236:	4618      	mov	r0, r3
 8009238:	f008 ff5f 	bl	80120fa <USB_HC_Halt>
 800923c:	e2f8      	b.n	8009830 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	78fa      	ldrb	r2, [r7, #3]
 8009244:	4611      	mov	r1, r2
 8009246:	4618      	mov	r0, r3
 8009248:	f008 f9b9 	bl	80115be <USB_ReadChInterrupts>
 800924c:	4603      	mov	r3, r0
 800924e:	f003 0310 	and.w	r3, r3, #16
 8009252:	2b10      	cmp	r3, #16
 8009254:	d144      	bne.n	80092e0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8009256:	78fa      	ldrb	r2, [r7, #3]
 8009258:	6879      	ldr	r1, [r7, #4]
 800925a:	4613      	mov	r3, r2
 800925c:	011b      	lsls	r3, r3, #4
 800925e:	1a9b      	subs	r3, r3, r2
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	440b      	add	r3, r1
 8009264:	3344      	adds	r3, #68	@ 0x44
 8009266:	2200      	movs	r2, #0
 8009268:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800926a:	78fa      	ldrb	r2, [r7, #3]
 800926c:	6879      	ldr	r1, [r7, #4]
 800926e:	4613      	mov	r3, r2
 8009270:	011b      	lsls	r3, r3, #4
 8009272:	1a9b      	subs	r3, r3, r2
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	440b      	add	r3, r1
 8009278:	334d      	adds	r3, #77	@ 0x4d
 800927a:	2204      	movs	r2, #4
 800927c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800927e:	78fa      	ldrb	r2, [r7, #3]
 8009280:	6879      	ldr	r1, [r7, #4]
 8009282:	4613      	mov	r3, r2
 8009284:	011b      	lsls	r3, r3, #4
 8009286:	1a9b      	subs	r3, r3, r2
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	440b      	add	r3, r1
 800928c:	3319      	adds	r3, #25
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d114      	bne.n	80092be <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8009294:	78fa      	ldrb	r2, [r7, #3]
 8009296:	6879      	ldr	r1, [r7, #4]
 8009298:	4613      	mov	r3, r2
 800929a:	011b      	lsls	r3, r3, #4
 800929c:	1a9b      	subs	r3, r3, r2
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	440b      	add	r3, r1
 80092a2:	3318      	adds	r3, #24
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d109      	bne.n	80092be <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80092aa:	78fa      	ldrb	r2, [r7, #3]
 80092ac:	6879      	ldr	r1, [r7, #4]
 80092ae:	4613      	mov	r3, r2
 80092b0:	011b      	lsls	r3, r3, #4
 80092b2:	1a9b      	subs	r3, r3, r2
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	440b      	add	r3, r1
 80092b8:	3319      	adds	r3, #25
 80092ba:	2201      	movs	r2, #1
 80092bc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	78fa      	ldrb	r2, [r7, #3]
 80092c4:	4611      	mov	r1, r2
 80092c6:	4618      	mov	r0, r3
 80092c8:	f008 ff17 	bl	80120fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80092cc:	78fb      	ldrb	r3, [r7, #3]
 80092ce:	015a      	lsls	r2, r3, #5
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	4413      	add	r3, r2
 80092d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092d8:	461a      	mov	r2, r3
 80092da:	2310      	movs	r3, #16
 80092dc:	6093      	str	r3, [r2, #8]
 80092de:	e2a7      	b.n	8009830 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	78fa      	ldrb	r2, [r7, #3]
 80092e6:	4611      	mov	r1, r2
 80092e8:	4618      	mov	r0, r3
 80092ea:	f008 f968 	bl	80115be <USB_ReadChInterrupts>
 80092ee:	4603      	mov	r3, r0
 80092f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092f4:	2b80      	cmp	r3, #128	@ 0x80
 80092f6:	f040 8083 	bne.w	8009400 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	799b      	ldrb	r3, [r3, #6]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d111      	bne.n	8009326 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8009302:	78fa      	ldrb	r2, [r7, #3]
 8009304:	6879      	ldr	r1, [r7, #4]
 8009306:	4613      	mov	r3, r2
 8009308:	011b      	lsls	r3, r3, #4
 800930a:	1a9b      	subs	r3, r3, r2
 800930c:	009b      	lsls	r3, r3, #2
 800930e:	440b      	add	r3, r1
 8009310:	334d      	adds	r3, #77	@ 0x4d
 8009312:	2207      	movs	r2, #7
 8009314:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	78fa      	ldrb	r2, [r7, #3]
 800931c:	4611      	mov	r1, r2
 800931e:	4618      	mov	r0, r3
 8009320:	f008 feeb 	bl	80120fa <USB_HC_Halt>
 8009324:	e062      	b.n	80093ec <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8009326:	78fa      	ldrb	r2, [r7, #3]
 8009328:	6879      	ldr	r1, [r7, #4]
 800932a:	4613      	mov	r3, r2
 800932c:	011b      	lsls	r3, r3, #4
 800932e:	1a9b      	subs	r3, r3, r2
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	440b      	add	r3, r1
 8009334:	3344      	adds	r3, #68	@ 0x44
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	1c59      	adds	r1, r3, #1
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	4613      	mov	r3, r2
 800933e:	011b      	lsls	r3, r3, #4
 8009340:	1a9b      	subs	r3, r3, r2
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	4403      	add	r3, r0
 8009346:	3344      	adds	r3, #68	@ 0x44
 8009348:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800934a:	78fa      	ldrb	r2, [r7, #3]
 800934c:	6879      	ldr	r1, [r7, #4]
 800934e:	4613      	mov	r3, r2
 8009350:	011b      	lsls	r3, r3, #4
 8009352:	1a9b      	subs	r3, r3, r2
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	440b      	add	r3, r1
 8009358:	3344      	adds	r3, #68	@ 0x44
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2b02      	cmp	r3, #2
 800935e:	d922      	bls.n	80093a6 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8009360:	78fa      	ldrb	r2, [r7, #3]
 8009362:	6879      	ldr	r1, [r7, #4]
 8009364:	4613      	mov	r3, r2
 8009366:	011b      	lsls	r3, r3, #4
 8009368:	1a9b      	subs	r3, r3, r2
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	440b      	add	r3, r1
 800936e:	3344      	adds	r3, #68	@ 0x44
 8009370:	2200      	movs	r2, #0
 8009372:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8009374:	78fa      	ldrb	r2, [r7, #3]
 8009376:	6879      	ldr	r1, [r7, #4]
 8009378:	4613      	mov	r3, r2
 800937a:	011b      	lsls	r3, r3, #4
 800937c:	1a9b      	subs	r3, r3, r2
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	440b      	add	r3, r1
 8009382:	334c      	adds	r3, #76	@ 0x4c
 8009384:	2204      	movs	r2, #4
 8009386:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8009388:	78fa      	ldrb	r2, [r7, #3]
 800938a:	6879      	ldr	r1, [r7, #4]
 800938c:	4613      	mov	r3, r2
 800938e:	011b      	lsls	r3, r3, #4
 8009390:	1a9b      	subs	r3, r3, r2
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	440b      	add	r3, r1
 8009396:	334c      	adds	r3, #76	@ 0x4c
 8009398:	781a      	ldrb	r2, [r3, #0]
 800939a:	78fb      	ldrb	r3, [r7, #3]
 800939c:	4619      	mov	r1, r3
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f011 fcc4 	bl	801ad2c <HAL_HCD_HC_NotifyURBChange_Callback>
 80093a4:	e022      	b.n	80093ec <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80093a6:	78fa      	ldrb	r2, [r7, #3]
 80093a8:	6879      	ldr	r1, [r7, #4]
 80093aa:	4613      	mov	r3, r2
 80093ac:	011b      	lsls	r3, r3, #4
 80093ae:	1a9b      	subs	r3, r3, r2
 80093b0:	009b      	lsls	r3, r3, #2
 80093b2:	440b      	add	r3, r1
 80093b4:	334c      	adds	r3, #76	@ 0x4c
 80093b6:	2202      	movs	r2, #2
 80093b8:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80093ba:	78fb      	ldrb	r3, [r7, #3]
 80093bc:	015a      	lsls	r2, r3, #5
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	4413      	add	r3, r2
 80093c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80093d0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80093d8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80093da:	78fb      	ldrb	r3, [r7, #3]
 80093dc:	015a      	lsls	r2, r3, #5
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	4413      	add	r3, r2
 80093e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093e6:	461a      	mov	r2, r3
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80093ec:	78fb      	ldrb	r3, [r7, #3]
 80093ee:	015a      	lsls	r2, r3, #5
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	4413      	add	r3, r2
 80093f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093f8:	461a      	mov	r2, r3
 80093fa:	2380      	movs	r3, #128	@ 0x80
 80093fc:	6093      	str	r3, [r2, #8]
 80093fe:	e217      	b.n	8009830 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	78fa      	ldrb	r2, [r7, #3]
 8009406:	4611      	mov	r1, r2
 8009408:	4618      	mov	r0, r3
 800940a:	f008 f8d8 	bl	80115be <USB_ReadChInterrupts>
 800940e:	4603      	mov	r3, r0
 8009410:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009414:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009418:	d11b      	bne.n	8009452 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800941a:	78fa      	ldrb	r2, [r7, #3]
 800941c:	6879      	ldr	r1, [r7, #4]
 800941e:	4613      	mov	r3, r2
 8009420:	011b      	lsls	r3, r3, #4
 8009422:	1a9b      	subs	r3, r3, r2
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	440b      	add	r3, r1
 8009428:	334d      	adds	r3, #77	@ 0x4d
 800942a:	2209      	movs	r2, #9
 800942c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	78fa      	ldrb	r2, [r7, #3]
 8009434:	4611      	mov	r1, r2
 8009436:	4618      	mov	r0, r3
 8009438:	f008 fe5f 	bl	80120fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800943c:	78fb      	ldrb	r3, [r7, #3]
 800943e:	015a      	lsls	r2, r3, #5
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	4413      	add	r3, r2
 8009444:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009448:	461a      	mov	r2, r3
 800944a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800944e:	6093      	str	r3, [r2, #8]
 8009450:	e1ee      	b.n	8009830 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	78fa      	ldrb	r2, [r7, #3]
 8009458:	4611      	mov	r1, r2
 800945a:	4618      	mov	r0, r3
 800945c:	f008 f8af 	bl	80115be <USB_ReadChInterrupts>
 8009460:	4603      	mov	r3, r0
 8009462:	f003 0302 	and.w	r3, r3, #2
 8009466:	2b02      	cmp	r3, #2
 8009468:	f040 81df 	bne.w	800982a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800946c:	78fb      	ldrb	r3, [r7, #3]
 800946e:	015a      	lsls	r2, r3, #5
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	4413      	add	r3, r2
 8009474:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009478:	461a      	mov	r2, r3
 800947a:	2302      	movs	r3, #2
 800947c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800947e:	78fa      	ldrb	r2, [r7, #3]
 8009480:	6879      	ldr	r1, [r7, #4]
 8009482:	4613      	mov	r3, r2
 8009484:	011b      	lsls	r3, r3, #4
 8009486:	1a9b      	subs	r3, r3, r2
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	440b      	add	r3, r1
 800948c:	334d      	adds	r3, #77	@ 0x4d
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	2b01      	cmp	r3, #1
 8009492:	f040 8093 	bne.w	80095bc <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009496:	78fa      	ldrb	r2, [r7, #3]
 8009498:	6879      	ldr	r1, [r7, #4]
 800949a:	4613      	mov	r3, r2
 800949c:	011b      	lsls	r3, r3, #4
 800949e:	1a9b      	subs	r3, r3, r2
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	440b      	add	r3, r1
 80094a4:	334d      	adds	r3, #77	@ 0x4d
 80094a6:	2202      	movs	r2, #2
 80094a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80094aa:	78fa      	ldrb	r2, [r7, #3]
 80094ac:	6879      	ldr	r1, [r7, #4]
 80094ae:	4613      	mov	r3, r2
 80094b0:	011b      	lsls	r3, r3, #4
 80094b2:	1a9b      	subs	r3, r3, r2
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	440b      	add	r3, r1
 80094b8:	334c      	adds	r3, #76	@ 0x4c
 80094ba:	2201      	movs	r2, #1
 80094bc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80094be:	78fa      	ldrb	r2, [r7, #3]
 80094c0:	6879      	ldr	r1, [r7, #4]
 80094c2:	4613      	mov	r3, r2
 80094c4:	011b      	lsls	r3, r3, #4
 80094c6:	1a9b      	subs	r3, r3, r2
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	440b      	add	r3, r1
 80094cc:	3326      	adds	r3, #38	@ 0x26
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	2b02      	cmp	r3, #2
 80094d2:	d00b      	beq.n	80094ec <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80094d4:	78fa      	ldrb	r2, [r7, #3]
 80094d6:	6879      	ldr	r1, [r7, #4]
 80094d8:	4613      	mov	r3, r2
 80094da:	011b      	lsls	r3, r3, #4
 80094dc:	1a9b      	subs	r3, r3, r2
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	440b      	add	r3, r1
 80094e2:	3326      	adds	r3, #38	@ 0x26
 80094e4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80094e6:	2b03      	cmp	r3, #3
 80094e8:	f040 8190 	bne.w	800980c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	799b      	ldrb	r3, [r3, #6]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d115      	bne.n	8009520 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80094f4:	78fa      	ldrb	r2, [r7, #3]
 80094f6:	6879      	ldr	r1, [r7, #4]
 80094f8:	4613      	mov	r3, r2
 80094fa:	011b      	lsls	r3, r3, #4
 80094fc:	1a9b      	subs	r3, r3, r2
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	440b      	add	r3, r1
 8009502:	333d      	adds	r3, #61	@ 0x3d
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	78fa      	ldrb	r2, [r7, #3]
 8009508:	f083 0301 	eor.w	r3, r3, #1
 800950c:	b2d8      	uxtb	r0, r3
 800950e:	6879      	ldr	r1, [r7, #4]
 8009510:	4613      	mov	r3, r2
 8009512:	011b      	lsls	r3, r3, #4
 8009514:	1a9b      	subs	r3, r3, r2
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	440b      	add	r3, r1
 800951a:	333d      	adds	r3, #61	@ 0x3d
 800951c:	4602      	mov	r2, r0
 800951e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	799b      	ldrb	r3, [r3, #6]
 8009524:	2b01      	cmp	r3, #1
 8009526:	f040 8171 	bne.w	800980c <HCD_HC_OUT_IRQHandler+0x954>
 800952a:	78fa      	ldrb	r2, [r7, #3]
 800952c:	6879      	ldr	r1, [r7, #4]
 800952e:	4613      	mov	r3, r2
 8009530:	011b      	lsls	r3, r3, #4
 8009532:	1a9b      	subs	r3, r3, r2
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	440b      	add	r3, r1
 8009538:	3334      	adds	r3, #52	@ 0x34
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2b00      	cmp	r3, #0
 800953e:	f000 8165 	beq.w	800980c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8009542:	78fa      	ldrb	r2, [r7, #3]
 8009544:	6879      	ldr	r1, [r7, #4]
 8009546:	4613      	mov	r3, r2
 8009548:	011b      	lsls	r3, r3, #4
 800954a:	1a9b      	subs	r3, r3, r2
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	440b      	add	r3, r1
 8009550:	3334      	adds	r3, #52	@ 0x34
 8009552:	6819      	ldr	r1, [r3, #0]
 8009554:	78fa      	ldrb	r2, [r7, #3]
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	4613      	mov	r3, r2
 800955a:	011b      	lsls	r3, r3, #4
 800955c:	1a9b      	subs	r3, r3, r2
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	4403      	add	r3, r0
 8009562:	3328      	adds	r3, #40	@ 0x28
 8009564:	881b      	ldrh	r3, [r3, #0]
 8009566:	440b      	add	r3, r1
 8009568:	1e59      	subs	r1, r3, #1
 800956a:	78fa      	ldrb	r2, [r7, #3]
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	4613      	mov	r3, r2
 8009570:	011b      	lsls	r3, r3, #4
 8009572:	1a9b      	subs	r3, r3, r2
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	4403      	add	r3, r0
 8009578:	3328      	adds	r3, #40	@ 0x28
 800957a:	881b      	ldrh	r3, [r3, #0]
 800957c:	fbb1 f3f3 	udiv	r3, r1, r3
 8009580:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	f003 0301 	and.w	r3, r3, #1
 8009588:	2b00      	cmp	r3, #0
 800958a:	f000 813f 	beq.w	800980c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800958e:	78fa      	ldrb	r2, [r7, #3]
 8009590:	6879      	ldr	r1, [r7, #4]
 8009592:	4613      	mov	r3, r2
 8009594:	011b      	lsls	r3, r3, #4
 8009596:	1a9b      	subs	r3, r3, r2
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	440b      	add	r3, r1
 800959c:	333d      	adds	r3, #61	@ 0x3d
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	78fa      	ldrb	r2, [r7, #3]
 80095a2:	f083 0301 	eor.w	r3, r3, #1
 80095a6:	b2d8      	uxtb	r0, r3
 80095a8:	6879      	ldr	r1, [r7, #4]
 80095aa:	4613      	mov	r3, r2
 80095ac:	011b      	lsls	r3, r3, #4
 80095ae:	1a9b      	subs	r3, r3, r2
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	440b      	add	r3, r1
 80095b4:	333d      	adds	r3, #61	@ 0x3d
 80095b6:	4602      	mov	r2, r0
 80095b8:	701a      	strb	r2, [r3, #0]
 80095ba:	e127      	b.n	800980c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80095bc:	78fa      	ldrb	r2, [r7, #3]
 80095be:	6879      	ldr	r1, [r7, #4]
 80095c0:	4613      	mov	r3, r2
 80095c2:	011b      	lsls	r3, r3, #4
 80095c4:	1a9b      	subs	r3, r3, r2
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	440b      	add	r3, r1
 80095ca:	334d      	adds	r3, #77	@ 0x4d
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	2b03      	cmp	r3, #3
 80095d0:	d120      	bne.n	8009614 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80095d2:	78fa      	ldrb	r2, [r7, #3]
 80095d4:	6879      	ldr	r1, [r7, #4]
 80095d6:	4613      	mov	r3, r2
 80095d8:	011b      	lsls	r3, r3, #4
 80095da:	1a9b      	subs	r3, r3, r2
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	440b      	add	r3, r1
 80095e0:	334d      	adds	r3, #77	@ 0x4d
 80095e2:	2202      	movs	r2, #2
 80095e4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80095e6:	78fa      	ldrb	r2, [r7, #3]
 80095e8:	6879      	ldr	r1, [r7, #4]
 80095ea:	4613      	mov	r3, r2
 80095ec:	011b      	lsls	r3, r3, #4
 80095ee:	1a9b      	subs	r3, r3, r2
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	440b      	add	r3, r1
 80095f4:	331b      	adds	r3, #27
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	f040 8107 	bne.w	800980c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80095fe:	78fa      	ldrb	r2, [r7, #3]
 8009600:	6879      	ldr	r1, [r7, #4]
 8009602:	4613      	mov	r3, r2
 8009604:	011b      	lsls	r3, r3, #4
 8009606:	1a9b      	subs	r3, r3, r2
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	440b      	add	r3, r1
 800960c:	334c      	adds	r3, #76	@ 0x4c
 800960e:	2202      	movs	r2, #2
 8009610:	701a      	strb	r2, [r3, #0]
 8009612:	e0fb      	b.n	800980c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8009614:	78fa      	ldrb	r2, [r7, #3]
 8009616:	6879      	ldr	r1, [r7, #4]
 8009618:	4613      	mov	r3, r2
 800961a:	011b      	lsls	r3, r3, #4
 800961c:	1a9b      	subs	r3, r3, r2
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	440b      	add	r3, r1
 8009622:	334d      	adds	r3, #77	@ 0x4d
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	2b04      	cmp	r3, #4
 8009628:	d13a      	bne.n	80096a0 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800962a:	78fa      	ldrb	r2, [r7, #3]
 800962c:	6879      	ldr	r1, [r7, #4]
 800962e:	4613      	mov	r3, r2
 8009630:	011b      	lsls	r3, r3, #4
 8009632:	1a9b      	subs	r3, r3, r2
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	440b      	add	r3, r1
 8009638:	334d      	adds	r3, #77	@ 0x4d
 800963a:	2202      	movs	r2, #2
 800963c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800963e:	78fa      	ldrb	r2, [r7, #3]
 8009640:	6879      	ldr	r1, [r7, #4]
 8009642:	4613      	mov	r3, r2
 8009644:	011b      	lsls	r3, r3, #4
 8009646:	1a9b      	subs	r3, r3, r2
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	440b      	add	r3, r1
 800964c:	334c      	adds	r3, #76	@ 0x4c
 800964e:	2202      	movs	r2, #2
 8009650:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8009652:	78fa      	ldrb	r2, [r7, #3]
 8009654:	6879      	ldr	r1, [r7, #4]
 8009656:	4613      	mov	r3, r2
 8009658:	011b      	lsls	r3, r3, #4
 800965a:	1a9b      	subs	r3, r3, r2
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	440b      	add	r3, r1
 8009660:	331b      	adds	r3, #27
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	2b01      	cmp	r3, #1
 8009666:	f040 80d1 	bne.w	800980c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800966a:	78fa      	ldrb	r2, [r7, #3]
 800966c:	6879      	ldr	r1, [r7, #4]
 800966e:	4613      	mov	r3, r2
 8009670:	011b      	lsls	r3, r3, #4
 8009672:	1a9b      	subs	r3, r3, r2
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	440b      	add	r3, r1
 8009678:	331b      	adds	r3, #27
 800967a:	2200      	movs	r2, #0
 800967c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800967e:	78fb      	ldrb	r3, [r7, #3]
 8009680:	015a      	lsls	r2, r3, #5
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	4413      	add	r3, r2
 8009686:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	78fa      	ldrb	r2, [r7, #3]
 800968e:	0151      	lsls	r1, r2, #5
 8009690:	693a      	ldr	r2, [r7, #16]
 8009692:	440a      	add	r2, r1
 8009694:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009698:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800969c:	6053      	str	r3, [r2, #4]
 800969e:	e0b5      	b.n	800980c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80096a0:	78fa      	ldrb	r2, [r7, #3]
 80096a2:	6879      	ldr	r1, [r7, #4]
 80096a4:	4613      	mov	r3, r2
 80096a6:	011b      	lsls	r3, r3, #4
 80096a8:	1a9b      	subs	r3, r3, r2
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	440b      	add	r3, r1
 80096ae:	334d      	adds	r3, #77	@ 0x4d
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	2b05      	cmp	r3, #5
 80096b4:	d114      	bne.n	80096e0 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80096b6:	78fa      	ldrb	r2, [r7, #3]
 80096b8:	6879      	ldr	r1, [r7, #4]
 80096ba:	4613      	mov	r3, r2
 80096bc:	011b      	lsls	r3, r3, #4
 80096be:	1a9b      	subs	r3, r3, r2
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	440b      	add	r3, r1
 80096c4:	334d      	adds	r3, #77	@ 0x4d
 80096c6:	2202      	movs	r2, #2
 80096c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80096ca:	78fa      	ldrb	r2, [r7, #3]
 80096cc:	6879      	ldr	r1, [r7, #4]
 80096ce:	4613      	mov	r3, r2
 80096d0:	011b      	lsls	r3, r3, #4
 80096d2:	1a9b      	subs	r3, r3, r2
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	440b      	add	r3, r1
 80096d8:	334c      	adds	r3, #76	@ 0x4c
 80096da:	2202      	movs	r2, #2
 80096dc:	701a      	strb	r2, [r3, #0]
 80096de:	e095      	b.n	800980c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80096e0:	78fa      	ldrb	r2, [r7, #3]
 80096e2:	6879      	ldr	r1, [r7, #4]
 80096e4:	4613      	mov	r3, r2
 80096e6:	011b      	lsls	r3, r3, #4
 80096e8:	1a9b      	subs	r3, r3, r2
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	440b      	add	r3, r1
 80096ee:	334d      	adds	r3, #77	@ 0x4d
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	2b06      	cmp	r3, #6
 80096f4:	d114      	bne.n	8009720 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80096f6:	78fa      	ldrb	r2, [r7, #3]
 80096f8:	6879      	ldr	r1, [r7, #4]
 80096fa:	4613      	mov	r3, r2
 80096fc:	011b      	lsls	r3, r3, #4
 80096fe:	1a9b      	subs	r3, r3, r2
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	440b      	add	r3, r1
 8009704:	334d      	adds	r3, #77	@ 0x4d
 8009706:	2202      	movs	r2, #2
 8009708:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800970a:	78fa      	ldrb	r2, [r7, #3]
 800970c:	6879      	ldr	r1, [r7, #4]
 800970e:	4613      	mov	r3, r2
 8009710:	011b      	lsls	r3, r3, #4
 8009712:	1a9b      	subs	r3, r3, r2
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	440b      	add	r3, r1
 8009718:	334c      	adds	r3, #76	@ 0x4c
 800971a:	2205      	movs	r2, #5
 800971c:	701a      	strb	r2, [r3, #0]
 800971e:	e075      	b.n	800980c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8009720:	78fa      	ldrb	r2, [r7, #3]
 8009722:	6879      	ldr	r1, [r7, #4]
 8009724:	4613      	mov	r3, r2
 8009726:	011b      	lsls	r3, r3, #4
 8009728:	1a9b      	subs	r3, r3, r2
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	440b      	add	r3, r1
 800972e:	334d      	adds	r3, #77	@ 0x4d
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	2b07      	cmp	r3, #7
 8009734:	d00a      	beq.n	800974c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8009736:	78fa      	ldrb	r2, [r7, #3]
 8009738:	6879      	ldr	r1, [r7, #4]
 800973a:	4613      	mov	r3, r2
 800973c:	011b      	lsls	r3, r3, #4
 800973e:	1a9b      	subs	r3, r3, r2
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	440b      	add	r3, r1
 8009744:	334d      	adds	r3, #77	@ 0x4d
 8009746:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8009748:	2b09      	cmp	r3, #9
 800974a:	d170      	bne.n	800982e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800974c:	78fa      	ldrb	r2, [r7, #3]
 800974e:	6879      	ldr	r1, [r7, #4]
 8009750:	4613      	mov	r3, r2
 8009752:	011b      	lsls	r3, r3, #4
 8009754:	1a9b      	subs	r3, r3, r2
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	440b      	add	r3, r1
 800975a:	334d      	adds	r3, #77	@ 0x4d
 800975c:	2202      	movs	r2, #2
 800975e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8009760:	78fa      	ldrb	r2, [r7, #3]
 8009762:	6879      	ldr	r1, [r7, #4]
 8009764:	4613      	mov	r3, r2
 8009766:	011b      	lsls	r3, r3, #4
 8009768:	1a9b      	subs	r3, r3, r2
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	440b      	add	r3, r1
 800976e:	3344      	adds	r3, #68	@ 0x44
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	1c59      	adds	r1, r3, #1
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	4613      	mov	r3, r2
 8009778:	011b      	lsls	r3, r3, #4
 800977a:	1a9b      	subs	r3, r3, r2
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	4403      	add	r3, r0
 8009780:	3344      	adds	r3, #68	@ 0x44
 8009782:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009784:	78fa      	ldrb	r2, [r7, #3]
 8009786:	6879      	ldr	r1, [r7, #4]
 8009788:	4613      	mov	r3, r2
 800978a:	011b      	lsls	r3, r3, #4
 800978c:	1a9b      	subs	r3, r3, r2
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	440b      	add	r3, r1
 8009792:	3344      	adds	r3, #68	@ 0x44
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2b02      	cmp	r3, #2
 8009798:	d914      	bls.n	80097c4 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800979a:	78fa      	ldrb	r2, [r7, #3]
 800979c:	6879      	ldr	r1, [r7, #4]
 800979e:	4613      	mov	r3, r2
 80097a0:	011b      	lsls	r3, r3, #4
 80097a2:	1a9b      	subs	r3, r3, r2
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	440b      	add	r3, r1
 80097a8:	3344      	adds	r3, #68	@ 0x44
 80097aa:	2200      	movs	r2, #0
 80097ac:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80097ae:	78fa      	ldrb	r2, [r7, #3]
 80097b0:	6879      	ldr	r1, [r7, #4]
 80097b2:	4613      	mov	r3, r2
 80097b4:	011b      	lsls	r3, r3, #4
 80097b6:	1a9b      	subs	r3, r3, r2
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	440b      	add	r3, r1
 80097bc:	334c      	adds	r3, #76	@ 0x4c
 80097be:	2204      	movs	r2, #4
 80097c0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80097c2:	e022      	b.n	800980a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80097c4:	78fa      	ldrb	r2, [r7, #3]
 80097c6:	6879      	ldr	r1, [r7, #4]
 80097c8:	4613      	mov	r3, r2
 80097ca:	011b      	lsls	r3, r3, #4
 80097cc:	1a9b      	subs	r3, r3, r2
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	440b      	add	r3, r1
 80097d2:	334c      	adds	r3, #76	@ 0x4c
 80097d4:	2202      	movs	r2, #2
 80097d6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80097d8:	78fb      	ldrb	r3, [r7, #3]
 80097da:	015a      	lsls	r2, r3, #5
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	4413      	add	r3, r2
 80097e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80097ee:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80097f6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80097f8:	78fb      	ldrb	r3, [r7, #3]
 80097fa:	015a      	lsls	r2, r3, #5
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	4413      	add	r3, r2
 8009800:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009804:	461a      	mov	r2, r3
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800980a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800980c:	78fa      	ldrb	r2, [r7, #3]
 800980e:	6879      	ldr	r1, [r7, #4]
 8009810:	4613      	mov	r3, r2
 8009812:	011b      	lsls	r3, r3, #4
 8009814:	1a9b      	subs	r3, r3, r2
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	440b      	add	r3, r1
 800981a:	334c      	adds	r3, #76	@ 0x4c
 800981c:	781a      	ldrb	r2, [r3, #0]
 800981e:	78fb      	ldrb	r3, [r7, #3]
 8009820:	4619      	mov	r1, r3
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f011 fa82 	bl	801ad2c <HAL_HCD_HC_NotifyURBChange_Callback>
 8009828:	e002      	b.n	8009830 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800982a:	bf00      	nop
 800982c:	e000      	b.n	8009830 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800982e:	bf00      	nop
  }
}
 8009830:	3718      	adds	r7, #24
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009836:	b580      	push	{r7, lr}
 8009838:	b08a      	sub	sp, #40	@ 0x28
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009846:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	6a1b      	ldr	r3, [r3, #32]
 800984e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	f003 030f 	and.w	r3, r3, #15
 8009856:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8009858:	69fb      	ldr	r3, [r7, #28]
 800985a:	0c5b      	lsrs	r3, r3, #17
 800985c:	f003 030f 	and.w	r3, r3, #15
 8009860:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009862:	69fb      	ldr	r3, [r7, #28]
 8009864:	091b      	lsrs	r3, r3, #4
 8009866:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800986a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	2b02      	cmp	r3, #2
 8009870:	d004      	beq.n	800987c <HCD_RXQLVL_IRQHandler+0x46>
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	2b05      	cmp	r3, #5
 8009876:	f000 80b6 	beq.w	80099e6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800987a:	e0b7      	b.n	80099ec <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	2b00      	cmp	r3, #0
 8009880:	f000 80b3 	beq.w	80099ea <HCD_RXQLVL_IRQHandler+0x1b4>
 8009884:	6879      	ldr	r1, [r7, #4]
 8009886:	69ba      	ldr	r2, [r7, #24]
 8009888:	4613      	mov	r3, r2
 800988a:	011b      	lsls	r3, r3, #4
 800988c:	1a9b      	subs	r3, r3, r2
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	440b      	add	r3, r1
 8009892:	332c      	adds	r3, #44	@ 0x2c
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	2b00      	cmp	r3, #0
 8009898:	f000 80a7 	beq.w	80099ea <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800989c:	6879      	ldr	r1, [r7, #4]
 800989e:	69ba      	ldr	r2, [r7, #24]
 80098a0:	4613      	mov	r3, r2
 80098a2:	011b      	lsls	r3, r3, #4
 80098a4:	1a9b      	subs	r3, r3, r2
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	440b      	add	r3, r1
 80098aa:	3338      	adds	r3, #56	@ 0x38
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	18d1      	adds	r1, r2, r3
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	69ba      	ldr	r2, [r7, #24]
 80098b6:	4613      	mov	r3, r2
 80098b8:	011b      	lsls	r3, r3, #4
 80098ba:	1a9b      	subs	r3, r3, r2
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	4403      	add	r3, r0
 80098c0:	3334      	adds	r3, #52	@ 0x34
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4299      	cmp	r1, r3
 80098c6:	f200 8083 	bhi.w	80099d0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6818      	ldr	r0, [r3, #0]
 80098ce:	6879      	ldr	r1, [r7, #4]
 80098d0:	69ba      	ldr	r2, [r7, #24]
 80098d2:	4613      	mov	r3, r2
 80098d4:	011b      	lsls	r3, r3, #4
 80098d6:	1a9b      	subs	r3, r3, r2
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	440b      	add	r3, r1
 80098dc:	332c      	adds	r3, #44	@ 0x2c
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	693a      	ldr	r2, [r7, #16]
 80098e2:	b292      	uxth	r2, r2
 80098e4:	4619      	mov	r1, r3
 80098e6:	f007 fdff 	bl	80114e8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80098ea:	6879      	ldr	r1, [r7, #4]
 80098ec:	69ba      	ldr	r2, [r7, #24]
 80098ee:	4613      	mov	r3, r2
 80098f0:	011b      	lsls	r3, r3, #4
 80098f2:	1a9b      	subs	r3, r3, r2
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	440b      	add	r3, r1
 80098f8:	332c      	adds	r3, #44	@ 0x2c
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	18d1      	adds	r1, r2, r3
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	69ba      	ldr	r2, [r7, #24]
 8009904:	4613      	mov	r3, r2
 8009906:	011b      	lsls	r3, r3, #4
 8009908:	1a9b      	subs	r3, r3, r2
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	4403      	add	r3, r0
 800990e:	332c      	adds	r3, #44	@ 0x2c
 8009910:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8009912:	6879      	ldr	r1, [r7, #4]
 8009914:	69ba      	ldr	r2, [r7, #24]
 8009916:	4613      	mov	r3, r2
 8009918:	011b      	lsls	r3, r3, #4
 800991a:	1a9b      	subs	r3, r3, r2
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	440b      	add	r3, r1
 8009920:	3338      	adds	r3, #56	@ 0x38
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	18d1      	adds	r1, r2, r3
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	69ba      	ldr	r2, [r7, #24]
 800992c:	4613      	mov	r3, r2
 800992e:	011b      	lsls	r3, r3, #4
 8009930:	1a9b      	subs	r3, r3, r2
 8009932:	009b      	lsls	r3, r3, #2
 8009934:	4403      	add	r3, r0
 8009936:	3338      	adds	r3, #56	@ 0x38
 8009938:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800993a:	69bb      	ldr	r3, [r7, #24]
 800993c:	015a      	lsls	r2, r3, #5
 800993e:	6a3b      	ldr	r3, [r7, #32]
 8009940:	4413      	add	r3, r2
 8009942:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009946:	691b      	ldr	r3, [r3, #16]
 8009948:	0cdb      	lsrs	r3, r3, #19
 800994a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800994e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8009950:	6879      	ldr	r1, [r7, #4]
 8009952:	69ba      	ldr	r2, [r7, #24]
 8009954:	4613      	mov	r3, r2
 8009956:	011b      	lsls	r3, r3, #4
 8009958:	1a9b      	subs	r3, r3, r2
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	440b      	add	r3, r1
 800995e:	3328      	adds	r3, #40	@ 0x28
 8009960:	881b      	ldrh	r3, [r3, #0]
 8009962:	461a      	mov	r2, r3
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	4293      	cmp	r3, r2
 8009968:	d13f      	bne.n	80099ea <HCD_RXQLVL_IRQHandler+0x1b4>
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d03c      	beq.n	80099ea <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8009970:	69bb      	ldr	r3, [r7, #24]
 8009972:	015a      	lsls	r2, r3, #5
 8009974:	6a3b      	ldr	r3, [r7, #32]
 8009976:	4413      	add	r3, r2
 8009978:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009986:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800998e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8009990:	69bb      	ldr	r3, [r7, #24]
 8009992:	015a      	lsls	r2, r3, #5
 8009994:	6a3b      	ldr	r3, [r7, #32]
 8009996:	4413      	add	r3, r2
 8009998:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800999c:	461a      	mov	r2, r3
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80099a2:	6879      	ldr	r1, [r7, #4]
 80099a4:	69ba      	ldr	r2, [r7, #24]
 80099a6:	4613      	mov	r3, r2
 80099a8:	011b      	lsls	r3, r3, #4
 80099aa:	1a9b      	subs	r3, r3, r2
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	440b      	add	r3, r1
 80099b0:	333c      	adds	r3, #60	@ 0x3c
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	f083 0301 	eor.w	r3, r3, #1
 80099b8:	b2d8      	uxtb	r0, r3
 80099ba:	6879      	ldr	r1, [r7, #4]
 80099bc:	69ba      	ldr	r2, [r7, #24]
 80099be:	4613      	mov	r3, r2
 80099c0:	011b      	lsls	r3, r3, #4
 80099c2:	1a9b      	subs	r3, r3, r2
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	440b      	add	r3, r1
 80099c8:	333c      	adds	r3, #60	@ 0x3c
 80099ca:	4602      	mov	r2, r0
 80099cc:	701a      	strb	r2, [r3, #0]
      break;
 80099ce:	e00c      	b.n	80099ea <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80099d0:	6879      	ldr	r1, [r7, #4]
 80099d2:	69ba      	ldr	r2, [r7, #24]
 80099d4:	4613      	mov	r3, r2
 80099d6:	011b      	lsls	r3, r3, #4
 80099d8:	1a9b      	subs	r3, r3, r2
 80099da:	009b      	lsls	r3, r3, #2
 80099dc:	440b      	add	r3, r1
 80099de:	334c      	adds	r3, #76	@ 0x4c
 80099e0:	2204      	movs	r2, #4
 80099e2:	701a      	strb	r2, [r3, #0]
      break;
 80099e4:	e001      	b.n	80099ea <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80099e6:	bf00      	nop
 80099e8:	e000      	b.n	80099ec <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80099ea:	bf00      	nop
  }
}
 80099ec:	bf00      	nop
 80099ee:	3728      	adds	r7, #40	@ 0x28
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b086      	sub	sp, #24
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8009a20:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f003 0302 	and.w	r3, r3, #2
 8009a28:	2b02      	cmp	r3, #2
 8009a2a:	d10b      	bne.n	8009a44 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f003 0301 	and.w	r3, r3, #1
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d102      	bne.n	8009a3c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f011 f95c 	bl	801acf4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	f043 0302 	orr.w	r3, r3, #2
 8009a42:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f003 0308 	and.w	r3, r3, #8
 8009a4a:	2b08      	cmp	r3, #8
 8009a4c:	d132      	bne.n	8009ab4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	f043 0308 	orr.w	r3, r3, #8
 8009a54:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f003 0304 	and.w	r3, r3, #4
 8009a5c:	2b04      	cmp	r3, #4
 8009a5e:	d126      	bne.n	8009aae <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	7a5b      	ldrb	r3, [r3, #9]
 8009a64:	2b02      	cmp	r3, #2
 8009a66:	d113      	bne.n	8009a90 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8009a6e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009a72:	d106      	bne.n	8009a82 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2102      	movs	r1, #2
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f007 febe 	bl	80117fc <USB_InitFSLSPClkSel>
 8009a80:	e011      	b.n	8009aa6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	2101      	movs	r1, #1
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f007 feb7 	bl	80117fc <USB_InitFSLSPClkSel>
 8009a8e:	e00a      	b.n	8009aa6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	79db      	ldrb	r3, [r3, #7]
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d106      	bne.n	8009aa6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8009aa4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f011 f952 	bl	801ad50 <HAL_HCD_PortEnabled_Callback>
 8009aac:	e002      	b.n	8009ab4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f011 f95c 	bl	801ad6c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f003 0320 	and.w	r3, r3, #32
 8009aba:	2b20      	cmp	r3, #32
 8009abc:	d103      	bne.n	8009ac6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	f043 0320 	orr.w	r3, r3, #32
 8009ac4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009acc:	461a      	mov	r2, r3
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	6013      	str	r3, [r2, #0]
}
 8009ad2:	bf00      	nop
 8009ad4:	3718      	adds	r7, #24
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
	...

08009adc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d101      	bne.n	8009aee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009aea:	2301      	movs	r3, #1
 8009aec:	e08b      	b.n	8009c06 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d106      	bne.n	8009b08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2200      	movs	r2, #0
 8009afe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f7fa f88c 	bl	8003c20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2224      	movs	r2, #36	@ 0x24
 8009b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f022 0201 	bic.w	r2, r2, #1
 8009b1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	685a      	ldr	r2, [r3, #4]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009b2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	689a      	ldr	r2, [r3, #8]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009b3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	68db      	ldr	r3, [r3, #12]
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d107      	bne.n	8009b56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	689a      	ldr	r2, [r3, #8]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009b52:	609a      	str	r2, [r3, #8]
 8009b54:	e006      	b.n	8009b64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	689a      	ldr	r2, [r3, #8]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8009b62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	68db      	ldr	r3, [r3, #12]
 8009b68:	2b02      	cmp	r3, #2
 8009b6a:	d108      	bne.n	8009b7e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	685a      	ldr	r2, [r3, #4]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009b7a:	605a      	str	r2, [r3, #4]
 8009b7c:	e007      	b.n	8009b8e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	685a      	ldr	r2, [r3, #4]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009b8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	6859      	ldr	r1, [r3, #4]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	4b1d      	ldr	r3, [pc, #116]	@ (8009c10 <HAL_I2C_Init+0x134>)
 8009b9a:	430b      	orrs	r3, r1
 8009b9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	68da      	ldr	r2, [r3, #12]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009bac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	691a      	ldr	r2, [r3, #16]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	695b      	ldr	r3, [r3, #20]
 8009bb6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	699b      	ldr	r3, [r3, #24]
 8009bbe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	430a      	orrs	r2, r1
 8009bc6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	69d9      	ldr	r1, [r3, #28]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6a1a      	ldr	r2, [r3, #32]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	430a      	orrs	r2, r1
 8009bd6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f042 0201 	orr.w	r2, r2, #1
 8009be6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2220      	movs	r2, #32
 8009bf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009c04:	2300      	movs	r3, #0
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3708      	adds	r7, #8
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	02008000 	.word	0x02008000

08009c14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b083      	sub	sp, #12
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c24:	b2db      	uxtb	r3, r3
 8009c26:	2b20      	cmp	r3, #32
 8009c28:	d138      	bne.n	8009c9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d101      	bne.n	8009c38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009c34:	2302      	movs	r3, #2
 8009c36:	e032      	b.n	8009c9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2224      	movs	r2, #36	@ 0x24
 8009c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f022 0201 	bic.w	r2, r2, #1
 8009c56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009c66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	6819      	ldr	r1, [r3, #0]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	683a      	ldr	r2, [r7, #0]
 8009c74:	430a      	orrs	r2, r1
 8009c76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f042 0201 	orr.w	r2, r2, #1
 8009c86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2220      	movs	r2, #32
 8009c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	e000      	b.n	8009c9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009c9c:	2302      	movs	r3, #2
  }
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	370c      	adds	r7, #12
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr

08009caa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009caa:	b480      	push	{r7}
 8009cac:	b085      	sub	sp, #20
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	6078      	str	r0, [r7, #4]
 8009cb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009cba:	b2db      	uxtb	r3, r3
 8009cbc:	2b20      	cmp	r3, #32
 8009cbe:	d139      	bne.n	8009d34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d101      	bne.n	8009cce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009cca:	2302      	movs	r3, #2
 8009ccc:	e033      	b.n	8009d36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2224      	movs	r2, #36	@ 0x24
 8009cda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	681a      	ldr	r2, [r3, #0]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f022 0201 	bic.w	r2, r2, #1
 8009cec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009cfc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	021b      	lsls	r3, r3, #8
 8009d02:	68fa      	ldr	r2, [r7, #12]
 8009d04:	4313      	orrs	r3, r2
 8009d06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f042 0201 	orr.w	r2, r2, #1
 8009d1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2220      	movs	r2, #32
 8009d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009d30:	2300      	movs	r3, #0
 8009d32:	e000      	b.n	8009d36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009d34:	2302      	movs	r3, #2
  }
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3714      	adds	r7, #20
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr

08009d42 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b084      	sub	sp, #16
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d101      	bne.n	8009d54 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009d50:	2301      	movs	r3, #1
 8009d52:	e08f      	b.n	8009e74 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d106      	bne.n	8009d6e <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2200      	movs	r2, #0
 8009d64:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f7fa f801 	bl	8003d70 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2202      	movs	r2, #2
 8009d72:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	699a      	ldr	r2, [r3, #24]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8009d84:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	6999      	ldr	r1, [r3, #24]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	685a      	ldr	r2, [r3, #4]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009d9a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	691b      	ldr	r3, [r3, #16]
 8009da0:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	430a      	orrs	r2, r1
 8009da8:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	695b      	ldr	r3, [r3, #20]
 8009dae:	041b      	lsls	r3, r3, #16
 8009db0:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6999      	ldr	r1, [r3, #24]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	68fa      	ldr	r2, [r7, #12]
 8009dbc:	430a      	orrs	r2, r1
 8009dbe:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	69db      	ldr	r3, [r3, #28]
 8009dc4:	041b      	lsls	r3, r3, #16
 8009dc6:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6a19      	ldr	r1, [r3, #32]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	68fa      	ldr	r2, [r7, #12]
 8009dd2:	430a      	orrs	r2, r1
 8009dd4:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dda:	041b      	lsls	r3, r3, #16
 8009ddc:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	68fa      	ldr	r2, [r7, #12]
 8009de8:	430a      	orrs	r2, r1
 8009dea:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009df0:	041b      	lsls	r3, r3, #16
 8009df2:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	68fa      	ldr	r2, [r7, #12]
 8009dfe:	430a      	orrs	r2, r1
 8009e00:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009e08:	021b      	lsls	r3, r3, #8
 8009e0a:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8009e12:	041b      	lsls	r3, r3, #16
 8009e14:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8009e24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009e2c:	68ba      	ldr	r2, [r7, #8]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	4313      	orrs	r3, r2
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8009e38:	431a      	orrs	r2, r3
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	430a      	orrs	r2, r1
 8009e40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f042 0206 	orr.w	r2, r2, #6
 8009e50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	699a      	ldr	r2, [r3, #24]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f042 0201 	orr.w	r2, r2, #1
 8009e60:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2200      	movs	r2, #0
 8009e66:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8009e72:	2300      	movs	r3, #0
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3710      	adds	r7, #16
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e8a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e92:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f003 0304 	and.w	r3, r3, #4
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d023      	beq.n	8009ee6 <HAL_LTDC_IRQHandler+0x6a>
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	f003 0304 	and.w	r3, r3, #4
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d01e      	beq.n	8009ee6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f022 0204 	bic.w	r2, r2, #4
 8009eb6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	2204      	movs	r2, #4
 8009ebe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009ec6:	f043 0201 	orr.w	r2, r3, #1
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2204      	movs	r2, #4
 8009ed4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f000 f86f 	bl	8009fc4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f003 0302 	and.w	r3, r3, #2
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d023      	beq.n	8009f38 <HAL_LTDC_IRQHandler+0xbc>
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	f003 0302 	and.w	r3, r3, #2
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d01e      	beq.n	8009f38 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f022 0202 	bic.w	r2, r2, #2
 8009f08:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	2202      	movs	r2, #2
 8009f10:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009f18:	f043 0202 	orr.w	r2, r3, #2
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2204      	movs	r2, #4
 8009f26:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 f846 	bl	8009fc4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f003 0301 	and.w	r3, r3, #1
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d01b      	beq.n	8009f7a <HAL_LTDC_IRQHandler+0xfe>
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	f003 0301 	and.w	r3, r3, #1
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d016      	beq.n	8009f7a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f022 0201 	bic.w	r2, r2, #1
 8009f5a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	2201      	movs	r2, #1
 8009f62:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2201      	movs	r2, #1
 8009f68:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 f82f 	bl	8009fd8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	f003 0308 	and.w	r3, r3, #8
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d01b      	beq.n	8009fbc <HAL_LTDC_IRQHandler+0x140>
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	f003 0308 	and.w	r3, r3, #8
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d016      	beq.n	8009fbc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f022 0208 	bic.w	r2, r2, #8
 8009f9c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	2208      	movs	r2, #8
 8009fa4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2201      	movs	r2, #1
 8009faa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 f818 	bl	8009fec <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8009fbc:	bf00      	nop
 8009fbe:	3710      	adds	r7, #16
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8009fcc:	bf00      	nop
 8009fce:	370c      	adds	r7, #12
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr

08009fd8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b083      	sub	sp, #12
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8009fe0:	bf00      	nop
 8009fe2:	370c      	adds	r7, #12
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr

08009fec <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b083      	sub	sp, #12
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009ff4:	bf00      	nop
 8009ff6:	370c      	adds	r7, #12
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr

0800a000 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a000:	b5b0      	push	{r4, r5, r7, lr}
 800a002:	b084      	sub	sp, #16
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800a012:	2b01      	cmp	r3, #1
 800a014:	d101      	bne.n	800a01a <HAL_LTDC_ConfigLayer+0x1a>
 800a016:	2302      	movs	r3, #2
 800a018:	e02c      	b.n	800a074 <HAL_LTDC_ConfigLayer+0x74>
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2201      	movs	r2, #1
 800a01e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2202      	movs	r2, #2
 800a026:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a02a:	68fa      	ldr	r2, [r7, #12]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2134      	movs	r1, #52	@ 0x34
 800a030:	fb01 f303 	mul.w	r3, r1, r3
 800a034:	4413      	add	r3, r2
 800a036:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	4614      	mov	r4, r2
 800a03e:	461d      	mov	r5, r3
 800a040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a04a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a04c:	682b      	ldr	r3, [r5, #0]
 800a04e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	68b9      	ldr	r1, [r7, #8]
 800a054:	68f8      	ldr	r0, [r7, #12]
 800a056:	f000 f811 	bl	800a07c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	2201      	movs	r2, #1
 800a060:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2201      	movs	r2, #1
 800a066:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2200      	movs	r2, #0
 800a06e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800a072:	2300      	movs	r3, #0
}
 800a074:	4618      	mov	r0, r3
 800a076:	3710      	adds	r7, #16
 800a078:	46bd      	mov	sp, r7
 800a07a:	bdb0      	pop	{r4, r5, r7, pc}

0800a07c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b089      	sub	sp, #36	@ 0x24
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	60b9      	str	r1, [r7, #8]
 800a086:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	685a      	ldr	r2, [r3, #4]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	68db      	ldr	r3, [r3, #12]
 800a092:	0c1b      	lsrs	r3, r3, #16
 800a094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a098:	4413      	add	r3, r2
 800a09a:	041b      	lsls	r3, r3, #16
 800a09c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	01db      	lsls	r3, r3, #7
 800a0a8:	4413      	add	r3, r2
 800a0aa:	3384      	adds	r3, #132	@ 0x84
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	68fa      	ldr	r2, [r7, #12]
 800a0b0:	6812      	ldr	r2, [r2, #0]
 800a0b2:	4611      	mov	r1, r2
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	01d2      	lsls	r2, r2, #7
 800a0b8:	440a      	add	r2, r1
 800a0ba:	3284      	adds	r2, #132	@ 0x84
 800a0bc:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a0c0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	68db      	ldr	r3, [r3, #12]
 800a0cc:	0c1b      	lsrs	r3, r3, #16
 800a0ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a0d2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a0d4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4619      	mov	r1, r3
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	01db      	lsls	r3, r3, #7
 800a0e0:	440b      	add	r3, r1
 800a0e2:	3384      	adds	r3, #132	@ 0x84
 800a0e4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a0e6:	69fb      	ldr	r3, [r7, #28]
 800a0e8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a0ea:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	68da      	ldr	r2, [r3, #12]
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	68db      	ldr	r3, [r3, #12]
 800a0f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a0fa:	4413      	add	r3, r2
 800a0fc:	041b      	lsls	r3, r3, #16
 800a0fe:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	461a      	mov	r2, r3
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	01db      	lsls	r3, r3, #7
 800a10a:	4413      	add	r3, r2
 800a10c:	3384      	adds	r3, #132	@ 0x84
 800a10e:	689b      	ldr	r3, [r3, #8]
 800a110:	68fa      	ldr	r2, [r7, #12]
 800a112:	6812      	ldr	r2, [r2, #0]
 800a114:	4611      	mov	r1, r2
 800a116:	687a      	ldr	r2, [r7, #4]
 800a118:	01d2      	lsls	r2, r2, #7
 800a11a:	440a      	add	r2, r1
 800a11c:	3284      	adds	r2, #132	@ 0x84
 800a11e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a122:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	689a      	ldr	r2, [r3, #8]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	68db      	ldr	r3, [r3, #12]
 800a12e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a132:	4413      	add	r3, r2
 800a134:	1c5a      	adds	r2, r3, #1
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4619      	mov	r1, r3
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	01db      	lsls	r3, r3, #7
 800a140:	440b      	add	r3, r1
 800a142:	3384      	adds	r3, #132	@ 0x84
 800a144:	4619      	mov	r1, r3
 800a146:	69fb      	ldr	r3, [r7, #28]
 800a148:	4313      	orrs	r3, r2
 800a14a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	461a      	mov	r2, r3
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	01db      	lsls	r3, r3, #7
 800a156:	4413      	add	r3, r2
 800a158:	3384      	adds	r3, #132	@ 0x84
 800a15a:	691b      	ldr	r3, [r3, #16]
 800a15c:	68fa      	ldr	r2, [r7, #12]
 800a15e:	6812      	ldr	r2, [r2, #0]
 800a160:	4611      	mov	r1, r2
 800a162:	687a      	ldr	r2, [r7, #4]
 800a164:	01d2      	lsls	r2, r2, #7
 800a166:	440a      	add	r2, r1
 800a168:	3284      	adds	r2, #132	@ 0x84
 800a16a:	f023 0307 	bic.w	r3, r3, #7
 800a16e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	461a      	mov	r2, r3
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	01db      	lsls	r3, r3, #7
 800a17a:	4413      	add	r3, r2
 800a17c:	3384      	adds	r3, #132	@ 0x84
 800a17e:	461a      	mov	r2, r3
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	691b      	ldr	r3, [r3, #16]
 800a184:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a18c:	021b      	lsls	r3, r3, #8
 800a18e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a196:	041b      	lsls	r3, r3, #16
 800a198:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	699b      	ldr	r3, [r3, #24]
 800a19e:	061b      	lsls	r3, r3, #24
 800a1a0:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	69fb      	ldr	r3, [r7, #28]
 800a1ac:	431a      	orrs	r2, r3
 800a1ae:	69bb      	ldr	r3, [r7, #24]
 800a1b0:	431a      	orrs	r2, r3
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	01db      	lsls	r3, r3, #7
 800a1bc:	440b      	add	r3, r1
 800a1be:	3384      	adds	r3, #132	@ 0x84
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	01db      	lsls	r3, r3, #7
 800a1d2:	4413      	add	r3, r2
 800a1d4:	3384      	adds	r3, #132	@ 0x84
 800a1d6:	695b      	ldr	r3, [r3, #20]
 800a1d8:	68fa      	ldr	r2, [r7, #12]
 800a1da:	6812      	ldr	r2, [r2, #0]
 800a1dc:	4611      	mov	r1, r2
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	01d2      	lsls	r2, r2, #7
 800a1e2:	440a      	add	r2, r1
 800a1e4:	3284      	adds	r2, #132	@ 0x84
 800a1e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a1ea:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	01db      	lsls	r3, r3, #7
 800a1f6:	4413      	add	r3, r2
 800a1f8:	3384      	adds	r3, #132	@ 0x84
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	695b      	ldr	r3, [r3, #20]
 800a200:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	461a      	mov	r2, r3
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	01db      	lsls	r3, r3, #7
 800a20c:	4413      	add	r3, r2
 800a20e:	3384      	adds	r3, #132	@ 0x84
 800a210:	69da      	ldr	r2, [r3, #28]
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4619      	mov	r1, r3
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	01db      	lsls	r3, r3, #7
 800a21c:	440b      	add	r3, r1
 800a21e:	3384      	adds	r3, #132	@ 0x84
 800a220:	4619      	mov	r1, r3
 800a222:	4b4f      	ldr	r3, [pc, #316]	@ (800a360 <LTDC_SetConfig+0x2e4>)
 800a224:	4013      	ands	r3, r2
 800a226:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	69da      	ldr	r2, [r3, #28]
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	6a1b      	ldr	r3, [r3, #32]
 800a230:	68f9      	ldr	r1, [r7, #12]
 800a232:	6809      	ldr	r1, [r1, #0]
 800a234:	4608      	mov	r0, r1
 800a236:	6879      	ldr	r1, [r7, #4]
 800a238:	01c9      	lsls	r1, r1, #7
 800a23a:	4401      	add	r1, r0
 800a23c:	3184      	adds	r1, #132	@ 0x84
 800a23e:	4313      	orrs	r3, r2
 800a240:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	461a      	mov	r2, r3
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	01db      	lsls	r3, r3, #7
 800a24c:	4413      	add	r3, r2
 800a24e:	3384      	adds	r3, #132	@ 0x84
 800a250:	461a      	mov	r2, r3
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a256:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	691b      	ldr	r3, [r3, #16]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d102      	bne.n	800a266 <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 800a260:	2304      	movs	r3, #4
 800a262:	61fb      	str	r3, [r7, #28]
 800a264:	e01b      	b.n	800a29e <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	691b      	ldr	r3, [r3, #16]
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d102      	bne.n	800a274 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 800a26e:	2303      	movs	r3, #3
 800a270:	61fb      	str	r3, [r7, #28]
 800a272:	e014      	b.n	800a29e <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	691b      	ldr	r3, [r3, #16]
 800a278:	2b04      	cmp	r3, #4
 800a27a:	d00b      	beq.n	800a294 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a280:	2b02      	cmp	r3, #2
 800a282:	d007      	beq.n	800a294 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a288:	2b03      	cmp	r3, #3
 800a28a:	d003      	beq.n	800a294 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a290:	2b07      	cmp	r3, #7
 800a292:	d102      	bne.n	800a29a <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 800a294:	2302      	movs	r3, #2
 800a296:	61fb      	str	r3, [r7, #28]
 800a298:	e001      	b.n	800a29e <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 800a29a:	2301      	movs	r3, #1
 800a29c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	01db      	lsls	r3, r3, #7
 800a2a8:	4413      	add	r3, r2
 800a2aa:	3384      	adds	r3, #132	@ 0x84
 800a2ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2ae:	68fa      	ldr	r2, [r7, #12]
 800a2b0:	6812      	ldr	r2, [r2, #0]
 800a2b2:	4611      	mov	r1, r2
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	01d2      	lsls	r2, r2, #7
 800a2b8:	440a      	add	r2, r1
 800a2ba:	3284      	adds	r2, #132	@ 0x84
 800a2bc:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800a2c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2c6:	69fa      	ldr	r2, [r7, #28]
 800a2c8:	fb02 f303 	mul.w	r3, r2, r3
 800a2cc:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	6859      	ldr	r1, [r3, #4]
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	1acb      	subs	r3, r1, r3
 800a2d8:	69f9      	ldr	r1, [r7, #28]
 800a2da:	fb01 f303 	mul.w	r3, r1, r3
 800a2de:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a2e0:	68f9      	ldr	r1, [r7, #12]
 800a2e2:	6809      	ldr	r1, [r1, #0]
 800a2e4:	4608      	mov	r0, r1
 800a2e6:	6879      	ldr	r1, [r7, #4]
 800a2e8:	01c9      	lsls	r1, r1, #7
 800a2ea:	4401      	add	r1, r0
 800a2ec:	3184      	adds	r1, #132	@ 0x84
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	01db      	lsls	r3, r3, #7
 800a2fc:	4413      	add	r3, r2
 800a2fe:	3384      	adds	r3, #132	@ 0x84
 800a300:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4619      	mov	r1, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	01db      	lsls	r3, r3, #7
 800a30c:	440b      	add	r3, r1
 800a30e:	3384      	adds	r3, #132	@ 0x84
 800a310:	4619      	mov	r1, r3
 800a312:	4b14      	ldr	r3, [pc, #80]	@ (800a364 <LTDC_SetConfig+0x2e8>)
 800a314:	4013      	ands	r3, r2
 800a316:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	461a      	mov	r2, r3
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	01db      	lsls	r3, r3, #7
 800a322:	4413      	add	r3, r2
 800a324:	3384      	adds	r3, #132	@ 0x84
 800a326:	461a      	mov	r2, r3
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a32c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	461a      	mov	r2, r3
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	01db      	lsls	r3, r3, #7
 800a338:	4413      	add	r3, r2
 800a33a:	3384      	adds	r3, #132	@ 0x84
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	68fa      	ldr	r2, [r7, #12]
 800a340:	6812      	ldr	r2, [r2, #0]
 800a342:	4611      	mov	r1, r2
 800a344:	687a      	ldr	r2, [r7, #4]
 800a346:	01d2      	lsls	r2, r2, #7
 800a348:	440a      	add	r2, r1
 800a34a:	3284      	adds	r2, #132	@ 0x84
 800a34c:	f043 0301 	orr.w	r3, r3, #1
 800a350:	6013      	str	r3, [r2, #0]
}
 800a352:	bf00      	nop
 800a354:	3724      	adds	r7, #36	@ 0x24
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr
 800a35e:	bf00      	nop
 800a360:	fffff8f8 	.word	0xfffff8f8
 800a364:	fffff800 	.word	0xfffff800

0800a368 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a368:	b480      	push	{r7}
 800a36a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a36c:	4b05      	ldr	r3, [pc, #20]	@ (800a384 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a04      	ldr	r2, [pc, #16]	@ (800a384 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a372:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a376:	6013      	str	r3, [r2, #0]
}
 800a378:	bf00      	nop
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr
 800a382:	bf00      	nop
 800a384:	40007000 	.word	0x40007000

0800a388 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b082      	sub	sp, #8
 800a38c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800a38e:	2300      	movs	r3, #0
 800a390:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800a392:	4b23      	ldr	r3, [pc, #140]	@ (800a420 <HAL_PWREx_EnableOverDrive+0x98>)
 800a394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a396:	4a22      	ldr	r2, [pc, #136]	@ (800a420 <HAL_PWREx_EnableOverDrive+0x98>)
 800a398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a39c:	6413      	str	r3, [r2, #64]	@ 0x40
 800a39e:	4b20      	ldr	r3, [pc, #128]	@ (800a420 <HAL_PWREx_EnableOverDrive+0x98>)
 800a3a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a3a6:	603b      	str	r3, [r7, #0]
 800a3a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a3aa:	4b1e      	ldr	r3, [pc, #120]	@ (800a424 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a1d      	ldr	r2, [pc, #116]	@ (800a424 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a3b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a3b4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a3b6:	f7fb f9d3 	bl	8005760 <HAL_GetTick>
 800a3ba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a3bc:	e009      	b.n	800a3d2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a3be:	f7fb f9cf 	bl	8005760 <HAL_GetTick>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	1ad3      	subs	r3, r2, r3
 800a3c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a3cc:	d901      	bls.n	800a3d2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800a3ce:	2303      	movs	r3, #3
 800a3d0:	e022      	b.n	800a418 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a3d2:	4b14      	ldr	r3, [pc, #80]	@ (800a424 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a3da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3de:	d1ee      	bne.n	800a3be <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a3e0:	4b10      	ldr	r3, [pc, #64]	@ (800a424 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4a0f      	ldr	r2, [pc, #60]	@ (800a424 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a3e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a3ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a3ec:	f7fb f9b8 	bl	8005760 <HAL_GetTick>
 800a3f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a3f2:	e009      	b.n	800a408 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a3f4:	f7fb f9b4 	bl	8005760 <HAL_GetTick>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	1ad3      	subs	r3, r2, r3
 800a3fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a402:	d901      	bls.n	800a408 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800a404:	2303      	movs	r3, #3
 800a406:	e007      	b.n	800a418 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a408:	4b06      	ldr	r3, [pc, #24]	@ (800a424 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a410:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a414:	d1ee      	bne.n	800a3f4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800a416:	2300      	movs	r3, #0
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3708      	adds	r7, #8
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}
 800a420:	40023800 	.word	0x40023800
 800a424:	40007000 	.word	0x40007000

0800a428 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b086      	sub	sp, #24
 800a42c:	af02      	add	r7, sp, #8
 800a42e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a430:	f7fb f996 	bl	8005760 <HAL_GetTick>
 800a434:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d101      	bne.n	800a440 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800a43c:	2301      	movs	r3, #1
 800a43e:	e067      	b.n	800a510 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a446:	b2db      	uxtb	r3, r3
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d10b      	bne.n	800a464 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2200      	movs	r2, #0
 800a450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f7f9 fd53 	bl	8003f00 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a45a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 f85e 	bl	800a520 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	689b      	ldr	r3, [r3, #8]
 800a472:	3b01      	subs	r3, #1
 800a474:	021a      	lsls	r2, r3, #8
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	430a      	orrs	r2, r1
 800a47c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a482:	9300      	str	r3, [sp, #0]
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2200      	movs	r2, #0
 800a488:	2120      	movs	r1, #32
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 f856 	bl	800a53c <QSPI_WaitFlagStateUntilTimeout>
 800a490:	4603      	mov	r3, r0
 800a492:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800a494:	7afb      	ldrb	r3, [r7, #11]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d135      	bne.n	800a506 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	681a      	ldr	r2, [r3, #0]
 800a4a0:	4b1d      	ldr	r3, [pc, #116]	@ (800a518 <HAL_QSPI_Init+0xf0>)
 800a4a2:	4013      	ands	r3, r2
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	6852      	ldr	r2, [r2, #4]
 800a4a8:	0611      	lsls	r1, r2, #24
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	68d2      	ldr	r2, [r2, #12]
 800a4ae:	4311      	orrs	r1, r2
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	69d2      	ldr	r2, [r2, #28]
 800a4b4:	4311      	orrs	r1, r2
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	6a12      	ldr	r2, [r2, #32]
 800a4ba:	4311      	orrs	r1, r2
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	6812      	ldr	r2, [r2, #0]
 800a4c0:	430b      	orrs	r3, r1
 800a4c2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	685a      	ldr	r2, [r3, #4]
 800a4ca:	4b14      	ldr	r3, [pc, #80]	@ (800a51c <HAL_QSPI_Init+0xf4>)
 800a4cc:	4013      	ands	r3, r2
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	6912      	ldr	r2, [r2, #16]
 800a4d2:	0411      	lsls	r1, r2, #16
 800a4d4:	687a      	ldr	r2, [r7, #4]
 800a4d6:	6952      	ldr	r2, [r2, #20]
 800a4d8:	4311      	orrs	r1, r2
 800a4da:	687a      	ldr	r2, [r7, #4]
 800a4dc:	6992      	ldr	r2, [r2, #24]
 800a4de:	4311      	orrs	r1, r2
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	6812      	ldr	r2, [r2, #0]
 800a4e4:	430b      	orrs	r3, r1
 800a4e6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f042 0201 	orr.w	r2, r2, #1
 800a4f6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2201      	movs	r2, #1
 800a502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2200      	movs	r2, #0
 800a50a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800a50e:	7afb      	ldrb	r3, [r7, #11]
}
 800a510:	4618      	mov	r0, r3
 800a512:	3710      	adds	r7, #16
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}
 800a518:	00ffff2f 	.word	0x00ffff2f
 800a51c:	ffe0f8fe 	.word	0xffe0f8fe

0800a520 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800a520:	b480      	push	{r7}
 800a522:	b083      	sub	sp, #12
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	683a      	ldr	r2, [r7, #0]
 800a52e:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800a530:	bf00      	nop
 800a532:	370c      	adds	r7, #12
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr

0800a53c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	603b      	str	r3, [r7, #0]
 800a548:	4613      	mov	r3, r2
 800a54a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a54c:	e01a      	b.n	800a584 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a54e:	69bb      	ldr	r3, [r7, #24]
 800a550:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a554:	d016      	beq.n	800a584 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a556:	f7fb f903 	bl	8005760 <HAL_GetTick>
 800a55a:	4602      	mov	r2, r0
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	1ad3      	subs	r3, r2, r3
 800a560:	69ba      	ldr	r2, [r7, #24]
 800a562:	429a      	cmp	r2, r3
 800a564:	d302      	bcc.n	800a56c <QSPI_WaitFlagStateUntilTimeout+0x30>
 800a566:	69bb      	ldr	r3, [r7, #24]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d10b      	bne.n	800a584 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2204      	movs	r2, #4
 800a570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a578:	f043 0201 	orr.w	r2, r3, #1
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 800a580:	2301      	movs	r3, #1
 800a582:	e00e      	b.n	800a5a2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	689a      	ldr	r2, [r3, #8]
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	4013      	ands	r3, r2
 800a58e:	2b00      	cmp	r3, #0
 800a590:	bf14      	ite	ne
 800a592:	2301      	movne	r3, #1
 800a594:	2300      	moveq	r3, #0
 800a596:	b2db      	uxtb	r3, r3
 800a598:	461a      	mov	r2, r3
 800a59a:	79fb      	ldrb	r3, [r7, #7]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d1d6      	bne.n	800a54e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a5a0:	2300      	movs	r3, #0
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3710      	adds	r7, #16
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}
	...

0800a5ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b086      	sub	sp, #24
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d101      	bne.n	800a5c2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e291      	b.n	800aae6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f003 0301 	and.w	r3, r3, #1
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	f000 8087 	beq.w	800a6de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a5d0:	4b96      	ldr	r3, [pc, #600]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a5d2:	689b      	ldr	r3, [r3, #8]
 800a5d4:	f003 030c 	and.w	r3, r3, #12
 800a5d8:	2b04      	cmp	r3, #4
 800a5da:	d00c      	beq.n	800a5f6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a5dc:	4b93      	ldr	r3, [pc, #588]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a5de:	689b      	ldr	r3, [r3, #8]
 800a5e0:	f003 030c 	and.w	r3, r3, #12
 800a5e4:	2b08      	cmp	r3, #8
 800a5e6:	d112      	bne.n	800a60e <HAL_RCC_OscConfig+0x62>
 800a5e8:	4b90      	ldr	r3, [pc, #576]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a5f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a5f4:	d10b      	bne.n	800a60e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a5f6:	4b8d      	ldr	r3, [pc, #564]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d06c      	beq.n	800a6dc <HAL_RCC_OscConfig+0x130>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d168      	bne.n	800a6dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a60a:	2301      	movs	r3, #1
 800a60c:	e26b      	b.n	800aae6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	685b      	ldr	r3, [r3, #4]
 800a612:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a616:	d106      	bne.n	800a626 <HAL_RCC_OscConfig+0x7a>
 800a618:	4b84      	ldr	r3, [pc, #528]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4a83      	ldr	r2, [pc, #524]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a61e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a622:	6013      	str	r3, [r2, #0]
 800a624:	e02e      	b.n	800a684 <HAL_RCC_OscConfig+0xd8>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d10c      	bne.n	800a648 <HAL_RCC_OscConfig+0x9c>
 800a62e:	4b7f      	ldr	r3, [pc, #508]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4a7e      	ldr	r2, [pc, #504]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a634:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a638:	6013      	str	r3, [r2, #0]
 800a63a:	4b7c      	ldr	r3, [pc, #496]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4a7b      	ldr	r2, [pc, #492]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a640:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a644:	6013      	str	r3, [r2, #0]
 800a646:	e01d      	b.n	800a684 <HAL_RCC_OscConfig+0xd8>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a650:	d10c      	bne.n	800a66c <HAL_RCC_OscConfig+0xc0>
 800a652:	4b76      	ldr	r3, [pc, #472]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4a75      	ldr	r2, [pc, #468]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a658:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a65c:	6013      	str	r3, [r2, #0]
 800a65e:	4b73      	ldr	r3, [pc, #460]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4a72      	ldr	r2, [pc, #456]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a664:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a668:	6013      	str	r3, [r2, #0]
 800a66a:	e00b      	b.n	800a684 <HAL_RCC_OscConfig+0xd8>
 800a66c:	4b6f      	ldr	r3, [pc, #444]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4a6e      	ldr	r2, [pc, #440]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a672:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a676:	6013      	str	r3, [r2, #0]
 800a678:	4b6c      	ldr	r3, [pc, #432]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4a6b      	ldr	r2, [pc, #428]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a67e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a682:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d013      	beq.n	800a6b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a68c:	f7fb f868 	bl	8005760 <HAL_GetTick>
 800a690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a692:	e008      	b.n	800a6a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a694:	f7fb f864 	bl	8005760 <HAL_GetTick>
 800a698:	4602      	mov	r2, r0
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	1ad3      	subs	r3, r2, r3
 800a69e:	2b64      	cmp	r3, #100	@ 0x64
 800a6a0:	d901      	bls.n	800a6a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a6a2:	2303      	movs	r3, #3
 800a6a4:	e21f      	b.n	800aae6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a6a6:	4b61      	ldr	r3, [pc, #388]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d0f0      	beq.n	800a694 <HAL_RCC_OscConfig+0xe8>
 800a6b2:	e014      	b.n	800a6de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6b4:	f7fb f854 	bl	8005760 <HAL_GetTick>
 800a6b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a6ba:	e008      	b.n	800a6ce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a6bc:	f7fb f850 	bl	8005760 <HAL_GetTick>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	1ad3      	subs	r3, r2, r3
 800a6c6:	2b64      	cmp	r3, #100	@ 0x64
 800a6c8:	d901      	bls.n	800a6ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a6ca:	2303      	movs	r3, #3
 800a6cc:	e20b      	b.n	800aae6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a6ce:	4b57      	ldr	r3, [pc, #348]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d1f0      	bne.n	800a6bc <HAL_RCC_OscConfig+0x110>
 800a6da:	e000      	b.n	800a6de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a6dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f003 0302 	and.w	r3, r3, #2
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d069      	beq.n	800a7be <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a6ea:	4b50      	ldr	r3, [pc, #320]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a6ec:	689b      	ldr	r3, [r3, #8]
 800a6ee:	f003 030c 	and.w	r3, r3, #12
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d00b      	beq.n	800a70e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a6f6:	4b4d      	ldr	r3, [pc, #308]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a6f8:	689b      	ldr	r3, [r3, #8]
 800a6fa:	f003 030c 	and.w	r3, r3, #12
 800a6fe:	2b08      	cmp	r3, #8
 800a700:	d11c      	bne.n	800a73c <HAL_RCC_OscConfig+0x190>
 800a702:	4b4a      	ldr	r3, [pc, #296]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d116      	bne.n	800a73c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a70e:	4b47      	ldr	r3, [pc, #284]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f003 0302 	and.w	r3, r3, #2
 800a716:	2b00      	cmp	r3, #0
 800a718:	d005      	beq.n	800a726 <HAL_RCC_OscConfig+0x17a>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	68db      	ldr	r3, [r3, #12]
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d001      	beq.n	800a726 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a722:	2301      	movs	r3, #1
 800a724:	e1df      	b.n	800aae6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a726:	4b41      	ldr	r3, [pc, #260]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	691b      	ldr	r3, [r3, #16]
 800a732:	00db      	lsls	r3, r3, #3
 800a734:	493d      	ldr	r1, [pc, #244]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a736:	4313      	orrs	r3, r2
 800a738:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a73a:	e040      	b.n	800a7be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d023      	beq.n	800a78c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a744:	4b39      	ldr	r3, [pc, #228]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a38      	ldr	r2, [pc, #224]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a74a:	f043 0301 	orr.w	r3, r3, #1
 800a74e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a750:	f7fb f806 	bl	8005760 <HAL_GetTick>
 800a754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a756:	e008      	b.n	800a76a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a758:	f7fb f802 	bl	8005760 <HAL_GetTick>
 800a75c:	4602      	mov	r2, r0
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	1ad3      	subs	r3, r2, r3
 800a762:	2b02      	cmp	r3, #2
 800a764:	d901      	bls.n	800a76a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800a766:	2303      	movs	r3, #3
 800a768:	e1bd      	b.n	800aae6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a76a:	4b30      	ldr	r3, [pc, #192]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f003 0302 	and.w	r3, r3, #2
 800a772:	2b00      	cmp	r3, #0
 800a774:	d0f0      	beq.n	800a758 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a776:	4b2d      	ldr	r3, [pc, #180]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	691b      	ldr	r3, [r3, #16]
 800a782:	00db      	lsls	r3, r3, #3
 800a784:	4929      	ldr	r1, [pc, #164]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a786:	4313      	orrs	r3, r2
 800a788:	600b      	str	r3, [r1, #0]
 800a78a:	e018      	b.n	800a7be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a78c:	4b27      	ldr	r3, [pc, #156]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a26      	ldr	r2, [pc, #152]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a792:	f023 0301 	bic.w	r3, r3, #1
 800a796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a798:	f7fa ffe2 	bl	8005760 <HAL_GetTick>
 800a79c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a79e:	e008      	b.n	800a7b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a7a0:	f7fa ffde 	bl	8005760 <HAL_GetTick>
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	1ad3      	subs	r3, r2, r3
 800a7aa:	2b02      	cmp	r3, #2
 800a7ac:	d901      	bls.n	800a7b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a7ae:	2303      	movs	r3, #3
 800a7b0:	e199      	b.n	800aae6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a7b2:	4b1e      	ldr	r3, [pc, #120]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f003 0302 	and.w	r3, r3, #2
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d1f0      	bne.n	800a7a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f003 0308 	and.w	r3, r3, #8
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d038      	beq.n	800a83c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	695b      	ldr	r3, [r3, #20]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d019      	beq.n	800a806 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a7d2:	4b16      	ldr	r3, [pc, #88]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a7d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7d6:	4a15      	ldr	r2, [pc, #84]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a7d8:	f043 0301 	orr.w	r3, r3, #1
 800a7dc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7de:	f7fa ffbf 	bl	8005760 <HAL_GetTick>
 800a7e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a7e4:	e008      	b.n	800a7f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a7e6:	f7fa ffbb 	bl	8005760 <HAL_GetTick>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	1ad3      	subs	r3, r2, r3
 800a7f0:	2b02      	cmp	r3, #2
 800a7f2:	d901      	bls.n	800a7f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a7f4:	2303      	movs	r3, #3
 800a7f6:	e176      	b.n	800aae6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a7f8:	4b0c      	ldr	r3, [pc, #48]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a7fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7fc:	f003 0302 	and.w	r3, r3, #2
 800a800:	2b00      	cmp	r3, #0
 800a802:	d0f0      	beq.n	800a7e6 <HAL_RCC_OscConfig+0x23a>
 800a804:	e01a      	b.n	800a83c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a806:	4b09      	ldr	r3, [pc, #36]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a808:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a80a:	4a08      	ldr	r2, [pc, #32]	@ (800a82c <HAL_RCC_OscConfig+0x280>)
 800a80c:	f023 0301 	bic.w	r3, r3, #1
 800a810:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a812:	f7fa ffa5 	bl	8005760 <HAL_GetTick>
 800a816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a818:	e00a      	b.n	800a830 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a81a:	f7fa ffa1 	bl	8005760 <HAL_GetTick>
 800a81e:	4602      	mov	r2, r0
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	1ad3      	subs	r3, r2, r3
 800a824:	2b02      	cmp	r3, #2
 800a826:	d903      	bls.n	800a830 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a828:	2303      	movs	r3, #3
 800a82a:	e15c      	b.n	800aae6 <HAL_RCC_OscConfig+0x53a>
 800a82c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a830:	4b91      	ldr	r3, [pc, #580]	@ (800aa78 <HAL_RCC_OscConfig+0x4cc>)
 800a832:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a834:	f003 0302 	and.w	r3, r3, #2
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d1ee      	bne.n	800a81a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f003 0304 	and.w	r3, r3, #4
 800a844:	2b00      	cmp	r3, #0
 800a846:	f000 80a4 	beq.w	800a992 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a84a:	4b8b      	ldr	r3, [pc, #556]	@ (800aa78 <HAL_RCC_OscConfig+0x4cc>)
 800a84c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a84e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a852:	2b00      	cmp	r3, #0
 800a854:	d10d      	bne.n	800a872 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a856:	4b88      	ldr	r3, [pc, #544]	@ (800aa78 <HAL_RCC_OscConfig+0x4cc>)
 800a858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a85a:	4a87      	ldr	r2, [pc, #540]	@ (800aa78 <HAL_RCC_OscConfig+0x4cc>)
 800a85c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a860:	6413      	str	r3, [r2, #64]	@ 0x40
 800a862:	4b85      	ldr	r3, [pc, #532]	@ (800aa78 <HAL_RCC_OscConfig+0x4cc>)
 800a864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a86a:	60bb      	str	r3, [r7, #8]
 800a86c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a86e:	2301      	movs	r3, #1
 800a870:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a872:	4b82      	ldr	r3, [pc, #520]	@ (800aa7c <HAL_RCC_OscConfig+0x4d0>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d118      	bne.n	800a8b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800a87e:	4b7f      	ldr	r3, [pc, #508]	@ (800aa7c <HAL_RCC_OscConfig+0x4d0>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4a7e      	ldr	r2, [pc, #504]	@ (800aa7c <HAL_RCC_OscConfig+0x4d0>)
 800a884:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a888:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a88a:	f7fa ff69 	bl	8005760 <HAL_GetTick>
 800a88e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a890:	e008      	b.n	800a8a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a892:	f7fa ff65 	bl	8005760 <HAL_GetTick>
 800a896:	4602      	mov	r2, r0
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	1ad3      	subs	r3, r2, r3
 800a89c:	2b64      	cmp	r3, #100	@ 0x64
 800a89e:	d901      	bls.n	800a8a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800a8a0:	2303      	movs	r3, #3
 800a8a2:	e120      	b.n	800aae6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a8a4:	4b75      	ldr	r3, [pc, #468]	@ (800aa7c <HAL_RCC_OscConfig+0x4d0>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d0f0      	beq.n	800a892 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	689b      	ldr	r3, [r3, #8]
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	d106      	bne.n	800a8c6 <HAL_RCC_OscConfig+0x31a>
 800a8b8:	4b6f      	ldr	r3, [pc, #444]	@ (800aa78 <HAL_RCC_OscConfig+0x4cc>)
 800a8ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a8bc:	4a6e      	ldr	r2, [pc, #440]	@ (800aa78 <HAL_RCC_OscConfig+0x4cc>)
 800a8be:	f043 0301 	orr.w	r3, r3, #1
 800a8c2:	6713      	str	r3, [r2, #112]	@ 0x70
 800a8c4:	e02d      	b.n	800a922 <HAL_RCC_OscConfig+0x376>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	689b      	ldr	r3, [r3, #8]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d10c      	bne.n	800a8e8 <HAL_RCC_OscConfig+0x33c>
 800a8ce:	4b6a      	ldr	r3, [pc, #424]	@ (800aa78 <HAL_RCC_OscConfig+0x4cc>)
 800a8d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a8d2:	4a69      	ldr	r2, [pc, #420]	@ (800aa78 <HAL_RCC_OscConfig+0x4cc>)
 800a8d4:	f023 0301 	bic.w	r3, r3, #1
 800a8d8:	6713      	str	r3, [r2, #112]	@ 0x70
 800a8da:	4b67      	ldr	r3, [pc, #412]	@ (800aa78 <HAL_RCC_OscConfig+0x4cc>)
 800a8dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a8de:	4a66      	ldr	r2, [pc, #408]	@ (800aa78 <HAL_RCC_OscConfig+0x4cc>)
 800a8e0:	f023 0304 	bic.w	r3, r3, #4
 800a8e4:	6713      	str	r3, [r2, #112]	@ 0x70
 800a8e6:	e01c      	b.n	800a922 <HAL_RCC_OscConfig+0x376>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	689b      	ldr	r3, [r3, #8]
 800a8ec:	2b05      	cmp	r3, #5
 800a8ee:	d10c      	bne.n	800a90a <HAL_RCC_OscConfig+0x35e>
 800a8f0:	4b61      	ldr	r3, [pc, #388]	@ (800aa78 <HAL_RCC_OscConfig+0x4cc>)
 800a8f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a8f4:	4a60      	ldr	r2, [pc, #384]	@ (800aa78 <HAL_RCC_OscConfig+0x4cc>)
 800a8f6:	f043 0304 	orr.w	r3, r3, #4
 800a8fa:	6713      	str	r3, [r2, #112]	@ 0x70
 800a8fc:	4b5e      	ldr	r3, [pc, #376]	@ (800aa78 <HAL_RCC_OscConfig+0x4cc>)
 800a8fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a900:	4a5d      	ldr	r2, [pc, #372]	@ (800aa78 <HAL_RCC_OscConfig+0x4cc>)
 800a902:	f043 0301 	orr.w	r3, r3, #1
 800a906:	6713      	str	r3, [r2, #112]	@ 0x70
 800a908:	e00b      	b.n	800a922 <HAL_RCC_OscConfig+0x376>
 800a90a:	4b5b      	ldr	r3, [pc, #364]	@ (800aa78 <HAL_RCC_OscConfig+0x4cc>)
 800a90c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a90e:	4a5a      	ldr	r2, [pc, #360]	@ (800aa78 <HAL_RCC_OscConfig+0x4cc>)
 800a910:	f023 0301 	bic.w	r3, r3, #1
 800a914:	6713      	str	r3, [r2, #112]	@ 0x70
 800a916:	4b58      	ldr	r3, [pc, #352]	@ (800aa78 <HAL_RCC_OscConfig+0x4cc>)
 800a918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a91a:	4a57      	ldr	r2, [pc, #348]	@ (800aa78 <HAL_RCC_OscConfig+0x4cc>)
 800a91c:	f023 0304 	bic.w	r3, r3, #4
 800a920:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	689b      	ldr	r3, [r3, #8]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d015      	beq.n	800a956 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a92a:	f7fa ff19 	bl	8005760 <HAL_GetTick>
 800a92e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a930:	e00a      	b.n	800a948 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a932:	f7fa ff15 	bl	8005760 <HAL_GetTick>
 800a936:	4602      	mov	r2, r0
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	1ad3      	subs	r3, r2, r3
 800a93c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a940:	4293      	cmp	r3, r2
 800a942:	d901      	bls.n	800a948 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800a944:	2303      	movs	r3, #3
 800a946:	e0ce      	b.n	800aae6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a948:	4b4b      	ldr	r3, [pc, #300]	@ (800aa78 <HAL_RCC_OscConfig+0x4cc>)
 800a94a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a94c:	f003 0302 	and.w	r3, r3, #2
 800a950:	2b00      	cmp	r3, #0
 800a952:	d0ee      	beq.n	800a932 <HAL_RCC_OscConfig+0x386>
 800a954:	e014      	b.n	800a980 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a956:	f7fa ff03 	bl	8005760 <HAL_GetTick>
 800a95a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a95c:	e00a      	b.n	800a974 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a95e:	f7fa feff 	bl	8005760 <HAL_GetTick>
 800a962:	4602      	mov	r2, r0
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	1ad3      	subs	r3, r2, r3
 800a968:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d901      	bls.n	800a974 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800a970:	2303      	movs	r3, #3
 800a972:	e0b8      	b.n	800aae6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a974:	4b40      	ldr	r3, [pc, #256]	@ (800aa78 <HAL_RCC_OscConfig+0x4cc>)
 800a976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a978:	f003 0302 	and.w	r3, r3, #2
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d1ee      	bne.n	800a95e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a980:	7dfb      	ldrb	r3, [r7, #23]
 800a982:	2b01      	cmp	r3, #1
 800a984:	d105      	bne.n	800a992 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a986:	4b3c      	ldr	r3, [pc, #240]	@ (800aa78 <HAL_RCC_OscConfig+0x4cc>)
 800a988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a98a:	4a3b      	ldr	r2, [pc, #236]	@ (800aa78 <HAL_RCC_OscConfig+0x4cc>)
 800a98c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a990:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	699b      	ldr	r3, [r3, #24]
 800a996:	2b00      	cmp	r3, #0
 800a998:	f000 80a4 	beq.w	800aae4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a99c:	4b36      	ldr	r3, [pc, #216]	@ (800aa78 <HAL_RCC_OscConfig+0x4cc>)
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	f003 030c 	and.w	r3, r3, #12
 800a9a4:	2b08      	cmp	r3, #8
 800a9a6:	d06b      	beq.n	800aa80 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	699b      	ldr	r3, [r3, #24]
 800a9ac:	2b02      	cmp	r3, #2
 800a9ae:	d149      	bne.n	800aa44 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a9b0:	4b31      	ldr	r3, [pc, #196]	@ (800aa78 <HAL_RCC_OscConfig+0x4cc>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4a30      	ldr	r2, [pc, #192]	@ (800aa78 <HAL_RCC_OscConfig+0x4cc>)
 800a9b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a9ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9bc:	f7fa fed0 	bl	8005760 <HAL_GetTick>
 800a9c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a9c2:	e008      	b.n	800a9d6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9c4:	f7fa fecc 	bl	8005760 <HAL_GetTick>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	1ad3      	subs	r3, r2, r3
 800a9ce:	2b02      	cmp	r3, #2
 800a9d0:	d901      	bls.n	800a9d6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800a9d2:	2303      	movs	r3, #3
 800a9d4:	e087      	b.n	800aae6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a9d6:	4b28      	ldr	r3, [pc, #160]	@ (800aa78 <HAL_RCC_OscConfig+0x4cc>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d1f0      	bne.n	800a9c4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	69da      	ldr	r2, [r3, #28]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6a1b      	ldr	r3, [r3, #32]
 800a9ea:	431a      	orrs	r2, r3
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9f0:	019b      	lsls	r3, r3, #6
 800a9f2:	431a      	orrs	r2, r3
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9f8:	085b      	lsrs	r3, r3, #1
 800a9fa:	3b01      	subs	r3, #1
 800a9fc:	041b      	lsls	r3, r3, #16
 800a9fe:	431a      	orrs	r2, r3
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa04:	061b      	lsls	r3, r3, #24
 800aa06:	4313      	orrs	r3, r2
 800aa08:	4a1b      	ldr	r2, [pc, #108]	@ (800aa78 <HAL_RCC_OscConfig+0x4cc>)
 800aa0a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800aa0e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aa10:	4b19      	ldr	r3, [pc, #100]	@ (800aa78 <HAL_RCC_OscConfig+0x4cc>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4a18      	ldr	r2, [pc, #96]	@ (800aa78 <HAL_RCC_OscConfig+0x4cc>)
 800aa16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aa1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa1c:	f7fa fea0 	bl	8005760 <HAL_GetTick>
 800aa20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aa22:	e008      	b.n	800aa36 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa24:	f7fa fe9c 	bl	8005760 <HAL_GetTick>
 800aa28:	4602      	mov	r2, r0
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	1ad3      	subs	r3, r2, r3
 800aa2e:	2b02      	cmp	r3, #2
 800aa30:	d901      	bls.n	800aa36 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800aa32:	2303      	movs	r3, #3
 800aa34:	e057      	b.n	800aae6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aa36:	4b10      	ldr	r3, [pc, #64]	@ (800aa78 <HAL_RCC_OscConfig+0x4cc>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d0f0      	beq.n	800aa24 <HAL_RCC_OscConfig+0x478>
 800aa42:	e04f      	b.n	800aae4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa44:	4b0c      	ldr	r3, [pc, #48]	@ (800aa78 <HAL_RCC_OscConfig+0x4cc>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4a0b      	ldr	r2, [pc, #44]	@ (800aa78 <HAL_RCC_OscConfig+0x4cc>)
 800aa4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aa4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa50:	f7fa fe86 	bl	8005760 <HAL_GetTick>
 800aa54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aa56:	e008      	b.n	800aa6a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa58:	f7fa fe82 	bl	8005760 <HAL_GetTick>
 800aa5c:	4602      	mov	r2, r0
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	1ad3      	subs	r3, r2, r3
 800aa62:	2b02      	cmp	r3, #2
 800aa64:	d901      	bls.n	800aa6a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800aa66:	2303      	movs	r3, #3
 800aa68:	e03d      	b.n	800aae6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aa6a:	4b03      	ldr	r3, [pc, #12]	@ (800aa78 <HAL_RCC_OscConfig+0x4cc>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d1f0      	bne.n	800aa58 <HAL_RCC_OscConfig+0x4ac>
 800aa76:	e035      	b.n	800aae4 <HAL_RCC_OscConfig+0x538>
 800aa78:	40023800 	.word	0x40023800
 800aa7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800aa80:	4b1b      	ldr	r3, [pc, #108]	@ (800aaf0 <HAL_RCC_OscConfig+0x544>)
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	699b      	ldr	r3, [r3, #24]
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	d028      	beq.n	800aae0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d121      	bne.n	800aae0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d11a      	bne.n	800aae0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800aaaa:	68fa      	ldr	r2, [r7, #12]
 800aaac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800aab0:	4013      	ands	r3, r2
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800aab6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d111      	bne.n	800aae0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aac6:	085b      	lsrs	r3, r3, #1
 800aac8:	3b01      	subs	r3, #1
 800aaca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800aacc:	429a      	cmp	r2, r3
 800aace:	d107      	bne.n	800aae0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aada:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800aadc:	429a      	cmp	r2, r3
 800aade:	d001      	beq.n	800aae4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800aae0:	2301      	movs	r3, #1
 800aae2:	e000      	b.n	800aae6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800aae4:	2300      	movs	r3, #0
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3718      	adds	r7, #24
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
 800aaee:	bf00      	nop
 800aaf0:	40023800 	.word	0x40023800

0800aaf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b084      	sub	sp, #16
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800aafe:	2300      	movs	r3, #0
 800ab00:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d101      	bne.n	800ab0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800ab08:	2301      	movs	r3, #1
 800ab0a:	e0d0      	b.n	800acae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ab0c:	4b6a      	ldr	r3, [pc, #424]	@ (800acb8 <HAL_RCC_ClockConfig+0x1c4>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f003 030f 	and.w	r3, r3, #15
 800ab14:	683a      	ldr	r2, [r7, #0]
 800ab16:	429a      	cmp	r2, r3
 800ab18:	d910      	bls.n	800ab3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab1a:	4b67      	ldr	r3, [pc, #412]	@ (800acb8 <HAL_RCC_ClockConfig+0x1c4>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f023 020f 	bic.w	r2, r3, #15
 800ab22:	4965      	ldr	r1, [pc, #404]	@ (800acb8 <HAL_RCC_ClockConfig+0x1c4>)
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	4313      	orrs	r3, r2
 800ab28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab2a:	4b63      	ldr	r3, [pc, #396]	@ (800acb8 <HAL_RCC_ClockConfig+0x1c4>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f003 030f 	and.w	r3, r3, #15
 800ab32:	683a      	ldr	r2, [r7, #0]
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d001      	beq.n	800ab3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800ab38:	2301      	movs	r3, #1
 800ab3a:	e0b8      	b.n	800acae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f003 0302 	and.w	r3, r3, #2
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d020      	beq.n	800ab8a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f003 0304 	and.w	r3, r3, #4
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d005      	beq.n	800ab60 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ab54:	4b59      	ldr	r3, [pc, #356]	@ (800acbc <HAL_RCC_ClockConfig+0x1c8>)
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	4a58      	ldr	r2, [pc, #352]	@ (800acbc <HAL_RCC_ClockConfig+0x1c8>)
 800ab5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800ab5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f003 0308 	and.w	r3, r3, #8
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d005      	beq.n	800ab78 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ab6c:	4b53      	ldr	r3, [pc, #332]	@ (800acbc <HAL_RCC_ClockConfig+0x1c8>)
 800ab6e:	689b      	ldr	r3, [r3, #8]
 800ab70:	4a52      	ldr	r2, [pc, #328]	@ (800acbc <HAL_RCC_ClockConfig+0x1c8>)
 800ab72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800ab76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ab78:	4b50      	ldr	r3, [pc, #320]	@ (800acbc <HAL_RCC_ClockConfig+0x1c8>)
 800ab7a:	689b      	ldr	r3, [r3, #8]
 800ab7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	689b      	ldr	r3, [r3, #8]
 800ab84:	494d      	ldr	r1, [pc, #308]	@ (800acbc <HAL_RCC_ClockConfig+0x1c8>)
 800ab86:	4313      	orrs	r3, r2
 800ab88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f003 0301 	and.w	r3, r3, #1
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d040      	beq.n	800ac18 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d107      	bne.n	800abae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ab9e:	4b47      	ldr	r3, [pc, #284]	@ (800acbc <HAL_RCC_ClockConfig+0x1c8>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d115      	bne.n	800abd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800abaa:	2301      	movs	r3, #1
 800abac:	e07f      	b.n	800acae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	2b02      	cmp	r3, #2
 800abb4:	d107      	bne.n	800abc6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800abb6:	4b41      	ldr	r3, [pc, #260]	@ (800acbc <HAL_RCC_ClockConfig+0x1c8>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d109      	bne.n	800abd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800abc2:	2301      	movs	r3, #1
 800abc4:	e073      	b.n	800acae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800abc6:	4b3d      	ldr	r3, [pc, #244]	@ (800acbc <HAL_RCC_ClockConfig+0x1c8>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f003 0302 	and.w	r3, r3, #2
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d101      	bne.n	800abd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800abd2:	2301      	movs	r3, #1
 800abd4:	e06b      	b.n	800acae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800abd6:	4b39      	ldr	r3, [pc, #228]	@ (800acbc <HAL_RCC_ClockConfig+0x1c8>)
 800abd8:	689b      	ldr	r3, [r3, #8]
 800abda:	f023 0203 	bic.w	r2, r3, #3
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	4936      	ldr	r1, [pc, #216]	@ (800acbc <HAL_RCC_ClockConfig+0x1c8>)
 800abe4:	4313      	orrs	r3, r2
 800abe6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800abe8:	f7fa fdba 	bl	8005760 <HAL_GetTick>
 800abec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800abee:	e00a      	b.n	800ac06 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800abf0:	f7fa fdb6 	bl	8005760 <HAL_GetTick>
 800abf4:	4602      	mov	r2, r0
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	1ad3      	subs	r3, r2, r3
 800abfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d901      	bls.n	800ac06 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800ac02:	2303      	movs	r3, #3
 800ac04:	e053      	b.n	800acae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac06:	4b2d      	ldr	r3, [pc, #180]	@ (800acbc <HAL_RCC_ClockConfig+0x1c8>)
 800ac08:	689b      	ldr	r3, [r3, #8]
 800ac0a:	f003 020c 	and.w	r2, r3, #12
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	009b      	lsls	r3, r3, #2
 800ac14:	429a      	cmp	r2, r3
 800ac16:	d1eb      	bne.n	800abf0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ac18:	4b27      	ldr	r3, [pc, #156]	@ (800acb8 <HAL_RCC_ClockConfig+0x1c4>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f003 030f 	and.w	r3, r3, #15
 800ac20:	683a      	ldr	r2, [r7, #0]
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d210      	bcs.n	800ac48 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac26:	4b24      	ldr	r3, [pc, #144]	@ (800acb8 <HAL_RCC_ClockConfig+0x1c4>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f023 020f 	bic.w	r2, r3, #15
 800ac2e:	4922      	ldr	r1, [pc, #136]	@ (800acb8 <HAL_RCC_ClockConfig+0x1c4>)
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	4313      	orrs	r3, r2
 800ac34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac36:	4b20      	ldr	r3, [pc, #128]	@ (800acb8 <HAL_RCC_ClockConfig+0x1c4>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f003 030f 	and.w	r3, r3, #15
 800ac3e:	683a      	ldr	r2, [r7, #0]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d001      	beq.n	800ac48 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800ac44:	2301      	movs	r3, #1
 800ac46:	e032      	b.n	800acae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f003 0304 	and.w	r3, r3, #4
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d008      	beq.n	800ac66 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ac54:	4b19      	ldr	r3, [pc, #100]	@ (800acbc <HAL_RCC_ClockConfig+0x1c8>)
 800ac56:	689b      	ldr	r3, [r3, #8]
 800ac58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	68db      	ldr	r3, [r3, #12]
 800ac60:	4916      	ldr	r1, [pc, #88]	@ (800acbc <HAL_RCC_ClockConfig+0x1c8>)
 800ac62:	4313      	orrs	r3, r2
 800ac64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f003 0308 	and.w	r3, r3, #8
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d009      	beq.n	800ac86 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ac72:	4b12      	ldr	r3, [pc, #72]	@ (800acbc <HAL_RCC_ClockConfig+0x1c8>)
 800ac74:	689b      	ldr	r3, [r3, #8]
 800ac76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	691b      	ldr	r3, [r3, #16]
 800ac7e:	00db      	lsls	r3, r3, #3
 800ac80:	490e      	ldr	r1, [pc, #56]	@ (800acbc <HAL_RCC_ClockConfig+0x1c8>)
 800ac82:	4313      	orrs	r3, r2
 800ac84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ac86:	f000 f821 	bl	800accc <HAL_RCC_GetSysClockFreq>
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	4b0b      	ldr	r3, [pc, #44]	@ (800acbc <HAL_RCC_ClockConfig+0x1c8>)
 800ac8e:	689b      	ldr	r3, [r3, #8]
 800ac90:	091b      	lsrs	r3, r3, #4
 800ac92:	f003 030f 	and.w	r3, r3, #15
 800ac96:	490a      	ldr	r1, [pc, #40]	@ (800acc0 <HAL_RCC_ClockConfig+0x1cc>)
 800ac98:	5ccb      	ldrb	r3, [r1, r3]
 800ac9a:	fa22 f303 	lsr.w	r3, r2, r3
 800ac9e:	4a09      	ldr	r2, [pc, #36]	@ (800acc4 <HAL_RCC_ClockConfig+0x1d0>)
 800aca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800aca2:	4b09      	ldr	r3, [pc, #36]	@ (800acc8 <HAL_RCC_ClockConfig+0x1d4>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4618      	mov	r0, r3
 800aca8:	f7f9 fe38 	bl	800491c <HAL_InitTick>

  return HAL_OK;
 800acac:	2300      	movs	r3, #0
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3710      	adds	r7, #16
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	40023c00 	.word	0x40023c00
 800acbc:	40023800 	.word	0x40023800
 800acc0:	0801ec50 	.word	0x0801ec50
 800acc4:	20000018 	.word	0x20000018
 800acc8:	20000064 	.word	0x20000064

0800accc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800accc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800acd0:	b090      	sub	sp, #64	@ 0x40
 800acd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800acd4:	2300      	movs	r3, #0
 800acd6:	637b      	str	r3, [r7, #52]	@ 0x34
 800acd8:	2300      	movs	r3, #0
 800acda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acdc:	2300      	movs	r3, #0
 800acde:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800ace0:	2300      	movs	r3, #0
 800ace2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ace4:	4b59      	ldr	r3, [pc, #356]	@ (800ae4c <HAL_RCC_GetSysClockFreq+0x180>)
 800ace6:	689b      	ldr	r3, [r3, #8]
 800ace8:	f003 030c 	and.w	r3, r3, #12
 800acec:	2b08      	cmp	r3, #8
 800acee:	d00d      	beq.n	800ad0c <HAL_RCC_GetSysClockFreq+0x40>
 800acf0:	2b08      	cmp	r3, #8
 800acf2:	f200 80a1 	bhi.w	800ae38 <HAL_RCC_GetSysClockFreq+0x16c>
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d002      	beq.n	800ad00 <HAL_RCC_GetSysClockFreq+0x34>
 800acfa:	2b04      	cmp	r3, #4
 800acfc:	d003      	beq.n	800ad06 <HAL_RCC_GetSysClockFreq+0x3a>
 800acfe:	e09b      	b.n	800ae38 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ad00:	4b53      	ldr	r3, [pc, #332]	@ (800ae50 <HAL_RCC_GetSysClockFreq+0x184>)
 800ad02:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ad04:	e09b      	b.n	800ae3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ad06:	4b53      	ldr	r3, [pc, #332]	@ (800ae54 <HAL_RCC_GetSysClockFreq+0x188>)
 800ad08:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ad0a:	e098      	b.n	800ae3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ad0c:	4b4f      	ldr	r3, [pc, #316]	@ (800ae4c <HAL_RCC_GetSysClockFreq+0x180>)
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ad14:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800ad16:	4b4d      	ldr	r3, [pc, #308]	@ (800ae4c <HAL_RCC_GetSysClockFreq+0x180>)
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d028      	beq.n	800ad74 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ad22:	4b4a      	ldr	r3, [pc, #296]	@ (800ae4c <HAL_RCC_GetSysClockFreq+0x180>)
 800ad24:	685b      	ldr	r3, [r3, #4]
 800ad26:	099b      	lsrs	r3, r3, #6
 800ad28:	2200      	movs	r2, #0
 800ad2a:	623b      	str	r3, [r7, #32]
 800ad2c:	627a      	str	r2, [r7, #36]	@ 0x24
 800ad2e:	6a3b      	ldr	r3, [r7, #32]
 800ad30:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800ad34:	2100      	movs	r1, #0
 800ad36:	4b47      	ldr	r3, [pc, #284]	@ (800ae54 <HAL_RCC_GetSysClockFreq+0x188>)
 800ad38:	fb03 f201 	mul.w	r2, r3, r1
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	fb00 f303 	mul.w	r3, r0, r3
 800ad42:	4413      	add	r3, r2
 800ad44:	4a43      	ldr	r2, [pc, #268]	@ (800ae54 <HAL_RCC_GetSysClockFreq+0x188>)
 800ad46:	fba0 1202 	umull	r1, r2, r0, r2
 800ad4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ad4c:	460a      	mov	r2, r1
 800ad4e:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ad50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad52:	4413      	add	r3, r2
 800ad54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ad56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad58:	2200      	movs	r2, #0
 800ad5a:	61bb      	str	r3, [r7, #24]
 800ad5c:	61fa      	str	r2, [r7, #28]
 800ad5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ad62:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800ad66:	f7f5 fabb 	bl	80002e0 <__aeabi_uldivmod>
 800ad6a:	4602      	mov	r2, r0
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	4613      	mov	r3, r2
 800ad70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad72:	e053      	b.n	800ae1c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ad74:	4b35      	ldr	r3, [pc, #212]	@ (800ae4c <HAL_RCC_GetSysClockFreq+0x180>)
 800ad76:	685b      	ldr	r3, [r3, #4]
 800ad78:	099b      	lsrs	r3, r3, #6
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	613b      	str	r3, [r7, #16]
 800ad7e:	617a      	str	r2, [r7, #20]
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800ad86:	f04f 0b00 	mov.w	fp, #0
 800ad8a:	4652      	mov	r2, sl
 800ad8c:	465b      	mov	r3, fp
 800ad8e:	f04f 0000 	mov.w	r0, #0
 800ad92:	f04f 0100 	mov.w	r1, #0
 800ad96:	0159      	lsls	r1, r3, #5
 800ad98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ad9c:	0150      	lsls	r0, r2, #5
 800ad9e:	4602      	mov	r2, r0
 800ada0:	460b      	mov	r3, r1
 800ada2:	ebb2 080a 	subs.w	r8, r2, sl
 800ada6:	eb63 090b 	sbc.w	r9, r3, fp
 800adaa:	f04f 0200 	mov.w	r2, #0
 800adae:	f04f 0300 	mov.w	r3, #0
 800adb2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800adb6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800adba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800adbe:	ebb2 0408 	subs.w	r4, r2, r8
 800adc2:	eb63 0509 	sbc.w	r5, r3, r9
 800adc6:	f04f 0200 	mov.w	r2, #0
 800adca:	f04f 0300 	mov.w	r3, #0
 800adce:	00eb      	lsls	r3, r5, #3
 800add0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800add4:	00e2      	lsls	r2, r4, #3
 800add6:	4614      	mov	r4, r2
 800add8:	461d      	mov	r5, r3
 800adda:	eb14 030a 	adds.w	r3, r4, sl
 800adde:	603b      	str	r3, [r7, #0]
 800ade0:	eb45 030b 	adc.w	r3, r5, fp
 800ade4:	607b      	str	r3, [r7, #4]
 800ade6:	f04f 0200 	mov.w	r2, #0
 800adea:	f04f 0300 	mov.w	r3, #0
 800adee:	e9d7 4500 	ldrd	r4, r5, [r7]
 800adf2:	4629      	mov	r1, r5
 800adf4:	028b      	lsls	r3, r1, #10
 800adf6:	4621      	mov	r1, r4
 800adf8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800adfc:	4621      	mov	r1, r4
 800adfe:	028a      	lsls	r2, r1, #10
 800ae00:	4610      	mov	r0, r2
 800ae02:	4619      	mov	r1, r3
 800ae04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae06:	2200      	movs	r2, #0
 800ae08:	60bb      	str	r3, [r7, #8]
 800ae0a:	60fa      	str	r2, [r7, #12]
 800ae0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ae10:	f7f5 fa66 	bl	80002e0 <__aeabi_uldivmod>
 800ae14:	4602      	mov	r2, r0
 800ae16:	460b      	mov	r3, r1
 800ae18:	4613      	mov	r3, r2
 800ae1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800ae1c:	4b0b      	ldr	r3, [pc, #44]	@ (800ae4c <HAL_RCC_GetSysClockFreq+0x180>)
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	0c1b      	lsrs	r3, r3, #16
 800ae22:	f003 0303 	and.w	r3, r3, #3
 800ae26:	3301      	adds	r3, #1
 800ae28:	005b      	lsls	r3, r3, #1
 800ae2a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800ae2c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ae2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae30:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae34:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ae36:	e002      	b.n	800ae3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ae38:	4b05      	ldr	r3, [pc, #20]	@ (800ae50 <HAL_RCC_GetSysClockFreq+0x184>)
 800ae3a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ae3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ae3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3740      	adds	r7, #64	@ 0x40
 800ae44:	46bd      	mov	sp, r7
 800ae46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ae4a:	bf00      	nop
 800ae4c:	40023800 	.word	0x40023800
 800ae50:	00f42400 	.word	0x00f42400
 800ae54:	017d7840 	.word	0x017d7840

0800ae58 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ae5c:	4b03      	ldr	r3, [pc, #12]	@ (800ae6c <HAL_RCC_GetHCLKFreq+0x14>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	46bd      	mov	sp, r7
 800ae64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae68:	4770      	bx	lr
 800ae6a:	bf00      	nop
 800ae6c:	20000018 	.word	0x20000018

0800ae70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ae74:	f7ff fff0 	bl	800ae58 <HAL_RCC_GetHCLKFreq>
 800ae78:	4602      	mov	r2, r0
 800ae7a:	4b05      	ldr	r3, [pc, #20]	@ (800ae90 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ae7c:	689b      	ldr	r3, [r3, #8]
 800ae7e:	0a9b      	lsrs	r3, r3, #10
 800ae80:	f003 0307 	and.w	r3, r3, #7
 800ae84:	4903      	ldr	r1, [pc, #12]	@ (800ae94 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ae86:	5ccb      	ldrb	r3, [r1, r3]
 800ae88:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	bd80      	pop	{r7, pc}
 800ae90:	40023800 	.word	0x40023800
 800ae94:	0801ec60 	.word	0x0801ec60

0800ae98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ae9c:	f7ff ffdc 	bl	800ae58 <HAL_RCC_GetHCLKFreq>
 800aea0:	4602      	mov	r2, r0
 800aea2:	4b05      	ldr	r3, [pc, #20]	@ (800aeb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800aea4:	689b      	ldr	r3, [r3, #8]
 800aea6:	0b5b      	lsrs	r3, r3, #13
 800aea8:	f003 0307 	and.w	r3, r3, #7
 800aeac:	4903      	ldr	r1, [pc, #12]	@ (800aebc <HAL_RCC_GetPCLK2Freq+0x24>)
 800aeae:	5ccb      	ldrb	r3, [r1, r3]
 800aeb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	bd80      	pop	{r7, pc}
 800aeb8:	40023800 	.word	0x40023800
 800aebc:	0801ec60 	.word	0x0801ec60

0800aec0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b083      	sub	sp, #12
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	220f      	movs	r2, #15
 800aece:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800aed0:	4b12      	ldr	r3, [pc, #72]	@ (800af1c <HAL_RCC_GetClockConfig+0x5c>)
 800aed2:	689b      	ldr	r3, [r3, #8]
 800aed4:	f003 0203 	and.w	r2, r3, #3
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800aedc:	4b0f      	ldr	r3, [pc, #60]	@ (800af1c <HAL_RCC_GetClockConfig+0x5c>)
 800aede:	689b      	ldr	r3, [r3, #8]
 800aee0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800aee8:	4b0c      	ldr	r3, [pc, #48]	@ (800af1c <HAL_RCC_GetClockConfig+0x5c>)
 800aeea:	689b      	ldr	r3, [r3, #8]
 800aeec:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800aef4:	4b09      	ldr	r3, [pc, #36]	@ (800af1c <HAL_RCC_GetClockConfig+0x5c>)
 800aef6:	689b      	ldr	r3, [r3, #8]
 800aef8:	08db      	lsrs	r3, r3, #3
 800aefa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800af02:	4b07      	ldr	r3, [pc, #28]	@ (800af20 <HAL_RCC_GetClockConfig+0x60>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f003 020f 	and.w	r2, r3, #15
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	601a      	str	r2, [r3, #0]
}
 800af0e:	bf00      	nop
 800af10:	370c      	adds	r7, #12
 800af12:	46bd      	mov	sp, r7
 800af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af18:	4770      	bx	lr
 800af1a:	bf00      	nop
 800af1c:	40023800 	.word	0x40023800
 800af20:	40023c00 	.word	0x40023c00

0800af24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b088      	sub	sp, #32
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800af2c:	2300      	movs	r3, #0
 800af2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800af30:	2300      	movs	r3, #0
 800af32:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800af34:	2300      	movs	r3, #0
 800af36:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800af38:	2300      	movs	r3, #0
 800af3a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800af3c:	2300      	movs	r3, #0
 800af3e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f003 0301 	and.w	r3, r3, #1
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d012      	beq.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800af4c:	4b69      	ldr	r3, [pc, #420]	@ (800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800af4e:	689b      	ldr	r3, [r3, #8]
 800af50:	4a68      	ldr	r2, [pc, #416]	@ (800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800af52:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800af56:	6093      	str	r3, [r2, #8]
 800af58:	4b66      	ldr	r3, [pc, #408]	@ (800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800af5a:	689a      	ldr	r2, [r3, #8]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af60:	4964      	ldr	r1, [pc, #400]	@ (800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800af62:	4313      	orrs	r3, r2
 800af64:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d101      	bne.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800af6e:	2301      	movs	r3, #1
 800af70:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d017      	beq.n	800afae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800af7e:	4b5d      	ldr	r3, [pc, #372]	@ (800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800af80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800af84:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af8c:	4959      	ldr	r1, [pc, #356]	@ (800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800af8e:	4313      	orrs	r3, r2
 800af90:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800af9c:	d101      	bne.n	800afa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800af9e:	2301      	movs	r3, #1
 800afa0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d101      	bne.n	800afae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800afaa:	2301      	movs	r3, #1
 800afac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d017      	beq.n	800afea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800afba:	4b4e      	ldr	r3, [pc, #312]	@ (800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800afbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800afc0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afc8:	494a      	ldr	r1, [pc, #296]	@ (800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800afca:	4313      	orrs	r3, r2
 800afcc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800afd8:	d101      	bne.n	800afde <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800afda:	2301      	movs	r3, #1
 800afdc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d101      	bne.n	800afea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800afe6:	2301      	movs	r3, #1
 800afe8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d001      	beq.n	800affa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800aff6:	2301      	movs	r3, #1
 800aff8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f003 0320 	and.w	r3, r3, #32
 800b002:	2b00      	cmp	r3, #0
 800b004:	f000 808b 	beq.w	800b11e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b008:	4b3a      	ldr	r3, [pc, #232]	@ (800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b00a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b00c:	4a39      	ldr	r2, [pc, #228]	@ (800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b00e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b012:	6413      	str	r3, [r2, #64]	@ 0x40
 800b014:	4b37      	ldr	r3, [pc, #220]	@ (800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b018:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b01c:	60bb      	str	r3, [r7, #8]
 800b01e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b020:	4b35      	ldr	r3, [pc, #212]	@ (800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4a34      	ldr	r2, [pc, #208]	@ (800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b026:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b02a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b02c:	f7fa fb98 	bl	8005760 <HAL_GetTick>
 800b030:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b032:	e008      	b.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b034:	f7fa fb94 	bl	8005760 <HAL_GetTick>
 800b038:	4602      	mov	r2, r0
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	1ad3      	subs	r3, r2, r3
 800b03e:	2b64      	cmp	r3, #100	@ 0x64
 800b040:	d901      	bls.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800b042:	2303      	movs	r3, #3
 800b044:	e357      	b.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b046:	4b2c      	ldr	r3, [pc, #176]	@ (800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d0f0      	beq.n	800b034 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b052:	4b28      	ldr	r3, [pc, #160]	@ (800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b056:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b05a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d035      	beq.n	800b0ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b066:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b06a:	693a      	ldr	r2, [r7, #16]
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d02e      	beq.n	800b0ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b070:	4b20      	ldr	r3, [pc, #128]	@ (800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b074:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b078:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b07a:	4b1e      	ldr	r3, [pc, #120]	@ (800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b07c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b07e:	4a1d      	ldr	r2, [pc, #116]	@ (800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b080:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b084:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b086:	4b1b      	ldr	r3, [pc, #108]	@ (800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b08a:	4a1a      	ldr	r2, [pc, #104]	@ (800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b08c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b090:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800b092:	4a18      	ldr	r2, [pc, #96]	@ (800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b098:	4b16      	ldr	r3, [pc, #88]	@ (800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b09a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b09c:	f003 0301 	and.w	r3, r3, #1
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d114      	bne.n	800b0ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0a4:	f7fa fb5c 	bl	8005760 <HAL_GetTick>
 800b0a8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b0aa:	e00a      	b.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b0ac:	f7fa fb58 	bl	8005760 <HAL_GetTick>
 800b0b0:	4602      	mov	r2, r0
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	1ad3      	subs	r3, r2, r3
 800b0b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d901      	bls.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800b0be:	2303      	movs	r3, #3
 800b0c0:	e319      	b.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b0c2:	4b0c      	ldr	r3, [pc, #48]	@ (800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b0c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0c6:	f003 0302 	and.w	r3, r3, #2
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d0ee      	beq.n	800b0ac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b0d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b0da:	d111      	bne.n	800b100 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800b0dc:	4b05      	ldr	r3, [pc, #20]	@ (800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b0de:	689b      	ldr	r3, [r3, #8]
 800b0e0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800b0e8:	4b04      	ldr	r3, [pc, #16]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800b0ea:	400b      	ands	r3, r1
 800b0ec:	4901      	ldr	r1, [pc, #4]	@ (800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	608b      	str	r3, [r1, #8]
 800b0f2:	e00b      	b.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800b0f4:	40023800 	.word	0x40023800
 800b0f8:	40007000 	.word	0x40007000
 800b0fc:	0ffffcff 	.word	0x0ffffcff
 800b100:	4baa      	ldr	r3, [pc, #680]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b102:	689b      	ldr	r3, [r3, #8]
 800b104:	4aa9      	ldr	r2, [pc, #676]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b106:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800b10a:	6093      	str	r3, [r2, #8]
 800b10c:	4ba7      	ldr	r3, [pc, #668]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b10e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b114:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b118:	49a4      	ldr	r1, [pc, #656]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b11a:	4313      	orrs	r3, r2
 800b11c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f003 0310 	and.w	r3, r3, #16
 800b126:	2b00      	cmp	r3, #0
 800b128:	d010      	beq.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b12a:	4ba0      	ldr	r3, [pc, #640]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b12c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b130:	4a9e      	ldr	r2, [pc, #632]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b132:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b136:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800b13a:	4b9c      	ldr	r3, [pc, #624]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b13c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b144:	4999      	ldr	r1, [pc, #612]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b146:	4313      	orrs	r3, r2
 800b148:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b154:	2b00      	cmp	r3, #0
 800b156:	d00a      	beq.n	800b16e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b158:	4b94      	ldr	r3, [pc, #592]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b15a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b15e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b166:	4991      	ldr	r1, [pc, #580]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b168:	4313      	orrs	r3, r2
 800b16a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b176:	2b00      	cmp	r3, #0
 800b178:	d00a      	beq.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b17a:	4b8c      	ldr	r3, [pc, #560]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b17c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b180:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b188:	4988      	ldr	r1, [pc, #544]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b18a:	4313      	orrs	r3, r2
 800b18c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d00a      	beq.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b19c:	4b83      	ldr	r3, [pc, #524]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b19e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1aa:	4980      	ldr	r1, [pc, #512]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b1ac:	4313      	orrs	r3, r2
 800b1ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d00a      	beq.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b1be:	4b7b      	ldr	r3, [pc, #492]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b1c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1c4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b1cc:	4977      	ldr	r1, [pc, #476]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d00a      	beq.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b1e0:	4b72      	ldr	r3, [pc, #456]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b1e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1e6:	f023 0203 	bic.w	r2, r3, #3
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1ee:	496f      	ldr	r1, [pc, #444]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d00a      	beq.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b202:	4b6a      	ldr	r3, [pc, #424]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b208:	f023 020c 	bic.w	r2, r3, #12
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b210:	4966      	ldr	r1, [pc, #408]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b212:	4313      	orrs	r3, r2
 800b214:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b220:	2b00      	cmp	r3, #0
 800b222:	d00a      	beq.n	800b23a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b224:	4b61      	ldr	r3, [pc, #388]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b22a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b232:	495e      	ldr	r1, [pc, #376]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b234:	4313      	orrs	r3, r2
 800b236:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b242:	2b00      	cmp	r3, #0
 800b244:	d00a      	beq.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b246:	4b59      	ldr	r3, [pc, #356]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b24c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b254:	4955      	ldr	r1, [pc, #340]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b256:	4313      	orrs	r3, r2
 800b258:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b264:	2b00      	cmp	r3, #0
 800b266:	d00a      	beq.n	800b27e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b268:	4b50      	ldr	r3, [pc, #320]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b26a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b26e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b276:	494d      	ldr	r1, [pc, #308]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b278:	4313      	orrs	r3, r2
 800b27a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b286:	2b00      	cmp	r3, #0
 800b288:	d00a      	beq.n	800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800b28a:	4b48      	ldr	r3, [pc, #288]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b28c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b290:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b298:	4944      	ldr	r1, [pc, #272]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b29a:	4313      	orrs	r3, r2
 800b29c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d00a      	beq.n	800b2c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800b2ac:	4b3f      	ldr	r3, [pc, #252]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b2ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2b2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b2ba:	493c      	ldr	r1, [pc, #240]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b2bc:	4313      	orrs	r3, r2
 800b2be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d00a      	beq.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800b2ce:	4b37      	ldr	r3, [pc, #220]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b2d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2d4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b2dc:	4933      	ldr	r1, [pc, #204]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d00a      	beq.n	800b306 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b2f0:	4b2e      	ldr	r3, [pc, #184]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b2f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2f6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b2fe:	492b      	ldr	r1, [pc, #172]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b300:	4313      	orrs	r3, r2
 800b302:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d011      	beq.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b312:	4b26      	ldr	r3, [pc, #152]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b318:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b320:	4922      	ldr	r1, [pc, #136]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b322:	4313      	orrs	r3, r2
 800b324:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b32c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b330:	d101      	bne.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800b332:	2301      	movs	r3, #1
 800b334:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f003 0308 	and.w	r3, r3, #8
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d001      	beq.n	800b346 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800b342:	2301      	movs	r3, #1
 800b344:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d00a      	beq.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b352:	4b16      	ldr	r3, [pc, #88]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b358:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b360:	4912      	ldr	r1, [pc, #72]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b362:	4313      	orrs	r3, r2
 800b364:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b370:	2b00      	cmp	r3, #0
 800b372:	d00b      	beq.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b374:	4b0d      	ldr	r3, [pc, #52]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b37a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b384:	4909      	ldr	r1, [pc, #36]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b386:	4313      	orrs	r3, r2
 800b388:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b38c:	69fb      	ldr	r3, [r7, #28]
 800b38e:	2b01      	cmp	r3, #1
 800b390:	d006      	beq.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	f000 80d9 	beq.w	800b552 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b3a0:	4b02      	ldr	r3, [pc, #8]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	4a01      	ldr	r2, [pc, #4]	@ (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b3a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b3aa:	e001      	b.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800b3ac:	40023800 	.word	0x40023800
 800b3b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3b2:	f7fa f9d5 	bl	8005760 <HAL_GetTick>
 800b3b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b3b8:	e008      	b.n	800b3cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b3ba:	f7fa f9d1 	bl	8005760 <HAL_GetTick>
 800b3be:	4602      	mov	r2, r0
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	1ad3      	subs	r3, r2, r3
 800b3c4:	2b64      	cmp	r3, #100	@ 0x64
 800b3c6:	d901      	bls.n	800b3cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b3c8:	2303      	movs	r3, #3
 800b3ca:	e194      	b.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b3cc:	4b6c      	ldr	r3, [pc, #432]	@ (800b580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d1f0      	bne.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f003 0301 	and.w	r3, r3, #1
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d021      	beq.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d11d      	bne.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b3ec:	4b64      	ldr	r3, [pc, #400]	@ (800b580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b3ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b3f2:	0c1b      	lsrs	r3, r3, #16
 800b3f4:	f003 0303 	and.w	r3, r3, #3
 800b3f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b3fa:	4b61      	ldr	r3, [pc, #388]	@ (800b580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b3fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b400:	0e1b      	lsrs	r3, r3, #24
 800b402:	f003 030f 	and.w	r3, r3, #15
 800b406:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	019a      	lsls	r2, r3, #6
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	041b      	lsls	r3, r3, #16
 800b412:	431a      	orrs	r2, r3
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	061b      	lsls	r3, r3, #24
 800b418:	431a      	orrs	r2, r3
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	689b      	ldr	r3, [r3, #8]
 800b41e:	071b      	lsls	r3, r3, #28
 800b420:	4957      	ldr	r1, [pc, #348]	@ (800b580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b422:	4313      	orrs	r3, r2
 800b424:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b430:	2b00      	cmp	r3, #0
 800b432:	d004      	beq.n	800b43e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b438:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b43c:	d00a      	beq.n	800b454 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b446:	2b00      	cmp	r3, #0
 800b448:	d02e      	beq.n	800b4a8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b44e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b452:	d129      	bne.n	800b4a8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b454:	4b4a      	ldr	r3, [pc, #296]	@ (800b580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b456:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b45a:	0c1b      	lsrs	r3, r3, #16
 800b45c:	f003 0303 	and.w	r3, r3, #3
 800b460:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b462:	4b47      	ldr	r3, [pc, #284]	@ (800b580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b464:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b468:	0f1b      	lsrs	r3, r3, #28
 800b46a:	f003 0307 	and.w	r3, r3, #7
 800b46e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	685b      	ldr	r3, [r3, #4]
 800b474:	019a      	lsls	r2, r3, #6
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	041b      	lsls	r3, r3, #16
 800b47a:	431a      	orrs	r2, r3
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	68db      	ldr	r3, [r3, #12]
 800b480:	061b      	lsls	r3, r3, #24
 800b482:	431a      	orrs	r2, r3
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	071b      	lsls	r3, r3, #28
 800b488:	493d      	ldr	r1, [pc, #244]	@ (800b580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b48a:	4313      	orrs	r3, r2
 800b48c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b490:	4b3b      	ldr	r3, [pc, #236]	@ (800b580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b492:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b496:	f023 021f 	bic.w	r2, r3, #31
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b49e:	3b01      	subs	r3, #1
 800b4a0:	4937      	ldr	r1, [pc, #220]	@ (800b580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b4a2:	4313      	orrs	r3, r2
 800b4a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d01d      	beq.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b4b4:	4b32      	ldr	r3, [pc, #200]	@ (800b580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b4b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b4ba:	0e1b      	lsrs	r3, r3, #24
 800b4bc:	f003 030f 	and.w	r3, r3, #15
 800b4c0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b4c2:	4b2f      	ldr	r3, [pc, #188]	@ (800b580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b4c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b4c8:	0f1b      	lsrs	r3, r3, #28
 800b4ca:	f003 0307 	and.w	r3, r3, #7
 800b4ce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	019a      	lsls	r2, r3, #6
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	691b      	ldr	r3, [r3, #16]
 800b4da:	041b      	lsls	r3, r3, #16
 800b4dc:	431a      	orrs	r2, r3
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	061b      	lsls	r3, r3, #24
 800b4e2:	431a      	orrs	r2, r3
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	071b      	lsls	r3, r3, #28
 800b4e8:	4925      	ldr	r1, [pc, #148]	@ (800b580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d011      	beq.n	800b520 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	019a      	lsls	r2, r3, #6
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	691b      	ldr	r3, [r3, #16]
 800b506:	041b      	lsls	r3, r3, #16
 800b508:	431a      	orrs	r2, r3
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	68db      	ldr	r3, [r3, #12]
 800b50e:	061b      	lsls	r3, r3, #24
 800b510:	431a      	orrs	r2, r3
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	689b      	ldr	r3, [r3, #8]
 800b516:	071b      	lsls	r3, r3, #28
 800b518:	4919      	ldr	r1, [pc, #100]	@ (800b580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b51a:	4313      	orrs	r3, r2
 800b51c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b520:	4b17      	ldr	r3, [pc, #92]	@ (800b580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4a16      	ldr	r2, [pc, #88]	@ (800b580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b526:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b52a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b52c:	f7fa f918 	bl	8005760 <HAL_GetTick>
 800b530:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b532:	e008      	b.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b534:	f7fa f914 	bl	8005760 <HAL_GetTick>
 800b538:	4602      	mov	r2, r0
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	1ad3      	subs	r3, r2, r3
 800b53e:	2b64      	cmp	r3, #100	@ 0x64
 800b540:	d901      	bls.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b542:	2303      	movs	r3, #3
 800b544:	e0d7      	b.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b546:	4b0e      	ldr	r3, [pc, #56]	@ (800b580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d0f0      	beq.n	800b534 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800b552:	69bb      	ldr	r3, [r7, #24]
 800b554:	2b01      	cmp	r3, #1
 800b556:	f040 80cd 	bne.w	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b55a:	4b09      	ldr	r3, [pc, #36]	@ (800b580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	4a08      	ldr	r2, [pc, #32]	@ (800b580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b560:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b564:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b566:	f7fa f8fb 	bl	8005760 <HAL_GetTick>
 800b56a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b56c:	e00a      	b.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b56e:	f7fa f8f7 	bl	8005760 <HAL_GetTick>
 800b572:	4602      	mov	r2, r0
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	1ad3      	subs	r3, r2, r3
 800b578:	2b64      	cmp	r3, #100	@ 0x64
 800b57a:	d903      	bls.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b57c:	2303      	movs	r3, #3
 800b57e:	e0ba      	b.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800b580:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b584:	4b5e      	ldr	r3, [pc, #376]	@ (800b700 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b58c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b590:	d0ed      	beq.n	800b56e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d003      	beq.n	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d009      	beq.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d02e      	beq.n	800b610 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d12a      	bne.n	800b610 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b5ba:	4b51      	ldr	r3, [pc, #324]	@ (800b700 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b5bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5c0:	0c1b      	lsrs	r3, r3, #16
 800b5c2:	f003 0303 	and.w	r3, r3, #3
 800b5c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b5c8:	4b4d      	ldr	r3, [pc, #308]	@ (800b700 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b5ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5ce:	0f1b      	lsrs	r3, r3, #28
 800b5d0:	f003 0307 	and.w	r3, r3, #7
 800b5d4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	695b      	ldr	r3, [r3, #20]
 800b5da:	019a      	lsls	r2, r3, #6
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	041b      	lsls	r3, r3, #16
 800b5e0:	431a      	orrs	r2, r3
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	699b      	ldr	r3, [r3, #24]
 800b5e6:	061b      	lsls	r3, r3, #24
 800b5e8:	431a      	orrs	r2, r3
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	071b      	lsls	r3, r3, #28
 800b5ee:	4944      	ldr	r1, [pc, #272]	@ (800b700 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b5f0:	4313      	orrs	r3, r2
 800b5f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b5f6:	4b42      	ldr	r3, [pc, #264]	@ (800b700 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b5f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b5fc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b604:	3b01      	subs	r3, #1
 800b606:	021b      	lsls	r3, r3, #8
 800b608:	493d      	ldr	r1, [pc, #244]	@ (800b700 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b60a:	4313      	orrs	r3, r2
 800b60c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d022      	beq.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b620:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b624:	d11d      	bne.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b626:	4b36      	ldr	r3, [pc, #216]	@ (800b700 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b62c:	0e1b      	lsrs	r3, r3, #24
 800b62e:	f003 030f 	and.w	r3, r3, #15
 800b632:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b634:	4b32      	ldr	r3, [pc, #200]	@ (800b700 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b63a:	0f1b      	lsrs	r3, r3, #28
 800b63c:	f003 0307 	and.w	r3, r3, #7
 800b640:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	695b      	ldr	r3, [r3, #20]
 800b646:	019a      	lsls	r2, r3, #6
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6a1b      	ldr	r3, [r3, #32]
 800b64c:	041b      	lsls	r3, r3, #16
 800b64e:	431a      	orrs	r2, r3
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	061b      	lsls	r3, r3, #24
 800b654:	431a      	orrs	r2, r3
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	071b      	lsls	r3, r3, #28
 800b65a:	4929      	ldr	r1, [pc, #164]	@ (800b700 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b65c:	4313      	orrs	r3, r2
 800b65e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f003 0308 	and.w	r3, r3, #8
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d028      	beq.n	800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b66e:	4b24      	ldr	r3, [pc, #144]	@ (800b700 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b674:	0e1b      	lsrs	r3, r3, #24
 800b676:	f003 030f 	and.w	r3, r3, #15
 800b67a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b67c:	4b20      	ldr	r3, [pc, #128]	@ (800b700 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b67e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b682:	0c1b      	lsrs	r3, r3, #16
 800b684:	f003 0303 	and.w	r3, r3, #3
 800b688:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	695b      	ldr	r3, [r3, #20]
 800b68e:	019a      	lsls	r2, r3, #6
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	041b      	lsls	r3, r3, #16
 800b694:	431a      	orrs	r2, r3
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	061b      	lsls	r3, r3, #24
 800b69a:	431a      	orrs	r2, r3
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	69db      	ldr	r3, [r3, #28]
 800b6a0:	071b      	lsls	r3, r3, #28
 800b6a2:	4917      	ldr	r1, [pc, #92]	@ (800b700 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b6a4:	4313      	orrs	r3, r2
 800b6a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b6aa:	4b15      	ldr	r3, [pc, #84]	@ (800b700 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b6ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b6b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6b8:	4911      	ldr	r1, [pc, #68]	@ (800b700 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b6ba:	4313      	orrs	r3, r2
 800b6bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b6c0:	4b0f      	ldr	r3, [pc, #60]	@ (800b700 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	4a0e      	ldr	r2, [pc, #56]	@ (800b700 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b6c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b6ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6cc:	f7fa f848 	bl	8005760 <HAL_GetTick>
 800b6d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b6d2:	e008      	b.n	800b6e6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b6d4:	f7fa f844 	bl	8005760 <HAL_GetTick>
 800b6d8:	4602      	mov	r2, r0
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	1ad3      	subs	r3, r2, r3
 800b6de:	2b64      	cmp	r3, #100	@ 0x64
 800b6e0:	d901      	bls.n	800b6e6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b6e2:	2303      	movs	r3, #3
 800b6e4:	e007      	b.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b6e6:	4b06      	ldr	r3, [pc, #24]	@ (800b700 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b6ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b6f2:	d1ef      	bne.n	800b6d4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800b6f4:	2300      	movs	r3, #0
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3720      	adds	r7, #32
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
 800b6fe:	bf00      	nop
 800b700:	40023800 	.word	0x40023800

0800b704 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b704:	b480      	push	{r7}
 800b706:	b087      	sub	sp, #28
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800b70c:	2300      	movs	r3, #0
 800b70e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800b710:	2300      	movs	r3, #0
 800b712:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800b714:	2300      	movs	r3, #0
 800b716:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800b718:	2300      	movs	r3, #0
 800b71a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b722:	f040 808d 	bne.w	800b840 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800b726:	4b93      	ldr	r3, [pc, #588]	@ (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b728:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b72c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b734:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b73c:	d07c      	beq.n	800b838 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b744:	d87b      	bhi.n	800b83e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d004      	beq.n	800b756 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b752:	d039      	beq.n	800b7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800b754:	e073      	b.n	800b83e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b756:	4b87      	ldr	r3, [pc, #540]	@ (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d108      	bne.n	800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b762:	4b84      	ldr	r3, [pc, #528]	@ (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b76a:	4a83      	ldr	r2, [pc, #524]	@ (800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b76c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b770:	613b      	str	r3, [r7, #16]
 800b772:	e007      	b.n	800b784 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b774:	4b7f      	ldr	r3, [pc, #508]	@ (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b77c:	4a7f      	ldr	r2, [pc, #508]	@ (800b97c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b77e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b782:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800b784:	4b7b      	ldr	r3, [pc, #492]	@ (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b78a:	0e1b      	lsrs	r3, r3, #24
 800b78c:	f003 030f 	and.w	r3, r3, #15
 800b790:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800b792:	4b78      	ldr	r3, [pc, #480]	@ (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b794:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b798:	099b      	lsrs	r3, r3, #6
 800b79a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b79e:	693a      	ldr	r2, [r7, #16]
 800b7a0:	fb03 f202 	mul.w	r2, r3, r2
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7aa:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800b7ac:	4b71      	ldr	r3, [pc, #452]	@ (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b7ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b7b2:	0a1b      	lsrs	r3, r3, #8
 800b7b4:	f003 031f 	and.w	r3, r3, #31
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b7bc:	697a      	ldr	r2, [r7, #20]
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7c4:	617b      	str	r3, [r7, #20]
        break;
 800b7c6:	e03b      	b.n	800b840 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b7c8:	4b6a      	ldr	r3, [pc, #424]	@ (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d108      	bne.n	800b7e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b7d4:	4b67      	ldr	r3, [pc, #412]	@ (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b7dc:	4a66      	ldr	r2, [pc, #408]	@ (800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b7de:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7e2:	613b      	str	r3, [r7, #16]
 800b7e4:	e007      	b.n	800b7f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b7e6:	4b63      	ldr	r3, [pc, #396]	@ (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b7ee:	4a63      	ldr	r2, [pc, #396]	@ (800b97c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b7f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7f4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800b7f6:	4b5f      	ldr	r3, [pc, #380]	@ (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b7f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b7fc:	0e1b      	lsrs	r3, r3, #24
 800b7fe:	f003 030f 	and.w	r3, r3, #15
 800b802:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800b804:	4b5b      	ldr	r3, [pc, #364]	@ (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b806:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b80a:	099b      	lsrs	r3, r3, #6
 800b80c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b810:	693a      	ldr	r2, [r7, #16]
 800b812:	fb03 f202 	mul.w	r2, r3, r2
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	fbb2 f3f3 	udiv	r3, r2, r3
 800b81c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800b81e:	4b55      	ldr	r3, [pc, #340]	@ (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b820:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b824:	f003 031f 	and.w	r3, r3, #31
 800b828:	3301      	adds	r3, #1
 800b82a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b82c:	697a      	ldr	r2, [r7, #20]
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	fbb2 f3f3 	udiv	r3, r2, r3
 800b834:	617b      	str	r3, [r7, #20]
        break;
 800b836:	e003      	b.n	800b840 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b838:	4b51      	ldr	r3, [pc, #324]	@ (800b980 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b83a:	617b      	str	r3, [r7, #20]
        break;
 800b83c:	e000      	b.n	800b840 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800b83e:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b846:	f040 808d 	bne.w	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800b84a:	4b4a      	ldr	r3, [pc, #296]	@ (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b84c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b850:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800b858:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b860:	d07c      	beq.n	800b95c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b868:	d87b      	bhi.n	800b962 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d004      	beq.n	800b87a <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b876:	d039      	beq.n	800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800b878:	e073      	b.n	800b962 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b87a:	4b3e      	ldr	r3, [pc, #248]	@ (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b882:	2b00      	cmp	r3, #0
 800b884:	d108      	bne.n	800b898 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b886:	4b3b      	ldr	r3, [pc, #236]	@ (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b888:	685b      	ldr	r3, [r3, #4]
 800b88a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b88e:	4a3a      	ldr	r2, [pc, #232]	@ (800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b890:	fbb2 f3f3 	udiv	r3, r2, r3
 800b894:	613b      	str	r3, [r7, #16]
 800b896:	e007      	b.n	800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b898:	4b36      	ldr	r3, [pc, #216]	@ (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b89a:	685b      	ldr	r3, [r3, #4]
 800b89c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b8a0:	4a36      	ldr	r2, [pc, #216]	@ (800b97c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b8a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8a6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800b8a8:	4b32      	ldr	r3, [pc, #200]	@ (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b8aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b8ae:	0e1b      	lsrs	r3, r3, #24
 800b8b0:	f003 030f 	and.w	r3, r3, #15
 800b8b4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800b8b6:	4b2f      	ldr	r3, [pc, #188]	@ (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b8b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b8bc:	099b      	lsrs	r3, r3, #6
 800b8be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8c2:	693a      	ldr	r2, [r7, #16]
 800b8c4:	fb03 f202 	mul.w	r2, r3, r2
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8ce:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800b8d0:	4b28      	ldr	r3, [pc, #160]	@ (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b8d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b8d6:	0a1b      	lsrs	r3, r3, #8
 800b8d8:	f003 031f 	and.w	r3, r3, #31
 800b8dc:	3301      	adds	r3, #1
 800b8de:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b8e0:	697a      	ldr	r2, [r7, #20]
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8e8:	617b      	str	r3, [r7, #20]
        break;
 800b8ea:	e03b      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b8ec:	4b21      	ldr	r3, [pc, #132]	@ (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d108      	bne.n	800b90a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b8f8:	4b1e      	ldr	r3, [pc, #120]	@ (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b8fa:	685b      	ldr	r3, [r3, #4]
 800b8fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b900:	4a1d      	ldr	r2, [pc, #116]	@ (800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b902:	fbb2 f3f3 	udiv	r3, r2, r3
 800b906:	613b      	str	r3, [r7, #16]
 800b908:	e007      	b.n	800b91a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b90a:	4b1a      	ldr	r3, [pc, #104]	@ (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b912:	4a1a      	ldr	r2, [pc, #104]	@ (800b97c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b914:	fbb2 f3f3 	udiv	r3, r2, r3
 800b918:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800b91a:	4b16      	ldr	r3, [pc, #88]	@ (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b91c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b920:	0e1b      	lsrs	r3, r3, #24
 800b922:	f003 030f 	and.w	r3, r3, #15
 800b926:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800b928:	4b12      	ldr	r3, [pc, #72]	@ (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b92a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b92e:	099b      	lsrs	r3, r3, #6
 800b930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b934:	693a      	ldr	r2, [r7, #16]
 800b936:	fb03 f202 	mul.w	r2, r3, r2
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b940:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800b942:	4b0c      	ldr	r3, [pc, #48]	@ (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b944:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b948:	f003 031f 	and.w	r3, r3, #31
 800b94c:	3301      	adds	r3, #1
 800b94e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b950:	697a      	ldr	r2, [r7, #20]
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	fbb2 f3f3 	udiv	r3, r2, r3
 800b958:	617b      	str	r3, [r7, #20]
        break;
 800b95a:	e003      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b95c:	4b08      	ldr	r3, [pc, #32]	@ (800b980 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b95e:	617b      	str	r3, [r7, #20]
        break;
 800b960:	e000      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800b962:	bf00      	nop
      }
    }
  }

  return frequency;
 800b964:	697b      	ldr	r3, [r7, #20]
}
 800b966:	4618      	mov	r0, r3
 800b968:	371c      	adds	r7, #28
 800b96a:	46bd      	mov	sp, r7
 800b96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b970:	4770      	bx	lr
 800b972:	bf00      	nop
 800b974:	40023800 	.word	0x40023800
 800b978:	00f42400 	.word	0x00f42400
 800b97c:	017d7840 	.word	0x017d7840
 800b980:	00bb8000 	.word	0x00bb8000

0800b984 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d101      	bne.n	800b996 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800b992:	2301      	movs	r3, #1
 800b994:	e071      	b.n	800ba7a <HAL_RTC_Init+0xf6>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	7f5b      	ldrb	r3, [r3, #29]
 800b99a:	b2db      	uxtb	r3, r3
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d105      	bne.n	800b9ac <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f7f8 fb3a 	bl	8004020 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2202      	movs	r2, #2
 800b9b0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	68db      	ldr	r3, [r3, #12]
 800b9b8:	f003 0310 	and.w	r3, r3, #16
 800b9bc:	2b10      	cmp	r3, #16
 800b9be:	d053      	beq.n	800ba68 <HAL_RTC_Init+0xe4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	22ca      	movs	r2, #202	@ 0xca
 800b9c6:	625a      	str	r2, [r3, #36]	@ 0x24
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	2253      	movs	r2, #83	@ 0x53
 800b9ce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f000 fb75 	bl	800c0c0 <RTC_EnterInitMode>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800b9da:	7bfb      	ldrb	r3, [r7, #15]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d12a      	bne.n	800ba36 <HAL_RTC_Init+0xb2>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	6899      	ldr	r1, [r3, #8]
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681a      	ldr	r2, [r3, #0]
 800b9ea:	4b26      	ldr	r3, [pc, #152]	@ (800ba84 <HAL_RTC_Init+0x100>)
 800b9ec:	400b      	ands	r3, r1
 800b9ee:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	6899      	ldr	r1, [r3, #8]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	685a      	ldr	r2, [r3, #4]
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	691b      	ldr	r3, [r3, #16]
 800b9fe:	431a      	orrs	r2, r3
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	695b      	ldr	r3, [r3, #20]
 800ba04:	431a      	orrs	r2, r3
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	430a      	orrs	r2, r1
 800ba0c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	687a      	ldr	r2, [r7, #4]
 800ba14:	68d2      	ldr	r2, [r2, #12]
 800ba16:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	6919      	ldr	r1, [r3, #16]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	689b      	ldr	r3, [r3, #8]
 800ba22:	041a      	lsls	r2, r3, #16
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	430a      	orrs	r2, r1
 800ba2a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f000 fb7e 	bl	800c12e <RTC_ExitInitMode>
 800ba32:	4603      	mov	r3, r0
 800ba34:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800ba36:	7bfb      	ldrb	r3, [r7, #15]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d110      	bne.n	800ba5e <HAL_RTC_Init+0xda>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f022 0208 	bic.w	r2, r2, #8
 800ba4a:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	699a      	ldr	r2, [r3, #24]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	430a      	orrs	r2, r1
 800ba5c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	22ff      	movs	r2, #255	@ 0xff
 800ba64:	625a      	str	r2, [r3, #36]	@ 0x24
 800ba66:	e001      	b.n	800ba6c <HAL_RTC_Init+0xe8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800ba6c:	7bfb      	ldrb	r3, [r7, #15]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d102      	bne.n	800ba78 <HAL_RTC_Init+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2201      	movs	r2, #1
 800ba76:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800ba78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3710      	adds	r7, #16
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}
 800ba82:	bf00      	nop
 800ba84:	ff8fffbf 	.word	0xff8fffbf

0800ba88 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ba88:	b590      	push	{r4, r7, lr}
 800ba8a:	b087      	sub	sp, #28
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	60f8      	str	r0, [r7, #12]
 800ba90:	60b9      	str	r1, [r7, #8]
 800ba92:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800ba94:	2300      	movs	r3, #0
 800ba96:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	7f1b      	ldrb	r3, [r3, #28]
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	d101      	bne.n	800baa4 <HAL_RTC_SetTime+0x1c>
 800baa0:	2302      	movs	r3, #2
 800baa2:	e085      	b.n	800bbb0 <HAL_RTC_SetTime+0x128>
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2201      	movs	r2, #1
 800baa8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	2202      	movs	r2, #2
 800baae:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d126      	bne.n	800bb04 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	689b      	ldr	r3, [r3, #8]
 800babc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d102      	bne.n	800baca <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	2200      	movs	r2, #0
 800bac8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	4618      	mov	r0, r3
 800bad0:	f000 fb52 	bl	800c178 <RTC_ByteToBcd2>
 800bad4:	4603      	mov	r3, r0
 800bad6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	785b      	ldrb	r3, [r3, #1]
 800badc:	4618      	mov	r0, r3
 800bade:	f000 fb4b 	bl	800c178 <RTC_ByteToBcd2>
 800bae2:	4603      	mov	r3, r0
 800bae4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800bae6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	789b      	ldrb	r3, [r3, #2]
 800baec:	4618      	mov	r0, r3
 800baee:	f000 fb43 	bl	800c178 <RTC_ByteToBcd2>
 800baf2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800baf4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	78db      	ldrb	r3, [r3, #3]
 800bafc:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800bafe:	4313      	orrs	r3, r2
 800bb00:	617b      	str	r3, [r7, #20]
 800bb02:	e018      	b.n	800bb36 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	689b      	ldr	r3, [r3, #8]
 800bb0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d102      	bne.n	800bb18 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	2200      	movs	r2, #0
 800bb16:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	785b      	ldrb	r3, [r3, #1]
 800bb22:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800bb24:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800bb26:	68ba      	ldr	r2, [r7, #8]
 800bb28:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800bb2a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	78db      	ldrb	r3, [r3, #3]
 800bb30:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800bb32:	4313      	orrs	r3, r2
 800bb34:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	22ca      	movs	r2, #202	@ 0xca
 800bb3c:	625a      	str	r2, [r3, #36]	@ 0x24
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	2253      	movs	r2, #83	@ 0x53
 800bb44:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800bb46:	68f8      	ldr	r0, [r7, #12]
 800bb48:	f000 faba 	bl	800c0c0 <RTC_EnterInitMode>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800bb50:	7cfb      	ldrb	r3, [r7, #19]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d11e      	bne.n	800bb94 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681a      	ldr	r2, [r3, #0]
 800bb5a:	6979      	ldr	r1, [r7, #20]
 800bb5c:	4b16      	ldr	r3, [pc, #88]	@ (800bbb8 <HAL_RTC_SetTime+0x130>)
 800bb5e:	400b      	ands	r3, r1
 800bb60:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	689a      	ldr	r2, [r3, #8]
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800bb70:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	6899      	ldr	r1, [r3, #8]
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	68da      	ldr	r2, [r3, #12]
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	691b      	ldr	r3, [r3, #16]
 800bb80:	431a      	orrs	r2, r3
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	430a      	orrs	r2, r1
 800bb88:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800bb8a:	68f8      	ldr	r0, [r7, #12]
 800bb8c:	f000 facf 	bl	800c12e <RTC_ExitInitMode>
 800bb90:	4603      	mov	r3, r0
 800bb92:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800bb94:	7cfb      	ldrb	r3, [r7, #19]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d102      	bne.n	800bba0 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	2201      	movs	r2, #1
 800bb9e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	22ff      	movs	r2, #255	@ 0xff
 800bba6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	771a      	strb	r2, [r3, #28]

  return status;
 800bbae:	7cfb      	ldrb	r3, [r7, #19]
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	371c      	adds	r7, #28
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd90      	pop	{r4, r7, pc}
 800bbb8:	007f7f7f 	.word	0x007f7f7f

0800bbbc <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b086      	sub	sp, #24
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	60f8      	str	r0, [r7, #12]
 800bbc4:	60b9      	str	r1, [r7, #8]
 800bbc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	691b      	ldr	r3, [r3, #16]
 800bbdc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	681a      	ldr	r2, [r3, #0]
 800bbea:	4b22      	ldr	r3, [pc, #136]	@ (800bc74 <HAL_RTC_GetTime+0xb8>)
 800bbec:	4013      	ands	r3, r2
 800bbee:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800bbf0:	697b      	ldr	r3, [r7, #20]
 800bbf2:	0c1b      	lsrs	r3, r3, #16
 800bbf4:	b2db      	uxtb	r3, r3
 800bbf6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bbfa:	b2da      	uxtb	r2, r3
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	0a1b      	lsrs	r3, r3, #8
 800bc04:	b2db      	uxtb	r3, r3
 800bc06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc0a:	b2da      	uxtb	r2, r3
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	b2db      	uxtb	r3, r3
 800bc14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc18:	b2da      	uxtb	r2, r3
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	0d9b      	lsrs	r3, r3, #22
 800bc22:	b2db      	uxtb	r3, r3
 800bc24:	f003 0301 	and.w	r3, r3, #1
 800bc28:	b2da      	uxtb	r2, r3
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d11a      	bne.n	800bc6a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	781b      	ldrb	r3, [r3, #0]
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f000 fabb 	bl	800c1b4 <RTC_Bcd2ToByte>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	461a      	mov	r2, r3
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	785b      	ldrb	r3, [r3, #1]
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f000 fab2 	bl	800c1b4 <RTC_Bcd2ToByte>
 800bc50:	4603      	mov	r3, r0
 800bc52:	461a      	mov	r2, r3
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	789b      	ldrb	r3, [r3, #2]
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f000 faa9 	bl	800c1b4 <RTC_Bcd2ToByte>
 800bc62:	4603      	mov	r3, r0
 800bc64:	461a      	mov	r2, r3
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800bc6a:	2300      	movs	r3, #0
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3718      	adds	r7, #24
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}
 800bc74:	007f7f7f 	.word	0x007f7f7f

0800bc78 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bc78:	b590      	push	{r4, r7, lr}
 800bc7a:	b087      	sub	sp, #28
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	60f8      	str	r0, [r7, #12]
 800bc80:	60b9      	str	r1, [r7, #8]
 800bc82:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800bc84:	2300      	movs	r3, #0
 800bc86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	7f1b      	ldrb	r3, [r3, #28]
 800bc8c:	2b01      	cmp	r3, #1
 800bc8e:	d101      	bne.n	800bc94 <HAL_RTC_SetDate+0x1c>
 800bc90:	2302      	movs	r3, #2
 800bc92:	e06f      	b.n	800bd74 <HAL_RTC_SetDate+0xfc>
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	2201      	movs	r2, #1
 800bc98:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	2202      	movs	r2, #2
 800bc9e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d10e      	bne.n	800bcc4 <HAL_RTC_SetDate+0x4c>
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	785b      	ldrb	r3, [r3, #1]
 800bcaa:	f003 0310 	and.w	r3, r3, #16
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d008      	beq.n	800bcc4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	785b      	ldrb	r3, [r3, #1]
 800bcb6:	f023 0310 	bic.w	r3, r3, #16
 800bcba:	b2db      	uxtb	r3, r3
 800bcbc:	330a      	adds	r3, #10
 800bcbe:	b2da      	uxtb	r2, r3
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d11c      	bne.n	800bd04 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	78db      	ldrb	r3, [r3, #3]
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f000 fa52 	bl	800c178 <RTC_ByteToBcd2>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	785b      	ldrb	r3, [r3, #1]
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f000 fa4b 	bl	800c178 <RTC_ByteToBcd2>
 800bce2:	4603      	mov	r3, r0
 800bce4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800bce6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	789b      	ldrb	r3, [r3, #2]
 800bcec:	4618      	mov	r0, r3
 800bcee:	f000 fa43 	bl	800c178 <RTC_ByteToBcd2>
 800bcf2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800bcf4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	781b      	ldrb	r3, [r3, #0]
 800bcfc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	617b      	str	r3, [r7, #20]
 800bd02:	e00e      	b.n	800bd22 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	78db      	ldrb	r3, [r3, #3]
 800bd08:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	785b      	ldrb	r3, [r3, #1]
 800bd0e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800bd10:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800bd12:	68ba      	ldr	r2, [r7, #8]
 800bd14:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800bd16:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800bd1e:	4313      	orrs	r3, r2
 800bd20:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	22ca      	movs	r2, #202	@ 0xca
 800bd28:	625a      	str	r2, [r3, #36]	@ 0x24
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	2253      	movs	r2, #83	@ 0x53
 800bd30:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800bd32:	68f8      	ldr	r0, [r7, #12]
 800bd34:	f000 f9c4 	bl	800c0c0 <RTC_EnterInitMode>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800bd3c:	7cfb      	ldrb	r3, [r7, #19]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d10a      	bne.n	800bd58 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681a      	ldr	r2, [r3, #0]
 800bd46:	6979      	ldr	r1, [r7, #20]
 800bd48:	4b0c      	ldr	r3, [pc, #48]	@ (800bd7c <HAL_RTC_SetDate+0x104>)
 800bd4a:	400b      	ands	r3, r1
 800bd4c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800bd4e:	68f8      	ldr	r0, [r7, #12]
 800bd50:	f000 f9ed 	bl	800c12e <RTC_ExitInitMode>
 800bd54:	4603      	mov	r3, r0
 800bd56:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800bd58:	7cfb      	ldrb	r3, [r7, #19]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d102      	bne.n	800bd64 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2201      	movs	r2, #1
 800bd62:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	22ff      	movs	r2, #255	@ 0xff
 800bd6a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	771a      	strb	r2, [r3, #28]

  return status;
 800bd72:	7cfb      	ldrb	r3, [r7, #19]
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	371c      	adds	r7, #28
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd90      	pop	{r4, r7, pc}
 800bd7c:	00ffff3f 	.word	0x00ffff3f

0800bd80 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b086      	sub	sp, #24
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	60f8      	str	r0, [r7, #12]
 800bd88:	60b9      	str	r1, [r7, #8]
 800bd8a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	685a      	ldr	r2, [r3, #4]
 800bd96:	4b21      	ldr	r3, [pc, #132]	@ (800be1c <HAL_RTC_GetDate+0x9c>)
 800bd98:	4013      	ands	r3, r2
 800bd9a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	0c1b      	lsrs	r3, r3, #16
 800bda0:	b2da      	uxtb	r2, r3
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	0a1b      	lsrs	r3, r3, #8
 800bdaa:	b2db      	uxtb	r3, r3
 800bdac:	f003 031f 	and.w	r3, r3, #31
 800bdb0:	b2da      	uxtb	r2, r3
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	b2db      	uxtb	r3, r3
 800bdba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bdbe:	b2da      	uxtb	r2, r3
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	0b5b      	lsrs	r3, r3, #13
 800bdc8:	b2db      	uxtb	r3, r3
 800bdca:	f003 0307 	and.w	r3, r3, #7
 800bdce:	b2da      	uxtb	r2, r3
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d11a      	bne.n	800be10 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	78db      	ldrb	r3, [r3, #3]
 800bdde:	4618      	mov	r0, r3
 800bde0:	f000 f9e8 	bl	800c1b4 <RTC_Bcd2ToByte>
 800bde4:	4603      	mov	r3, r0
 800bde6:	461a      	mov	r2, r3
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	785b      	ldrb	r3, [r3, #1]
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	f000 f9df 	bl	800c1b4 <RTC_Bcd2ToByte>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	461a      	mov	r2, r3
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	789b      	ldrb	r3, [r3, #2]
 800be02:	4618      	mov	r0, r3
 800be04:	f000 f9d6 	bl	800c1b4 <RTC_Bcd2ToByte>
 800be08:	4603      	mov	r3, r0
 800be0a:	461a      	mov	r2, r3
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800be10:	2300      	movs	r3, #0
}
 800be12:	4618      	mov	r0, r3
 800be14:	3718      	adds	r7, #24
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop
 800be1c:	00ffff3f 	.word	0x00ffff3f

0800be20 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800be20:	b590      	push	{r4, r7, lr}
 800be22:	b089      	sub	sp, #36	@ 0x24
 800be24:	af00      	add	r7, sp, #0
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	60b9      	str	r1, [r7, #8]
 800be2a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800be2c:	2300      	movs	r3, #0
 800be2e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800be30:	2300      	movs	r3, #0
 800be32:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800be34:	2300      	movs	r3, #0
 800be36:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	7f1b      	ldrb	r3, [r3, #28]
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	d101      	bne.n	800be44 <HAL_RTC_SetAlarm+0x24>
 800be40:	2302      	movs	r3, #2
 800be42:	e113      	b.n	800c06c <HAL_RTC_SetAlarm+0x24c>
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	2201      	movs	r2, #1
 800be48:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	2202      	movs	r2, #2
 800be4e:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d137      	bne.n	800bec6 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	689b      	ldr	r3, [r3, #8]
 800be5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be60:	2b00      	cmp	r3, #0
 800be62:	d102      	bne.n	800be6a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	2200      	movs	r2, #0
 800be68:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	4618      	mov	r0, r3
 800be70:	f000 f982 	bl	800c178 <RTC_ByteToBcd2>
 800be74:	4603      	mov	r3, r0
 800be76:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	785b      	ldrb	r3, [r3, #1]
 800be7c:	4618      	mov	r0, r3
 800be7e:	f000 f97b 	bl	800c178 <RTC_ByteToBcd2>
 800be82:	4603      	mov	r3, r0
 800be84:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800be86:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	789b      	ldrb	r3, [r3, #2]
 800be8c:	4618      	mov	r0, r3
 800be8e:	f000 f973 	bl	800c178 <RTC_ByteToBcd2>
 800be92:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800be94:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	78db      	ldrb	r3, [r3, #3]
 800be9c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800be9e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bea8:	4618      	mov	r0, r3
 800beaa:	f000 f965 	bl	800c178 <RTC_ByteToBcd2>
 800beae:	4603      	mov	r3, r0
 800beb0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800beb2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800beba:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800bec0:	4313      	orrs	r3, r2
 800bec2:	61fb      	str	r3, [r7, #28]
 800bec4:	e023      	b.n	800bf0e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	689b      	ldr	r3, [r3, #8]
 800becc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d102      	bne.n	800beda <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	2200      	movs	r2, #0
 800bed8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	785b      	ldrb	r3, [r3, #1]
 800bee4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800bee6:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800bee8:	68ba      	ldr	r2, [r7, #8]
 800beea:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800beec:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	78db      	ldrb	r3, [r3, #3]
 800bef2:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800bef4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800befc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800befe:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800bf04:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800bf16:	4313      	orrs	r3, r2
 800bf18:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	22ca      	movs	r2, #202	@ 0xca
 800bf20:	625a      	str	r2, [r3, #36]	@ 0x24
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	2253      	movs	r2, #83	@ 0x53
 800bf28:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf32:	d148      	bne.n	800bfc6 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	689a      	ldr	r2, [r3, #8]
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bf42:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	689a      	ldr	r2, [r3, #8]
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800bf52:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	68db      	ldr	r3, [r3, #12]
 800bf5a:	b2da      	uxtb	r2, r3
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800bf64:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bf66:	f7f9 fbfb 	bl	8005760 <HAL_GetTick>
 800bf6a:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800bf6c:	e013      	b.n	800bf96 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bf6e:	f7f9 fbf7 	bl	8005760 <HAL_GetTick>
 800bf72:	4602      	mov	r2, r0
 800bf74:	69bb      	ldr	r3, [r7, #24]
 800bf76:	1ad3      	subs	r3, r2, r3
 800bf78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bf7c:	d90b      	bls.n	800bf96 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	22ff      	movs	r2, #255	@ 0xff
 800bf84:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	2203      	movs	r2, #3
 800bf8a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800bf92:	2303      	movs	r3, #3
 800bf94:	e06a      	b.n	800c06c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	68db      	ldr	r3, [r3, #12]
 800bf9c:	f003 0301 	and.w	r3, r3, #1
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d0e4      	beq.n	800bf6e <HAL_RTC_SetAlarm+0x14e>
      }
    }

    /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	69fa      	ldr	r2, [r7, #28]
 800bfaa:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	697a      	ldr	r2, [r7, #20]
 800bfb2:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	689a      	ldr	r2, [r3, #8]
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bfc2:	609a      	str	r2, [r3, #8]
 800bfc4:	e047      	b.n	800c056 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	689a      	ldr	r2, [r3, #8]
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800bfd4:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	689a      	ldr	r2, [r3, #8]
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bfe4:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	68db      	ldr	r3, [r3, #12]
 800bfec:	b2da      	uxtb	r2, r3
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800bff6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bff8:	f7f9 fbb2 	bl	8005760 <HAL_GetTick>
 800bffc:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800bffe:	e013      	b.n	800c028 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c000:	f7f9 fbae 	bl	8005760 <HAL_GetTick>
 800c004:	4602      	mov	r2, r0
 800c006:	69bb      	ldr	r3, [r7, #24]
 800c008:	1ad3      	subs	r3, r2, r3
 800c00a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c00e:	d90b      	bls.n	800c028 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	22ff      	movs	r2, #255	@ 0xff
 800c016:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2203      	movs	r2, #3
 800c01c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	2200      	movs	r2, #0
 800c022:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800c024:	2303      	movs	r3, #3
 800c026:	e021      	b.n	800c06c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	68db      	ldr	r3, [r3, #12]
 800c02e:	f003 0302 	and.w	r3, r3, #2
 800c032:	2b00      	cmp	r3, #0
 800c034:	d0e4      	beq.n	800c000 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	69fa      	ldr	r2, [r7, #28]
 800c03c:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	697a      	ldr	r2, [r7, #20]
 800c044:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	689a      	ldr	r2, [r3, #8]
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c054:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	22ff      	movs	r2, #255	@ 0xff
 800c05c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2201      	movs	r2, #1
 800c062:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	2200      	movs	r2, #0
 800c068:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800c06a:	2300      	movs	r3, #0
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	3724      	adds	r7, #36	@ 0x24
 800c070:	46bd      	mov	sp, r7
 800c072:	bd90      	pop	{r4, r7, pc}

0800c074 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b084      	sub	sp, #16
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c07c:	2300      	movs	r3, #0
 800c07e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	4a0d      	ldr	r2, [pc, #52]	@ (800c0bc <HAL_RTC_WaitForSynchro+0x48>)
 800c086:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c088:	f7f9 fb6a 	bl	8005760 <HAL_GetTick>
 800c08c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c08e:	e009      	b.n	800c0a4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c090:	f7f9 fb66 	bl	8005760 <HAL_GetTick>
 800c094:	4602      	mov	r2, r0
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	1ad3      	subs	r3, r2, r3
 800c09a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c09e:	d901      	bls.n	800c0a4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800c0a0:	2303      	movs	r3, #3
 800c0a2:	e007      	b.n	800c0b4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	68db      	ldr	r3, [r3, #12]
 800c0aa:	f003 0320 	and.w	r3, r3, #32
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d0ee      	beq.n	800c090 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800c0b2:	2300      	movs	r3, #0
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3710      	adds	r7, #16
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}
 800c0bc:	0001ff5f 	.word	0x0001ff5f

0800c0c0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	68db      	ldr	r3, [r3, #12]
 800c0d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d122      	bne.n	800c124 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	68da      	ldr	r2, [r3, #12]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c0ec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c0ee:	f7f9 fb37 	bl	8005760 <HAL_GetTick>
 800c0f2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800c0f4:	e00c      	b.n	800c110 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c0f6:	f7f9 fb33 	bl	8005760 <HAL_GetTick>
 800c0fa:	4602      	mov	r2, r0
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	1ad3      	subs	r3, r2, r3
 800c100:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c104:	d904      	bls.n	800c110 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2204      	movs	r2, #4
 800c10a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800c10c:	2301      	movs	r3, #1
 800c10e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	68db      	ldr	r3, [r3, #12]
 800c116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d102      	bne.n	800c124 <RTC_EnterInitMode+0x64>
 800c11e:	7bfb      	ldrb	r3, [r7, #15]
 800c120:	2b01      	cmp	r3, #1
 800c122:	d1e8      	bne.n	800c0f6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800c124:	7bfb      	ldrb	r3, [r7, #15]
}
 800c126:	4618      	mov	r0, r3
 800c128:	3710      	adds	r7, #16
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}

0800c12e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c12e:	b580      	push	{r7, lr}
 800c130:	b084      	sub	sp, #16
 800c132:	af00      	add	r7, sp, #0
 800c134:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c136:	2300      	movs	r3, #0
 800c138:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	68da      	ldr	r2, [r3, #12]
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c148:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	689b      	ldr	r3, [r3, #8]
 800c150:	f003 0320 	and.w	r3, r3, #32
 800c154:	2b00      	cmp	r3, #0
 800c156:	d10a      	bne.n	800c16e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f7ff ff8b 	bl	800c074 <HAL_RTC_WaitForSynchro>
 800c15e:	4603      	mov	r3, r0
 800c160:	2b00      	cmp	r3, #0
 800c162:	d004      	beq.n	800c16e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2204      	movs	r2, #4
 800c168:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800c16a:	2301      	movs	r3, #1
 800c16c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800c16e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c170:	4618      	mov	r0, r3
 800c172:	3710      	adds	r7, #16
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}

0800c178 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800c178:	b480      	push	{r7}
 800c17a:	b085      	sub	sp, #20
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	4603      	mov	r3, r0
 800c180:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c182:	2300      	movs	r3, #0
 800c184:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800c186:	e005      	b.n	800c194 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	3301      	adds	r3, #1
 800c18c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800c18e:	79fb      	ldrb	r3, [r7, #7]
 800c190:	3b0a      	subs	r3, #10
 800c192:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800c194:	79fb      	ldrb	r3, [r7, #7]
 800c196:	2b09      	cmp	r3, #9
 800c198:	d8f6      	bhi.n	800c188 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	011b      	lsls	r3, r3, #4
 800c1a0:	b2da      	uxtb	r2, r3
 800c1a2:	79fb      	ldrb	r3, [r7, #7]
 800c1a4:	4313      	orrs	r3, r2
 800c1a6:	b2db      	uxtb	r3, r3
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3714      	adds	r7, #20
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b2:	4770      	bx	lr

0800c1b4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b085      	sub	sp, #20
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800c1c2:	79fb      	ldrb	r3, [r7, #7]
 800c1c4:	091b      	lsrs	r3, r3, #4
 800c1c6:	b2db      	uxtb	r3, r3
 800c1c8:	461a      	mov	r2, r3
 800c1ca:	4613      	mov	r3, r2
 800c1cc:	009b      	lsls	r3, r3, #2
 800c1ce:	4413      	add	r3, r2
 800c1d0:	005b      	lsls	r3, r3, #1
 800c1d2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	b2da      	uxtb	r2, r3
 800c1d8:	79fb      	ldrb	r3, [r7, #7]
 800c1da:	f003 030f 	and.w	r3, r3, #15
 800c1de:	b2db      	uxtb	r3, r3
 800c1e0:	4413      	add	r3, r2
 800c1e2:	b2db      	uxtb	r3, r3
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3714      	adds	r7, #20
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr

0800c1f0 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b087      	sub	sp, #28
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	60f8      	str	r0, [r7, #12]
 800c1f8:	60b9      	str	r1, [r7, #8]
 800c1fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	7f1b      	ldrb	r3, [r3, #28]
 800c204:	2b01      	cmp	r3, #1
 800c206:	d101      	bne.n	800c20c <HAL_RTCEx_SetTimeStamp+0x1c>
 800c208:	2302      	movs	r3, #2
 800c20a:	e050      	b.n	800c2ae <HAL_RTCEx_SetTimeStamp+0xbe>
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2201      	movs	r2, #1
 800c210:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	2202      	movs	r2, #2
 800c216:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	f022 0206 	bic.w	r2, r2, #6
 800c226:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	687a      	ldr	r2, [r7, #4]
 800c234:	430a      	orrs	r2, r1
 800c236:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	689a      	ldr	r2, [r3, #8]
 800c23e:	4b1f      	ldr	r3, [pc, #124]	@ (800c2bc <HAL_RTCEx_SetTimeStamp+0xcc>)
 800c240:	4013      	ands	r3, r2
 800c242:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800c244:	697a      	ldr	r2, [r7, #20]
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	4313      	orrs	r3, r2
 800c24a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	22ca      	movs	r2, #202	@ 0xca
 800c252:	625a      	str	r2, [r3, #36]	@ 0x24
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	2253      	movs	r2, #83	@ 0x53
 800c25a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	697a      	ldr	r2, [r7, #20]
 800c262:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	68db      	ldr	r3, [r3, #12]
 800c26a:	b2da      	uxtb	r2, r3
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 800c274:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	68db      	ldr	r3, [r3, #12]
 800c27c:	b2da      	uxtb	r2, r3
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 800c286:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	689a      	ldr	r2, [r3, #8]
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c296:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	22ff      	movs	r2, #255	@ 0xff
 800c29e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800c2ac:	2300      	movs	r3, #0
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	371c      	adds	r7, #28
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b8:	4770      	bx	lr
 800c2ba:	bf00      	nop
 800c2bc:	fffff7f7 	.word	0xfffff7f7

0800c2c0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b088      	sub	sp, #32
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d101      	bne.n	800c2de <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800c2da:	2301      	movs	r3, #1
 800c2dc:	e156      	b.n	800c58c <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800c2e4:	b2db      	uxtb	r3, r3
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d106      	bne.n	800c2f8 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f7f8 faa8 	bl	8004848 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2202      	movs	r2, #2
 800c2fc:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f000 f95b 	bl	800c5bc <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	68db      	ldr	r3, [r3, #12]
 800c30a:	2b02      	cmp	r3, #2
 800c30c:	d00c      	beq.n	800c328 <HAL_SAI_Init+0x68>
 800c30e:	2b02      	cmp	r3, #2
 800c310:	d80d      	bhi.n	800c32e <HAL_SAI_Init+0x6e>
 800c312:	2b00      	cmp	r3, #0
 800c314:	d002      	beq.n	800c31c <HAL_SAI_Init+0x5c>
 800c316:	2b01      	cmp	r3, #1
 800c318:	d003      	beq.n	800c322 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800c31a:	e008      	b.n	800c32e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800c31c:	2300      	movs	r3, #0
 800c31e:	61fb      	str	r3, [r7, #28]
      break;
 800c320:	e006      	b.n	800c330 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800c322:	2310      	movs	r3, #16
 800c324:	61fb      	str	r3, [r7, #28]
      break;
 800c326:	e003      	b.n	800c330 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800c328:	2320      	movs	r3, #32
 800c32a:	61fb      	str	r3, [r7, #28]
      break;
 800c32c:	e000      	b.n	800c330 <HAL_SAI_Init+0x70>
      break;
 800c32e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	689b      	ldr	r3, [r3, #8]
 800c334:	2b03      	cmp	r3, #3
 800c336:	d81e      	bhi.n	800c376 <HAL_SAI_Init+0xb6>
 800c338:	a201      	add	r2, pc, #4	@ (adr r2, 800c340 <HAL_SAI_Init+0x80>)
 800c33a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c33e:	bf00      	nop
 800c340:	0800c351 	.word	0x0800c351
 800c344:	0800c357 	.word	0x0800c357
 800c348:	0800c35f 	.word	0x0800c35f
 800c34c:	0800c367 	.word	0x0800c367
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800c350:	2300      	movs	r3, #0
 800c352:	617b      	str	r3, [r7, #20]
    }
    break;
 800c354:	e010      	b.n	800c378 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800c356:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c35a:	617b      	str	r3, [r7, #20]
    }
    break;
 800c35c:	e00c      	b.n	800c378 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c35e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c362:	617b      	str	r3, [r7, #20]
    }
    break;
 800c364:	e008      	b.n	800c378 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c366:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c36a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800c36c:	69fb      	ldr	r3, [r7, #28]
 800c36e:	f043 0301 	orr.w	r3, r3, #1
 800c372:	61fb      	str	r3, [r7, #28]
    }
    break;
 800c374:	e000      	b.n	800c378 <HAL_SAI_Init+0xb8>
    default:
      break;
 800c376:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	4a85      	ldr	r2, [pc, #532]	@ (800c594 <HAL_SAI_Init+0x2d4>)
 800c37e:	4293      	cmp	r3, r2
 800c380:	d004      	beq.n	800c38c <HAL_SAI_Init+0xcc>
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	4a84      	ldr	r2, [pc, #528]	@ (800c598 <HAL_SAI_Init+0x2d8>)
 800c388:	4293      	cmp	r3, r2
 800c38a:	d103      	bne.n	800c394 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800c38c:	4a83      	ldr	r2, [pc, #524]	@ (800c59c <HAL_SAI_Init+0x2dc>)
 800c38e:	69fb      	ldr	r3, [r7, #28]
 800c390:	6013      	str	r3, [r2, #0]
 800c392:	e002      	b.n	800c39a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800c394:	4a82      	ldr	r2, [pc, #520]	@ (800c5a0 <HAL_SAI_Init+0x2e0>)
 800c396:	69fb      	ldr	r3, [r7, #28]
 800c398:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	69db      	ldr	r3, [r3, #28]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d04c      	beq.n	800c43c <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4a7a      	ldr	r2, [pc, #488]	@ (800c594 <HAL_SAI_Init+0x2d4>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d004      	beq.n	800c3ba <HAL_SAI_Init+0xfa>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	4a78      	ldr	r2, [pc, #480]	@ (800c598 <HAL_SAI_Init+0x2d8>)
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d104      	bne.n	800c3c4 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800c3ba:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800c3be:	f7ff f9a1 	bl	800b704 <HAL_RCCEx_GetPeriphCLKFreq>
 800c3c2:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4a76      	ldr	r2, [pc, #472]	@ (800c5a4 <HAL_SAI_Init+0x2e4>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d004      	beq.n	800c3d8 <HAL_SAI_Init+0x118>
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	4a75      	ldr	r2, [pc, #468]	@ (800c5a8 <HAL_SAI_Init+0x2e8>)
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	d104      	bne.n	800c3e2 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800c3d8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800c3dc:	f7ff f992 	bl	800b704 <HAL_RCCEx_GetPeriphCLKFreq>
 800c3e0:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800c3e2:	693a      	ldr	r2, [r7, #16]
 800c3e4:	4613      	mov	r3, r2
 800c3e6:	009b      	lsls	r3, r3, #2
 800c3e8:	4413      	add	r3, r2
 800c3ea:	005b      	lsls	r3, r3, #1
 800c3ec:	461a      	mov	r2, r3
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	69db      	ldr	r3, [r3, #28]
 800c3f2:	025b      	lsls	r3, r3, #9
 800c3f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3f8:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	4a6b      	ldr	r2, [pc, #428]	@ (800c5ac <HAL_SAI_Init+0x2ec>)
 800c3fe:	fba2 2303 	umull	r2, r3, r2, r3
 800c402:	08da      	lsrs	r2, r3, #3
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800c408:	68f9      	ldr	r1, [r7, #12]
 800c40a:	4b68      	ldr	r3, [pc, #416]	@ (800c5ac <HAL_SAI_Init+0x2ec>)
 800c40c:	fba3 2301 	umull	r2, r3, r3, r1
 800c410:	08da      	lsrs	r2, r3, #3
 800c412:	4613      	mov	r3, r2
 800c414:	009b      	lsls	r3, r3, #2
 800c416:	4413      	add	r3, r2
 800c418:	005b      	lsls	r3, r3, #1
 800c41a:	1aca      	subs	r2, r1, r3
 800c41c:	2a08      	cmp	r2, #8
 800c41e:	d904      	bls.n	800c42a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6a1b      	ldr	r3, [r3, #32]
 800c424:	1c5a      	adds	r2, r3, #1
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c42e:	2b04      	cmp	r3, #4
 800c430:	d104      	bne.n	800c43c <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6a1b      	ldr	r3, [r3, #32]
 800c436:	085a      	lsrs	r2, r3, #1
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	685b      	ldr	r3, [r3, #4]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d003      	beq.n	800c44c <HAL_SAI_Init+0x18c>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	2b02      	cmp	r3, #2
 800c44a:	d109      	bne.n	800c460 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c450:	2b01      	cmp	r3, #1
 800c452:	d101      	bne.n	800c458 <HAL_SAI_Init+0x198>
 800c454:	2300      	movs	r3, #0
 800c456:	e001      	b.n	800c45c <HAL_SAI_Init+0x19c>
 800c458:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c45c:	61bb      	str	r3, [r7, #24]
 800c45e:	e008      	b.n	800c472 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c464:	2b01      	cmp	r3, #1
 800c466:	d102      	bne.n	800c46e <HAL_SAI_Init+0x1ae>
 800c468:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c46c:	e000      	b.n	800c470 <HAL_SAI_Init+0x1b0>
 800c46e:	2300      	movs	r3, #0
 800c470:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	6819      	ldr	r1, [r3, #0]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681a      	ldr	r2, [r3, #0]
 800c47c:	4b4c      	ldr	r3, [pc, #304]	@ (800c5b0 <HAL_SAI_Init+0x2f0>)
 800c47e:	400b      	ands	r3, r1
 800c480:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	6819      	ldr	r1, [r3, #0]
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	685a      	ldr	r2, [r3, #4]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c490:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c496:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c49c:	431a      	orrs	r2, r3
 800c49e:	69bb      	ldr	r3, [r7, #24]
 800c4a0:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800c4aa:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	691b      	ldr	r3, [r3, #16]
 800c4b0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c4b6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6a1b      	ldr	r3, [r3, #32]
 800c4bc:	051b      	lsls	r3, r3, #20
 800c4be:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	430a      	orrs	r2, r1
 800c4c6:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	6859      	ldr	r1, [r3, #4]
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681a      	ldr	r2, [r3, #0]
 800c4d2:	4b38      	ldr	r3, [pc, #224]	@ (800c5b4 <HAL_SAI_Init+0x2f4>)
 800c4d4:	400b      	ands	r3, r1
 800c4d6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	6859      	ldr	r1, [r3, #4]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	699a      	ldr	r2, [r3, #24]
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4e6:	431a      	orrs	r2, r3
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4ec:	431a      	orrs	r2, r3
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	430a      	orrs	r2, r1
 800c4f4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	6899      	ldr	r1, [r3, #8]
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681a      	ldr	r2, [r3, #0]
 800c500:	4b2d      	ldr	r3, [pc, #180]	@ (800c5b8 <HAL_SAI_Init+0x2f8>)
 800c502:	400b      	ands	r3, r1
 800c504:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	6899      	ldr	r1, [r3, #8]
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c510:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c516:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800c51c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800c522:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c528:	3b01      	subs	r3, #1
 800c52a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800c52c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	430a      	orrs	r2, r1
 800c534:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	68d9      	ldr	r1, [r3, #12]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681a      	ldr	r2, [r3, #0]
 800c540:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800c544:	400b      	ands	r3, r1
 800c546:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	68d9      	ldr	r1, [r3, #12]
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c556:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c55c:	041b      	lsls	r3, r3, #16
 800c55e:	431a      	orrs	r2, r3
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c564:	3b01      	subs	r3, #1
 800c566:	021b      	lsls	r3, r3, #8
 800c568:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	430a      	orrs	r2, r1
 800c570:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2200      	movs	r2, #0
 800c576:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2201      	movs	r2, #1
 800c57e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2200      	movs	r2, #0
 800c586:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800c58a:	2300      	movs	r3, #0
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3720      	adds	r7, #32
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}
 800c594:	40015804 	.word	0x40015804
 800c598:	40015824 	.word	0x40015824
 800c59c:	40015800 	.word	0x40015800
 800c5a0:	40015c00 	.word	0x40015c00
 800c5a4:	40015c04 	.word	0x40015c04
 800c5a8:	40015c24 	.word	0x40015c24
 800c5ac:	cccccccd 	.word	0xcccccccd
 800c5b0:	ff05c010 	.word	0xff05c010
 800c5b4:	ffff1ff0 	.word	0xffff1ff0
 800c5b8:	fff88000 	.word	0xfff88000

0800c5bc <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b085      	sub	sp, #20
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800c5c4:	4b17      	ldr	r3, [pc, #92]	@ (800c624 <SAI_Disable+0x68>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	4a17      	ldr	r2, [pc, #92]	@ (800c628 <SAI_Disable+0x6c>)
 800c5ca:	fba2 2303 	umull	r2, r3, r2, r3
 800c5ce:	0b1b      	lsrs	r3, r3, #12
 800c5d0:	009b      	lsls	r3, r3, #2
 800c5d2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	681a      	ldr	r2, [r3, #0]
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800c5e6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	1e5a      	subs	r2, r3, #1
 800c5ec:	60fa      	str	r2, [r7, #12]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d10a      	bne.n	800c608 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c5f8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800c602:	2303      	movs	r3, #3
 800c604:	72fb      	strb	r3, [r7, #11]
      break;
 800c606:	e006      	b.n	800c616 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c612:	2b00      	cmp	r3, #0
 800c614:	d1e8      	bne.n	800c5e8 <SAI_Disable+0x2c>

  return status;
 800c616:	7afb      	ldrb	r3, [r7, #11]
}
 800c618:	4618      	mov	r0, r3
 800c61a:	3714      	adds	r7, #20
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr
 800c624:	20000018 	.word	0x20000018
 800c628:	95cbec1b 	.word	0x95cbec1b

0800c62c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b082      	sub	sp, #8
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d101      	bne.n	800c63e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c63a:	2301      	movs	r3, #1
 800c63c:	e022      	b.n	800c684 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c644:	b2db      	uxtb	r3, r3
 800c646:	2b00      	cmp	r3, #0
 800c648:	d105      	bne.n	800c656 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2200      	movs	r2, #0
 800c64e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f7f7 fd13 	bl	800407c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2203      	movs	r2, #3
 800c65a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f000 f814 	bl	800c68c <HAL_SD_InitCard>
 800c664:	4603      	mov	r3, r0
 800c666:	2b00      	cmp	r3, #0
 800c668:	d001      	beq.n	800c66e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c66a:	2301      	movs	r3, #1
 800c66c:	e00a      	b.n	800c684 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2200      	movs	r2, #0
 800c672:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2200      	movs	r2, #0
 800c678:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2201      	movs	r2, #1
 800c67e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c682:	2300      	movs	r3, #0
}
 800c684:	4618      	mov	r0, r3
 800c686:	3708      	adds	r7, #8
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c68c:	b5b0      	push	{r4, r5, r7, lr}
 800c68e:	b08e      	sub	sp, #56	@ 0x38
 800c690:	af04      	add	r7, sp, #16
 800c692:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c694:	2300      	movs	r3, #0
 800c696:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800c698:	2300      	movs	r3, #0
 800c69a:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c69c:	2300      	movs	r3, #0
 800c69e:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800c6a8:	2376      	movs	r3, #118	@ 0x76
 800c6aa:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681d      	ldr	r5, [r3, #0]
 800c6b0:	466c      	mov	r4, sp
 800c6b2:	f107 0318 	add.w	r3, r7, #24
 800c6b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c6ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c6be:	f107 030c 	add.w	r3, r7, #12
 800c6c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c6c4:	4628      	mov	r0, r5
 800c6c6:	f004 f877 	bl	80107b8 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	685a      	ldr	r2, [r3, #4]
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c6d8:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f004 f8b4 	bl	801084c <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	685a      	ldr	r2, [r3, #4]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c6f2:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800c6f4:	2002      	movs	r0, #2
 800c6f6:	f7f9 f83f 	bl	8005778 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f001 f8da 	bl	800d8b4 <SD_PowerON>
 800c700:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800c702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c704:	2b00      	cmp	r3, #0
 800c706:	d00b      	beq.n	800c720 <HAL_SD_InitCard+0x94>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2201      	movs	r2, #1
 800c70c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c716:	431a      	orrs	r2, r3
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c71c:	2301      	movs	r3, #1
 800c71e:	e02e      	b.n	800c77e <HAL_SD_InitCard+0xf2>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f000 fff9 	bl	800d718 <SD_InitCard>
 800c726:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800c728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d00b      	beq.n	800c746 <HAL_SD_InitCard+0xba>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2201      	movs	r2, #1
 800c732:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c73a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c73c:	431a      	orrs	r2, r3
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c742:	2301      	movs	r3, #1
 800c744:	e01b      	b.n	800c77e <HAL_SD_InitCard+0xf2>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c74e:	4618      	mov	r0, r3
 800c750:	f004 f90e 	bl	8010970 <SDMMC_CmdBlockLength>
 800c754:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800c756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d00f      	beq.n	800c77c <HAL_SD_InitCard+0xf0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	4a09      	ldr	r2, [pc, #36]	@ (800c788 <HAL_SD_InitCard+0xfc>)
 800c762:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c76a:	431a      	orrs	r2, r3
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2201      	movs	r2, #1
 800c774:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c778:	2301      	movs	r3, #1
 800c77a:	e000      	b.n	800c77e <HAL_SD_InitCard+0xf2>
  }

  return HAL_OK;
 800c77c:	2300      	movs	r3, #0
}
 800c77e:	4618      	mov	r0, r3
 800c780:	3728      	adds	r7, #40	@ 0x28
 800c782:	46bd      	mov	sp, r7
 800c784:	bdb0      	pop	{r4, r5, r7, pc}
 800c786:	bf00      	nop
 800c788:	004005ff 	.word	0x004005ff

0800c78c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b092      	sub	sp, #72	@ 0x48
 800c790:	af00      	add	r7, sp, #0
 800c792:	60f8      	str	r0, [r7, #12]
 800c794:	60b9      	str	r1, [r7, #8]
 800c796:	607a      	str	r2, [r7, #4]
 800c798:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c79a:	f7f8 ffe1 	bl	8005760 <HAL_GetTick>
 800c79e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d107      	bne.n	800c7be <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7b2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	e1bd      	b.n	800cb3a <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c7c4:	b2db      	uxtb	r3, r3
 800c7c6:	2b01      	cmp	r3, #1
 800c7c8:	f040 81b0 	bne.w	800cb2c <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c7d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	441a      	add	r2, r3
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	d907      	bls.n	800c7f0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7e4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	e1a4      	b.n	800cb3a <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	2203      	movs	r2, #3
 800c7f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c804:	2b01      	cmp	r3, #1
 800c806:	d002      	beq.n	800c80e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800c808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c80a:	025b      	lsls	r3, r3, #9
 800c80c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c80e:	f04f 33ff 	mov.w	r3, #4294967295
 800c812:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	025b      	lsls	r3, r3, #9
 800c818:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c81a:	2390      	movs	r3, #144	@ 0x90
 800c81c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c81e:	2302      	movs	r3, #2
 800c820:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c822:	2300      	movs	r3, #0
 800c824:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800c826:	2301      	movs	r3, #1
 800c828:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	f107 0214 	add.w	r2, r7, #20
 800c832:	4611      	mov	r1, r2
 800c834:	4618      	mov	r0, r3
 800c836:	f004 f86f 	bl	8010918 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	2b01      	cmp	r3, #1
 800c83e:	d90a      	bls.n	800c856 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	2202      	movs	r2, #2
 800c844:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c84c:	4618      	mov	r0, r3
 800c84e:	f004 f8d3 	bl	80109f8 <SDMMC_CmdReadMultiBlock>
 800c852:	6478      	str	r0, [r7, #68]	@ 0x44
 800c854:	e009      	b.n	800c86a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	2201      	movs	r2, #1
 800c85a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c862:	4618      	mov	r0, r3
 800c864:	f004 f8a6 	bl	80109b4 <SDMMC_CmdReadSingleBlock>
 800c868:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c86a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d012      	beq.n	800c896 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	4a7a      	ldr	r2, [pc, #488]	@ (800ca60 <HAL_SD_ReadBlocks+0x2d4>)
 800c876:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c87c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c87e:	431a      	orrs	r2, r3
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	2201      	movs	r2, #1
 800c888:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	2200      	movs	r2, #0
 800c890:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c892:	2301      	movs	r3, #1
 800c894:	e151      	b.n	800cb3a <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800c896:	69bb      	ldr	r3, [r7, #24]
 800c898:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c89a:	e061      	b.n	800c960 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d03c      	beq.n	800c924 <HAL_SD_ReadBlocks+0x198>
 800c8aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d039      	beq.n	800c924 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	643b      	str	r3, [r7, #64]	@ 0x40
 800c8b4:	e033      	b.n	800c91e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f003 ffa8 	bl	8010810 <SDMMC_ReadFIFO>
 800c8c0:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800c8c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8c4:	b2da      	uxtb	r2, r3
 800c8c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8c8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c8ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8cc:	3301      	adds	r3, #1
 800c8ce:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c8d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8d2:	3b01      	subs	r3, #1
 800c8d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800c8d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8d8:	0a1b      	lsrs	r3, r3, #8
 800c8da:	b2da      	uxtb	r2, r3
 800c8dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8de:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c8e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8e2:	3301      	adds	r3, #1
 800c8e4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c8e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8e8:	3b01      	subs	r3, #1
 800c8ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800c8ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8ee:	0c1b      	lsrs	r3, r3, #16
 800c8f0:	b2da      	uxtb	r2, r3
 800c8f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8f4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c8f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8f8:	3301      	adds	r3, #1
 800c8fa:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c8fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8fe:	3b01      	subs	r3, #1
 800c900:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800c902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c904:	0e1b      	lsrs	r3, r3, #24
 800c906:	b2da      	uxtb	r2, r3
 800c908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c90a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c90c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c90e:	3301      	adds	r3, #1
 800c910:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c912:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c914:	3b01      	subs	r3, #1
 800c916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800c918:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c91a:	3301      	adds	r3, #1
 800c91c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c91e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c920:	2b07      	cmp	r3, #7
 800c922:	d9c8      	bls.n	800c8b6 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800c924:	f7f8 ff1c 	bl	8005760 <HAL_GetTick>
 800c928:	4602      	mov	r2, r0
 800c92a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c92c:	1ad3      	subs	r3, r2, r3
 800c92e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c930:	429a      	cmp	r2, r3
 800c932:	d902      	bls.n	800c93a <HAL_SD_ReadBlocks+0x1ae>
 800c934:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c936:	2b00      	cmp	r3, #0
 800c938:	d112      	bne.n	800c960 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	4a48      	ldr	r2, [pc, #288]	@ (800ca60 <HAL_SD_ReadBlocks+0x2d4>)
 800c940:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c946:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	2201      	movs	r2, #1
 800c952:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	2200      	movs	r2, #0
 800c95a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800c95c:	2303      	movs	r3, #3
 800c95e:	e0ec      	b.n	800cb3a <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c966:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d096      	beq.n	800c89c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d022      	beq.n	800c9c2 <HAL_SD_ReadBlocks+0x236>
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	2b01      	cmp	r3, #1
 800c980:	d91f      	bls.n	800c9c2 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c986:	2b03      	cmp	r3, #3
 800c988:	d01b      	beq.n	800c9c2 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	4618      	mov	r0, r3
 800c990:	f004 f898 	bl	8010ac4 <SDMMC_CmdStopTransfer>
 800c994:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800c996:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d012      	beq.n	800c9c2 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	4a2f      	ldr	r2, [pc, #188]	@ (800ca60 <HAL_SD_ReadBlocks+0x2d4>)
 800c9a2:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c9a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9aa:	431a      	orrs	r2, r3
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800c9be:	2301      	movs	r3, #1
 800c9c0:	e0bb      	b.n	800cb3a <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9c8:	f003 0308 	and.w	r3, r3, #8
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d012      	beq.n	800c9f6 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4a22      	ldr	r2, [pc, #136]	@ (800ca60 <HAL_SD_ReadBlocks+0x2d4>)
 800c9d6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9dc:	f043 0208 	orr.w	r2, r3, #8
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	e0a1      	b.n	800cb3a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9fc:	f003 0302 	and.w	r3, r3, #2
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d012      	beq.n	800ca2a <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	4a15      	ldr	r2, [pc, #84]	@ (800ca60 <HAL_SD_ReadBlocks+0x2d4>)
 800ca0a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca10:	f043 0202 	orr.w	r2, r3, #2
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	2200      	movs	r2, #0
 800ca24:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800ca26:	2301      	movs	r3, #1
 800ca28:	e087      	b.n	800cb3a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca30:	f003 0320 	and.w	r3, r3, #32
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d064      	beq.n	800cb02 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	4a08      	ldr	r2, [pc, #32]	@ (800ca60 <HAL_SD_ReadBlocks+0x2d4>)
 800ca3e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca44:	f043 0220 	orr.w	r2, r3, #32
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	2201      	movs	r2, #1
 800ca50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	2200      	movs	r2, #0
 800ca58:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	e06d      	b.n	800cb3a <HAL_SD_ReadBlocks+0x3ae>
 800ca5e:	bf00      	nop
 800ca60:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f003 fed1 	bl	8010810 <SDMMC_ReadFIFO>
 800ca6e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800ca70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca72:	b2da      	uxtb	r2, r3
 800ca74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca76:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800ca78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca7a:	3301      	adds	r3, #1
 800ca7c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800ca7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca80:	3b01      	subs	r3, #1
 800ca82:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800ca84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca86:	0a1b      	lsrs	r3, r3, #8
 800ca88:	b2da      	uxtb	r2, r3
 800ca8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca8c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800ca8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca90:	3301      	adds	r3, #1
 800ca92:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800ca94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca96:	3b01      	subs	r3, #1
 800ca98:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800ca9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca9c:	0c1b      	lsrs	r3, r3, #16
 800ca9e:	b2da      	uxtb	r2, r3
 800caa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caa2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800caa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caa6:	3301      	adds	r3, #1
 800caa8:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800caaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800caac:	3b01      	subs	r3, #1
 800caae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800cab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cab2:	0e1b      	lsrs	r3, r3, #24
 800cab4:	b2da      	uxtb	r2, r3
 800cab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cab8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800caba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cabc:	3301      	adds	r3, #1
 800cabe:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800cac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cac2:	3b01      	subs	r3, #1
 800cac4:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800cac6:	f7f8 fe4b 	bl	8005760 <HAL_GetTick>
 800caca:	4602      	mov	r2, r0
 800cacc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cace:	1ad3      	subs	r3, r2, r3
 800cad0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cad2:	429a      	cmp	r2, r3
 800cad4:	d902      	bls.n	800cadc <HAL_SD_ReadBlocks+0x350>
 800cad6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d112      	bne.n	800cb02 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	4a18      	ldr	r2, [pc, #96]	@ (800cb44 <HAL_SD_ReadBlocks+0x3b8>)
 800cae2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cae8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	2201      	movs	r2, #1
 800caf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	2200      	movs	r2, #0
 800cafc:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800cafe:	2301      	movs	r3, #1
 800cb00:	e01b      	b.n	800cb3a <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d002      	beq.n	800cb16 <HAL_SD_ReadBlocks+0x38a>
 800cb10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d1a6      	bne.n	800ca64 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800cb1e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	2201      	movs	r2, #1
 800cb24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	e006      	b.n	800cb3a <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb30:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800cb38:	2301      	movs	r3, #1
  }
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3748      	adds	r7, #72	@ 0x48
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}
 800cb42:	bf00      	nop
 800cb44:	004005ff 	.word	0x004005ff

0800cb48 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b092      	sub	sp, #72	@ 0x48
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	60f8      	str	r0, [r7, #12]
 800cb50:	60b9      	str	r1, [r7, #8]
 800cb52:	607a      	str	r2, [r7, #4]
 800cb54:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cb56:	f7f8 fe03 	bl	8005760 <HAL_GetTick>
 800cb5a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d107      	bne.n	800cb7a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb6e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800cb76:	2301      	movs	r3, #1
 800cb78:	e165      	b.n	800ce46 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cb80:	b2db      	uxtb	r3, r3
 800cb82:	2b01      	cmp	r3, #1
 800cb84:	f040 8158 	bne.w	800ce38 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cb8e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	441a      	add	r2, r3
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cb98:	429a      	cmp	r2, r3
 800cb9a:	d907      	bls.n	800cbac <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cba0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800cba8:	2301      	movs	r3, #1
 800cbaa:	e14c      	b.n	800ce46 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2203      	movs	r2, #3
 800cbb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	2200      	movs	r2, #0
 800cbba:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cbc0:	2b01      	cmp	r3, #1
 800cbc2:	d002      	beq.n	800cbca <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800cbc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbc6:	025b      	lsls	r3, r3, #9
 800cbc8:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cbca:	f04f 33ff 	mov.w	r3, #4294967295
 800cbce:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	025b      	lsls	r3, r3, #9
 800cbd4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cbd6:	2390      	movs	r3, #144	@ 0x90
 800cbd8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800cbe2:	2301      	movs	r3, #1
 800cbe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f107 0218 	add.w	r2, r7, #24
 800cbee:	4611      	mov	r1, r2
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f003 fe91 	bl	8010918 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	2b01      	cmp	r3, #1
 800cbfa:	d90a      	bls.n	800cc12 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	2220      	movs	r2, #32
 800cc00:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f003 ff39 	bl	8010a80 <SDMMC_CmdWriteMultiBlock>
 800cc0e:	6478      	str	r0, [r7, #68]	@ 0x44
 800cc10:	e009      	b.n	800cc26 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	2210      	movs	r2, #16
 800cc16:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f003 ff0c 	bl	8010a3c <SDMMC_CmdWriteSingleBlock>
 800cc24:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cc26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d012      	beq.n	800cc52 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	4a87      	ldr	r2, [pc, #540]	@ (800ce50 <HAL_SD_WriteBlocks+0x308>)
 800cc32:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc3a:	431a      	orrs	r2, r3
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	2201      	movs	r2, #1
 800cc44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cc4e:	2301      	movs	r3, #1
 800cc50:	e0f9      	b.n	800ce46 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800cc52:	69fb      	ldr	r3, [r7, #28]
 800cc54:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cc56:	e065      	b.n	800cd24 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d040      	beq.n	800cce8 <HAL_SD_WriteBlocks+0x1a0>
 800cc66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d03d      	beq.n	800cce8 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	643b      	str	r3, [r7, #64]	@ 0x40
 800cc70:	e037      	b.n	800cce2 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800cc72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc74:	781b      	ldrb	r3, [r3, #0]
 800cc76:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800cc78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc7a:	3301      	adds	r3, #1
 800cc7c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cc7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc80:	3b01      	subs	r3, #1
 800cc82:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800cc84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc86:	781b      	ldrb	r3, [r3, #0]
 800cc88:	021a      	lsls	r2, r3, #8
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	4313      	orrs	r3, r2
 800cc8e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800cc90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc92:	3301      	adds	r3, #1
 800cc94:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cc96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc98:	3b01      	subs	r3, #1
 800cc9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800cc9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc9e:	781b      	ldrb	r3, [r3, #0]
 800cca0:	041a      	lsls	r2, r3, #16
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	4313      	orrs	r3, r2
 800cca6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800cca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccaa:	3301      	adds	r3, #1
 800ccac:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800ccae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccb0:	3b01      	subs	r3, #1
 800ccb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800ccb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccb6:	781b      	ldrb	r3, [r3, #0]
 800ccb8:	061a      	lsls	r2, r3, #24
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	4313      	orrs	r3, r2
 800ccbe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800ccc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccc2:	3301      	adds	r3, #1
 800ccc4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800ccc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccc8:	3b01      	subs	r3, #1
 800ccca:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	f107 0214 	add.w	r2, r7, #20
 800ccd4:	4611      	mov	r1, r2
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f003 fda7 	bl	801082a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800ccdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ccde:	3301      	adds	r3, #1
 800cce0:	643b      	str	r3, [r7, #64]	@ 0x40
 800cce2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cce4:	2b07      	cmp	r3, #7
 800cce6:	d9c4      	bls.n	800cc72 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800cce8:	f7f8 fd3a 	bl	8005760 <HAL_GetTick>
 800ccec:	4602      	mov	r2, r0
 800ccee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccf0:	1ad3      	subs	r3, r2, r3
 800ccf2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	d902      	bls.n	800ccfe <HAL_SD_WriteBlocks+0x1b6>
 800ccf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d112      	bne.n	800cd24 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	4a53      	ldr	r2, [pc, #332]	@ (800ce50 <HAL_SD_WriteBlocks+0x308>)
 800cd04:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cd0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd0c:	431a      	orrs	r2, r3
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	2201      	movs	r2, #1
 800cd16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800cd20:	2303      	movs	r3, #3
 800cd22:	e090      	b.n	800ce46 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd2a:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d092      	beq.n	800cc58 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d022      	beq.n	800cd86 <HAL_SD_WriteBlocks+0x23e>
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	d91f      	bls.n	800cd86 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd4a:	2b03      	cmp	r3, #3
 800cd4c:	d01b      	beq.n	800cd86 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	4618      	mov	r0, r3
 800cd54:	f003 feb6 	bl	8010ac4 <SDMMC_CmdStopTransfer>
 800cd58:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800cd5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d012      	beq.n	800cd86 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	4a3a      	ldr	r2, [pc, #232]	@ (800ce50 <HAL_SD_WriteBlocks+0x308>)
 800cd66:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cd6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd6e:	431a      	orrs	r2, r3
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	2201      	movs	r2, #1
 800cd78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800cd82:	2301      	movs	r3, #1
 800cd84:	e05f      	b.n	800ce46 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd8c:	f003 0308 	and.w	r3, r3, #8
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d012      	beq.n	800cdba <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	4a2d      	ldr	r2, [pc, #180]	@ (800ce50 <HAL_SD_WriteBlocks+0x308>)
 800cd9a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cda0:	f043 0208 	orr.w	r2, r3, #8
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2201      	movs	r2, #1
 800cdac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	e045      	b.n	800ce46 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cdc0:	f003 0302 	and.w	r3, r3, #2
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d012      	beq.n	800cdee <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	4a20      	ldr	r2, [pc, #128]	@ (800ce50 <HAL_SD_WriteBlocks+0x308>)
 800cdce:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdd4:	f043 0202 	orr.w	r2, r3, #2
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	2201      	movs	r2, #1
 800cde0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	2200      	movs	r2, #0
 800cde8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cdea:	2301      	movs	r3, #1
 800cdec:	e02b      	b.n	800ce46 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cdf4:	f003 0310 	and.w	r3, r3, #16
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d012      	beq.n	800ce22 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	4a13      	ldr	r2, [pc, #76]	@ (800ce50 <HAL_SD_WriteBlocks+0x308>)
 800ce02:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce08:	f043 0210 	orr.w	r2, r3, #16
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	2201      	movs	r2, #1
 800ce14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800ce1e:	2301      	movs	r3, #1
 800ce20:	e011      	b.n	800ce46 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f240 523a 	movw	r2, #1338	@ 0x53a
 800ce2a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	2201      	movs	r2, #1
 800ce30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800ce34:	2300      	movs	r3, #0
 800ce36:	e006      	b.n	800ce46 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce3c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800ce44:	2301      	movs	r3, #1
  }
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3748      	adds	r7, #72	@ 0x48
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}
 800ce4e:	bf00      	nop
 800ce50:	004005ff 	.word	0x004005ff

0800ce54 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b08c      	sub	sp, #48	@ 0x30
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	60f8      	str	r0, [r7, #12]
 800ce5c:	60b9      	str	r1, [r7, #8]
 800ce5e:	607a      	str	r2, [r7, #4]
 800ce60:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d107      	bne.n	800ce7c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce70:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800ce78:	2301      	movs	r3, #1
 800ce7a:	e0c3      	b.n	800d004 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ce82:	b2db      	uxtb	r3, r3
 800ce84:	2b01      	cmp	r3, #1
 800ce86:	f040 80bc 	bne.w	800d002 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ce90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	441a      	add	r2, r3
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce9a:	429a      	cmp	r2, r3
 800ce9c:	d907      	bls.n	800ceae <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cea2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800ceaa:	2301      	movs	r3, #1
 800ceac:	e0aa      	b.n	800d004 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2203      	movs	r2, #3
 800ceb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	2200      	movs	r2, #0
 800cebc:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800cecc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ced2:	4a4e      	ldr	r2, [pc, #312]	@ (800d00c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800ced4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ceda:	4a4d      	ldr	r2, [pc, #308]	@ (800d010 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800cedc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cee2:	2200      	movs	r2, #0
 800cee4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ceea:	2200      	movs	r2, #0
 800ceec:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cefe:	689a      	ldr	r2, [r3, #8]
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	430a      	orrs	r2, r1
 800cf08:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	3380      	adds	r3, #128	@ 0x80
 800cf14:	4619      	mov	r1, r3
 800cf16:	68ba      	ldr	r2, [r7, #8]
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	025b      	lsls	r3, r3, #9
 800cf1c:	089b      	lsrs	r3, r3, #2
 800cf1e:	f7f9 fa41 	bl	80063a4 <HAL_DMA_Start_IT>
 800cf22:	4603      	mov	r3, r0
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d017      	beq.n	800cf58 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800cf36:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	4a35      	ldr	r2, [pc, #212]	@ (800d014 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800cf3e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf44:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	2201      	movs	r2, #1
 800cf50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800cf54:	2301      	movs	r3, #1
 800cf56:	e055      	b.n	800d004 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	f042 0208 	orr.w	r2, r2, #8
 800cf66:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf6c:	2b01      	cmp	r3, #1
 800cf6e:	d002      	beq.n	800cf76 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800cf70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf72:	025b      	lsls	r3, r3, #9
 800cf74:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cf76:	f04f 33ff 	mov.w	r3, #4294967295
 800cf7a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	025b      	lsls	r3, r3, #9
 800cf80:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cf82:	2390      	movs	r3, #144	@ 0x90
 800cf84:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cf86:	2302      	movs	r3, #2
 800cf88:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800cf8e:	2301      	movs	r3, #1
 800cf90:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	f107 0210 	add.w	r2, r7, #16
 800cf9a:	4611      	mov	r1, r2
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f003 fcbb 	bl	8010918 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	2b01      	cmp	r3, #1
 800cfa6:	d90a      	bls.n	800cfbe <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	2282      	movs	r2, #130	@ 0x82
 800cfac:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f003 fd1f 	bl	80109f8 <SDMMC_CmdReadMultiBlock>
 800cfba:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800cfbc:	e009      	b.n	800cfd2 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	2281      	movs	r2, #129	@ 0x81
 800cfc2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f003 fcf2 	bl	80109b4 <SDMMC_CmdReadSingleBlock>
 800cfd0:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800cfd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d012      	beq.n	800cffe <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	4a0d      	ldr	r2, [pc, #52]	@ (800d014 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800cfde:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cfe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfe6:	431a      	orrs	r2, r3
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	2201      	movs	r2, #1
 800cff0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	2200      	movs	r2, #0
 800cff8:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800cffa:	2301      	movs	r3, #1
 800cffc:	e002      	b.n	800d004 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800cffe:	2300      	movs	r3, #0
 800d000:	e000      	b.n	800d004 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800d002:	2302      	movs	r3, #2
  }
}
 800d004:	4618      	mov	r0, r3
 800d006:	3730      	adds	r7, #48	@ 0x30
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}
 800d00c:	0800d603 	.word	0x0800d603
 800d010:	0800d675 	.word	0x0800d675
 800d014:	004005ff 	.word	0x004005ff

0800d018 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b08c      	sub	sp, #48	@ 0x30
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	60f8      	str	r0, [r7, #12]
 800d020:	60b9      	str	r1, [r7, #8]
 800d022:	607a      	str	r2, [r7, #4]
 800d024:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d107      	bne.n	800d040 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d034:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800d03c:	2301      	movs	r3, #1
 800d03e:	e0c6      	b.n	800d1ce <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d046:	b2db      	uxtb	r3, r3
 800d048:	2b01      	cmp	r3, #1
 800d04a:	f040 80bf 	bne.w	800d1cc <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	2200      	movs	r2, #0
 800d052:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d054:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	441a      	add	r2, r3
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d05e:	429a      	cmp	r2, r3
 800d060:	d907      	bls.n	800d072 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d066:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800d06e:	2301      	movs	r3, #1
 800d070:	e0ad      	b.n	800d1ce <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	2203      	movs	r2, #3
 800d076:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	2200      	movs	r2, #0
 800d080:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	f042 021a 	orr.w	r2, r2, #26
 800d090:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d096:	4a50      	ldr	r2, [pc, #320]	@ (800d1d8 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800d098:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d09e:	4a4f      	ldr	r2, [pc, #316]	@ (800d1dc <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800d0a0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0ae:	2b01      	cmp	r3, #1
 800d0b0:	d002      	beq.n	800d0b8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800d0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0b4:	025b      	lsls	r3, r3, #9
 800d0b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	2b01      	cmp	r3, #1
 800d0bc:	d90a      	bls.n	800d0d4 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	22a0      	movs	r2, #160	@ 0xa0
 800d0c2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f003 fcd8 	bl	8010a80 <SDMMC_CmdWriteMultiBlock>
 800d0d0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800d0d2:	e009      	b.n	800d0e8 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2290      	movs	r2, #144	@ 0x90
 800d0d8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f003 fcab 	bl	8010a3c <SDMMC_CmdWriteSingleBlock>
 800d0e6:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d0e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d012      	beq.n	800d114 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	4a3b      	ldr	r2, [pc, #236]	@ (800d1e0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d0f4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d0fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0fc:	431a      	orrs	r2, r3
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	2201      	movs	r2, #1
 800d106:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	2200      	movs	r2, #0
 800d10e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d110:	2301      	movs	r3, #1
 800d112:	e05c      	b.n	800d1ce <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	f042 0208 	orr.w	r2, r2, #8
 800d122:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d128:	2240      	movs	r2, #64	@ 0x40
 800d12a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d13c:	689a      	ldr	r2, [r3, #8]
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	430a      	orrs	r2, r1
 800d146:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d14c:	68b9      	ldr	r1, [r7, #8]
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	3380      	adds	r3, #128	@ 0x80
 800d154:	461a      	mov	r2, r3
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	025b      	lsls	r3, r3, #9
 800d15a:	089b      	lsrs	r3, r3, #2
 800d15c:	f7f9 f922 	bl	80063a4 <HAL_DMA_Start_IT>
 800d160:	4603      	mov	r3, r0
 800d162:	2b00      	cmp	r3, #0
 800d164:	d01a      	beq.n	800d19c <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f022 021a 	bic.w	r2, r2, #26
 800d174:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	4a19      	ldr	r2, [pc, #100]	@ (800d1e0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d17c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d182:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	2201      	movs	r2, #1
 800d18e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	2200      	movs	r2, #0
 800d196:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d198:	2301      	movs	r3, #1
 800d19a:	e018      	b.n	800d1ce <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d19c:	f04f 33ff 	mov.w	r3, #4294967295
 800d1a0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	025b      	lsls	r3, r3, #9
 800d1a6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d1a8:	2390      	movs	r3, #144	@ 0x90
 800d1aa:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	f107 0210 	add.w	r2, r7, #16
 800d1c0:	4611      	mov	r1, r2
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f003 fba8 	bl	8010918 <SDMMC_ConfigData>

      return HAL_OK;
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	e000      	b.n	800d1ce <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800d1cc:	2302      	movs	r3, #2
  }
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3730      	adds	r7, #48	@ 0x30
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}
 800d1d6:	bf00      	nop
 800d1d8:	0800d5d9 	.word	0x0800d5d9
 800d1dc:	0800d675 	.word	0x0800d675
 800d1e0:	004005ff 	.word	0x004005ff

0800d1e4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b083      	sub	sp, #12
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d1ec:	bf00      	nop
 800d1ee:	370c      	adds	r7, #12
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f6:	4770      	bx	lr

0800d1f8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d1f8:	b480      	push	{r7}
 800d1fa:	b083      	sub	sp, #12
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
 800d200:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d206:	0f9b      	lsrs	r3, r3, #30
 800d208:	b2da      	uxtb	r2, r3
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d212:	0e9b      	lsrs	r3, r3, #26
 800d214:	b2db      	uxtb	r3, r3
 800d216:	f003 030f 	and.w	r3, r3, #15
 800d21a:	b2da      	uxtb	r2, r3
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d224:	0e1b      	lsrs	r3, r3, #24
 800d226:	b2db      	uxtb	r3, r3
 800d228:	f003 0303 	and.w	r3, r3, #3
 800d22c:	b2da      	uxtb	r2, r3
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d236:	0c1b      	lsrs	r3, r3, #16
 800d238:	b2da      	uxtb	r2, r3
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d242:	0a1b      	lsrs	r3, r3, #8
 800d244:	b2da      	uxtb	r2, r3
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d24e:	b2da      	uxtb	r2, r3
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d258:	0d1b      	lsrs	r3, r3, #20
 800d25a:	b29a      	uxth	r2, r3
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d264:	0c1b      	lsrs	r3, r3, #16
 800d266:	b2db      	uxtb	r3, r3
 800d268:	f003 030f 	and.w	r3, r3, #15
 800d26c:	b2da      	uxtb	r2, r3
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d276:	0bdb      	lsrs	r3, r3, #15
 800d278:	b2db      	uxtb	r3, r3
 800d27a:	f003 0301 	and.w	r3, r3, #1
 800d27e:	b2da      	uxtb	r2, r3
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d288:	0b9b      	lsrs	r3, r3, #14
 800d28a:	b2db      	uxtb	r3, r3
 800d28c:	f003 0301 	and.w	r3, r3, #1
 800d290:	b2da      	uxtb	r2, r3
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d29a:	0b5b      	lsrs	r3, r3, #13
 800d29c:	b2db      	uxtb	r3, r3
 800d29e:	f003 0301 	and.w	r3, r3, #1
 800d2a2:	b2da      	uxtb	r2, r3
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d2ac:	0b1b      	lsrs	r3, r3, #12
 800d2ae:	b2db      	uxtb	r3, r3
 800d2b0:	f003 0301 	and.w	r3, r3, #1
 800d2b4:	b2da      	uxtb	r2, r3
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d163      	bne.n	800d390 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d2cc:	009a      	lsls	r2, r3, #2
 800d2ce:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800d2d2:	4013      	ands	r3, r2
 800d2d4:	687a      	ldr	r2, [r7, #4]
 800d2d6:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800d2d8:	0f92      	lsrs	r2, r2, #30
 800d2da:	431a      	orrs	r2, r3
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2e4:	0edb      	lsrs	r3, r3, #27
 800d2e6:	b2db      	uxtb	r3, r3
 800d2e8:	f003 0307 	and.w	r3, r3, #7
 800d2ec:	b2da      	uxtb	r2, r3
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2f6:	0e1b      	lsrs	r3, r3, #24
 800d2f8:	b2db      	uxtb	r3, r3
 800d2fa:	f003 0307 	and.w	r3, r3, #7
 800d2fe:	b2da      	uxtb	r2, r3
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d308:	0d5b      	lsrs	r3, r3, #21
 800d30a:	b2db      	uxtb	r3, r3
 800d30c:	f003 0307 	and.w	r3, r3, #7
 800d310:	b2da      	uxtb	r2, r3
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d31a:	0c9b      	lsrs	r3, r3, #18
 800d31c:	b2db      	uxtb	r3, r3
 800d31e:	f003 0307 	and.w	r3, r3, #7
 800d322:	b2da      	uxtb	r2, r3
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d32c:	0bdb      	lsrs	r3, r3, #15
 800d32e:	b2db      	uxtb	r3, r3
 800d330:	f003 0307 	and.w	r3, r3, #7
 800d334:	b2da      	uxtb	r2, r3
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	691b      	ldr	r3, [r3, #16]
 800d33e:	1c5a      	adds	r2, r3, #1
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	7e1b      	ldrb	r3, [r3, #24]
 800d348:	b2db      	uxtb	r3, r3
 800d34a:	f003 0307 	and.w	r3, r3, #7
 800d34e:	3302      	adds	r3, #2
 800d350:	2201      	movs	r2, #1
 800d352:	fa02 f303 	lsl.w	r3, r2, r3
 800d356:	687a      	ldr	r2, [r7, #4]
 800d358:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800d35a:	fb03 f202 	mul.w	r2, r3, r2
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	7a1b      	ldrb	r3, [r3, #8]
 800d366:	b2db      	uxtb	r3, r3
 800d368:	f003 030f 	and.w	r3, r3, #15
 800d36c:	2201      	movs	r2, #1
 800d36e:	409a      	lsls	r2, r3
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d378:	687a      	ldr	r2, [r7, #4]
 800d37a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800d37c:	0a52      	lsrs	r2, r2, #9
 800d37e:	fb03 f202 	mul.w	r2, r3, r2
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d38c:	661a      	str	r2, [r3, #96]	@ 0x60
 800d38e:	e031      	b.n	800d3f4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d394:	2b01      	cmp	r3, #1
 800d396:	d11d      	bne.n	800d3d4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d39c:	041b      	lsls	r3, r3, #16
 800d39e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3a6:	0c1b      	lsrs	r3, r3, #16
 800d3a8:	431a      	orrs	r2, r3
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	691b      	ldr	r3, [r3, #16]
 800d3b2:	3301      	adds	r3, #1
 800d3b4:	029a      	lsls	r2, r3, #10
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d3c8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	661a      	str	r2, [r3, #96]	@ 0x60
 800d3d2:	e00f      	b.n	800d3f4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	4a58      	ldr	r2, [pc, #352]	@ (800d53c <HAL_SD_GetCardCSD+0x344>)
 800d3da:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3e0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	e09d      	b.n	800d530 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3f8:	0b9b      	lsrs	r3, r3, #14
 800d3fa:	b2db      	uxtb	r3, r3
 800d3fc:	f003 0301 	and.w	r3, r3, #1
 800d400:	b2da      	uxtb	r2, r3
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d40a:	09db      	lsrs	r3, r3, #7
 800d40c:	b2db      	uxtb	r3, r3
 800d40e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d412:	b2da      	uxtb	r2, r3
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d41c:	b2db      	uxtb	r3, r3
 800d41e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d422:	b2da      	uxtb	r2, r3
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d42c:	0fdb      	lsrs	r3, r3, #31
 800d42e:	b2da      	uxtb	r2, r3
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d438:	0f5b      	lsrs	r3, r3, #29
 800d43a:	b2db      	uxtb	r3, r3
 800d43c:	f003 0303 	and.w	r3, r3, #3
 800d440:	b2da      	uxtb	r2, r3
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d44a:	0e9b      	lsrs	r3, r3, #26
 800d44c:	b2db      	uxtb	r3, r3
 800d44e:	f003 0307 	and.w	r3, r3, #7
 800d452:	b2da      	uxtb	r2, r3
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d45c:	0d9b      	lsrs	r3, r3, #22
 800d45e:	b2db      	uxtb	r3, r3
 800d460:	f003 030f 	and.w	r3, r3, #15
 800d464:	b2da      	uxtb	r2, r3
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d46e:	0d5b      	lsrs	r3, r3, #21
 800d470:	b2db      	uxtb	r3, r3
 800d472:	f003 0301 	and.w	r3, r3, #1
 800d476:	b2da      	uxtb	r2, r3
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	2200      	movs	r2, #0
 800d482:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d48a:	0c1b      	lsrs	r3, r3, #16
 800d48c:	b2db      	uxtb	r3, r3
 800d48e:	f003 0301 	and.w	r3, r3, #1
 800d492:	b2da      	uxtb	r2, r3
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d49e:	0bdb      	lsrs	r3, r3, #15
 800d4a0:	b2db      	uxtb	r3, r3
 800d4a2:	f003 0301 	and.w	r3, r3, #1
 800d4a6:	b2da      	uxtb	r2, r3
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d4b2:	0b9b      	lsrs	r3, r3, #14
 800d4b4:	b2db      	uxtb	r3, r3
 800d4b6:	f003 0301 	and.w	r3, r3, #1
 800d4ba:	b2da      	uxtb	r2, r3
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d4c6:	0b5b      	lsrs	r3, r3, #13
 800d4c8:	b2db      	uxtb	r3, r3
 800d4ca:	f003 0301 	and.w	r3, r3, #1
 800d4ce:	b2da      	uxtb	r2, r3
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d4da:	0b1b      	lsrs	r3, r3, #12
 800d4dc:	b2db      	uxtb	r3, r3
 800d4de:	f003 0301 	and.w	r3, r3, #1
 800d4e2:	b2da      	uxtb	r2, r3
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d4ee:	0a9b      	lsrs	r3, r3, #10
 800d4f0:	b2db      	uxtb	r3, r3
 800d4f2:	f003 0303 	and.w	r3, r3, #3
 800d4f6:	b2da      	uxtb	r2, r3
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d502:	0a1b      	lsrs	r3, r3, #8
 800d504:	b2db      	uxtb	r3, r3
 800d506:	f003 0303 	and.w	r3, r3, #3
 800d50a:	b2da      	uxtb	r2, r3
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d516:	085b      	lsrs	r3, r3, #1
 800d518:	b2db      	uxtb	r3, r3
 800d51a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d51e:	b2da      	uxtb	r2, r3
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	2201      	movs	r2, #1
 800d52a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800d52e:	2300      	movs	r3, #0
}
 800d530:	4618      	mov	r0, r3
 800d532:	370c      	adds	r7, #12
 800d534:	46bd      	mov	sp, r7
 800d536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53a:	4770      	bx	lr
 800d53c:	004005ff 	.word	0x004005ff

0800d540 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d540:	b480      	push	{r7}
 800d542:	b083      	sub	sp, #12
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
 800d548:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d58a:	2300      	movs	r3, #0
}
 800d58c:	4618      	mov	r0, r3
 800d58e:	370c      	adds	r7, #12
 800d590:	46bd      	mov	sp, r7
 800d592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d596:	4770      	bx	lr

0800d598 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b086      	sub	sp, #24
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d5a4:	f107 030c 	add.w	r3, r7, #12
 800d5a8:	4619      	mov	r1, r3
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f000 fa10 	bl	800d9d0 <SD_SendStatus>
 800d5b0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d005      	beq.n	800d5c4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d5bc:	697b      	ldr	r3, [r7, #20]
 800d5be:	431a      	orrs	r2, r3
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	0a5b      	lsrs	r3, r3, #9
 800d5c8:	f003 030f 	and.w	r3, r3, #15
 800d5cc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d5ce:	693b      	ldr	r3, [r7, #16]
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3718      	adds	r7, #24
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}

0800d5d8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d5d8:	b480      	push	{r7}
 800d5da:	b085      	sub	sp, #20
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5e4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d5f4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800d5f6:	bf00      	nop
 800d5f8:	3714      	adds	r7, #20
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d600:	4770      	bx	lr

0800d602 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d602:	b580      	push	{r7, lr}
 800d604:	b084      	sub	sp, #16
 800d606:	af00      	add	r7, sp, #0
 800d608:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d60e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d614:	2b82      	cmp	r3, #130	@ 0x82
 800d616:	d111      	bne.n	800d63c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	4618      	mov	r0, r3
 800d61e:	f003 fa51 	bl	8010ac4 <SDMMC_CmdStopTransfer>
 800d622:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d624:	68bb      	ldr	r3, [r7, #8]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d008      	beq.n	800d63c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	431a      	orrs	r2, r3
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800d636:	68f8      	ldr	r0, [r7, #12]
 800d638:	f7ff fdd4 	bl	800d1e4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	f022 0208 	bic.w	r2, r2, #8
 800d64a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	f240 523a 	movw	r2, #1338	@ 0x53a
 800d654:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	2201      	movs	r2, #1
 800d65a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	2200      	movs	r2, #0
 800d662:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800d664:	68f8      	ldr	r0, [r7, #12]
 800d666:	f004 ffa3 	bl	80125b0 <HAL_SD_RxCpltCallback>
#endif
}
 800d66a:	bf00      	nop
 800d66c:	3710      	adds	r7, #16
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
	...

0800d674 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b086      	sub	sp, #24
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d680:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f7f9 f90a 	bl	800689c <HAL_DMA_GetError>
 800d688:	4603      	mov	r3, r0
 800d68a:	2b02      	cmp	r3, #2
 800d68c:	d03e      	beq.n	800d70c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d694:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d69a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d69c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800d69e:	693b      	ldr	r3, [r7, #16]
 800d6a0:	2b01      	cmp	r3, #1
 800d6a2:	d002      	beq.n	800d6aa <SD_DMAError+0x36>
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	2b01      	cmp	r3, #1
 800d6a8:	d12d      	bne.n	800d706 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	4a19      	ldr	r2, [pc, #100]	@ (800d714 <SD_DMAError+0xa0>)
 800d6b0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800d6c0:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d6c2:	697b      	ldr	r3, [r7, #20]
 800d6c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6c6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d6ca:	697b      	ldr	r3, [r7, #20]
 800d6cc:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800d6ce:	6978      	ldr	r0, [r7, #20]
 800d6d0:	f7ff ff62 	bl	800d598 <HAL_SD_GetCardState>
 800d6d4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	2b06      	cmp	r3, #6
 800d6da:	d002      	beq.n	800d6e2 <SD_DMAError+0x6e>
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	2b05      	cmp	r3, #5
 800d6e0:	d10a      	bne.n	800d6f8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f003 f9ec 	bl	8010ac4 <SDMMC_CmdStopTransfer>
 800d6ec:	4602      	mov	r2, r0
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6f2:	431a      	orrs	r2, r3
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	2201      	movs	r2, #1
 800d6fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d700:	697b      	ldr	r3, [r7, #20]
 800d702:	2200      	movs	r2, #0
 800d704:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800d706:	6978      	ldr	r0, [r7, #20]
 800d708:	f7ff fd6c 	bl	800d1e4 <HAL_SD_ErrorCallback>
#endif
  }
}
 800d70c:	bf00      	nop
 800d70e:	3718      	adds	r7, #24
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}
 800d714:	004005ff 	.word	0x004005ff

0800d718 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d718:	b5b0      	push	{r4, r5, r7, lr}
 800d71a:	b094      	sub	sp, #80	@ 0x50
 800d71c:	af04      	add	r7, sp, #16
 800d71e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d720:	2301      	movs	r3, #1
 800d722:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	4618      	mov	r0, r3
 800d72a:	f003 f89d 	bl	8010868 <SDMMC_GetPowerState>
 800d72e:	4603      	mov	r3, r0
 800d730:	2b00      	cmp	r3, #0
 800d732:	d102      	bne.n	800d73a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d734:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800d738:	e0b8      	b.n	800d8ac <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d73e:	2b03      	cmp	r3, #3
 800d740:	d02f      	beq.n	800d7a2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	4618      	mov	r0, r3
 800d748:	f003 fa84 	bl	8010c54 <SDMMC_CmdSendCID>
 800d74c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d74e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d750:	2b00      	cmp	r3, #0
 800d752:	d001      	beq.n	800d758 <SD_InitCard+0x40>
    {
      return errorstate;
 800d754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d756:	e0a9      	b.n	800d8ac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	2100      	movs	r1, #0
 800d75e:	4618      	mov	r0, r3
 800d760:	f003 f8c7 	bl	80108f2 <SDMMC_GetResponse>
 800d764:	4602      	mov	r2, r0
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	2104      	movs	r1, #4
 800d770:	4618      	mov	r0, r3
 800d772:	f003 f8be 	bl	80108f2 <SDMMC_GetResponse>
 800d776:	4602      	mov	r2, r0
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	2108      	movs	r1, #8
 800d782:	4618      	mov	r0, r3
 800d784:	f003 f8b5 	bl	80108f2 <SDMMC_GetResponse>
 800d788:	4602      	mov	r2, r0
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	210c      	movs	r1, #12
 800d794:	4618      	mov	r0, r3
 800d796:	f003 f8ac 	bl	80108f2 <SDMMC_GetResponse>
 800d79a:	4602      	mov	r2, r0
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7a6:	2b03      	cmp	r3, #3
 800d7a8:	d00d      	beq.n	800d7c6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	f107 020e 	add.w	r2, r7, #14
 800d7b2:	4611      	mov	r1, r2
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f003 fa8a 	bl	8010cce <SDMMC_CmdSetRelAdd>
 800d7ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d7bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d001      	beq.n	800d7c6 <SD_InitCard+0xae>
    {
      return errorstate;
 800d7c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7c4:	e072      	b.n	800d8ac <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7ca:	2b03      	cmp	r3, #3
 800d7cc:	d036      	beq.n	800d83c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d7ce:	89fb      	ldrh	r3, [r7, #14]
 800d7d0:	461a      	mov	r2, r3
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681a      	ldr	r2, [r3, #0]
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d7de:	041b      	lsls	r3, r3, #16
 800d7e0:	4619      	mov	r1, r3
 800d7e2:	4610      	mov	r0, r2
 800d7e4:	f003 fa54 	bl	8010c90 <SDMMC_CmdSendCSD>
 800d7e8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d7ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d001      	beq.n	800d7f4 <SD_InitCard+0xdc>
    {
      return errorstate;
 800d7f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7f2:	e05b      	b.n	800d8ac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	2100      	movs	r1, #0
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f003 f879 	bl	80108f2 <SDMMC_GetResponse>
 800d800:	4602      	mov	r2, r0
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	2104      	movs	r1, #4
 800d80c:	4618      	mov	r0, r3
 800d80e:	f003 f870 	bl	80108f2 <SDMMC_GetResponse>
 800d812:	4602      	mov	r2, r0
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	2108      	movs	r1, #8
 800d81e:	4618      	mov	r0, r3
 800d820:	f003 f867 	bl	80108f2 <SDMMC_GetResponse>
 800d824:	4602      	mov	r2, r0
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	210c      	movs	r1, #12
 800d830:	4618      	mov	r0, r3
 800d832:	f003 f85e 	bl	80108f2 <SDMMC_GetResponse>
 800d836:	4602      	mov	r2, r0
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	2104      	movs	r1, #4
 800d842:	4618      	mov	r0, r3
 800d844:	f003 f855 	bl	80108f2 <SDMMC_GetResponse>
 800d848:	4603      	mov	r3, r0
 800d84a:	0d1a      	lsrs	r2, r3, #20
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d850:	f107 0310 	add.w	r3, r7, #16
 800d854:	4619      	mov	r1, r3
 800d856:	6878      	ldr	r0, [r7, #4]
 800d858:	f7ff fcce 	bl	800d1f8 <HAL_SD_GetCardCSD>
 800d85c:	4603      	mov	r3, r0
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d002      	beq.n	800d868 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d862:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d866:	e021      	b.n	800d8ac <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	6819      	ldr	r1, [r3, #0]
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d870:	041b      	lsls	r3, r3, #16
 800d872:	2200      	movs	r2, #0
 800d874:	461c      	mov	r4, r3
 800d876:	4615      	mov	r5, r2
 800d878:	4622      	mov	r2, r4
 800d87a:	462b      	mov	r3, r5
 800d87c:	4608      	mov	r0, r1
 800d87e:	f003 f943 	bl	8010b08 <SDMMC_CmdSelDesel>
 800d882:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d886:	2b00      	cmp	r3, #0
 800d888:	d001      	beq.n	800d88e <SD_InitCard+0x176>
  {
    return errorstate;
 800d88a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d88c:	e00e      	b.n	800d8ac <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681d      	ldr	r5, [r3, #0]
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	466c      	mov	r4, sp
 800d896:	f103 0210 	add.w	r2, r3, #16
 800d89a:	ca07      	ldmia	r2, {r0, r1, r2}
 800d89c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d8a0:	3304      	adds	r3, #4
 800d8a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d8a4:	4628      	mov	r0, r5
 800d8a6:	f002 ff87 	bl	80107b8 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d8aa:	2300      	movs	r3, #0
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3740      	adds	r7, #64	@ 0x40
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bdb0      	pop	{r4, r5, r7, pc}

0800d8b4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b086      	sub	sp, #24
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	617b      	str	r3, [r7, #20]
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	f003 f93e 	bl	8010b4e <SDMMC_CmdGoIdleState>
 800d8d2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d001      	beq.n	800d8de <SD_PowerON+0x2a>
  {
    return errorstate;
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	e072      	b.n	800d9c4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f003 f951 	bl	8010b8a <SDMMC_CmdOperCond>
 800d8e8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d00d      	beq.n	800d90c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	f003 f927 	bl	8010b4e <SDMMC_CmdGoIdleState>
 800d900:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d004      	beq.n	800d912 <SD_PowerON+0x5e>
    {
      return errorstate;
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	e05b      	b.n	800d9c4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2201      	movs	r2, #1
 800d910:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d916:	2b01      	cmp	r3, #1
 800d918:	d137      	bne.n	800d98a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	2100      	movs	r1, #0
 800d920:	4618      	mov	r0, r3
 800d922:	f003 f951 	bl	8010bc8 <SDMMC_CmdAppCommand>
 800d926:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d02d      	beq.n	800d98a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d92e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d932:	e047      	b.n	800d9c4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	2100      	movs	r1, #0
 800d93a:	4618      	mov	r0, r3
 800d93c:	f003 f944 	bl	8010bc8 <SDMMC_CmdAppCommand>
 800d940:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d001      	beq.n	800d94c <SD_PowerON+0x98>
    {
      return errorstate;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	e03b      	b.n	800d9c4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	491e      	ldr	r1, [pc, #120]	@ (800d9cc <SD_PowerON+0x118>)
 800d952:	4618      	mov	r0, r3
 800d954:	f003 f95a 	bl	8010c0c <SDMMC_CmdAppOperCommand>
 800d958:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d002      	beq.n	800d966 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d960:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d964:	e02e      	b.n	800d9c4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	2100      	movs	r1, #0
 800d96c:	4618      	mov	r0, r3
 800d96e:	f002 ffc0 	bl	80108f2 <SDMMC_GetResponse>
 800d972:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d974:	697b      	ldr	r3, [r7, #20]
 800d976:	0fdb      	lsrs	r3, r3, #31
 800d978:	2b01      	cmp	r3, #1
 800d97a:	d101      	bne.n	800d980 <SD_PowerON+0xcc>
 800d97c:	2301      	movs	r3, #1
 800d97e:	e000      	b.n	800d982 <SD_PowerON+0xce>
 800d980:	2300      	movs	r3, #0
 800d982:	613b      	str	r3, [r7, #16]

    count++;
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	3301      	adds	r3, #1
 800d988:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d990:	4293      	cmp	r3, r2
 800d992:	d802      	bhi.n	800d99a <SD_PowerON+0xe6>
 800d994:	693b      	ldr	r3, [r7, #16]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d0cc      	beq.n	800d934 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d9a0:	4293      	cmp	r3, r2
 800d9a2:	d902      	bls.n	800d9aa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d9a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d9a8:	e00c      	b.n	800d9c4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800d9aa:	697b      	ldr	r3, [r7, #20]
 800d9ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d003      	beq.n	800d9bc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	645a      	str	r2, [r3, #68]	@ 0x44
 800d9ba:	e002      	b.n	800d9c2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2200      	movs	r2, #0
 800d9c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800d9c2:	2300      	movs	r3, #0
}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	3718      	adds	r7, #24
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bd80      	pop	{r7, pc}
 800d9cc:	c1100000 	.word	0xc1100000

0800d9d0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b084      	sub	sp, #16
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
 800d9d8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d102      	bne.n	800d9e6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d9e0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d9e4:	e018      	b.n	800da18 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681a      	ldr	r2, [r3, #0]
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d9ee:	041b      	lsls	r3, r3, #16
 800d9f0:	4619      	mov	r1, r3
 800d9f2:	4610      	mov	r0, r2
 800d9f4:	f003 f98c 	bl	8010d10 <SDMMC_CmdSendStatus>
 800d9f8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d001      	beq.n	800da04 <SD_SendStatus+0x34>
  {
    return errorstate;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	e009      	b.n	800da18 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	2100      	movs	r1, #0
 800da0a:	4618      	mov	r0, r3
 800da0c:	f002 ff71 	bl	80108f2 <SDMMC_GetResponse>
 800da10:	4602      	mov	r2, r0
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800da16:	2300      	movs	r3, #0
}
 800da18:	4618      	mov	r0, r3
 800da1a:	3710      	adds	r7, #16
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}

0800da20 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b082      	sub	sp, #8
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
 800da28:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d101      	bne.n	800da34 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800da30:	2301      	movs	r3, #1
 800da32:	e025      	b.n	800da80 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800da3a:	b2db      	uxtb	r3, r3
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d106      	bne.n	800da4e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2200      	movs	r2, #0
 800da44:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f7f6 fef3 	bl	8004834 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2202      	movs	r2, #2
 800da52:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681a      	ldr	r2, [r3, #0]
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	3304      	adds	r3, #4
 800da5e:	4619      	mov	r1, r3
 800da60:	4610      	mov	r0, r2
 800da62:	f002 fde3 	bl	801062c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6818      	ldr	r0, [r3, #0]
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	685b      	ldr	r3, [r3, #4]
 800da6e:	461a      	mov	r2, r3
 800da70:	6839      	ldr	r1, [r7, #0]
 800da72:	f002 fe37 	bl	80106e4 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2201      	movs	r2, #1
 800da7a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800da7e:	2300      	movs	r3, #0
}
 800da80:	4618      	mov	r0, r3
 800da82:	3708      	adds	r7, #8
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}

0800da88 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b084      	sub	sp, #16
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d101      	bne.n	800da9a <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800da96:	2301      	movs	r3, #1
 800da98:	e04c      	b.n	800db34 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800daa0:	b2db      	uxtb	r3, r3
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d106      	bne.n	800dab4 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2200      	movs	r2, #0
 800daaa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f7f6 fb46 	bl	8004140 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2202      	movs	r2, #2
 800dab8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	681a      	ldr	r2, [r3, #0]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	f022 0203 	bic.w	r2, r2, #3
 800daca:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800dad4:	68fa      	ldr	r2, [r7, #12]
 800dad6:	4b19      	ldr	r3, [pc, #100]	@ (800db3c <HAL_SPDIFRX_Init+0xb4>)
 800dad8:	4013      	ands	r3, r2
 800dada:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800dae4:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800daea:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800daf0:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800daf6:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800dafc:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800db02:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800db08:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800db0e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800db14:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800db16:	68fa      	ldr	r2, [r7, #12]
 800db18:	4313      	orrs	r3, r2
 800db1a:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	68fa      	ldr	r2, [r7, #12]
 800db22:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2200      	movs	r2, #0
 800db28:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2201      	movs	r2, #1
 800db2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800db32:	2300      	movs	r3, #0
}
 800db34:	4618      	mov	r0, r3
 800db36:	3710      	adds	r7, #16
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}
 800db3c:	fff88407 	.word	0xfff88407

0800db40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b084      	sub	sp, #16
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d101      	bne.n	800db52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800db4e:	2301      	movs	r3, #1
 800db50:	e09d      	b.n	800dc8e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db56:	2b00      	cmp	r3, #0
 800db58:	d108      	bne.n	800db6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	685b      	ldr	r3, [r3, #4]
 800db5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800db62:	d009      	beq.n	800db78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2200      	movs	r2, #0
 800db68:	61da      	str	r2, [r3, #28]
 800db6a:	e005      	b.n	800db78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2200      	movs	r2, #0
 800db70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2200      	movs	r2, #0
 800db76:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2200      	movs	r2, #0
 800db7c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800db84:	b2db      	uxtb	r3, r3
 800db86:	2b00      	cmp	r3, #0
 800db88:	d106      	bne.n	800db98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2200      	movs	r2, #0
 800db8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f7f6 fb38 	bl	8004208 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2202      	movs	r2, #2
 800db9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	681a      	ldr	r2, [r3, #0]
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dbae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	68db      	ldr	r3, [r3, #12]
 800dbb4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800dbb8:	d902      	bls.n	800dbc0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	60fb      	str	r3, [r7, #12]
 800dbbe:	e002      	b.n	800dbc6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800dbc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dbc4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	68db      	ldr	r3, [r3, #12]
 800dbca:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800dbce:	d007      	beq.n	800dbe0 <HAL_SPI_Init+0xa0>
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	68db      	ldr	r3, [r3, #12]
 800dbd4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800dbd8:	d002      	beq.n	800dbe0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2200      	movs	r2, #0
 800dbde:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	685b      	ldr	r3, [r3, #4]
 800dbe4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	689b      	ldr	r3, [r3, #8]
 800dbec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800dbf0:	431a      	orrs	r2, r3
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	691b      	ldr	r3, [r3, #16]
 800dbf6:	f003 0302 	and.w	r3, r3, #2
 800dbfa:	431a      	orrs	r2, r3
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	695b      	ldr	r3, [r3, #20]
 800dc00:	f003 0301 	and.w	r3, r3, #1
 800dc04:	431a      	orrs	r2, r3
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	699b      	ldr	r3, [r3, #24]
 800dc0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800dc0e:	431a      	orrs	r2, r3
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	69db      	ldr	r3, [r3, #28]
 800dc14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dc18:	431a      	orrs	r2, r3
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6a1b      	ldr	r3, [r3, #32]
 800dc1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc22:	ea42 0103 	orr.w	r1, r2, r3
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc2a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	430a      	orrs	r2, r1
 800dc34:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	699b      	ldr	r3, [r3, #24]
 800dc3a:	0c1b      	lsrs	r3, r3, #16
 800dc3c:	f003 0204 	and.w	r2, r3, #4
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc44:	f003 0310 	and.w	r3, r3, #16
 800dc48:	431a      	orrs	r2, r3
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc4e:	f003 0308 	and.w	r3, r3, #8
 800dc52:	431a      	orrs	r2, r3
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	68db      	ldr	r3, [r3, #12]
 800dc58:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800dc5c:	ea42 0103 	orr.w	r1, r2, r3
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	430a      	orrs	r2, r1
 800dc6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	69da      	ldr	r2, [r3, #28]
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800dc7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	2200      	movs	r2, #0
 800dc82:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2201      	movs	r2, #1
 800dc88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800dc8c:	2300      	movs	r3, #0
}
 800dc8e:	4618      	mov	r0, r3
 800dc90:	3710      	adds	r7, #16
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}

0800dc96 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dc96:	b580      	push	{r7, lr}
 800dc98:	b082      	sub	sp, #8
 800dc9a:	af00      	add	r7, sp, #0
 800dc9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d101      	bne.n	800dca8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dca4:	2301      	movs	r3, #1
 800dca6:	e049      	b.n	800dd3c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dcae:	b2db      	uxtb	r3, r3
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d106      	bne.n	800dcc2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f7f6 fb05 	bl	80042cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	2202      	movs	r2, #2
 800dcc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681a      	ldr	r2, [r3, #0]
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	3304      	adds	r3, #4
 800dcd2:	4619      	mov	r1, r3
 800dcd4:	4610      	mov	r0, r2
 800dcd6:	f000 fc11 	bl	800e4fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2201      	movs	r2, #1
 800dcde:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2201      	movs	r2, #1
 800dce6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2201      	movs	r2, #1
 800dcee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2201      	movs	r2, #1
 800dcf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	2201      	movs	r2, #1
 800dcfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	2201      	movs	r2, #1
 800dd06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2201      	movs	r2, #1
 800dd0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	2201      	movs	r2, #1
 800dd16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2201      	movs	r2, #1
 800dd1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	2201      	movs	r2, #1
 800dd26:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2201      	movs	r2, #1
 800dd2e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2201      	movs	r2, #1
 800dd36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800dd3a:	2300      	movs	r3, #0
}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	3708      	adds	r7, #8
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}

0800dd44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dd44:	b480      	push	{r7}
 800dd46:	b085      	sub	sp, #20
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dd52:	b2db      	uxtb	r3, r3
 800dd54:	2b01      	cmp	r3, #1
 800dd56:	d001      	beq.n	800dd5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800dd58:	2301      	movs	r3, #1
 800dd5a:	e054      	b.n	800de06 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2202      	movs	r2, #2
 800dd60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	68da      	ldr	r2, [r3, #12]
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	f042 0201 	orr.w	r2, r2, #1
 800dd72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	4a26      	ldr	r2, [pc, #152]	@ (800de14 <HAL_TIM_Base_Start_IT+0xd0>)
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	d022      	beq.n	800ddc4 <HAL_TIM_Base_Start_IT+0x80>
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd86:	d01d      	beq.n	800ddc4 <HAL_TIM_Base_Start_IT+0x80>
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	4a22      	ldr	r2, [pc, #136]	@ (800de18 <HAL_TIM_Base_Start_IT+0xd4>)
 800dd8e:	4293      	cmp	r3, r2
 800dd90:	d018      	beq.n	800ddc4 <HAL_TIM_Base_Start_IT+0x80>
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	4a21      	ldr	r2, [pc, #132]	@ (800de1c <HAL_TIM_Base_Start_IT+0xd8>)
 800dd98:	4293      	cmp	r3, r2
 800dd9a:	d013      	beq.n	800ddc4 <HAL_TIM_Base_Start_IT+0x80>
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	4a1f      	ldr	r2, [pc, #124]	@ (800de20 <HAL_TIM_Base_Start_IT+0xdc>)
 800dda2:	4293      	cmp	r3, r2
 800dda4:	d00e      	beq.n	800ddc4 <HAL_TIM_Base_Start_IT+0x80>
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	4a1e      	ldr	r2, [pc, #120]	@ (800de24 <HAL_TIM_Base_Start_IT+0xe0>)
 800ddac:	4293      	cmp	r3, r2
 800ddae:	d009      	beq.n	800ddc4 <HAL_TIM_Base_Start_IT+0x80>
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	4a1c      	ldr	r2, [pc, #112]	@ (800de28 <HAL_TIM_Base_Start_IT+0xe4>)
 800ddb6:	4293      	cmp	r3, r2
 800ddb8:	d004      	beq.n	800ddc4 <HAL_TIM_Base_Start_IT+0x80>
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	4a1b      	ldr	r2, [pc, #108]	@ (800de2c <HAL_TIM_Base_Start_IT+0xe8>)
 800ddc0:	4293      	cmp	r3, r2
 800ddc2:	d115      	bne.n	800ddf0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	689a      	ldr	r2, [r3, #8]
 800ddca:	4b19      	ldr	r3, [pc, #100]	@ (800de30 <HAL_TIM_Base_Start_IT+0xec>)
 800ddcc:	4013      	ands	r3, r2
 800ddce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	2b06      	cmp	r3, #6
 800ddd4:	d015      	beq.n	800de02 <HAL_TIM_Base_Start_IT+0xbe>
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dddc:	d011      	beq.n	800de02 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	681a      	ldr	r2, [r3, #0]
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	f042 0201 	orr.w	r2, r2, #1
 800ddec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ddee:	e008      	b.n	800de02 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	681a      	ldr	r2, [r3, #0]
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	f042 0201 	orr.w	r2, r2, #1
 800ddfe:	601a      	str	r2, [r3, #0]
 800de00:	e000      	b.n	800de04 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800de02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800de04:	2300      	movs	r3, #0
}
 800de06:	4618      	mov	r0, r3
 800de08:	3714      	adds	r7, #20
 800de0a:	46bd      	mov	sp, r7
 800de0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de10:	4770      	bx	lr
 800de12:	bf00      	nop
 800de14:	40010000 	.word	0x40010000
 800de18:	40000400 	.word	0x40000400
 800de1c:	40000800 	.word	0x40000800
 800de20:	40000c00 	.word	0x40000c00
 800de24:	40010400 	.word	0x40010400
 800de28:	40014000 	.word	0x40014000
 800de2c:	40001800 	.word	0x40001800
 800de30:	00010007 	.word	0x00010007

0800de34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b082      	sub	sp, #8
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d101      	bne.n	800de46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800de42:	2301      	movs	r3, #1
 800de44:	e049      	b.n	800deda <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800de4c:	b2db      	uxtb	r3, r3
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d106      	bne.n	800de60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	2200      	movs	r2, #0
 800de56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800de5a:	6878      	ldr	r0, [r7, #4]
 800de5c:	f7f6 faa4 	bl	80043a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2202      	movs	r2, #2
 800de64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681a      	ldr	r2, [r3, #0]
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	3304      	adds	r3, #4
 800de70:	4619      	mov	r1, r3
 800de72:	4610      	mov	r0, r2
 800de74:	f000 fb42 	bl	800e4fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2201      	movs	r2, #1
 800de7c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	2201      	movs	r2, #1
 800de84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2201      	movs	r2, #1
 800de8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2201      	movs	r2, #1
 800de94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2201      	movs	r2, #1
 800de9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2201      	movs	r2, #1
 800dea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2201      	movs	r2, #1
 800deac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2201      	movs	r2, #1
 800deb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2201      	movs	r2, #1
 800debc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2201      	movs	r2, #1
 800dec4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2201      	movs	r2, #1
 800decc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	2201      	movs	r2, #1
 800ded4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ded8:	2300      	movs	r3, #0
}
 800deda:	4618      	mov	r0, r3
 800dedc:	3708      	adds	r7, #8
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}

0800dee2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dee2:	b580      	push	{r7, lr}
 800dee4:	b084      	sub	sp, #16
 800dee6:	af00      	add	r7, sp, #0
 800dee8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	68db      	ldr	r3, [r3, #12]
 800def0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	691b      	ldr	r3, [r3, #16]
 800def8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	f003 0302 	and.w	r3, r3, #2
 800df00:	2b00      	cmp	r3, #0
 800df02:	d020      	beq.n	800df46 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	f003 0302 	and.w	r3, r3, #2
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d01b      	beq.n	800df46 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	f06f 0202 	mvn.w	r2, #2
 800df16:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	2201      	movs	r2, #1
 800df1c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	699b      	ldr	r3, [r3, #24]
 800df24:	f003 0303 	and.w	r3, r3, #3
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d003      	beq.n	800df34 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f000 fac7 	bl	800e4c0 <HAL_TIM_IC_CaptureCallback>
 800df32:	e005      	b.n	800df40 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f000 fab9 	bl	800e4ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f000 faca 	bl	800e4d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2200      	movs	r2, #0
 800df44:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	f003 0304 	and.w	r3, r3, #4
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d020      	beq.n	800df92 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	f003 0304 	and.w	r3, r3, #4
 800df56:	2b00      	cmp	r3, #0
 800df58:	d01b      	beq.n	800df92 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	f06f 0204 	mvn.w	r2, #4
 800df62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2202      	movs	r2, #2
 800df68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	699b      	ldr	r3, [r3, #24]
 800df70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800df74:	2b00      	cmp	r3, #0
 800df76:	d003      	beq.n	800df80 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f000 faa1 	bl	800e4c0 <HAL_TIM_IC_CaptureCallback>
 800df7e:	e005      	b.n	800df8c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800df80:	6878      	ldr	r0, [r7, #4]
 800df82:	f000 fa93 	bl	800e4ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df86:	6878      	ldr	r0, [r7, #4]
 800df88:	f000 faa4 	bl	800e4d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2200      	movs	r2, #0
 800df90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	f003 0308 	and.w	r3, r3, #8
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d020      	beq.n	800dfde <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	f003 0308 	and.w	r3, r3, #8
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d01b      	beq.n	800dfde <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	f06f 0208 	mvn.w	r2, #8
 800dfae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2204      	movs	r2, #4
 800dfb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	69db      	ldr	r3, [r3, #28]
 800dfbc:	f003 0303 	and.w	r3, r3, #3
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d003      	beq.n	800dfcc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dfc4:	6878      	ldr	r0, [r7, #4]
 800dfc6:	f000 fa7b 	bl	800e4c0 <HAL_TIM_IC_CaptureCallback>
 800dfca:	e005      	b.n	800dfd8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dfcc:	6878      	ldr	r0, [r7, #4]
 800dfce:	f000 fa6d 	bl	800e4ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f000 fa7e 	bl	800e4d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	2200      	movs	r2, #0
 800dfdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	f003 0310 	and.w	r3, r3, #16
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d020      	beq.n	800e02a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	f003 0310 	and.w	r3, r3, #16
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d01b      	beq.n	800e02a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	f06f 0210 	mvn.w	r2, #16
 800dffa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2208      	movs	r2, #8
 800e000:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	69db      	ldr	r3, [r3, #28]
 800e008:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d003      	beq.n	800e018 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e010:	6878      	ldr	r0, [r7, #4]
 800e012:	f000 fa55 	bl	800e4c0 <HAL_TIM_IC_CaptureCallback>
 800e016:	e005      	b.n	800e024 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e018:	6878      	ldr	r0, [r7, #4]
 800e01a:	f000 fa47 	bl	800e4ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e01e:	6878      	ldr	r0, [r7, #4]
 800e020:	f000 fa58 	bl	800e4d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2200      	movs	r2, #0
 800e028:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e02a:	68bb      	ldr	r3, [r7, #8]
 800e02c:	f003 0301 	and.w	r3, r3, #1
 800e030:	2b00      	cmp	r3, #0
 800e032:	d00c      	beq.n	800e04e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	f003 0301 	and.w	r3, r3, #1
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d007      	beq.n	800e04e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	f06f 0201 	mvn.w	r2, #1
 800e046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e048:	6878      	ldr	r0, [r7, #4]
 800e04a:	f7f5 fb53 	bl	80036f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e054:	2b00      	cmp	r3, #0
 800e056:	d104      	bne.n	800e062 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d00c      	beq.n	800e07c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d007      	beq.n	800e07c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e076:	6878      	ldr	r0, [r7, #4]
 800e078:	f000 fef4 	bl	800ee64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e082:	2b00      	cmp	r3, #0
 800e084:	d00c      	beq.n	800e0a0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d007      	beq.n	800e0a0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f000 feec 	bl	800ee78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d00c      	beq.n	800e0c4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d007      	beq.n	800e0c4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e0bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f000 fa12 	bl	800e4e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	f003 0320 	and.w	r3, r3, #32
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d00c      	beq.n	800e0e8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	f003 0320 	and.w	r3, r3, #32
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d007      	beq.n	800e0e8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	f06f 0220 	mvn.w	r2, #32
 800e0e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f000 feb4 	bl	800ee50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e0e8:	bf00      	nop
 800e0ea:	3710      	adds	r7, #16
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}

0800e0f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b086      	sub	sp, #24
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	60f8      	str	r0, [r7, #12]
 800e0f8:	60b9      	str	r1, [r7, #8]
 800e0fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e106:	2b01      	cmp	r3, #1
 800e108:	d101      	bne.n	800e10e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e10a:	2302      	movs	r3, #2
 800e10c:	e0ff      	b.n	800e30e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	2201      	movs	r2, #1
 800e112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2b14      	cmp	r3, #20
 800e11a:	f200 80f0 	bhi.w	800e2fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e11e:	a201      	add	r2, pc, #4	@ (adr r2, 800e124 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e124:	0800e179 	.word	0x0800e179
 800e128:	0800e2ff 	.word	0x0800e2ff
 800e12c:	0800e2ff 	.word	0x0800e2ff
 800e130:	0800e2ff 	.word	0x0800e2ff
 800e134:	0800e1b9 	.word	0x0800e1b9
 800e138:	0800e2ff 	.word	0x0800e2ff
 800e13c:	0800e2ff 	.word	0x0800e2ff
 800e140:	0800e2ff 	.word	0x0800e2ff
 800e144:	0800e1fb 	.word	0x0800e1fb
 800e148:	0800e2ff 	.word	0x0800e2ff
 800e14c:	0800e2ff 	.word	0x0800e2ff
 800e150:	0800e2ff 	.word	0x0800e2ff
 800e154:	0800e23b 	.word	0x0800e23b
 800e158:	0800e2ff 	.word	0x0800e2ff
 800e15c:	0800e2ff 	.word	0x0800e2ff
 800e160:	0800e2ff 	.word	0x0800e2ff
 800e164:	0800e27d 	.word	0x0800e27d
 800e168:	0800e2ff 	.word	0x0800e2ff
 800e16c:	0800e2ff 	.word	0x0800e2ff
 800e170:	0800e2ff 	.word	0x0800e2ff
 800e174:	0800e2bd 	.word	0x0800e2bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	68b9      	ldr	r1, [r7, #8]
 800e17e:	4618      	mov	r0, r3
 800e180:	f000 fa62 	bl	800e648 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	699a      	ldr	r2, [r3, #24]
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	f042 0208 	orr.w	r2, r2, #8
 800e192:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	699a      	ldr	r2, [r3, #24]
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	f022 0204 	bic.w	r2, r2, #4
 800e1a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	6999      	ldr	r1, [r3, #24]
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	691a      	ldr	r2, [r3, #16]
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	430a      	orrs	r2, r1
 800e1b4:	619a      	str	r2, [r3, #24]
      break;
 800e1b6:	e0a5      	b.n	800e304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	68b9      	ldr	r1, [r7, #8]
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f000 fab4 	bl	800e72c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	699a      	ldr	r2, [r3, #24]
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e1d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	699a      	ldr	r2, [r3, #24]
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e1e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	6999      	ldr	r1, [r3, #24]
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	691b      	ldr	r3, [r3, #16]
 800e1ee:	021a      	lsls	r2, r3, #8
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	430a      	orrs	r2, r1
 800e1f6:	619a      	str	r2, [r3, #24]
      break;
 800e1f8:	e084      	b.n	800e304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	68b9      	ldr	r1, [r7, #8]
 800e200:	4618      	mov	r0, r3
 800e202:	f000 fb0b 	bl	800e81c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	69da      	ldr	r2, [r3, #28]
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	f042 0208 	orr.w	r2, r2, #8
 800e214:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	69da      	ldr	r2, [r3, #28]
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	f022 0204 	bic.w	r2, r2, #4
 800e224:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	69d9      	ldr	r1, [r3, #28]
 800e22c:	68bb      	ldr	r3, [r7, #8]
 800e22e:	691a      	ldr	r2, [r3, #16]
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	430a      	orrs	r2, r1
 800e236:	61da      	str	r2, [r3, #28]
      break;
 800e238:	e064      	b.n	800e304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	68b9      	ldr	r1, [r7, #8]
 800e240:	4618      	mov	r0, r3
 800e242:	f000 fb61 	bl	800e908 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	69da      	ldr	r2, [r3, #28]
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e254:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	69da      	ldr	r2, [r3, #28]
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e264:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	69d9      	ldr	r1, [r3, #28]
 800e26c:	68bb      	ldr	r3, [r7, #8]
 800e26e:	691b      	ldr	r3, [r3, #16]
 800e270:	021a      	lsls	r2, r3, #8
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	430a      	orrs	r2, r1
 800e278:	61da      	str	r2, [r3, #28]
      break;
 800e27a:	e043      	b.n	800e304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	68b9      	ldr	r1, [r7, #8]
 800e282:	4618      	mov	r0, r3
 800e284:	f000 fb98 	bl	800e9b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	f042 0208 	orr.w	r2, r2, #8
 800e296:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	f022 0204 	bic.w	r2, r2, #4
 800e2a6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	691a      	ldr	r2, [r3, #16]
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	430a      	orrs	r2, r1
 800e2b8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e2ba:	e023      	b.n	800e304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	68b9      	ldr	r1, [r7, #8]
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f000 fbca 	bl	800ea5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e2d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e2e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e2ee:	68bb      	ldr	r3, [r7, #8]
 800e2f0:	691b      	ldr	r3, [r3, #16]
 800e2f2:	021a      	lsls	r2, r3, #8
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	430a      	orrs	r2, r1
 800e2fa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e2fc:	e002      	b.n	800e304 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e2fe:	2301      	movs	r3, #1
 800e300:	75fb      	strb	r3, [r7, #23]
      break;
 800e302:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	2200      	movs	r2, #0
 800e308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e30c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e30e:	4618      	mov	r0, r3
 800e310:	3718      	adds	r7, #24
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}
 800e316:	bf00      	nop

0800e318 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b084      	sub	sp, #16
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
 800e320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e322:	2300      	movs	r3, #0
 800e324:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e32c:	2b01      	cmp	r3, #1
 800e32e:	d101      	bne.n	800e334 <HAL_TIM_ConfigClockSource+0x1c>
 800e330:	2302      	movs	r3, #2
 800e332:	e0b4      	b.n	800e49e <HAL_TIM_ConfigClockSource+0x186>
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2201      	movs	r2, #1
 800e338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	2202      	movs	r2, #2
 800e340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	689b      	ldr	r3, [r3, #8]
 800e34a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e34c:	68ba      	ldr	r2, [r7, #8]
 800e34e:	4b56      	ldr	r3, [pc, #344]	@ (800e4a8 <HAL_TIM_ConfigClockSource+0x190>)
 800e350:	4013      	ands	r3, r2
 800e352:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e354:	68bb      	ldr	r3, [r7, #8]
 800e356:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e35a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	68ba      	ldr	r2, [r7, #8]
 800e362:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e36c:	d03e      	beq.n	800e3ec <HAL_TIM_ConfigClockSource+0xd4>
 800e36e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e372:	f200 8087 	bhi.w	800e484 <HAL_TIM_ConfigClockSource+0x16c>
 800e376:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e37a:	f000 8086 	beq.w	800e48a <HAL_TIM_ConfigClockSource+0x172>
 800e37e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e382:	d87f      	bhi.n	800e484 <HAL_TIM_ConfigClockSource+0x16c>
 800e384:	2b70      	cmp	r3, #112	@ 0x70
 800e386:	d01a      	beq.n	800e3be <HAL_TIM_ConfigClockSource+0xa6>
 800e388:	2b70      	cmp	r3, #112	@ 0x70
 800e38a:	d87b      	bhi.n	800e484 <HAL_TIM_ConfigClockSource+0x16c>
 800e38c:	2b60      	cmp	r3, #96	@ 0x60
 800e38e:	d050      	beq.n	800e432 <HAL_TIM_ConfigClockSource+0x11a>
 800e390:	2b60      	cmp	r3, #96	@ 0x60
 800e392:	d877      	bhi.n	800e484 <HAL_TIM_ConfigClockSource+0x16c>
 800e394:	2b50      	cmp	r3, #80	@ 0x50
 800e396:	d03c      	beq.n	800e412 <HAL_TIM_ConfigClockSource+0xfa>
 800e398:	2b50      	cmp	r3, #80	@ 0x50
 800e39a:	d873      	bhi.n	800e484 <HAL_TIM_ConfigClockSource+0x16c>
 800e39c:	2b40      	cmp	r3, #64	@ 0x40
 800e39e:	d058      	beq.n	800e452 <HAL_TIM_ConfigClockSource+0x13a>
 800e3a0:	2b40      	cmp	r3, #64	@ 0x40
 800e3a2:	d86f      	bhi.n	800e484 <HAL_TIM_ConfigClockSource+0x16c>
 800e3a4:	2b30      	cmp	r3, #48	@ 0x30
 800e3a6:	d064      	beq.n	800e472 <HAL_TIM_ConfigClockSource+0x15a>
 800e3a8:	2b30      	cmp	r3, #48	@ 0x30
 800e3aa:	d86b      	bhi.n	800e484 <HAL_TIM_ConfigClockSource+0x16c>
 800e3ac:	2b20      	cmp	r3, #32
 800e3ae:	d060      	beq.n	800e472 <HAL_TIM_ConfigClockSource+0x15a>
 800e3b0:	2b20      	cmp	r3, #32
 800e3b2:	d867      	bhi.n	800e484 <HAL_TIM_ConfigClockSource+0x16c>
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d05c      	beq.n	800e472 <HAL_TIM_ConfigClockSource+0x15a>
 800e3b8:	2b10      	cmp	r3, #16
 800e3ba:	d05a      	beq.n	800e472 <HAL_TIM_ConfigClockSource+0x15a>
 800e3bc:	e062      	b.n	800e484 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e3ce:	f000 fc13 	bl	800ebf8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	689b      	ldr	r3, [r3, #8]
 800e3d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e3e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	68ba      	ldr	r2, [r7, #8]
 800e3e8:	609a      	str	r2, [r3, #8]
      break;
 800e3ea:	e04f      	b.n	800e48c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e3fc:	f000 fbfc 	bl	800ebf8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	689a      	ldr	r2, [r3, #8]
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e40e:	609a      	str	r2, [r3, #8]
      break;
 800e410:	e03c      	b.n	800e48c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e416:	683b      	ldr	r3, [r7, #0]
 800e418:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e41e:	461a      	mov	r2, r3
 800e420:	f000 fb70 	bl	800eb04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	2150      	movs	r1, #80	@ 0x50
 800e42a:	4618      	mov	r0, r3
 800e42c:	f000 fbc9 	bl	800ebc2 <TIM_ITRx_SetConfig>
      break;
 800e430:	e02c      	b.n	800e48c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e43e:	461a      	mov	r2, r3
 800e440:	f000 fb8f 	bl	800eb62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	2160      	movs	r1, #96	@ 0x60
 800e44a:	4618      	mov	r0, r3
 800e44c:	f000 fbb9 	bl	800ebc2 <TIM_ITRx_SetConfig>
      break;
 800e450:	e01c      	b.n	800e48c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e45e:	461a      	mov	r2, r3
 800e460:	f000 fb50 	bl	800eb04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	2140      	movs	r1, #64	@ 0x40
 800e46a:	4618      	mov	r0, r3
 800e46c:	f000 fba9 	bl	800ebc2 <TIM_ITRx_SetConfig>
      break;
 800e470:	e00c      	b.n	800e48c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681a      	ldr	r2, [r3, #0]
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	4619      	mov	r1, r3
 800e47c:	4610      	mov	r0, r2
 800e47e:	f000 fba0 	bl	800ebc2 <TIM_ITRx_SetConfig>
      break;
 800e482:	e003      	b.n	800e48c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800e484:	2301      	movs	r3, #1
 800e486:	73fb      	strb	r3, [r7, #15]
      break;
 800e488:	e000      	b.n	800e48c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800e48a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2201      	movs	r2, #1
 800e490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2200      	movs	r2, #0
 800e498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e49c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e49e:	4618      	mov	r0, r3
 800e4a0:	3710      	adds	r7, #16
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd80      	pop	{r7, pc}
 800e4a6:	bf00      	nop
 800e4a8:	fffeff88 	.word	0xfffeff88

0800e4ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e4ac:	b480      	push	{r7}
 800e4ae:	b083      	sub	sp, #12
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e4b4:	bf00      	nop
 800e4b6:	370c      	adds	r7, #12
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4be:	4770      	bx	lr

0800e4c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e4c0:	b480      	push	{r7}
 800e4c2:	b083      	sub	sp, #12
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e4c8:	bf00      	nop
 800e4ca:	370c      	adds	r7, #12
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d2:	4770      	bx	lr

0800e4d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e4d4:	b480      	push	{r7}
 800e4d6:	b083      	sub	sp, #12
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e4dc:	bf00      	nop
 800e4de:	370c      	adds	r7, #12
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e6:	4770      	bx	lr

0800e4e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e4e8:	b480      	push	{r7}
 800e4ea:	b083      	sub	sp, #12
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e4f0:	bf00      	nop
 800e4f2:	370c      	adds	r7, #12
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fa:	4770      	bx	lr

0800e4fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	b085      	sub	sp, #20
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
 800e504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	4a43      	ldr	r2, [pc, #268]	@ (800e61c <TIM_Base_SetConfig+0x120>)
 800e510:	4293      	cmp	r3, r2
 800e512:	d013      	beq.n	800e53c <TIM_Base_SetConfig+0x40>
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e51a:	d00f      	beq.n	800e53c <TIM_Base_SetConfig+0x40>
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	4a40      	ldr	r2, [pc, #256]	@ (800e620 <TIM_Base_SetConfig+0x124>)
 800e520:	4293      	cmp	r3, r2
 800e522:	d00b      	beq.n	800e53c <TIM_Base_SetConfig+0x40>
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	4a3f      	ldr	r2, [pc, #252]	@ (800e624 <TIM_Base_SetConfig+0x128>)
 800e528:	4293      	cmp	r3, r2
 800e52a:	d007      	beq.n	800e53c <TIM_Base_SetConfig+0x40>
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	4a3e      	ldr	r2, [pc, #248]	@ (800e628 <TIM_Base_SetConfig+0x12c>)
 800e530:	4293      	cmp	r3, r2
 800e532:	d003      	beq.n	800e53c <TIM_Base_SetConfig+0x40>
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	4a3d      	ldr	r2, [pc, #244]	@ (800e62c <TIM_Base_SetConfig+0x130>)
 800e538:	4293      	cmp	r3, r2
 800e53a:	d108      	bne.n	800e54e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e542:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	685b      	ldr	r3, [r3, #4]
 800e548:	68fa      	ldr	r2, [r7, #12]
 800e54a:	4313      	orrs	r3, r2
 800e54c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	4a32      	ldr	r2, [pc, #200]	@ (800e61c <TIM_Base_SetConfig+0x120>)
 800e552:	4293      	cmp	r3, r2
 800e554:	d02b      	beq.n	800e5ae <TIM_Base_SetConfig+0xb2>
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e55c:	d027      	beq.n	800e5ae <TIM_Base_SetConfig+0xb2>
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	4a2f      	ldr	r2, [pc, #188]	@ (800e620 <TIM_Base_SetConfig+0x124>)
 800e562:	4293      	cmp	r3, r2
 800e564:	d023      	beq.n	800e5ae <TIM_Base_SetConfig+0xb2>
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	4a2e      	ldr	r2, [pc, #184]	@ (800e624 <TIM_Base_SetConfig+0x128>)
 800e56a:	4293      	cmp	r3, r2
 800e56c:	d01f      	beq.n	800e5ae <TIM_Base_SetConfig+0xb2>
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	4a2d      	ldr	r2, [pc, #180]	@ (800e628 <TIM_Base_SetConfig+0x12c>)
 800e572:	4293      	cmp	r3, r2
 800e574:	d01b      	beq.n	800e5ae <TIM_Base_SetConfig+0xb2>
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	4a2c      	ldr	r2, [pc, #176]	@ (800e62c <TIM_Base_SetConfig+0x130>)
 800e57a:	4293      	cmp	r3, r2
 800e57c:	d017      	beq.n	800e5ae <TIM_Base_SetConfig+0xb2>
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	4a2b      	ldr	r2, [pc, #172]	@ (800e630 <TIM_Base_SetConfig+0x134>)
 800e582:	4293      	cmp	r3, r2
 800e584:	d013      	beq.n	800e5ae <TIM_Base_SetConfig+0xb2>
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	4a2a      	ldr	r2, [pc, #168]	@ (800e634 <TIM_Base_SetConfig+0x138>)
 800e58a:	4293      	cmp	r3, r2
 800e58c:	d00f      	beq.n	800e5ae <TIM_Base_SetConfig+0xb2>
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	4a29      	ldr	r2, [pc, #164]	@ (800e638 <TIM_Base_SetConfig+0x13c>)
 800e592:	4293      	cmp	r3, r2
 800e594:	d00b      	beq.n	800e5ae <TIM_Base_SetConfig+0xb2>
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	4a28      	ldr	r2, [pc, #160]	@ (800e63c <TIM_Base_SetConfig+0x140>)
 800e59a:	4293      	cmp	r3, r2
 800e59c:	d007      	beq.n	800e5ae <TIM_Base_SetConfig+0xb2>
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	4a27      	ldr	r2, [pc, #156]	@ (800e640 <TIM_Base_SetConfig+0x144>)
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	d003      	beq.n	800e5ae <TIM_Base_SetConfig+0xb2>
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	4a26      	ldr	r2, [pc, #152]	@ (800e644 <TIM_Base_SetConfig+0x148>)
 800e5aa:	4293      	cmp	r3, r2
 800e5ac:	d108      	bne.n	800e5c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e5b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e5b6:	683b      	ldr	r3, [r7, #0]
 800e5b8:	68db      	ldr	r3, [r3, #12]
 800e5ba:	68fa      	ldr	r2, [r7, #12]
 800e5bc:	4313      	orrs	r3, r2
 800e5be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	695b      	ldr	r3, [r3, #20]
 800e5ca:	4313      	orrs	r3, r2
 800e5cc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	689a      	ldr	r2, [r3, #8]
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	681a      	ldr	r2, [r3, #0]
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	4a0e      	ldr	r2, [pc, #56]	@ (800e61c <TIM_Base_SetConfig+0x120>)
 800e5e2:	4293      	cmp	r3, r2
 800e5e4:	d003      	beq.n	800e5ee <TIM_Base_SetConfig+0xf2>
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	4a10      	ldr	r2, [pc, #64]	@ (800e62c <TIM_Base_SetConfig+0x130>)
 800e5ea:	4293      	cmp	r3, r2
 800e5ec:	d103      	bne.n	800e5f6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e5ee:	683b      	ldr	r3, [r7, #0]
 800e5f0:	691a      	ldr	r2, [r3, #16]
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	f043 0204 	orr.w	r2, r3, #4
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	2201      	movs	r2, #1
 800e606:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	68fa      	ldr	r2, [r7, #12]
 800e60c:	601a      	str	r2, [r3, #0]
}
 800e60e:	bf00      	nop
 800e610:	3714      	adds	r7, #20
 800e612:	46bd      	mov	sp, r7
 800e614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e618:	4770      	bx	lr
 800e61a:	bf00      	nop
 800e61c:	40010000 	.word	0x40010000
 800e620:	40000400 	.word	0x40000400
 800e624:	40000800 	.word	0x40000800
 800e628:	40000c00 	.word	0x40000c00
 800e62c:	40010400 	.word	0x40010400
 800e630:	40014000 	.word	0x40014000
 800e634:	40014400 	.word	0x40014400
 800e638:	40014800 	.word	0x40014800
 800e63c:	40001800 	.word	0x40001800
 800e640:	40001c00 	.word	0x40001c00
 800e644:	40002000 	.word	0x40002000

0800e648 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e648:	b480      	push	{r7}
 800e64a:	b087      	sub	sp, #28
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
 800e650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	6a1b      	ldr	r3, [r3, #32]
 800e656:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	6a1b      	ldr	r3, [r3, #32]
 800e65c:	f023 0201 	bic.w	r2, r3, #1
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	685b      	ldr	r3, [r3, #4]
 800e668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	699b      	ldr	r3, [r3, #24]
 800e66e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e670:	68fa      	ldr	r2, [r7, #12]
 800e672:	4b2b      	ldr	r3, [pc, #172]	@ (800e720 <TIM_OC1_SetConfig+0xd8>)
 800e674:	4013      	ands	r3, r2
 800e676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	f023 0303 	bic.w	r3, r3, #3
 800e67e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	68fa      	ldr	r2, [r7, #12]
 800e686:	4313      	orrs	r3, r2
 800e688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	f023 0302 	bic.w	r3, r3, #2
 800e690:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e692:	683b      	ldr	r3, [r7, #0]
 800e694:	689b      	ldr	r3, [r3, #8]
 800e696:	697a      	ldr	r2, [r7, #20]
 800e698:	4313      	orrs	r3, r2
 800e69a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	4a21      	ldr	r2, [pc, #132]	@ (800e724 <TIM_OC1_SetConfig+0xdc>)
 800e6a0:	4293      	cmp	r3, r2
 800e6a2:	d003      	beq.n	800e6ac <TIM_OC1_SetConfig+0x64>
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	4a20      	ldr	r2, [pc, #128]	@ (800e728 <TIM_OC1_SetConfig+0xe0>)
 800e6a8:	4293      	cmp	r3, r2
 800e6aa:	d10c      	bne.n	800e6c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e6ac:	697b      	ldr	r3, [r7, #20]
 800e6ae:	f023 0308 	bic.w	r3, r3, #8
 800e6b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	68db      	ldr	r3, [r3, #12]
 800e6b8:	697a      	ldr	r2, [r7, #20]
 800e6ba:	4313      	orrs	r3, r2
 800e6bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e6be:	697b      	ldr	r3, [r7, #20]
 800e6c0:	f023 0304 	bic.w	r3, r3, #4
 800e6c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	4a16      	ldr	r2, [pc, #88]	@ (800e724 <TIM_OC1_SetConfig+0xdc>)
 800e6ca:	4293      	cmp	r3, r2
 800e6cc:	d003      	beq.n	800e6d6 <TIM_OC1_SetConfig+0x8e>
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	4a15      	ldr	r2, [pc, #84]	@ (800e728 <TIM_OC1_SetConfig+0xe0>)
 800e6d2:	4293      	cmp	r3, r2
 800e6d4:	d111      	bne.n	800e6fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e6d6:	693b      	ldr	r3, [r7, #16]
 800e6d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e6dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e6de:	693b      	ldr	r3, [r7, #16]
 800e6e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e6e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	695b      	ldr	r3, [r3, #20]
 800e6ea:	693a      	ldr	r2, [r7, #16]
 800e6ec:	4313      	orrs	r3, r2
 800e6ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e6f0:	683b      	ldr	r3, [r7, #0]
 800e6f2:	699b      	ldr	r3, [r3, #24]
 800e6f4:	693a      	ldr	r2, [r7, #16]
 800e6f6:	4313      	orrs	r3, r2
 800e6f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	693a      	ldr	r2, [r7, #16]
 800e6fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	68fa      	ldr	r2, [r7, #12]
 800e704:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	685a      	ldr	r2, [r3, #4]
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	697a      	ldr	r2, [r7, #20]
 800e712:	621a      	str	r2, [r3, #32]
}
 800e714:	bf00      	nop
 800e716:	371c      	adds	r7, #28
 800e718:	46bd      	mov	sp, r7
 800e71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71e:	4770      	bx	lr
 800e720:	fffeff8f 	.word	0xfffeff8f
 800e724:	40010000 	.word	0x40010000
 800e728:	40010400 	.word	0x40010400

0800e72c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e72c:	b480      	push	{r7}
 800e72e:	b087      	sub	sp, #28
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
 800e734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	6a1b      	ldr	r3, [r3, #32]
 800e73a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	6a1b      	ldr	r3, [r3, #32]
 800e740:	f023 0210 	bic.w	r2, r3, #16
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	685b      	ldr	r3, [r3, #4]
 800e74c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	699b      	ldr	r3, [r3, #24]
 800e752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e754:	68fa      	ldr	r2, [r7, #12]
 800e756:	4b2e      	ldr	r3, [pc, #184]	@ (800e810 <TIM_OC2_SetConfig+0xe4>)
 800e758:	4013      	ands	r3, r2
 800e75a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e762:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	021b      	lsls	r3, r3, #8
 800e76a:	68fa      	ldr	r2, [r7, #12]
 800e76c:	4313      	orrs	r3, r2
 800e76e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e770:	697b      	ldr	r3, [r7, #20]
 800e772:	f023 0320 	bic.w	r3, r3, #32
 800e776:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	689b      	ldr	r3, [r3, #8]
 800e77c:	011b      	lsls	r3, r3, #4
 800e77e:	697a      	ldr	r2, [r7, #20]
 800e780:	4313      	orrs	r3, r2
 800e782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	4a23      	ldr	r2, [pc, #140]	@ (800e814 <TIM_OC2_SetConfig+0xe8>)
 800e788:	4293      	cmp	r3, r2
 800e78a:	d003      	beq.n	800e794 <TIM_OC2_SetConfig+0x68>
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	4a22      	ldr	r2, [pc, #136]	@ (800e818 <TIM_OC2_SetConfig+0xec>)
 800e790:	4293      	cmp	r3, r2
 800e792:	d10d      	bne.n	800e7b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e79a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	68db      	ldr	r3, [r3, #12]
 800e7a0:	011b      	lsls	r3, r3, #4
 800e7a2:	697a      	ldr	r2, [r7, #20]
 800e7a4:	4313      	orrs	r3, r2
 800e7a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e7a8:	697b      	ldr	r3, [r7, #20]
 800e7aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e7ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	4a18      	ldr	r2, [pc, #96]	@ (800e814 <TIM_OC2_SetConfig+0xe8>)
 800e7b4:	4293      	cmp	r3, r2
 800e7b6:	d003      	beq.n	800e7c0 <TIM_OC2_SetConfig+0x94>
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	4a17      	ldr	r2, [pc, #92]	@ (800e818 <TIM_OC2_SetConfig+0xec>)
 800e7bc:	4293      	cmp	r3, r2
 800e7be:	d113      	bne.n	800e7e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e7c0:	693b      	ldr	r3, [r7, #16]
 800e7c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e7c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e7c8:	693b      	ldr	r3, [r7, #16]
 800e7ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e7ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	695b      	ldr	r3, [r3, #20]
 800e7d4:	009b      	lsls	r3, r3, #2
 800e7d6:	693a      	ldr	r2, [r7, #16]
 800e7d8:	4313      	orrs	r3, r2
 800e7da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	699b      	ldr	r3, [r3, #24]
 800e7e0:	009b      	lsls	r3, r3, #2
 800e7e2:	693a      	ldr	r2, [r7, #16]
 800e7e4:	4313      	orrs	r3, r2
 800e7e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	693a      	ldr	r2, [r7, #16]
 800e7ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	68fa      	ldr	r2, [r7, #12]
 800e7f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	685a      	ldr	r2, [r3, #4]
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	697a      	ldr	r2, [r7, #20]
 800e800:	621a      	str	r2, [r3, #32]
}
 800e802:	bf00      	nop
 800e804:	371c      	adds	r7, #28
 800e806:	46bd      	mov	sp, r7
 800e808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80c:	4770      	bx	lr
 800e80e:	bf00      	nop
 800e810:	feff8fff 	.word	0xfeff8fff
 800e814:	40010000 	.word	0x40010000
 800e818:	40010400 	.word	0x40010400

0800e81c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e81c:	b480      	push	{r7}
 800e81e:	b087      	sub	sp, #28
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
 800e824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	6a1b      	ldr	r3, [r3, #32]
 800e82a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	6a1b      	ldr	r3, [r3, #32]
 800e830:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	685b      	ldr	r3, [r3, #4]
 800e83c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	69db      	ldr	r3, [r3, #28]
 800e842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e844:	68fa      	ldr	r2, [r7, #12]
 800e846:	4b2d      	ldr	r3, [pc, #180]	@ (800e8fc <TIM_OC3_SetConfig+0xe0>)
 800e848:	4013      	ands	r3, r2
 800e84a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	f023 0303 	bic.w	r3, r3, #3
 800e852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	68fa      	ldr	r2, [r7, #12]
 800e85a:	4313      	orrs	r3, r2
 800e85c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e85e:	697b      	ldr	r3, [r7, #20]
 800e860:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e864:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e866:	683b      	ldr	r3, [r7, #0]
 800e868:	689b      	ldr	r3, [r3, #8]
 800e86a:	021b      	lsls	r3, r3, #8
 800e86c:	697a      	ldr	r2, [r7, #20]
 800e86e:	4313      	orrs	r3, r2
 800e870:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	4a22      	ldr	r2, [pc, #136]	@ (800e900 <TIM_OC3_SetConfig+0xe4>)
 800e876:	4293      	cmp	r3, r2
 800e878:	d003      	beq.n	800e882 <TIM_OC3_SetConfig+0x66>
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	4a21      	ldr	r2, [pc, #132]	@ (800e904 <TIM_OC3_SetConfig+0xe8>)
 800e87e:	4293      	cmp	r3, r2
 800e880:	d10d      	bne.n	800e89e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e888:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e88a:	683b      	ldr	r3, [r7, #0]
 800e88c:	68db      	ldr	r3, [r3, #12]
 800e88e:	021b      	lsls	r3, r3, #8
 800e890:	697a      	ldr	r2, [r7, #20]
 800e892:	4313      	orrs	r3, r2
 800e894:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e896:	697b      	ldr	r3, [r7, #20]
 800e898:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e89c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	4a17      	ldr	r2, [pc, #92]	@ (800e900 <TIM_OC3_SetConfig+0xe4>)
 800e8a2:	4293      	cmp	r3, r2
 800e8a4:	d003      	beq.n	800e8ae <TIM_OC3_SetConfig+0x92>
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	4a16      	ldr	r2, [pc, #88]	@ (800e904 <TIM_OC3_SetConfig+0xe8>)
 800e8aa:	4293      	cmp	r3, r2
 800e8ac:	d113      	bne.n	800e8d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e8ae:	693b      	ldr	r3, [r7, #16]
 800e8b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e8b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e8b6:	693b      	ldr	r3, [r7, #16]
 800e8b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e8bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	695b      	ldr	r3, [r3, #20]
 800e8c2:	011b      	lsls	r3, r3, #4
 800e8c4:	693a      	ldr	r2, [r7, #16]
 800e8c6:	4313      	orrs	r3, r2
 800e8c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	699b      	ldr	r3, [r3, #24]
 800e8ce:	011b      	lsls	r3, r3, #4
 800e8d0:	693a      	ldr	r2, [r7, #16]
 800e8d2:	4313      	orrs	r3, r2
 800e8d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	693a      	ldr	r2, [r7, #16]
 800e8da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	68fa      	ldr	r2, [r7, #12]
 800e8e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	685a      	ldr	r2, [r3, #4]
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	697a      	ldr	r2, [r7, #20]
 800e8ee:	621a      	str	r2, [r3, #32]
}
 800e8f0:	bf00      	nop
 800e8f2:	371c      	adds	r7, #28
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fa:	4770      	bx	lr
 800e8fc:	fffeff8f 	.word	0xfffeff8f
 800e900:	40010000 	.word	0x40010000
 800e904:	40010400 	.word	0x40010400

0800e908 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e908:	b480      	push	{r7}
 800e90a:	b087      	sub	sp, #28
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
 800e910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	6a1b      	ldr	r3, [r3, #32]
 800e916:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	6a1b      	ldr	r3, [r3, #32]
 800e91c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	685b      	ldr	r3, [r3, #4]
 800e928:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	69db      	ldr	r3, [r3, #28]
 800e92e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e930:	68fa      	ldr	r2, [r7, #12]
 800e932:	4b1e      	ldr	r3, [pc, #120]	@ (800e9ac <TIM_OC4_SetConfig+0xa4>)
 800e934:	4013      	ands	r3, r2
 800e936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e93e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	021b      	lsls	r3, r3, #8
 800e946:	68fa      	ldr	r2, [r7, #12]
 800e948:	4313      	orrs	r3, r2
 800e94a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e94c:	693b      	ldr	r3, [r7, #16]
 800e94e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e952:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	689b      	ldr	r3, [r3, #8]
 800e958:	031b      	lsls	r3, r3, #12
 800e95a:	693a      	ldr	r2, [r7, #16]
 800e95c:	4313      	orrs	r3, r2
 800e95e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	4a13      	ldr	r2, [pc, #76]	@ (800e9b0 <TIM_OC4_SetConfig+0xa8>)
 800e964:	4293      	cmp	r3, r2
 800e966:	d003      	beq.n	800e970 <TIM_OC4_SetConfig+0x68>
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	4a12      	ldr	r2, [pc, #72]	@ (800e9b4 <TIM_OC4_SetConfig+0xac>)
 800e96c:	4293      	cmp	r3, r2
 800e96e:	d109      	bne.n	800e984 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e970:	697b      	ldr	r3, [r7, #20]
 800e972:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e976:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	695b      	ldr	r3, [r3, #20]
 800e97c:	019b      	lsls	r3, r3, #6
 800e97e:	697a      	ldr	r2, [r7, #20]
 800e980:	4313      	orrs	r3, r2
 800e982:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	697a      	ldr	r2, [r7, #20]
 800e988:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	68fa      	ldr	r2, [r7, #12]
 800e98e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	685a      	ldr	r2, [r3, #4]
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	693a      	ldr	r2, [r7, #16]
 800e99c:	621a      	str	r2, [r3, #32]
}
 800e99e:	bf00      	nop
 800e9a0:	371c      	adds	r7, #28
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a8:	4770      	bx	lr
 800e9aa:	bf00      	nop
 800e9ac:	feff8fff 	.word	0xfeff8fff
 800e9b0:	40010000 	.word	0x40010000
 800e9b4:	40010400 	.word	0x40010400

0800e9b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e9b8:	b480      	push	{r7}
 800e9ba:	b087      	sub	sp, #28
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
 800e9c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	6a1b      	ldr	r3, [r3, #32]
 800e9c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	6a1b      	ldr	r3, [r3, #32]
 800e9cc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	685b      	ldr	r3, [r3, #4]
 800e9d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e9e0:	68fa      	ldr	r2, [r7, #12]
 800e9e2:	4b1b      	ldr	r3, [pc, #108]	@ (800ea50 <TIM_OC5_SetConfig+0x98>)
 800e9e4:	4013      	ands	r3, r2
 800e9e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	68fa      	ldr	r2, [r7, #12]
 800e9ee:	4313      	orrs	r3, r2
 800e9f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e9f2:	693b      	ldr	r3, [r7, #16]
 800e9f4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e9f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	689b      	ldr	r3, [r3, #8]
 800e9fe:	041b      	lsls	r3, r3, #16
 800ea00:	693a      	ldr	r2, [r7, #16]
 800ea02:	4313      	orrs	r3, r2
 800ea04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	4a12      	ldr	r2, [pc, #72]	@ (800ea54 <TIM_OC5_SetConfig+0x9c>)
 800ea0a:	4293      	cmp	r3, r2
 800ea0c:	d003      	beq.n	800ea16 <TIM_OC5_SetConfig+0x5e>
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	4a11      	ldr	r2, [pc, #68]	@ (800ea58 <TIM_OC5_SetConfig+0xa0>)
 800ea12:	4293      	cmp	r3, r2
 800ea14:	d109      	bne.n	800ea2a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ea1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ea1e:	683b      	ldr	r3, [r7, #0]
 800ea20:	695b      	ldr	r3, [r3, #20]
 800ea22:	021b      	lsls	r3, r3, #8
 800ea24:	697a      	ldr	r2, [r7, #20]
 800ea26:	4313      	orrs	r3, r2
 800ea28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	697a      	ldr	r2, [r7, #20]
 800ea2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	68fa      	ldr	r2, [r7, #12]
 800ea34:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	685a      	ldr	r2, [r3, #4]
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	693a      	ldr	r2, [r7, #16]
 800ea42:	621a      	str	r2, [r3, #32]
}
 800ea44:	bf00      	nop
 800ea46:	371c      	adds	r7, #28
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4e:	4770      	bx	lr
 800ea50:	fffeff8f 	.word	0xfffeff8f
 800ea54:	40010000 	.word	0x40010000
 800ea58:	40010400 	.word	0x40010400

0800ea5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ea5c:	b480      	push	{r7}
 800ea5e:	b087      	sub	sp, #28
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
 800ea64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	6a1b      	ldr	r3, [r3, #32]
 800ea6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	6a1b      	ldr	r3, [r3, #32]
 800ea70:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	685b      	ldr	r3, [r3, #4]
 800ea7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ea84:	68fa      	ldr	r2, [r7, #12]
 800ea86:	4b1c      	ldr	r3, [pc, #112]	@ (800eaf8 <TIM_OC6_SetConfig+0x9c>)
 800ea88:	4013      	ands	r3, r2
 800ea8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	021b      	lsls	r3, r3, #8
 800ea92:	68fa      	ldr	r2, [r7, #12]
 800ea94:	4313      	orrs	r3, r2
 800ea96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ea98:	693b      	ldr	r3, [r7, #16]
 800ea9a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ea9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	689b      	ldr	r3, [r3, #8]
 800eaa4:	051b      	lsls	r3, r3, #20
 800eaa6:	693a      	ldr	r2, [r7, #16]
 800eaa8:	4313      	orrs	r3, r2
 800eaaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	4a13      	ldr	r2, [pc, #76]	@ (800eafc <TIM_OC6_SetConfig+0xa0>)
 800eab0:	4293      	cmp	r3, r2
 800eab2:	d003      	beq.n	800eabc <TIM_OC6_SetConfig+0x60>
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	4a12      	ldr	r2, [pc, #72]	@ (800eb00 <TIM_OC6_SetConfig+0xa4>)
 800eab8:	4293      	cmp	r3, r2
 800eaba:	d109      	bne.n	800ead0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800eabc:	697b      	ldr	r3, [r7, #20]
 800eabe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800eac2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	695b      	ldr	r3, [r3, #20]
 800eac8:	029b      	lsls	r3, r3, #10
 800eaca:	697a      	ldr	r2, [r7, #20]
 800eacc:	4313      	orrs	r3, r2
 800eace:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	697a      	ldr	r2, [r7, #20]
 800ead4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	68fa      	ldr	r2, [r7, #12]
 800eada:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	685a      	ldr	r2, [r3, #4]
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	693a      	ldr	r2, [r7, #16]
 800eae8:	621a      	str	r2, [r3, #32]
}
 800eaea:	bf00      	nop
 800eaec:	371c      	adds	r7, #28
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf4:	4770      	bx	lr
 800eaf6:	bf00      	nop
 800eaf8:	feff8fff 	.word	0xfeff8fff
 800eafc:	40010000 	.word	0x40010000
 800eb00:	40010400 	.word	0x40010400

0800eb04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800eb04:	b480      	push	{r7}
 800eb06:	b087      	sub	sp, #28
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	60f8      	str	r0, [r7, #12]
 800eb0c:	60b9      	str	r1, [r7, #8]
 800eb0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	6a1b      	ldr	r3, [r3, #32]
 800eb14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	6a1b      	ldr	r3, [r3, #32]
 800eb1a:	f023 0201 	bic.w	r2, r3, #1
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	699b      	ldr	r3, [r3, #24]
 800eb26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800eb28:	693b      	ldr	r3, [r7, #16]
 800eb2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800eb2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	011b      	lsls	r3, r3, #4
 800eb34:	693a      	ldr	r2, [r7, #16]
 800eb36:	4313      	orrs	r3, r2
 800eb38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	f023 030a 	bic.w	r3, r3, #10
 800eb40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800eb42:	697a      	ldr	r2, [r7, #20]
 800eb44:	68bb      	ldr	r3, [r7, #8]
 800eb46:	4313      	orrs	r3, r2
 800eb48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	693a      	ldr	r2, [r7, #16]
 800eb4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	697a      	ldr	r2, [r7, #20]
 800eb54:	621a      	str	r2, [r3, #32]
}
 800eb56:	bf00      	nop
 800eb58:	371c      	adds	r7, #28
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb60:	4770      	bx	lr

0800eb62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800eb62:	b480      	push	{r7}
 800eb64:	b087      	sub	sp, #28
 800eb66:	af00      	add	r7, sp, #0
 800eb68:	60f8      	str	r0, [r7, #12]
 800eb6a:	60b9      	str	r1, [r7, #8]
 800eb6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	6a1b      	ldr	r3, [r3, #32]
 800eb72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	6a1b      	ldr	r3, [r3, #32]
 800eb78:	f023 0210 	bic.w	r2, r3, #16
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	699b      	ldr	r3, [r3, #24]
 800eb84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800eb86:	693b      	ldr	r3, [r7, #16]
 800eb88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800eb8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	031b      	lsls	r3, r3, #12
 800eb92:	693a      	ldr	r2, [r7, #16]
 800eb94:	4313      	orrs	r3, r2
 800eb96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800eb98:	697b      	ldr	r3, [r7, #20]
 800eb9a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800eb9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800eba0:	68bb      	ldr	r3, [r7, #8]
 800eba2:	011b      	lsls	r3, r3, #4
 800eba4:	697a      	ldr	r2, [r7, #20]
 800eba6:	4313      	orrs	r3, r2
 800eba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	693a      	ldr	r2, [r7, #16]
 800ebae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	697a      	ldr	r2, [r7, #20]
 800ebb4:	621a      	str	r2, [r3, #32]
}
 800ebb6:	bf00      	nop
 800ebb8:	371c      	adds	r7, #28
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc0:	4770      	bx	lr

0800ebc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ebc2:	b480      	push	{r7}
 800ebc4:	b085      	sub	sp, #20
 800ebc6:	af00      	add	r7, sp, #0
 800ebc8:	6078      	str	r0, [r7, #4]
 800ebca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	689b      	ldr	r3, [r3, #8]
 800ebd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ebd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ebda:	683a      	ldr	r2, [r7, #0]
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	4313      	orrs	r3, r2
 800ebe0:	f043 0307 	orr.w	r3, r3, #7
 800ebe4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	68fa      	ldr	r2, [r7, #12]
 800ebea:	609a      	str	r2, [r3, #8]
}
 800ebec:	bf00      	nop
 800ebee:	3714      	adds	r7, #20
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf6:	4770      	bx	lr

0800ebf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ebf8:	b480      	push	{r7}
 800ebfa:	b087      	sub	sp, #28
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	60f8      	str	r0, [r7, #12]
 800ec00:	60b9      	str	r1, [r7, #8]
 800ec02:	607a      	str	r2, [r7, #4]
 800ec04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	689b      	ldr	r3, [r3, #8]
 800ec0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ec12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	021a      	lsls	r2, r3, #8
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	431a      	orrs	r2, r3
 800ec1c:	68bb      	ldr	r3, [r7, #8]
 800ec1e:	4313      	orrs	r3, r2
 800ec20:	697a      	ldr	r2, [r7, #20]
 800ec22:	4313      	orrs	r3, r2
 800ec24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	697a      	ldr	r2, [r7, #20]
 800ec2a:	609a      	str	r2, [r3, #8]
}
 800ec2c:	bf00      	nop
 800ec2e:	371c      	adds	r7, #28
 800ec30:	46bd      	mov	sp, r7
 800ec32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec36:	4770      	bx	lr

0800ec38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ec38:	b480      	push	{r7}
 800ec3a:	b085      	sub	sp, #20
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
 800ec40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ec48:	2b01      	cmp	r3, #1
 800ec4a:	d101      	bne.n	800ec50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ec4c:	2302      	movs	r3, #2
 800ec4e:	e06d      	b.n	800ed2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	2201      	movs	r2, #1
 800ec54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2202      	movs	r2, #2
 800ec5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	685b      	ldr	r3, [r3, #4]
 800ec66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	689b      	ldr	r3, [r3, #8]
 800ec6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	4a30      	ldr	r2, [pc, #192]	@ (800ed38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ec76:	4293      	cmp	r3, r2
 800ec78:	d004      	beq.n	800ec84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	4a2f      	ldr	r2, [pc, #188]	@ (800ed3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ec80:	4293      	cmp	r3, r2
 800ec82:	d108      	bne.n	800ec96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ec8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	685b      	ldr	r3, [r3, #4]
 800ec90:	68fa      	ldr	r2, [r7, #12]
 800ec92:	4313      	orrs	r3, r2
 800ec94:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ec9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ec9e:	683b      	ldr	r3, [r7, #0]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	68fa      	ldr	r2, [r7, #12]
 800eca4:	4313      	orrs	r3, r2
 800eca6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	68fa      	ldr	r2, [r7, #12]
 800ecae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	4a20      	ldr	r2, [pc, #128]	@ (800ed38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ecb6:	4293      	cmp	r3, r2
 800ecb8:	d022      	beq.n	800ed00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ecc2:	d01d      	beq.n	800ed00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	4a1d      	ldr	r2, [pc, #116]	@ (800ed40 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ecca:	4293      	cmp	r3, r2
 800eccc:	d018      	beq.n	800ed00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	4a1c      	ldr	r2, [pc, #112]	@ (800ed44 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ecd4:	4293      	cmp	r3, r2
 800ecd6:	d013      	beq.n	800ed00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	4a1a      	ldr	r2, [pc, #104]	@ (800ed48 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ecde:	4293      	cmp	r3, r2
 800ece0:	d00e      	beq.n	800ed00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	4a15      	ldr	r2, [pc, #84]	@ (800ed3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ece8:	4293      	cmp	r3, r2
 800ecea:	d009      	beq.n	800ed00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	4a16      	ldr	r2, [pc, #88]	@ (800ed4c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ecf2:	4293      	cmp	r3, r2
 800ecf4:	d004      	beq.n	800ed00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	4a15      	ldr	r2, [pc, #84]	@ (800ed50 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ecfc:	4293      	cmp	r3, r2
 800ecfe:	d10c      	bne.n	800ed1a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ed00:	68bb      	ldr	r3, [r7, #8]
 800ed02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ed06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ed08:	683b      	ldr	r3, [r7, #0]
 800ed0a:	689b      	ldr	r3, [r3, #8]
 800ed0c:	68ba      	ldr	r2, [r7, #8]
 800ed0e:	4313      	orrs	r3, r2
 800ed10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	68ba      	ldr	r2, [r7, #8]
 800ed18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2201      	movs	r2, #1
 800ed1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	2200      	movs	r2, #0
 800ed26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ed2a:	2300      	movs	r3, #0
}
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	3714      	adds	r7, #20
 800ed30:	46bd      	mov	sp, r7
 800ed32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed36:	4770      	bx	lr
 800ed38:	40010000 	.word	0x40010000
 800ed3c:	40010400 	.word	0x40010400
 800ed40:	40000400 	.word	0x40000400
 800ed44:	40000800 	.word	0x40000800
 800ed48:	40000c00 	.word	0x40000c00
 800ed4c:	40014000 	.word	0x40014000
 800ed50:	40001800 	.word	0x40001800

0800ed54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ed54:	b480      	push	{r7}
 800ed56:	b085      	sub	sp, #20
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
 800ed5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ed5e:	2300      	movs	r3, #0
 800ed60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ed68:	2b01      	cmp	r3, #1
 800ed6a:	d101      	bne.n	800ed70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ed6c:	2302      	movs	r3, #2
 800ed6e:	e065      	b.n	800ee3c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2201      	movs	r2, #1
 800ed74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ed7e:	683b      	ldr	r3, [r7, #0]
 800ed80:	68db      	ldr	r3, [r3, #12]
 800ed82:	4313      	orrs	r3, r2
 800ed84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	689b      	ldr	r3, [r3, #8]
 800ed90:	4313      	orrs	r3, r2
 800ed92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	685b      	ldr	r3, [r3, #4]
 800ed9e:	4313      	orrs	r3, r2
 800eda0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	4313      	orrs	r3, r2
 800edae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	691b      	ldr	r3, [r3, #16]
 800edba:	4313      	orrs	r3, r2
 800edbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	695b      	ldr	r3, [r3, #20]
 800edc8:	4313      	orrs	r3, r2
 800edca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800edd6:	4313      	orrs	r3, r2
 800edd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	699b      	ldr	r3, [r3, #24]
 800ede4:	041b      	lsls	r3, r3, #16
 800ede6:	4313      	orrs	r3, r2
 800ede8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	4a16      	ldr	r2, [pc, #88]	@ (800ee48 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800edf0:	4293      	cmp	r3, r2
 800edf2:	d004      	beq.n	800edfe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	4a14      	ldr	r2, [pc, #80]	@ (800ee4c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800edfa:	4293      	cmp	r3, r2
 800edfc:	d115      	bne.n	800ee2a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee08:	051b      	lsls	r3, r3, #20
 800ee0a:	4313      	orrs	r3, r2
 800ee0c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800ee14:	683b      	ldr	r3, [r7, #0]
 800ee16:	69db      	ldr	r3, [r3, #28]
 800ee18:	4313      	orrs	r3, r2
 800ee1a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	6a1b      	ldr	r3, [r3, #32]
 800ee26:	4313      	orrs	r3, r2
 800ee28:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	68fa      	ldr	r2, [r7, #12]
 800ee30:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	2200      	movs	r2, #0
 800ee36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ee3a:	2300      	movs	r3, #0
}
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	3714      	adds	r7, #20
 800ee40:	46bd      	mov	sp, r7
 800ee42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee46:	4770      	bx	lr
 800ee48:	40010000 	.word	0x40010000
 800ee4c:	40010400 	.word	0x40010400

0800ee50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ee50:	b480      	push	{r7}
 800ee52:	b083      	sub	sp, #12
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ee58:	bf00      	nop
 800ee5a:	370c      	adds	r7, #12
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee62:	4770      	bx	lr

0800ee64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ee64:	b480      	push	{r7}
 800ee66:	b083      	sub	sp, #12
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ee6c:	bf00      	nop
 800ee6e:	370c      	adds	r7, #12
 800ee70:	46bd      	mov	sp, r7
 800ee72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee76:	4770      	bx	lr

0800ee78 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ee78:	b480      	push	{r7}
 800ee7a:	b083      	sub	sp, #12
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ee80:	bf00      	nop
 800ee82:	370c      	adds	r7, #12
 800ee84:	46bd      	mov	sp, r7
 800ee86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8a:	4770      	bx	lr

0800ee8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b082      	sub	sp, #8
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d101      	bne.n	800ee9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ee9a:	2301      	movs	r3, #1
 800ee9c:	e040      	b.n	800ef20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d106      	bne.n	800eeb4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	2200      	movs	r2, #0
 800eeaa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800eeae:	6878      	ldr	r0, [r7, #4]
 800eeb0:	f7f5 fb68 	bl	8004584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	2224      	movs	r2, #36	@ 0x24
 800eeb8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	681a      	ldr	r2, [r3, #0]
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	f022 0201 	bic.w	r2, r2, #1
 800eec8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d002      	beq.n	800eed8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800eed2:	6878      	ldr	r0, [r7, #4]
 800eed4:	f000 ffb6 	bl	800fe44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800eed8:	6878      	ldr	r0, [r7, #4]
 800eeda:	f000 fd4f 	bl	800f97c <UART_SetConfig>
 800eede:	4603      	mov	r3, r0
 800eee0:	2b01      	cmp	r3, #1
 800eee2:	d101      	bne.n	800eee8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800eee4:	2301      	movs	r3, #1
 800eee6:	e01b      	b.n	800ef20 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	685a      	ldr	r2, [r3, #4]
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800eef6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	689a      	ldr	r2, [r3, #8]
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ef06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	681a      	ldr	r2, [r3, #0]
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	f042 0201 	orr.w	r2, r2, #1
 800ef16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ef18:	6878      	ldr	r0, [r7, #4]
 800ef1a:	f001 f835 	bl	800ff88 <UART_CheckIdleState>
 800ef1e:	4603      	mov	r3, r0
}
 800ef20:	4618      	mov	r0, r3
 800ef22:	3708      	adds	r7, #8
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}

0800ef28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b08a      	sub	sp, #40	@ 0x28
 800ef2c:	af02      	add	r7, sp, #8
 800ef2e:	60f8      	str	r0, [r7, #12]
 800ef30:	60b9      	str	r1, [r7, #8]
 800ef32:	603b      	str	r3, [r7, #0]
 800ef34:	4613      	mov	r3, r2
 800ef36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ef3c:	2b20      	cmp	r3, #32
 800ef3e:	d177      	bne.n	800f030 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800ef40:	68bb      	ldr	r3, [r7, #8]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d002      	beq.n	800ef4c <HAL_UART_Transmit+0x24>
 800ef46:	88fb      	ldrh	r3, [r7, #6]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d101      	bne.n	800ef50 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800ef4c:	2301      	movs	r3, #1
 800ef4e:	e070      	b.n	800f032 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	2200      	movs	r2, #0
 800ef54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	2221      	movs	r2, #33	@ 0x21
 800ef5c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ef5e:	f7f6 fbff 	bl	8005760 <HAL_GetTick>
 800ef62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	88fa      	ldrh	r2, [r7, #6]
 800ef68:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	88fa      	ldrh	r2, [r7, #6]
 800ef70:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	689b      	ldr	r3, [r3, #8]
 800ef78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ef7c:	d108      	bne.n	800ef90 <HAL_UART_Transmit+0x68>
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	691b      	ldr	r3, [r3, #16]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d104      	bne.n	800ef90 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800ef86:	2300      	movs	r3, #0
 800ef88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ef8a:	68bb      	ldr	r3, [r7, #8]
 800ef8c:	61bb      	str	r3, [r7, #24]
 800ef8e:	e003      	b.n	800ef98 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ef94:	2300      	movs	r3, #0
 800ef96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ef98:	e02f      	b.n	800effa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ef9a:	683b      	ldr	r3, [r7, #0]
 800ef9c:	9300      	str	r3, [sp, #0]
 800ef9e:	697b      	ldr	r3, [r7, #20]
 800efa0:	2200      	movs	r2, #0
 800efa2:	2180      	movs	r1, #128	@ 0x80
 800efa4:	68f8      	ldr	r0, [r7, #12]
 800efa6:	f001 f846 	bl	8010036 <UART_WaitOnFlagUntilTimeout>
 800efaa:	4603      	mov	r3, r0
 800efac:	2b00      	cmp	r3, #0
 800efae:	d004      	beq.n	800efba <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	2220      	movs	r2, #32
 800efb4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800efb6:	2303      	movs	r3, #3
 800efb8:	e03b      	b.n	800f032 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800efba:	69fb      	ldr	r3, [r7, #28]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d10b      	bne.n	800efd8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800efc0:	69bb      	ldr	r3, [r7, #24]
 800efc2:	881b      	ldrh	r3, [r3, #0]
 800efc4:	461a      	mov	r2, r3
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800efce:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800efd0:	69bb      	ldr	r3, [r7, #24]
 800efd2:	3302      	adds	r3, #2
 800efd4:	61bb      	str	r3, [r7, #24]
 800efd6:	e007      	b.n	800efe8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800efd8:	69fb      	ldr	r3, [r7, #28]
 800efda:	781a      	ldrb	r2, [r3, #0]
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800efe2:	69fb      	ldr	r3, [r7, #28]
 800efe4:	3301      	adds	r3, #1
 800efe6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800efee:	b29b      	uxth	r3, r3
 800eff0:	3b01      	subs	r3, #1
 800eff2:	b29a      	uxth	r2, r3
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800f000:	b29b      	uxth	r3, r3
 800f002:	2b00      	cmp	r3, #0
 800f004:	d1c9      	bne.n	800ef9a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	9300      	str	r3, [sp, #0]
 800f00a:	697b      	ldr	r3, [r7, #20]
 800f00c:	2200      	movs	r2, #0
 800f00e:	2140      	movs	r1, #64	@ 0x40
 800f010:	68f8      	ldr	r0, [r7, #12]
 800f012:	f001 f810 	bl	8010036 <UART_WaitOnFlagUntilTimeout>
 800f016:	4603      	mov	r3, r0
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d004      	beq.n	800f026 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	2220      	movs	r2, #32
 800f020:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800f022:	2303      	movs	r3, #3
 800f024:	e005      	b.n	800f032 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	2220      	movs	r2, #32
 800f02a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800f02c:	2300      	movs	r3, #0
 800f02e:	e000      	b.n	800f032 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800f030:	2302      	movs	r3, #2
  }
}
 800f032:	4618      	mov	r0, r3
 800f034:	3720      	adds	r7, #32
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}

0800f03a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f03a:	b580      	push	{r7, lr}
 800f03c:	b08a      	sub	sp, #40	@ 0x28
 800f03e:	af02      	add	r7, sp, #8
 800f040:	60f8      	str	r0, [r7, #12]
 800f042:	60b9      	str	r1, [r7, #8]
 800f044:	603b      	str	r3, [r7, #0]
 800f046:	4613      	mov	r3, r2
 800f048:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f050:	2b20      	cmp	r3, #32
 800f052:	f040 80b5 	bne.w	800f1c0 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800f056:	68bb      	ldr	r3, [r7, #8]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d002      	beq.n	800f062 <HAL_UART_Receive+0x28>
 800f05c:	88fb      	ldrh	r3, [r7, #6]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d101      	bne.n	800f066 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800f062:	2301      	movs	r3, #1
 800f064:	e0ad      	b.n	800f1c2 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	2200      	movs	r2, #0
 800f06a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	2222      	movs	r2, #34	@ 0x22
 800f072:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	2200      	movs	r2, #0
 800f07a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f07c:	f7f6 fb70 	bl	8005760 <HAL_GetTick>
 800f080:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	88fa      	ldrh	r2, [r7, #6]
 800f086:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	88fa      	ldrh	r2, [r7, #6]
 800f08e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	689b      	ldr	r3, [r3, #8]
 800f096:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f09a:	d10e      	bne.n	800f0ba <HAL_UART_Receive+0x80>
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	691b      	ldr	r3, [r3, #16]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d105      	bne.n	800f0b0 <HAL_UART_Receive+0x76>
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800f0aa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f0ae:	e02d      	b.n	800f10c <HAL_UART_Receive+0xd2>
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	22ff      	movs	r2, #255	@ 0xff
 800f0b4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f0b8:	e028      	b.n	800f10c <HAL_UART_Receive+0xd2>
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	689b      	ldr	r3, [r3, #8]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d10d      	bne.n	800f0de <HAL_UART_Receive+0xa4>
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	691b      	ldr	r3, [r3, #16]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d104      	bne.n	800f0d4 <HAL_UART_Receive+0x9a>
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	22ff      	movs	r2, #255	@ 0xff
 800f0ce:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f0d2:	e01b      	b.n	800f10c <HAL_UART_Receive+0xd2>
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	227f      	movs	r2, #127	@ 0x7f
 800f0d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f0dc:	e016      	b.n	800f10c <HAL_UART_Receive+0xd2>
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	689b      	ldr	r3, [r3, #8]
 800f0e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f0e6:	d10d      	bne.n	800f104 <HAL_UART_Receive+0xca>
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	691b      	ldr	r3, [r3, #16]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d104      	bne.n	800f0fa <HAL_UART_Receive+0xc0>
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	227f      	movs	r2, #127	@ 0x7f
 800f0f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f0f8:	e008      	b.n	800f10c <HAL_UART_Receive+0xd2>
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	223f      	movs	r2, #63	@ 0x3f
 800f0fe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f102:	e003      	b.n	800f10c <HAL_UART_Receive+0xd2>
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	2200      	movs	r2, #0
 800f108:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f112:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	689b      	ldr	r3, [r3, #8]
 800f118:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f11c:	d108      	bne.n	800f130 <HAL_UART_Receive+0xf6>
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	691b      	ldr	r3, [r3, #16]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d104      	bne.n	800f130 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800f126:	2300      	movs	r3, #0
 800f128:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f12a:	68bb      	ldr	r3, [r7, #8]
 800f12c:	61bb      	str	r3, [r7, #24]
 800f12e:	e003      	b.n	800f138 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800f130:	68bb      	ldr	r3, [r7, #8]
 800f132:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f134:	2300      	movs	r3, #0
 800f136:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800f138:	e036      	b.n	800f1a8 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	9300      	str	r3, [sp, #0]
 800f13e:	697b      	ldr	r3, [r7, #20]
 800f140:	2200      	movs	r2, #0
 800f142:	2120      	movs	r1, #32
 800f144:	68f8      	ldr	r0, [r7, #12]
 800f146:	f000 ff76 	bl	8010036 <UART_WaitOnFlagUntilTimeout>
 800f14a:	4603      	mov	r3, r0
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d005      	beq.n	800f15c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	2220      	movs	r2, #32
 800f154:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800f158:	2303      	movs	r3, #3
 800f15a:	e032      	b.n	800f1c2 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800f15c:	69fb      	ldr	r3, [r7, #28]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d10c      	bne.n	800f17c <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f168:	b29a      	uxth	r2, r3
 800f16a:	8a7b      	ldrh	r3, [r7, #18]
 800f16c:	4013      	ands	r3, r2
 800f16e:	b29a      	uxth	r2, r3
 800f170:	69bb      	ldr	r3, [r7, #24]
 800f172:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f174:	69bb      	ldr	r3, [r7, #24]
 800f176:	3302      	adds	r3, #2
 800f178:	61bb      	str	r3, [r7, #24]
 800f17a:	e00c      	b.n	800f196 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f182:	b2da      	uxtb	r2, r3
 800f184:	8a7b      	ldrh	r3, [r7, #18]
 800f186:	b2db      	uxtb	r3, r3
 800f188:	4013      	ands	r3, r2
 800f18a:	b2da      	uxtb	r2, r3
 800f18c:	69fb      	ldr	r3, [r7, #28]
 800f18e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800f190:	69fb      	ldr	r3, [r7, #28]
 800f192:	3301      	adds	r3, #1
 800f194:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f19c:	b29b      	uxth	r3, r3
 800f19e:	3b01      	subs	r3, #1
 800f1a0:	b29a      	uxth	r2, r3
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f1ae:	b29b      	uxth	r3, r3
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d1c2      	bne.n	800f13a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	2220      	movs	r2, #32
 800f1b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800f1bc:	2300      	movs	r3, #0
 800f1be:	e000      	b.n	800f1c2 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800f1c0:	2302      	movs	r3, #2
  }
}
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	3720      	adds	r7, #32
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}

0800f1ca <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f1ca:	b580      	push	{r7, lr}
 800f1cc:	b08a      	sub	sp, #40	@ 0x28
 800f1ce:	af00      	add	r7, sp, #0
 800f1d0:	60f8      	str	r0, [r7, #12]
 800f1d2:	60b9      	str	r1, [r7, #8]
 800f1d4:	4613      	mov	r3, r2
 800f1d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f1de:	2b20      	cmp	r3, #32
 800f1e0:	d132      	bne.n	800f248 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f1e2:	68bb      	ldr	r3, [r7, #8]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d002      	beq.n	800f1ee <HAL_UART_Receive_DMA+0x24>
 800f1e8:	88fb      	ldrh	r3, [r7, #6]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d101      	bne.n	800f1f2 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800f1ee:	2301      	movs	r3, #1
 800f1f0:	e02b      	b.n	800f24a <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	685b      	ldr	r3, [r3, #4]
 800f1fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f202:	2b00      	cmp	r3, #0
 800f204:	d018      	beq.n	800f238 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f20c:	697b      	ldr	r3, [r7, #20]
 800f20e:	e853 3f00 	ldrex	r3, [r3]
 800f212:	613b      	str	r3, [r7, #16]
   return(result);
 800f214:	693b      	ldr	r3, [r7, #16]
 800f216:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f21a:	627b      	str	r3, [r7, #36]	@ 0x24
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	461a      	mov	r2, r3
 800f222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f224:	623b      	str	r3, [r7, #32]
 800f226:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f228:	69f9      	ldr	r1, [r7, #28]
 800f22a:	6a3a      	ldr	r2, [r7, #32]
 800f22c:	e841 2300 	strex	r3, r2, [r1]
 800f230:	61bb      	str	r3, [r7, #24]
   return(result);
 800f232:	69bb      	ldr	r3, [r7, #24]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d1e6      	bne.n	800f206 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f238:	88fb      	ldrh	r3, [r7, #6]
 800f23a:	461a      	mov	r2, r3
 800f23c:	68b9      	ldr	r1, [r7, #8]
 800f23e:	68f8      	ldr	r0, [r7, #12]
 800f240:	f000 ff66 	bl	8010110 <UART_Start_Receive_DMA>
 800f244:	4603      	mov	r3, r0
 800f246:	e000      	b.n	800f24a <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800f248:	2302      	movs	r3, #2
  }
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	3728      	adds	r7, #40	@ 0x28
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd80      	pop	{r7, pc}

0800f252 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800f252:	b580      	push	{r7, lr}
 800f254:	b090      	sub	sp, #64	@ 0x40
 800f256:	af00      	add	r7, sp, #0
 800f258:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f25e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f266:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	689b      	ldr	r3, [r3, #8]
 800f26e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f272:	2b80      	cmp	r3, #128	@ 0x80
 800f274:	d139      	bne.n	800f2ea <HAL_UART_DMAStop+0x98>
 800f276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f278:	2b21      	cmp	r3, #33	@ 0x21
 800f27a:	d136      	bne.n	800f2ea <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	3308      	adds	r3, #8
 800f282:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f284:	6a3b      	ldr	r3, [r7, #32]
 800f286:	e853 3f00 	ldrex	r3, [r3]
 800f28a:	61fb      	str	r3, [r7, #28]
   return(result);
 800f28c:	69fb      	ldr	r3, [r7, #28]
 800f28e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f292:	637b      	str	r3, [r7, #52]	@ 0x34
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	3308      	adds	r3, #8
 800f29a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f29c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f29e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f2a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f2a4:	e841 2300 	strex	r3, r2, [r1]
 800f2a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d1e5      	bne.n	800f27c <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d015      	beq.n	800f2e4 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f2bc:	4618      	mov	r0, r3
 800f2be:	f7f7 f8d1 	bl	8006464 <HAL_DMA_Abort>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d00d      	beq.n	800f2e4 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	f7f7 fae5 	bl	800689c <HAL_DMA_GetError>
 800f2d2:	4603      	mov	r3, r0
 800f2d4:	2b20      	cmp	r3, #32
 800f2d6:	d105      	bne.n	800f2e4 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2210      	movs	r2, #16
 800f2dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f2e0:	2303      	movs	r3, #3
 800f2e2:	e044      	b.n	800f36e <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f000 ffb3 	bl	8010250 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	689b      	ldr	r3, [r3, #8]
 800f2f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f2f4:	2b40      	cmp	r3, #64	@ 0x40
 800f2f6:	d139      	bne.n	800f36c <HAL_UART_DMAStop+0x11a>
 800f2f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2fa:	2b22      	cmp	r3, #34	@ 0x22
 800f2fc:	d136      	bne.n	800f36c <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	3308      	adds	r3, #8
 800f304:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	e853 3f00 	ldrex	r3, [r3]
 800f30c:	60bb      	str	r3, [r7, #8]
   return(result);
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f314:	633b      	str	r3, [r7, #48]	@ 0x30
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	3308      	adds	r3, #8
 800f31c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f31e:	61ba      	str	r2, [r7, #24]
 800f320:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f322:	6979      	ldr	r1, [r7, #20]
 800f324:	69ba      	ldr	r2, [r7, #24]
 800f326:	e841 2300 	strex	r3, r2, [r1]
 800f32a:	613b      	str	r3, [r7, #16]
   return(result);
 800f32c:	693b      	ldr	r3, [r7, #16]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d1e5      	bne.n	800f2fe <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f336:	2b00      	cmp	r3, #0
 800f338:	d015      	beq.n	800f366 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f33e:	4618      	mov	r0, r3
 800f340:	f7f7 f890 	bl	8006464 <HAL_DMA_Abort>
 800f344:	4603      	mov	r3, r0
 800f346:	2b00      	cmp	r3, #0
 800f348:	d00d      	beq.n	800f366 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f34e:	4618      	mov	r0, r3
 800f350:	f7f7 faa4 	bl	800689c <HAL_DMA_GetError>
 800f354:	4603      	mov	r3, r0
 800f356:	2b20      	cmp	r3, #32
 800f358:	d105      	bne.n	800f366 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	2210      	movs	r2, #16
 800f35e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f362:	2303      	movs	r3, #3
 800f364:	e003      	b.n	800f36e <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800f366:	6878      	ldr	r0, [r7, #4]
 800f368:	f000 ff98 	bl	801029c <UART_EndRxTransfer>
  }

  return HAL_OK;
 800f36c:	2300      	movs	r3, #0
}
 800f36e:	4618      	mov	r0, r3
 800f370:	3740      	adds	r7, #64	@ 0x40
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}
	...

0800f378 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b0ba      	sub	sp, #232	@ 0xe8
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	69db      	ldr	r3, [r3, #28]
 800f386:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	689b      	ldr	r3, [r3, #8]
 800f39a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f39e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f3a2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800f3a6:	4013      	ands	r3, r2
 800f3a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800f3ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d115      	bne.n	800f3e0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800f3b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f3b8:	f003 0320 	and.w	r3, r3, #32
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d00f      	beq.n	800f3e0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f3c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f3c4:	f003 0320 	and.w	r3, r3, #32
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d009      	beq.n	800f3e0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	f000 82b1 	beq.w	800f938 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	4798      	blx	r3
      }
      return;
 800f3de:	e2ab      	b.n	800f938 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f3e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	f000 8117 	beq.w	800f618 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800f3ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f3ee:	f003 0301 	and.w	r3, r3, #1
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d106      	bne.n	800f404 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800f3f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f3fa:	4b85      	ldr	r3, [pc, #532]	@ (800f610 <HAL_UART_IRQHandler+0x298>)
 800f3fc:	4013      	ands	r3, r2
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	f000 810a 	beq.w	800f618 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f408:	f003 0301 	and.w	r3, r3, #1
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d011      	beq.n	800f434 <HAL_UART_IRQHandler+0xbc>
 800f410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f414:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d00b      	beq.n	800f434 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	2201      	movs	r2, #1
 800f422:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f42a:	f043 0201 	orr.w	r2, r3, #1
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f438:	f003 0302 	and.w	r3, r3, #2
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d011      	beq.n	800f464 <HAL_UART_IRQHandler+0xec>
 800f440:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f444:	f003 0301 	and.w	r3, r3, #1
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d00b      	beq.n	800f464 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	2202      	movs	r2, #2
 800f452:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f45a:	f043 0204 	orr.w	r2, r3, #4
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f468:	f003 0304 	and.w	r3, r3, #4
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d011      	beq.n	800f494 <HAL_UART_IRQHandler+0x11c>
 800f470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f474:	f003 0301 	and.w	r3, r3, #1
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d00b      	beq.n	800f494 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	2204      	movs	r2, #4
 800f482:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f48a:	f043 0202 	orr.w	r2, r3, #2
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f498:	f003 0308 	and.w	r3, r3, #8
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d017      	beq.n	800f4d0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f4a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f4a4:	f003 0320 	and.w	r3, r3, #32
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d105      	bne.n	800f4b8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800f4ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f4b0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d00b      	beq.n	800f4d0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	2208      	movs	r2, #8
 800f4be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f4c6:	f043 0208 	orr.w	r2, r3, #8
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f4d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f4d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d012      	beq.n	800f502 <HAL_UART_IRQHandler+0x18a>
 800f4dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f4e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d00c      	beq.n	800f502 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f4f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f4f8:	f043 0220 	orr.w	r2, r3, #32
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f508:	2b00      	cmp	r3, #0
 800f50a:	f000 8217 	beq.w	800f93c <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800f50e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f512:	f003 0320 	and.w	r3, r3, #32
 800f516:	2b00      	cmp	r3, #0
 800f518:	d00d      	beq.n	800f536 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f51a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f51e:	f003 0320 	and.w	r3, r3, #32
 800f522:	2b00      	cmp	r3, #0
 800f524:	d007      	beq.n	800f536 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d003      	beq.n	800f536 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f532:	6878      	ldr	r0, [r7, #4]
 800f534:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f53c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	689b      	ldr	r3, [r3, #8]
 800f546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f54a:	2b40      	cmp	r3, #64	@ 0x40
 800f54c:	d005      	beq.n	800f55a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f54e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f552:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f556:	2b00      	cmp	r3, #0
 800f558:	d04f      	beq.n	800f5fa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f55a:	6878      	ldr	r0, [r7, #4]
 800f55c:	f000 fe9e 	bl	801029c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	689b      	ldr	r3, [r3, #8]
 800f566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f56a:	2b40      	cmp	r3, #64	@ 0x40
 800f56c:	d141      	bne.n	800f5f2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	3308      	adds	r3, #8
 800f574:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f578:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f57c:	e853 3f00 	ldrex	r3, [r3]
 800f580:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f584:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f588:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f58c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	3308      	adds	r3, #8
 800f596:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f59a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f59e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f5a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f5aa:	e841 2300 	strex	r3, r2, [r1]
 800f5ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800f5b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d1d9      	bne.n	800f56e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d013      	beq.n	800f5ea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f5c6:	4a13      	ldr	r2, [pc, #76]	@ (800f614 <HAL_UART_IRQHandler+0x29c>)
 800f5c8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	f7f6 ffb8 	bl	8006544 <HAL_DMA_Abort_IT>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d017      	beq.n	800f60a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f5de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f5e0:	687a      	ldr	r2, [r7, #4]
 800f5e2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800f5e4:	4610      	mov	r0, r2
 800f5e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f5e8:	e00f      	b.n	800f60a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f5ea:	6878      	ldr	r0, [r7, #4]
 800f5ec:	f7f5 ff46 	bl	800547c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f5f0:	e00b      	b.n	800f60a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f5f2:	6878      	ldr	r0, [r7, #4]
 800f5f4:	f7f5 ff42 	bl	800547c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f5f8:	e007      	b.n	800f60a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f5fa:	6878      	ldr	r0, [r7, #4]
 800f5fc:	f7f5 ff3e 	bl	800547c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	2200      	movs	r2, #0
 800f604:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800f608:	e198      	b.n	800f93c <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f60a:	bf00      	nop
    return;
 800f60c:	e196      	b.n	800f93c <HAL_UART_IRQHandler+0x5c4>
 800f60e:	bf00      	nop
 800f610:	04000120 	.word	0x04000120
 800f614:	080105b3 	.word	0x080105b3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f61c:	2b01      	cmp	r3, #1
 800f61e:	f040 8166 	bne.w	800f8ee <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f626:	f003 0310 	and.w	r3, r3, #16
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	f000 815f 	beq.w	800f8ee <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f634:	f003 0310 	and.w	r3, r3, #16
 800f638:	2b00      	cmp	r3, #0
 800f63a:	f000 8158 	beq.w	800f8ee <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	2210      	movs	r2, #16
 800f644:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	689b      	ldr	r3, [r3, #8]
 800f64c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f650:	2b40      	cmp	r3, #64	@ 0x40
 800f652:	f040 80d0 	bne.w	800f7f6 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	685b      	ldr	r3, [r3, #4]
 800f65e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f662:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800f666:	2b00      	cmp	r3, #0
 800f668:	f000 80ab 	beq.w	800f7c2 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f672:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f676:	429a      	cmp	r2, r3
 800f678:	f080 80a3 	bcs.w	800f7c2 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f682:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f68a:	69db      	ldr	r3, [r3, #28]
 800f68c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f690:	f000 8086 	beq.w	800f7a0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f69c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f6a0:	e853 3f00 	ldrex	r3, [r3]
 800f6a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800f6a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f6ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f6b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	461a      	mov	r2, r3
 800f6ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f6be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f6c2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f6ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f6ce:	e841 2300 	strex	r3, r2, [r1]
 800f6d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800f6d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d1da      	bne.n	800f694 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	3308      	adds	r3, #8
 800f6e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f6e8:	e853 3f00 	ldrex	r3, [r3]
 800f6ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f6ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f6f0:	f023 0301 	bic.w	r3, r3, #1
 800f6f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	3308      	adds	r3, #8
 800f6fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f702:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f706:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f708:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f70a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f70e:	e841 2300 	strex	r3, r2, [r1]
 800f712:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f714:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f716:	2b00      	cmp	r3, #0
 800f718:	d1e1      	bne.n	800f6de <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	3308      	adds	r3, #8
 800f720:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f722:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f724:	e853 3f00 	ldrex	r3, [r3]
 800f728:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f72a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f72c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f730:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	3308      	adds	r3, #8
 800f73a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800f73e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f740:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f742:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f744:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f746:	e841 2300 	strex	r3, r2, [r1]
 800f74a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f74c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d1e3      	bne.n	800f71a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	2220      	movs	r2, #32
 800f756:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	2200      	movs	r2, #0
 800f75e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f766:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f768:	e853 3f00 	ldrex	r3, [r3]
 800f76c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f76e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f770:	f023 0310 	bic.w	r3, r3, #16
 800f774:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	461a      	mov	r2, r3
 800f77e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f782:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f784:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f786:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f788:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f78a:	e841 2300 	strex	r3, r2, [r1]
 800f78e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f790:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f792:	2b00      	cmp	r3, #0
 800f794:	d1e4      	bne.n	800f760 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f79a:	4618      	mov	r0, r3
 800f79c:	f7f6 fe62 	bl	8006464 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	2202      	movs	r2, #2
 800f7a4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f7b2:	b29b      	uxth	r3, r3
 800f7b4:	1ad3      	subs	r3, r2, r3
 800f7b6:	b29b      	uxth	r3, r3
 800f7b8:	4619      	mov	r1, r3
 800f7ba:	6878      	ldr	r0, [r7, #4]
 800f7bc:	f000 f8d2 	bl	800f964 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800f7c0:	e0be      	b.n	800f940 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f7c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f7cc:	429a      	cmp	r2, r3
 800f7ce:	f040 80b7 	bne.w	800f940 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f7d6:	69db      	ldr	r3, [r3, #28]
 800f7d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f7dc:	f040 80b0 	bne.w	800f940 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	2202      	movs	r2, #2
 800f7e4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f7ec:	4619      	mov	r1, r3
 800f7ee:	6878      	ldr	r0, [r7, #4]
 800f7f0:	f000 f8b8 	bl	800f964 <HAL_UARTEx_RxEventCallback>
      return;
 800f7f4:	e0a4      	b.n	800f940 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f802:	b29b      	uxth	r3, r3
 800f804:	1ad3      	subs	r3, r2, r3
 800f806:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f810:	b29b      	uxth	r3, r3
 800f812:	2b00      	cmp	r3, #0
 800f814:	f000 8096 	beq.w	800f944 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800f818:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	f000 8091 	beq.w	800f944 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f82a:	e853 3f00 	ldrex	r3, [r3]
 800f82e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f832:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f836:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	461a      	mov	r2, r3
 800f840:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f844:	647b      	str	r3, [r7, #68]	@ 0x44
 800f846:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f848:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f84a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f84c:	e841 2300 	strex	r3, r2, [r1]
 800f850:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f854:	2b00      	cmp	r3, #0
 800f856:	d1e4      	bne.n	800f822 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	3308      	adds	r3, #8
 800f85e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f862:	e853 3f00 	ldrex	r3, [r3]
 800f866:	623b      	str	r3, [r7, #32]
   return(result);
 800f868:	6a3b      	ldr	r3, [r7, #32]
 800f86a:	f023 0301 	bic.w	r3, r3, #1
 800f86e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	3308      	adds	r3, #8
 800f878:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f87c:	633a      	str	r2, [r7, #48]	@ 0x30
 800f87e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f880:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f882:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f884:	e841 2300 	strex	r3, r2, [r1]
 800f888:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f88a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d1e3      	bne.n	800f858 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	2220      	movs	r2, #32
 800f894:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	2200      	movs	r2, #0
 800f89c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8aa:	693b      	ldr	r3, [r7, #16]
 800f8ac:	e853 3f00 	ldrex	r3, [r3]
 800f8b0:	60fb      	str	r3, [r7, #12]
   return(result);
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	f023 0310 	bic.w	r3, r3, #16
 800f8b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	461a      	mov	r2, r3
 800f8c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f8c6:	61fb      	str	r3, [r7, #28]
 800f8c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8ca:	69b9      	ldr	r1, [r7, #24]
 800f8cc:	69fa      	ldr	r2, [r7, #28]
 800f8ce:	e841 2300 	strex	r3, r2, [r1]
 800f8d2:	617b      	str	r3, [r7, #20]
   return(result);
 800f8d4:	697b      	ldr	r3, [r7, #20]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d1e4      	bne.n	800f8a4 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	2202      	movs	r2, #2
 800f8de:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f8e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f8e4:	4619      	mov	r1, r3
 800f8e6:	6878      	ldr	r0, [r7, #4]
 800f8e8:	f000 f83c 	bl	800f964 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f8ec:	e02a      	b.n	800f944 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800f8ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f8f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d00e      	beq.n	800f918 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800f8fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f8fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f902:	2b00      	cmp	r3, #0
 800f904:	d008      	beq.n	800f918 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d01c      	beq.n	800f948 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f912:	6878      	ldr	r0, [r7, #4]
 800f914:	4798      	blx	r3
    }
    return;
 800f916:	e017      	b.n	800f948 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f91c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f920:	2b00      	cmp	r3, #0
 800f922:	d012      	beq.n	800f94a <HAL_UART_IRQHandler+0x5d2>
 800f924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d00c      	beq.n	800f94a <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800f930:	6878      	ldr	r0, [r7, #4]
 800f932:	f000 fe50 	bl	80105d6 <UART_EndTransmit_IT>
    return;
 800f936:	e008      	b.n	800f94a <HAL_UART_IRQHandler+0x5d2>
      return;
 800f938:	bf00      	nop
 800f93a:	e006      	b.n	800f94a <HAL_UART_IRQHandler+0x5d2>
    return;
 800f93c:	bf00      	nop
 800f93e:	e004      	b.n	800f94a <HAL_UART_IRQHandler+0x5d2>
      return;
 800f940:	bf00      	nop
 800f942:	e002      	b.n	800f94a <HAL_UART_IRQHandler+0x5d2>
      return;
 800f944:	bf00      	nop
 800f946:	e000      	b.n	800f94a <HAL_UART_IRQHandler+0x5d2>
    return;
 800f948:	bf00      	nop
  }

}
 800f94a:	37e8      	adds	r7, #232	@ 0xe8
 800f94c:	46bd      	mov	sp, r7
 800f94e:	bd80      	pop	{r7, pc}

0800f950 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f950:	b480      	push	{r7}
 800f952:	b083      	sub	sp, #12
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f958:	bf00      	nop
 800f95a:	370c      	adds	r7, #12
 800f95c:	46bd      	mov	sp, r7
 800f95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f962:	4770      	bx	lr

0800f964 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f964:	b480      	push	{r7}
 800f966:	b083      	sub	sp, #12
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
 800f96c:	460b      	mov	r3, r1
 800f96e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f970:	bf00      	nop
 800f972:	370c      	adds	r7, #12
 800f974:	46bd      	mov	sp, r7
 800f976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97a:	4770      	bx	lr

0800f97c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b088      	sub	sp, #32
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f984:	2300      	movs	r3, #0
 800f986:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	689a      	ldr	r2, [r3, #8]
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	691b      	ldr	r3, [r3, #16]
 800f990:	431a      	orrs	r2, r3
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	695b      	ldr	r3, [r3, #20]
 800f996:	431a      	orrs	r2, r3
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	69db      	ldr	r3, [r3, #28]
 800f99c:	4313      	orrs	r3, r2
 800f99e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	681a      	ldr	r2, [r3, #0]
 800f9a6:	4ba6      	ldr	r3, [pc, #664]	@ (800fc40 <UART_SetConfig+0x2c4>)
 800f9a8:	4013      	ands	r3, r2
 800f9aa:	687a      	ldr	r2, [r7, #4]
 800f9ac:	6812      	ldr	r2, [r2, #0]
 800f9ae:	6979      	ldr	r1, [r7, #20]
 800f9b0:	430b      	orrs	r3, r1
 800f9b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	685b      	ldr	r3, [r3, #4]
 800f9ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	68da      	ldr	r2, [r3, #12]
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	430a      	orrs	r2, r1
 800f9c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	699b      	ldr	r3, [r3, #24]
 800f9ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	6a1b      	ldr	r3, [r3, #32]
 800f9d4:	697a      	ldr	r2, [r7, #20]
 800f9d6:	4313      	orrs	r3, r2
 800f9d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	689b      	ldr	r3, [r3, #8]
 800f9e0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	697a      	ldr	r2, [r7, #20]
 800f9ea:	430a      	orrs	r2, r1
 800f9ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	4a94      	ldr	r2, [pc, #592]	@ (800fc44 <UART_SetConfig+0x2c8>)
 800f9f4:	4293      	cmp	r3, r2
 800f9f6:	d120      	bne.n	800fa3a <UART_SetConfig+0xbe>
 800f9f8:	4b93      	ldr	r3, [pc, #588]	@ (800fc48 <UART_SetConfig+0x2cc>)
 800f9fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f9fe:	f003 0303 	and.w	r3, r3, #3
 800fa02:	2b03      	cmp	r3, #3
 800fa04:	d816      	bhi.n	800fa34 <UART_SetConfig+0xb8>
 800fa06:	a201      	add	r2, pc, #4	@ (adr r2, 800fa0c <UART_SetConfig+0x90>)
 800fa08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa0c:	0800fa1d 	.word	0x0800fa1d
 800fa10:	0800fa29 	.word	0x0800fa29
 800fa14:	0800fa23 	.word	0x0800fa23
 800fa18:	0800fa2f 	.word	0x0800fa2f
 800fa1c:	2301      	movs	r3, #1
 800fa1e:	77fb      	strb	r3, [r7, #31]
 800fa20:	e150      	b.n	800fcc4 <UART_SetConfig+0x348>
 800fa22:	2302      	movs	r3, #2
 800fa24:	77fb      	strb	r3, [r7, #31]
 800fa26:	e14d      	b.n	800fcc4 <UART_SetConfig+0x348>
 800fa28:	2304      	movs	r3, #4
 800fa2a:	77fb      	strb	r3, [r7, #31]
 800fa2c:	e14a      	b.n	800fcc4 <UART_SetConfig+0x348>
 800fa2e:	2308      	movs	r3, #8
 800fa30:	77fb      	strb	r3, [r7, #31]
 800fa32:	e147      	b.n	800fcc4 <UART_SetConfig+0x348>
 800fa34:	2310      	movs	r3, #16
 800fa36:	77fb      	strb	r3, [r7, #31]
 800fa38:	e144      	b.n	800fcc4 <UART_SetConfig+0x348>
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	4a83      	ldr	r2, [pc, #524]	@ (800fc4c <UART_SetConfig+0x2d0>)
 800fa40:	4293      	cmp	r3, r2
 800fa42:	d132      	bne.n	800faaa <UART_SetConfig+0x12e>
 800fa44:	4b80      	ldr	r3, [pc, #512]	@ (800fc48 <UART_SetConfig+0x2cc>)
 800fa46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fa4a:	f003 030c 	and.w	r3, r3, #12
 800fa4e:	2b0c      	cmp	r3, #12
 800fa50:	d828      	bhi.n	800faa4 <UART_SetConfig+0x128>
 800fa52:	a201      	add	r2, pc, #4	@ (adr r2, 800fa58 <UART_SetConfig+0xdc>)
 800fa54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa58:	0800fa8d 	.word	0x0800fa8d
 800fa5c:	0800faa5 	.word	0x0800faa5
 800fa60:	0800faa5 	.word	0x0800faa5
 800fa64:	0800faa5 	.word	0x0800faa5
 800fa68:	0800fa99 	.word	0x0800fa99
 800fa6c:	0800faa5 	.word	0x0800faa5
 800fa70:	0800faa5 	.word	0x0800faa5
 800fa74:	0800faa5 	.word	0x0800faa5
 800fa78:	0800fa93 	.word	0x0800fa93
 800fa7c:	0800faa5 	.word	0x0800faa5
 800fa80:	0800faa5 	.word	0x0800faa5
 800fa84:	0800faa5 	.word	0x0800faa5
 800fa88:	0800fa9f 	.word	0x0800fa9f
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	77fb      	strb	r3, [r7, #31]
 800fa90:	e118      	b.n	800fcc4 <UART_SetConfig+0x348>
 800fa92:	2302      	movs	r3, #2
 800fa94:	77fb      	strb	r3, [r7, #31]
 800fa96:	e115      	b.n	800fcc4 <UART_SetConfig+0x348>
 800fa98:	2304      	movs	r3, #4
 800fa9a:	77fb      	strb	r3, [r7, #31]
 800fa9c:	e112      	b.n	800fcc4 <UART_SetConfig+0x348>
 800fa9e:	2308      	movs	r3, #8
 800faa0:	77fb      	strb	r3, [r7, #31]
 800faa2:	e10f      	b.n	800fcc4 <UART_SetConfig+0x348>
 800faa4:	2310      	movs	r3, #16
 800faa6:	77fb      	strb	r3, [r7, #31]
 800faa8:	e10c      	b.n	800fcc4 <UART_SetConfig+0x348>
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	4a68      	ldr	r2, [pc, #416]	@ (800fc50 <UART_SetConfig+0x2d4>)
 800fab0:	4293      	cmp	r3, r2
 800fab2:	d120      	bne.n	800faf6 <UART_SetConfig+0x17a>
 800fab4:	4b64      	ldr	r3, [pc, #400]	@ (800fc48 <UART_SetConfig+0x2cc>)
 800fab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800faba:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800fabe:	2b30      	cmp	r3, #48	@ 0x30
 800fac0:	d013      	beq.n	800faea <UART_SetConfig+0x16e>
 800fac2:	2b30      	cmp	r3, #48	@ 0x30
 800fac4:	d814      	bhi.n	800faf0 <UART_SetConfig+0x174>
 800fac6:	2b20      	cmp	r3, #32
 800fac8:	d009      	beq.n	800fade <UART_SetConfig+0x162>
 800faca:	2b20      	cmp	r3, #32
 800facc:	d810      	bhi.n	800faf0 <UART_SetConfig+0x174>
 800face:	2b00      	cmp	r3, #0
 800fad0:	d002      	beq.n	800fad8 <UART_SetConfig+0x15c>
 800fad2:	2b10      	cmp	r3, #16
 800fad4:	d006      	beq.n	800fae4 <UART_SetConfig+0x168>
 800fad6:	e00b      	b.n	800faf0 <UART_SetConfig+0x174>
 800fad8:	2300      	movs	r3, #0
 800fada:	77fb      	strb	r3, [r7, #31]
 800fadc:	e0f2      	b.n	800fcc4 <UART_SetConfig+0x348>
 800fade:	2302      	movs	r3, #2
 800fae0:	77fb      	strb	r3, [r7, #31]
 800fae2:	e0ef      	b.n	800fcc4 <UART_SetConfig+0x348>
 800fae4:	2304      	movs	r3, #4
 800fae6:	77fb      	strb	r3, [r7, #31]
 800fae8:	e0ec      	b.n	800fcc4 <UART_SetConfig+0x348>
 800faea:	2308      	movs	r3, #8
 800faec:	77fb      	strb	r3, [r7, #31]
 800faee:	e0e9      	b.n	800fcc4 <UART_SetConfig+0x348>
 800faf0:	2310      	movs	r3, #16
 800faf2:	77fb      	strb	r3, [r7, #31]
 800faf4:	e0e6      	b.n	800fcc4 <UART_SetConfig+0x348>
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	4a56      	ldr	r2, [pc, #344]	@ (800fc54 <UART_SetConfig+0x2d8>)
 800fafc:	4293      	cmp	r3, r2
 800fafe:	d120      	bne.n	800fb42 <UART_SetConfig+0x1c6>
 800fb00:	4b51      	ldr	r3, [pc, #324]	@ (800fc48 <UART_SetConfig+0x2cc>)
 800fb02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fb06:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800fb0a:	2bc0      	cmp	r3, #192	@ 0xc0
 800fb0c:	d013      	beq.n	800fb36 <UART_SetConfig+0x1ba>
 800fb0e:	2bc0      	cmp	r3, #192	@ 0xc0
 800fb10:	d814      	bhi.n	800fb3c <UART_SetConfig+0x1c0>
 800fb12:	2b80      	cmp	r3, #128	@ 0x80
 800fb14:	d009      	beq.n	800fb2a <UART_SetConfig+0x1ae>
 800fb16:	2b80      	cmp	r3, #128	@ 0x80
 800fb18:	d810      	bhi.n	800fb3c <UART_SetConfig+0x1c0>
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d002      	beq.n	800fb24 <UART_SetConfig+0x1a8>
 800fb1e:	2b40      	cmp	r3, #64	@ 0x40
 800fb20:	d006      	beq.n	800fb30 <UART_SetConfig+0x1b4>
 800fb22:	e00b      	b.n	800fb3c <UART_SetConfig+0x1c0>
 800fb24:	2300      	movs	r3, #0
 800fb26:	77fb      	strb	r3, [r7, #31]
 800fb28:	e0cc      	b.n	800fcc4 <UART_SetConfig+0x348>
 800fb2a:	2302      	movs	r3, #2
 800fb2c:	77fb      	strb	r3, [r7, #31]
 800fb2e:	e0c9      	b.n	800fcc4 <UART_SetConfig+0x348>
 800fb30:	2304      	movs	r3, #4
 800fb32:	77fb      	strb	r3, [r7, #31]
 800fb34:	e0c6      	b.n	800fcc4 <UART_SetConfig+0x348>
 800fb36:	2308      	movs	r3, #8
 800fb38:	77fb      	strb	r3, [r7, #31]
 800fb3a:	e0c3      	b.n	800fcc4 <UART_SetConfig+0x348>
 800fb3c:	2310      	movs	r3, #16
 800fb3e:	77fb      	strb	r3, [r7, #31]
 800fb40:	e0c0      	b.n	800fcc4 <UART_SetConfig+0x348>
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	4a44      	ldr	r2, [pc, #272]	@ (800fc58 <UART_SetConfig+0x2dc>)
 800fb48:	4293      	cmp	r3, r2
 800fb4a:	d125      	bne.n	800fb98 <UART_SetConfig+0x21c>
 800fb4c:	4b3e      	ldr	r3, [pc, #248]	@ (800fc48 <UART_SetConfig+0x2cc>)
 800fb4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fb52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fb56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fb5a:	d017      	beq.n	800fb8c <UART_SetConfig+0x210>
 800fb5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fb60:	d817      	bhi.n	800fb92 <UART_SetConfig+0x216>
 800fb62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fb66:	d00b      	beq.n	800fb80 <UART_SetConfig+0x204>
 800fb68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fb6c:	d811      	bhi.n	800fb92 <UART_SetConfig+0x216>
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d003      	beq.n	800fb7a <UART_SetConfig+0x1fe>
 800fb72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fb76:	d006      	beq.n	800fb86 <UART_SetConfig+0x20a>
 800fb78:	e00b      	b.n	800fb92 <UART_SetConfig+0x216>
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	77fb      	strb	r3, [r7, #31]
 800fb7e:	e0a1      	b.n	800fcc4 <UART_SetConfig+0x348>
 800fb80:	2302      	movs	r3, #2
 800fb82:	77fb      	strb	r3, [r7, #31]
 800fb84:	e09e      	b.n	800fcc4 <UART_SetConfig+0x348>
 800fb86:	2304      	movs	r3, #4
 800fb88:	77fb      	strb	r3, [r7, #31]
 800fb8a:	e09b      	b.n	800fcc4 <UART_SetConfig+0x348>
 800fb8c:	2308      	movs	r3, #8
 800fb8e:	77fb      	strb	r3, [r7, #31]
 800fb90:	e098      	b.n	800fcc4 <UART_SetConfig+0x348>
 800fb92:	2310      	movs	r3, #16
 800fb94:	77fb      	strb	r3, [r7, #31]
 800fb96:	e095      	b.n	800fcc4 <UART_SetConfig+0x348>
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	4a2f      	ldr	r2, [pc, #188]	@ (800fc5c <UART_SetConfig+0x2e0>)
 800fb9e:	4293      	cmp	r3, r2
 800fba0:	d125      	bne.n	800fbee <UART_SetConfig+0x272>
 800fba2:	4b29      	ldr	r3, [pc, #164]	@ (800fc48 <UART_SetConfig+0x2cc>)
 800fba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fba8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800fbac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800fbb0:	d017      	beq.n	800fbe2 <UART_SetConfig+0x266>
 800fbb2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800fbb6:	d817      	bhi.n	800fbe8 <UART_SetConfig+0x26c>
 800fbb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fbbc:	d00b      	beq.n	800fbd6 <UART_SetConfig+0x25a>
 800fbbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fbc2:	d811      	bhi.n	800fbe8 <UART_SetConfig+0x26c>
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d003      	beq.n	800fbd0 <UART_SetConfig+0x254>
 800fbc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fbcc:	d006      	beq.n	800fbdc <UART_SetConfig+0x260>
 800fbce:	e00b      	b.n	800fbe8 <UART_SetConfig+0x26c>
 800fbd0:	2301      	movs	r3, #1
 800fbd2:	77fb      	strb	r3, [r7, #31]
 800fbd4:	e076      	b.n	800fcc4 <UART_SetConfig+0x348>
 800fbd6:	2302      	movs	r3, #2
 800fbd8:	77fb      	strb	r3, [r7, #31]
 800fbda:	e073      	b.n	800fcc4 <UART_SetConfig+0x348>
 800fbdc:	2304      	movs	r3, #4
 800fbde:	77fb      	strb	r3, [r7, #31]
 800fbe0:	e070      	b.n	800fcc4 <UART_SetConfig+0x348>
 800fbe2:	2308      	movs	r3, #8
 800fbe4:	77fb      	strb	r3, [r7, #31]
 800fbe6:	e06d      	b.n	800fcc4 <UART_SetConfig+0x348>
 800fbe8:	2310      	movs	r3, #16
 800fbea:	77fb      	strb	r3, [r7, #31]
 800fbec:	e06a      	b.n	800fcc4 <UART_SetConfig+0x348>
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	4a1b      	ldr	r2, [pc, #108]	@ (800fc60 <UART_SetConfig+0x2e4>)
 800fbf4:	4293      	cmp	r3, r2
 800fbf6:	d138      	bne.n	800fc6a <UART_SetConfig+0x2ee>
 800fbf8:	4b13      	ldr	r3, [pc, #76]	@ (800fc48 <UART_SetConfig+0x2cc>)
 800fbfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fbfe:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800fc02:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800fc06:	d017      	beq.n	800fc38 <UART_SetConfig+0x2bc>
 800fc08:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800fc0c:	d82a      	bhi.n	800fc64 <UART_SetConfig+0x2e8>
 800fc0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fc12:	d00b      	beq.n	800fc2c <UART_SetConfig+0x2b0>
 800fc14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fc18:	d824      	bhi.n	800fc64 <UART_SetConfig+0x2e8>
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d003      	beq.n	800fc26 <UART_SetConfig+0x2aa>
 800fc1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fc22:	d006      	beq.n	800fc32 <UART_SetConfig+0x2b6>
 800fc24:	e01e      	b.n	800fc64 <UART_SetConfig+0x2e8>
 800fc26:	2300      	movs	r3, #0
 800fc28:	77fb      	strb	r3, [r7, #31]
 800fc2a:	e04b      	b.n	800fcc4 <UART_SetConfig+0x348>
 800fc2c:	2302      	movs	r3, #2
 800fc2e:	77fb      	strb	r3, [r7, #31]
 800fc30:	e048      	b.n	800fcc4 <UART_SetConfig+0x348>
 800fc32:	2304      	movs	r3, #4
 800fc34:	77fb      	strb	r3, [r7, #31]
 800fc36:	e045      	b.n	800fcc4 <UART_SetConfig+0x348>
 800fc38:	2308      	movs	r3, #8
 800fc3a:	77fb      	strb	r3, [r7, #31]
 800fc3c:	e042      	b.n	800fcc4 <UART_SetConfig+0x348>
 800fc3e:	bf00      	nop
 800fc40:	efff69f3 	.word	0xefff69f3
 800fc44:	40011000 	.word	0x40011000
 800fc48:	40023800 	.word	0x40023800
 800fc4c:	40004400 	.word	0x40004400
 800fc50:	40004800 	.word	0x40004800
 800fc54:	40004c00 	.word	0x40004c00
 800fc58:	40005000 	.word	0x40005000
 800fc5c:	40011400 	.word	0x40011400
 800fc60:	40007800 	.word	0x40007800
 800fc64:	2310      	movs	r3, #16
 800fc66:	77fb      	strb	r3, [r7, #31]
 800fc68:	e02c      	b.n	800fcc4 <UART_SetConfig+0x348>
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	4a72      	ldr	r2, [pc, #456]	@ (800fe38 <UART_SetConfig+0x4bc>)
 800fc70:	4293      	cmp	r3, r2
 800fc72:	d125      	bne.n	800fcc0 <UART_SetConfig+0x344>
 800fc74:	4b71      	ldr	r3, [pc, #452]	@ (800fe3c <UART_SetConfig+0x4c0>)
 800fc76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fc7a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800fc7e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800fc82:	d017      	beq.n	800fcb4 <UART_SetConfig+0x338>
 800fc84:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800fc88:	d817      	bhi.n	800fcba <UART_SetConfig+0x33e>
 800fc8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fc8e:	d00b      	beq.n	800fca8 <UART_SetConfig+0x32c>
 800fc90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fc94:	d811      	bhi.n	800fcba <UART_SetConfig+0x33e>
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d003      	beq.n	800fca2 <UART_SetConfig+0x326>
 800fc9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fc9e:	d006      	beq.n	800fcae <UART_SetConfig+0x332>
 800fca0:	e00b      	b.n	800fcba <UART_SetConfig+0x33e>
 800fca2:	2300      	movs	r3, #0
 800fca4:	77fb      	strb	r3, [r7, #31]
 800fca6:	e00d      	b.n	800fcc4 <UART_SetConfig+0x348>
 800fca8:	2302      	movs	r3, #2
 800fcaa:	77fb      	strb	r3, [r7, #31]
 800fcac:	e00a      	b.n	800fcc4 <UART_SetConfig+0x348>
 800fcae:	2304      	movs	r3, #4
 800fcb0:	77fb      	strb	r3, [r7, #31]
 800fcb2:	e007      	b.n	800fcc4 <UART_SetConfig+0x348>
 800fcb4:	2308      	movs	r3, #8
 800fcb6:	77fb      	strb	r3, [r7, #31]
 800fcb8:	e004      	b.n	800fcc4 <UART_SetConfig+0x348>
 800fcba:	2310      	movs	r3, #16
 800fcbc:	77fb      	strb	r3, [r7, #31]
 800fcbe:	e001      	b.n	800fcc4 <UART_SetConfig+0x348>
 800fcc0:	2310      	movs	r3, #16
 800fcc2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	69db      	ldr	r3, [r3, #28]
 800fcc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fccc:	d15b      	bne.n	800fd86 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800fcce:	7ffb      	ldrb	r3, [r7, #31]
 800fcd0:	2b08      	cmp	r3, #8
 800fcd2:	d828      	bhi.n	800fd26 <UART_SetConfig+0x3aa>
 800fcd4:	a201      	add	r2, pc, #4	@ (adr r2, 800fcdc <UART_SetConfig+0x360>)
 800fcd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcda:	bf00      	nop
 800fcdc:	0800fd01 	.word	0x0800fd01
 800fce0:	0800fd09 	.word	0x0800fd09
 800fce4:	0800fd11 	.word	0x0800fd11
 800fce8:	0800fd27 	.word	0x0800fd27
 800fcec:	0800fd17 	.word	0x0800fd17
 800fcf0:	0800fd27 	.word	0x0800fd27
 800fcf4:	0800fd27 	.word	0x0800fd27
 800fcf8:	0800fd27 	.word	0x0800fd27
 800fcfc:	0800fd1f 	.word	0x0800fd1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fd00:	f7fb f8b6 	bl	800ae70 <HAL_RCC_GetPCLK1Freq>
 800fd04:	61b8      	str	r0, [r7, #24]
        break;
 800fd06:	e013      	b.n	800fd30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fd08:	f7fb f8c6 	bl	800ae98 <HAL_RCC_GetPCLK2Freq>
 800fd0c:	61b8      	str	r0, [r7, #24]
        break;
 800fd0e:	e00f      	b.n	800fd30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fd10:	4b4b      	ldr	r3, [pc, #300]	@ (800fe40 <UART_SetConfig+0x4c4>)
 800fd12:	61bb      	str	r3, [r7, #24]
        break;
 800fd14:	e00c      	b.n	800fd30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fd16:	f7fa ffd9 	bl	800accc <HAL_RCC_GetSysClockFreq>
 800fd1a:	61b8      	str	r0, [r7, #24]
        break;
 800fd1c:	e008      	b.n	800fd30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fd1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fd22:	61bb      	str	r3, [r7, #24]
        break;
 800fd24:	e004      	b.n	800fd30 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800fd26:	2300      	movs	r3, #0
 800fd28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800fd2a:	2301      	movs	r3, #1
 800fd2c:	77bb      	strb	r3, [r7, #30]
        break;
 800fd2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fd30:	69bb      	ldr	r3, [r7, #24]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d074      	beq.n	800fe20 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800fd36:	69bb      	ldr	r3, [r7, #24]
 800fd38:	005a      	lsls	r2, r3, #1
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	685b      	ldr	r3, [r3, #4]
 800fd3e:	085b      	lsrs	r3, r3, #1
 800fd40:	441a      	add	r2, r3
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	685b      	ldr	r3, [r3, #4]
 800fd46:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fd4c:	693b      	ldr	r3, [r7, #16]
 800fd4e:	2b0f      	cmp	r3, #15
 800fd50:	d916      	bls.n	800fd80 <UART_SetConfig+0x404>
 800fd52:	693b      	ldr	r3, [r7, #16]
 800fd54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fd58:	d212      	bcs.n	800fd80 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fd5a:	693b      	ldr	r3, [r7, #16]
 800fd5c:	b29b      	uxth	r3, r3
 800fd5e:	f023 030f 	bic.w	r3, r3, #15
 800fd62:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fd64:	693b      	ldr	r3, [r7, #16]
 800fd66:	085b      	lsrs	r3, r3, #1
 800fd68:	b29b      	uxth	r3, r3
 800fd6a:	f003 0307 	and.w	r3, r3, #7
 800fd6e:	b29a      	uxth	r2, r3
 800fd70:	89fb      	ldrh	r3, [r7, #14]
 800fd72:	4313      	orrs	r3, r2
 800fd74:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	89fa      	ldrh	r2, [r7, #14]
 800fd7c:	60da      	str	r2, [r3, #12]
 800fd7e:	e04f      	b.n	800fe20 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800fd80:	2301      	movs	r3, #1
 800fd82:	77bb      	strb	r3, [r7, #30]
 800fd84:	e04c      	b.n	800fe20 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fd86:	7ffb      	ldrb	r3, [r7, #31]
 800fd88:	2b08      	cmp	r3, #8
 800fd8a:	d828      	bhi.n	800fdde <UART_SetConfig+0x462>
 800fd8c:	a201      	add	r2, pc, #4	@ (adr r2, 800fd94 <UART_SetConfig+0x418>)
 800fd8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd92:	bf00      	nop
 800fd94:	0800fdb9 	.word	0x0800fdb9
 800fd98:	0800fdc1 	.word	0x0800fdc1
 800fd9c:	0800fdc9 	.word	0x0800fdc9
 800fda0:	0800fddf 	.word	0x0800fddf
 800fda4:	0800fdcf 	.word	0x0800fdcf
 800fda8:	0800fddf 	.word	0x0800fddf
 800fdac:	0800fddf 	.word	0x0800fddf
 800fdb0:	0800fddf 	.word	0x0800fddf
 800fdb4:	0800fdd7 	.word	0x0800fdd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fdb8:	f7fb f85a 	bl	800ae70 <HAL_RCC_GetPCLK1Freq>
 800fdbc:	61b8      	str	r0, [r7, #24]
        break;
 800fdbe:	e013      	b.n	800fde8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fdc0:	f7fb f86a 	bl	800ae98 <HAL_RCC_GetPCLK2Freq>
 800fdc4:	61b8      	str	r0, [r7, #24]
        break;
 800fdc6:	e00f      	b.n	800fde8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fdc8:	4b1d      	ldr	r3, [pc, #116]	@ (800fe40 <UART_SetConfig+0x4c4>)
 800fdca:	61bb      	str	r3, [r7, #24]
        break;
 800fdcc:	e00c      	b.n	800fde8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fdce:	f7fa ff7d 	bl	800accc <HAL_RCC_GetSysClockFreq>
 800fdd2:	61b8      	str	r0, [r7, #24]
        break;
 800fdd4:	e008      	b.n	800fde8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fdd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fdda:	61bb      	str	r3, [r7, #24]
        break;
 800fddc:	e004      	b.n	800fde8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800fdde:	2300      	movs	r3, #0
 800fde0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800fde2:	2301      	movs	r3, #1
 800fde4:	77bb      	strb	r3, [r7, #30]
        break;
 800fde6:	bf00      	nop
    }

    if (pclk != 0U)
 800fde8:	69bb      	ldr	r3, [r7, #24]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d018      	beq.n	800fe20 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	685b      	ldr	r3, [r3, #4]
 800fdf2:	085a      	lsrs	r2, r3, #1
 800fdf4:	69bb      	ldr	r3, [r7, #24]
 800fdf6:	441a      	add	r2, r3
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	685b      	ldr	r3, [r3, #4]
 800fdfc:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fe02:	693b      	ldr	r3, [r7, #16]
 800fe04:	2b0f      	cmp	r3, #15
 800fe06:	d909      	bls.n	800fe1c <UART_SetConfig+0x4a0>
 800fe08:	693b      	ldr	r3, [r7, #16]
 800fe0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fe0e:	d205      	bcs.n	800fe1c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fe10:	693b      	ldr	r3, [r7, #16]
 800fe12:	b29a      	uxth	r2, r3
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	60da      	str	r2, [r3, #12]
 800fe1a:	e001      	b.n	800fe20 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800fe1c:	2301      	movs	r3, #1
 800fe1e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	2200      	movs	r2, #0
 800fe24:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	2200      	movs	r2, #0
 800fe2a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800fe2c:	7fbb      	ldrb	r3, [r7, #30]
}
 800fe2e:	4618      	mov	r0, r3
 800fe30:	3720      	adds	r7, #32
 800fe32:	46bd      	mov	sp, r7
 800fe34:	bd80      	pop	{r7, pc}
 800fe36:	bf00      	nop
 800fe38:	40007c00 	.word	0x40007c00
 800fe3c:	40023800 	.word	0x40023800
 800fe40:	00f42400 	.word	0x00f42400

0800fe44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fe44:	b480      	push	{r7}
 800fe46:	b083      	sub	sp, #12
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe50:	f003 0308 	and.w	r3, r3, #8
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d00a      	beq.n	800fe6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	685b      	ldr	r3, [r3, #4]
 800fe5e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	430a      	orrs	r2, r1
 800fe6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe72:	f003 0301 	and.w	r3, r3, #1
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d00a      	beq.n	800fe90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	685b      	ldr	r3, [r3, #4]
 800fe80:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	430a      	orrs	r2, r1
 800fe8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe94:	f003 0302 	and.w	r3, r3, #2
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d00a      	beq.n	800feb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	685b      	ldr	r3, [r3, #4]
 800fea2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	430a      	orrs	r2, r1
 800feb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800feb6:	f003 0304 	and.w	r3, r3, #4
 800feba:	2b00      	cmp	r3, #0
 800febc:	d00a      	beq.n	800fed4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	685b      	ldr	r3, [r3, #4]
 800fec4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	430a      	orrs	r2, r1
 800fed2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fed8:	f003 0310 	and.w	r3, r3, #16
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d00a      	beq.n	800fef6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	689b      	ldr	r3, [r3, #8]
 800fee6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	430a      	orrs	r2, r1
 800fef4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fefa:	f003 0320 	and.w	r3, r3, #32
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d00a      	beq.n	800ff18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	689b      	ldr	r3, [r3, #8]
 800ff08:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	430a      	orrs	r2, r1
 800ff16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d01a      	beq.n	800ff5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	685b      	ldr	r3, [r3, #4]
 800ff2a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	430a      	orrs	r2, r1
 800ff38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ff42:	d10a      	bne.n	800ff5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	685b      	ldr	r3, [r3, #4]
 800ff4a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	430a      	orrs	r2, r1
 800ff58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d00a      	beq.n	800ff7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	685b      	ldr	r3, [r3, #4]
 800ff6c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	430a      	orrs	r2, r1
 800ff7a:	605a      	str	r2, [r3, #4]
  }
}
 800ff7c:	bf00      	nop
 800ff7e:	370c      	adds	r7, #12
 800ff80:	46bd      	mov	sp, r7
 800ff82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff86:	4770      	bx	lr

0800ff88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b08c      	sub	sp, #48	@ 0x30
 800ff8c:	af02      	add	r7, sp, #8
 800ff8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2200      	movs	r2, #0
 800ff94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ff98:	f7f5 fbe2 	bl	8005760 <HAL_GetTick>
 800ff9c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	f003 0308 	and.w	r3, r3, #8
 800ffa8:	2b08      	cmp	r3, #8
 800ffaa:	d12e      	bne.n	801000a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ffac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ffb0:	9300      	str	r3, [sp, #0]
 800ffb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ffba:	6878      	ldr	r0, [r7, #4]
 800ffbc:	f000 f83b 	bl	8010036 <UART_WaitOnFlagUntilTimeout>
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d021      	beq.n	801000a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffcc:	693b      	ldr	r3, [r7, #16]
 800ffce:	e853 3f00 	ldrex	r3, [r3]
 800ffd2:	60fb      	str	r3, [r7, #12]
   return(result);
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ffda:	623b      	str	r3, [r7, #32]
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	461a      	mov	r2, r3
 800ffe2:	6a3b      	ldr	r3, [r7, #32]
 800ffe4:	61fb      	str	r3, [r7, #28]
 800ffe6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffe8:	69b9      	ldr	r1, [r7, #24]
 800ffea:	69fa      	ldr	r2, [r7, #28]
 800ffec:	e841 2300 	strex	r3, r2, [r1]
 800fff0:	617b      	str	r3, [r7, #20]
   return(result);
 800fff2:	697b      	ldr	r3, [r7, #20]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d1e6      	bne.n	800ffc6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	2220      	movs	r2, #32
 800fffc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	2200      	movs	r2, #0
 8010002:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010006:	2303      	movs	r3, #3
 8010008:	e011      	b.n	801002e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	2220      	movs	r2, #32
 801000e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	2220      	movs	r2, #32
 8010014:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	2200      	movs	r2, #0
 801001c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	2200      	movs	r2, #0
 8010022:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	2200      	movs	r2, #0
 8010028:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 801002c:	2300      	movs	r3, #0
}
 801002e:	4618      	mov	r0, r3
 8010030:	3728      	adds	r7, #40	@ 0x28
 8010032:	46bd      	mov	sp, r7
 8010034:	bd80      	pop	{r7, pc}

08010036 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010036:	b580      	push	{r7, lr}
 8010038:	b084      	sub	sp, #16
 801003a:	af00      	add	r7, sp, #0
 801003c:	60f8      	str	r0, [r7, #12]
 801003e:	60b9      	str	r1, [r7, #8]
 8010040:	603b      	str	r3, [r7, #0]
 8010042:	4613      	mov	r3, r2
 8010044:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010046:	e04f      	b.n	80100e8 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010048:	69bb      	ldr	r3, [r7, #24]
 801004a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801004e:	d04b      	beq.n	80100e8 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010050:	f7f5 fb86 	bl	8005760 <HAL_GetTick>
 8010054:	4602      	mov	r2, r0
 8010056:	683b      	ldr	r3, [r7, #0]
 8010058:	1ad3      	subs	r3, r2, r3
 801005a:	69ba      	ldr	r2, [r7, #24]
 801005c:	429a      	cmp	r2, r3
 801005e:	d302      	bcc.n	8010066 <UART_WaitOnFlagUntilTimeout+0x30>
 8010060:	69bb      	ldr	r3, [r7, #24]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d101      	bne.n	801006a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010066:	2303      	movs	r3, #3
 8010068:	e04e      	b.n	8010108 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	f003 0304 	and.w	r3, r3, #4
 8010074:	2b00      	cmp	r3, #0
 8010076:	d037      	beq.n	80100e8 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010078:	68bb      	ldr	r3, [r7, #8]
 801007a:	2b80      	cmp	r3, #128	@ 0x80
 801007c:	d034      	beq.n	80100e8 <UART_WaitOnFlagUntilTimeout+0xb2>
 801007e:	68bb      	ldr	r3, [r7, #8]
 8010080:	2b40      	cmp	r3, #64	@ 0x40
 8010082:	d031      	beq.n	80100e8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	69db      	ldr	r3, [r3, #28]
 801008a:	f003 0308 	and.w	r3, r3, #8
 801008e:	2b08      	cmp	r3, #8
 8010090:	d110      	bne.n	80100b4 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	2208      	movs	r2, #8
 8010098:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801009a:	68f8      	ldr	r0, [r7, #12]
 801009c:	f000 f8fe 	bl	801029c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	2208      	movs	r2, #8
 80100a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	2200      	movs	r2, #0
 80100ac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80100b0:	2301      	movs	r3, #1
 80100b2:	e029      	b.n	8010108 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	69db      	ldr	r3, [r3, #28]
 80100ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80100be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80100c2:	d111      	bne.n	80100e8 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80100cc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80100ce:	68f8      	ldr	r0, [r7, #12]
 80100d0:	f000 f8e4 	bl	801029c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	2220      	movs	r2, #32
 80100d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	2200      	movs	r2, #0
 80100e0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80100e4:	2303      	movs	r3, #3
 80100e6:	e00f      	b.n	8010108 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	69da      	ldr	r2, [r3, #28]
 80100ee:	68bb      	ldr	r3, [r7, #8]
 80100f0:	4013      	ands	r3, r2
 80100f2:	68ba      	ldr	r2, [r7, #8]
 80100f4:	429a      	cmp	r2, r3
 80100f6:	bf0c      	ite	eq
 80100f8:	2301      	moveq	r3, #1
 80100fa:	2300      	movne	r3, #0
 80100fc:	b2db      	uxtb	r3, r3
 80100fe:	461a      	mov	r2, r3
 8010100:	79fb      	ldrb	r3, [r7, #7]
 8010102:	429a      	cmp	r2, r3
 8010104:	d0a0      	beq.n	8010048 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010106:	2300      	movs	r3, #0
}
 8010108:	4618      	mov	r0, r3
 801010a:	3710      	adds	r7, #16
 801010c:	46bd      	mov	sp, r7
 801010e:	bd80      	pop	{r7, pc}

08010110 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010110:	b580      	push	{r7, lr}
 8010112:	b096      	sub	sp, #88	@ 0x58
 8010114:	af00      	add	r7, sp, #0
 8010116:	60f8      	str	r0, [r7, #12]
 8010118:	60b9      	str	r1, [r7, #8]
 801011a:	4613      	mov	r3, r2
 801011c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	68ba      	ldr	r2, [r7, #8]
 8010122:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	88fa      	ldrh	r2, [r7, #6]
 8010128:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	2200      	movs	r2, #0
 8010130:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	2222      	movs	r2, #34	@ 0x22
 8010138:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010140:	2b00      	cmp	r3, #0
 8010142:	d028      	beq.n	8010196 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010148:	4a3e      	ldr	r2, [pc, #248]	@ (8010244 <UART_Start_Receive_DMA+0x134>)
 801014a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010150:	4a3d      	ldr	r2, [pc, #244]	@ (8010248 <UART_Start_Receive_DMA+0x138>)
 8010152:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010158:	4a3c      	ldr	r2, [pc, #240]	@ (801024c <UART_Start_Receive_DMA+0x13c>)
 801015a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010160:	2200      	movs	r2, #0
 8010162:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	3324      	adds	r3, #36	@ 0x24
 801016e:	4619      	mov	r1, r3
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010174:	461a      	mov	r2, r3
 8010176:	88fb      	ldrh	r3, [r7, #6]
 8010178:	f7f6 f914 	bl	80063a4 <HAL_DMA_Start_IT>
 801017c:	4603      	mov	r3, r0
 801017e:	2b00      	cmp	r3, #0
 8010180:	d009      	beq.n	8010196 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	2210      	movs	r2, #16
 8010186:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	2220      	movs	r2, #32
 801018e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8010192:	2301      	movs	r3, #1
 8010194:	e051      	b.n	801023a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	691b      	ldr	r3, [r3, #16]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d018      	beq.n	80101d0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80101a6:	e853 3f00 	ldrex	r3, [r3]
 80101aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80101ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80101b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	461a      	mov	r2, r3
 80101ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80101bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80101be:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101c0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80101c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80101c4:	e841 2300 	strex	r3, r2, [r1]
 80101c8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80101ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d1e6      	bne.n	801019e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	3308      	adds	r3, #8
 80101d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101da:	e853 3f00 	ldrex	r3, [r3]
 80101de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80101e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101e2:	f043 0301 	orr.w	r3, r3, #1
 80101e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	3308      	adds	r3, #8
 80101ee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80101f0:	637a      	str	r2, [r7, #52]	@ 0x34
 80101f2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80101f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80101f8:	e841 2300 	strex	r3, r2, [r1]
 80101fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80101fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010200:	2b00      	cmp	r3, #0
 8010202:	d1e5      	bne.n	80101d0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	3308      	adds	r3, #8
 801020a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801020c:	697b      	ldr	r3, [r7, #20]
 801020e:	e853 3f00 	ldrex	r3, [r3]
 8010212:	613b      	str	r3, [r7, #16]
   return(result);
 8010214:	693b      	ldr	r3, [r7, #16]
 8010216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801021a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	3308      	adds	r3, #8
 8010222:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010224:	623a      	str	r2, [r7, #32]
 8010226:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010228:	69f9      	ldr	r1, [r7, #28]
 801022a:	6a3a      	ldr	r2, [r7, #32]
 801022c:	e841 2300 	strex	r3, r2, [r1]
 8010230:	61bb      	str	r3, [r7, #24]
   return(result);
 8010232:	69bb      	ldr	r3, [r7, #24]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d1e5      	bne.n	8010204 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8010238:	2300      	movs	r3, #0
}
 801023a:	4618      	mov	r0, r3
 801023c:	3758      	adds	r7, #88	@ 0x58
 801023e:	46bd      	mov	sp, r7
 8010240:	bd80      	pop	{r7, pc}
 8010242:	bf00      	nop
 8010244:	08010365 	.word	0x08010365
 8010248:	080104c3 	.word	0x080104c3
 801024c:	08010535 	.word	0x08010535

08010250 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010250:	b480      	push	{r7}
 8010252:	b089      	sub	sp, #36	@ 0x24
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	e853 3f00 	ldrex	r3, [r3]
 8010264:	60bb      	str	r3, [r7, #8]
   return(result);
 8010266:	68bb      	ldr	r3, [r7, #8]
 8010268:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 801026c:	61fb      	str	r3, [r7, #28]
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	461a      	mov	r2, r3
 8010274:	69fb      	ldr	r3, [r7, #28]
 8010276:	61bb      	str	r3, [r7, #24]
 8010278:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801027a:	6979      	ldr	r1, [r7, #20]
 801027c:	69ba      	ldr	r2, [r7, #24]
 801027e:	e841 2300 	strex	r3, r2, [r1]
 8010282:	613b      	str	r3, [r7, #16]
   return(result);
 8010284:	693b      	ldr	r3, [r7, #16]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d1e6      	bne.n	8010258 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	2220      	movs	r2, #32
 801028e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8010290:	bf00      	nop
 8010292:	3724      	adds	r7, #36	@ 0x24
 8010294:	46bd      	mov	sp, r7
 8010296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029a:	4770      	bx	lr

0801029c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801029c:	b480      	push	{r7}
 801029e:	b095      	sub	sp, #84	@ 0x54
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80102ac:	e853 3f00 	ldrex	r3, [r3]
 80102b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80102b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80102b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	461a      	mov	r2, r3
 80102c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80102c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80102c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80102c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80102ca:	e841 2300 	strex	r3, r2, [r1]
 80102ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80102d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d1e6      	bne.n	80102a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	3308      	adds	r3, #8
 80102dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102de:	6a3b      	ldr	r3, [r7, #32]
 80102e0:	e853 3f00 	ldrex	r3, [r3]
 80102e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80102e6:	69fb      	ldr	r3, [r7, #28]
 80102e8:	f023 0301 	bic.w	r3, r3, #1
 80102ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	3308      	adds	r3, #8
 80102f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80102f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80102f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80102fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80102fe:	e841 2300 	strex	r3, r2, [r1]
 8010302:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010306:	2b00      	cmp	r3, #0
 8010308:	d1e5      	bne.n	80102d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801030e:	2b01      	cmp	r3, #1
 8010310:	d118      	bne.n	8010344 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	e853 3f00 	ldrex	r3, [r3]
 801031e:	60bb      	str	r3, [r7, #8]
   return(result);
 8010320:	68bb      	ldr	r3, [r7, #8]
 8010322:	f023 0310 	bic.w	r3, r3, #16
 8010326:	647b      	str	r3, [r7, #68]	@ 0x44
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	461a      	mov	r2, r3
 801032e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010330:	61bb      	str	r3, [r7, #24]
 8010332:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010334:	6979      	ldr	r1, [r7, #20]
 8010336:	69ba      	ldr	r2, [r7, #24]
 8010338:	e841 2300 	strex	r3, r2, [r1]
 801033c:	613b      	str	r3, [r7, #16]
   return(result);
 801033e:	693b      	ldr	r3, [r7, #16]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d1e6      	bne.n	8010312 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	2220      	movs	r2, #32
 8010348:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	2200      	movs	r2, #0
 8010350:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	2200      	movs	r2, #0
 8010356:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8010358:	bf00      	nop
 801035a:	3754      	adds	r7, #84	@ 0x54
 801035c:	46bd      	mov	sp, r7
 801035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010362:	4770      	bx	lr

08010364 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010364:	b580      	push	{r7, lr}
 8010366:	b09c      	sub	sp, #112	@ 0x70
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010370:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	69db      	ldr	r3, [r3, #28]
 8010376:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801037a:	d071      	beq.n	8010460 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 801037c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801037e:	2200      	movs	r2, #0
 8010380:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010384:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801038a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801038c:	e853 3f00 	ldrex	r3, [r3]
 8010390:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8010392:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010394:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010398:	66bb      	str	r3, [r7, #104]	@ 0x68
 801039a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	461a      	mov	r2, r3
 80103a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80103a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80103a4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80103a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80103aa:	e841 2300 	strex	r3, r2, [r1]
 80103ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80103b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d1e6      	bne.n	8010384 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80103b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	3308      	adds	r3, #8
 80103bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103c0:	e853 3f00 	ldrex	r3, [r3]
 80103c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80103c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103c8:	f023 0301 	bic.w	r3, r3, #1
 80103cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80103ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	3308      	adds	r3, #8
 80103d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80103d6:	643a      	str	r2, [r7, #64]	@ 0x40
 80103d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80103dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80103de:	e841 2300 	strex	r3, r2, [r1]
 80103e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80103e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d1e5      	bne.n	80103b6 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80103ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	3308      	adds	r3, #8
 80103f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103f2:	6a3b      	ldr	r3, [r7, #32]
 80103f4:	e853 3f00 	ldrex	r3, [r3]
 80103f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80103fa:	69fb      	ldr	r3, [r7, #28]
 80103fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010400:	663b      	str	r3, [r7, #96]	@ 0x60
 8010402:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	3308      	adds	r3, #8
 8010408:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801040a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801040c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801040e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010410:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010412:	e841 2300 	strex	r3, r2, [r1]
 8010416:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801041a:	2b00      	cmp	r3, #0
 801041c:	d1e5      	bne.n	80103ea <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801041e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010420:	2220      	movs	r2, #32
 8010422:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010426:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801042a:	2b01      	cmp	r3, #1
 801042c:	d118      	bne.n	8010460 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801042e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	e853 3f00 	ldrex	r3, [r3]
 801043a:	60bb      	str	r3, [r7, #8]
   return(result);
 801043c:	68bb      	ldr	r3, [r7, #8]
 801043e:	f023 0310 	bic.w	r3, r3, #16
 8010442:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010444:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	461a      	mov	r2, r3
 801044a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801044c:	61bb      	str	r3, [r7, #24]
 801044e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010450:	6979      	ldr	r1, [r7, #20]
 8010452:	69ba      	ldr	r2, [r7, #24]
 8010454:	e841 2300 	strex	r3, r2, [r1]
 8010458:	613b      	str	r3, [r7, #16]
   return(result);
 801045a:	693b      	ldr	r3, [r7, #16]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d1e6      	bne.n	801042e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010460:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010462:	2200      	movs	r2, #0
 8010464:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010466:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801046a:	2b01      	cmp	r3, #1
 801046c:	d122      	bne.n	80104b4 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 801046e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010470:	2200      	movs	r2, #0
 8010472:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	685b      	ldr	r3, [r3, #4]
 801047c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 8010480:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010482:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8010486:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 801048a:	429a      	cmp	r2, r3
 801048c:	d204      	bcs.n	8010498 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 801048e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010490:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8010494:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010498:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801049a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 801049e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80104a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80104a4:	b29b      	uxth	r3, r3
 80104a6:	1ad3      	subs	r3, r2, r3
 80104a8:	b29b      	uxth	r3, r3
 80104aa:	4619      	mov	r1, r3
 80104ac:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80104ae:	f7ff fa59 	bl	800f964 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80104b2:	e002      	b.n	80104ba <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 80104b4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80104b6:	f7f4 ffa7 	bl	8005408 <HAL_UART_RxCpltCallback>
}
 80104ba:	bf00      	nop
 80104bc:	3770      	adds	r7, #112	@ 0x70
 80104be:	46bd      	mov	sp, r7
 80104c0:	bd80      	pop	{r7, pc}

080104c2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80104c2:	b580      	push	{r7, lr}
 80104c4:	b084      	sub	sp, #16
 80104c6:	af00      	add	r7, sp, #0
 80104c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80104ce:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	2201      	movs	r2, #1
 80104d4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80104da:	2b01      	cmp	r3, #1
 80104dc:	d123      	bne.n	8010526 <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80104e4:	085b      	lsrs	r3, r3, #1
 80104e6:	b29a      	uxth	r2, r3
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	685b      	ldr	r3, [r3, #4]
 80104f4:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80104fc:	897a      	ldrh	r2, [r7, #10]
 80104fe:	429a      	cmp	r2, r3
 8010500:	d803      	bhi.n	801050a <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	897a      	ldrh	r2, [r7, #10]
 8010506:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8010516:	b29b      	uxth	r3, r3
 8010518:	1ad3      	subs	r3, r2, r3
 801051a:	b29b      	uxth	r3, r3
 801051c:	4619      	mov	r1, r3
 801051e:	68f8      	ldr	r0, [r7, #12]
 8010520:	f7ff fa20 	bl	800f964 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010524:	e002      	b.n	801052c <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 8010526:	68f8      	ldr	r0, [r7, #12]
 8010528:	f7f4 ff92 	bl	8005450 <HAL_UART_RxHalfCpltCallback>
}
 801052c:	bf00      	nop
 801052e:	3710      	adds	r7, #16
 8010530:	46bd      	mov	sp, r7
 8010532:	bd80      	pop	{r7, pc}

08010534 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010534:	b580      	push	{r7, lr}
 8010536:	b086      	sub	sp, #24
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010540:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010542:	697b      	ldr	r3, [r7, #20]
 8010544:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010546:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010548:	697b      	ldr	r3, [r7, #20]
 801054a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801054e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010550:	697b      	ldr	r3, [r7, #20]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	689b      	ldr	r3, [r3, #8]
 8010556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801055a:	2b80      	cmp	r3, #128	@ 0x80
 801055c:	d109      	bne.n	8010572 <UART_DMAError+0x3e>
 801055e:	693b      	ldr	r3, [r7, #16]
 8010560:	2b21      	cmp	r3, #33	@ 0x21
 8010562:	d106      	bne.n	8010572 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010564:	697b      	ldr	r3, [r7, #20]
 8010566:	2200      	movs	r2, #0
 8010568:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 801056c:	6978      	ldr	r0, [r7, #20]
 801056e:	f7ff fe6f 	bl	8010250 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010572:	697b      	ldr	r3, [r7, #20]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	689b      	ldr	r3, [r3, #8]
 8010578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801057c:	2b40      	cmp	r3, #64	@ 0x40
 801057e:	d109      	bne.n	8010594 <UART_DMAError+0x60>
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	2b22      	cmp	r3, #34	@ 0x22
 8010584:	d106      	bne.n	8010594 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010586:	697b      	ldr	r3, [r7, #20]
 8010588:	2200      	movs	r2, #0
 801058a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 801058e:	6978      	ldr	r0, [r7, #20]
 8010590:	f7ff fe84 	bl	801029c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010594:	697b      	ldr	r3, [r7, #20]
 8010596:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801059a:	f043 0210 	orr.w	r2, r3, #16
 801059e:	697b      	ldr	r3, [r7, #20]
 80105a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80105a4:	6978      	ldr	r0, [r7, #20]
 80105a6:	f7f4 ff69 	bl	800547c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80105aa:	bf00      	nop
 80105ac:	3718      	adds	r7, #24
 80105ae:	46bd      	mov	sp, r7
 80105b0:	bd80      	pop	{r7, pc}

080105b2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80105b2:	b580      	push	{r7, lr}
 80105b4:	b084      	sub	sp, #16
 80105b6:	af00      	add	r7, sp, #0
 80105b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	2200      	movs	r2, #0
 80105c4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80105c8:	68f8      	ldr	r0, [r7, #12]
 80105ca:	f7f4 ff57 	bl	800547c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80105ce:	bf00      	nop
 80105d0:	3710      	adds	r7, #16
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}

080105d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80105d6:	b580      	push	{r7, lr}
 80105d8:	b088      	sub	sp, #32
 80105da:	af00      	add	r7, sp, #0
 80105dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	e853 3f00 	ldrex	r3, [r3]
 80105ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80105ec:	68bb      	ldr	r3, [r7, #8]
 80105ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80105f2:	61fb      	str	r3, [r7, #28]
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	461a      	mov	r2, r3
 80105fa:	69fb      	ldr	r3, [r7, #28]
 80105fc:	61bb      	str	r3, [r7, #24]
 80105fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010600:	6979      	ldr	r1, [r7, #20]
 8010602:	69ba      	ldr	r2, [r7, #24]
 8010604:	e841 2300 	strex	r3, r2, [r1]
 8010608:	613b      	str	r3, [r7, #16]
   return(result);
 801060a:	693b      	ldr	r3, [r7, #16]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d1e6      	bne.n	80105de <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	2220      	movs	r2, #32
 8010614:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	2200      	movs	r2, #0
 801061a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801061c:	6878      	ldr	r0, [r7, #4]
 801061e:	f7ff f997 	bl	800f950 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010622:	bf00      	nop
 8010624:	3720      	adds	r7, #32
 8010626:	46bd      	mov	sp, r7
 8010628:	bd80      	pop	{r7, pc}
	...

0801062c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 801062c:	b480      	push	{r7}
 801062e:	b083      	sub	sp, #12
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
 8010634:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8010636:	683b      	ldr	r3, [r7, #0]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d121      	bne.n	8010682 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	681a      	ldr	r2, [r3, #0]
 8010642:	4b27      	ldr	r3, [pc, #156]	@ (80106e0 <FMC_SDRAM_Init+0xb4>)
 8010644:	4013      	ands	r3, r2
 8010646:	683a      	ldr	r2, [r7, #0]
 8010648:	6851      	ldr	r1, [r2, #4]
 801064a:	683a      	ldr	r2, [r7, #0]
 801064c:	6892      	ldr	r2, [r2, #8]
 801064e:	4311      	orrs	r1, r2
 8010650:	683a      	ldr	r2, [r7, #0]
 8010652:	68d2      	ldr	r2, [r2, #12]
 8010654:	4311      	orrs	r1, r2
 8010656:	683a      	ldr	r2, [r7, #0]
 8010658:	6912      	ldr	r2, [r2, #16]
 801065a:	4311      	orrs	r1, r2
 801065c:	683a      	ldr	r2, [r7, #0]
 801065e:	6952      	ldr	r2, [r2, #20]
 8010660:	4311      	orrs	r1, r2
 8010662:	683a      	ldr	r2, [r7, #0]
 8010664:	6992      	ldr	r2, [r2, #24]
 8010666:	4311      	orrs	r1, r2
 8010668:	683a      	ldr	r2, [r7, #0]
 801066a:	69d2      	ldr	r2, [r2, #28]
 801066c:	4311      	orrs	r1, r2
 801066e:	683a      	ldr	r2, [r7, #0]
 8010670:	6a12      	ldr	r2, [r2, #32]
 8010672:	4311      	orrs	r1, r2
 8010674:	683a      	ldr	r2, [r7, #0]
 8010676:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8010678:	430a      	orrs	r2, r1
 801067a:	431a      	orrs	r2, r3
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	601a      	str	r2, [r3, #0]
 8010680:	e026      	b.n	80106d0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	69d9      	ldr	r1, [r3, #28]
 801068e:	683b      	ldr	r3, [r7, #0]
 8010690:	6a1b      	ldr	r3, [r3, #32]
 8010692:	4319      	orrs	r1, r3
 8010694:	683b      	ldr	r3, [r7, #0]
 8010696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010698:	430b      	orrs	r3, r1
 801069a:	431a      	orrs	r2, r3
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	685a      	ldr	r2, [r3, #4]
 80106a4:	4b0e      	ldr	r3, [pc, #56]	@ (80106e0 <FMC_SDRAM_Init+0xb4>)
 80106a6:	4013      	ands	r3, r2
 80106a8:	683a      	ldr	r2, [r7, #0]
 80106aa:	6851      	ldr	r1, [r2, #4]
 80106ac:	683a      	ldr	r2, [r7, #0]
 80106ae:	6892      	ldr	r2, [r2, #8]
 80106b0:	4311      	orrs	r1, r2
 80106b2:	683a      	ldr	r2, [r7, #0]
 80106b4:	68d2      	ldr	r2, [r2, #12]
 80106b6:	4311      	orrs	r1, r2
 80106b8:	683a      	ldr	r2, [r7, #0]
 80106ba:	6912      	ldr	r2, [r2, #16]
 80106bc:	4311      	orrs	r1, r2
 80106be:	683a      	ldr	r2, [r7, #0]
 80106c0:	6952      	ldr	r2, [r2, #20]
 80106c2:	4311      	orrs	r1, r2
 80106c4:	683a      	ldr	r2, [r7, #0]
 80106c6:	6992      	ldr	r2, [r2, #24]
 80106c8:	430a      	orrs	r2, r1
 80106ca:	431a      	orrs	r2, r3
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80106d0:	2300      	movs	r3, #0
}
 80106d2:	4618      	mov	r0, r3
 80106d4:	370c      	adds	r7, #12
 80106d6:	46bd      	mov	sp, r7
 80106d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106dc:	4770      	bx	lr
 80106de:	bf00      	nop
 80106e0:	ffff8000 	.word	0xffff8000

080106e4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80106e4:	b480      	push	{r7}
 80106e6:	b085      	sub	sp, #20
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	60f8      	str	r0, [r7, #12]
 80106ec:	60b9      	str	r1, [r7, #8]
 80106ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d128      	bne.n	8010748 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	689b      	ldr	r3, [r3, #8]
 80106fa:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80106fe:	68bb      	ldr	r3, [r7, #8]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	1e59      	subs	r1, r3, #1
 8010704:	68bb      	ldr	r3, [r7, #8]
 8010706:	685b      	ldr	r3, [r3, #4]
 8010708:	3b01      	subs	r3, #1
 801070a:	011b      	lsls	r3, r3, #4
 801070c:	4319      	orrs	r1, r3
 801070e:	68bb      	ldr	r3, [r7, #8]
 8010710:	689b      	ldr	r3, [r3, #8]
 8010712:	3b01      	subs	r3, #1
 8010714:	021b      	lsls	r3, r3, #8
 8010716:	4319      	orrs	r1, r3
 8010718:	68bb      	ldr	r3, [r7, #8]
 801071a:	68db      	ldr	r3, [r3, #12]
 801071c:	3b01      	subs	r3, #1
 801071e:	031b      	lsls	r3, r3, #12
 8010720:	4319      	orrs	r1, r3
 8010722:	68bb      	ldr	r3, [r7, #8]
 8010724:	691b      	ldr	r3, [r3, #16]
 8010726:	3b01      	subs	r3, #1
 8010728:	041b      	lsls	r3, r3, #16
 801072a:	4319      	orrs	r1, r3
 801072c:	68bb      	ldr	r3, [r7, #8]
 801072e:	695b      	ldr	r3, [r3, #20]
 8010730:	3b01      	subs	r3, #1
 8010732:	051b      	lsls	r3, r3, #20
 8010734:	4319      	orrs	r1, r3
 8010736:	68bb      	ldr	r3, [r7, #8]
 8010738:	699b      	ldr	r3, [r3, #24]
 801073a:	3b01      	subs	r3, #1
 801073c:	061b      	lsls	r3, r3, #24
 801073e:	430b      	orrs	r3, r1
 8010740:	431a      	orrs	r2, r3
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	609a      	str	r2, [r3, #8]
 8010746:	e02d      	b.n	80107a4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	689a      	ldr	r2, [r3, #8]
 801074c:	4b19      	ldr	r3, [pc, #100]	@ (80107b4 <FMC_SDRAM_Timing_Init+0xd0>)
 801074e:	4013      	ands	r3, r2
 8010750:	68ba      	ldr	r2, [r7, #8]
 8010752:	68d2      	ldr	r2, [r2, #12]
 8010754:	3a01      	subs	r2, #1
 8010756:	0311      	lsls	r1, r2, #12
 8010758:	68ba      	ldr	r2, [r7, #8]
 801075a:	6952      	ldr	r2, [r2, #20]
 801075c:	3a01      	subs	r2, #1
 801075e:	0512      	lsls	r2, r2, #20
 8010760:	430a      	orrs	r2, r1
 8010762:	431a      	orrs	r2, r3
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	68db      	ldr	r3, [r3, #12]
 801076c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8010770:	68bb      	ldr	r3, [r7, #8]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	1e59      	subs	r1, r3, #1
 8010776:	68bb      	ldr	r3, [r7, #8]
 8010778:	685b      	ldr	r3, [r3, #4]
 801077a:	3b01      	subs	r3, #1
 801077c:	011b      	lsls	r3, r3, #4
 801077e:	4319      	orrs	r1, r3
 8010780:	68bb      	ldr	r3, [r7, #8]
 8010782:	689b      	ldr	r3, [r3, #8]
 8010784:	3b01      	subs	r3, #1
 8010786:	021b      	lsls	r3, r3, #8
 8010788:	4319      	orrs	r1, r3
 801078a:	68bb      	ldr	r3, [r7, #8]
 801078c:	691b      	ldr	r3, [r3, #16]
 801078e:	3b01      	subs	r3, #1
 8010790:	041b      	lsls	r3, r3, #16
 8010792:	4319      	orrs	r1, r3
 8010794:	68bb      	ldr	r3, [r7, #8]
 8010796:	699b      	ldr	r3, [r3, #24]
 8010798:	3b01      	subs	r3, #1
 801079a:	061b      	lsls	r3, r3, #24
 801079c:	430b      	orrs	r3, r1
 801079e:	431a      	orrs	r2, r3
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80107a4:	2300      	movs	r3, #0
}
 80107a6:	4618      	mov	r0, r3
 80107a8:	3714      	adds	r7, #20
 80107aa:	46bd      	mov	sp, r7
 80107ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b0:	4770      	bx	lr
 80107b2:	bf00      	nop
 80107b4:	ff0f0fff 	.word	0xff0f0fff

080107b8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80107b8:	b084      	sub	sp, #16
 80107ba:	b480      	push	{r7}
 80107bc:	b085      	sub	sp, #20
 80107be:	af00      	add	r7, sp, #0
 80107c0:	6078      	str	r0, [r7, #4]
 80107c2:	f107 001c 	add.w	r0, r7, #28
 80107c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80107ca:	2300      	movs	r3, #0
 80107cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80107ce:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80107d0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80107d2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80107d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80107d6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80107d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80107da:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80107dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80107de:	431a      	orrs	r2, r3
             Init.ClockDiv
 80107e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80107e2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80107e4:	68fa      	ldr	r2, [r7, #12]
 80107e6:	4313      	orrs	r3, r2
 80107e8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	685a      	ldr	r2, [r3, #4]
 80107ee:	4b07      	ldr	r3, [pc, #28]	@ (801080c <SDMMC_Init+0x54>)
 80107f0:	4013      	ands	r3, r2
 80107f2:	68fa      	ldr	r2, [r7, #12]
 80107f4:	431a      	orrs	r2, r3
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80107fa:	2300      	movs	r3, #0
}
 80107fc:	4618      	mov	r0, r3
 80107fe:	3714      	adds	r7, #20
 8010800:	46bd      	mov	sp, r7
 8010802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010806:	b004      	add	sp, #16
 8010808:	4770      	bx	lr
 801080a:	bf00      	nop
 801080c:	ffff8100 	.word	0xffff8100

08010810 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010810:	b480      	push	{r7}
 8010812:	b083      	sub	sp, #12
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 801081e:	4618      	mov	r0, r3
 8010820:	370c      	adds	r7, #12
 8010822:	46bd      	mov	sp, r7
 8010824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010828:	4770      	bx	lr

0801082a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 801082a:	b480      	push	{r7}
 801082c:	b083      	sub	sp, #12
 801082e:	af00      	add	r7, sp, #0
 8010830:	6078      	str	r0, [r7, #4]
 8010832:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8010834:	683b      	ldr	r3, [r7, #0]
 8010836:	681a      	ldr	r2, [r3, #0]
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 801083e:	2300      	movs	r3, #0
}
 8010840:	4618      	mov	r0, r3
 8010842:	370c      	adds	r7, #12
 8010844:	46bd      	mov	sp, r7
 8010846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084a:	4770      	bx	lr

0801084c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 801084c:	b480      	push	{r7}
 801084e:	b083      	sub	sp, #12
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	2203      	movs	r2, #3
 8010858:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 801085a:	2300      	movs	r3, #0
}
 801085c:	4618      	mov	r0, r3
 801085e:	370c      	adds	r7, #12
 8010860:	46bd      	mov	sp, r7
 8010862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010866:	4770      	bx	lr

08010868 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8010868:	b480      	push	{r7}
 801086a:	b083      	sub	sp, #12
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	f003 0303 	and.w	r3, r3, #3
}
 8010878:	4618      	mov	r0, r3
 801087a:	370c      	adds	r7, #12
 801087c:	46bd      	mov	sp, r7
 801087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010882:	4770      	bx	lr

08010884 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010884:	b480      	push	{r7}
 8010886:	b085      	sub	sp, #20
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
 801088c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801088e:	2300      	movs	r3, #0
 8010890:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8010892:	683b      	ldr	r3, [r7, #0]
 8010894:	681a      	ldr	r2, [r3, #0]
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 801089e:	683b      	ldr	r3, [r7, #0]
 80108a0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80108a2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80108a4:	683b      	ldr	r3, [r7, #0]
 80108a6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80108a8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80108aa:	683b      	ldr	r3, [r7, #0]
 80108ac:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80108ae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80108b0:	68fa      	ldr	r2, [r7, #12]
 80108b2:	4313      	orrs	r3, r2
 80108b4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	68da      	ldr	r2, [r3, #12]
 80108ba:	4b06      	ldr	r3, [pc, #24]	@ (80108d4 <SDMMC_SendCommand+0x50>)
 80108bc:	4013      	ands	r3, r2
 80108be:	68fa      	ldr	r2, [r7, #12]
 80108c0:	431a      	orrs	r2, r3
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80108c6:	2300      	movs	r3, #0
}
 80108c8:	4618      	mov	r0, r3
 80108ca:	3714      	adds	r7, #20
 80108cc:	46bd      	mov	sp, r7
 80108ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d2:	4770      	bx	lr
 80108d4:	fffff000 	.word	0xfffff000

080108d8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80108d8:	b480      	push	{r7}
 80108da:	b083      	sub	sp, #12
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	691b      	ldr	r3, [r3, #16]
 80108e4:	b2db      	uxtb	r3, r3
}
 80108e6:	4618      	mov	r0, r3
 80108e8:	370c      	adds	r7, #12
 80108ea:	46bd      	mov	sp, r7
 80108ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f0:	4770      	bx	lr

080108f2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80108f2:	b480      	push	{r7}
 80108f4:	b085      	sub	sp, #20
 80108f6:	af00      	add	r7, sp, #0
 80108f8:	6078      	str	r0, [r7, #4]
 80108fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	3314      	adds	r3, #20
 8010900:	461a      	mov	r2, r3
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	4413      	add	r3, r2
 8010906:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	681b      	ldr	r3, [r3, #0]
}  
 801090c:	4618      	mov	r0, r3
 801090e:	3714      	adds	r7, #20
 8010910:	46bd      	mov	sp, r7
 8010912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010916:	4770      	bx	lr

08010918 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8010918:	b480      	push	{r7}
 801091a:	b085      	sub	sp, #20
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
 8010920:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010922:	2300      	movs	r3, #0
 8010924:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010926:	683b      	ldr	r3, [r7, #0]
 8010928:	681a      	ldr	r2, [r3, #0]
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801092e:	683b      	ldr	r3, [r7, #0]
 8010930:	685a      	ldr	r2, [r3, #4]
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010936:	683b      	ldr	r3, [r7, #0]
 8010938:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801093e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010940:	683b      	ldr	r3, [r7, #0]
 8010942:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010944:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010946:	683b      	ldr	r3, [r7, #0]
 8010948:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 801094a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801094c:	68fa      	ldr	r2, [r7, #12]
 801094e:	4313      	orrs	r3, r2
 8010950:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010956:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	431a      	orrs	r2, r3
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8010962:	2300      	movs	r3, #0

}
 8010964:	4618      	mov	r0, r3
 8010966:	3714      	adds	r7, #20
 8010968:	46bd      	mov	sp, r7
 801096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096e:	4770      	bx	lr

08010970 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b088      	sub	sp, #32
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
 8010978:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801097a:	683b      	ldr	r3, [r7, #0]
 801097c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801097e:	2310      	movs	r3, #16
 8010980:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010982:	2340      	movs	r3, #64	@ 0x40
 8010984:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010986:	2300      	movs	r3, #0
 8010988:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801098a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801098e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010990:	f107 0308 	add.w	r3, r7, #8
 8010994:	4619      	mov	r1, r3
 8010996:	6878      	ldr	r0, [r7, #4]
 8010998:	f7ff ff74 	bl	8010884 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801099c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80109a0:	2110      	movs	r1, #16
 80109a2:	6878      	ldr	r0, [r7, #4]
 80109a4:	f000 f9d6 	bl	8010d54 <SDMMC_GetCmdResp1>
 80109a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109aa:	69fb      	ldr	r3, [r7, #28]
}
 80109ac:	4618      	mov	r0, r3
 80109ae:	3720      	adds	r7, #32
 80109b0:	46bd      	mov	sp, r7
 80109b2:	bd80      	pop	{r7, pc}

080109b4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b088      	sub	sp, #32
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
 80109bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80109be:	683b      	ldr	r3, [r7, #0]
 80109c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80109c2:	2311      	movs	r3, #17
 80109c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80109c6:	2340      	movs	r3, #64	@ 0x40
 80109c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80109ca:	2300      	movs	r3, #0
 80109cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80109ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80109d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80109d4:	f107 0308 	add.w	r3, r7, #8
 80109d8:	4619      	mov	r1, r3
 80109da:	6878      	ldr	r0, [r7, #4]
 80109dc:	f7ff ff52 	bl	8010884 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80109e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80109e4:	2111      	movs	r1, #17
 80109e6:	6878      	ldr	r0, [r7, #4]
 80109e8:	f000 f9b4 	bl	8010d54 <SDMMC_GetCmdResp1>
 80109ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109ee:	69fb      	ldr	r3, [r7, #28]
}
 80109f0:	4618      	mov	r0, r3
 80109f2:	3720      	adds	r7, #32
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bd80      	pop	{r7, pc}

080109f8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b088      	sub	sp, #32
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
 8010a00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010a02:	683b      	ldr	r3, [r7, #0]
 8010a04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010a06:	2312      	movs	r3, #18
 8010a08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a0a:	2340      	movs	r3, #64	@ 0x40
 8010a0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a0e:	2300      	movs	r3, #0
 8010a10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010a16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a18:	f107 0308 	add.w	r3, r7, #8
 8010a1c:	4619      	mov	r1, r3
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f7ff ff30 	bl	8010884 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010a24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010a28:	2112      	movs	r1, #18
 8010a2a:	6878      	ldr	r0, [r7, #4]
 8010a2c:	f000 f992 	bl	8010d54 <SDMMC_GetCmdResp1>
 8010a30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a32:	69fb      	ldr	r3, [r7, #28]
}
 8010a34:	4618      	mov	r0, r3
 8010a36:	3720      	adds	r7, #32
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	bd80      	pop	{r7, pc}

08010a3c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b088      	sub	sp, #32
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]
 8010a44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010a46:	683b      	ldr	r3, [r7, #0]
 8010a48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010a4a:	2318      	movs	r3, #24
 8010a4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a4e:	2340      	movs	r3, #64	@ 0x40
 8010a50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a52:	2300      	movs	r3, #0
 8010a54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010a5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a5c:	f107 0308 	add.w	r3, r7, #8
 8010a60:	4619      	mov	r1, r3
 8010a62:	6878      	ldr	r0, [r7, #4]
 8010a64:	f7ff ff0e 	bl	8010884 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010a68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010a6c:	2118      	movs	r1, #24
 8010a6e:	6878      	ldr	r0, [r7, #4]
 8010a70:	f000 f970 	bl	8010d54 <SDMMC_GetCmdResp1>
 8010a74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a76:	69fb      	ldr	r3, [r7, #28]
}
 8010a78:	4618      	mov	r0, r3
 8010a7a:	3720      	adds	r7, #32
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	bd80      	pop	{r7, pc}

08010a80 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b088      	sub	sp, #32
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
 8010a88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010a8a:	683b      	ldr	r3, [r7, #0]
 8010a8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010a8e:	2319      	movs	r3, #25
 8010a90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a92:	2340      	movs	r3, #64	@ 0x40
 8010a94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a96:	2300      	movs	r3, #0
 8010a98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010a9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010aa0:	f107 0308 	add.w	r3, r7, #8
 8010aa4:	4619      	mov	r1, r3
 8010aa6:	6878      	ldr	r0, [r7, #4]
 8010aa8:	f7ff feec 	bl	8010884 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010aac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010ab0:	2119      	movs	r1, #25
 8010ab2:	6878      	ldr	r0, [r7, #4]
 8010ab4:	f000 f94e 	bl	8010d54 <SDMMC_GetCmdResp1>
 8010ab8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010aba:	69fb      	ldr	r3, [r7, #28]
}
 8010abc:	4618      	mov	r0, r3
 8010abe:	3720      	adds	r7, #32
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	bd80      	pop	{r7, pc}

08010ac4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b088      	sub	sp, #32
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010acc:	2300      	movs	r3, #0
 8010ace:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010ad0:	230c      	movs	r3, #12
 8010ad2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010ad4:	2340      	movs	r3, #64	@ 0x40
 8010ad6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ad8:	2300      	movs	r3, #0
 8010ada:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010adc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010ae0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010ae2:	f107 0308 	add.w	r3, r7, #8
 8010ae6:	4619      	mov	r1, r3
 8010ae8:	6878      	ldr	r0, [r7, #4]
 8010aea:	f7ff fecb 	bl	8010884 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010aee:	4a05      	ldr	r2, [pc, #20]	@ (8010b04 <SDMMC_CmdStopTransfer+0x40>)
 8010af0:	210c      	movs	r1, #12
 8010af2:	6878      	ldr	r0, [r7, #4]
 8010af4:	f000 f92e 	bl	8010d54 <SDMMC_GetCmdResp1>
 8010af8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010afa:	69fb      	ldr	r3, [r7, #28]
}
 8010afc:	4618      	mov	r0, r3
 8010afe:	3720      	adds	r7, #32
 8010b00:	46bd      	mov	sp, r7
 8010b02:	bd80      	pop	{r7, pc}
 8010b04:	05f5e100 	.word	0x05f5e100

08010b08 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b08a      	sub	sp, #40	@ 0x28
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	60f8      	str	r0, [r7, #12]
 8010b10:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010b14:	683b      	ldr	r3, [r7, #0]
 8010b16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010b18:	2307      	movs	r3, #7
 8010b1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010b1c:	2340      	movs	r3, #64	@ 0x40
 8010b1e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b20:	2300      	movs	r3, #0
 8010b22:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010b28:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b2a:	f107 0310 	add.w	r3, r7, #16
 8010b2e:	4619      	mov	r1, r3
 8010b30:	68f8      	ldr	r0, [r7, #12]
 8010b32:	f7ff fea7 	bl	8010884 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8010b36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010b3a:	2107      	movs	r1, #7
 8010b3c:	68f8      	ldr	r0, [r7, #12]
 8010b3e:	f000 f909 	bl	8010d54 <SDMMC_GetCmdResp1>
 8010b42:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8010b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010b46:	4618      	mov	r0, r3
 8010b48:	3728      	adds	r7, #40	@ 0x28
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	bd80      	pop	{r7, pc}

08010b4e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8010b4e:	b580      	push	{r7, lr}
 8010b50:	b088      	sub	sp, #32
 8010b52:	af00      	add	r7, sp, #0
 8010b54:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8010b56:	2300      	movs	r3, #0
 8010b58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010b5e:	2300      	movs	r3, #0
 8010b60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b62:	2300      	movs	r3, #0
 8010b64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010b6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b6c:	f107 0308 	add.w	r3, r7, #8
 8010b70:	4619      	mov	r1, r3
 8010b72:	6878      	ldr	r0, [r7, #4]
 8010b74:	f7ff fe86 	bl	8010884 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010b78:	6878      	ldr	r0, [r7, #4]
 8010b7a:	f000 fb23 	bl	80111c4 <SDMMC_GetCmdError>
 8010b7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b80:	69fb      	ldr	r3, [r7, #28]
}
 8010b82:	4618      	mov	r0, r3
 8010b84:	3720      	adds	r7, #32
 8010b86:	46bd      	mov	sp, r7
 8010b88:	bd80      	pop	{r7, pc}

08010b8a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010b8a:	b580      	push	{r7, lr}
 8010b8c:	b088      	sub	sp, #32
 8010b8e:	af00      	add	r7, sp, #0
 8010b90:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010b92:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8010b96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010b98:	2308      	movs	r3, #8
 8010b9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010b9c:	2340      	movs	r3, #64	@ 0x40
 8010b9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ba4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010ba8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010baa:	f107 0308 	add.w	r3, r7, #8
 8010bae:	4619      	mov	r1, r3
 8010bb0:	6878      	ldr	r0, [r7, #4]
 8010bb2:	f7ff fe67 	bl	8010884 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010bb6:	6878      	ldr	r0, [r7, #4]
 8010bb8:	f000 fab6 	bl	8011128 <SDMMC_GetCmdResp7>
 8010bbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010bbe:	69fb      	ldr	r3, [r7, #28]
}
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	3720      	adds	r7, #32
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	bd80      	pop	{r7, pc}

08010bc8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010bc8:	b580      	push	{r7, lr}
 8010bca:	b088      	sub	sp, #32
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
 8010bd0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010bd2:	683b      	ldr	r3, [r7, #0]
 8010bd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010bd6:	2337      	movs	r3, #55	@ 0x37
 8010bd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010bda:	2340      	movs	r3, #64	@ 0x40
 8010bdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010bde:	2300      	movs	r3, #0
 8010be0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010be2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010be6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010be8:	f107 0308 	add.w	r3, r7, #8
 8010bec:	4619      	mov	r1, r3
 8010bee:	6878      	ldr	r0, [r7, #4]
 8010bf0:	f7ff fe48 	bl	8010884 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8010bf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010bf8:	2137      	movs	r1, #55	@ 0x37
 8010bfa:	6878      	ldr	r0, [r7, #4]
 8010bfc:	f000 f8aa 	bl	8010d54 <SDMMC_GetCmdResp1>
 8010c00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c02:	69fb      	ldr	r3, [r7, #28]
}
 8010c04:	4618      	mov	r0, r3
 8010c06:	3720      	adds	r7, #32
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	bd80      	pop	{r7, pc}

08010c0c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b088      	sub	sp, #32
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
 8010c14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8010c16:	683a      	ldr	r2, [r7, #0]
 8010c18:	4b0d      	ldr	r3, [pc, #52]	@ (8010c50 <SDMMC_CmdAppOperCommand+0x44>)
 8010c1a:	4313      	orrs	r3, r2
 8010c1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010c1e:	2329      	movs	r3, #41	@ 0x29
 8010c20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c22:	2340      	movs	r3, #64	@ 0x40
 8010c24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c26:	2300      	movs	r3, #0
 8010c28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010c2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c30:	f107 0308 	add.w	r3, r7, #8
 8010c34:	4619      	mov	r1, r3
 8010c36:	6878      	ldr	r0, [r7, #4]
 8010c38:	f7ff fe24 	bl	8010884 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8010c3c:	6878      	ldr	r0, [r7, #4]
 8010c3e:	f000 f9bf 	bl	8010fc0 <SDMMC_GetCmdResp3>
 8010c42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c44:	69fb      	ldr	r3, [r7, #28]
}
 8010c46:	4618      	mov	r0, r3
 8010c48:	3720      	adds	r7, #32
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	bd80      	pop	{r7, pc}
 8010c4e:	bf00      	nop
 8010c50:	80100000 	.word	0x80100000

08010c54 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b088      	sub	sp, #32
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010c60:	2302      	movs	r3, #2
 8010c62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010c64:	23c0      	movs	r3, #192	@ 0xc0
 8010c66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c68:	2300      	movs	r3, #0
 8010c6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010c70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c72:	f107 0308 	add.w	r3, r7, #8
 8010c76:	4619      	mov	r1, r3
 8010c78:	6878      	ldr	r0, [r7, #4]
 8010c7a:	f7ff fe03 	bl	8010884 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010c7e:	6878      	ldr	r0, [r7, #4]
 8010c80:	f000 f956 	bl	8010f30 <SDMMC_GetCmdResp2>
 8010c84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c86:	69fb      	ldr	r3, [r7, #28]
}
 8010c88:	4618      	mov	r0, r3
 8010c8a:	3720      	adds	r7, #32
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	bd80      	pop	{r7, pc}

08010c90 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b088      	sub	sp, #32
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	6078      	str	r0, [r7, #4]
 8010c98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010c9a:	683b      	ldr	r3, [r7, #0]
 8010c9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010c9e:	2309      	movs	r3, #9
 8010ca0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010ca2:	23c0      	movs	r3, #192	@ 0xc0
 8010ca4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010caa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010cae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010cb0:	f107 0308 	add.w	r3, r7, #8
 8010cb4:	4619      	mov	r1, r3
 8010cb6:	6878      	ldr	r0, [r7, #4]
 8010cb8:	f7ff fde4 	bl	8010884 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010cbc:	6878      	ldr	r0, [r7, #4]
 8010cbe:	f000 f937 	bl	8010f30 <SDMMC_GetCmdResp2>
 8010cc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010cc4:	69fb      	ldr	r3, [r7, #28]
}
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	3720      	adds	r7, #32
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	bd80      	pop	{r7, pc}

08010cce <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8010cce:	b580      	push	{r7, lr}
 8010cd0:	b088      	sub	sp, #32
 8010cd2:	af00      	add	r7, sp, #0
 8010cd4:	6078      	str	r0, [r7, #4]
 8010cd6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010cd8:	2300      	movs	r3, #0
 8010cda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010cdc:	2303      	movs	r3, #3
 8010cde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010ce0:	2340      	movs	r3, #64	@ 0x40
 8010ce2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ce8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010cec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010cee:	f107 0308 	add.w	r3, r7, #8
 8010cf2:	4619      	mov	r1, r3
 8010cf4:	6878      	ldr	r0, [r7, #4]
 8010cf6:	f7ff fdc5 	bl	8010884 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010cfa:	683a      	ldr	r2, [r7, #0]
 8010cfc:	2103      	movs	r1, #3
 8010cfe:	6878      	ldr	r0, [r7, #4]
 8010d00:	f000 f99c 	bl	801103c <SDMMC_GetCmdResp6>
 8010d04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d06:	69fb      	ldr	r3, [r7, #28]
}
 8010d08:	4618      	mov	r0, r3
 8010d0a:	3720      	adds	r7, #32
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	bd80      	pop	{r7, pc}

08010d10 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b088      	sub	sp, #32
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
 8010d18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8010d1a:	683b      	ldr	r3, [r7, #0]
 8010d1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010d1e:	230d      	movs	r3, #13
 8010d20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010d22:	2340      	movs	r3, #64	@ 0x40
 8010d24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d26:	2300      	movs	r3, #0
 8010d28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010d2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010d2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010d30:	f107 0308 	add.w	r3, r7, #8
 8010d34:	4619      	mov	r1, r3
 8010d36:	6878      	ldr	r0, [r7, #4]
 8010d38:	f7ff fda4 	bl	8010884 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8010d3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010d40:	210d      	movs	r1, #13
 8010d42:	6878      	ldr	r0, [r7, #4]
 8010d44:	f000 f806 	bl	8010d54 <SDMMC_GetCmdResp1>
 8010d48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d4a:	69fb      	ldr	r3, [r7, #28]
}
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	3720      	adds	r7, #32
 8010d50:	46bd      	mov	sp, r7
 8010d52:	bd80      	pop	{r7, pc}

08010d54 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b088      	sub	sp, #32
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	60f8      	str	r0, [r7, #12]
 8010d5c:	460b      	mov	r3, r1
 8010d5e:	607a      	str	r2, [r7, #4]
 8010d60:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010d62:	4b70      	ldr	r3, [pc, #448]	@ (8010f24 <SDMMC_GetCmdResp1+0x1d0>)
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	4a70      	ldr	r2, [pc, #448]	@ (8010f28 <SDMMC_GetCmdResp1+0x1d4>)
 8010d68:	fba2 2303 	umull	r2, r3, r2, r3
 8010d6c:	0a5a      	lsrs	r2, r3, #9
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	fb02 f303 	mul.w	r3, r2, r3
 8010d74:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8010d76:	69fb      	ldr	r3, [r7, #28]
 8010d78:	1e5a      	subs	r2, r3, #1
 8010d7a:	61fa      	str	r2, [r7, #28]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d102      	bne.n	8010d86 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010d80:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010d84:	e0c9      	b.n	8010f1a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010d8a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010d8c:	69bb      	ldr	r3, [r7, #24]
 8010d8e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d0ef      	beq.n	8010d76 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010d96:	69bb      	ldr	r3, [r7, #24]
 8010d98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d1ea      	bne.n	8010d76 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010da4:	f003 0304 	and.w	r3, r3, #4
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d004      	beq.n	8010db6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	2204      	movs	r2, #4
 8010db0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010db2:	2304      	movs	r3, #4
 8010db4:	e0b1      	b.n	8010f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010dba:	f003 0301 	and.w	r3, r3, #1
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d004      	beq.n	8010dcc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	2201      	movs	r2, #1
 8010dc6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010dc8:	2301      	movs	r3, #1
 8010dca:	e0a6      	b.n	8010f1a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	22c5      	movs	r2, #197	@ 0xc5
 8010dd0:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010dd2:	68f8      	ldr	r0, [r7, #12]
 8010dd4:	f7ff fd80 	bl	80108d8 <SDMMC_GetCommandResponse>
 8010dd8:	4603      	mov	r3, r0
 8010dda:	461a      	mov	r2, r3
 8010ddc:	7afb      	ldrb	r3, [r7, #11]
 8010dde:	4293      	cmp	r3, r2
 8010de0:	d001      	beq.n	8010de6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010de2:	2301      	movs	r3, #1
 8010de4:	e099      	b.n	8010f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010de6:	2100      	movs	r1, #0
 8010de8:	68f8      	ldr	r0, [r7, #12]
 8010dea:	f7ff fd82 	bl	80108f2 <SDMMC_GetResponse>
 8010dee:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010df0:	697a      	ldr	r2, [r7, #20]
 8010df2:	4b4e      	ldr	r3, [pc, #312]	@ (8010f2c <SDMMC_GetCmdResp1+0x1d8>)
 8010df4:	4013      	ands	r3, r2
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d101      	bne.n	8010dfe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	e08d      	b.n	8010f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010dfe:	697b      	ldr	r3, [r7, #20]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	da02      	bge.n	8010e0a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010e04:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8010e08:	e087      	b.n	8010f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010e0a:	697b      	ldr	r3, [r7, #20]
 8010e0c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d001      	beq.n	8010e18 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010e14:	2340      	movs	r3, #64	@ 0x40
 8010e16:	e080      	b.n	8010f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010e18:	697b      	ldr	r3, [r7, #20]
 8010e1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d001      	beq.n	8010e26 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010e22:	2380      	movs	r3, #128	@ 0x80
 8010e24:	e079      	b.n	8010f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010e26:	697b      	ldr	r3, [r7, #20]
 8010e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d002      	beq.n	8010e36 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010e30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010e34:	e071      	b.n	8010f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010e36:	697b      	ldr	r3, [r7, #20]
 8010e38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d002      	beq.n	8010e46 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010e40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010e44:	e069      	b.n	8010f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010e46:	697b      	ldr	r3, [r7, #20]
 8010e48:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d002      	beq.n	8010e56 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010e50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010e54:	e061      	b.n	8010f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010e56:	697b      	ldr	r3, [r7, #20]
 8010e58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d002      	beq.n	8010e66 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010e60:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010e64:	e059      	b.n	8010f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010e66:	697b      	ldr	r3, [r7, #20]
 8010e68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d002      	beq.n	8010e76 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010e70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010e74:	e051      	b.n	8010f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010e76:	697b      	ldr	r3, [r7, #20]
 8010e78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d002      	beq.n	8010e86 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010e80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010e84:	e049      	b.n	8010f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010e86:	697b      	ldr	r3, [r7, #20]
 8010e88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d002      	beq.n	8010e96 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010e90:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8010e94:	e041      	b.n	8010f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010e96:	697b      	ldr	r3, [r7, #20]
 8010e98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d002      	beq.n	8010ea6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010ea0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010ea4:	e039      	b.n	8010f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010ea6:	697b      	ldr	r3, [r7, #20]
 8010ea8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d002      	beq.n	8010eb6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010eb0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8010eb4:	e031      	b.n	8010f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010eb6:	697b      	ldr	r3, [r7, #20]
 8010eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d002      	beq.n	8010ec6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010ec0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8010ec4:	e029      	b.n	8010f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010ec6:	697b      	ldr	r3, [r7, #20]
 8010ec8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d002      	beq.n	8010ed6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010ed0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010ed4:	e021      	b.n	8010f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010ed6:	697b      	ldr	r3, [r7, #20]
 8010ed8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d002      	beq.n	8010ee6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010ee0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010ee4:	e019      	b.n	8010f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010ee6:	697b      	ldr	r3, [r7, #20]
 8010ee8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d002      	beq.n	8010ef6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010ef0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8010ef4:	e011      	b.n	8010f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010ef6:	697b      	ldr	r3, [r7, #20]
 8010ef8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d002      	beq.n	8010f06 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010f00:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8010f04:	e009      	b.n	8010f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010f06:	697b      	ldr	r3, [r7, #20]
 8010f08:	f003 0308 	and.w	r3, r3, #8
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d002      	beq.n	8010f16 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010f10:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8010f14:	e001      	b.n	8010f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010f16:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	3720      	adds	r7, #32
 8010f1e:	46bd      	mov	sp, r7
 8010f20:	bd80      	pop	{r7, pc}
 8010f22:	bf00      	nop
 8010f24:	20000018 	.word	0x20000018
 8010f28:	10624dd3 	.word	0x10624dd3
 8010f2c:	fdffe008 	.word	0xfdffe008

08010f30 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8010f30:	b480      	push	{r7}
 8010f32:	b085      	sub	sp, #20
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010f38:	4b1f      	ldr	r3, [pc, #124]	@ (8010fb8 <SDMMC_GetCmdResp2+0x88>)
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	4a1f      	ldr	r2, [pc, #124]	@ (8010fbc <SDMMC_GetCmdResp2+0x8c>)
 8010f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8010f42:	0a5b      	lsrs	r3, r3, #9
 8010f44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010f48:	fb02 f303 	mul.w	r3, r2, r3
 8010f4c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	1e5a      	subs	r2, r3, #1
 8010f52:	60fa      	str	r2, [r7, #12]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d102      	bne.n	8010f5e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010f58:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010f5c:	e026      	b.n	8010fac <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f62:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010f64:	68bb      	ldr	r3, [r7, #8]
 8010f66:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d0ef      	beq.n	8010f4e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010f6e:	68bb      	ldr	r3, [r7, #8]
 8010f70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d1ea      	bne.n	8010f4e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f7c:	f003 0304 	and.w	r3, r3, #4
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d004      	beq.n	8010f8e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	2204      	movs	r2, #4
 8010f88:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010f8a:	2304      	movs	r3, #4
 8010f8c:	e00e      	b.n	8010fac <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f92:	f003 0301 	and.w	r3, r3, #1
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d004      	beq.n	8010fa4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	2201      	movs	r2, #1
 8010f9e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010fa0:	2301      	movs	r3, #1
 8010fa2:	e003      	b.n	8010fac <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	22c5      	movs	r2, #197	@ 0xc5
 8010fa8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010faa:	2300      	movs	r3, #0
}
 8010fac:	4618      	mov	r0, r3
 8010fae:	3714      	adds	r7, #20
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb6:	4770      	bx	lr
 8010fb8:	20000018 	.word	0x20000018
 8010fbc:	10624dd3 	.word	0x10624dd3

08010fc0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010fc0:	b480      	push	{r7}
 8010fc2:	b085      	sub	sp, #20
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8011034 <SDMMC_GetCmdResp3+0x74>)
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	4a1a      	ldr	r2, [pc, #104]	@ (8011038 <SDMMC_GetCmdResp3+0x78>)
 8010fce:	fba2 2303 	umull	r2, r3, r2, r3
 8010fd2:	0a5b      	lsrs	r3, r3, #9
 8010fd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010fd8:	fb02 f303 	mul.w	r3, r2, r3
 8010fdc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	1e5a      	subs	r2, r3, #1
 8010fe2:	60fa      	str	r2, [r7, #12]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d102      	bne.n	8010fee <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010fe8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010fec:	e01b      	b.n	8011026 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010ff2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010ff4:	68bb      	ldr	r3, [r7, #8]
 8010ff6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d0ef      	beq.n	8010fde <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010ffe:	68bb      	ldr	r3, [r7, #8]
 8011000:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011004:	2b00      	cmp	r3, #0
 8011006:	d1ea      	bne.n	8010fde <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801100c:	f003 0304 	and.w	r3, r3, #4
 8011010:	2b00      	cmp	r3, #0
 8011012:	d004      	beq.n	801101e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2204      	movs	r2, #4
 8011018:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801101a:	2304      	movs	r3, #4
 801101c:	e003      	b.n	8011026 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	22c5      	movs	r2, #197	@ 0xc5
 8011022:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011024:	2300      	movs	r3, #0
}
 8011026:	4618      	mov	r0, r3
 8011028:	3714      	adds	r7, #20
 801102a:	46bd      	mov	sp, r7
 801102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011030:	4770      	bx	lr
 8011032:	bf00      	nop
 8011034:	20000018 	.word	0x20000018
 8011038:	10624dd3 	.word	0x10624dd3

0801103c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 801103c:	b580      	push	{r7, lr}
 801103e:	b088      	sub	sp, #32
 8011040:	af00      	add	r7, sp, #0
 8011042:	60f8      	str	r0, [r7, #12]
 8011044:	460b      	mov	r3, r1
 8011046:	607a      	str	r2, [r7, #4]
 8011048:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801104a:	4b35      	ldr	r3, [pc, #212]	@ (8011120 <SDMMC_GetCmdResp6+0xe4>)
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	4a35      	ldr	r2, [pc, #212]	@ (8011124 <SDMMC_GetCmdResp6+0xe8>)
 8011050:	fba2 2303 	umull	r2, r3, r2, r3
 8011054:	0a5b      	lsrs	r3, r3, #9
 8011056:	f241 3288 	movw	r2, #5000	@ 0x1388
 801105a:	fb02 f303 	mul.w	r3, r2, r3
 801105e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8011060:	69fb      	ldr	r3, [r7, #28]
 8011062:	1e5a      	subs	r2, r3, #1
 8011064:	61fa      	str	r2, [r7, #28]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d102      	bne.n	8011070 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801106a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801106e:	e052      	b.n	8011116 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011074:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011076:	69bb      	ldr	r3, [r7, #24]
 8011078:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801107c:	2b00      	cmp	r3, #0
 801107e:	d0ef      	beq.n	8011060 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011080:	69bb      	ldr	r3, [r7, #24]
 8011082:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011086:	2b00      	cmp	r3, #0
 8011088:	d1ea      	bne.n	8011060 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801108e:	f003 0304 	and.w	r3, r3, #4
 8011092:	2b00      	cmp	r3, #0
 8011094:	d004      	beq.n	80110a0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	2204      	movs	r2, #4
 801109a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801109c:	2304      	movs	r3, #4
 801109e:	e03a      	b.n	8011116 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110a4:	f003 0301 	and.w	r3, r3, #1
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d004      	beq.n	80110b6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	2201      	movs	r2, #1
 80110b0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80110b2:	2301      	movs	r3, #1
 80110b4:	e02f      	b.n	8011116 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80110b6:	68f8      	ldr	r0, [r7, #12]
 80110b8:	f7ff fc0e 	bl	80108d8 <SDMMC_GetCommandResponse>
 80110bc:	4603      	mov	r3, r0
 80110be:	461a      	mov	r2, r3
 80110c0:	7afb      	ldrb	r3, [r7, #11]
 80110c2:	4293      	cmp	r3, r2
 80110c4:	d001      	beq.n	80110ca <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80110c6:	2301      	movs	r3, #1
 80110c8:	e025      	b.n	8011116 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	22c5      	movs	r2, #197	@ 0xc5
 80110ce:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80110d0:	2100      	movs	r1, #0
 80110d2:	68f8      	ldr	r0, [r7, #12]
 80110d4:	f7ff fc0d 	bl	80108f2 <SDMMC_GetResponse>
 80110d8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80110da:	697b      	ldr	r3, [r7, #20]
 80110dc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d106      	bne.n	80110f2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80110e4:	697b      	ldr	r3, [r7, #20]
 80110e6:	0c1b      	lsrs	r3, r3, #16
 80110e8:	b29a      	uxth	r2, r3
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80110ee:	2300      	movs	r3, #0
 80110f0:	e011      	b.n	8011116 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80110f2:	697b      	ldr	r3, [r7, #20]
 80110f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d002      	beq.n	8011102 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80110fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011100:	e009      	b.n	8011116 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011102:	697b      	ldr	r3, [r7, #20]
 8011104:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011108:	2b00      	cmp	r3, #0
 801110a:	d002      	beq.n	8011112 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801110c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011110:	e001      	b.n	8011116 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011112:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8011116:	4618      	mov	r0, r3
 8011118:	3720      	adds	r7, #32
 801111a:	46bd      	mov	sp, r7
 801111c:	bd80      	pop	{r7, pc}
 801111e:	bf00      	nop
 8011120:	20000018 	.word	0x20000018
 8011124:	10624dd3 	.word	0x10624dd3

08011128 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8011128:	b480      	push	{r7}
 801112a:	b085      	sub	sp, #20
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011130:	4b22      	ldr	r3, [pc, #136]	@ (80111bc <SDMMC_GetCmdResp7+0x94>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	4a22      	ldr	r2, [pc, #136]	@ (80111c0 <SDMMC_GetCmdResp7+0x98>)
 8011136:	fba2 2303 	umull	r2, r3, r2, r3
 801113a:	0a5b      	lsrs	r3, r3, #9
 801113c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011140:	fb02 f303 	mul.w	r3, r2, r3
 8011144:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	1e5a      	subs	r2, r3, #1
 801114a:	60fa      	str	r2, [r7, #12]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d102      	bne.n	8011156 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011150:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011154:	e02c      	b.n	80111b0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801115a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801115c:	68bb      	ldr	r3, [r7, #8]
 801115e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8011162:	2b00      	cmp	r3, #0
 8011164:	d0ef      	beq.n	8011146 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011166:	68bb      	ldr	r3, [r7, #8]
 8011168:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801116c:	2b00      	cmp	r3, #0
 801116e:	d1ea      	bne.n	8011146 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011174:	f003 0304 	and.w	r3, r3, #4
 8011178:	2b00      	cmp	r3, #0
 801117a:	d004      	beq.n	8011186 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	2204      	movs	r2, #4
 8011180:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011182:	2304      	movs	r3, #4
 8011184:	e014      	b.n	80111b0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801118a:	f003 0301 	and.w	r3, r3, #1
 801118e:	2b00      	cmp	r3, #0
 8011190:	d004      	beq.n	801119c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	2201      	movs	r2, #1
 8011196:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011198:	2301      	movs	r3, #1
 801119a:	e009      	b.n	80111b0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80111a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d002      	beq.n	80111ae <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	2240      	movs	r2, #64	@ 0x40
 80111ac:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80111ae:	2300      	movs	r3, #0
  
}
 80111b0:	4618      	mov	r0, r3
 80111b2:	3714      	adds	r7, #20
 80111b4:	46bd      	mov	sp, r7
 80111b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ba:	4770      	bx	lr
 80111bc:	20000018 	.word	0x20000018
 80111c0:	10624dd3 	.word	0x10624dd3

080111c4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80111c4:	b480      	push	{r7}
 80111c6:	b085      	sub	sp, #20
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80111cc:	4b11      	ldr	r3, [pc, #68]	@ (8011214 <SDMMC_GetCmdError+0x50>)
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	4a11      	ldr	r2, [pc, #68]	@ (8011218 <SDMMC_GetCmdError+0x54>)
 80111d2:	fba2 2303 	umull	r2, r3, r2, r3
 80111d6:	0a5b      	lsrs	r3, r3, #9
 80111d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80111dc:	fb02 f303 	mul.w	r3, r2, r3
 80111e0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	1e5a      	subs	r2, r3, #1
 80111e6:	60fa      	str	r2, [r7, #12]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d102      	bne.n	80111f2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80111ec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80111f0:	e009      	b.n	8011206 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80111f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d0f1      	beq.n	80111e2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	22c5      	movs	r2, #197	@ 0xc5
 8011202:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8011204:	2300      	movs	r3, #0
}
 8011206:	4618      	mov	r0, r3
 8011208:	3714      	adds	r7, #20
 801120a:	46bd      	mov	sp, r7
 801120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011210:	4770      	bx	lr
 8011212:	bf00      	nop
 8011214:	20000018 	.word	0x20000018
 8011218:	10624dd3 	.word	0x10624dd3

0801121c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801121c:	b084      	sub	sp, #16
 801121e:	b580      	push	{r7, lr}
 8011220:	b084      	sub	sp, #16
 8011222:	af00      	add	r7, sp, #0
 8011224:	6078      	str	r0, [r7, #4]
 8011226:	f107 001c 	add.w	r0, r7, #28
 801122a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801122e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8011232:	2b01      	cmp	r3, #1
 8011234:	d121      	bne.n	801127a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801123a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	68da      	ldr	r2, [r3, #12]
 8011246:	4b21      	ldr	r3, [pc, #132]	@ (80112cc <USB_CoreInit+0xb0>)
 8011248:	4013      	ands	r3, r2
 801124a:	687a      	ldr	r2, [r7, #4]
 801124c:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	68db      	ldr	r3, [r3, #12]
 8011252:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801125a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801125e:	2b01      	cmp	r3, #1
 8011260:	d105      	bne.n	801126e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	68db      	ldr	r3, [r3, #12]
 8011266:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801126e:	6878      	ldr	r0, [r7, #4]
 8011270:	f000 f9d4 	bl	801161c <USB_CoreReset>
 8011274:	4603      	mov	r3, r0
 8011276:	73fb      	strb	r3, [r7, #15]
 8011278:	e010      	b.n	801129c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	68db      	ldr	r3, [r3, #12]
 801127e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011286:	6878      	ldr	r0, [r7, #4]
 8011288:	f000 f9c8 	bl	801161c <USB_CoreReset>
 801128c:	4603      	mov	r3, r0
 801128e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011294:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 801129c:	7fbb      	ldrb	r3, [r7, #30]
 801129e:	2b01      	cmp	r3, #1
 80112a0:	d10b      	bne.n	80112ba <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	689b      	ldr	r3, [r3, #8]
 80112a6:	f043 0206 	orr.w	r2, r3, #6
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	689b      	ldr	r3, [r3, #8]
 80112b2:	f043 0220 	orr.w	r2, r3, #32
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80112ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80112bc:	4618      	mov	r0, r3
 80112be:	3710      	adds	r7, #16
 80112c0:	46bd      	mov	sp, r7
 80112c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80112c6:	b004      	add	sp, #16
 80112c8:	4770      	bx	lr
 80112ca:	bf00      	nop
 80112cc:	ffbdffbf 	.word	0xffbdffbf

080112d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80112d0:	b480      	push	{r7}
 80112d2:	b083      	sub	sp, #12
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	689b      	ldr	r3, [r3, #8]
 80112dc:	f043 0201 	orr.w	r2, r3, #1
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80112e4:	2300      	movs	r3, #0
}
 80112e6:	4618      	mov	r0, r3
 80112e8:	370c      	adds	r7, #12
 80112ea:	46bd      	mov	sp, r7
 80112ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f0:	4770      	bx	lr

080112f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80112f2:	b480      	push	{r7}
 80112f4:	b083      	sub	sp, #12
 80112f6:	af00      	add	r7, sp, #0
 80112f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	689b      	ldr	r3, [r3, #8]
 80112fe:	f023 0201 	bic.w	r2, r3, #1
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011306:	2300      	movs	r3, #0
}
 8011308:	4618      	mov	r0, r3
 801130a:	370c      	adds	r7, #12
 801130c:	46bd      	mov	sp, r7
 801130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011312:	4770      	bx	lr

08011314 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b084      	sub	sp, #16
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]
 801131c:	460b      	mov	r3, r1
 801131e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8011320:	2300      	movs	r3, #0
 8011322:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	68db      	ldr	r3, [r3, #12]
 8011328:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011330:	78fb      	ldrb	r3, [r7, #3]
 8011332:	2b01      	cmp	r3, #1
 8011334:	d115      	bne.n	8011362 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	68db      	ldr	r3, [r3, #12]
 801133a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011342:	200a      	movs	r0, #10
 8011344:	f7f4 fa18 	bl	8005778 <HAL_Delay>
      ms += 10U;
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	330a      	adds	r3, #10
 801134c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801134e:	6878      	ldr	r0, [r7, #4]
 8011350:	f000 f956 	bl	8011600 <USB_GetMode>
 8011354:	4603      	mov	r3, r0
 8011356:	2b01      	cmp	r3, #1
 8011358:	d01e      	beq.n	8011398 <USB_SetCurrentMode+0x84>
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	2bc7      	cmp	r3, #199	@ 0xc7
 801135e:	d9f0      	bls.n	8011342 <USB_SetCurrentMode+0x2e>
 8011360:	e01a      	b.n	8011398 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8011362:	78fb      	ldrb	r3, [r7, #3]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d115      	bne.n	8011394 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	68db      	ldr	r3, [r3, #12]
 801136c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011374:	200a      	movs	r0, #10
 8011376:	f7f4 f9ff 	bl	8005778 <HAL_Delay>
      ms += 10U;
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	330a      	adds	r3, #10
 801137e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8011380:	6878      	ldr	r0, [r7, #4]
 8011382:	f000 f93d 	bl	8011600 <USB_GetMode>
 8011386:	4603      	mov	r3, r0
 8011388:	2b00      	cmp	r3, #0
 801138a:	d005      	beq.n	8011398 <USB_SetCurrentMode+0x84>
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	2bc7      	cmp	r3, #199	@ 0xc7
 8011390:	d9f0      	bls.n	8011374 <USB_SetCurrentMode+0x60>
 8011392:	e001      	b.n	8011398 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8011394:	2301      	movs	r3, #1
 8011396:	e005      	b.n	80113a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	2bc8      	cmp	r3, #200	@ 0xc8
 801139c:	d101      	bne.n	80113a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801139e:	2301      	movs	r3, #1
 80113a0:	e000      	b.n	80113a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80113a2:	2300      	movs	r3, #0
}
 80113a4:	4618      	mov	r0, r3
 80113a6:	3710      	adds	r7, #16
 80113a8:	46bd      	mov	sp, r7
 80113aa:	bd80      	pop	{r7, pc}

080113ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80113ac:	b480      	push	{r7}
 80113ae:	b085      	sub	sp, #20
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
 80113b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80113b6:	2300      	movs	r3, #0
 80113b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	3301      	adds	r3, #1
 80113be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80113c6:	d901      	bls.n	80113cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80113c8:	2303      	movs	r3, #3
 80113ca:	e01b      	b.n	8011404 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	691b      	ldr	r3, [r3, #16]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	daf2      	bge.n	80113ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80113d4:	2300      	movs	r3, #0
 80113d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80113d8:	683b      	ldr	r3, [r7, #0]
 80113da:	019b      	lsls	r3, r3, #6
 80113dc:	f043 0220 	orr.w	r2, r3, #32
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	3301      	adds	r3, #1
 80113e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80113f0:	d901      	bls.n	80113f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80113f2:	2303      	movs	r3, #3
 80113f4:	e006      	b.n	8011404 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	691b      	ldr	r3, [r3, #16]
 80113fa:	f003 0320 	and.w	r3, r3, #32
 80113fe:	2b20      	cmp	r3, #32
 8011400:	d0f0      	beq.n	80113e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8011402:	2300      	movs	r3, #0
}
 8011404:	4618      	mov	r0, r3
 8011406:	3714      	adds	r7, #20
 8011408:	46bd      	mov	sp, r7
 801140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801140e:	4770      	bx	lr

08011410 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011410:	b480      	push	{r7}
 8011412:	b085      	sub	sp, #20
 8011414:	af00      	add	r7, sp, #0
 8011416:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011418:	2300      	movs	r3, #0
 801141a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	3301      	adds	r3, #1
 8011420:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011428:	d901      	bls.n	801142e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801142a:	2303      	movs	r3, #3
 801142c:	e018      	b.n	8011460 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	691b      	ldr	r3, [r3, #16]
 8011432:	2b00      	cmp	r3, #0
 8011434:	daf2      	bge.n	801141c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8011436:	2300      	movs	r3, #0
 8011438:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	2210      	movs	r2, #16
 801143e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	3301      	adds	r3, #1
 8011444:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801144c:	d901      	bls.n	8011452 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801144e:	2303      	movs	r3, #3
 8011450:	e006      	b.n	8011460 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	691b      	ldr	r3, [r3, #16]
 8011456:	f003 0310 	and.w	r3, r3, #16
 801145a:	2b10      	cmp	r3, #16
 801145c:	d0f0      	beq.n	8011440 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801145e:	2300      	movs	r3, #0
}
 8011460:	4618      	mov	r0, r3
 8011462:	3714      	adds	r7, #20
 8011464:	46bd      	mov	sp, r7
 8011466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146a:	4770      	bx	lr

0801146c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801146c:	b480      	push	{r7}
 801146e:	b089      	sub	sp, #36	@ 0x24
 8011470:	af00      	add	r7, sp, #0
 8011472:	60f8      	str	r0, [r7, #12]
 8011474:	60b9      	str	r1, [r7, #8]
 8011476:	4611      	mov	r1, r2
 8011478:	461a      	mov	r2, r3
 801147a:	460b      	mov	r3, r1
 801147c:	71fb      	strb	r3, [r7, #7]
 801147e:	4613      	mov	r3, r2
 8011480:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8011486:	68bb      	ldr	r3, [r7, #8]
 8011488:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801148a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801148e:	2b00      	cmp	r3, #0
 8011490:	d123      	bne.n	80114da <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8011492:	88bb      	ldrh	r3, [r7, #4]
 8011494:	3303      	adds	r3, #3
 8011496:	089b      	lsrs	r3, r3, #2
 8011498:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801149a:	2300      	movs	r3, #0
 801149c:	61bb      	str	r3, [r7, #24]
 801149e:	e018      	b.n	80114d2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80114a0:	79fb      	ldrb	r3, [r7, #7]
 80114a2:	031a      	lsls	r2, r3, #12
 80114a4:	697b      	ldr	r3, [r7, #20]
 80114a6:	4413      	add	r3, r2
 80114a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80114ac:	461a      	mov	r2, r3
 80114ae:	69fb      	ldr	r3, [r7, #28]
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80114b4:	69fb      	ldr	r3, [r7, #28]
 80114b6:	3301      	adds	r3, #1
 80114b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80114ba:	69fb      	ldr	r3, [r7, #28]
 80114bc:	3301      	adds	r3, #1
 80114be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80114c0:	69fb      	ldr	r3, [r7, #28]
 80114c2:	3301      	adds	r3, #1
 80114c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80114c6:	69fb      	ldr	r3, [r7, #28]
 80114c8:	3301      	adds	r3, #1
 80114ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80114cc:	69bb      	ldr	r3, [r7, #24]
 80114ce:	3301      	adds	r3, #1
 80114d0:	61bb      	str	r3, [r7, #24]
 80114d2:	69ba      	ldr	r2, [r7, #24]
 80114d4:	693b      	ldr	r3, [r7, #16]
 80114d6:	429a      	cmp	r2, r3
 80114d8:	d3e2      	bcc.n	80114a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80114da:	2300      	movs	r3, #0
}
 80114dc:	4618      	mov	r0, r3
 80114de:	3724      	adds	r7, #36	@ 0x24
 80114e0:	46bd      	mov	sp, r7
 80114e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e6:	4770      	bx	lr

080114e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80114e8:	b480      	push	{r7}
 80114ea:	b08b      	sub	sp, #44	@ 0x2c
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	60f8      	str	r0, [r7, #12]
 80114f0:	60b9      	str	r1, [r7, #8]
 80114f2:	4613      	mov	r3, r2
 80114f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80114fa:	68bb      	ldr	r3, [r7, #8]
 80114fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80114fe:	88fb      	ldrh	r3, [r7, #6]
 8011500:	089b      	lsrs	r3, r3, #2
 8011502:	b29b      	uxth	r3, r3
 8011504:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8011506:	88fb      	ldrh	r3, [r7, #6]
 8011508:	f003 0303 	and.w	r3, r3, #3
 801150c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801150e:	2300      	movs	r3, #0
 8011510:	623b      	str	r3, [r7, #32]
 8011512:	e014      	b.n	801153e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011514:	69bb      	ldr	r3, [r7, #24]
 8011516:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801151a:	681a      	ldr	r2, [r3, #0]
 801151c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801151e:	601a      	str	r2, [r3, #0]
    pDest++;
 8011520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011522:	3301      	adds	r3, #1
 8011524:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011528:	3301      	adds	r3, #1
 801152a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801152c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801152e:	3301      	adds	r3, #1
 8011530:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011534:	3301      	adds	r3, #1
 8011536:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8011538:	6a3b      	ldr	r3, [r7, #32]
 801153a:	3301      	adds	r3, #1
 801153c:	623b      	str	r3, [r7, #32]
 801153e:	6a3a      	ldr	r2, [r7, #32]
 8011540:	697b      	ldr	r3, [r7, #20]
 8011542:	429a      	cmp	r2, r3
 8011544:	d3e6      	bcc.n	8011514 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8011546:	8bfb      	ldrh	r3, [r7, #30]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d01e      	beq.n	801158a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801154c:	2300      	movs	r3, #0
 801154e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8011550:	69bb      	ldr	r3, [r7, #24]
 8011552:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011556:	461a      	mov	r2, r3
 8011558:	f107 0310 	add.w	r3, r7, #16
 801155c:	6812      	ldr	r2, [r2, #0]
 801155e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8011560:	693a      	ldr	r2, [r7, #16]
 8011562:	6a3b      	ldr	r3, [r7, #32]
 8011564:	b2db      	uxtb	r3, r3
 8011566:	00db      	lsls	r3, r3, #3
 8011568:	fa22 f303 	lsr.w	r3, r2, r3
 801156c:	b2da      	uxtb	r2, r3
 801156e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011570:	701a      	strb	r2, [r3, #0]
      i++;
 8011572:	6a3b      	ldr	r3, [r7, #32]
 8011574:	3301      	adds	r3, #1
 8011576:	623b      	str	r3, [r7, #32]
      pDest++;
 8011578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801157a:	3301      	adds	r3, #1
 801157c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 801157e:	8bfb      	ldrh	r3, [r7, #30]
 8011580:	3b01      	subs	r3, #1
 8011582:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8011584:	8bfb      	ldrh	r3, [r7, #30]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d1ea      	bne.n	8011560 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801158a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801158c:	4618      	mov	r0, r3
 801158e:	372c      	adds	r7, #44	@ 0x2c
 8011590:	46bd      	mov	sp, r7
 8011592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011596:	4770      	bx	lr

08011598 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8011598:	b480      	push	{r7}
 801159a:	b085      	sub	sp, #20
 801159c:	af00      	add	r7, sp, #0
 801159e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	695b      	ldr	r3, [r3, #20]
 80115a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	699b      	ldr	r3, [r3, #24]
 80115aa:	68fa      	ldr	r2, [r7, #12]
 80115ac:	4013      	ands	r3, r2
 80115ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80115b0:	68fb      	ldr	r3, [r7, #12]
}
 80115b2:	4618      	mov	r0, r3
 80115b4:	3714      	adds	r7, #20
 80115b6:	46bd      	mov	sp, r7
 80115b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115bc:	4770      	bx	lr

080115be <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80115be:	b480      	push	{r7}
 80115c0:	b085      	sub	sp, #20
 80115c2:	af00      	add	r7, sp, #0
 80115c4:	6078      	str	r0, [r7, #4]
 80115c6:	460b      	mov	r3, r1
 80115c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80115ce:	78fb      	ldrb	r3, [r7, #3]
 80115d0:	015a      	lsls	r2, r3, #5
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	4413      	add	r3, r2
 80115d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80115da:	689b      	ldr	r3, [r3, #8]
 80115dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80115de:	78fb      	ldrb	r3, [r7, #3]
 80115e0:	015a      	lsls	r2, r3, #5
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	4413      	add	r3, r2
 80115e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80115ea:	68db      	ldr	r3, [r3, #12]
 80115ec:	68ba      	ldr	r2, [r7, #8]
 80115ee:	4013      	ands	r3, r2
 80115f0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80115f2:	68bb      	ldr	r3, [r7, #8]
}
 80115f4:	4618      	mov	r0, r3
 80115f6:	3714      	adds	r7, #20
 80115f8:	46bd      	mov	sp, r7
 80115fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fe:	4770      	bx	lr

08011600 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8011600:	b480      	push	{r7}
 8011602:	b083      	sub	sp, #12
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	695b      	ldr	r3, [r3, #20]
 801160c:	f003 0301 	and.w	r3, r3, #1
}
 8011610:	4618      	mov	r0, r3
 8011612:	370c      	adds	r7, #12
 8011614:	46bd      	mov	sp, r7
 8011616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161a:	4770      	bx	lr

0801161c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801161c:	b480      	push	{r7}
 801161e:	b085      	sub	sp, #20
 8011620:	af00      	add	r7, sp, #0
 8011622:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011624:	2300      	movs	r3, #0
 8011626:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	3301      	adds	r3, #1
 801162c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011634:	d901      	bls.n	801163a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011636:	2303      	movs	r3, #3
 8011638:	e022      	b.n	8011680 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	691b      	ldr	r3, [r3, #16]
 801163e:	2b00      	cmp	r3, #0
 8011640:	daf2      	bge.n	8011628 <USB_CoreReset+0xc>

  count = 10U;
 8011642:	230a      	movs	r3, #10
 8011644:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8011646:	e002      	b.n	801164e <USB_CoreReset+0x32>
  {
    count--;
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	3b01      	subs	r3, #1
 801164c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d1f9      	bne.n	8011648 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	691b      	ldr	r3, [r3, #16]
 8011658:	f043 0201 	orr.w	r2, r3, #1
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	3301      	adds	r3, #1
 8011664:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801166c:	d901      	bls.n	8011672 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 801166e:	2303      	movs	r3, #3
 8011670:	e006      	b.n	8011680 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	691b      	ldr	r3, [r3, #16]
 8011676:	f003 0301 	and.w	r3, r3, #1
 801167a:	2b01      	cmp	r3, #1
 801167c:	d0f0      	beq.n	8011660 <USB_CoreReset+0x44>

  return HAL_OK;
 801167e:	2300      	movs	r3, #0
}
 8011680:	4618      	mov	r0, r3
 8011682:	3714      	adds	r7, #20
 8011684:	46bd      	mov	sp, r7
 8011686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168a:	4770      	bx	lr

0801168c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801168c:	b084      	sub	sp, #16
 801168e:	b580      	push	{r7, lr}
 8011690:	b086      	sub	sp, #24
 8011692:	af00      	add	r7, sp, #0
 8011694:	6078      	str	r0, [r7, #4]
 8011696:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801169a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801169e:	2300      	movs	r3, #0
 80116a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80116ac:	461a      	mov	r2, r3
 80116ae:	2300      	movs	r3, #0
 80116b0:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116b6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	68db      	ldr	r3, [r3, #12]
 80116c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d119      	bne.n	80116fe <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80116ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80116ce:	2b01      	cmp	r3, #1
 80116d0:	d10a      	bne.n	80116e8 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	68fa      	ldr	r2, [r7, #12]
 80116dc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80116e0:	f043 0304 	orr.w	r3, r3, #4
 80116e4:	6013      	str	r3, [r2, #0]
 80116e6:	e014      	b.n	8011712 <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	68fa      	ldr	r2, [r7, #12]
 80116f2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80116f6:	f023 0304 	bic.w	r3, r3, #4
 80116fa:	6013      	str	r3, [r2, #0]
 80116fc:	e009      	b.n	8011712 <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	68fa      	ldr	r2, [r7, #12]
 8011708:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801170c:	f023 0304 	bic.w	r3, r3, #4
 8011710:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011712:	2110      	movs	r1, #16
 8011714:	6878      	ldr	r0, [r7, #4]
 8011716:	f7ff fe49 	bl	80113ac <USB_FlushTxFifo>
 801171a:	4603      	mov	r3, r0
 801171c:	2b00      	cmp	r3, #0
 801171e:	d001      	beq.n	8011724 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 8011720:	2301      	movs	r3, #1
 8011722:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011724:	6878      	ldr	r0, [r7, #4]
 8011726:	f7ff fe73 	bl	8011410 <USB_FlushRxFifo>
 801172a:	4603      	mov	r3, r0
 801172c:	2b00      	cmp	r3, #0
 801172e:	d001      	beq.n	8011734 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 8011730:	2301      	movs	r3, #1
 8011732:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8011734:	2300      	movs	r3, #0
 8011736:	613b      	str	r3, [r7, #16]
 8011738:	e015      	b.n	8011766 <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 801173a:	693b      	ldr	r3, [r7, #16]
 801173c:	015a      	lsls	r2, r3, #5
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	4413      	add	r3, r2
 8011742:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011746:	461a      	mov	r2, r3
 8011748:	f04f 33ff 	mov.w	r3, #4294967295
 801174c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 801174e:	693b      	ldr	r3, [r7, #16]
 8011750:	015a      	lsls	r2, r3, #5
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	4413      	add	r3, r2
 8011756:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801175a:	461a      	mov	r2, r3
 801175c:	2300      	movs	r3, #0
 801175e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8011760:	693b      	ldr	r3, [r7, #16]
 8011762:	3301      	adds	r3, #1
 8011764:	613b      	str	r3, [r7, #16]
 8011766:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801176a:	461a      	mov	r2, r3
 801176c:	693b      	ldr	r3, [r7, #16]
 801176e:	4293      	cmp	r3, r2
 8011770:	d3e3      	bcc.n	801173a <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	2200      	movs	r2, #0
 8011776:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	f04f 32ff 	mov.w	r2, #4294967295
 801177e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	4a18      	ldr	r2, [pc, #96]	@ (80117e4 <USB_HostInit+0x158>)
 8011784:	4293      	cmp	r3, r2
 8011786:	d10b      	bne.n	80117a0 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801178e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	4a15      	ldr	r2, [pc, #84]	@ (80117e8 <USB_HostInit+0x15c>)
 8011794:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	4a14      	ldr	r2, [pc, #80]	@ (80117ec <USB_HostInit+0x160>)
 801179a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 801179e:	e009      	b.n	80117b4 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	2280      	movs	r2, #128	@ 0x80
 80117a4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	4a11      	ldr	r2, [pc, #68]	@ (80117f0 <USB_HostInit+0x164>)
 80117aa:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	4a11      	ldr	r2, [pc, #68]	@ (80117f4 <USB_HostInit+0x168>)
 80117b0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80117b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d105      	bne.n	80117c8 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	699b      	ldr	r3, [r3, #24]
 80117c0:	f043 0210 	orr.w	r2, r3, #16
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	699a      	ldr	r2, [r3, #24]
 80117cc:	4b0a      	ldr	r3, [pc, #40]	@ (80117f8 <USB_HostInit+0x16c>)
 80117ce:	4313      	orrs	r3, r2
 80117d0:	687a      	ldr	r2, [r7, #4]
 80117d2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80117d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80117d6:	4618      	mov	r0, r3
 80117d8:	3718      	adds	r7, #24
 80117da:	46bd      	mov	sp, r7
 80117dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80117e0:	b004      	add	sp, #16
 80117e2:	4770      	bx	lr
 80117e4:	40040000 	.word	0x40040000
 80117e8:	01000200 	.word	0x01000200
 80117ec:	00e00300 	.word	0x00e00300
 80117f0:	00600080 	.word	0x00600080
 80117f4:	004000e0 	.word	0x004000e0
 80117f8:	a3200008 	.word	0xa3200008

080117fc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80117fc:	b480      	push	{r7}
 80117fe:	b085      	sub	sp, #20
 8011800:	af00      	add	r7, sp, #0
 8011802:	6078      	str	r0, [r7, #4]
 8011804:	460b      	mov	r3, r1
 8011806:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	68fa      	ldr	r2, [r7, #12]
 8011816:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801181a:	f023 0303 	bic.w	r3, r3, #3
 801181e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011826:	681a      	ldr	r2, [r3, #0]
 8011828:	78fb      	ldrb	r3, [r7, #3]
 801182a:	f003 0303 	and.w	r3, r3, #3
 801182e:	68f9      	ldr	r1, [r7, #12]
 8011830:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8011834:	4313      	orrs	r3, r2
 8011836:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8011838:	78fb      	ldrb	r3, [r7, #3]
 801183a:	2b01      	cmp	r3, #1
 801183c:	d107      	bne.n	801184e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011844:	461a      	mov	r2, r3
 8011846:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 801184a:	6053      	str	r3, [r2, #4]
 801184c:	e00c      	b.n	8011868 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 801184e:	78fb      	ldrb	r3, [r7, #3]
 8011850:	2b02      	cmp	r3, #2
 8011852:	d107      	bne.n	8011864 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801185a:	461a      	mov	r2, r3
 801185c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8011860:	6053      	str	r3, [r2, #4]
 8011862:	e001      	b.n	8011868 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8011864:	2301      	movs	r3, #1
 8011866:	e000      	b.n	801186a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8011868:	2300      	movs	r3, #0
}
 801186a:	4618      	mov	r0, r3
 801186c:	3714      	adds	r7, #20
 801186e:	46bd      	mov	sp, r7
 8011870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011874:	4770      	bx	lr

08011876 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8011876:	b580      	push	{r7, lr}
 8011878:	b084      	sub	sp, #16
 801187a:	af00      	add	r7, sp, #0
 801187c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8011882:	2300      	movs	r3, #0
 8011884:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8011890:	68bb      	ldr	r3, [r7, #8]
 8011892:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8011896:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8011898:	68bb      	ldr	r3, [r7, #8]
 801189a:	68fa      	ldr	r2, [r7, #12]
 801189c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80118a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80118a4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80118a6:	2064      	movs	r0, #100	@ 0x64
 80118a8:	f7f3 ff66 	bl	8005778 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80118ac:	68bb      	ldr	r3, [r7, #8]
 80118ae:	68fa      	ldr	r2, [r7, #12]
 80118b0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80118b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80118b8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80118ba:	200a      	movs	r0, #10
 80118bc:	f7f3 ff5c 	bl	8005778 <HAL_Delay>

  return HAL_OK;
 80118c0:	2300      	movs	r3, #0
}
 80118c2:	4618      	mov	r0, r3
 80118c4:	3710      	adds	r7, #16
 80118c6:	46bd      	mov	sp, r7
 80118c8:	bd80      	pop	{r7, pc}

080118ca <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80118ca:	b480      	push	{r7}
 80118cc:	b085      	sub	sp, #20
 80118ce:	af00      	add	r7, sp, #0
 80118d0:	6078      	str	r0, [r7, #4]
 80118d2:	460b      	mov	r3, r1
 80118d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80118da:	2300      	movs	r3, #0
 80118dc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80118e8:	68bb      	ldr	r3, [r7, #8]
 80118ea:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80118ee:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80118f0:	68bb      	ldr	r3, [r7, #8]
 80118f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d109      	bne.n	801190e <USB_DriveVbus+0x44>
 80118fa:	78fb      	ldrb	r3, [r7, #3]
 80118fc:	2b01      	cmp	r3, #1
 80118fe:	d106      	bne.n	801190e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8011900:	68bb      	ldr	r3, [r7, #8]
 8011902:	68fa      	ldr	r2, [r7, #12]
 8011904:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8011908:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801190c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 801190e:	68bb      	ldr	r3, [r7, #8]
 8011910:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8011914:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011918:	d109      	bne.n	801192e <USB_DriveVbus+0x64>
 801191a:	78fb      	ldrb	r3, [r7, #3]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d106      	bne.n	801192e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8011920:	68bb      	ldr	r3, [r7, #8]
 8011922:	68fa      	ldr	r2, [r7, #12]
 8011924:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8011928:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801192c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 801192e:	2300      	movs	r3, #0
}
 8011930:	4618      	mov	r0, r3
 8011932:	3714      	adds	r7, #20
 8011934:	46bd      	mov	sp, r7
 8011936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193a:	4770      	bx	lr

0801193c <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 801193c:	b480      	push	{r7}
 801193e:	b085      	sub	sp, #20
 8011940:	af00      	add	r7, sp, #0
 8011942:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8011948:	2300      	movs	r3, #0
 801194a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8011956:	68bb      	ldr	r3, [r7, #8]
 8011958:	0c5b      	lsrs	r3, r3, #17
 801195a:	f003 0303 	and.w	r3, r3, #3
}
 801195e:	4618      	mov	r0, r3
 8011960:	3714      	adds	r7, #20
 8011962:	46bd      	mov	sp, r7
 8011964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011968:	4770      	bx	lr

0801196a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 801196a:	b480      	push	{r7}
 801196c:	b085      	sub	sp, #20
 801196e:	af00      	add	r7, sp, #0
 8011970:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801197c:	689b      	ldr	r3, [r3, #8]
 801197e:	b29b      	uxth	r3, r3
}
 8011980:	4618      	mov	r0, r3
 8011982:	3714      	adds	r7, #20
 8011984:	46bd      	mov	sp, r7
 8011986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198a:	4770      	bx	lr

0801198c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 801198c:	b580      	push	{r7, lr}
 801198e:	b088      	sub	sp, #32
 8011990:	af00      	add	r7, sp, #0
 8011992:	6078      	str	r0, [r7, #4]
 8011994:	4608      	mov	r0, r1
 8011996:	4611      	mov	r1, r2
 8011998:	461a      	mov	r2, r3
 801199a:	4603      	mov	r3, r0
 801199c:	70fb      	strb	r3, [r7, #3]
 801199e:	460b      	mov	r3, r1
 80119a0:	70bb      	strb	r3, [r7, #2]
 80119a2:	4613      	mov	r3, r2
 80119a4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80119a6:	2300      	movs	r3, #0
 80119a8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80119ae:	78fb      	ldrb	r3, [r7, #3]
 80119b0:	015a      	lsls	r2, r3, #5
 80119b2:	693b      	ldr	r3, [r7, #16]
 80119b4:	4413      	add	r3, r2
 80119b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80119ba:	461a      	mov	r2, r3
 80119bc:	f04f 33ff 	mov.w	r3, #4294967295
 80119c0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80119c2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80119c6:	2b03      	cmp	r3, #3
 80119c8:	d87c      	bhi.n	8011ac4 <USB_HC_Init+0x138>
 80119ca:	a201      	add	r2, pc, #4	@ (adr r2, 80119d0 <USB_HC_Init+0x44>)
 80119cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119d0:	080119e1 	.word	0x080119e1
 80119d4:	08011a87 	.word	0x08011a87
 80119d8:	080119e1 	.word	0x080119e1
 80119dc:	08011a49 	.word	0x08011a49
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80119e0:	78fb      	ldrb	r3, [r7, #3]
 80119e2:	015a      	lsls	r2, r3, #5
 80119e4:	693b      	ldr	r3, [r7, #16]
 80119e6:	4413      	add	r3, r2
 80119e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80119ec:	461a      	mov	r2, r3
 80119ee:	f240 439d 	movw	r3, #1181	@ 0x49d
 80119f2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80119f4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	da10      	bge.n	8011a1e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80119fc:	78fb      	ldrb	r3, [r7, #3]
 80119fe:	015a      	lsls	r2, r3, #5
 8011a00:	693b      	ldr	r3, [r7, #16]
 8011a02:	4413      	add	r3, r2
 8011a04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011a08:	68db      	ldr	r3, [r3, #12]
 8011a0a:	78fa      	ldrb	r2, [r7, #3]
 8011a0c:	0151      	lsls	r1, r2, #5
 8011a0e:	693a      	ldr	r2, [r7, #16]
 8011a10:	440a      	add	r2, r1
 8011a12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011a16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011a1a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8011a1c:	e055      	b.n	8011aca <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	4a6f      	ldr	r2, [pc, #444]	@ (8011be0 <USB_HC_Init+0x254>)
 8011a22:	4293      	cmp	r3, r2
 8011a24:	d151      	bne.n	8011aca <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8011a26:	78fb      	ldrb	r3, [r7, #3]
 8011a28:	015a      	lsls	r2, r3, #5
 8011a2a:	693b      	ldr	r3, [r7, #16]
 8011a2c:	4413      	add	r3, r2
 8011a2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011a32:	68db      	ldr	r3, [r3, #12]
 8011a34:	78fa      	ldrb	r2, [r7, #3]
 8011a36:	0151      	lsls	r1, r2, #5
 8011a38:	693a      	ldr	r2, [r7, #16]
 8011a3a:	440a      	add	r2, r1
 8011a3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011a40:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8011a44:	60d3      	str	r3, [r2, #12]
      break;
 8011a46:	e040      	b.n	8011aca <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8011a48:	78fb      	ldrb	r3, [r7, #3]
 8011a4a:	015a      	lsls	r2, r3, #5
 8011a4c:	693b      	ldr	r3, [r7, #16]
 8011a4e:	4413      	add	r3, r2
 8011a50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011a54:	461a      	mov	r2, r3
 8011a56:	f240 639d 	movw	r3, #1693	@ 0x69d
 8011a5a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8011a5c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	da34      	bge.n	8011ace <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8011a64:	78fb      	ldrb	r3, [r7, #3]
 8011a66:	015a      	lsls	r2, r3, #5
 8011a68:	693b      	ldr	r3, [r7, #16]
 8011a6a:	4413      	add	r3, r2
 8011a6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011a70:	68db      	ldr	r3, [r3, #12]
 8011a72:	78fa      	ldrb	r2, [r7, #3]
 8011a74:	0151      	lsls	r1, r2, #5
 8011a76:	693a      	ldr	r2, [r7, #16]
 8011a78:	440a      	add	r2, r1
 8011a7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011a7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011a82:	60d3      	str	r3, [r2, #12]
      }

      break;
 8011a84:	e023      	b.n	8011ace <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8011a86:	78fb      	ldrb	r3, [r7, #3]
 8011a88:	015a      	lsls	r2, r3, #5
 8011a8a:	693b      	ldr	r3, [r7, #16]
 8011a8c:	4413      	add	r3, r2
 8011a8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011a92:	461a      	mov	r2, r3
 8011a94:	f240 2325 	movw	r3, #549	@ 0x225
 8011a98:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8011a9a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	da17      	bge.n	8011ad2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8011aa2:	78fb      	ldrb	r3, [r7, #3]
 8011aa4:	015a      	lsls	r2, r3, #5
 8011aa6:	693b      	ldr	r3, [r7, #16]
 8011aa8:	4413      	add	r3, r2
 8011aaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011aae:	68db      	ldr	r3, [r3, #12]
 8011ab0:	78fa      	ldrb	r2, [r7, #3]
 8011ab2:	0151      	lsls	r1, r2, #5
 8011ab4:	693a      	ldr	r2, [r7, #16]
 8011ab6:	440a      	add	r2, r1
 8011ab8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011abc:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8011ac0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8011ac2:	e006      	b.n	8011ad2 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8011ac4:	2301      	movs	r3, #1
 8011ac6:	77fb      	strb	r3, [r7, #31]
      break;
 8011ac8:	e004      	b.n	8011ad4 <USB_HC_Init+0x148>
      break;
 8011aca:	bf00      	nop
 8011acc:	e002      	b.n	8011ad4 <USB_HC_Init+0x148>
      break;
 8011ace:	bf00      	nop
 8011ad0:	e000      	b.n	8011ad4 <USB_HC_Init+0x148>
      break;
 8011ad2:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8011ad4:	78fb      	ldrb	r3, [r7, #3]
 8011ad6:	015a      	lsls	r2, r3, #5
 8011ad8:	693b      	ldr	r3, [r7, #16]
 8011ada:	4413      	add	r3, r2
 8011adc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011ae0:	461a      	mov	r2, r3
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8011ae6:	78fb      	ldrb	r3, [r7, #3]
 8011ae8:	015a      	lsls	r2, r3, #5
 8011aea:	693b      	ldr	r3, [r7, #16]
 8011aec:	4413      	add	r3, r2
 8011aee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011af2:	68db      	ldr	r3, [r3, #12]
 8011af4:	78fa      	ldrb	r2, [r7, #3]
 8011af6:	0151      	lsls	r1, r2, #5
 8011af8:	693a      	ldr	r2, [r7, #16]
 8011afa:	440a      	add	r2, r1
 8011afc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011b00:	f043 0302 	orr.w	r3, r3, #2
 8011b04:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8011b06:	693b      	ldr	r3, [r7, #16]
 8011b08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011b0c:	699a      	ldr	r2, [r3, #24]
 8011b0e:	78fb      	ldrb	r3, [r7, #3]
 8011b10:	f003 030f 	and.w	r3, r3, #15
 8011b14:	2101      	movs	r1, #1
 8011b16:	fa01 f303 	lsl.w	r3, r1, r3
 8011b1a:	6939      	ldr	r1, [r7, #16]
 8011b1c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8011b20:	4313      	orrs	r3, r2
 8011b22:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	699b      	ldr	r3, [r3, #24]
 8011b28:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8011b30:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	da03      	bge.n	8011b40 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8011b38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011b3c:	61bb      	str	r3, [r7, #24]
 8011b3e:	e001      	b.n	8011b44 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8011b40:	2300      	movs	r3, #0
 8011b42:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8011b44:	6878      	ldr	r0, [r7, #4]
 8011b46:	f7ff fef9 	bl	801193c <USB_GetHostSpeed>
 8011b4a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8011b4c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011b50:	2b02      	cmp	r3, #2
 8011b52:	d106      	bne.n	8011b62 <USB_HC_Init+0x1d6>
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	2b02      	cmp	r3, #2
 8011b58:	d003      	beq.n	8011b62 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8011b5a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8011b5e:	617b      	str	r3, [r7, #20]
 8011b60:	e001      	b.n	8011b66 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8011b62:	2300      	movs	r3, #0
 8011b64:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8011b66:	787b      	ldrb	r3, [r7, #1]
 8011b68:	059b      	lsls	r3, r3, #22
 8011b6a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8011b6e:	78bb      	ldrb	r3, [r7, #2]
 8011b70:	02db      	lsls	r3, r3, #11
 8011b72:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8011b76:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8011b78:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011b7c:	049b      	lsls	r3, r3, #18
 8011b7e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8011b82:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8011b84:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8011b86:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8011b8a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8011b8c:	69bb      	ldr	r3, [r7, #24]
 8011b8e:	431a      	orrs	r2, r3
 8011b90:	697b      	ldr	r3, [r7, #20]
 8011b92:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8011b94:	78fa      	ldrb	r2, [r7, #3]
 8011b96:	0151      	lsls	r1, r2, #5
 8011b98:	693a      	ldr	r2, [r7, #16]
 8011b9a:	440a      	add	r2, r1
 8011b9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8011ba0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8011ba4:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8011ba6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011baa:	2b03      	cmp	r3, #3
 8011bac:	d003      	beq.n	8011bb6 <USB_HC_Init+0x22a>
 8011bae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011bb2:	2b01      	cmp	r3, #1
 8011bb4:	d10f      	bne.n	8011bd6 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8011bb6:	78fb      	ldrb	r3, [r7, #3]
 8011bb8:	015a      	lsls	r2, r3, #5
 8011bba:	693b      	ldr	r3, [r7, #16]
 8011bbc:	4413      	add	r3, r2
 8011bbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	78fa      	ldrb	r2, [r7, #3]
 8011bc6:	0151      	lsls	r1, r2, #5
 8011bc8:	693a      	ldr	r2, [r7, #16]
 8011bca:	440a      	add	r2, r1
 8011bcc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011bd0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011bd4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8011bd6:	7ffb      	ldrb	r3, [r7, #31]
}
 8011bd8:	4618      	mov	r0, r3
 8011bda:	3720      	adds	r7, #32
 8011bdc:	46bd      	mov	sp, r7
 8011bde:	bd80      	pop	{r7, pc}
 8011be0:	40040000 	.word	0x40040000

08011be4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b08c      	sub	sp, #48	@ 0x30
 8011be8:	af02      	add	r7, sp, #8
 8011bea:	60f8      	str	r0, [r7, #12]
 8011bec:	60b9      	str	r1, [r7, #8]
 8011bee:	4613      	mov	r3, r2
 8011bf0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8011bf6:	68bb      	ldr	r3, [r7, #8]
 8011bf8:	785b      	ldrb	r3, [r3, #1]
 8011bfa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8011bfc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011c00:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	4a5d      	ldr	r2, [pc, #372]	@ (8011d7c <USB_HC_StartXfer+0x198>)
 8011c06:	4293      	cmp	r3, r2
 8011c08:	d12f      	bne.n	8011c6a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8011c0a:	79fb      	ldrb	r3, [r7, #7]
 8011c0c:	2b01      	cmp	r3, #1
 8011c0e:	d11c      	bne.n	8011c4a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8011c10:	68bb      	ldr	r3, [r7, #8]
 8011c12:	7c9b      	ldrb	r3, [r3, #18]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d003      	beq.n	8011c20 <USB_HC_StartXfer+0x3c>
 8011c18:	68bb      	ldr	r3, [r7, #8]
 8011c1a:	7c9b      	ldrb	r3, [r3, #18]
 8011c1c:	2b02      	cmp	r3, #2
 8011c1e:	d124      	bne.n	8011c6a <USB_HC_StartXfer+0x86>
 8011c20:	68bb      	ldr	r3, [r7, #8]
 8011c22:	799b      	ldrb	r3, [r3, #6]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d120      	bne.n	8011c6a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8011c28:	69fb      	ldr	r3, [r7, #28]
 8011c2a:	015a      	lsls	r2, r3, #5
 8011c2c:	6a3b      	ldr	r3, [r7, #32]
 8011c2e:	4413      	add	r3, r2
 8011c30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011c34:	68db      	ldr	r3, [r3, #12]
 8011c36:	69fa      	ldr	r2, [r7, #28]
 8011c38:	0151      	lsls	r1, r2, #5
 8011c3a:	6a3a      	ldr	r2, [r7, #32]
 8011c3c:	440a      	add	r2, r1
 8011c3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011c42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011c46:	60d3      	str	r3, [r2, #12]
 8011c48:	e00f      	b.n	8011c6a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8011c4a:	68bb      	ldr	r3, [r7, #8]
 8011c4c:	791b      	ldrb	r3, [r3, #4]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d10b      	bne.n	8011c6a <USB_HC_StartXfer+0x86>
 8011c52:	68bb      	ldr	r3, [r7, #8]
 8011c54:	795b      	ldrb	r3, [r3, #5]
 8011c56:	2b01      	cmp	r3, #1
 8011c58:	d107      	bne.n	8011c6a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8011c5a:	68bb      	ldr	r3, [r7, #8]
 8011c5c:	785b      	ldrb	r3, [r3, #1]
 8011c5e:	4619      	mov	r1, r3
 8011c60:	68f8      	ldr	r0, [r7, #12]
 8011c62:	f000 fb6b 	bl	801233c <USB_DoPing>
        return HAL_OK;
 8011c66:	2300      	movs	r3, #0
 8011c68:	e232      	b.n	80120d0 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8011c6a:	68bb      	ldr	r3, [r7, #8]
 8011c6c:	799b      	ldrb	r3, [r3, #6]
 8011c6e:	2b01      	cmp	r3, #1
 8011c70:	d158      	bne.n	8011d24 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8011c72:	2301      	movs	r3, #1
 8011c74:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8011c76:	68bb      	ldr	r3, [r7, #8]
 8011c78:	78db      	ldrb	r3, [r3, #3]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d007      	beq.n	8011c8e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8011c7e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011c80:	68ba      	ldr	r2, [r7, #8]
 8011c82:	8a92      	ldrh	r2, [r2, #20]
 8011c84:	fb03 f202 	mul.w	r2, r3, r2
 8011c88:	68bb      	ldr	r3, [r7, #8]
 8011c8a:	61da      	str	r2, [r3, #28]
 8011c8c:	e07c      	b.n	8011d88 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8011c8e:	68bb      	ldr	r3, [r7, #8]
 8011c90:	7c9b      	ldrb	r3, [r3, #18]
 8011c92:	2b01      	cmp	r3, #1
 8011c94:	d130      	bne.n	8011cf8 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8011c96:	68bb      	ldr	r3, [r7, #8]
 8011c98:	6a1b      	ldr	r3, [r3, #32]
 8011c9a:	2bbc      	cmp	r3, #188	@ 0xbc
 8011c9c:	d918      	bls.n	8011cd0 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8011c9e:	68bb      	ldr	r3, [r7, #8]
 8011ca0:	8a9b      	ldrh	r3, [r3, #20]
 8011ca2:	461a      	mov	r2, r3
 8011ca4:	68bb      	ldr	r3, [r7, #8]
 8011ca6:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8011ca8:	68bb      	ldr	r3, [r7, #8]
 8011caa:	69da      	ldr	r2, [r3, #28]
 8011cac:	68bb      	ldr	r3, [r7, #8]
 8011cae:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8011cb0:	68bb      	ldr	r3, [r7, #8]
 8011cb2:	68db      	ldr	r3, [r3, #12]
 8011cb4:	2b01      	cmp	r3, #1
 8011cb6:	d003      	beq.n	8011cc0 <USB_HC_StartXfer+0xdc>
 8011cb8:	68bb      	ldr	r3, [r7, #8]
 8011cba:	68db      	ldr	r3, [r3, #12]
 8011cbc:	2b02      	cmp	r3, #2
 8011cbe:	d103      	bne.n	8011cc8 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8011cc0:	68bb      	ldr	r3, [r7, #8]
 8011cc2:	2202      	movs	r2, #2
 8011cc4:	60da      	str	r2, [r3, #12]
 8011cc6:	e05f      	b.n	8011d88 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8011cc8:	68bb      	ldr	r3, [r7, #8]
 8011cca:	2201      	movs	r2, #1
 8011ccc:	60da      	str	r2, [r3, #12]
 8011cce:	e05b      	b.n	8011d88 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8011cd0:	68bb      	ldr	r3, [r7, #8]
 8011cd2:	6a1a      	ldr	r2, [r3, #32]
 8011cd4:	68bb      	ldr	r3, [r7, #8]
 8011cd6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8011cd8:	68bb      	ldr	r3, [r7, #8]
 8011cda:	68db      	ldr	r3, [r3, #12]
 8011cdc:	2b01      	cmp	r3, #1
 8011cde:	d007      	beq.n	8011cf0 <USB_HC_StartXfer+0x10c>
 8011ce0:	68bb      	ldr	r3, [r7, #8]
 8011ce2:	68db      	ldr	r3, [r3, #12]
 8011ce4:	2b02      	cmp	r3, #2
 8011ce6:	d003      	beq.n	8011cf0 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8011ce8:	68bb      	ldr	r3, [r7, #8]
 8011cea:	2204      	movs	r2, #4
 8011cec:	60da      	str	r2, [r3, #12]
 8011cee:	e04b      	b.n	8011d88 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8011cf0:	68bb      	ldr	r3, [r7, #8]
 8011cf2:	2203      	movs	r2, #3
 8011cf4:	60da      	str	r2, [r3, #12]
 8011cf6:	e047      	b.n	8011d88 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8011cf8:	79fb      	ldrb	r3, [r7, #7]
 8011cfa:	2b01      	cmp	r3, #1
 8011cfc:	d10d      	bne.n	8011d1a <USB_HC_StartXfer+0x136>
 8011cfe:	68bb      	ldr	r3, [r7, #8]
 8011d00:	6a1b      	ldr	r3, [r3, #32]
 8011d02:	68ba      	ldr	r2, [r7, #8]
 8011d04:	8a92      	ldrh	r2, [r2, #20]
 8011d06:	4293      	cmp	r3, r2
 8011d08:	d907      	bls.n	8011d1a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8011d0a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011d0c:	68ba      	ldr	r2, [r7, #8]
 8011d0e:	8a92      	ldrh	r2, [r2, #20]
 8011d10:	fb03 f202 	mul.w	r2, r3, r2
 8011d14:	68bb      	ldr	r3, [r7, #8]
 8011d16:	61da      	str	r2, [r3, #28]
 8011d18:	e036      	b.n	8011d88 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8011d1a:	68bb      	ldr	r3, [r7, #8]
 8011d1c:	6a1a      	ldr	r2, [r3, #32]
 8011d1e:	68bb      	ldr	r3, [r7, #8]
 8011d20:	61da      	str	r2, [r3, #28]
 8011d22:	e031      	b.n	8011d88 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8011d24:	68bb      	ldr	r3, [r7, #8]
 8011d26:	6a1b      	ldr	r3, [r3, #32]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d018      	beq.n	8011d5e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8011d2c:	68bb      	ldr	r3, [r7, #8]
 8011d2e:	6a1b      	ldr	r3, [r3, #32]
 8011d30:	68ba      	ldr	r2, [r7, #8]
 8011d32:	8a92      	ldrh	r2, [r2, #20]
 8011d34:	4413      	add	r3, r2
 8011d36:	3b01      	subs	r3, #1
 8011d38:	68ba      	ldr	r2, [r7, #8]
 8011d3a:	8a92      	ldrh	r2, [r2, #20]
 8011d3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011d40:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8011d42:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8011d44:	8b7b      	ldrh	r3, [r7, #26]
 8011d46:	429a      	cmp	r2, r3
 8011d48:	d90b      	bls.n	8011d62 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8011d4a:	8b7b      	ldrh	r3, [r7, #26]
 8011d4c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8011d4e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011d50:	68ba      	ldr	r2, [r7, #8]
 8011d52:	8a92      	ldrh	r2, [r2, #20]
 8011d54:	fb03 f202 	mul.w	r2, r3, r2
 8011d58:	68bb      	ldr	r3, [r7, #8]
 8011d5a:	61da      	str	r2, [r3, #28]
 8011d5c:	e001      	b.n	8011d62 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8011d5e:	2301      	movs	r3, #1
 8011d60:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8011d62:	68bb      	ldr	r3, [r7, #8]
 8011d64:	78db      	ldrb	r3, [r3, #3]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d00a      	beq.n	8011d80 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8011d6a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011d6c:	68ba      	ldr	r2, [r7, #8]
 8011d6e:	8a92      	ldrh	r2, [r2, #20]
 8011d70:	fb03 f202 	mul.w	r2, r3, r2
 8011d74:	68bb      	ldr	r3, [r7, #8]
 8011d76:	61da      	str	r2, [r3, #28]
 8011d78:	e006      	b.n	8011d88 <USB_HC_StartXfer+0x1a4>
 8011d7a:	bf00      	nop
 8011d7c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8011d80:	68bb      	ldr	r3, [r7, #8]
 8011d82:	6a1a      	ldr	r2, [r3, #32]
 8011d84:	68bb      	ldr	r3, [r7, #8]
 8011d86:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8011d88:	68bb      	ldr	r3, [r7, #8]
 8011d8a:	69db      	ldr	r3, [r3, #28]
 8011d8c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8011d90:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011d92:	04d9      	lsls	r1, r3, #19
 8011d94:	4ba3      	ldr	r3, [pc, #652]	@ (8012024 <USB_HC_StartXfer+0x440>)
 8011d96:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8011d98:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8011d9a:	68bb      	ldr	r3, [r7, #8]
 8011d9c:	7d9b      	ldrb	r3, [r3, #22]
 8011d9e:	075b      	lsls	r3, r3, #29
 8011da0:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8011da4:	69f9      	ldr	r1, [r7, #28]
 8011da6:	0148      	lsls	r0, r1, #5
 8011da8:	6a39      	ldr	r1, [r7, #32]
 8011daa:	4401      	add	r1, r0
 8011dac:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8011db0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8011db2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8011db4:	79fb      	ldrb	r3, [r7, #7]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d009      	beq.n	8011dce <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8011dba:	68bb      	ldr	r3, [r7, #8]
 8011dbc:	6999      	ldr	r1, [r3, #24]
 8011dbe:	69fb      	ldr	r3, [r7, #28]
 8011dc0:	015a      	lsls	r2, r3, #5
 8011dc2:	6a3b      	ldr	r3, [r7, #32]
 8011dc4:	4413      	add	r3, r2
 8011dc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011dca:	460a      	mov	r2, r1
 8011dcc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8011dce:	6a3b      	ldr	r3, [r7, #32]
 8011dd0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011dd4:	689b      	ldr	r3, [r3, #8]
 8011dd6:	f003 0301 	and.w	r3, r3, #1
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	bf0c      	ite	eq
 8011dde:	2301      	moveq	r3, #1
 8011de0:	2300      	movne	r3, #0
 8011de2:	b2db      	uxtb	r3, r3
 8011de4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8011de6:	69fb      	ldr	r3, [r7, #28]
 8011de8:	015a      	lsls	r2, r3, #5
 8011dea:	6a3b      	ldr	r3, [r7, #32]
 8011dec:	4413      	add	r3, r2
 8011dee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	69fa      	ldr	r2, [r7, #28]
 8011df6:	0151      	lsls	r1, r2, #5
 8011df8:	6a3a      	ldr	r2, [r7, #32]
 8011dfa:	440a      	add	r2, r1
 8011dfc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011e00:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011e04:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8011e06:	69fb      	ldr	r3, [r7, #28]
 8011e08:	015a      	lsls	r2, r3, #5
 8011e0a:	6a3b      	ldr	r3, [r7, #32]
 8011e0c:	4413      	add	r3, r2
 8011e0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011e12:	681a      	ldr	r2, [r3, #0]
 8011e14:	7e7b      	ldrb	r3, [r7, #25]
 8011e16:	075b      	lsls	r3, r3, #29
 8011e18:	69f9      	ldr	r1, [r7, #28]
 8011e1a:	0148      	lsls	r0, r1, #5
 8011e1c:	6a39      	ldr	r1, [r7, #32]
 8011e1e:	4401      	add	r1, r0
 8011e20:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8011e24:	4313      	orrs	r3, r2
 8011e26:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8011e28:	68bb      	ldr	r3, [r7, #8]
 8011e2a:	799b      	ldrb	r3, [r3, #6]
 8011e2c:	2b01      	cmp	r3, #1
 8011e2e:	f040 80c3 	bne.w	8011fb8 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8011e32:	68bb      	ldr	r3, [r7, #8]
 8011e34:	7c5b      	ldrb	r3, [r3, #17]
 8011e36:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8011e38:	68ba      	ldr	r2, [r7, #8]
 8011e3a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8011e3c:	4313      	orrs	r3, r2
 8011e3e:	69fa      	ldr	r2, [r7, #28]
 8011e40:	0151      	lsls	r1, r2, #5
 8011e42:	6a3a      	ldr	r2, [r7, #32]
 8011e44:	440a      	add	r2, r1
 8011e46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8011e4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8011e4e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8011e50:	69fb      	ldr	r3, [r7, #28]
 8011e52:	015a      	lsls	r2, r3, #5
 8011e54:	6a3b      	ldr	r3, [r7, #32]
 8011e56:	4413      	add	r3, r2
 8011e58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011e5c:	68db      	ldr	r3, [r3, #12]
 8011e5e:	69fa      	ldr	r2, [r7, #28]
 8011e60:	0151      	lsls	r1, r2, #5
 8011e62:	6a3a      	ldr	r2, [r7, #32]
 8011e64:	440a      	add	r2, r1
 8011e66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011e6a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8011e6e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8011e70:	68bb      	ldr	r3, [r7, #8]
 8011e72:	79db      	ldrb	r3, [r3, #7]
 8011e74:	2b01      	cmp	r3, #1
 8011e76:	d123      	bne.n	8011ec0 <USB_HC_StartXfer+0x2dc>
 8011e78:	68bb      	ldr	r3, [r7, #8]
 8011e7a:	78db      	ldrb	r3, [r3, #3]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d11f      	bne.n	8011ec0 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8011e80:	69fb      	ldr	r3, [r7, #28]
 8011e82:	015a      	lsls	r2, r3, #5
 8011e84:	6a3b      	ldr	r3, [r7, #32]
 8011e86:	4413      	add	r3, r2
 8011e88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011e8c:	685b      	ldr	r3, [r3, #4]
 8011e8e:	69fa      	ldr	r2, [r7, #28]
 8011e90:	0151      	lsls	r1, r2, #5
 8011e92:	6a3a      	ldr	r2, [r7, #32]
 8011e94:	440a      	add	r2, r1
 8011e96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011e9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011e9e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8011ea0:	69fb      	ldr	r3, [r7, #28]
 8011ea2:	015a      	lsls	r2, r3, #5
 8011ea4:	6a3b      	ldr	r3, [r7, #32]
 8011ea6:	4413      	add	r3, r2
 8011ea8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011eac:	68db      	ldr	r3, [r3, #12]
 8011eae:	69fa      	ldr	r2, [r7, #28]
 8011eb0:	0151      	lsls	r1, r2, #5
 8011eb2:	6a3a      	ldr	r2, [r7, #32]
 8011eb4:	440a      	add	r2, r1
 8011eb6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011eba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ebe:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8011ec0:	68bb      	ldr	r3, [r7, #8]
 8011ec2:	7c9b      	ldrb	r3, [r3, #18]
 8011ec4:	2b01      	cmp	r3, #1
 8011ec6:	d003      	beq.n	8011ed0 <USB_HC_StartXfer+0x2ec>
 8011ec8:	68bb      	ldr	r3, [r7, #8]
 8011eca:	7c9b      	ldrb	r3, [r3, #18]
 8011ecc:	2b03      	cmp	r3, #3
 8011ece:	d117      	bne.n	8011f00 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8011ed0:	68bb      	ldr	r3, [r7, #8]
 8011ed2:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8011ed4:	2b01      	cmp	r3, #1
 8011ed6:	d113      	bne.n	8011f00 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8011ed8:	68bb      	ldr	r3, [r7, #8]
 8011eda:	78db      	ldrb	r3, [r3, #3]
 8011edc:	2b01      	cmp	r3, #1
 8011ede:	d10f      	bne.n	8011f00 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8011ee0:	69fb      	ldr	r3, [r7, #28]
 8011ee2:	015a      	lsls	r2, r3, #5
 8011ee4:	6a3b      	ldr	r3, [r7, #32]
 8011ee6:	4413      	add	r3, r2
 8011ee8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011eec:	685b      	ldr	r3, [r3, #4]
 8011eee:	69fa      	ldr	r2, [r7, #28]
 8011ef0:	0151      	lsls	r1, r2, #5
 8011ef2:	6a3a      	ldr	r2, [r7, #32]
 8011ef4:	440a      	add	r2, r1
 8011ef6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011efa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011efe:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8011f00:	68bb      	ldr	r3, [r7, #8]
 8011f02:	7c9b      	ldrb	r3, [r3, #18]
 8011f04:	2b01      	cmp	r3, #1
 8011f06:	d162      	bne.n	8011fce <USB_HC_StartXfer+0x3ea>
 8011f08:	68bb      	ldr	r3, [r7, #8]
 8011f0a:	78db      	ldrb	r3, [r3, #3]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d15e      	bne.n	8011fce <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8011f10:	68bb      	ldr	r3, [r7, #8]
 8011f12:	68db      	ldr	r3, [r3, #12]
 8011f14:	3b01      	subs	r3, #1
 8011f16:	2b03      	cmp	r3, #3
 8011f18:	d858      	bhi.n	8011fcc <USB_HC_StartXfer+0x3e8>
 8011f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8011f20 <USB_HC_StartXfer+0x33c>)
 8011f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f20:	08011f31 	.word	0x08011f31
 8011f24:	08011f53 	.word	0x08011f53
 8011f28:	08011f75 	.word	0x08011f75
 8011f2c:	08011f97 	.word	0x08011f97
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8011f30:	69fb      	ldr	r3, [r7, #28]
 8011f32:	015a      	lsls	r2, r3, #5
 8011f34:	6a3b      	ldr	r3, [r7, #32]
 8011f36:	4413      	add	r3, r2
 8011f38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011f3c:	685b      	ldr	r3, [r3, #4]
 8011f3e:	69fa      	ldr	r2, [r7, #28]
 8011f40:	0151      	lsls	r1, r2, #5
 8011f42:	6a3a      	ldr	r2, [r7, #32]
 8011f44:	440a      	add	r2, r1
 8011f46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011f4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011f4e:	6053      	str	r3, [r2, #4]
          break;
 8011f50:	e03d      	b.n	8011fce <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8011f52:	69fb      	ldr	r3, [r7, #28]
 8011f54:	015a      	lsls	r2, r3, #5
 8011f56:	6a3b      	ldr	r3, [r7, #32]
 8011f58:	4413      	add	r3, r2
 8011f5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011f5e:	685b      	ldr	r3, [r3, #4]
 8011f60:	69fa      	ldr	r2, [r7, #28]
 8011f62:	0151      	lsls	r1, r2, #5
 8011f64:	6a3a      	ldr	r2, [r7, #32]
 8011f66:	440a      	add	r2, r1
 8011f68:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011f6c:	f043 030e 	orr.w	r3, r3, #14
 8011f70:	6053      	str	r3, [r2, #4]
          break;
 8011f72:	e02c      	b.n	8011fce <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8011f74:	69fb      	ldr	r3, [r7, #28]
 8011f76:	015a      	lsls	r2, r3, #5
 8011f78:	6a3b      	ldr	r3, [r7, #32]
 8011f7a:	4413      	add	r3, r2
 8011f7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011f80:	685b      	ldr	r3, [r3, #4]
 8011f82:	69fa      	ldr	r2, [r7, #28]
 8011f84:	0151      	lsls	r1, r2, #5
 8011f86:	6a3a      	ldr	r2, [r7, #32]
 8011f88:	440a      	add	r2, r1
 8011f8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011f8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8011f92:	6053      	str	r3, [r2, #4]
          break;
 8011f94:	e01b      	b.n	8011fce <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8011f96:	69fb      	ldr	r3, [r7, #28]
 8011f98:	015a      	lsls	r2, r3, #5
 8011f9a:	6a3b      	ldr	r3, [r7, #32]
 8011f9c:	4413      	add	r3, r2
 8011f9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011fa2:	685b      	ldr	r3, [r3, #4]
 8011fa4:	69fa      	ldr	r2, [r7, #28]
 8011fa6:	0151      	lsls	r1, r2, #5
 8011fa8:	6a3a      	ldr	r2, [r7, #32]
 8011faa:	440a      	add	r2, r1
 8011fac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011fb0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011fb4:	6053      	str	r3, [r2, #4]
          break;
 8011fb6:	e00a      	b.n	8011fce <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8011fb8:	69fb      	ldr	r3, [r7, #28]
 8011fba:	015a      	lsls	r2, r3, #5
 8011fbc:	6a3b      	ldr	r3, [r7, #32]
 8011fbe:	4413      	add	r3, r2
 8011fc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011fc4:	461a      	mov	r2, r3
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	6053      	str	r3, [r2, #4]
 8011fca:	e000      	b.n	8011fce <USB_HC_StartXfer+0x3ea>
          break;
 8011fcc:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8011fce:	69fb      	ldr	r3, [r7, #28]
 8011fd0:	015a      	lsls	r2, r3, #5
 8011fd2:	6a3b      	ldr	r3, [r7, #32]
 8011fd4:	4413      	add	r3, r2
 8011fd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8011fde:	693b      	ldr	r3, [r7, #16]
 8011fe0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8011fe4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8011fe6:	68bb      	ldr	r3, [r7, #8]
 8011fe8:	78db      	ldrb	r3, [r3, #3]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d004      	beq.n	8011ff8 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8011fee:	693b      	ldr	r3, [r7, #16]
 8011ff0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011ff4:	613b      	str	r3, [r7, #16]
 8011ff6:	e003      	b.n	8012000 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8011ff8:	693b      	ldr	r3, [r7, #16]
 8011ffa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8011ffe:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8012000:	693b      	ldr	r3, [r7, #16]
 8012002:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012006:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8012008:	69fb      	ldr	r3, [r7, #28]
 801200a:	015a      	lsls	r2, r3, #5
 801200c:	6a3b      	ldr	r3, [r7, #32]
 801200e:	4413      	add	r3, r2
 8012010:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012014:	461a      	mov	r2, r3
 8012016:	693b      	ldr	r3, [r7, #16]
 8012018:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 801201a:	79fb      	ldrb	r3, [r7, #7]
 801201c:	2b00      	cmp	r3, #0
 801201e:	d003      	beq.n	8012028 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8012020:	2300      	movs	r3, #0
 8012022:	e055      	b.n	80120d0 <USB_HC_StartXfer+0x4ec>
 8012024:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8012028:	68bb      	ldr	r3, [r7, #8]
 801202a:	78db      	ldrb	r3, [r3, #3]
 801202c:	2b00      	cmp	r3, #0
 801202e:	d14e      	bne.n	80120ce <USB_HC_StartXfer+0x4ea>
 8012030:	68bb      	ldr	r3, [r7, #8]
 8012032:	6a1b      	ldr	r3, [r3, #32]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d04a      	beq.n	80120ce <USB_HC_StartXfer+0x4ea>
 8012038:	68bb      	ldr	r3, [r7, #8]
 801203a:	79db      	ldrb	r3, [r3, #7]
 801203c:	2b00      	cmp	r3, #0
 801203e:	d146      	bne.n	80120ce <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8012040:	68bb      	ldr	r3, [r7, #8]
 8012042:	7c9b      	ldrb	r3, [r3, #18]
 8012044:	2b03      	cmp	r3, #3
 8012046:	d831      	bhi.n	80120ac <USB_HC_StartXfer+0x4c8>
 8012048:	a201      	add	r2, pc, #4	@ (adr r2, 8012050 <USB_HC_StartXfer+0x46c>)
 801204a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801204e:	bf00      	nop
 8012050:	08012061 	.word	0x08012061
 8012054:	08012085 	.word	0x08012085
 8012058:	08012061 	.word	0x08012061
 801205c:	08012085 	.word	0x08012085
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8012060:	68bb      	ldr	r3, [r7, #8]
 8012062:	6a1b      	ldr	r3, [r3, #32]
 8012064:	3303      	adds	r3, #3
 8012066:	089b      	lsrs	r3, r3, #2
 8012068:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 801206a:	8afa      	ldrh	r2, [r7, #22]
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012070:	b29b      	uxth	r3, r3
 8012072:	429a      	cmp	r2, r3
 8012074:	d91c      	bls.n	80120b0 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	699b      	ldr	r3, [r3, #24]
 801207a:	f043 0220 	orr.w	r2, r3, #32
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	619a      	str	r2, [r3, #24]
        }
        break;
 8012082:	e015      	b.n	80120b0 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8012084:	68bb      	ldr	r3, [r7, #8]
 8012086:	6a1b      	ldr	r3, [r3, #32]
 8012088:	3303      	adds	r3, #3
 801208a:	089b      	lsrs	r3, r3, #2
 801208c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 801208e:	8afa      	ldrh	r2, [r7, #22]
 8012090:	6a3b      	ldr	r3, [r7, #32]
 8012092:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012096:	691b      	ldr	r3, [r3, #16]
 8012098:	b29b      	uxth	r3, r3
 801209a:	429a      	cmp	r2, r3
 801209c:	d90a      	bls.n	80120b4 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	699b      	ldr	r3, [r3, #24]
 80120a2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	619a      	str	r2, [r3, #24]
        }
        break;
 80120aa:	e003      	b.n	80120b4 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80120ac:	bf00      	nop
 80120ae:	e002      	b.n	80120b6 <USB_HC_StartXfer+0x4d2>
        break;
 80120b0:	bf00      	nop
 80120b2:	e000      	b.n	80120b6 <USB_HC_StartXfer+0x4d2>
        break;
 80120b4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80120b6:	68bb      	ldr	r3, [r7, #8]
 80120b8:	6999      	ldr	r1, [r3, #24]
 80120ba:	68bb      	ldr	r3, [r7, #8]
 80120bc:	785a      	ldrb	r2, [r3, #1]
 80120be:	68bb      	ldr	r3, [r7, #8]
 80120c0:	6a1b      	ldr	r3, [r3, #32]
 80120c2:	b29b      	uxth	r3, r3
 80120c4:	2000      	movs	r0, #0
 80120c6:	9000      	str	r0, [sp, #0]
 80120c8:	68f8      	ldr	r0, [r7, #12]
 80120ca:	f7ff f9cf 	bl	801146c <USB_WritePacket>
  }

  return HAL_OK;
 80120ce:	2300      	movs	r3, #0
}
 80120d0:	4618      	mov	r0, r3
 80120d2:	3728      	adds	r7, #40	@ 0x28
 80120d4:	46bd      	mov	sp, r7
 80120d6:	bd80      	pop	{r7, pc}

080120d8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80120d8:	b480      	push	{r7}
 80120da:	b085      	sub	sp, #20
 80120dc:	af00      	add	r7, sp, #0
 80120de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80120ea:	695b      	ldr	r3, [r3, #20]
 80120ec:	b29b      	uxth	r3, r3
}
 80120ee:	4618      	mov	r0, r3
 80120f0:	3714      	adds	r7, #20
 80120f2:	46bd      	mov	sp, r7
 80120f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f8:	4770      	bx	lr

080120fa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80120fa:	b480      	push	{r7}
 80120fc:	b089      	sub	sp, #36	@ 0x24
 80120fe:	af00      	add	r7, sp, #0
 8012100:	6078      	str	r0, [r7, #4]
 8012102:	460b      	mov	r3, r1
 8012104:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 801210a:	78fb      	ldrb	r3, [r7, #3]
 801210c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 801210e:	2300      	movs	r3, #0
 8012110:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8012112:	69bb      	ldr	r3, [r7, #24]
 8012114:	015a      	lsls	r2, r3, #5
 8012116:	69fb      	ldr	r3, [r7, #28]
 8012118:	4413      	add	r3, r2
 801211a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	0c9b      	lsrs	r3, r3, #18
 8012122:	f003 0303 	and.w	r3, r3, #3
 8012126:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8012128:	69bb      	ldr	r3, [r7, #24]
 801212a:	015a      	lsls	r2, r3, #5
 801212c:	69fb      	ldr	r3, [r7, #28]
 801212e:	4413      	add	r3, r2
 8012130:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	0fdb      	lsrs	r3, r3, #31
 8012138:	f003 0301 	and.w	r3, r3, #1
 801213c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 801213e:	69bb      	ldr	r3, [r7, #24]
 8012140:	015a      	lsls	r2, r3, #5
 8012142:	69fb      	ldr	r3, [r7, #28]
 8012144:	4413      	add	r3, r2
 8012146:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801214a:	685b      	ldr	r3, [r3, #4]
 801214c:	0fdb      	lsrs	r3, r3, #31
 801214e:	f003 0301 	and.w	r3, r3, #1
 8012152:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	689b      	ldr	r3, [r3, #8]
 8012158:	f003 0320 	and.w	r3, r3, #32
 801215c:	2b20      	cmp	r3, #32
 801215e:	d10d      	bne.n	801217c <USB_HC_Halt+0x82>
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d10a      	bne.n	801217c <USB_HC_Halt+0x82>
 8012166:	693b      	ldr	r3, [r7, #16]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d005      	beq.n	8012178 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 801216c:	697b      	ldr	r3, [r7, #20]
 801216e:	2b01      	cmp	r3, #1
 8012170:	d002      	beq.n	8012178 <USB_HC_Halt+0x7e>
 8012172:	697b      	ldr	r3, [r7, #20]
 8012174:	2b03      	cmp	r3, #3
 8012176:	d101      	bne.n	801217c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8012178:	2300      	movs	r3, #0
 801217a:	e0d8      	b.n	801232e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 801217c:	697b      	ldr	r3, [r7, #20]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d002      	beq.n	8012188 <USB_HC_Halt+0x8e>
 8012182:	697b      	ldr	r3, [r7, #20]
 8012184:	2b02      	cmp	r3, #2
 8012186:	d173      	bne.n	8012270 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8012188:	69bb      	ldr	r3, [r7, #24]
 801218a:	015a      	lsls	r2, r3, #5
 801218c:	69fb      	ldr	r3, [r7, #28]
 801218e:	4413      	add	r3, r2
 8012190:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	69ba      	ldr	r2, [r7, #24]
 8012198:	0151      	lsls	r1, r2, #5
 801219a:	69fa      	ldr	r2, [r7, #28]
 801219c:	440a      	add	r2, r1
 801219e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80121a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80121a6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	689b      	ldr	r3, [r3, #8]
 80121ac:	f003 0320 	and.w	r3, r3, #32
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d14a      	bne.n	801224a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121b8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d133      	bne.n	8012228 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80121c0:	69bb      	ldr	r3, [r7, #24]
 80121c2:	015a      	lsls	r2, r3, #5
 80121c4:	69fb      	ldr	r3, [r7, #28]
 80121c6:	4413      	add	r3, r2
 80121c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	69ba      	ldr	r2, [r7, #24]
 80121d0:	0151      	lsls	r1, r2, #5
 80121d2:	69fa      	ldr	r2, [r7, #28]
 80121d4:	440a      	add	r2, r1
 80121d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80121da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80121de:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80121e0:	69bb      	ldr	r3, [r7, #24]
 80121e2:	015a      	lsls	r2, r3, #5
 80121e4:	69fb      	ldr	r3, [r7, #28]
 80121e6:	4413      	add	r3, r2
 80121e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	69ba      	ldr	r2, [r7, #24]
 80121f0:	0151      	lsls	r1, r2, #5
 80121f2:	69fa      	ldr	r2, [r7, #28]
 80121f4:	440a      	add	r2, r1
 80121f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80121fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80121fe:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8012200:	68bb      	ldr	r3, [r7, #8]
 8012202:	3301      	adds	r3, #1
 8012204:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8012206:	68bb      	ldr	r3, [r7, #8]
 8012208:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801220c:	d82e      	bhi.n	801226c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801220e:	69bb      	ldr	r3, [r7, #24]
 8012210:	015a      	lsls	r2, r3, #5
 8012212:	69fb      	ldr	r3, [r7, #28]
 8012214:	4413      	add	r3, r2
 8012216:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012220:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012224:	d0ec      	beq.n	8012200 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8012226:	e081      	b.n	801232c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012228:	69bb      	ldr	r3, [r7, #24]
 801222a:	015a      	lsls	r2, r3, #5
 801222c:	69fb      	ldr	r3, [r7, #28]
 801222e:	4413      	add	r3, r2
 8012230:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	69ba      	ldr	r2, [r7, #24]
 8012238:	0151      	lsls	r1, r2, #5
 801223a:	69fa      	ldr	r2, [r7, #28]
 801223c:	440a      	add	r2, r1
 801223e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012242:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012246:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8012248:	e070      	b.n	801232c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801224a:	69bb      	ldr	r3, [r7, #24]
 801224c:	015a      	lsls	r2, r3, #5
 801224e:	69fb      	ldr	r3, [r7, #28]
 8012250:	4413      	add	r3, r2
 8012252:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	69ba      	ldr	r2, [r7, #24]
 801225a:	0151      	lsls	r1, r2, #5
 801225c:	69fa      	ldr	r2, [r7, #28]
 801225e:	440a      	add	r2, r1
 8012260:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012264:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012268:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801226a:	e05f      	b.n	801232c <USB_HC_Halt+0x232>
            break;
 801226c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801226e:	e05d      	b.n	801232c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8012270:	69bb      	ldr	r3, [r7, #24]
 8012272:	015a      	lsls	r2, r3, #5
 8012274:	69fb      	ldr	r3, [r7, #28]
 8012276:	4413      	add	r3, r2
 8012278:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	69ba      	ldr	r2, [r7, #24]
 8012280:	0151      	lsls	r1, r2, #5
 8012282:	69fa      	ldr	r2, [r7, #28]
 8012284:	440a      	add	r2, r1
 8012286:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801228a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801228e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8012290:	69fb      	ldr	r3, [r7, #28]
 8012292:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012296:	691b      	ldr	r3, [r3, #16]
 8012298:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801229c:	2b00      	cmp	r3, #0
 801229e:	d133      	bne.n	8012308 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80122a0:	69bb      	ldr	r3, [r7, #24]
 80122a2:	015a      	lsls	r2, r3, #5
 80122a4:	69fb      	ldr	r3, [r7, #28]
 80122a6:	4413      	add	r3, r2
 80122a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	69ba      	ldr	r2, [r7, #24]
 80122b0:	0151      	lsls	r1, r2, #5
 80122b2:	69fa      	ldr	r2, [r7, #28]
 80122b4:	440a      	add	r2, r1
 80122b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80122ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80122be:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80122c0:	69bb      	ldr	r3, [r7, #24]
 80122c2:	015a      	lsls	r2, r3, #5
 80122c4:	69fb      	ldr	r3, [r7, #28]
 80122c6:	4413      	add	r3, r2
 80122c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	69ba      	ldr	r2, [r7, #24]
 80122d0:	0151      	lsls	r1, r2, #5
 80122d2:	69fa      	ldr	r2, [r7, #28]
 80122d4:	440a      	add	r2, r1
 80122d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80122da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80122de:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80122e0:	68bb      	ldr	r3, [r7, #8]
 80122e2:	3301      	adds	r3, #1
 80122e4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80122e6:	68bb      	ldr	r3, [r7, #8]
 80122e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80122ec:	d81d      	bhi.n	801232a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80122ee:	69bb      	ldr	r3, [r7, #24]
 80122f0:	015a      	lsls	r2, r3, #5
 80122f2:	69fb      	ldr	r3, [r7, #28]
 80122f4:	4413      	add	r3, r2
 80122f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012300:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012304:	d0ec      	beq.n	80122e0 <USB_HC_Halt+0x1e6>
 8012306:	e011      	b.n	801232c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012308:	69bb      	ldr	r3, [r7, #24]
 801230a:	015a      	lsls	r2, r3, #5
 801230c:	69fb      	ldr	r3, [r7, #28]
 801230e:	4413      	add	r3, r2
 8012310:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	69ba      	ldr	r2, [r7, #24]
 8012318:	0151      	lsls	r1, r2, #5
 801231a:	69fa      	ldr	r2, [r7, #28]
 801231c:	440a      	add	r2, r1
 801231e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012322:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012326:	6013      	str	r3, [r2, #0]
 8012328:	e000      	b.n	801232c <USB_HC_Halt+0x232>
          break;
 801232a:	bf00      	nop
    }
  }

  return HAL_OK;
 801232c:	2300      	movs	r3, #0
}
 801232e:	4618      	mov	r0, r3
 8012330:	3724      	adds	r7, #36	@ 0x24
 8012332:	46bd      	mov	sp, r7
 8012334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012338:	4770      	bx	lr
	...

0801233c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 801233c:	b480      	push	{r7}
 801233e:	b087      	sub	sp, #28
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
 8012344:	460b      	mov	r3, r1
 8012346:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 801234c:	78fb      	ldrb	r3, [r7, #3]
 801234e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8012350:	2301      	movs	r3, #1
 8012352:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	04da      	lsls	r2, r3, #19
 8012358:	4b15      	ldr	r3, [pc, #84]	@ (80123b0 <USB_DoPing+0x74>)
 801235a:	4013      	ands	r3, r2
 801235c:	693a      	ldr	r2, [r7, #16]
 801235e:	0151      	lsls	r1, r2, #5
 8012360:	697a      	ldr	r2, [r7, #20]
 8012362:	440a      	add	r2, r1
 8012364:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012368:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801236c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 801236e:	693b      	ldr	r3, [r7, #16]
 8012370:	015a      	lsls	r2, r3, #5
 8012372:	697b      	ldr	r3, [r7, #20]
 8012374:	4413      	add	r3, r2
 8012376:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801237e:	68bb      	ldr	r3, [r7, #8]
 8012380:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8012384:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8012386:	68bb      	ldr	r3, [r7, #8]
 8012388:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801238c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 801238e:	693b      	ldr	r3, [r7, #16]
 8012390:	015a      	lsls	r2, r3, #5
 8012392:	697b      	ldr	r3, [r7, #20]
 8012394:	4413      	add	r3, r2
 8012396:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801239a:	461a      	mov	r2, r3
 801239c:	68bb      	ldr	r3, [r7, #8]
 801239e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80123a0:	2300      	movs	r3, #0
}
 80123a2:	4618      	mov	r0, r3
 80123a4:	371c      	adds	r7, #28
 80123a6:	46bd      	mov	sp, r7
 80123a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ac:	4770      	bx	lr
 80123ae:	bf00      	nop
 80123b0:	1ff80000 	.word	0x1ff80000

080123b4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b088      	sub	sp, #32
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80123bc:	2300      	movs	r3, #0
 80123be:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80123c4:	2300      	movs	r3, #0
 80123c6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80123c8:	6878      	ldr	r0, [r7, #4]
 80123ca:	f7fe ff92 	bl	80112f2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80123ce:	2110      	movs	r1, #16
 80123d0:	6878      	ldr	r0, [r7, #4]
 80123d2:	f7fe ffeb 	bl	80113ac <USB_FlushTxFifo>
 80123d6:	4603      	mov	r3, r0
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d001      	beq.n	80123e0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80123dc:	2301      	movs	r3, #1
 80123de:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80123e0:	6878      	ldr	r0, [r7, #4]
 80123e2:	f7ff f815 	bl	8011410 <USB_FlushRxFifo>
 80123e6:	4603      	mov	r3, r0
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d001      	beq.n	80123f0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80123ec:	2301      	movs	r3, #1
 80123ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80123f0:	2300      	movs	r3, #0
 80123f2:	61bb      	str	r3, [r7, #24]
 80123f4:	e01f      	b.n	8012436 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80123f6:	69bb      	ldr	r3, [r7, #24]
 80123f8:	015a      	lsls	r2, r3, #5
 80123fa:	697b      	ldr	r3, [r7, #20]
 80123fc:	4413      	add	r3, r2
 80123fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8012406:	693b      	ldr	r3, [r7, #16]
 8012408:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801240c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 801240e:	693b      	ldr	r3, [r7, #16]
 8012410:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012414:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8012416:	693b      	ldr	r3, [r7, #16]
 8012418:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801241c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 801241e:	69bb      	ldr	r3, [r7, #24]
 8012420:	015a      	lsls	r2, r3, #5
 8012422:	697b      	ldr	r3, [r7, #20]
 8012424:	4413      	add	r3, r2
 8012426:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801242a:	461a      	mov	r2, r3
 801242c:	693b      	ldr	r3, [r7, #16]
 801242e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8012430:	69bb      	ldr	r3, [r7, #24]
 8012432:	3301      	adds	r3, #1
 8012434:	61bb      	str	r3, [r7, #24]
 8012436:	69bb      	ldr	r3, [r7, #24]
 8012438:	2b0f      	cmp	r3, #15
 801243a:	d9dc      	bls.n	80123f6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 801243c:	2300      	movs	r3, #0
 801243e:	61bb      	str	r3, [r7, #24]
 8012440:	e034      	b.n	80124ac <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8012442:	69bb      	ldr	r3, [r7, #24]
 8012444:	015a      	lsls	r2, r3, #5
 8012446:	697b      	ldr	r3, [r7, #20]
 8012448:	4413      	add	r3, r2
 801244a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8012452:	693b      	ldr	r3, [r7, #16]
 8012454:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012458:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 801245a:	693b      	ldr	r3, [r7, #16]
 801245c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012460:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8012462:	693b      	ldr	r3, [r7, #16]
 8012464:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8012468:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 801246a:	69bb      	ldr	r3, [r7, #24]
 801246c:	015a      	lsls	r2, r3, #5
 801246e:	697b      	ldr	r3, [r7, #20]
 8012470:	4413      	add	r3, r2
 8012472:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012476:	461a      	mov	r2, r3
 8012478:	693b      	ldr	r3, [r7, #16]
 801247a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	3301      	adds	r3, #1
 8012480:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8012488:	d80c      	bhi.n	80124a4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801248a:	69bb      	ldr	r3, [r7, #24]
 801248c:	015a      	lsls	r2, r3, #5
 801248e:	697b      	ldr	r3, [r7, #20]
 8012490:	4413      	add	r3, r2
 8012492:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801249c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80124a0:	d0ec      	beq.n	801247c <USB_StopHost+0xc8>
 80124a2:	e000      	b.n	80124a6 <USB_StopHost+0xf2>
        break;
 80124a4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80124a6:	69bb      	ldr	r3, [r7, #24]
 80124a8:	3301      	adds	r3, #1
 80124aa:	61bb      	str	r3, [r7, #24]
 80124ac:	69bb      	ldr	r3, [r7, #24]
 80124ae:	2b0f      	cmp	r3, #15
 80124b0:	d9c7      	bls.n	8012442 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80124b2:	697b      	ldr	r3, [r7, #20]
 80124b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80124b8:	461a      	mov	r2, r3
 80124ba:	f04f 33ff 	mov.w	r3, #4294967295
 80124be:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	f04f 32ff 	mov.w	r2, #4294967295
 80124c6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80124c8:	6878      	ldr	r0, [r7, #4]
 80124ca:	f7fe ff01 	bl	80112d0 <USB_EnableGlobalInt>

  return ret;
 80124ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80124d0:	4618      	mov	r0, r3
 80124d2:	3720      	adds	r7, #32
 80124d4:	46bd      	mov	sp, r7
 80124d6:	bd80      	pop	{r7, pc}

080124d8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80124d8:	b580      	push	{r7, lr}
 80124da:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80124dc:	4904      	ldr	r1, [pc, #16]	@ (80124f0 <MX_FATFS_Init+0x18>)
 80124de:	4805      	ldr	r0, [pc, #20]	@ (80124f4 <MX_FATFS_Init+0x1c>)
 80124e0:	f005 fabc 	bl	8017a5c <FATFS_LinkDriver>
 80124e4:	4603      	mov	r3, r0
 80124e6:	461a      	mov	r2, r3
 80124e8:	4b03      	ldr	r3, [pc, #12]	@ (80124f8 <MX_FATFS_Init+0x20>)
 80124ea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80124ec:	bf00      	nop
 80124ee:	bd80      	pop	{r7, pc}
 80124f0:	200021a4 	.word	0x200021a4
 80124f4:	0801ec70 	.word	0x0801ec70
 80124f8:	200021a0 	.word	0x200021a0

080124fc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80124fc:	b480      	push	{r7}
 80124fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8012500:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8012502:	4618      	mov	r0, r3
 8012504:	46bd      	mov	sp, r7
 8012506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801250a:	4770      	bx	lr

0801250c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 801250c:	b580      	push	{r7, lr}
 801250e:	b086      	sub	sp, #24
 8012510:	af00      	add	r7, sp, #0
 8012512:	60f8      	str	r0, [r7, #12]
 8012514:	60b9      	str	r1, [r7, #8]
 8012516:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012518:	2300      	movs	r3, #0
 801251a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	68ba      	ldr	r2, [r7, #8]
 8012520:	68f9      	ldr	r1, [r7, #12]
 8012522:	4806      	ldr	r0, [pc, #24]	@ (801253c <BSP_SD_ReadBlocks_DMA+0x30>)
 8012524:	f7fa fc96 	bl	800ce54 <HAL_SD_ReadBlocks_DMA>
 8012528:	4603      	mov	r3, r0
 801252a:	2b00      	cmp	r3, #0
 801252c:	d001      	beq.n	8012532 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801252e:	2301      	movs	r3, #1
 8012530:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012532:	7dfb      	ldrb	r3, [r7, #23]
}
 8012534:	4618      	mov	r0, r3
 8012536:	3718      	adds	r7, #24
 8012538:	46bd      	mov	sp, r7
 801253a:	bd80      	pop	{r7, pc}
 801253c:	20001478 	.word	0x20001478

08012540 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8012540:	b580      	push	{r7, lr}
 8012542:	b086      	sub	sp, #24
 8012544:	af00      	add	r7, sp, #0
 8012546:	60f8      	str	r0, [r7, #12]
 8012548:	60b9      	str	r1, [r7, #8]
 801254a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801254c:	2300      	movs	r3, #0
 801254e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	68ba      	ldr	r2, [r7, #8]
 8012554:	68f9      	ldr	r1, [r7, #12]
 8012556:	4806      	ldr	r0, [pc, #24]	@ (8012570 <BSP_SD_WriteBlocks_DMA+0x30>)
 8012558:	f7fa fd5e 	bl	800d018 <HAL_SD_WriteBlocks_DMA>
 801255c:	4603      	mov	r3, r0
 801255e:	2b00      	cmp	r3, #0
 8012560:	d001      	beq.n	8012566 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012562:	2301      	movs	r3, #1
 8012564:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012566:	7dfb      	ldrb	r3, [r7, #23]
}
 8012568:	4618      	mov	r0, r3
 801256a:	3718      	adds	r7, #24
 801256c:	46bd      	mov	sp, r7
 801256e:	bd80      	pop	{r7, pc}
 8012570:	20001478 	.word	0x20001478

08012574 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8012574:	b580      	push	{r7, lr}
 8012576:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8012578:	4805      	ldr	r0, [pc, #20]	@ (8012590 <BSP_SD_GetCardState+0x1c>)
 801257a:	f7fb f80d 	bl	800d598 <HAL_SD_GetCardState>
 801257e:	4603      	mov	r3, r0
 8012580:	2b04      	cmp	r3, #4
 8012582:	bf14      	ite	ne
 8012584:	2301      	movne	r3, #1
 8012586:	2300      	moveq	r3, #0
 8012588:	b2db      	uxtb	r3, r3
}
 801258a:	4618      	mov	r0, r3
 801258c:	bd80      	pop	{r7, pc}
 801258e:	bf00      	nop
 8012590:	20001478 	.word	0x20001478

08012594 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8012594:	b580      	push	{r7, lr}
 8012596:	b082      	sub	sp, #8
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 801259c:	6879      	ldr	r1, [r7, #4]
 801259e:	4803      	ldr	r0, [pc, #12]	@ (80125ac <BSP_SD_GetCardInfo+0x18>)
 80125a0:	f7fa ffce 	bl	800d540 <HAL_SD_GetCardInfo>
}
 80125a4:	bf00      	nop
 80125a6:	3708      	adds	r7, #8
 80125a8:	46bd      	mov	sp, r7
 80125aa:	bd80      	pop	{r7, pc}
 80125ac:	20001478 	.word	0x20001478

080125b0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b082      	sub	sp, #8
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80125b8:	f000 f9f4 	bl	80129a4 <BSP_SD_ReadCpltCallback>
}
 80125bc:	bf00      	nop
 80125be:	3708      	adds	r7, #8
 80125c0:	46bd      	mov	sp, r7
 80125c2:	bd80      	pop	{r7, pc}

080125c4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b084      	sub	sp, #16
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 80125cc:	f005 fade 	bl	8017b8c <osKernelSysTick>
 80125d0:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 80125d2:	e006      	b.n	80125e2 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80125d4:	f7ff ffce 	bl	8012574 <BSP_SD_GetCardState>
 80125d8:	4603      	mov	r3, r0
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d101      	bne.n	80125e2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80125de:	2300      	movs	r3, #0
 80125e0:	e009      	b.n	80125f6 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 80125e2:	f005 fad3 	bl	8017b8c <osKernelSysTick>
 80125e6:	4602      	mov	r2, r0
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	1ad3      	subs	r3, r2, r3
 80125ec:	687a      	ldr	r2, [r7, #4]
 80125ee:	429a      	cmp	r2, r3
 80125f0:	d8f0      	bhi.n	80125d4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80125f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80125f6:	4618      	mov	r0, r3
 80125f8:	3710      	adds	r7, #16
 80125fa:	46bd      	mov	sp, r7
 80125fc:	bd80      	pop	{r7, pc}
	...

08012600 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8012600:	b580      	push	{r7, lr}
 8012602:	b084      	sub	sp, #16
 8012604:	af00      	add	r7, sp, #0
 8012606:	4603      	mov	r3, r0
 8012608:	71fb      	strb	r3, [r7, #7]
  // HAL 기반 카드 상태 확인 (BSP 우회)
  HAL_SD_CardStateTypeDef cardState = HAL_SD_GetCardState(&hsd1);
 801260a:	4813      	ldr	r0, [pc, #76]	@ (8012658 <SD_CheckStatus+0x58>)
 801260c:	f7fa ffc4 	bl	800d598 <HAL_SD_GetCardState>
 8012610:	60f8      	str	r0, [r7, #12]
  
  LOG_INFO("[sd_diskio] HAL_SD_GetCardState: %d", cardState);
 8012612:	68fa      	ldr	r2, [r7, #12]
 8012614:	4911      	ldr	r1, [pc, #68]	@ (801265c <SD_CheckStatus+0x5c>)
 8012616:	2001      	movs	r0, #1
 8012618:	f7f2 fb12 	bl	8004c40 <LOGGER_SendFormatted>
  
  if(cardState == HAL_SD_CARD_TRANSFER)
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	2b04      	cmp	r3, #4
 8012620:	d107      	bne.n	8012632 <SD_CheckStatus+0x32>
  {
    // 카드가 TRANSFER 상태이면 초기화 완료로 간주
    Stat = 0;  // 모든 에러 플래그 클리어
 8012622:	4b0f      	ldr	r3, [pc, #60]	@ (8012660 <SD_CheckStatus+0x60>)
 8012624:	2200      	movs	r2, #0
 8012626:	701a      	strb	r2, [r3, #0]
    LOG_INFO("[sd_diskio] SD card status: READY (0x00)");
 8012628:	490e      	ldr	r1, [pc, #56]	@ (8012664 <SD_CheckStatus+0x64>)
 801262a:	2001      	movs	r0, #1
 801262c:	f7f2 fb08 	bl	8004c40 <LOGGER_SendFormatted>
 8012630:	e00a      	b.n	8012648 <SD_CheckStatus+0x48>
  }
  else
  {
    // 카드가 준비되지 않은 상태
    Stat = STA_NOINIT;
 8012632:	4b0b      	ldr	r3, [pc, #44]	@ (8012660 <SD_CheckStatus+0x60>)
 8012634:	2201      	movs	r2, #1
 8012636:	701a      	strb	r2, [r3, #0]
    LOG_WARN("[sd_diskio] SD card status: NOT_READY (0x%02X)", Stat);
 8012638:	4b09      	ldr	r3, [pc, #36]	@ (8012660 <SD_CheckStatus+0x60>)
 801263a:	781b      	ldrb	r3, [r3, #0]
 801263c:	b2db      	uxtb	r3, r3
 801263e:	461a      	mov	r2, r3
 8012640:	4909      	ldr	r1, [pc, #36]	@ (8012668 <SD_CheckStatus+0x68>)
 8012642:	2002      	movs	r0, #2
 8012644:	f7f2 fafc 	bl	8004c40 <LOGGER_SendFormatted>
  }

  return Stat;
 8012648:	4b05      	ldr	r3, [pc, #20]	@ (8012660 <SD_CheckStatus+0x60>)
 801264a:	781b      	ldrb	r3, [r3, #0]
 801264c:	b2db      	uxtb	r3, r3
}
 801264e:	4618      	mov	r0, r3
 8012650:	3710      	adds	r7, #16
 8012652:	46bd      	mov	sp, r7
 8012654:	bd80      	pop	{r7, pc}
 8012656:	bf00      	nop
 8012658:	20001478 	.word	0x20001478
 801265c:	0801e8c4 	.word	0x0801e8c4
 8012660:	20000069 	.word	0x20000069
 8012664:	0801e8e8 	.word	0x0801e8e8
 8012668:	0801e914 	.word	0x0801e914

0801266c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801266c:	b590      	push	{r4, r7, lr}
 801266e:	b089      	sub	sp, #36	@ 0x24
 8012670:	af00      	add	r7, sp, #0
 8012672:	4603      	mov	r3, r0
 8012674:	71fb      	strb	r3, [r7, #7]
  LOG_INFO("[sd_diskio] SD_initialize called");
 8012676:	493d      	ldr	r1, [pc, #244]	@ (801276c <SD_initialize+0x100>)
 8012678:	2001      	movs	r0, #1
 801267a:	f7f2 fae1 	bl	8004c40 <LOGGER_SendFormatted>
  
  // 초기 상태 설정
  Stat = STA_NOINIT;
 801267e:	4b3c      	ldr	r3, [pc, #240]	@ (8012770 <SD_initialize+0x104>)
 8012680:	2201      	movs	r2, #1
 8012682:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  int kernel_running = osKernelRunning();
 8012684:	f005 fa76 	bl	8017b74 <osKernelRunning>
 8012688:	61f8      	str	r0, [r7, #28]
  LOG_INFO("[sd_diskio] FreeRTOS kernel running check: %d", kernel_running);
 801268a:	69fa      	ldr	r2, [r7, #28]
 801268c:	4939      	ldr	r1, [pc, #228]	@ (8012774 <SD_initialize+0x108>)
 801268e:	2001      	movs	r0, #1
 8012690:	f7f2 fad6 	bl	8004c40 <LOGGER_SendFormatted>
  if(kernel_running)
 8012694:	69fb      	ldr	r3, [r7, #28]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d055      	beq.n	8012746 <SD_initialize+0xda>
  osKernelState_t kernel_state = osKernelGetState();
  LOG_INFO("[sd_diskio] FreeRTOS kernel state: %d (osKernelRunning=%d)", kernel_state, osKernelRunning);
  if(kernel_state == osKernelRunning)
#endif
  {
    LOG_INFO("[sd_diskio] FreeRTOS kernel is running - proceeding with SD check");
 801269a:	4937      	ldr	r1, [pc, #220]	@ (8012778 <SD_initialize+0x10c>)
 801269c:	2001      	movs	r0, #1
 801269e:	f7f2 facf 	bl	8004c40 <LOGGER_SendFormatted>
    if(BSP_SD_Init() == MSD_OK)
    {
      Stat = SD_CheckStatus(lun);
    }
#else
    LOG_INFO("[sd_diskio] DISABLE_SD_INIT is active - using HAL-based check");
 80126a2:	4936      	ldr	r1, [pc, #216]	@ (801277c <SD_initialize+0x110>)
 80126a4:	2001      	movs	r0, #1
 80126a6:	f7f2 facb 	bl	8004c40 <LOGGER_SendFormatted>
    Stat = SD_CheckStatus(lun);
 80126aa:	79fb      	ldrb	r3, [r7, #7]
 80126ac:	4618      	mov	r0, r3
 80126ae:	f7ff ffa7 	bl	8012600 <SD_CheckStatus>
 80126b2:	4603      	mov	r3, r0
 80126b4:	461a      	mov	r2, r3
 80126b6:	4b2e      	ldr	r3, [pc, #184]	@ (8012770 <SD_initialize+0x104>)
 80126b8:	701a      	strb	r2, [r3, #0]

    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */
    LOG_INFO("[sd_diskio] Final Stat after SD_CheckStatus: 0x%02X", Stat);
 80126ba:	4b2d      	ldr	r3, [pc, #180]	@ (8012770 <SD_initialize+0x104>)
 80126bc:	781b      	ldrb	r3, [r3, #0]
 80126be:	b2db      	uxtb	r3, r3
 80126c0:	461a      	mov	r2, r3
 80126c2:	492f      	ldr	r1, [pc, #188]	@ (8012780 <SD_initialize+0x114>)
 80126c4:	2001      	movs	r0, #1
 80126c6:	f7f2 fabb 	bl	8004c40 <LOGGER_SendFormatted>

    if (Stat != STA_NOINIT)
 80126ca:	4b29      	ldr	r3, [pc, #164]	@ (8012770 <SD_initialize+0x104>)
 80126cc:	781b      	ldrb	r3, [r3, #0]
 80126ce:	b2db      	uxtb	r3, r3
 80126d0:	2b01      	cmp	r3, #1
 80126d2:	d033      	beq.n	801273c <SD_initialize+0xd0>
    {
      LOG_INFO("[sd_diskio] SD card ready - creating message queue...");
 80126d4:	492b      	ldr	r1, [pc, #172]	@ (8012784 <SD_initialize+0x118>)
 80126d6:	2001      	movs	r0, #1
 80126d8:	f7f2 fab2 	bl	8004c40 <LOGGER_SendFormatted>
      if (SDQueueID == NULL)
 80126dc:	4b2a      	ldr	r3, [pc, #168]	@ (8012788 <SD_initialize+0x11c>)
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d115      	bne.n	8012710 <SD_initialize+0xa4>
      {
 #if (osCMSIS <= 0x20000U)
        osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 80126e4:	4b29      	ldr	r3, [pc, #164]	@ (801278c <SD_initialize+0x120>)
 80126e6:	f107 040c 	add.w	r4, r7, #12
 80126ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80126ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 80126f0:	f107 030c 	add.w	r3, r7, #12
 80126f4:	2100      	movs	r1, #0
 80126f6:	4618      	mov	r0, r3
 80126f8:	f005 fb8f 	bl	8017e1a <osMessageCreate>
 80126fc:	4603      	mov	r3, r0
 80126fe:	4a22      	ldr	r2, [pc, #136]	@ (8012788 <SD_initialize+0x11c>)
 8012700:	6013      	str	r3, [r2, #0]
#else
        SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
        LOG_INFO("[sd_diskio] Message queue created: %p", SDQueueID);
 8012702:	4b21      	ldr	r3, [pc, #132]	@ (8012788 <SD_initialize+0x11c>)
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	461a      	mov	r2, r3
 8012708:	4921      	ldr	r1, [pc, #132]	@ (8012790 <SD_initialize+0x124>)
 801270a:	2001      	movs	r0, #1
 801270c:	f7f2 fa98 	bl	8004c40 <LOGGER_SendFormatted>
      }

      if (SDQueueID == NULL)
 8012710:	4b1d      	ldr	r3, [pc, #116]	@ (8012788 <SD_initialize+0x11c>)
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d10c      	bne.n	8012732 <SD_initialize+0xc6>
      {
        LOG_ERROR("[sd_diskio] Failed to create message queue");
 8012718:	491e      	ldr	r1, [pc, #120]	@ (8012794 <SD_initialize+0x128>)
 801271a:	2003      	movs	r0, #3
 801271c:	f7f2 fa90 	bl	8004c40 <LOGGER_SendFormatted>
        Stat |= STA_NOINIT;
 8012720:	4b13      	ldr	r3, [pc, #76]	@ (8012770 <SD_initialize+0x104>)
 8012722:	781b      	ldrb	r3, [r3, #0]
 8012724:	b2db      	uxtb	r3, r3
 8012726:	f043 0301 	orr.w	r3, r3, #1
 801272a:	b2da      	uxtb	r2, r3
 801272c:	4b10      	ldr	r3, [pc, #64]	@ (8012770 <SD_initialize+0x104>)
 801272e:	701a      	strb	r2, [r3, #0]
 8012730:	e00d      	b.n	801274e <SD_initialize+0xe2>
      }
      else
      {
        LOG_INFO("[sd_diskio] SD initialization completed successfully");
 8012732:	4919      	ldr	r1, [pc, #100]	@ (8012798 <SD_initialize+0x12c>)
 8012734:	2001      	movs	r0, #1
 8012736:	f7f2 fa83 	bl	8004c40 <LOGGER_SendFormatted>
 801273a:	e008      	b.n	801274e <SD_initialize+0xe2>
      }
    }
    else
    {
      LOG_WARN("[sd_diskio] SD card not ready - initialization failed");
 801273c:	4917      	ldr	r1, [pc, #92]	@ (801279c <SD_initialize+0x130>)
 801273e:	2002      	movs	r0, #2
 8012740:	f7f2 fa7e 	bl	8004c40 <LOGGER_SendFormatted>
 8012744:	e003      	b.n	801274e <SD_initialize+0xe2>
    }
  }
  else
  {
    LOG_ERROR("[sd_diskio] FreeRTOS kernel not running - cannot initialize SD");
 8012746:	4916      	ldr	r1, [pc, #88]	@ (80127a0 <SD_initialize+0x134>)
 8012748:	2003      	movs	r0, #3
 801274a:	f7f2 fa79 	bl	8004c40 <LOGGER_SendFormatted>
  }

  LOG_INFO("[sd_diskio] SD_initialize returning: 0x%02X", Stat);
 801274e:	4b08      	ldr	r3, [pc, #32]	@ (8012770 <SD_initialize+0x104>)
 8012750:	781b      	ldrb	r3, [r3, #0]
 8012752:	b2db      	uxtb	r3, r3
 8012754:	461a      	mov	r2, r3
 8012756:	4913      	ldr	r1, [pc, #76]	@ (80127a4 <SD_initialize+0x138>)
 8012758:	2001      	movs	r0, #1
 801275a:	f7f2 fa71 	bl	8004c40 <LOGGER_SendFormatted>
  return Stat;
 801275e:	4b04      	ldr	r3, [pc, #16]	@ (8012770 <SD_initialize+0x104>)
 8012760:	781b      	ldrb	r3, [r3, #0]
 8012762:	b2db      	uxtb	r3, r3

}
 8012764:	4618      	mov	r0, r3
 8012766:	3724      	adds	r7, #36	@ 0x24
 8012768:	46bd      	mov	sp, r7
 801276a:	bd90      	pop	{r4, r7, pc}
 801276c:	0801e944 	.word	0x0801e944
 8012770:	20000069 	.word	0x20000069
 8012774:	0801e968 	.word	0x0801e968
 8012778:	0801e998 	.word	0x0801e998
 801277c:	0801e9dc 	.word	0x0801e9dc
 8012780:	0801ea1c 	.word	0x0801ea1c
 8012784:	0801ea50 	.word	0x0801ea50
 8012788:	200023dc 	.word	0x200023dc
 801278c:	0801ebb8 	.word	0x0801ebb8
 8012790:	0801ea88 	.word	0x0801ea88
 8012794:	0801eab0 	.word	0x0801eab0
 8012798:	0801eadc 	.word	0x0801eadc
 801279c:	0801eb14 	.word	0x0801eb14
 80127a0:	0801eb4c 	.word	0x0801eb4c
 80127a4:	0801eb8c 	.word	0x0801eb8c

080127a8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80127a8:	b580      	push	{r7, lr}
 80127aa:	b082      	sub	sp, #8
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	4603      	mov	r3, r0
 80127b0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80127b2:	79fb      	ldrb	r3, [r7, #7]
 80127b4:	4618      	mov	r0, r3
 80127b6:	f7ff ff23 	bl	8012600 <SD_CheckStatus>
 80127ba:	4603      	mov	r3, r0
}
 80127bc:	4618      	mov	r0, r3
 80127be:	3708      	adds	r7, #8
 80127c0:	46bd      	mov	sp, r7
 80127c2:	bd80      	pop	{r7, pc}

080127c4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80127c4:	b580      	push	{r7, lr}
 80127c6:	b08a      	sub	sp, #40	@ 0x28
 80127c8:	af00      	add	r7, sp, #0
 80127ca:	60b9      	str	r1, [r7, #8]
 80127cc:	607a      	str	r2, [r7, #4]
 80127ce:	603b      	str	r3, [r7, #0]
 80127d0:	4603      	mov	r3, r0
 80127d2:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 80127d4:	2301      	movs	r3, #1
 80127d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80127da:	f247 5030 	movw	r0, #30000	@ 0x7530
 80127de:	f7ff fef1 	bl	80125c4 <SD_CheckStatusWithTimeout>
 80127e2:	4603      	mov	r3, r0
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	da02      	bge.n	80127ee <SD_read+0x2a>
  {
    return res;
 80127e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80127ec:	e032      	b.n	8012854 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 80127ee:	683a      	ldr	r2, [r7, #0]
 80127f0:	6879      	ldr	r1, [r7, #4]
 80127f2:	68b8      	ldr	r0, [r7, #8]
 80127f4:	f7ff fe8a 	bl	801250c <BSP_SD_ReadBlocks_DMA>
 80127f8:	4603      	mov	r3, r0
 80127fa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 80127fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012802:	2b00      	cmp	r3, #0
 8012804:	d124      	bne.n	8012850 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8012806:	4b15      	ldr	r3, [pc, #84]	@ (801285c <SD_read+0x98>)
 8012808:	6819      	ldr	r1, [r3, #0]
 801280a:	f107 0314 	add.w	r3, r7, #20
 801280e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8012812:	4618      	mov	r0, r3
 8012814:	f005 fb6a 	bl	8017eec <osMessageGet>

    if (event.status == osEventMessage)
 8012818:	697b      	ldr	r3, [r7, #20]
 801281a:	2b10      	cmp	r3, #16
 801281c:	d118      	bne.n	8012850 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 801281e:	69bb      	ldr	r3, [r7, #24]
 8012820:	2b01      	cmp	r3, #1
 8012822:	d115      	bne.n	8012850 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8012824:	f005 f9b2 	bl	8017b8c <osKernelSysTick>
 8012828:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 801282a:	e008      	b.n	801283e <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801282c:	f7ff fea2 	bl	8012574 <BSP_SD_GetCardState>
 8012830:	4603      	mov	r3, r0
 8012832:	2b00      	cmp	r3, #0
 8012834:	d103      	bne.n	801283e <SD_read+0x7a>
              {
                res = RES_OK;
 8012836:	2300      	movs	r3, #0
 8012838:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 801283c:	e008      	b.n	8012850 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 801283e:	f005 f9a5 	bl	8017b8c <osKernelSysTick>
 8012842:	4602      	mov	r2, r0
 8012844:	6a3b      	ldr	r3, [r7, #32]
 8012846:	1ad3      	subs	r3, r2, r3
 8012848:	f247 522f 	movw	r2, #29999	@ 0x752f
 801284c:	4293      	cmp	r3, r2
 801284e:	d9ed      	bls.n	801282c <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8012850:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8012854:	4618      	mov	r0, r3
 8012856:	3728      	adds	r7, #40	@ 0x28
 8012858:	46bd      	mov	sp, r7
 801285a:	bd80      	pop	{r7, pc}
 801285c:	200023dc 	.word	0x200023dc

08012860 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8012860:	b580      	push	{r7, lr}
 8012862:	b08a      	sub	sp, #40	@ 0x28
 8012864:	af00      	add	r7, sp, #0
 8012866:	60b9      	str	r1, [r7, #8]
 8012868:	607a      	str	r2, [r7, #4]
 801286a:	603b      	str	r3, [r7, #0]
 801286c:	4603      	mov	r3, r0
 801286e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012870:	2301      	movs	r3, #1
 8012872:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012876:	f247 5030 	movw	r0, #30000	@ 0x7530
 801287a:	f7ff fea3 	bl	80125c4 <SD_CheckStatusWithTimeout>
 801287e:	4603      	mov	r3, r0
 8012880:	2b00      	cmp	r3, #0
 8012882:	da02      	bge.n	801288a <SD_write+0x2a>
  {
    return res;
 8012884:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012888:	e02e      	b.n	80128e8 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801288a:	683a      	ldr	r2, [r7, #0]
 801288c:	6879      	ldr	r1, [r7, #4]
 801288e:	68b8      	ldr	r0, [r7, #8]
 8012890:	f7ff fe56 	bl	8012540 <BSP_SD_WriteBlocks_DMA>
 8012894:	4603      	mov	r3, r0
 8012896:	2b00      	cmp	r3, #0
 8012898:	d124      	bne.n	80128e4 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 801289a:	4b15      	ldr	r3, [pc, #84]	@ (80128f0 <SD_write+0x90>)
 801289c:	6819      	ldr	r1, [r3, #0]
 801289e:	f107 0314 	add.w	r3, r7, #20
 80128a2:	f247 5230 	movw	r2, #30000	@ 0x7530
 80128a6:	4618      	mov	r0, r3
 80128a8:	f005 fb20 	bl	8017eec <osMessageGet>

    if (event.status == osEventMessage)
 80128ac:	697b      	ldr	r3, [r7, #20]
 80128ae:	2b10      	cmp	r3, #16
 80128b0:	d118      	bne.n	80128e4 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 80128b2:	69bb      	ldr	r3, [r7, #24]
 80128b4:	2b02      	cmp	r3, #2
 80128b6:	d115      	bne.n	80128e4 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 80128b8:	f005 f968 	bl	8017b8c <osKernelSysTick>
 80128bc:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 80128be:	e008      	b.n	80128d2 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80128c0:	f7ff fe58 	bl	8012574 <BSP_SD_GetCardState>
 80128c4:	4603      	mov	r3, r0
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d103      	bne.n	80128d2 <SD_write+0x72>
          {
            res = RES_OK;
 80128ca:	2300      	movs	r3, #0
 80128cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 80128d0:	e008      	b.n	80128e4 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 80128d2:	f005 f95b 	bl	8017b8c <osKernelSysTick>
 80128d6:	4602      	mov	r2, r0
 80128d8:	6a3b      	ldr	r3, [r7, #32]
 80128da:	1ad3      	subs	r3, r2, r3
 80128dc:	f247 522f 	movw	r2, #29999	@ 0x752f
 80128e0:	4293      	cmp	r3, r2
 80128e2:	d9ed      	bls.n	80128c0 <SD_write+0x60>
    }

  }
#endif

  return res;
 80128e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80128e8:	4618      	mov	r0, r3
 80128ea:	3728      	adds	r7, #40	@ 0x28
 80128ec:	46bd      	mov	sp, r7
 80128ee:	bd80      	pop	{r7, pc}
 80128f0:	200023dc 	.word	0x200023dc

080128f4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80128f4:	b580      	push	{r7, lr}
 80128f6:	b08c      	sub	sp, #48	@ 0x30
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	4603      	mov	r3, r0
 80128fc:	603a      	str	r2, [r7, #0]
 80128fe:	71fb      	strb	r3, [r7, #7]
 8012900:	460b      	mov	r3, r1
 8012902:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8012904:	2301      	movs	r3, #1
 8012906:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801290a:	4b25      	ldr	r3, [pc, #148]	@ (80129a0 <SD_ioctl+0xac>)
 801290c:	781b      	ldrb	r3, [r3, #0]
 801290e:	b2db      	uxtb	r3, r3
 8012910:	f003 0301 	and.w	r3, r3, #1
 8012914:	2b00      	cmp	r3, #0
 8012916:	d001      	beq.n	801291c <SD_ioctl+0x28>
 8012918:	2303      	movs	r3, #3
 801291a:	e03c      	b.n	8012996 <SD_ioctl+0xa2>

  switch (cmd)
 801291c:	79bb      	ldrb	r3, [r7, #6]
 801291e:	2b03      	cmp	r3, #3
 8012920:	d834      	bhi.n	801298c <SD_ioctl+0x98>
 8012922:	a201      	add	r2, pc, #4	@ (adr r2, 8012928 <SD_ioctl+0x34>)
 8012924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012928:	08012939 	.word	0x08012939
 801292c:	08012941 	.word	0x08012941
 8012930:	08012959 	.word	0x08012959
 8012934:	08012973 	.word	0x08012973
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8012938:	2300      	movs	r3, #0
 801293a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801293e:	e028      	b.n	8012992 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8012940:	f107 030c 	add.w	r3, r7, #12
 8012944:	4618      	mov	r0, r3
 8012946:	f7ff fe25 	bl	8012594 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801294a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801294c:	683b      	ldr	r3, [r7, #0]
 801294e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012950:	2300      	movs	r3, #0
 8012952:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8012956:	e01c      	b.n	8012992 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012958:	f107 030c 	add.w	r3, r7, #12
 801295c:	4618      	mov	r0, r3
 801295e:	f7ff fe19 	bl	8012594 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8012962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012964:	b29a      	uxth	r2, r3
 8012966:	683b      	ldr	r3, [r7, #0]
 8012968:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801296a:	2300      	movs	r3, #0
 801296c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8012970:	e00f      	b.n	8012992 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012972:	f107 030c 	add.w	r3, r7, #12
 8012976:	4618      	mov	r0, r3
 8012978:	f7ff fe0c 	bl	8012594 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801297c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801297e:	0a5a      	lsrs	r2, r3, #9
 8012980:	683b      	ldr	r3, [r7, #0]
 8012982:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012984:	2300      	movs	r3, #0
 8012986:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801298a:	e002      	b.n	8012992 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801298c:	2304      	movs	r3, #4
 801298e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8012992:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8012996:	4618      	mov	r0, r3
 8012998:	3730      	adds	r7, #48	@ 0x30
 801299a:	46bd      	mov	sp, r7
 801299c:	bd80      	pop	{r7, pc}
 801299e:	bf00      	nop
 80129a0:	20000069 	.word	0x20000069

080129a4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80129a4:	b580      	push	{r7, lr}
 80129a6:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 80129a8:	4b04      	ldr	r3, [pc, #16]	@ (80129bc <BSP_SD_ReadCpltCallback+0x18>)
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	2200      	movs	r2, #0
 80129ae:	2101      	movs	r1, #1
 80129b0:	4618      	mov	r0, r3
 80129b2:	f005 fa5b 	bl	8017e6c <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 80129b6:	bf00      	nop
 80129b8:	bd80      	pop	{r7, pc}
 80129ba:	bf00      	nop
 80129bc:	200023dc 	.word	0x200023dc

080129c0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80129c0:	b590      	push	{r4, r7, lr}
 80129c2:	b089      	sub	sp, #36	@ 0x24
 80129c4:	af04      	add	r7, sp, #16
 80129c6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80129c8:	2301      	movs	r3, #1
 80129ca:	2202      	movs	r2, #2
 80129cc:	2102      	movs	r1, #2
 80129ce:	6878      	ldr	r0, [r7, #4]
 80129d0:	f000 fcbd 	bl	801334e <USBH_FindInterface>
 80129d4:	4603      	mov	r3, r0
 80129d6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80129d8:	7bfb      	ldrb	r3, [r7, #15]
 80129da:	2bff      	cmp	r3, #255	@ 0xff
 80129dc:	d002      	beq.n	80129e4 <USBH_CDC_InterfaceInit+0x24>
 80129de:	7bfb      	ldrb	r3, [r7, #15]
 80129e0:	2b01      	cmp	r3, #1
 80129e2:	d901      	bls.n	80129e8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80129e4:	2302      	movs	r3, #2
 80129e6:	e13d      	b.n	8012c64 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80129e8:	7bfb      	ldrb	r3, [r7, #15]
 80129ea:	4619      	mov	r1, r3
 80129ec:	6878      	ldr	r0, [r7, #4]
 80129ee:	f000 fc92 	bl	8013316 <USBH_SelectInterface>
 80129f2:	4603      	mov	r3, r0
 80129f4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80129f6:	7bbb      	ldrb	r3, [r7, #14]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d001      	beq.n	8012a00 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80129fc:	2302      	movs	r3, #2
 80129fe:	e131      	b.n	8012c64 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8012a06:	2050      	movs	r0, #80	@ 0x50
 8012a08:	f008 fbb4 	bl	801b174 <malloc>
 8012a0c:	4603      	mov	r3, r0
 8012a0e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012a16:	69db      	ldr	r3, [r3, #28]
 8012a18:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8012a1a:	68bb      	ldr	r3, [r7, #8]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d101      	bne.n	8012a24 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8012a20:	2302      	movs	r3, #2
 8012a22:	e11f      	b.n	8012c64 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8012a24:	2250      	movs	r2, #80	@ 0x50
 8012a26:	2100      	movs	r1, #0
 8012a28:	68b8      	ldr	r0, [r7, #8]
 8012a2a:	f008 fd05 	bl	801b438 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8012a2e:	7bfb      	ldrb	r3, [r7, #15]
 8012a30:	687a      	ldr	r2, [r7, #4]
 8012a32:	211a      	movs	r1, #26
 8012a34:	fb01 f303 	mul.w	r3, r1, r3
 8012a38:	4413      	add	r3, r2
 8012a3a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8012a3e:	781b      	ldrb	r3, [r3, #0]
 8012a40:	b25b      	sxtb	r3, r3
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	da15      	bge.n	8012a72 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8012a46:	7bfb      	ldrb	r3, [r7, #15]
 8012a48:	687a      	ldr	r2, [r7, #4]
 8012a4a:	211a      	movs	r1, #26
 8012a4c:	fb01 f303 	mul.w	r3, r1, r3
 8012a50:	4413      	add	r3, r2
 8012a52:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8012a56:	781a      	ldrb	r2, [r3, #0]
 8012a58:	68bb      	ldr	r3, [r7, #8]
 8012a5a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8012a5c:	7bfb      	ldrb	r3, [r7, #15]
 8012a5e:	687a      	ldr	r2, [r7, #4]
 8012a60:	211a      	movs	r1, #26
 8012a62:	fb01 f303 	mul.w	r3, r1, r3
 8012a66:	4413      	add	r3, r2
 8012a68:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8012a6c:	881a      	ldrh	r2, [r3, #0]
 8012a6e:	68bb      	ldr	r3, [r7, #8]
 8012a70:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8012a72:	68bb      	ldr	r3, [r7, #8]
 8012a74:	785b      	ldrb	r3, [r3, #1]
 8012a76:	4619      	mov	r1, r3
 8012a78:	6878      	ldr	r0, [r7, #4]
 8012a7a:	f002 f90c 	bl	8014c96 <USBH_AllocPipe>
 8012a7e:	4603      	mov	r3, r0
 8012a80:	461a      	mov	r2, r3
 8012a82:	68bb      	ldr	r3, [r7, #8]
 8012a84:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8012a86:	68bb      	ldr	r3, [r7, #8]
 8012a88:	7819      	ldrb	r1, [r3, #0]
 8012a8a:	68bb      	ldr	r3, [r7, #8]
 8012a8c:	7858      	ldrb	r0, [r3, #1]
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8012a9a:	68ba      	ldr	r2, [r7, #8]
 8012a9c:	8952      	ldrh	r2, [r2, #10]
 8012a9e:	9202      	str	r2, [sp, #8]
 8012aa0:	2203      	movs	r2, #3
 8012aa2:	9201      	str	r2, [sp, #4]
 8012aa4:	9300      	str	r3, [sp, #0]
 8012aa6:	4623      	mov	r3, r4
 8012aa8:	4602      	mov	r2, r0
 8012aaa:	6878      	ldr	r0, [r7, #4]
 8012aac:	f002 f8c4 	bl	8014c38 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8012ab0:	68bb      	ldr	r3, [r7, #8]
 8012ab2:	781b      	ldrb	r3, [r3, #0]
 8012ab4:	2200      	movs	r2, #0
 8012ab6:	4619      	mov	r1, r3
 8012ab8:	6878      	ldr	r0, [r7, #4]
 8012aba:	f008 fad5 	bl	801b068 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8012abe:	2300      	movs	r3, #0
 8012ac0:	2200      	movs	r2, #0
 8012ac2:	210a      	movs	r1, #10
 8012ac4:	6878      	ldr	r0, [r7, #4]
 8012ac6:	f000 fc42 	bl	801334e <USBH_FindInterface>
 8012aca:	4603      	mov	r3, r0
 8012acc:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8012ace:	7bfb      	ldrb	r3, [r7, #15]
 8012ad0:	2bff      	cmp	r3, #255	@ 0xff
 8012ad2:	d002      	beq.n	8012ada <USBH_CDC_InterfaceInit+0x11a>
 8012ad4:	7bfb      	ldrb	r3, [r7, #15]
 8012ad6:	2b01      	cmp	r3, #1
 8012ad8:	d901      	bls.n	8012ade <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8012ada:	2302      	movs	r3, #2
 8012adc:	e0c2      	b.n	8012c64 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8012ade:	7bfb      	ldrb	r3, [r7, #15]
 8012ae0:	687a      	ldr	r2, [r7, #4]
 8012ae2:	211a      	movs	r1, #26
 8012ae4:	fb01 f303 	mul.w	r3, r1, r3
 8012ae8:	4413      	add	r3, r2
 8012aea:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8012aee:	781b      	ldrb	r3, [r3, #0]
 8012af0:	b25b      	sxtb	r3, r3
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	da16      	bge.n	8012b24 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8012af6:	7bfb      	ldrb	r3, [r7, #15]
 8012af8:	687a      	ldr	r2, [r7, #4]
 8012afa:	211a      	movs	r1, #26
 8012afc:	fb01 f303 	mul.w	r3, r1, r3
 8012b00:	4413      	add	r3, r2
 8012b02:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8012b06:	781a      	ldrb	r2, [r3, #0]
 8012b08:	68bb      	ldr	r3, [r7, #8]
 8012b0a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8012b0c:	7bfb      	ldrb	r3, [r7, #15]
 8012b0e:	687a      	ldr	r2, [r7, #4]
 8012b10:	211a      	movs	r1, #26
 8012b12:	fb01 f303 	mul.w	r3, r1, r3
 8012b16:	4413      	add	r3, r2
 8012b18:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8012b1c:	881a      	ldrh	r2, [r3, #0]
 8012b1e:	68bb      	ldr	r3, [r7, #8]
 8012b20:	835a      	strh	r2, [r3, #26]
 8012b22:	e015      	b.n	8012b50 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8012b24:	7bfb      	ldrb	r3, [r7, #15]
 8012b26:	687a      	ldr	r2, [r7, #4]
 8012b28:	211a      	movs	r1, #26
 8012b2a:	fb01 f303 	mul.w	r3, r1, r3
 8012b2e:	4413      	add	r3, r2
 8012b30:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8012b34:	781a      	ldrb	r2, [r3, #0]
 8012b36:	68bb      	ldr	r3, [r7, #8]
 8012b38:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8012b3a:	7bfb      	ldrb	r3, [r7, #15]
 8012b3c:	687a      	ldr	r2, [r7, #4]
 8012b3e:	211a      	movs	r1, #26
 8012b40:	fb01 f303 	mul.w	r3, r1, r3
 8012b44:	4413      	add	r3, r2
 8012b46:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8012b4a:	881a      	ldrh	r2, [r3, #0]
 8012b4c:	68bb      	ldr	r3, [r7, #8]
 8012b4e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8012b50:	7bfb      	ldrb	r3, [r7, #15]
 8012b52:	687a      	ldr	r2, [r7, #4]
 8012b54:	211a      	movs	r1, #26
 8012b56:	fb01 f303 	mul.w	r3, r1, r3
 8012b5a:	4413      	add	r3, r2
 8012b5c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8012b60:	781b      	ldrb	r3, [r3, #0]
 8012b62:	b25b      	sxtb	r3, r3
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	da16      	bge.n	8012b96 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8012b68:	7bfb      	ldrb	r3, [r7, #15]
 8012b6a:	687a      	ldr	r2, [r7, #4]
 8012b6c:	211a      	movs	r1, #26
 8012b6e:	fb01 f303 	mul.w	r3, r1, r3
 8012b72:	4413      	add	r3, r2
 8012b74:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8012b78:	781a      	ldrb	r2, [r3, #0]
 8012b7a:	68bb      	ldr	r3, [r7, #8]
 8012b7c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8012b7e:	7bfb      	ldrb	r3, [r7, #15]
 8012b80:	687a      	ldr	r2, [r7, #4]
 8012b82:	211a      	movs	r1, #26
 8012b84:	fb01 f303 	mul.w	r3, r1, r3
 8012b88:	4413      	add	r3, r2
 8012b8a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8012b8e:	881a      	ldrh	r2, [r3, #0]
 8012b90:	68bb      	ldr	r3, [r7, #8]
 8012b92:	835a      	strh	r2, [r3, #26]
 8012b94:	e015      	b.n	8012bc2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8012b96:	7bfb      	ldrb	r3, [r7, #15]
 8012b98:	687a      	ldr	r2, [r7, #4]
 8012b9a:	211a      	movs	r1, #26
 8012b9c:	fb01 f303 	mul.w	r3, r1, r3
 8012ba0:	4413      	add	r3, r2
 8012ba2:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8012ba6:	781a      	ldrb	r2, [r3, #0]
 8012ba8:	68bb      	ldr	r3, [r7, #8]
 8012baa:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8012bac:	7bfb      	ldrb	r3, [r7, #15]
 8012bae:	687a      	ldr	r2, [r7, #4]
 8012bb0:	211a      	movs	r1, #26
 8012bb2:	fb01 f303 	mul.w	r3, r1, r3
 8012bb6:	4413      	add	r3, r2
 8012bb8:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8012bbc:	881a      	ldrh	r2, [r3, #0]
 8012bbe:	68bb      	ldr	r3, [r7, #8]
 8012bc0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8012bc2:	68bb      	ldr	r3, [r7, #8]
 8012bc4:	7b9b      	ldrb	r3, [r3, #14]
 8012bc6:	4619      	mov	r1, r3
 8012bc8:	6878      	ldr	r0, [r7, #4]
 8012bca:	f002 f864 	bl	8014c96 <USBH_AllocPipe>
 8012bce:	4603      	mov	r3, r0
 8012bd0:	461a      	mov	r2, r3
 8012bd2:	68bb      	ldr	r3, [r7, #8]
 8012bd4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8012bd6:	68bb      	ldr	r3, [r7, #8]
 8012bd8:	7bdb      	ldrb	r3, [r3, #15]
 8012bda:	4619      	mov	r1, r3
 8012bdc:	6878      	ldr	r0, [r7, #4]
 8012bde:	f002 f85a 	bl	8014c96 <USBH_AllocPipe>
 8012be2:	4603      	mov	r3, r0
 8012be4:	461a      	mov	r2, r3
 8012be6:	68bb      	ldr	r3, [r7, #8]
 8012be8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8012bea:	68bb      	ldr	r3, [r7, #8]
 8012bec:	7b59      	ldrb	r1, [r3, #13]
 8012bee:	68bb      	ldr	r3, [r7, #8]
 8012bf0:	7b98      	ldrb	r0, [r3, #14]
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8012bfe:	68ba      	ldr	r2, [r7, #8]
 8012c00:	8b12      	ldrh	r2, [r2, #24]
 8012c02:	9202      	str	r2, [sp, #8]
 8012c04:	2202      	movs	r2, #2
 8012c06:	9201      	str	r2, [sp, #4]
 8012c08:	9300      	str	r3, [sp, #0]
 8012c0a:	4623      	mov	r3, r4
 8012c0c:	4602      	mov	r2, r0
 8012c0e:	6878      	ldr	r0, [r7, #4]
 8012c10:	f002 f812 	bl	8014c38 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8012c14:	68bb      	ldr	r3, [r7, #8]
 8012c16:	7b19      	ldrb	r1, [r3, #12]
 8012c18:	68bb      	ldr	r3, [r7, #8]
 8012c1a:	7bd8      	ldrb	r0, [r3, #15]
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8012c28:	68ba      	ldr	r2, [r7, #8]
 8012c2a:	8b52      	ldrh	r2, [r2, #26]
 8012c2c:	9202      	str	r2, [sp, #8]
 8012c2e:	2202      	movs	r2, #2
 8012c30:	9201      	str	r2, [sp, #4]
 8012c32:	9300      	str	r3, [sp, #0]
 8012c34:	4623      	mov	r3, r4
 8012c36:	4602      	mov	r2, r0
 8012c38:	6878      	ldr	r0, [r7, #4]
 8012c3a:	f001 fffd 	bl	8014c38 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8012c3e:	68bb      	ldr	r3, [r7, #8]
 8012c40:	2200      	movs	r2, #0
 8012c42:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8012c46:	68bb      	ldr	r3, [r7, #8]
 8012c48:	7b5b      	ldrb	r3, [r3, #13]
 8012c4a:	2200      	movs	r2, #0
 8012c4c:	4619      	mov	r1, r3
 8012c4e:	6878      	ldr	r0, [r7, #4]
 8012c50:	f008 fa0a 	bl	801b068 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8012c54:	68bb      	ldr	r3, [r7, #8]
 8012c56:	7b1b      	ldrb	r3, [r3, #12]
 8012c58:	2200      	movs	r2, #0
 8012c5a:	4619      	mov	r1, r3
 8012c5c:	6878      	ldr	r0, [r7, #4]
 8012c5e:	f008 fa03 	bl	801b068 <USBH_LL_SetToggle>

  return USBH_OK;
 8012c62:	2300      	movs	r3, #0
}
 8012c64:	4618      	mov	r0, r3
 8012c66:	3714      	adds	r7, #20
 8012c68:	46bd      	mov	sp, r7
 8012c6a:	bd90      	pop	{r4, r7, pc}

08012c6c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	b084      	sub	sp, #16
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012c7a:	69db      	ldr	r3, [r3, #28]
 8012c7c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	781b      	ldrb	r3, [r3, #0]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d00e      	beq.n	8012ca4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	781b      	ldrb	r3, [r3, #0]
 8012c8a:	4619      	mov	r1, r3
 8012c8c:	6878      	ldr	r0, [r7, #4]
 8012c8e:	f001 fff2 	bl	8014c76 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	781b      	ldrb	r3, [r3, #0]
 8012c96:	4619      	mov	r1, r3
 8012c98:	6878      	ldr	r0, [r7, #4]
 8012c9a:	f002 f81d 	bl	8014cd8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	2200      	movs	r2, #0
 8012ca2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	7b1b      	ldrb	r3, [r3, #12]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d00e      	beq.n	8012cca <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	7b1b      	ldrb	r3, [r3, #12]
 8012cb0:	4619      	mov	r1, r3
 8012cb2:	6878      	ldr	r0, [r7, #4]
 8012cb4:	f001 ffdf 	bl	8014c76 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	7b1b      	ldrb	r3, [r3, #12]
 8012cbc:	4619      	mov	r1, r3
 8012cbe:	6878      	ldr	r0, [r7, #4]
 8012cc0:	f002 f80a 	bl	8014cd8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	2200      	movs	r2, #0
 8012cc8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	7b5b      	ldrb	r3, [r3, #13]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d00e      	beq.n	8012cf0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	7b5b      	ldrb	r3, [r3, #13]
 8012cd6:	4619      	mov	r1, r3
 8012cd8:	6878      	ldr	r0, [r7, #4]
 8012cda:	f001 ffcc 	bl	8014c76 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	7b5b      	ldrb	r3, [r3, #13]
 8012ce2:	4619      	mov	r1, r3
 8012ce4:	6878      	ldr	r0, [r7, #4]
 8012ce6:	f001 fff7 	bl	8014cd8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	2200      	movs	r2, #0
 8012cee:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012cf6:	69db      	ldr	r3, [r3, #28]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d00b      	beq.n	8012d14 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012d02:	69db      	ldr	r3, [r3, #28]
 8012d04:	4618      	mov	r0, r3
 8012d06:	f008 fa3d 	bl	801b184 <free>
    phost->pActiveClass->pData = 0U;
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012d10:	2200      	movs	r2, #0
 8012d12:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8012d14:	2300      	movs	r3, #0
}
 8012d16:	4618      	mov	r0, r3
 8012d18:	3710      	adds	r7, #16
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	bd80      	pop	{r7, pc}

08012d1e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8012d1e:	b580      	push	{r7, lr}
 8012d20:	b084      	sub	sp, #16
 8012d22:	af00      	add	r7, sp, #0
 8012d24:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012d2c:	69db      	ldr	r3, [r3, #28]
 8012d2e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	3340      	adds	r3, #64	@ 0x40
 8012d34:	4619      	mov	r1, r3
 8012d36:	6878      	ldr	r0, [r7, #4]
 8012d38:	f000 f8b1 	bl	8012e9e <GetLineCoding>
 8012d3c:	4603      	mov	r3, r0
 8012d3e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8012d40:	7afb      	ldrb	r3, [r7, #11]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d105      	bne.n	8012d52 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8012d4c:	2102      	movs	r1, #2
 8012d4e:	6878      	ldr	r0, [r7, #4]
 8012d50:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8012d52:	7afb      	ldrb	r3, [r7, #11]
}
 8012d54:	4618      	mov	r0, r3
 8012d56:	3710      	adds	r7, #16
 8012d58:	46bd      	mov	sp, r7
 8012d5a:	bd80      	pop	{r7, pc}

08012d5c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8012d5c:	b580      	push	{r7, lr}
 8012d5e:	b084      	sub	sp, #16
 8012d60:	af00      	add	r7, sp, #0
 8012d62:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8012d64:	2301      	movs	r3, #1
 8012d66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8012d68:	2300      	movs	r3, #0
 8012d6a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012d72:	69db      	ldr	r3, [r3, #28]
 8012d74:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8012d76:	68bb      	ldr	r3, [r7, #8]
 8012d78:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8012d7c:	2b04      	cmp	r3, #4
 8012d7e:	d877      	bhi.n	8012e70 <USBH_CDC_Process+0x114>
 8012d80:	a201      	add	r2, pc, #4	@ (adr r2, 8012d88 <USBH_CDC_Process+0x2c>)
 8012d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d86:	bf00      	nop
 8012d88:	08012d9d 	.word	0x08012d9d
 8012d8c:	08012da3 	.word	0x08012da3
 8012d90:	08012dd3 	.word	0x08012dd3
 8012d94:	08012e47 	.word	0x08012e47
 8012d98:	08012e55 	.word	0x08012e55
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8012da0:	e06d      	b.n	8012e7e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8012da2:	68bb      	ldr	r3, [r7, #8]
 8012da4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012da6:	4619      	mov	r1, r3
 8012da8:	6878      	ldr	r0, [r7, #4]
 8012daa:	f000 f897 	bl	8012edc <SetLineCoding>
 8012dae:	4603      	mov	r3, r0
 8012db0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8012db2:	7bbb      	ldrb	r3, [r7, #14]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d104      	bne.n	8012dc2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8012db8:	68bb      	ldr	r3, [r7, #8]
 8012dba:	2202      	movs	r2, #2
 8012dbc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8012dc0:	e058      	b.n	8012e74 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8012dc2:	7bbb      	ldrb	r3, [r7, #14]
 8012dc4:	2b01      	cmp	r3, #1
 8012dc6:	d055      	beq.n	8012e74 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8012dc8:	68bb      	ldr	r3, [r7, #8]
 8012dca:	2204      	movs	r2, #4
 8012dcc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8012dd0:	e050      	b.n	8012e74 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8012dd2:	68bb      	ldr	r3, [r7, #8]
 8012dd4:	3340      	adds	r3, #64	@ 0x40
 8012dd6:	4619      	mov	r1, r3
 8012dd8:	6878      	ldr	r0, [r7, #4]
 8012dda:	f000 f860 	bl	8012e9e <GetLineCoding>
 8012dde:	4603      	mov	r3, r0
 8012de0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8012de2:	7bbb      	ldrb	r3, [r7, #14]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d126      	bne.n	8012e36 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8012de8:	68bb      	ldr	r3, [r7, #8]
 8012dea:	2200      	movs	r2, #0
 8012dec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8012df0:	68bb      	ldr	r3, [r7, #8]
 8012df2:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8012df6:	68bb      	ldr	r3, [r7, #8]
 8012df8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012dfa:	791b      	ldrb	r3, [r3, #4]
 8012dfc:	429a      	cmp	r2, r3
 8012dfe:	d13b      	bne.n	8012e78 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8012e00:	68bb      	ldr	r3, [r7, #8]
 8012e02:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8012e06:	68bb      	ldr	r3, [r7, #8]
 8012e08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012e0a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8012e0c:	429a      	cmp	r2, r3
 8012e0e:	d133      	bne.n	8012e78 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8012e10:	68bb      	ldr	r3, [r7, #8]
 8012e12:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8012e16:	68bb      	ldr	r3, [r7, #8]
 8012e18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012e1a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8012e1c:	429a      	cmp	r2, r3
 8012e1e:	d12b      	bne.n	8012e78 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8012e20:	68bb      	ldr	r3, [r7, #8]
 8012e22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012e24:	68bb      	ldr	r3, [r7, #8]
 8012e26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012e28:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8012e2a:	429a      	cmp	r2, r3
 8012e2c:	d124      	bne.n	8012e78 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8012e2e:	6878      	ldr	r0, [r7, #4]
 8012e30:	f000 f96a 	bl	8013108 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8012e34:	e020      	b.n	8012e78 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8012e36:	7bbb      	ldrb	r3, [r7, #14]
 8012e38:	2b01      	cmp	r3, #1
 8012e3a:	d01d      	beq.n	8012e78 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8012e3c:	68bb      	ldr	r3, [r7, #8]
 8012e3e:	2204      	movs	r2, #4
 8012e40:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8012e44:	e018      	b.n	8012e78 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8012e46:	6878      	ldr	r0, [r7, #4]
 8012e48:	f000 f867 	bl	8012f1a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8012e4c:	6878      	ldr	r0, [r7, #4]
 8012e4e:	f000 f8e6 	bl	801301e <CDC_ProcessReception>
      break;
 8012e52:	e014      	b.n	8012e7e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8012e54:	2100      	movs	r1, #0
 8012e56:	6878      	ldr	r0, [r7, #4]
 8012e58:	f001 f8ff 	bl	801405a <USBH_ClrFeature>
 8012e5c:	4603      	mov	r3, r0
 8012e5e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8012e60:	7bbb      	ldrb	r3, [r7, #14]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d10a      	bne.n	8012e7c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8012e66:	68bb      	ldr	r3, [r7, #8]
 8012e68:	2200      	movs	r2, #0
 8012e6a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8012e6e:	e005      	b.n	8012e7c <USBH_CDC_Process+0x120>

    default:
      break;
 8012e70:	bf00      	nop
 8012e72:	e004      	b.n	8012e7e <USBH_CDC_Process+0x122>
      break;
 8012e74:	bf00      	nop
 8012e76:	e002      	b.n	8012e7e <USBH_CDC_Process+0x122>
      break;
 8012e78:	bf00      	nop
 8012e7a:	e000      	b.n	8012e7e <USBH_CDC_Process+0x122>
      break;
 8012e7c:	bf00      	nop

  }

  return status;
 8012e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e80:	4618      	mov	r0, r3
 8012e82:	3710      	adds	r7, #16
 8012e84:	46bd      	mov	sp, r7
 8012e86:	bd80      	pop	{r7, pc}

08012e88 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8012e88:	b480      	push	{r7}
 8012e8a:	b083      	sub	sp, #12
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8012e90:	2300      	movs	r3, #0
}
 8012e92:	4618      	mov	r0, r3
 8012e94:	370c      	adds	r7, #12
 8012e96:	46bd      	mov	sp, r7
 8012e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e9c:	4770      	bx	lr

08012e9e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8012e9e:	b580      	push	{r7, lr}
 8012ea0:	b082      	sub	sp, #8
 8012ea2:	af00      	add	r7, sp, #0
 8012ea4:	6078      	str	r0, [r7, #4]
 8012ea6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	22a1      	movs	r2, #161	@ 0xa1
 8012eac:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	2221      	movs	r2, #33	@ 0x21
 8012eb2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	2200      	movs	r2, #0
 8012eb8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	2200      	movs	r2, #0
 8012ebe:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	2207      	movs	r2, #7
 8012ec4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8012ec6:	683b      	ldr	r3, [r7, #0]
 8012ec8:	2207      	movs	r2, #7
 8012eca:	4619      	mov	r1, r3
 8012ecc:	6878      	ldr	r0, [r7, #4]
 8012ece:	f001 fbf9 	bl	80146c4 <USBH_CtlReq>
 8012ed2:	4603      	mov	r3, r0
}
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	3708      	adds	r7, #8
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	bd80      	pop	{r7, pc}

08012edc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8012edc:	b580      	push	{r7, lr}
 8012ede:	b082      	sub	sp, #8
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]
 8012ee4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	2221      	movs	r2, #33	@ 0x21
 8012eea:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	2220      	movs	r2, #32
 8012ef0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	2200      	movs	r2, #0
 8012ef6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	2200      	movs	r2, #0
 8012efc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	2207      	movs	r2, #7
 8012f02:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8012f04:	683b      	ldr	r3, [r7, #0]
 8012f06:	2207      	movs	r2, #7
 8012f08:	4619      	mov	r1, r3
 8012f0a:	6878      	ldr	r0, [r7, #4]
 8012f0c:	f001 fbda 	bl	80146c4 <USBH_CtlReq>
 8012f10:	4603      	mov	r3, r0
}
 8012f12:	4618      	mov	r0, r3
 8012f14:	3708      	adds	r7, #8
 8012f16:	46bd      	mov	sp, r7
 8012f18:	bd80      	pop	{r7, pc}

08012f1a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8012f1a:	b580      	push	{r7, lr}
 8012f1c:	b086      	sub	sp, #24
 8012f1e:	af02      	add	r7, sp, #8
 8012f20:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012f28:	69db      	ldr	r3, [r3, #28]
 8012f2a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8012f2c:	2300      	movs	r3, #0
 8012f2e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8012f36:	2b01      	cmp	r3, #1
 8012f38:	d002      	beq.n	8012f40 <CDC_ProcessTransmission+0x26>
 8012f3a:	2b02      	cmp	r3, #2
 8012f3c:	d023      	beq.n	8012f86 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8012f3e:	e06a      	b.n	8013016 <CDC_ProcessTransmission+0xfc>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f44:	68fa      	ldr	r2, [r7, #12]
 8012f46:	8b12      	ldrh	r2, [r2, #24]
 8012f48:	4293      	cmp	r3, r2
 8012f4a:	d90b      	bls.n	8012f64 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	69d9      	ldr	r1, [r3, #28]
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	8b1a      	ldrh	r2, [r3, #24]
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	7b5b      	ldrb	r3, [r3, #13]
 8012f58:	2001      	movs	r0, #1
 8012f5a:	9000      	str	r0, [sp, #0]
 8012f5c:	6878      	ldr	r0, [r7, #4]
 8012f5e:	f001 fe28 	bl	8014bb2 <USBH_BulkSendData>
 8012f62:	e00b      	b.n	8012f7c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8012f6c:	b29a      	uxth	r2, r3
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	7b5b      	ldrb	r3, [r3, #13]
 8012f72:	2001      	movs	r0, #1
 8012f74:	9000      	str	r0, [sp, #0]
 8012f76:	6878      	ldr	r0, [r7, #4]
 8012f78:	f001 fe1b 	bl	8014bb2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	2202      	movs	r2, #2
 8012f80:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8012f84:	e047      	b.n	8013016 <CDC_ProcessTransmission+0xfc>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	7b5b      	ldrb	r3, [r3, #13]
 8012f8a:	4619      	mov	r1, r3
 8012f8c:	6878      	ldr	r0, [r7, #4]
 8012f8e:	f008 f841 	bl	801b014 <USBH_LL_GetURBState>
 8012f92:	4603      	mov	r3, r0
 8012f94:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8012f96:	7afb      	ldrb	r3, [r7, #11]
 8012f98:	2b01      	cmp	r3, #1
 8012f9a:	d12e      	bne.n	8012ffa <CDC_ProcessTransmission+0xe0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fa0:	68fa      	ldr	r2, [r7, #12]
 8012fa2:	8b12      	ldrh	r2, [r2, #24]
 8012fa4:	4293      	cmp	r3, r2
 8012fa6:	d90e      	bls.n	8012fc6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fac:	68fa      	ldr	r2, [r7, #12]
 8012fae:	8b12      	ldrh	r2, [r2, #24]
 8012fb0:	1a9a      	subs	r2, r3, r2
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	69db      	ldr	r3, [r3, #28]
 8012fba:	68fa      	ldr	r2, [r7, #12]
 8012fbc:	8b12      	ldrh	r2, [r2, #24]
 8012fbe:	441a      	add	r2, r3
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	61da      	str	r2, [r3, #28]
 8012fc4:	e002      	b.n	8012fcc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	2200      	movs	r2, #0
 8012fca:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d004      	beq.n	8012fde <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	2201      	movs	r2, #1
 8012fd8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8012fdc:	e006      	b.n	8012fec <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	2200      	movs	r2, #0
 8012fe2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8012fe6:	6878      	ldr	r0, [r7, #4]
 8012fe8:	f000 f87a 	bl	80130e0 <USBH_CDC_TransmitCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 8012fec:	2300      	movs	r3, #0
 8012fee:	2200      	movs	r2, #0
 8012ff0:	2104      	movs	r1, #4
 8012ff2:	6878      	ldr	r0, [r7, #4]
 8012ff4:	f000 febc 	bl	8013d70 <USBH_OS_PutMessage>
      break;
 8012ff8:	e00c      	b.n	8013014 <CDC_ProcessTransmission+0xfa>
        if (URB_Status == USBH_URB_NOTREADY)
 8012ffa:	7afb      	ldrb	r3, [r7, #11]
 8012ffc:	2b02      	cmp	r3, #2
 8012ffe:	d109      	bne.n	8013014 <CDC_ProcessTransmission+0xfa>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	2201      	movs	r2, #1
 8013004:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 8013008:	2300      	movs	r3, #0
 801300a:	2200      	movs	r2, #0
 801300c:	2104      	movs	r1, #4
 801300e:	6878      	ldr	r0, [r7, #4]
 8013010:	f000 feae 	bl	8013d70 <USBH_OS_PutMessage>
      break;
 8013014:	bf00      	nop
  }
}
 8013016:	bf00      	nop
 8013018:	3710      	adds	r7, #16
 801301a:	46bd      	mov	sp, r7
 801301c:	bd80      	pop	{r7, pc}

0801301e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 801301e:	b580      	push	{r7, lr}
 8013020:	b086      	sub	sp, #24
 8013022:	af00      	add	r7, sp, #0
 8013024:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801302c:	69db      	ldr	r3, [r3, #28]
 801302e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8013030:	2300      	movs	r3, #0
 8013032:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8013034:	697b      	ldr	r3, [r7, #20]
 8013036:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 801303a:	2b03      	cmp	r3, #3
 801303c:	d002      	beq.n	8013044 <CDC_ProcessReception+0x26>
 801303e:	2b04      	cmp	r3, #4
 8013040:	d00e      	beq.n	8013060 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 8013042:	e049      	b.n	80130d8 <CDC_ProcessReception+0xba>
      (void)USBH_BulkReceiveData(phost,
 8013044:	697b      	ldr	r3, [r7, #20]
 8013046:	6a19      	ldr	r1, [r3, #32]
 8013048:	697b      	ldr	r3, [r7, #20]
 801304a:	8b5a      	ldrh	r2, [r3, #26]
 801304c:	697b      	ldr	r3, [r7, #20]
 801304e:	7b1b      	ldrb	r3, [r3, #12]
 8013050:	6878      	ldr	r0, [r7, #4]
 8013052:	f001 fdd3 	bl	8014bfc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8013056:	697b      	ldr	r3, [r7, #20]
 8013058:	2204      	movs	r2, #4
 801305a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 801305e:	e03b      	b.n	80130d8 <CDC_ProcessReception+0xba>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8013060:	697b      	ldr	r3, [r7, #20]
 8013062:	7b1b      	ldrb	r3, [r3, #12]
 8013064:	4619      	mov	r1, r3
 8013066:	6878      	ldr	r0, [r7, #4]
 8013068:	f007 ffd4 	bl	801b014 <USBH_LL_GetURBState>
 801306c:	4603      	mov	r3, r0
 801306e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8013070:	7cfb      	ldrb	r3, [r7, #19]
 8013072:	2b01      	cmp	r3, #1
 8013074:	d12f      	bne.n	80130d6 <CDC_ProcessReception+0xb8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8013076:	697b      	ldr	r3, [r7, #20]
 8013078:	7b1b      	ldrb	r3, [r3, #12]
 801307a:	4619      	mov	r1, r3
 801307c:	6878      	ldr	r0, [r7, #4]
 801307e:	f007 ff37 	bl	801aef0 <USBH_LL_GetLastXferSize>
 8013082:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8013084:	697b      	ldr	r3, [r7, #20]
 8013086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013088:	68fa      	ldr	r2, [r7, #12]
 801308a:	429a      	cmp	r2, r3
 801308c:	d016      	beq.n	80130bc <CDC_ProcessReception+0x9e>
 801308e:	697b      	ldr	r3, [r7, #20]
 8013090:	8b5b      	ldrh	r3, [r3, #26]
 8013092:	461a      	mov	r2, r3
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	4293      	cmp	r3, r2
 8013098:	d110      	bne.n	80130bc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 801309a:	697b      	ldr	r3, [r7, #20]
 801309c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	1ad2      	subs	r2, r2, r3
 80130a2:	697b      	ldr	r3, [r7, #20]
 80130a4:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80130a6:	697b      	ldr	r3, [r7, #20]
 80130a8:	6a1a      	ldr	r2, [r3, #32]
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	441a      	add	r2, r3
 80130ae:	697b      	ldr	r3, [r7, #20]
 80130b0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80130b2:	697b      	ldr	r3, [r7, #20]
 80130b4:	2203      	movs	r2, #3
 80130b6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 80130ba:	e006      	b.n	80130ca <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80130bc:	697b      	ldr	r3, [r7, #20]
 80130be:	2200      	movs	r2, #0
 80130c0:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80130c4:	6878      	ldr	r0, [r7, #4]
 80130c6:	f000 f815 	bl	80130f4 <USBH_CDC_ReceiveCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 80130ca:	2300      	movs	r3, #0
 80130cc:	2200      	movs	r2, #0
 80130ce:	2104      	movs	r1, #4
 80130d0:	6878      	ldr	r0, [r7, #4]
 80130d2:	f000 fe4d 	bl	8013d70 <USBH_OS_PutMessage>
      break;
 80130d6:	bf00      	nop
  }
}
 80130d8:	bf00      	nop
 80130da:	3718      	adds	r7, #24
 80130dc:	46bd      	mov	sp, r7
 80130de:	bd80      	pop	{r7, pc}

080130e0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80130e0:	b480      	push	{r7}
 80130e2:	b083      	sub	sp, #12
 80130e4:	af00      	add	r7, sp, #0
 80130e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80130e8:	bf00      	nop
 80130ea:	370c      	adds	r7, #12
 80130ec:	46bd      	mov	sp, r7
 80130ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f2:	4770      	bx	lr

080130f4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80130f4:	b480      	push	{r7}
 80130f6:	b083      	sub	sp, #12
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80130fc:	bf00      	nop
 80130fe:	370c      	adds	r7, #12
 8013100:	46bd      	mov	sp, r7
 8013102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013106:	4770      	bx	lr

08013108 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8013108:	b480      	push	{r7}
 801310a:	b083      	sub	sp, #12
 801310c:	af00      	add	r7, sp, #0
 801310e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8013110:	bf00      	nop
 8013112:	370c      	adds	r7, #12
 8013114:	46bd      	mov	sp, r7
 8013116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801311a:	4770      	bx	lr

0801311c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 801311c:	b5b0      	push	{r4, r5, r7, lr}
 801311e:	b090      	sub	sp, #64	@ 0x40
 8013120:	af00      	add	r7, sp, #0
 8013122:	60f8      	str	r0, [r7, #12]
 8013124:	60b9      	str	r1, [r7, #8]
 8013126:	4613      	mov	r3, r2
 8013128:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d101      	bne.n	8013134 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8013130:	2302      	movs	r3, #2
 8013132:	e04d      	b.n	80131d0 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	79fa      	ldrb	r2, [r7, #7]
 8013138:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	2200      	movs	r2, #0
 8013140:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	2200      	movs	r2, #0
 8013148:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 801314c:	68f8      	ldr	r0, [r7, #12]
 801314e:	f000 f847 	bl	80131e0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	2200      	movs	r2, #0
 8013156:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	2200      	movs	r2, #0
 801315e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	2200      	movs	r2, #0
 8013166:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	2200      	movs	r2, #0
 801316e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8013172:	68bb      	ldr	r3, [r7, #8]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d003      	beq.n	8013180 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	68ba      	ldr	r2, [r7, #8]
 801317c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8013180:	4b15      	ldr	r3, [pc, #84]	@ (80131d8 <USBH_Init+0xbc>)
 8013182:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8013186:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013188:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 801318c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013190:	2100      	movs	r1, #0
 8013192:	4618      	mov	r0, r3
 8013194:	f004 fe41 	bl	8017e1a <osMessageCreate>
 8013198:	4602      	mov	r2, r0
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 80131a0:	4b0e      	ldr	r3, [pc, #56]	@ (80131dc <USBH_Init+0xc0>)
 80131a2:	f107 0414 	add.w	r4, r7, #20
 80131a6:	461d      	mov	r5, r3
 80131a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80131aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80131ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80131b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 80131b4:	f107 0314 	add.w	r3, r7, #20
 80131b8:	68f9      	ldr	r1, [r7, #12]
 80131ba:	4618      	mov	r0, r3
 80131bc:	f004 fcf6 	bl	8017bac <osThreadCreate>
 80131c0:	4602      	mov	r2, r0
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80131c8:	68f8      	ldr	r0, [r7, #12]
 80131ca:	f007 fddd 	bl	801ad88 <USBH_LL_Init>

  return USBH_OK;
 80131ce:	2300      	movs	r3, #0
}
 80131d0:	4618      	mov	r0, r3
 80131d2:	3740      	adds	r7, #64	@ 0x40
 80131d4:	46bd      	mov	sp, r7
 80131d6:	bdb0      	pop	{r4, r5, r7, pc}
 80131d8:	0801ebcc 	.word	0x0801ebcc
 80131dc:	0801ebe8 	.word	0x0801ebe8

080131e0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80131e0:	b580      	push	{r7, lr}
 80131e2:	b084      	sub	sp, #16
 80131e4:	af00      	add	r7, sp, #0
 80131e6:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80131e8:	2300      	movs	r3, #0
 80131ea:	60fb      	str	r3, [r7, #12]
 80131ec:	e009      	b.n	8013202 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 80131ee:	687a      	ldr	r2, [r7, #4]
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	33e0      	adds	r3, #224	@ 0xe0
 80131f4:	009b      	lsls	r3, r3, #2
 80131f6:	4413      	add	r3, r2
 80131f8:	2200      	movs	r2, #0
 80131fa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	3301      	adds	r3, #1
 8013200:	60fb      	str	r3, [r7, #12]
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	2b0f      	cmp	r3, #15
 8013206:	d9f2      	bls.n	80131ee <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8013208:	2300      	movs	r3, #0
 801320a:	60fb      	str	r3, [r7, #12]
 801320c:	e009      	b.n	8013222 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 801320e:	687a      	ldr	r2, [r7, #4]
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	4413      	add	r3, r2
 8013214:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8013218:	2200      	movs	r2, #0
 801321a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	3301      	adds	r3, #1
 8013220:	60fb      	str	r3, [r7, #12]
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013228:	d3f1      	bcc.n	801320e <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	2200      	movs	r2, #0
 801322e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	2200      	movs	r2, #0
 8013234:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	2201      	movs	r2, #1
 801323a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	2200      	movs	r2, #0
 8013240:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	2201      	movs	r2, #1
 8013248:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	2240      	movs	r2, #64	@ 0x40
 801324e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	2200      	movs	r2, #0
 8013254:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	2200      	movs	r2, #0
 801325a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	2201      	movs	r2, #1
 8013262:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	2200      	movs	r2, #0
 801326a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	2200      	movs	r2, #0
 8013272:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	331c      	adds	r3, #28
 801327a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801327e:	2100      	movs	r1, #0
 8013280:	4618      	mov	r0, r3
 8013282:	f008 f8d9 	bl	801b438 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 801328c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013290:	2100      	movs	r1, #0
 8013292:	4618      	mov	r0, r3
 8013294:	f008 f8d0 	bl	801b438 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 801329e:	2212      	movs	r2, #18
 80132a0:	2100      	movs	r1, #0
 80132a2:	4618      	mov	r0, r3
 80132a4:	f008 f8c8 	bl	801b438 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80132ae:	223e      	movs	r2, #62	@ 0x3e
 80132b0:	2100      	movs	r1, #0
 80132b2:	4618      	mov	r0, r3
 80132b4:	f008 f8c0 	bl	801b438 <memset>

  return USBH_OK;
 80132b8:	2300      	movs	r3, #0
}
 80132ba:	4618      	mov	r0, r3
 80132bc:	3710      	adds	r7, #16
 80132be:	46bd      	mov	sp, r7
 80132c0:	bd80      	pop	{r7, pc}

080132c2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80132c2:	b480      	push	{r7}
 80132c4:	b085      	sub	sp, #20
 80132c6:	af00      	add	r7, sp, #0
 80132c8:	6078      	str	r0, [r7, #4]
 80132ca:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80132cc:	2300      	movs	r3, #0
 80132ce:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80132d0:	683b      	ldr	r3, [r7, #0]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d016      	beq.n	8013304 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d10e      	bne.n	80132fe <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80132e6:	1c59      	adds	r1, r3, #1
 80132e8:	687a      	ldr	r2, [r7, #4]
 80132ea:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80132ee:	687a      	ldr	r2, [r7, #4]
 80132f0:	33de      	adds	r3, #222	@ 0xde
 80132f2:	6839      	ldr	r1, [r7, #0]
 80132f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80132f8:	2300      	movs	r3, #0
 80132fa:	73fb      	strb	r3, [r7, #15]
 80132fc:	e004      	b.n	8013308 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80132fe:	2302      	movs	r3, #2
 8013300:	73fb      	strb	r3, [r7, #15]
 8013302:	e001      	b.n	8013308 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8013304:	2302      	movs	r3, #2
 8013306:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8013308:	7bfb      	ldrb	r3, [r7, #15]
}
 801330a:	4618      	mov	r0, r3
 801330c:	3714      	adds	r7, #20
 801330e:	46bd      	mov	sp, r7
 8013310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013314:	4770      	bx	lr

08013316 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8013316:	b480      	push	{r7}
 8013318:	b085      	sub	sp, #20
 801331a:	af00      	add	r7, sp, #0
 801331c:	6078      	str	r0, [r7, #4]
 801331e:	460b      	mov	r3, r1
 8013320:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8013322:	2300      	movs	r3, #0
 8013324:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 801332c:	78fa      	ldrb	r2, [r7, #3]
 801332e:	429a      	cmp	r2, r3
 8013330:	d204      	bcs.n	801333c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	78fa      	ldrb	r2, [r7, #3]
 8013336:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 801333a:	e001      	b.n	8013340 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 801333c:	2302      	movs	r3, #2
 801333e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8013340:	7bfb      	ldrb	r3, [r7, #15]
}
 8013342:	4618      	mov	r0, r3
 8013344:	3714      	adds	r7, #20
 8013346:	46bd      	mov	sp, r7
 8013348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801334c:	4770      	bx	lr

0801334e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 801334e:	b480      	push	{r7}
 8013350:	b087      	sub	sp, #28
 8013352:	af00      	add	r7, sp, #0
 8013354:	6078      	str	r0, [r7, #4]
 8013356:	4608      	mov	r0, r1
 8013358:	4611      	mov	r1, r2
 801335a:	461a      	mov	r2, r3
 801335c:	4603      	mov	r3, r0
 801335e:	70fb      	strb	r3, [r7, #3]
 8013360:	460b      	mov	r3, r1
 8013362:	70bb      	strb	r3, [r7, #2]
 8013364:	4613      	mov	r3, r2
 8013366:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8013368:	2300      	movs	r3, #0
 801336a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 801336c:	2300      	movs	r3, #0
 801336e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8013376:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8013378:	e025      	b.n	80133c6 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 801337a:	7dfb      	ldrb	r3, [r7, #23]
 801337c:	221a      	movs	r2, #26
 801337e:	fb02 f303 	mul.w	r3, r2, r3
 8013382:	3308      	adds	r3, #8
 8013384:	68fa      	ldr	r2, [r7, #12]
 8013386:	4413      	add	r3, r2
 8013388:	3302      	adds	r3, #2
 801338a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 801338c:	693b      	ldr	r3, [r7, #16]
 801338e:	795b      	ldrb	r3, [r3, #5]
 8013390:	78fa      	ldrb	r2, [r7, #3]
 8013392:	429a      	cmp	r2, r3
 8013394:	d002      	beq.n	801339c <USBH_FindInterface+0x4e>
 8013396:	78fb      	ldrb	r3, [r7, #3]
 8013398:	2bff      	cmp	r3, #255	@ 0xff
 801339a:	d111      	bne.n	80133c0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 801339c:	693b      	ldr	r3, [r7, #16]
 801339e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80133a0:	78ba      	ldrb	r2, [r7, #2]
 80133a2:	429a      	cmp	r2, r3
 80133a4:	d002      	beq.n	80133ac <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80133a6:	78bb      	ldrb	r3, [r7, #2]
 80133a8:	2bff      	cmp	r3, #255	@ 0xff
 80133aa:	d109      	bne.n	80133c0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80133ac:	693b      	ldr	r3, [r7, #16]
 80133ae:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80133b0:	787a      	ldrb	r2, [r7, #1]
 80133b2:	429a      	cmp	r2, r3
 80133b4:	d002      	beq.n	80133bc <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80133b6:	787b      	ldrb	r3, [r7, #1]
 80133b8:	2bff      	cmp	r3, #255	@ 0xff
 80133ba:	d101      	bne.n	80133c0 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80133bc:	7dfb      	ldrb	r3, [r7, #23]
 80133be:	e006      	b.n	80133ce <USBH_FindInterface+0x80>
    }
    if_ix++;
 80133c0:	7dfb      	ldrb	r3, [r7, #23]
 80133c2:	3301      	adds	r3, #1
 80133c4:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80133c6:	7dfb      	ldrb	r3, [r7, #23]
 80133c8:	2b01      	cmp	r3, #1
 80133ca:	d9d6      	bls.n	801337a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80133cc:	23ff      	movs	r3, #255	@ 0xff
}
 80133ce:	4618      	mov	r0, r3
 80133d0:	371c      	adds	r7, #28
 80133d2:	46bd      	mov	sp, r7
 80133d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d8:	4770      	bx	lr

080133da <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80133da:	b580      	push	{r7, lr}
 80133dc:	b082      	sub	sp, #8
 80133de:	af00      	add	r7, sp, #0
 80133e0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80133e2:	6878      	ldr	r0, [r7, #4]
 80133e4:	f007 fd0c 	bl	801ae00 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80133e8:	2101      	movs	r1, #1
 80133ea:	6878      	ldr	r0, [r7, #4]
 80133ec:	f007 fe25 	bl	801b03a <USBH_LL_DriverVBUS>

  return USBH_OK;
 80133f0:	2300      	movs	r3, #0
}
 80133f2:	4618      	mov	r0, r3
 80133f4:	3708      	adds	r7, #8
 80133f6:	46bd      	mov	sp, r7
 80133f8:	bd80      	pop	{r7, pc}
	...

080133fc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80133fc:	b580      	push	{r7, lr}
 80133fe:	b088      	sub	sp, #32
 8013400:	af04      	add	r7, sp, #16
 8013402:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8013404:	2302      	movs	r3, #2
 8013406:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8013408:	2300      	movs	r3, #0
 801340a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8013412:	b2db      	uxtb	r3, r3
 8013414:	2b01      	cmp	r3, #1
 8013416:	d102      	bne.n	801341e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	2203      	movs	r2, #3
 801341c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	781b      	ldrb	r3, [r3, #0]
 8013422:	b2db      	uxtb	r3, r3
 8013424:	2b0b      	cmp	r3, #11
 8013426:	f200 81f5 	bhi.w	8013814 <USBH_Process+0x418>
 801342a:	a201      	add	r2, pc, #4	@ (adr r2, 8013430 <USBH_Process+0x34>)
 801342c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013430:	08013461 	.word	0x08013461
 8013434:	0801349f 	.word	0x0801349f
 8013438:	08013515 	.word	0x08013515
 801343c:	080137a3 	.word	0x080137a3
 8013440:	08013815 	.word	0x08013815
 8013444:	080135c1 	.word	0x080135c1
 8013448:	0801373d 	.word	0x0801373d
 801344c:	08013603 	.word	0x08013603
 8013450:	0801362f 	.word	0x0801362f
 8013454:	08013657 	.word	0x08013657
 8013458:	080136a5 	.word	0x080136a5
 801345c:	0801378b 	.word	0x0801378b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8013466:	b2db      	uxtb	r3, r3
 8013468:	2b00      	cmp	r3, #0
 801346a:	f000 81d5 	beq.w	8013818 <USBH_Process+0x41c>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	2201      	movs	r2, #1
 8013472:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8013474:	20c8      	movs	r0, #200	@ 0xc8
 8013476:	f007 fe2a 	bl	801b0ce <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 801347a:	6878      	ldr	r0, [r7, #4]
 801347c:	f007 fd1d 	bl	801aeba <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	2200      	movs	r2, #0
 8013484:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	2200      	movs	r2, #0
 801348c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8013490:	2300      	movs	r3, #0
 8013492:	2200      	movs	r2, #0
 8013494:	2101      	movs	r1, #1
 8013496:	6878      	ldr	r0, [r7, #4]
 8013498:	f000 fc6a 	bl	8013d70 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 801349c:	e1bc      	b.n	8013818 <USBH_Process+0x41c>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80134a4:	b2db      	uxtb	r3, r3
 80134a6:	2b01      	cmp	r3, #1
 80134a8:	d107      	bne.n	80134ba <USBH_Process+0xbe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	2200      	movs	r2, #0
 80134ae:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	2202      	movs	r2, #2
 80134b6:	701a      	strb	r2, [r3, #0]
 80134b8:	e025      	b.n	8013506 <USBH_Process+0x10a>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80134c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80134c4:	d914      	bls.n	80134f0 <USBH_Process+0xf4>
        {
          phost->device.RstCnt++;
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80134cc:	3301      	adds	r3, #1
 80134ce:	b2da      	uxtb	r2, r3
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80134dc:	2b03      	cmp	r3, #3
 80134de:	d903      	bls.n	80134e8 <USBH_Process+0xec>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	220d      	movs	r2, #13
 80134e4:	701a      	strb	r2, [r3, #0]
 80134e6:	e00e      	b.n	8013506 <USBH_Process+0x10a>
          }
          else
          {
            phost->gState = HOST_IDLE;
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	2200      	movs	r2, #0
 80134ec:	701a      	strb	r2, [r3, #0]
 80134ee:	e00a      	b.n	8013506 <USBH_Process+0x10a>
          }
        }
        else
        {
          phost->Timeout += 10U;
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80134f6:	f103 020a 	add.w	r2, r3, #10
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8013500:	200a      	movs	r0, #10
 8013502:	f007 fde4 	bl	801b0ce <USBH_Delay>
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8013506:	2300      	movs	r3, #0
 8013508:	2200      	movs	r2, #0
 801350a:	2101      	movs	r1, #1
 801350c:	6878      	ldr	r0, [r7, #4]
 801350e:	f000 fc2f 	bl	8013d70 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8013512:	e188      	b.n	8013826 <USBH_Process+0x42a>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 801351a:	2b00      	cmp	r3, #0
 801351c:	d005      	beq.n	801352a <USBH_Process+0x12e>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8013524:	2104      	movs	r1, #4
 8013526:	6878      	ldr	r0, [r7, #4]
 8013528:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 801352a:	2064      	movs	r0, #100	@ 0x64
 801352c:	f007 fdcf 	bl	801b0ce <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8013530:	6878      	ldr	r0, [r7, #4]
 8013532:	f007 fc9b 	bl	801ae6c <USBH_LL_GetSpeed>
 8013536:	4603      	mov	r3, r0
 8013538:	461a      	mov	r2, r3
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	2205      	movs	r2, #5
 8013544:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8013546:	2100      	movs	r1, #0
 8013548:	6878      	ldr	r0, [r7, #4]
 801354a:	f001 fba4 	bl	8014c96 <USBH_AllocPipe>
 801354e:	4603      	mov	r3, r0
 8013550:	461a      	mov	r2, r3
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8013556:	2180      	movs	r1, #128	@ 0x80
 8013558:	6878      	ldr	r0, [r7, #4]
 801355a:	f001 fb9c 	bl	8014c96 <USBH_AllocPipe>
 801355e:	4603      	mov	r3, r0
 8013560:	461a      	mov	r2, r3
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	7919      	ldrb	r1, [r3, #4]
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8013576:	687a      	ldr	r2, [r7, #4]
 8013578:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 801357a:	9202      	str	r2, [sp, #8]
 801357c:	2200      	movs	r2, #0
 801357e:	9201      	str	r2, [sp, #4]
 8013580:	9300      	str	r3, [sp, #0]
 8013582:	4603      	mov	r3, r0
 8013584:	2280      	movs	r2, #128	@ 0x80
 8013586:	6878      	ldr	r0, [r7, #4]
 8013588:	f001 fb56 	bl	8014c38 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	7959      	ldrb	r1, [r3, #5]
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 801359c:	687a      	ldr	r2, [r7, #4]
 801359e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80135a0:	9202      	str	r2, [sp, #8]
 80135a2:	2200      	movs	r2, #0
 80135a4:	9201      	str	r2, [sp, #4]
 80135a6:	9300      	str	r3, [sp, #0]
 80135a8:	4603      	mov	r3, r0
 80135aa:	2200      	movs	r2, #0
 80135ac:	6878      	ldr	r0, [r7, #4]
 80135ae:	f001 fb43 	bl	8014c38 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80135b2:	2300      	movs	r3, #0
 80135b4:	2200      	movs	r2, #0
 80135b6:	2101      	movs	r1, #1
 80135b8:	6878      	ldr	r0, [r7, #4]
 80135ba:	f000 fbd9 	bl	8013d70 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 80135be:	e132      	b.n	8013826 <USBH_Process+0x42a>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80135c0:	6878      	ldr	r0, [r7, #4]
 80135c2:	f000 f935 	bl	8013830 <USBH_HandleEnum>
 80135c6:	4603      	mov	r3, r0
 80135c8:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80135ca:	7bbb      	ldrb	r3, [r7, #14]
 80135cc:	b2db      	uxtb	r3, r3
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	f040 8124 	bne.w	801381c <USBH_Process+0x420>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	2200      	movs	r2, #0
 80135d8:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80135e2:	2b01      	cmp	r3, #1
 80135e4:	d103      	bne.n	80135ee <USBH_Process+0x1f2>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	2208      	movs	r2, #8
 80135ea:	701a      	strb	r2, [r3, #0]
 80135ec:	e002      	b.n	80135f4 <USBH_Process+0x1f8>
        }
        else
        {
          phost->gState = HOST_INPUT;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	2207      	movs	r2, #7
 80135f2:	701a      	strb	r2, [r3, #0]
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 80135f4:	2300      	movs	r3, #0
 80135f6:	2200      	movs	r2, #0
 80135f8:	2105      	movs	r1, #5
 80135fa:	6878      	ldr	r0, [r7, #4]
 80135fc:	f000 fbb8 	bl	8013d70 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8013600:	e10c      	b.n	801381c <USBH_Process+0x420>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8013608:	2b00      	cmp	r3, #0
 801360a:	f000 8109 	beq.w	8013820 <USBH_Process+0x424>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8013614:	2101      	movs	r1, #1
 8013616:	6878      	ldr	r0, [r7, #4]
 8013618:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	2208      	movs	r2, #8
 801361e:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8013620:	2300      	movs	r3, #0
 8013622:	2200      	movs	r2, #0
 8013624:	2105      	movs	r1, #5
 8013626:	6878      	ldr	r0, [r7, #4]
 8013628:	f000 fba2 	bl	8013d70 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 801362c:	e0f8      	b.n	8013820 <USBH_Process+0x424>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8013634:	4619      	mov	r1, r3
 8013636:	6878      	ldr	r0, [r7, #4]
 8013638:	f000 fcc8 	bl	8013fcc <USBH_SetCfg>
 801363c:	4603      	mov	r3, r0
 801363e:	2b00      	cmp	r3, #0
 8013640:	d102      	bne.n	8013648 <USBH_Process+0x24c>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	2209      	movs	r2, #9
 8013646:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8013648:	2300      	movs	r3, #0
 801364a:	2200      	movs	r2, #0
 801364c:	2101      	movs	r1, #1
 801364e:	6878      	ldr	r0, [r7, #4]
 8013650:	f000 fb8e 	bl	8013d70 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8013654:	e0e7      	b.n	8013826 <USBH_Process+0x42a>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 801365c:	f003 0320 	and.w	r3, r3, #32
 8013660:	2b00      	cmp	r3, #0
 8013662:	d015      	beq.n	8013690 <USBH_Process+0x294>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8013664:	2101      	movs	r1, #1
 8013666:	6878      	ldr	r0, [r7, #4]
 8013668:	f000 fcd3 	bl	8014012 <USBH_SetFeature>
 801366c:	4603      	mov	r3, r0
 801366e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8013670:	7bbb      	ldrb	r3, [r7, #14]
 8013672:	b2db      	uxtb	r3, r3
 8013674:	2b00      	cmp	r3, #0
 8013676:	d103      	bne.n	8013680 <USBH_Process+0x284>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	220a      	movs	r2, #10
 801367c:	701a      	strb	r2, [r3, #0]
 801367e:	e00a      	b.n	8013696 <USBH_Process+0x29a>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8013680:	7bbb      	ldrb	r3, [r7, #14]
 8013682:	b2db      	uxtb	r3, r3
 8013684:	2b03      	cmp	r3, #3
 8013686:	d106      	bne.n	8013696 <USBH_Process+0x29a>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	220a      	movs	r2, #10
 801368c:	701a      	strb	r2, [r3, #0]
 801368e:	e002      	b.n	8013696 <USBH_Process+0x29a>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	220a      	movs	r2, #10
 8013694:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8013696:	2300      	movs	r3, #0
 8013698:	2200      	movs	r2, #0
 801369a:	2101      	movs	r1, #1
 801369c:	6878      	ldr	r0, [r7, #4]
 801369e:	f000 fb67 	bl	8013d70 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 80136a2:	e0c0      	b.n	8013826 <USBH_Process+0x42a>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d03f      	beq.n	801372e <USBH_Process+0x332>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	2200      	movs	r2, #0
 80136b2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80136b6:	2300      	movs	r3, #0
 80136b8:	73fb      	strb	r3, [r7, #15]
 80136ba:	e016      	b.n	80136ea <USBH_Process+0x2ee>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80136bc:	7bfa      	ldrb	r2, [r7, #15]
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	32de      	adds	r2, #222	@ 0xde
 80136c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136c6:	791a      	ldrb	r2, [r3, #4]
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80136ce:	429a      	cmp	r2, r3
 80136d0:	d108      	bne.n	80136e4 <USBH_Process+0x2e8>
          {
            phost->pActiveClass = phost->pClass[idx];
 80136d2:	7bfa      	ldrb	r2, [r7, #15]
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	32de      	adds	r2, #222	@ 0xde
 80136d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80136e2:	e005      	b.n	80136f0 <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80136e4:	7bfb      	ldrb	r3, [r7, #15]
 80136e6:	3301      	adds	r3, #1
 80136e8:	73fb      	strb	r3, [r7, #15]
 80136ea:	7bfb      	ldrb	r3, [r7, #15]
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d0e5      	beq.n	80136bc <USBH_Process+0x2c0>
          }
        }

        if (phost->pActiveClass != NULL)
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d016      	beq.n	8013728 <USBH_Process+0x32c>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8013700:	689b      	ldr	r3, [r3, #8]
 8013702:	6878      	ldr	r0, [r7, #4]
 8013704:	4798      	blx	r3
 8013706:	4603      	mov	r3, r0
 8013708:	2b00      	cmp	r3, #0
 801370a:	d109      	bne.n	8013720 <USBH_Process+0x324>
          {
            phost->gState = HOST_CLASS_REQUEST;
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	2206      	movs	r2, #6
 8013710:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8013718:	2103      	movs	r1, #3
 801371a:	6878      	ldr	r0, [r7, #4]
 801371c:	4798      	blx	r3
 801371e:	e006      	b.n	801372e <USBH_Process+0x332>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	220d      	movs	r2, #13
 8013724:	701a      	strb	r2, [r3, #0]
 8013726:	e002      	b.n	801372e <USBH_Process+0x332>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	220d      	movs	r2, #13
 801372c:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 801372e:	2300      	movs	r3, #0
 8013730:	2200      	movs	r2, #0
 8013732:	2105      	movs	r1, #5
 8013734:	6878      	ldr	r0, [r7, #4]
 8013736:	f000 fb1b 	bl	8013d70 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 801373a:	e074      	b.n	8013826 <USBH_Process+0x42a>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8013742:	2b00      	cmp	r3, #0
 8013744:	d017      	beq.n	8013776 <USBH_Process+0x37a>
      {
        status = phost->pActiveClass->Requests(phost);
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801374c:	691b      	ldr	r3, [r3, #16]
 801374e:	6878      	ldr	r0, [r7, #4]
 8013750:	4798      	blx	r3
 8013752:	4603      	mov	r3, r0
 8013754:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8013756:	7bbb      	ldrb	r3, [r7, #14]
 8013758:	b2db      	uxtb	r3, r3
 801375a:	2b00      	cmp	r3, #0
 801375c:	d103      	bne.n	8013766 <USBH_Process+0x36a>
        {
          phost->gState = HOST_CLASS;
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	220b      	movs	r2, #11
 8013762:	701a      	strb	r2, [r3, #0]
 8013764:	e00a      	b.n	801377c <USBH_Process+0x380>
        }
        else if (status == USBH_FAIL)
 8013766:	7bbb      	ldrb	r3, [r7, #14]
 8013768:	b2db      	uxtb	r3, r3
 801376a:	2b02      	cmp	r3, #2
 801376c:	d106      	bne.n	801377c <USBH_Process+0x380>
        {
          phost->gState = HOST_ABORT_STATE;
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	220d      	movs	r2, #13
 8013772:	701a      	strb	r2, [r3, #0]
 8013774:	e002      	b.n	801377c <USBH_Process+0x380>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	220d      	movs	r2, #13
 801377a:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 801377c:	2300      	movs	r3, #0
 801377e:	2200      	movs	r2, #0
 8013780:	2105      	movs	r1, #5
 8013782:	6878      	ldr	r0, [r7, #4]
 8013784:	f000 faf4 	bl	8013d70 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8013788:	e04d      	b.n	8013826 <USBH_Process+0x42a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8013790:	2b00      	cmp	r3, #0
 8013792:	d047      	beq.n	8013824 <USBH_Process+0x428>
      {
        phost->pActiveClass->BgndProcess(phost);
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801379a:	695b      	ldr	r3, [r3, #20]
 801379c:	6878      	ldr	r0, [r7, #4]
 801379e:	4798      	blx	r3
      }
      break;
 80137a0:	e040      	b.n	8013824 <USBH_Process+0x428>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	2200      	movs	r2, #0
 80137a6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80137aa:	6878      	ldr	r0, [r7, #4]
 80137ac:	f7ff fd18 	bl	80131e0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d009      	beq.n	80137ce <USBH_Process+0x3d2>
      {
        phost->pActiveClass->DeInit(phost);
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80137c0:	68db      	ldr	r3, [r3, #12]
 80137c2:	6878      	ldr	r0, [r7, #4]
 80137c4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	2200      	movs	r2, #0
 80137ca:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d005      	beq.n	80137e4 <USBH_Process+0x3e8>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80137de:	2105      	movs	r1, #5
 80137e0:	6878      	ldr	r0, [r7, #4]
 80137e2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80137ea:	b2db      	uxtb	r3, r3
 80137ec:	2b01      	cmp	r3, #1
 80137ee:	d107      	bne.n	8013800 <USBH_Process+0x404>
      {
        phost->device.is_ReEnumerated = 0U;
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	2200      	movs	r2, #0
 80137f4:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80137f8:	6878      	ldr	r0, [r7, #4]
 80137fa:	f7ff fdee 	bl	80133da <USBH_Start>
 80137fe:	e002      	b.n	8013806 <USBH_Process+0x40a>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8013800:	6878      	ldr	r0, [r7, #4]
 8013802:	f007 fafd 	bl	801ae00 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8013806:	2300      	movs	r3, #0
 8013808:	2200      	movs	r2, #0
 801380a:	2101      	movs	r1, #1
 801380c:	6878      	ldr	r0, [r7, #4]
 801380e:	f000 faaf 	bl	8013d70 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8013812:	e008      	b.n	8013826 <USBH_Process+0x42a>

    case HOST_ABORT_STATE:
    default :
      break;
 8013814:	bf00      	nop
 8013816:	e006      	b.n	8013826 <USBH_Process+0x42a>
      break;
 8013818:	bf00      	nop
 801381a:	e004      	b.n	8013826 <USBH_Process+0x42a>
      break;
 801381c:	bf00      	nop
 801381e:	e002      	b.n	8013826 <USBH_Process+0x42a>
    break;
 8013820:	bf00      	nop
 8013822:	e000      	b.n	8013826 <USBH_Process+0x42a>
      break;
 8013824:	bf00      	nop
  }
  return USBH_OK;
 8013826:	2300      	movs	r3, #0
}
 8013828:	4618      	mov	r0, r3
 801382a:	3710      	adds	r7, #16
 801382c:	46bd      	mov	sp, r7
 801382e:	bd80      	pop	{r7, pc}

08013830 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8013830:	b580      	push	{r7, lr}
 8013832:	b088      	sub	sp, #32
 8013834:	af04      	add	r7, sp, #16
 8013836:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8013838:	2301      	movs	r3, #1
 801383a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 801383c:	2301      	movs	r3, #1
 801383e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	785b      	ldrb	r3, [r3, #1]
 8013844:	2b07      	cmp	r3, #7
 8013846:	f200 81db 	bhi.w	8013c00 <USBH_HandleEnum+0x3d0>
 801384a:	a201      	add	r2, pc, #4	@ (adr r2, 8013850 <USBH_HandleEnum+0x20>)
 801384c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013850:	08013871 	.word	0x08013871
 8013854:	0801392b 	.word	0x0801392b
 8013858:	08013995 	.word	0x08013995
 801385c:	08013a1f 	.word	0x08013a1f
 8013860:	08013a89 	.word	0x08013a89
 8013864:	08013af9 	.word	0x08013af9
 8013868:	08013b63 	.word	0x08013b63
 801386c:	08013bc1 	.word	0x08013bc1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8013870:	2108      	movs	r1, #8
 8013872:	6878      	ldr	r0, [r7, #4]
 8013874:	f000 fac7 	bl	8013e06 <USBH_Get_DevDesc>
 8013878:	4603      	mov	r3, r0
 801387a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801387c:	7bbb      	ldrb	r3, [r7, #14]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d12e      	bne.n	80138e0 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	2201      	movs	r2, #1
 8013890:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	7919      	ldrb	r1, [r3, #4]
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80138a2:	687a      	ldr	r2, [r7, #4]
 80138a4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80138a6:	9202      	str	r2, [sp, #8]
 80138a8:	2200      	movs	r2, #0
 80138aa:	9201      	str	r2, [sp, #4]
 80138ac:	9300      	str	r3, [sp, #0]
 80138ae:	4603      	mov	r3, r0
 80138b0:	2280      	movs	r2, #128	@ 0x80
 80138b2:	6878      	ldr	r0, [r7, #4]
 80138b4:	f001 f9c0 	bl	8014c38 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	7959      	ldrb	r1, [r3, #5]
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80138c8:	687a      	ldr	r2, [r7, #4]
 80138ca:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80138cc:	9202      	str	r2, [sp, #8]
 80138ce:	2200      	movs	r2, #0
 80138d0:	9201      	str	r2, [sp, #4]
 80138d2:	9300      	str	r3, [sp, #0]
 80138d4:	4603      	mov	r3, r0
 80138d6:	2200      	movs	r2, #0
 80138d8:	6878      	ldr	r0, [r7, #4]
 80138da:	f001 f9ad 	bl	8014c38 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80138de:	e191      	b.n	8013c04 <USBH_HandleEnum+0x3d4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80138e0:	7bbb      	ldrb	r3, [r7, #14]
 80138e2:	2b03      	cmp	r3, #3
 80138e4:	f040 818e 	bne.w	8013c04 <USBH_HandleEnum+0x3d4>
        phost->device.EnumCnt++;
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80138ee:	3301      	adds	r3, #1
 80138f0:	b2da      	uxtb	r2, r3
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80138fe:	2b03      	cmp	r3, #3
 8013900:	d903      	bls.n	801390a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	220d      	movs	r2, #13
 8013906:	701a      	strb	r2, [r3, #0]
      break;
 8013908:	e17c      	b.n	8013c04 <USBH_HandleEnum+0x3d4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	795b      	ldrb	r3, [r3, #5]
 801390e:	4619      	mov	r1, r3
 8013910:	6878      	ldr	r0, [r7, #4]
 8013912:	f001 f9e1 	bl	8014cd8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	791b      	ldrb	r3, [r3, #4]
 801391a:	4619      	mov	r1, r3
 801391c:	6878      	ldr	r0, [r7, #4]
 801391e:	f001 f9db 	bl	8014cd8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	2200      	movs	r2, #0
 8013926:	701a      	strb	r2, [r3, #0]
      break;
 8013928:	e16c      	b.n	8013c04 <USBH_HandleEnum+0x3d4>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 801392a:	2112      	movs	r1, #18
 801392c:	6878      	ldr	r0, [r7, #4]
 801392e:	f000 fa6a 	bl	8013e06 <USBH_Get_DevDesc>
 8013932:	4603      	mov	r3, r0
 8013934:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8013936:	7bbb      	ldrb	r3, [r7, #14]
 8013938:	2b00      	cmp	r3, #0
 801393a:	d103      	bne.n	8013944 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	2202      	movs	r2, #2
 8013940:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8013942:	e161      	b.n	8013c08 <USBH_HandleEnum+0x3d8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013944:	7bbb      	ldrb	r3, [r7, #14]
 8013946:	2b03      	cmp	r3, #3
 8013948:	f040 815e 	bne.w	8013c08 <USBH_HandleEnum+0x3d8>
        phost->device.EnumCnt++;
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8013952:	3301      	adds	r3, #1
 8013954:	b2da      	uxtb	r2, r3
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8013962:	2b03      	cmp	r3, #3
 8013964:	d903      	bls.n	801396e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	220d      	movs	r2, #13
 801396a:	701a      	strb	r2, [r3, #0]
      break;
 801396c:	e14c      	b.n	8013c08 <USBH_HandleEnum+0x3d8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	795b      	ldrb	r3, [r3, #5]
 8013972:	4619      	mov	r1, r3
 8013974:	6878      	ldr	r0, [r7, #4]
 8013976:	f001 f9af 	bl	8014cd8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	791b      	ldrb	r3, [r3, #4]
 801397e:	4619      	mov	r1, r3
 8013980:	6878      	ldr	r0, [r7, #4]
 8013982:	f001 f9a9 	bl	8014cd8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	2200      	movs	r2, #0
 801398a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	2200      	movs	r2, #0
 8013990:	701a      	strb	r2, [r3, #0]
      break;
 8013992:	e139      	b.n	8013c08 <USBH_HandleEnum+0x3d8>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8013994:	2101      	movs	r1, #1
 8013996:	6878      	ldr	r0, [r7, #4]
 8013998:	f000 faf4 	bl	8013f84 <USBH_SetAddress>
 801399c:	4603      	mov	r3, r0
 801399e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80139a0:	7bbb      	ldrb	r3, [r7, #14]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d130      	bne.n	8013a08 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80139a6:	2002      	movs	r0, #2
 80139a8:	f007 fb91 	bl	801b0ce <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	2201      	movs	r2, #1
 80139b0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	2203      	movs	r2, #3
 80139b8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	7919      	ldrb	r1, [r3, #4]
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80139ca:	687a      	ldr	r2, [r7, #4]
 80139cc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80139ce:	9202      	str	r2, [sp, #8]
 80139d0:	2200      	movs	r2, #0
 80139d2:	9201      	str	r2, [sp, #4]
 80139d4:	9300      	str	r3, [sp, #0]
 80139d6:	4603      	mov	r3, r0
 80139d8:	2280      	movs	r2, #128	@ 0x80
 80139da:	6878      	ldr	r0, [r7, #4]
 80139dc:	f001 f92c 	bl	8014c38 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	7959      	ldrb	r1, [r3, #5]
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80139f0:	687a      	ldr	r2, [r7, #4]
 80139f2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80139f4:	9202      	str	r2, [sp, #8]
 80139f6:	2200      	movs	r2, #0
 80139f8:	9201      	str	r2, [sp, #4]
 80139fa:	9300      	str	r3, [sp, #0]
 80139fc:	4603      	mov	r3, r0
 80139fe:	2200      	movs	r2, #0
 8013a00:	6878      	ldr	r0, [r7, #4]
 8013a02:	f001 f919 	bl	8014c38 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8013a06:	e101      	b.n	8013c0c <USBH_HandleEnum+0x3dc>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013a08:	7bbb      	ldrb	r3, [r7, #14]
 8013a0a:	2b03      	cmp	r3, #3
 8013a0c:	f040 80fe 	bne.w	8013c0c <USBH_HandleEnum+0x3dc>
        phost->gState = HOST_ABORT_STATE;
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	220d      	movs	r2, #13
 8013a14:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	2200      	movs	r2, #0
 8013a1a:	705a      	strb	r2, [r3, #1]
      break;
 8013a1c:	e0f6      	b.n	8013c0c <USBH_HandleEnum+0x3dc>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8013a1e:	2109      	movs	r1, #9
 8013a20:	6878      	ldr	r0, [r7, #4]
 8013a22:	f000 fa1c 	bl	8013e5e <USBH_Get_CfgDesc>
 8013a26:	4603      	mov	r3, r0
 8013a28:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8013a2a:	7bbb      	ldrb	r3, [r7, #14]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d103      	bne.n	8013a38 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	2204      	movs	r2, #4
 8013a34:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8013a36:	e0eb      	b.n	8013c10 <USBH_HandleEnum+0x3e0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013a38:	7bbb      	ldrb	r3, [r7, #14]
 8013a3a:	2b03      	cmp	r3, #3
 8013a3c:	f040 80e8 	bne.w	8013c10 <USBH_HandleEnum+0x3e0>
        phost->device.EnumCnt++;
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8013a46:	3301      	adds	r3, #1
 8013a48:	b2da      	uxtb	r2, r3
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8013a56:	2b03      	cmp	r3, #3
 8013a58:	d903      	bls.n	8013a62 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	220d      	movs	r2, #13
 8013a5e:	701a      	strb	r2, [r3, #0]
      break;
 8013a60:	e0d6      	b.n	8013c10 <USBH_HandleEnum+0x3e0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	795b      	ldrb	r3, [r3, #5]
 8013a66:	4619      	mov	r1, r3
 8013a68:	6878      	ldr	r0, [r7, #4]
 8013a6a:	f001 f935 	bl	8014cd8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	791b      	ldrb	r3, [r3, #4]
 8013a72:	4619      	mov	r1, r3
 8013a74:	6878      	ldr	r0, [r7, #4]
 8013a76:	f001 f92f 	bl	8014cd8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	2200      	movs	r2, #0
 8013a7e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	2200      	movs	r2, #0
 8013a84:	701a      	strb	r2, [r3, #0]
      break;
 8013a86:	e0c3      	b.n	8013c10 <USBH_HandleEnum+0x3e0>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8013a8e:	4619      	mov	r1, r3
 8013a90:	6878      	ldr	r0, [r7, #4]
 8013a92:	f000 f9e4 	bl	8013e5e <USBH_Get_CfgDesc>
 8013a96:	4603      	mov	r3, r0
 8013a98:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8013a9a:	7bbb      	ldrb	r3, [r7, #14]
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d103      	bne.n	8013aa8 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	2205      	movs	r2, #5
 8013aa4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8013aa6:	e0b5      	b.n	8013c14 <USBH_HandleEnum+0x3e4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013aa8:	7bbb      	ldrb	r3, [r7, #14]
 8013aaa:	2b03      	cmp	r3, #3
 8013aac:	f040 80b2 	bne.w	8013c14 <USBH_HandleEnum+0x3e4>
        phost->device.EnumCnt++;
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8013ab6:	3301      	adds	r3, #1
 8013ab8:	b2da      	uxtb	r2, r3
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8013ac6:	2b03      	cmp	r3, #3
 8013ac8:	d903      	bls.n	8013ad2 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	220d      	movs	r2, #13
 8013ace:	701a      	strb	r2, [r3, #0]
      break;
 8013ad0:	e0a0      	b.n	8013c14 <USBH_HandleEnum+0x3e4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	795b      	ldrb	r3, [r3, #5]
 8013ad6:	4619      	mov	r1, r3
 8013ad8:	6878      	ldr	r0, [r7, #4]
 8013ada:	f001 f8fd 	bl	8014cd8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	791b      	ldrb	r3, [r3, #4]
 8013ae2:	4619      	mov	r1, r3
 8013ae4:	6878      	ldr	r0, [r7, #4]
 8013ae6:	f001 f8f7 	bl	8014cd8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	2200      	movs	r2, #0
 8013aee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	2200      	movs	r2, #0
 8013af4:	701a      	strb	r2, [r3, #0]
      break;
 8013af6:	e08d      	b.n	8013c14 <USBH_HandleEnum+0x3e4>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d025      	beq.n	8013b4e <USBH_HandleEnum+0x31e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8013b0e:	23ff      	movs	r3, #255	@ 0xff
 8013b10:	6878      	ldr	r0, [r7, #4]
 8013b12:	f000 f9ce 	bl	8013eb2 <USBH_Get_StringDesc>
 8013b16:	4603      	mov	r3, r0
 8013b18:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8013b1a:	7bbb      	ldrb	r3, [r7, #14]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d109      	bne.n	8013b34 <USBH_HandleEnum+0x304>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	2206      	movs	r2, #6
 8013b24:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8013b26:	2300      	movs	r3, #0
 8013b28:	2200      	movs	r2, #0
 8013b2a:	2105      	movs	r1, #5
 8013b2c:	6878      	ldr	r0, [r7, #4]
 8013b2e:	f000 f91f 	bl	8013d70 <USBH_OS_PutMessage>

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8013b32:	e071      	b.n	8013c18 <USBH_HandleEnum+0x3e8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013b34:	7bbb      	ldrb	r3, [r7, #14]
 8013b36:	2b03      	cmp	r3, #3
 8013b38:	d16e      	bne.n	8013c18 <USBH_HandleEnum+0x3e8>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	2206      	movs	r2, #6
 8013b3e:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8013b40:	2300      	movs	r3, #0
 8013b42:	2200      	movs	r2, #0
 8013b44:	2105      	movs	r1, #5
 8013b46:	6878      	ldr	r0, [r7, #4]
 8013b48:	f000 f912 	bl	8013d70 <USBH_OS_PutMessage>
      break;
 8013b4c:	e064      	b.n	8013c18 <USBH_HandleEnum+0x3e8>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	2206      	movs	r2, #6
 8013b52:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8013b54:	2300      	movs	r3, #0
 8013b56:	2200      	movs	r2, #0
 8013b58:	2105      	movs	r1, #5
 8013b5a:	6878      	ldr	r0, [r7, #4]
 8013b5c:	f000 f908 	bl	8013d70 <USBH_OS_PutMessage>
      break;
 8013b60:	e05a      	b.n	8013c18 <USBH_HandleEnum+0x3e8>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d01f      	beq.n	8013bac <USBH_HandleEnum+0x37c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8013b78:	23ff      	movs	r3, #255	@ 0xff
 8013b7a:	6878      	ldr	r0, [r7, #4]
 8013b7c:	f000 f999 	bl	8013eb2 <USBH_Get_StringDesc>
 8013b80:	4603      	mov	r3, r0
 8013b82:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8013b84:	7bbb      	ldrb	r3, [r7, #14]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d103      	bne.n	8013b92 <USBH_HandleEnum+0x362>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	2207      	movs	r2, #7
 8013b8e:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8013b90:	e044      	b.n	8013c1c <USBH_HandleEnum+0x3ec>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013b92:	7bbb      	ldrb	r3, [r7, #14]
 8013b94:	2b03      	cmp	r3, #3
 8013b96:	d141      	bne.n	8013c1c <USBH_HandleEnum+0x3ec>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	2207      	movs	r2, #7
 8013b9c:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	2200      	movs	r2, #0
 8013ba2:	2105      	movs	r1, #5
 8013ba4:	6878      	ldr	r0, [r7, #4]
 8013ba6:	f000 f8e3 	bl	8013d70 <USBH_OS_PutMessage>
      break;
 8013baa:	e037      	b.n	8013c1c <USBH_HandleEnum+0x3ec>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	2207      	movs	r2, #7
 8013bb0:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	2200      	movs	r2, #0
 8013bb6:	2105      	movs	r1, #5
 8013bb8:	6878      	ldr	r0, [r7, #4]
 8013bba:	f000 f8d9 	bl	8013d70 <USBH_OS_PutMessage>
      break;
 8013bbe:	e02d      	b.n	8013c1c <USBH_HandleEnum+0x3ec>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d017      	beq.n	8013bfa <USBH_HandleEnum+0x3ca>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8013bd6:	23ff      	movs	r3, #255	@ 0xff
 8013bd8:	6878      	ldr	r0, [r7, #4]
 8013bda:	f000 f96a 	bl	8013eb2 <USBH_Get_StringDesc>
 8013bde:	4603      	mov	r3, r0
 8013be0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8013be2:	7bbb      	ldrb	r3, [r7, #14]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d102      	bne.n	8013bee <USBH_HandleEnum+0x3be>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8013be8:	2300      	movs	r3, #0
 8013bea:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8013bec:	e018      	b.n	8013c20 <USBH_HandleEnum+0x3f0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013bee:	7bbb      	ldrb	r3, [r7, #14]
 8013bf0:	2b03      	cmp	r3, #3
 8013bf2:	d115      	bne.n	8013c20 <USBH_HandleEnum+0x3f0>
          Status = USBH_OK;
 8013bf4:	2300      	movs	r3, #0
 8013bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8013bf8:	e012      	b.n	8013c20 <USBH_HandleEnum+0x3f0>
        Status = USBH_OK;
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	73fb      	strb	r3, [r7, #15]
      break;
 8013bfe:	e00f      	b.n	8013c20 <USBH_HandleEnum+0x3f0>

    default:
      break;
 8013c00:	bf00      	nop
 8013c02:	e00e      	b.n	8013c22 <USBH_HandleEnum+0x3f2>
      break;
 8013c04:	bf00      	nop
 8013c06:	e00c      	b.n	8013c22 <USBH_HandleEnum+0x3f2>
      break;
 8013c08:	bf00      	nop
 8013c0a:	e00a      	b.n	8013c22 <USBH_HandleEnum+0x3f2>
      break;
 8013c0c:	bf00      	nop
 8013c0e:	e008      	b.n	8013c22 <USBH_HandleEnum+0x3f2>
      break;
 8013c10:	bf00      	nop
 8013c12:	e006      	b.n	8013c22 <USBH_HandleEnum+0x3f2>
      break;
 8013c14:	bf00      	nop
 8013c16:	e004      	b.n	8013c22 <USBH_HandleEnum+0x3f2>
      break;
 8013c18:	bf00      	nop
 8013c1a:	e002      	b.n	8013c22 <USBH_HandleEnum+0x3f2>
      break;
 8013c1c:	bf00      	nop
 8013c1e:	e000      	b.n	8013c22 <USBH_HandleEnum+0x3f2>
      break;
 8013c20:	bf00      	nop
  }
  return Status;
 8013c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c24:	4618      	mov	r0, r3
 8013c26:	3710      	adds	r7, #16
 8013c28:	46bd      	mov	sp, r7
 8013c2a:	bd80      	pop	{r7, pc}

08013c2c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8013c2c:	b480      	push	{r7}
 8013c2e:	b083      	sub	sp, #12
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	6078      	str	r0, [r7, #4]
 8013c34:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	683a      	ldr	r2, [r7, #0]
 8013c3a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8013c3e:	bf00      	nop
 8013c40:	370c      	adds	r7, #12
 8013c42:	46bd      	mov	sp, r7
 8013c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c48:	4770      	bx	lr

08013c4a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8013c4a:	b580      	push	{r7, lr}
 8013c4c:	b082      	sub	sp, #8
 8013c4e:	af00      	add	r7, sp, #0
 8013c50:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8013c58:	1c5a      	adds	r2, r3, #1
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8013c60:	6878      	ldr	r0, [r7, #4]
 8013c62:	f000 f804 	bl	8013c6e <USBH_HandleSof>
}
 8013c66:	bf00      	nop
 8013c68:	3708      	adds	r7, #8
 8013c6a:	46bd      	mov	sp, r7
 8013c6c:	bd80      	pop	{r7, pc}

08013c6e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8013c6e:	b580      	push	{r7, lr}
 8013c70:	b082      	sub	sp, #8
 8013c72:	af00      	add	r7, sp, #0
 8013c74:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	781b      	ldrb	r3, [r3, #0]
 8013c7a:	b2db      	uxtb	r3, r3
 8013c7c:	2b0b      	cmp	r3, #11
 8013c7e:	d10a      	bne.n	8013c96 <USBH_HandleSof+0x28>
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d005      	beq.n	8013c96 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8013c90:	699b      	ldr	r3, [r3, #24]
 8013c92:	6878      	ldr	r0, [r7, #4]
 8013c94:	4798      	blx	r3
  }
}
 8013c96:	bf00      	nop
 8013c98:	3708      	adds	r7, #8
 8013c9a:	46bd      	mov	sp, r7
 8013c9c:	bd80      	pop	{r7, pc}

08013c9e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8013c9e:	b580      	push	{r7, lr}
 8013ca0:	b082      	sub	sp, #8
 8013ca2:	af00      	add	r7, sp, #0
 8013ca4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	2201      	movs	r2, #1
 8013caa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8013cae:	2300      	movs	r3, #0
 8013cb0:	2200      	movs	r2, #0
 8013cb2:	2101      	movs	r1, #1
 8013cb4:	6878      	ldr	r0, [r7, #4]
 8013cb6:	f000 f85b 	bl	8013d70 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 8013cba:	bf00      	nop
}
 8013cbc:	3708      	adds	r7, #8
 8013cbe:	46bd      	mov	sp, r7
 8013cc0:	bd80      	pop	{r7, pc}

08013cc2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8013cc2:	b480      	push	{r7}
 8013cc4:	b083      	sub	sp, #12
 8013cc6:	af00      	add	r7, sp, #0
 8013cc8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	2200      	movs	r2, #0
 8013cce:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	2201      	movs	r2, #1
 8013cd6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8013cda:	bf00      	nop
}
 8013cdc:	370c      	adds	r7, #12
 8013cde:	46bd      	mov	sp, r7
 8013ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ce4:	4770      	bx	lr

08013ce6 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8013ce6:	b580      	push	{r7, lr}
 8013ce8:	b082      	sub	sp, #8
 8013cea:	af00      	add	r7, sp, #0
 8013cec:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	2201      	movs	r2, #1
 8013cf2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	2200      	movs	r2, #0
 8013cfa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	2200      	movs	r2, #0
 8013d02:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8013d06:	2300      	movs	r3, #0
 8013d08:	2200      	movs	r2, #0
 8013d0a:	2101      	movs	r1, #1
 8013d0c:	6878      	ldr	r0, [r7, #4]
 8013d0e:	f000 f82f 	bl	8013d70 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8013d12:	2300      	movs	r3, #0
}
 8013d14:	4618      	mov	r0, r3
 8013d16:	3708      	adds	r7, #8
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	bd80      	pop	{r7, pc}

08013d1c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8013d1c:	b580      	push	{r7, lr}
 8013d1e:	b082      	sub	sp, #8
 8013d20:	af00      	add	r7, sp, #0
 8013d22:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	2201      	movs	r2, #1
 8013d28:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	2200      	movs	r2, #0
 8013d30:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	2200      	movs	r2, #0
 8013d38:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8013d3c:	6878      	ldr	r0, [r7, #4]
 8013d3e:	f007 f87a 	bl	801ae36 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	791b      	ldrb	r3, [r3, #4]
 8013d46:	4619      	mov	r1, r3
 8013d48:	6878      	ldr	r0, [r7, #4]
 8013d4a:	f000 ffc5 	bl	8014cd8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	795b      	ldrb	r3, [r3, #5]
 8013d52:	4619      	mov	r1, r3
 8013d54:	6878      	ldr	r0, [r7, #4]
 8013d56:	f000 ffbf 	bl	8014cd8 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	2200      	movs	r2, #0
 8013d5e:	2101      	movs	r1, #1
 8013d60:	6878      	ldr	r0, [r7, #4]
 8013d62:	f000 f805 	bl	8013d70 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8013d66:	2300      	movs	r3, #0
}
 8013d68:	4618      	mov	r0, r3
 8013d6a:	3708      	adds	r7, #8
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	bd80      	pop	{r7, pc}

08013d70 <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 8013d70:	b580      	push	{r7, lr}
 8013d72:	b086      	sub	sp, #24
 8013d74:	af00      	add	r7, sp, #0
 8013d76:	60f8      	str	r0, [r7, #12]
 8013d78:	607a      	str	r2, [r7, #4]
 8013d7a:	603b      	str	r3, [r7, #0]
 8013d7c:	460b      	mov	r3, r1
 8013d7e:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 8013d80:	7afa      	ldrb	r2, [r7, #11]
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  UNUSED(priority);

  /* Calculate the number of available spaces */
  uint32_t available_spaces = MSGQUEUE_OBJECTS - osMessageWaiting(phost->os_event);
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 8013d8e:	4618      	mov	r0, r3
 8013d90:	f004 f920 	bl	8017fd4 <osMessageWaiting>
 8013d94:	4603      	mov	r3, r0
 8013d96:	f1c3 0310 	rsb	r3, r3, #16
 8013d9a:	617b      	str	r3, [r7, #20]

  if (available_spaces != 0U)
 8013d9c:	697b      	ldr	r3, [r7, #20]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d009      	beq.n	8013db6 <USBH_OS_PutMessage+0x46>
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8013dae:	687a      	ldr	r2, [r7, #4]
 8013db0:	4619      	mov	r1, r3
 8013db2:	f004 f85b 	bl	8017e6c <osMessagePut>
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
  }
#endif /* (osCMSIS < 0x20000U) */
}
 8013db6:	bf00      	nop
 8013db8:	3718      	adds	r7, #24
 8013dba:	46bd      	mov	sp, r7
 8013dbc:	bd80      	pop	{r7, pc}

08013dbe <USBH_Process_OS>:
  * @param  pvParameters not used
  * @retval None
  */
#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8013dbe:	b580      	push	{r7, lr}
 8013dc0:	b086      	sub	sp, #24
 8013dc2:	af00      	add	r7, sp, #0
 8013dc4:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 8013dcc:	f107 030c 	add.w	r3, r7, #12
 8013dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	f004 f889 	bl	8017eec <osMessageGet>
    if (event.status == osEventMessage)
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	2b10      	cmp	r3, #16
 8013dde:	d1f2      	bne.n	8013dc6 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8013de0:	6878      	ldr	r0, [r7, #4]
 8013de2:	f7ff fb0b 	bl	80133fc <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8013de6:	e7ee      	b.n	8013dc6 <USBH_Process_OS+0x8>

08013de8 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b082      	sub	sp, #8
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8013df0:	2300      	movs	r3, #0
 8013df2:	2200      	movs	r2, #0
 8013df4:	2101      	movs	r1, #1
 8013df6:	6878      	ldr	r0, [r7, #4]
 8013df8:	f7ff ffba 	bl	8013d70 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8013dfc:	2300      	movs	r3, #0
}
 8013dfe:	4618      	mov	r0, r3
 8013e00:	3708      	adds	r7, #8
 8013e02:	46bd      	mov	sp, r7
 8013e04:	bd80      	pop	{r7, pc}

08013e06 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8013e06:	b580      	push	{r7, lr}
 8013e08:	b086      	sub	sp, #24
 8013e0a:	af02      	add	r7, sp, #8
 8013e0c:	6078      	str	r0, [r7, #4]
 8013e0e:	460b      	mov	r3, r1
 8013e10:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8013e12:	887b      	ldrh	r3, [r7, #2]
 8013e14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013e18:	d901      	bls.n	8013e1e <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8013e1a:	2303      	movs	r3, #3
 8013e1c:	e01b      	b.n	8013e56 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8013e24:	887b      	ldrh	r3, [r7, #2]
 8013e26:	9300      	str	r3, [sp, #0]
 8013e28:	4613      	mov	r3, r2
 8013e2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013e2e:	2100      	movs	r1, #0
 8013e30:	6878      	ldr	r0, [r7, #4]
 8013e32:	f000 f872 	bl	8013f1a <USBH_GetDescriptor>
 8013e36:	4603      	mov	r3, r0
 8013e38:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8013e3a:	7bfb      	ldrb	r3, [r7, #15]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d109      	bne.n	8013e54 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8013e46:	887a      	ldrh	r2, [r7, #2]
 8013e48:	4619      	mov	r1, r3
 8013e4a:	6878      	ldr	r0, [r7, #4]
 8013e4c:	f000 f92a 	bl	80140a4 <USBH_ParseDevDesc>
 8013e50:	4603      	mov	r3, r0
 8013e52:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8013e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e56:	4618      	mov	r0, r3
 8013e58:	3710      	adds	r7, #16
 8013e5a:	46bd      	mov	sp, r7
 8013e5c:	bd80      	pop	{r7, pc}

08013e5e <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8013e5e:	b580      	push	{r7, lr}
 8013e60:	b086      	sub	sp, #24
 8013e62:	af02      	add	r7, sp, #8
 8013e64:	6078      	str	r0, [r7, #4]
 8013e66:	460b      	mov	r3, r1
 8013e68:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	331c      	adds	r3, #28
 8013e6e:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8013e70:	887b      	ldrh	r3, [r7, #2]
 8013e72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013e76:	d901      	bls.n	8013e7c <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8013e78:	2303      	movs	r3, #3
 8013e7a:	e016      	b.n	8013eaa <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8013e7c:	887b      	ldrh	r3, [r7, #2]
 8013e7e:	9300      	str	r3, [sp, #0]
 8013e80:	68bb      	ldr	r3, [r7, #8]
 8013e82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013e86:	2100      	movs	r1, #0
 8013e88:	6878      	ldr	r0, [r7, #4]
 8013e8a:	f000 f846 	bl	8013f1a <USBH_GetDescriptor>
 8013e8e:	4603      	mov	r3, r0
 8013e90:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8013e92:	7bfb      	ldrb	r3, [r7, #15]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d107      	bne.n	8013ea8 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8013e98:	887b      	ldrh	r3, [r7, #2]
 8013e9a:	461a      	mov	r2, r3
 8013e9c:	68b9      	ldr	r1, [r7, #8]
 8013e9e:	6878      	ldr	r0, [r7, #4]
 8013ea0:	f000 f9b0 	bl	8014204 <USBH_ParseCfgDesc>
 8013ea4:	4603      	mov	r3, r0
 8013ea6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8013ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8013eaa:	4618      	mov	r0, r3
 8013eac:	3710      	adds	r7, #16
 8013eae:	46bd      	mov	sp, r7
 8013eb0:	bd80      	pop	{r7, pc}

08013eb2 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8013eb2:	b580      	push	{r7, lr}
 8013eb4:	b088      	sub	sp, #32
 8013eb6:	af02      	add	r7, sp, #8
 8013eb8:	60f8      	str	r0, [r7, #12]
 8013eba:	607a      	str	r2, [r7, #4]
 8013ebc:	461a      	mov	r2, r3
 8013ebe:	460b      	mov	r3, r1
 8013ec0:	72fb      	strb	r3, [r7, #11]
 8013ec2:	4613      	mov	r3, r2
 8013ec4:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8013ec6:	893b      	ldrh	r3, [r7, #8]
 8013ec8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013ecc:	d802      	bhi.n	8013ed4 <USBH_Get_StringDesc+0x22>
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d101      	bne.n	8013ed8 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8013ed4:	2303      	movs	r3, #3
 8013ed6:	e01c      	b.n	8013f12 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8013ed8:	7afb      	ldrb	r3, [r7, #11]
 8013eda:	b29b      	uxth	r3, r3
 8013edc:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8013ee0:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8013ee8:	893b      	ldrh	r3, [r7, #8]
 8013eea:	9300      	str	r3, [sp, #0]
 8013eec:	460b      	mov	r3, r1
 8013eee:	2100      	movs	r1, #0
 8013ef0:	68f8      	ldr	r0, [r7, #12]
 8013ef2:	f000 f812 	bl	8013f1a <USBH_GetDescriptor>
 8013ef6:	4603      	mov	r3, r0
 8013ef8:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8013efa:	7dfb      	ldrb	r3, [r7, #23]
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d107      	bne.n	8013f10 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8013f06:	893a      	ldrh	r2, [r7, #8]
 8013f08:	6879      	ldr	r1, [r7, #4]
 8013f0a:	4618      	mov	r0, r3
 8013f0c:	f000 fb8d 	bl	801462a <USBH_ParseStringDesc>
  }

  return status;
 8013f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f12:	4618      	mov	r0, r3
 8013f14:	3718      	adds	r7, #24
 8013f16:	46bd      	mov	sp, r7
 8013f18:	bd80      	pop	{r7, pc}

08013f1a <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8013f1a:	b580      	push	{r7, lr}
 8013f1c:	b084      	sub	sp, #16
 8013f1e:	af00      	add	r7, sp, #0
 8013f20:	60f8      	str	r0, [r7, #12]
 8013f22:	607b      	str	r3, [r7, #4]
 8013f24:	460b      	mov	r3, r1
 8013f26:	72fb      	strb	r3, [r7, #11]
 8013f28:	4613      	mov	r3, r2
 8013f2a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	789b      	ldrb	r3, [r3, #2]
 8013f30:	2b01      	cmp	r3, #1
 8013f32:	d11c      	bne.n	8013f6e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8013f34:	7afb      	ldrb	r3, [r7, #11]
 8013f36:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013f3a:	b2da      	uxtb	r2, r3
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	2206      	movs	r2, #6
 8013f44:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	893a      	ldrh	r2, [r7, #8]
 8013f4a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8013f4c:	893b      	ldrh	r3, [r7, #8]
 8013f4e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013f52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8013f56:	d104      	bne.n	8013f62 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	f240 4209 	movw	r2, #1033	@ 0x409
 8013f5e:	829a      	strh	r2, [r3, #20]
 8013f60:	e002      	b.n	8013f68 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	2200      	movs	r2, #0
 8013f66:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	8b3a      	ldrh	r2, [r7, #24]
 8013f6c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8013f6e:	8b3b      	ldrh	r3, [r7, #24]
 8013f70:	461a      	mov	r2, r3
 8013f72:	6879      	ldr	r1, [r7, #4]
 8013f74:	68f8      	ldr	r0, [r7, #12]
 8013f76:	f000 fba5 	bl	80146c4 <USBH_CtlReq>
 8013f7a:	4603      	mov	r3, r0
}
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	3710      	adds	r7, #16
 8013f80:	46bd      	mov	sp, r7
 8013f82:	bd80      	pop	{r7, pc}

08013f84 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8013f84:	b580      	push	{r7, lr}
 8013f86:	b082      	sub	sp, #8
 8013f88:	af00      	add	r7, sp, #0
 8013f8a:	6078      	str	r0, [r7, #4]
 8013f8c:	460b      	mov	r3, r1
 8013f8e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	789b      	ldrb	r3, [r3, #2]
 8013f94:	2b01      	cmp	r3, #1
 8013f96:	d10f      	bne.n	8013fb8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	2200      	movs	r2, #0
 8013f9c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	2205      	movs	r2, #5
 8013fa2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8013fa4:	78fb      	ldrb	r3, [r7, #3]
 8013fa6:	b29a      	uxth	r2, r3
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	2200      	movs	r2, #0
 8013fb0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	2200      	movs	r2, #0
 8013fb6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8013fb8:	2200      	movs	r2, #0
 8013fba:	2100      	movs	r1, #0
 8013fbc:	6878      	ldr	r0, [r7, #4]
 8013fbe:	f000 fb81 	bl	80146c4 <USBH_CtlReq>
 8013fc2:	4603      	mov	r3, r0
}
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	3708      	adds	r7, #8
 8013fc8:	46bd      	mov	sp, r7
 8013fca:	bd80      	pop	{r7, pc}

08013fcc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8013fcc:	b580      	push	{r7, lr}
 8013fce:	b082      	sub	sp, #8
 8013fd0:	af00      	add	r7, sp, #0
 8013fd2:	6078      	str	r0, [r7, #4]
 8013fd4:	460b      	mov	r3, r1
 8013fd6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	789b      	ldrb	r3, [r3, #2]
 8013fdc:	2b01      	cmp	r3, #1
 8013fde:	d10e      	bne.n	8013ffe <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	2200      	movs	r2, #0
 8013fe4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	2209      	movs	r2, #9
 8013fea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	887a      	ldrh	r2, [r7, #2]
 8013ff0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	2200      	movs	r2, #0
 8013ff6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	2200      	movs	r2, #0
 8013ffc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8013ffe:	2200      	movs	r2, #0
 8014000:	2100      	movs	r1, #0
 8014002:	6878      	ldr	r0, [r7, #4]
 8014004:	f000 fb5e 	bl	80146c4 <USBH_CtlReq>
 8014008:	4603      	mov	r3, r0
}
 801400a:	4618      	mov	r0, r3
 801400c:	3708      	adds	r7, #8
 801400e:	46bd      	mov	sp, r7
 8014010:	bd80      	pop	{r7, pc}

08014012 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8014012:	b580      	push	{r7, lr}
 8014014:	b082      	sub	sp, #8
 8014016:	af00      	add	r7, sp, #0
 8014018:	6078      	str	r0, [r7, #4]
 801401a:	460b      	mov	r3, r1
 801401c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	789b      	ldrb	r3, [r3, #2]
 8014022:	2b01      	cmp	r3, #1
 8014024:	d10f      	bne.n	8014046 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	2200      	movs	r2, #0
 801402a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	2203      	movs	r2, #3
 8014030:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8014032:	78fb      	ldrb	r3, [r7, #3]
 8014034:	b29a      	uxth	r2, r3
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	2200      	movs	r2, #0
 801403e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	2200      	movs	r2, #0
 8014044:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8014046:	2200      	movs	r2, #0
 8014048:	2100      	movs	r1, #0
 801404a:	6878      	ldr	r0, [r7, #4]
 801404c:	f000 fb3a 	bl	80146c4 <USBH_CtlReq>
 8014050:	4603      	mov	r3, r0
}
 8014052:	4618      	mov	r0, r3
 8014054:	3708      	adds	r7, #8
 8014056:	46bd      	mov	sp, r7
 8014058:	bd80      	pop	{r7, pc}

0801405a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 801405a:	b580      	push	{r7, lr}
 801405c:	b082      	sub	sp, #8
 801405e:	af00      	add	r7, sp, #0
 8014060:	6078      	str	r0, [r7, #4]
 8014062:	460b      	mov	r3, r1
 8014064:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	789b      	ldrb	r3, [r3, #2]
 801406a:	2b01      	cmp	r3, #1
 801406c:	d10f      	bne.n	801408e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	2202      	movs	r2, #2
 8014072:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	2201      	movs	r2, #1
 8014078:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	2200      	movs	r2, #0
 801407e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8014080:	78fb      	ldrb	r3, [r7, #3]
 8014082:	b29a      	uxth	r2, r3
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	2200      	movs	r2, #0
 801408c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801408e:	2200      	movs	r2, #0
 8014090:	2100      	movs	r1, #0
 8014092:	6878      	ldr	r0, [r7, #4]
 8014094:	f000 fb16 	bl	80146c4 <USBH_CtlReq>
 8014098:	4603      	mov	r3, r0
}
 801409a:	4618      	mov	r0, r3
 801409c:	3708      	adds	r7, #8
 801409e:	46bd      	mov	sp, r7
 80140a0:	bd80      	pop	{r7, pc}
	...

080140a4 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80140a4:	b480      	push	{r7}
 80140a6:	b087      	sub	sp, #28
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	60f8      	str	r0, [r7, #12]
 80140ac:	60b9      	str	r1, [r7, #8]
 80140ae:	4613      	mov	r3, r2
 80140b0:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80140b2:	68fb      	ldr	r3, [r7, #12]
 80140b4:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80140b8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80140ba:	2300      	movs	r3, #0
 80140bc:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80140be:	68bb      	ldr	r3, [r7, #8]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d101      	bne.n	80140c8 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80140c4:	2302      	movs	r3, #2
 80140c6:	e094      	b.n	80141f2 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80140c8:	68bb      	ldr	r3, [r7, #8]
 80140ca:	781a      	ldrb	r2, [r3, #0]
 80140cc:	693b      	ldr	r3, [r7, #16]
 80140ce:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80140d0:	68bb      	ldr	r3, [r7, #8]
 80140d2:	785a      	ldrb	r2, [r3, #1]
 80140d4:	693b      	ldr	r3, [r7, #16]
 80140d6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80140d8:	68bb      	ldr	r3, [r7, #8]
 80140da:	3302      	adds	r3, #2
 80140dc:	781b      	ldrb	r3, [r3, #0]
 80140de:	461a      	mov	r2, r3
 80140e0:	68bb      	ldr	r3, [r7, #8]
 80140e2:	3303      	adds	r3, #3
 80140e4:	781b      	ldrb	r3, [r3, #0]
 80140e6:	021b      	lsls	r3, r3, #8
 80140e8:	b29b      	uxth	r3, r3
 80140ea:	4313      	orrs	r3, r2
 80140ec:	b29a      	uxth	r2, r3
 80140ee:	693b      	ldr	r3, [r7, #16]
 80140f0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80140f2:	68bb      	ldr	r3, [r7, #8]
 80140f4:	791a      	ldrb	r2, [r3, #4]
 80140f6:	693b      	ldr	r3, [r7, #16]
 80140f8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80140fa:	68bb      	ldr	r3, [r7, #8]
 80140fc:	795a      	ldrb	r2, [r3, #5]
 80140fe:	693b      	ldr	r3, [r7, #16]
 8014100:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8014102:	68bb      	ldr	r3, [r7, #8]
 8014104:	799a      	ldrb	r2, [r3, #6]
 8014106:	693b      	ldr	r3, [r7, #16]
 8014108:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 801410a:	68bb      	ldr	r3, [r7, #8]
 801410c:	79da      	ldrb	r2, [r3, #7]
 801410e:	693b      	ldr	r3, [r7, #16]
 8014110:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8014118:	2b00      	cmp	r3, #0
 801411a:	d004      	beq.n	8014126 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 801411c:	68fb      	ldr	r3, [r7, #12]
 801411e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8014122:	2b01      	cmp	r3, #1
 8014124:	d11b      	bne.n	801415e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8014126:	693b      	ldr	r3, [r7, #16]
 8014128:	79db      	ldrb	r3, [r3, #7]
 801412a:	2b20      	cmp	r3, #32
 801412c:	dc0f      	bgt.n	801414e <USBH_ParseDevDesc+0xaa>
 801412e:	2b08      	cmp	r3, #8
 8014130:	db0f      	blt.n	8014152 <USBH_ParseDevDesc+0xae>
 8014132:	3b08      	subs	r3, #8
 8014134:	4a32      	ldr	r2, [pc, #200]	@ (8014200 <USBH_ParseDevDesc+0x15c>)
 8014136:	fa22 f303 	lsr.w	r3, r2, r3
 801413a:	f003 0301 	and.w	r3, r3, #1
 801413e:	2b00      	cmp	r3, #0
 8014140:	bf14      	ite	ne
 8014142:	2301      	movne	r3, #1
 8014144:	2300      	moveq	r3, #0
 8014146:	b2db      	uxtb	r3, r3
 8014148:	2b00      	cmp	r3, #0
 801414a:	d106      	bne.n	801415a <USBH_ParseDevDesc+0xb6>
 801414c:	e001      	b.n	8014152 <USBH_ParseDevDesc+0xae>
 801414e:	2b40      	cmp	r3, #64	@ 0x40
 8014150:	d003      	beq.n	801415a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8014152:	693b      	ldr	r3, [r7, #16]
 8014154:	2208      	movs	r2, #8
 8014156:	71da      	strb	r2, [r3, #7]
        break;
 8014158:	e000      	b.n	801415c <USBH_ParseDevDesc+0xb8>
        break;
 801415a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 801415c:	e00e      	b.n	801417c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8014164:	2b02      	cmp	r3, #2
 8014166:	d107      	bne.n	8014178 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8014168:	693b      	ldr	r3, [r7, #16]
 801416a:	79db      	ldrb	r3, [r3, #7]
 801416c:	2b08      	cmp	r3, #8
 801416e:	d005      	beq.n	801417c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8014170:	693b      	ldr	r3, [r7, #16]
 8014172:	2208      	movs	r2, #8
 8014174:	71da      	strb	r2, [r3, #7]
 8014176:	e001      	b.n	801417c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8014178:	2303      	movs	r3, #3
 801417a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 801417c:	88fb      	ldrh	r3, [r7, #6]
 801417e:	2b08      	cmp	r3, #8
 8014180:	d936      	bls.n	80141f0 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8014182:	68bb      	ldr	r3, [r7, #8]
 8014184:	3308      	adds	r3, #8
 8014186:	781b      	ldrb	r3, [r3, #0]
 8014188:	461a      	mov	r2, r3
 801418a:	68bb      	ldr	r3, [r7, #8]
 801418c:	3309      	adds	r3, #9
 801418e:	781b      	ldrb	r3, [r3, #0]
 8014190:	021b      	lsls	r3, r3, #8
 8014192:	b29b      	uxth	r3, r3
 8014194:	4313      	orrs	r3, r2
 8014196:	b29a      	uxth	r2, r3
 8014198:	693b      	ldr	r3, [r7, #16]
 801419a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 801419c:	68bb      	ldr	r3, [r7, #8]
 801419e:	330a      	adds	r3, #10
 80141a0:	781b      	ldrb	r3, [r3, #0]
 80141a2:	461a      	mov	r2, r3
 80141a4:	68bb      	ldr	r3, [r7, #8]
 80141a6:	330b      	adds	r3, #11
 80141a8:	781b      	ldrb	r3, [r3, #0]
 80141aa:	021b      	lsls	r3, r3, #8
 80141ac:	b29b      	uxth	r3, r3
 80141ae:	4313      	orrs	r3, r2
 80141b0:	b29a      	uxth	r2, r3
 80141b2:	693b      	ldr	r3, [r7, #16]
 80141b4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80141b6:	68bb      	ldr	r3, [r7, #8]
 80141b8:	330c      	adds	r3, #12
 80141ba:	781b      	ldrb	r3, [r3, #0]
 80141bc:	461a      	mov	r2, r3
 80141be:	68bb      	ldr	r3, [r7, #8]
 80141c0:	330d      	adds	r3, #13
 80141c2:	781b      	ldrb	r3, [r3, #0]
 80141c4:	021b      	lsls	r3, r3, #8
 80141c6:	b29b      	uxth	r3, r3
 80141c8:	4313      	orrs	r3, r2
 80141ca:	b29a      	uxth	r2, r3
 80141cc:	693b      	ldr	r3, [r7, #16]
 80141ce:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80141d0:	68bb      	ldr	r3, [r7, #8]
 80141d2:	7b9a      	ldrb	r2, [r3, #14]
 80141d4:	693b      	ldr	r3, [r7, #16]
 80141d6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80141d8:	68bb      	ldr	r3, [r7, #8]
 80141da:	7bda      	ldrb	r2, [r3, #15]
 80141dc:	693b      	ldr	r3, [r7, #16]
 80141de:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80141e0:	68bb      	ldr	r3, [r7, #8]
 80141e2:	7c1a      	ldrb	r2, [r3, #16]
 80141e4:	693b      	ldr	r3, [r7, #16]
 80141e6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80141e8:	68bb      	ldr	r3, [r7, #8]
 80141ea:	7c5a      	ldrb	r2, [r3, #17]
 80141ec:	693b      	ldr	r3, [r7, #16]
 80141ee:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80141f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80141f2:	4618      	mov	r0, r3
 80141f4:	371c      	adds	r7, #28
 80141f6:	46bd      	mov	sp, r7
 80141f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141fc:	4770      	bx	lr
 80141fe:	bf00      	nop
 8014200:	01000101 	.word	0x01000101

08014204 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8014204:	b580      	push	{r7, lr}
 8014206:	b08c      	sub	sp, #48	@ 0x30
 8014208:	af00      	add	r7, sp, #0
 801420a:	60f8      	str	r0, [r7, #12]
 801420c:	60b9      	str	r1, [r7, #8]
 801420e:	4613      	mov	r3, r2
 8014210:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8014218:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 801421a:	2300      	movs	r3, #0
 801421c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8014220:	2300      	movs	r3, #0
 8014222:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8014226:	2300      	movs	r3, #0
 8014228:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 801422c:	68bb      	ldr	r3, [r7, #8]
 801422e:	2b00      	cmp	r3, #0
 8014230:	d101      	bne.n	8014236 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8014232:	2302      	movs	r3, #2
 8014234:	e0de      	b.n	80143f4 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8014236:	68bb      	ldr	r3, [r7, #8]
 8014238:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 801423a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801423c:	781b      	ldrb	r3, [r3, #0]
 801423e:	2b09      	cmp	r3, #9
 8014240:	d002      	beq.n	8014248 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8014242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014244:	2209      	movs	r2, #9
 8014246:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8014248:	68bb      	ldr	r3, [r7, #8]
 801424a:	781a      	ldrb	r2, [r3, #0]
 801424c:	6a3b      	ldr	r3, [r7, #32]
 801424e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8014250:	68bb      	ldr	r3, [r7, #8]
 8014252:	785a      	ldrb	r2, [r3, #1]
 8014254:	6a3b      	ldr	r3, [r7, #32]
 8014256:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8014258:	68bb      	ldr	r3, [r7, #8]
 801425a:	3302      	adds	r3, #2
 801425c:	781b      	ldrb	r3, [r3, #0]
 801425e:	461a      	mov	r2, r3
 8014260:	68bb      	ldr	r3, [r7, #8]
 8014262:	3303      	adds	r3, #3
 8014264:	781b      	ldrb	r3, [r3, #0]
 8014266:	021b      	lsls	r3, r3, #8
 8014268:	b29b      	uxth	r3, r3
 801426a:	4313      	orrs	r3, r2
 801426c:	b29b      	uxth	r3, r3
 801426e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014272:	bf28      	it	cs
 8014274:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8014278:	b29a      	uxth	r2, r3
 801427a:	6a3b      	ldr	r3, [r7, #32]
 801427c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 801427e:	68bb      	ldr	r3, [r7, #8]
 8014280:	791a      	ldrb	r2, [r3, #4]
 8014282:	6a3b      	ldr	r3, [r7, #32]
 8014284:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8014286:	68bb      	ldr	r3, [r7, #8]
 8014288:	795a      	ldrb	r2, [r3, #5]
 801428a:	6a3b      	ldr	r3, [r7, #32]
 801428c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 801428e:	68bb      	ldr	r3, [r7, #8]
 8014290:	799a      	ldrb	r2, [r3, #6]
 8014292:	6a3b      	ldr	r3, [r7, #32]
 8014294:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8014296:	68bb      	ldr	r3, [r7, #8]
 8014298:	79da      	ldrb	r2, [r3, #7]
 801429a:	6a3b      	ldr	r3, [r7, #32]
 801429c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 801429e:	68bb      	ldr	r3, [r7, #8]
 80142a0:	7a1a      	ldrb	r2, [r3, #8]
 80142a2:	6a3b      	ldr	r3, [r7, #32]
 80142a4:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80142a6:	88fb      	ldrh	r3, [r7, #6]
 80142a8:	2b09      	cmp	r3, #9
 80142aa:	f240 80a1 	bls.w	80143f0 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 80142ae:	2309      	movs	r3, #9
 80142b0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80142b2:	2300      	movs	r3, #0
 80142b4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80142b6:	e085      	b.n	80143c4 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80142b8:	f107 0316 	add.w	r3, r7, #22
 80142bc:	4619      	mov	r1, r3
 80142be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80142c0:	f000 f9e6 	bl	8014690 <USBH_GetNextDesc>
 80142c4:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80142c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142c8:	785b      	ldrb	r3, [r3, #1]
 80142ca:	2b04      	cmp	r3, #4
 80142cc:	d17a      	bne.n	80143c4 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80142ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142d0:	781b      	ldrb	r3, [r3, #0]
 80142d2:	2b09      	cmp	r3, #9
 80142d4:	d002      	beq.n	80142dc <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80142d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142d8:	2209      	movs	r2, #9
 80142da:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80142dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80142e0:	221a      	movs	r2, #26
 80142e2:	fb02 f303 	mul.w	r3, r2, r3
 80142e6:	3308      	adds	r3, #8
 80142e8:	6a3a      	ldr	r2, [r7, #32]
 80142ea:	4413      	add	r3, r2
 80142ec:	3302      	adds	r3, #2
 80142ee:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80142f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80142f2:	69f8      	ldr	r0, [r7, #28]
 80142f4:	f000 f882 	bl	80143fc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80142f8:	2300      	movs	r3, #0
 80142fa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80142fe:	2300      	movs	r3, #0
 8014300:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8014302:	e043      	b.n	801438c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8014304:	f107 0316 	add.w	r3, r7, #22
 8014308:	4619      	mov	r1, r3
 801430a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801430c:	f000 f9c0 	bl	8014690 <USBH_GetNextDesc>
 8014310:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8014312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014314:	785b      	ldrb	r3, [r3, #1]
 8014316:	2b05      	cmp	r3, #5
 8014318:	d138      	bne.n	801438c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 801431a:	69fb      	ldr	r3, [r7, #28]
 801431c:	795b      	ldrb	r3, [r3, #5]
 801431e:	2b01      	cmp	r3, #1
 8014320:	d113      	bne.n	801434a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8014322:	69fb      	ldr	r3, [r7, #28]
 8014324:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8014326:	2b02      	cmp	r3, #2
 8014328:	d003      	beq.n	8014332 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 801432a:	69fb      	ldr	r3, [r7, #28]
 801432c:	799b      	ldrb	r3, [r3, #6]
 801432e:	2b03      	cmp	r3, #3
 8014330:	d10b      	bne.n	801434a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8014332:	69fb      	ldr	r3, [r7, #28]
 8014334:	79db      	ldrb	r3, [r3, #7]
 8014336:	2b00      	cmp	r3, #0
 8014338:	d10b      	bne.n	8014352 <USBH_ParseCfgDesc+0x14e>
 801433a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801433c:	781b      	ldrb	r3, [r3, #0]
 801433e:	2b09      	cmp	r3, #9
 8014340:	d007      	beq.n	8014352 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8014342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014344:	2209      	movs	r2, #9
 8014346:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8014348:	e003      	b.n	8014352 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 801434a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801434c:	2207      	movs	r2, #7
 801434e:	701a      	strb	r2, [r3, #0]
 8014350:	e000      	b.n	8014354 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8014352:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8014354:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014358:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801435c:	3201      	adds	r2, #1
 801435e:	00d2      	lsls	r2, r2, #3
 8014360:	211a      	movs	r1, #26
 8014362:	fb01 f303 	mul.w	r3, r1, r3
 8014366:	4413      	add	r3, r2
 8014368:	3308      	adds	r3, #8
 801436a:	6a3a      	ldr	r2, [r7, #32]
 801436c:	4413      	add	r3, r2
 801436e:	3304      	adds	r3, #4
 8014370:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8014372:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014374:	69b9      	ldr	r1, [r7, #24]
 8014376:	68f8      	ldr	r0, [r7, #12]
 8014378:	f000 f86f 	bl	801445a <USBH_ParseEPDesc>
 801437c:	4603      	mov	r3, r0
 801437e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8014382:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014386:	3301      	adds	r3, #1
 8014388:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 801438c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014390:	2b01      	cmp	r3, #1
 8014392:	d80a      	bhi.n	80143aa <USBH_ParseCfgDesc+0x1a6>
 8014394:	69fb      	ldr	r3, [r7, #28]
 8014396:	791b      	ldrb	r3, [r3, #4]
 8014398:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801439c:	429a      	cmp	r2, r3
 801439e:	d204      	bcs.n	80143aa <USBH_ParseCfgDesc+0x1a6>
 80143a0:	6a3b      	ldr	r3, [r7, #32]
 80143a2:	885a      	ldrh	r2, [r3, #2]
 80143a4:	8afb      	ldrh	r3, [r7, #22]
 80143a6:	429a      	cmp	r2, r3
 80143a8:	d8ac      	bhi.n	8014304 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80143aa:	69fb      	ldr	r3, [r7, #28]
 80143ac:	791b      	ldrb	r3, [r3, #4]
 80143ae:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80143b2:	429a      	cmp	r2, r3
 80143b4:	d201      	bcs.n	80143ba <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 80143b6:	2303      	movs	r3, #3
 80143b8:	e01c      	b.n	80143f4 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 80143ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80143be:	3301      	adds	r3, #1
 80143c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80143c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80143c8:	2b01      	cmp	r3, #1
 80143ca:	d805      	bhi.n	80143d8 <USBH_ParseCfgDesc+0x1d4>
 80143cc:	6a3b      	ldr	r3, [r7, #32]
 80143ce:	885a      	ldrh	r2, [r3, #2]
 80143d0:	8afb      	ldrh	r3, [r7, #22]
 80143d2:	429a      	cmp	r2, r3
 80143d4:	f63f af70 	bhi.w	80142b8 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80143d8:	6a3b      	ldr	r3, [r7, #32]
 80143da:	791b      	ldrb	r3, [r3, #4]
 80143dc:	2b02      	cmp	r3, #2
 80143de:	bf28      	it	cs
 80143e0:	2302      	movcs	r3, #2
 80143e2:	b2db      	uxtb	r3, r3
 80143e4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80143e8:	429a      	cmp	r2, r3
 80143ea:	d201      	bcs.n	80143f0 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 80143ec:	2303      	movs	r3, #3
 80143ee:	e001      	b.n	80143f4 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 80143f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80143f4:	4618      	mov	r0, r3
 80143f6:	3730      	adds	r7, #48	@ 0x30
 80143f8:	46bd      	mov	sp, r7
 80143fa:	bd80      	pop	{r7, pc}

080143fc <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80143fc:	b480      	push	{r7}
 80143fe:	b083      	sub	sp, #12
 8014400:	af00      	add	r7, sp, #0
 8014402:	6078      	str	r0, [r7, #4]
 8014404:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8014406:	683b      	ldr	r3, [r7, #0]
 8014408:	781a      	ldrb	r2, [r3, #0]
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 801440e:	683b      	ldr	r3, [r7, #0]
 8014410:	785a      	ldrb	r2, [r3, #1]
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8014416:	683b      	ldr	r3, [r7, #0]
 8014418:	789a      	ldrb	r2, [r3, #2]
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 801441e:	683b      	ldr	r3, [r7, #0]
 8014420:	78da      	ldrb	r2, [r3, #3]
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 8014426:	683b      	ldr	r3, [r7, #0]
 8014428:	791a      	ldrb	r2, [r3, #4]
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 801442e:	683b      	ldr	r3, [r7, #0]
 8014430:	795a      	ldrb	r2, [r3, #5]
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8014436:	683b      	ldr	r3, [r7, #0]
 8014438:	799a      	ldrb	r2, [r3, #6]
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 801443e:	683b      	ldr	r3, [r7, #0]
 8014440:	79da      	ldrb	r2, [r3, #7]
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8014446:	683b      	ldr	r3, [r7, #0]
 8014448:	7a1a      	ldrb	r2, [r3, #8]
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	721a      	strb	r2, [r3, #8]
}
 801444e:	bf00      	nop
 8014450:	370c      	adds	r7, #12
 8014452:	46bd      	mov	sp, r7
 8014454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014458:	4770      	bx	lr

0801445a <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 801445a:	b480      	push	{r7}
 801445c:	b087      	sub	sp, #28
 801445e:	af00      	add	r7, sp, #0
 8014460:	60f8      	str	r0, [r7, #12]
 8014462:	60b9      	str	r1, [r7, #8]
 8014464:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8014466:	2300      	movs	r3, #0
 8014468:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	781a      	ldrb	r2, [r3, #0]
 801446e:	68bb      	ldr	r3, [r7, #8]
 8014470:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	785a      	ldrb	r2, [r3, #1]
 8014476:	68bb      	ldr	r3, [r7, #8]
 8014478:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	789a      	ldrb	r2, [r3, #2]
 801447e:	68bb      	ldr	r3, [r7, #8]
 8014480:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	78da      	ldrb	r2, [r3, #3]
 8014486:	68bb      	ldr	r3, [r7, #8]
 8014488:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	3304      	adds	r3, #4
 801448e:	781b      	ldrb	r3, [r3, #0]
 8014490:	461a      	mov	r2, r3
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	3305      	adds	r3, #5
 8014496:	781b      	ldrb	r3, [r3, #0]
 8014498:	021b      	lsls	r3, r3, #8
 801449a:	b29b      	uxth	r3, r3
 801449c:	4313      	orrs	r3, r2
 801449e:	b29a      	uxth	r2, r3
 80144a0:	68bb      	ldr	r3, [r7, #8]
 80144a2:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	799a      	ldrb	r2, [r3, #6]
 80144a8:	68bb      	ldr	r3, [r7, #8]
 80144aa:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80144ac:	68bb      	ldr	r3, [r7, #8]
 80144ae:	889b      	ldrh	r3, [r3, #4]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d009      	beq.n	80144c8 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80144b4:	68bb      	ldr	r3, [r7, #8]
 80144b6:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80144b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80144bc:	d804      	bhi.n	80144c8 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80144be:	68bb      	ldr	r3, [r7, #8]
 80144c0:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80144c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80144c6:	d901      	bls.n	80144cc <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80144c8:	2303      	movs	r3, #3
 80144ca:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d136      	bne.n	8014544 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80144d6:	68bb      	ldr	r3, [r7, #8]
 80144d8:	78db      	ldrb	r3, [r3, #3]
 80144da:	f003 0303 	and.w	r3, r3, #3
 80144de:	2b02      	cmp	r3, #2
 80144e0:	d108      	bne.n	80144f4 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80144e2:	68bb      	ldr	r3, [r7, #8]
 80144e4:	889b      	ldrh	r3, [r3, #4]
 80144e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80144ea:	f240 8097 	bls.w	801461c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80144ee:	2303      	movs	r3, #3
 80144f0:	75fb      	strb	r3, [r7, #23]
 80144f2:	e093      	b.n	801461c <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80144f4:	68bb      	ldr	r3, [r7, #8]
 80144f6:	78db      	ldrb	r3, [r3, #3]
 80144f8:	f003 0303 	and.w	r3, r3, #3
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d107      	bne.n	8014510 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8014500:	68bb      	ldr	r3, [r7, #8]
 8014502:	889b      	ldrh	r3, [r3, #4]
 8014504:	2b40      	cmp	r3, #64	@ 0x40
 8014506:	f240 8089 	bls.w	801461c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801450a:	2303      	movs	r3, #3
 801450c:	75fb      	strb	r3, [r7, #23]
 801450e:	e085      	b.n	801461c <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8014510:	68bb      	ldr	r3, [r7, #8]
 8014512:	78db      	ldrb	r3, [r3, #3]
 8014514:	f003 0303 	and.w	r3, r3, #3
 8014518:	2b01      	cmp	r3, #1
 801451a:	d005      	beq.n	8014528 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 801451c:	68bb      	ldr	r3, [r7, #8]
 801451e:	78db      	ldrb	r3, [r3, #3]
 8014520:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8014524:	2b03      	cmp	r3, #3
 8014526:	d10a      	bne.n	801453e <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8014528:	68bb      	ldr	r3, [r7, #8]
 801452a:	799b      	ldrb	r3, [r3, #6]
 801452c:	2b00      	cmp	r3, #0
 801452e:	d003      	beq.n	8014538 <USBH_ParseEPDesc+0xde>
 8014530:	68bb      	ldr	r3, [r7, #8]
 8014532:	799b      	ldrb	r3, [r3, #6]
 8014534:	2b10      	cmp	r3, #16
 8014536:	d970      	bls.n	801461a <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8014538:	2303      	movs	r3, #3
 801453a:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 801453c:	e06d      	b.n	801461a <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 801453e:	2303      	movs	r3, #3
 8014540:	75fb      	strb	r3, [r7, #23]
 8014542:	e06b      	b.n	801461c <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 801454a:	2b01      	cmp	r3, #1
 801454c:	d13c      	bne.n	80145c8 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 801454e:	68bb      	ldr	r3, [r7, #8]
 8014550:	78db      	ldrb	r3, [r3, #3]
 8014552:	f003 0303 	and.w	r3, r3, #3
 8014556:	2b02      	cmp	r3, #2
 8014558:	d005      	beq.n	8014566 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 801455a:	68bb      	ldr	r3, [r7, #8]
 801455c:	78db      	ldrb	r3, [r3, #3]
 801455e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8014562:	2b00      	cmp	r3, #0
 8014564:	d106      	bne.n	8014574 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8014566:	68bb      	ldr	r3, [r7, #8]
 8014568:	889b      	ldrh	r3, [r3, #4]
 801456a:	2b40      	cmp	r3, #64	@ 0x40
 801456c:	d956      	bls.n	801461c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801456e:	2303      	movs	r3, #3
 8014570:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8014572:	e053      	b.n	801461c <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8014574:	68bb      	ldr	r3, [r7, #8]
 8014576:	78db      	ldrb	r3, [r3, #3]
 8014578:	f003 0303 	and.w	r3, r3, #3
 801457c:	2b01      	cmp	r3, #1
 801457e:	d10e      	bne.n	801459e <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8014580:	68bb      	ldr	r3, [r7, #8]
 8014582:	799b      	ldrb	r3, [r3, #6]
 8014584:	2b00      	cmp	r3, #0
 8014586:	d007      	beq.n	8014598 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8014588:	68bb      	ldr	r3, [r7, #8]
 801458a:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 801458c:	2b10      	cmp	r3, #16
 801458e:	d803      	bhi.n	8014598 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8014590:	68bb      	ldr	r3, [r7, #8]
 8014592:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8014594:	2b40      	cmp	r3, #64	@ 0x40
 8014596:	d941      	bls.n	801461c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8014598:	2303      	movs	r3, #3
 801459a:	75fb      	strb	r3, [r7, #23]
 801459c:	e03e      	b.n	801461c <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 801459e:	68bb      	ldr	r3, [r7, #8]
 80145a0:	78db      	ldrb	r3, [r3, #3]
 80145a2:	f003 0303 	and.w	r3, r3, #3
 80145a6:	2b03      	cmp	r3, #3
 80145a8:	d10b      	bne.n	80145c2 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80145aa:	68bb      	ldr	r3, [r7, #8]
 80145ac:	799b      	ldrb	r3, [r3, #6]
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d004      	beq.n	80145bc <USBH_ParseEPDesc+0x162>
 80145b2:	68bb      	ldr	r3, [r7, #8]
 80145b4:	889b      	ldrh	r3, [r3, #4]
 80145b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80145ba:	d32f      	bcc.n	801461c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80145bc:	2303      	movs	r3, #3
 80145be:	75fb      	strb	r3, [r7, #23]
 80145c0:	e02c      	b.n	801461c <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80145c2:	2303      	movs	r3, #3
 80145c4:	75fb      	strb	r3, [r7, #23]
 80145c6:	e029      	b.n	801461c <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80145c8:	68fb      	ldr	r3, [r7, #12]
 80145ca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80145ce:	2b02      	cmp	r3, #2
 80145d0:	d120      	bne.n	8014614 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80145d2:	68bb      	ldr	r3, [r7, #8]
 80145d4:	78db      	ldrb	r3, [r3, #3]
 80145d6:	f003 0303 	and.w	r3, r3, #3
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d106      	bne.n	80145ec <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80145de:	68bb      	ldr	r3, [r7, #8]
 80145e0:	889b      	ldrh	r3, [r3, #4]
 80145e2:	2b08      	cmp	r3, #8
 80145e4:	d01a      	beq.n	801461c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80145e6:	2303      	movs	r3, #3
 80145e8:	75fb      	strb	r3, [r7, #23]
 80145ea:	e017      	b.n	801461c <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80145ec:	68bb      	ldr	r3, [r7, #8]
 80145ee:	78db      	ldrb	r3, [r3, #3]
 80145f0:	f003 0303 	and.w	r3, r3, #3
 80145f4:	2b03      	cmp	r3, #3
 80145f6:	d10a      	bne.n	801460e <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80145f8:	68bb      	ldr	r3, [r7, #8]
 80145fa:	799b      	ldrb	r3, [r3, #6]
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d003      	beq.n	8014608 <USBH_ParseEPDesc+0x1ae>
 8014600:	68bb      	ldr	r3, [r7, #8]
 8014602:	889b      	ldrh	r3, [r3, #4]
 8014604:	2b08      	cmp	r3, #8
 8014606:	d909      	bls.n	801461c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8014608:	2303      	movs	r3, #3
 801460a:	75fb      	strb	r3, [r7, #23]
 801460c:	e006      	b.n	801461c <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 801460e:	2303      	movs	r3, #3
 8014610:	75fb      	strb	r3, [r7, #23]
 8014612:	e003      	b.n	801461c <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8014614:	2303      	movs	r3, #3
 8014616:	75fb      	strb	r3, [r7, #23]
 8014618:	e000      	b.n	801461c <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 801461a:	bf00      	nop
  }

  return status;
 801461c:	7dfb      	ldrb	r3, [r7, #23]
}
 801461e:	4618      	mov	r0, r3
 8014620:	371c      	adds	r7, #28
 8014622:	46bd      	mov	sp, r7
 8014624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014628:	4770      	bx	lr

0801462a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 801462a:	b480      	push	{r7}
 801462c:	b087      	sub	sp, #28
 801462e:	af00      	add	r7, sp, #0
 8014630:	60f8      	str	r0, [r7, #12]
 8014632:	60b9      	str	r1, [r7, #8]
 8014634:	4613      	mov	r3, r2
 8014636:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	3301      	adds	r3, #1
 801463c:	781b      	ldrb	r3, [r3, #0]
 801463e:	2b03      	cmp	r3, #3
 8014640:	d120      	bne.n	8014684 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	781b      	ldrb	r3, [r3, #0]
 8014646:	1e9a      	subs	r2, r3, #2
 8014648:	88fb      	ldrh	r3, [r7, #6]
 801464a:	4293      	cmp	r3, r2
 801464c:	bf28      	it	cs
 801464e:	4613      	movcs	r3, r2
 8014650:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	3302      	adds	r3, #2
 8014656:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8014658:	2300      	movs	r3, #0
 801465a:	82fb      	strh	r3, [r7, #22]
 801465c:	e00b      	b.n	8014676 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 801465e:	8afb      	ldrh	r3, [r7, #22]
 8014660:	68fa      	ldr	r2, [r7, #12]
 8014662:	4413      	add	r3, r2
 8014664:	781a      	ldrb	r2, [r3, #0]
 8014666:	68bb      	ldr	r3, [r7, #8]
 8014668:	701a      	strb	r2, [r3, #0]
      pdest++;
 801466a:	68bb      	ldr	r3, [r7, #8]
 801466c:	3301      	adds	r3, #1
 801466e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8014670:	8afb      	ldrh	r3, [r7, #22]
 8014672:	3302      	adds	r3, #2
 8014674:	82fb      	strh	r3, [r7, #22]
 8014676:	8afa      	ldrh	r2, [r7, #22]
 8014678:	8abb      	ldrh	r3, [r7, #20]
 801467a:	429a      	cmp	r2, r3
 801467c:	d3ef      	bcc.n	801465e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 801467e:	68bb      	ldr	r3, [r7, #8]
 8014680:	2200      	movs	r2, #0
 8014682:	701a      	strb	r2, [r3, #0]
  }
}
 8014684:	bf00      	nop
 8014686:	371c      	adds	r7, #28
 8014688:	46bd      	mov	sp, r7
 801468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801468e:	4770      	bx	lr

08014690 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8014690:	b480      	push	{r7}
 8014692:	b085      	sub	sp, #20
 8014694:	af00      	add	r7, sp, #0
 8014696:	6078      	str	r0, [r7, #4]
 8014698:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 801469a:	683b      	ldr	r3, [r7, #0]
 801469c:	881b      	ldrh	r3, [r3, #0]
 801469e:	687a      	ldr	r2, [r7, #4]
 80146a0:	7812      	ldrb	r2, [r2, #0]
 80146a2:	4413      	add	r3, r2
 80146a4:	b29a      	uxth	r2, r3
 80146a6:	683b      	ldr	r3, [r7, #0]
 80146a8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	781b      	ldrb	r3, [r3, #0]
 80146ae:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	4413      	add	r3, r2
 80146b4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80146b6:	68fb      	ldr	r3, [r7, #12]
}
 80146b8:	4618      	mov	r0, r3
 80146ba:	3714      	adds	r7, #20
 80146bc:	46bd      	mov	sp, r7
 80146be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146c2:	4770      	bx	lr

080146c4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80146c4:	b580      	push	{r7, lr}
 80146c6:	b086      	sub	sp, #24
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	60f8      	str	r0, [r7, #12]
 80146cc:	60b9      	str	r1, [r7, #8]
 80146ce:	4613      	mov	r3, r2
 80146d0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80146d2:	2301      	movs	r3, #1
 80146d4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	789b      	ldrb	r3, [r3, #2]
 80146da:	2b01      	cmp	r3, #1
 80146dc:	d002      	beq.n	80146e4 <USBH_CtlReq+0x20>
 80146de:	2b02      	cmp	r3, #2
 80146e0:	d015      	beq.n	801470e <USBH_CtlReq+0x4a>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 80146e2:	e033      	b.n	801474c <USBH_CtlReq+0x88>
      phost->Control.buff = buff;
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	68ba      	ldr	r2, [r7, #8]
 80146e8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	88fa      	ldrh	r2, [r7, #6]
 80146ee:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	2201      	movs	r2, #1
 80146f4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	2202      	movs	r2, #2
 80146fa:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80146fc:	2301      	movs	r3, #1
 80146fe:	75fb      	strb	r3, [r7, #23]
      USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8014700:	2300      	movs	r3, #0
 8014702:	2200      	movs	r2, #0
 8014704:	2103      	movs	r1, #3
 8014706:	68f8      	ldr	r0, [r7, #12]
 8014708:	f7ff fb32 	bl	8013d70 <USBH_OS_PutMessage>
      break;
 801470c:	e01e      	b.n	801474c <USBH_CtlReq+0x88>
      status = USBH_HandleControl(phost);
 801470e:	68f8      	ldr	r0, [r7, #12]
 8014710:	f000 f822 	bl	8014758 <USBH_HandleControl>
 8014714:	4603      	mov	r3, r0
 8014716:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8014718:	7dfb      	ldrb	r3, [r7, #23]
 801471a:	2b00      	cmp	r3, #0
 801471c:	d002      	beq.n	8014724 <USBH_CtlReq+0x60>
 801471e:	7dfb      	ldrb	r3, [r7, #23]
 8014720:	2b03      	cmp	r3, #3
 8014722:	d106      	bne.n	8014732 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	2201      	movs	r2, #1
 8014728:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	2200      	movs	r2, #0
 801472e:	761a      	strb	r2, [r3, #24]
 8014730:	e005      	b.n	801473e <USBH_CtlReq+0x7a>
      else if (status == USBH_FAIL)
 8014732:	7dfb      	ldrb	r3, [r7, #23]
 8014734:	2b02      	cmp	r3, #2
 8014736:	d102      	bne.n	801473e <USBH_CtlReq+0x7a>
        phost->RequestState = CMD_SEND;
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	2201      	movs	r2, #1
 801473c:	709a      	strb	r2, [r3, #2]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801473e:	2300      	movs	r3, #0
 8014740:	2200      	movs	r2, #0
 8014742:	2103      	movs	r1, #3
 8014744:	68f8      	ldr	r0, [r7, #12]
 8014746:	f7ff fb13 	bl	8013d70 <USBH_OS_PutMessage>
      break;
 801474a:	bf00      	nop
  }
  return status;
 801474c:	7dfb      	ldrb	r3, [r7, #23]
}
 801474e:	4618      	mov	r0, r3
 8014750:	3718      	adds	r7, #24
 8014752:	46bd      	mov	sp, r7
 8014754:	bd80      	pop	{r7, pc}
	...

08014758 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8014758:	b580      	push	{r7, lr}
 801475a:	b086      	sub	sp, #24
 801475c:	af02      	add	r7, sp, #8
 801475e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8014760:	2301      	movs	r3, #1
 8014762:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8014764:	2300      	movs	r3, #0
 8014766:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	7e1b      	ldrb	r3, [r3, #24]
 801476c:	3b01      	subs	r3, #1
 801476e:	2b0a      	cmp	r3, #10
 8014770:	f200 81b2 	bhi.w	8014ad8 <USBH_HandleControl+0x380>
 8014774:	a201      	add	r2, pc, #4	@ (adr r2, 801477c <USBH_HandleControl+0x24>)
 8014776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801477a:	bf00      	nop
 801477c:	080147a9 	.word	0x080147a9
 8014780:	080147c3 	.word	0x080147c3
 8014784:	08014845 	.word	0x08014845
 8014788:	0801486b 	.word	0x0801486b
 801478c:	080148c9 	.word	0x080148c9
 8014790:	080148f3 	.word	0x080148f3
 8014794:	08014975 	.word	0x08014975
 8014798:	08014997 	.word	0x08014997
 801479c:	080149f9 	.word	0x080149f9
 80147a0:	08014a1f 	.word	0x08014a1f
 80147a4:	08014a81 	.word	0x08014a81
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	f103 0110 	add.w	r1, r3, #16
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	795b      	ldrb	r3, [r3, #5]
 80147b2:	461a      	mov	r2, r3
 80147b4:	6878      	ldr	r0, [r7, #4]
 80147b6:	f000 f99f 	bl	8014af8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	2202      	movs	r2, #2
 80147be:	761a      	strb	r2, [r3, #24]
      break;
 80147c0:	e195      	b.n	8014aee <USBH_HandleControl+0x396>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	795b      	ldrb	r3, [r3, #5]
 80147c6:	4619      	mov	r1, r3
 80147c8:	6878      	ldr	r0, [r7, #4]
 80147ca:	f006 fc23 	bl	801b014 <USBH_LL_GetURBState>
 80147ce:	4603      	mov	r3, r0
 80147d0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80147d2:	7bbb      	ldrb	r3, [r7, #14]
 80147d4:	2b01      	cmp	r3, #1
 80147d6:	d124      	bne.n	8014822 <USBH_HandleControl+0xca>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	7c1b      	ldrb	r3, [r3, #16]
 80147dc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80147e0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	8adb      	ldrh	r3, [r3, #22]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d00a      	beq.n	8014800 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80147ea:	7b7b      	ldrb	r3, [r7, #13]
 80147ec:	2b80      	cmp	r3, #128	@ 0x80
 80147ee:	d103      	bne.n	80147f8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	2203      	movs	r2, #3
 80147f4:	761a      	strb	r2, [r3, #24]
 80147f6:	e00d      	b.n	8014814 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	2205      	movs	r2, #5
 80147fc:	761a      	strb	r2, [r3, #24]
 80147fe:	e009      	b.n	8014814 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8014800:	7b7b      	ldrb	r3, [r7, #13]
 8014802:	2b80      	cmp	r3, #128	@ 0x80
 8014804:	d103      	bne.n	801480e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	2209      	movs	r2, #9
 801480a:	761a      	strb	r2, [r3, #24]
 801480c:	e002      	b.n	8014814 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	2207      	movs	r2, #7
 8014812:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8014814:	2300      	movs	r3, #0
 8014816:	2200      	movs	r2, #0
 8014818:	2103      	movs	r1, #3
 801481a:	6878      	ldr	r0, [r7, #4]
 801481c:	f7ff faa8 	bl	8013d70 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8014820:	e15c      	b.n	8014adc <USBH_HandleControl+0x384>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8014822:	7bbb      	ldrb	r3, [r7, #14]
 8014824:	2b04      	cmp	r3, #4
 8014826:	d003      	beq.n	8014830 <USBH_HandleControl+0xd8>
 8014828:	7bbb      	ldrb	r3, [r7, #14]
 801482a:	2b02      	cmp	r3, #2
 801482c:	f040 8156 	bne.w	8014adc <USBH_HandleControl+0x384>
          phost->Control.state = CTRL_ERROR;
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	220b      	movs	r2, #11
 8014834:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8014836:	2300      	movs	r3, #0
 8014838:	2200      	movs	r2, #0
 801483a:	2103      	movs	r1, #3
 801483c:	6878      	ldr	r0, [r7, #4]
 801483e:	f7ff fa97 	bl	8013d70 <USBH_OS_PutMessage>
      break;
 8014842:	e14b      	b.n	8014adc <USBH_HandleControl+0x384>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 801484a:	b29a      	uxth	r2, r3
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	6899      	ldr	r1, [r3, #8]
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	899a      	ldrh	r2, [r3, #12]
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	791b      	ldrb	r3, [r3, #4]
 801485c:	6878      	ldr	r0, [r7, #4]
 801485e:	f000 f98a 	bl	8014b76 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	2204      	movs	r2, #4
 8014866:	761a      	strb	r2, [r3, #24]
      break;
 8014868:	e141      	b.n	8014aee <USBH_HandleControl+0x396>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	791b      	ldrb	r3, [r3, #4]
 801486e:	4619      	mov	r1, r3
 8014870:	6878      	ldr	r0, [r7, #4]
 8014872:	f006 fbcf 	bl	801b014 <USBH_LL_GetURBState>
 8014876:	4603      	mov	r3, r0
 8014878:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 801487a:	7bbb      	ldrb	r3, [r7, #14]
 801487c:	2b01      	cmp	r3, #1
 801487e:	d109      	bne.n	8014894 <USBH_HandleControl+0x13c>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	2209      	movs	r2, #9
 8014884:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8014886:	2300      	movs	r3, #0
 8014888:	2200      	movs	r2, #0
 801488a:	2103      	movs	r1, #3
 801488c:	6878      	ldr	r0, [r7, #4]
 801488e:	f7ff fa6f 	bl	8013d70 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8014892:	e125      	b.n	8014ae0 <USBH_HandleControl+0x388>
      else if (URB_Status == USBH_URB_STALL)
 8014894:	7bbb      	ldrb	r3, [r7, #14]
 8014896:	2b05      	cmp	r3, #5
 8014898:	d108      	bne.n	80148ac <USBH_HandleControl+0x154>
        status = USBH_NOT_SUPPORTED;
 801489a:	2303      	movs	r3, #3
 801489c:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801489e:	2300      	movs	r3, #0
 80148a0:	2200      	movs	r2, #0
 80148a2:	2103      	movs	r1, #3
 80148a4:	6878      	ldr	r0, [r7, #4]
 80148a6:	f7ff fa63 	bl	8013d70 <USBH_OS_PutMessage>
      break;
 80148aa:	e119      	b.n	8014ae0 <USBH_HandleControl+0x388>
        if (URB_Status == USBH_URB_ERROR)
 80148ac:	7bbb      	ldrb	r3, [r7, #14]
 80148ae:	2b04      	cmp	r3, #4
 80148b0:	f040 8116 	bne.w	8014ae0 <USBH_HandleControl+0x388>
          phost->Control.state = CTRL_ERROR;
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	220b      	movs	r2, #11
 80148b8:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80148ba:	2300      	movs	r3, #0
 80148bc:	2200      	movs	r2, #0
 80148be:	2103      	movs	r1, #3
 80148c0:	6878      	ldr	r0, [r7, #4]
 80148c2:	f7ff fa55 	bl	8013d70 <USBH_OS_PutMessage>
      break;
 80148c6:	e10b      	b.n	8014ae0 <USBH_HandleControl+0x388>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	6899      	ldr	r1, [r3, #8]
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	899a      	ldrh	r2, [r3, #12]
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	795b      	ldrb	r3, [r3, #5]
 80148d4:	2001      	movs	r0, #1
 80148d6:	9000      	str	r0, [sp, #0]
 80148d8:	6878      	ldr	r0, [r7, #4]
 80148da:	f000 f927 	bl	8014b2c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80148e4:	b29a      	uxth	r2, r3
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	2206      	movs	r2, #6
 80148ee:	761a      	strb	r2, [r3, #24]
      break;
 80148f0:	e0fd      	b.n	8014aee <USBH_HandleControl+0x396>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	795b      	ldrb	r3, [r3, #5]
 80148f6:	4619      	mov	r1, r3
 80148f8:	6878      	ldr	r0, [r7, #4]
 80148fa:	f006 fb8b 	bl	801b014 <USBH_LL_GetURBState>
 80148fe:	4603      	mov	r3, r0
 8014900:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8014902:	7bbb      	ldrb	r3, [r7, #14]
 8014904:	2b01      	cmp	r3, #1
 8014906:	d109      	bne.n	801491c <USBH_HandleControl+0x1c4>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	2207      	movs	r2, #7
 801490c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801490e:	2300      	movs	r3, #0
 8014910:	2200      	movs	r2, #0
 8014912:	2103      	movs	r1, #3
 8014914:	6878      	ldr	r0, [r7, #4]
 8014916:	f7ff fa2b 	bl	8013d70 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 801491a:	e0e3      	b.n	8014ae4 <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_STALL)
 801491c:	7bbb      	ldrb	r3, [r7, #14]
 801491e:	2b05      	cmp	r3, #5
 8014920:	d10b      	bne.n	801493a <USBH_HandleControl+0x1e2>
        phost->Control.state = CTRL_STALLED;
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	220c      	movs	r2, #12
 8014926:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8014928:	2303      	movs	r3, #3
 801492a:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801492c:	2300      	movs	r3, #0
 801492e:	2200      	movs	r2, #0
 8014930:	2103      	movs	r1, #3
 8014932:	6878      	ldr	r0, [r7, #4]
 8014934:	f7ff fa1c 	bl	8013d70 <USBH_OS_PutMessage>
      break;
 8014938:	e0d4      	b.n	8014ae4 <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_NOTREADY)
 801493a:	7bbb      	ldrb	r3, [r7, #14]
 801493c:	2b02      	cmp	r3, #2
 801493e:	d109      	bne.n	8014954 <USBH_HandleControl+0x1fc>
        phost->Control.state = CTRL_DATA_OUT;
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	2205      	movs	r2, #5
 8014944:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8014946:	2300      	movs	r3, #0
 8014948:	2200      	movs	r2, #0
 801494a:	2103      	movs	r1, #3
 801494c:	6878      	ldr	r0, [r7, #4]
 801494e:	f7ff fa0f 	bl	8013d70 <USBH_OS_PutMessage>
      break;
 8014952:	e0c7      	b.n	8014ae4 <USBH_HandleControl+0x38c>
        if (URB_Status == USBH_URB_ERROR)
 8014954:	7bbb      	ldrb	r3, [r7, #14]
 8014956:	2b04      	cmp	r3, #4
 8014958:	f040 80c4 	bne.w	8014ae4 <USBH_HandleControl+0x38c>
          phost->Control.state = CTRL_ERROR;
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	220b      	movs	r2, #11
 8014960:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8014962:	2302      	movs	r3, #2
 8014964:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8014966:	2300      	movs	r3, #0
 8014968:	2200      	movs	r2, #0
 801496a:	2103      	movs	r1, #3
 801496c:	6878      	ldr	r0, [r7, #4]
 801496e:	f7ff f9ff 	bl	8013d70 <USBH_OS_PutMessage>
      break;
 8014972:	e0b7      	b.n	8014ae4 <USBH_HandleControl+0x38c>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	791b      	ldrb	r3, [r3, #4]
 8014978:	2200      	movs	r2, #0
 801497a:	2100      	movs	r1, #0
 801497c:	6878      	ldr	r0, [r7, #4]
 801497e:	f000 f8fa 	bl	8014b76 <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8014988:	b29a      	uxth	r2, r3
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	2208      	movs	r2, #8
 8014992:	761a      	strb	r2, [r3, #24]

      break;
 8014994:	e0ab      	b.n	8014aee <USBH_HandleControl+0x396>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	791b      	ldrb	r3, [r3, #4]
 801499a:	4619      	mov	r1, r3
 801499c:	6878      	ldr	r0, [r7, #4]
 801499e:	f006 fb39 	bl	801b014 <USBH_LL_GetURBState>
 80149a2:	4603      	mov	r3, r0
 80149a4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80149a6:	7bbb      	ldrb	r3, [r7, #14]
 80149a8:	2b01      	cmp	r3, #1
 80149aa:	d10b      	bne.n	80149c4 <USBH_HandleControl+0x26c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	220d      	movs	r2, #13
 80149b0:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80149b2:	2300      	movs	r3, #0
 80149b4:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80149b6:	2300      	movs	r3, #0
 80149b8:	2200      	movs	r2, #0
 80149ba:	2103      	movs	r1, #3
 80149bc:	6878      	ldr	r0, [r7, #4]
 80149be:	f7ff f9d7 	bl	8013d70 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80149c2:	e091      	b.n	8014ae8 <USBH_HandleControl+0x390>
      else if (URB_Status == USBH_URB_ERROR)
 80149c4:	7bbb      	ldrb	r3, [r7, #14]
 80149c6:	2b04      	cmp	r3, #4
 80149c8:	d109      	bne.n	80149de <USBH_HandleControl+0x286>
        phost->Control.state = CTRL_ERROR;
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	220b      	movs	r2, #11
 80149ce:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80149d0:	2300      	movs	r3, #0
 80149d2:	2200      	movs	r2, #0
 80149d4:	2103      	movs	r1, #3
 80149d6:	6878      	ldr	r0, [r7, #4]
 80149d8:	f7ff f9ca 	bl	8013d70 <USBH_OS_PutMessage>
      break;
 80149dc:	e084      	b.n	8014ae8 <USBH_HandleControl+0x390>
        if (URB_Status == USBH_URB_STALL)
 80149de:	7bbb      	ldrb	r3, [r7, #14]
 80149e0:	2b05      	cmp	r3, #5
 80149e2:	f040 8081 	bne.w	8014ae8 <USBH_HandleControl+0x390>
          status = USBH_NOT_SUPPORTED;
 80149e6:	2303      	movs	r3, #3
 80149e8:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80149ea:	2300      	movs	r3, #0
 80149ec:	2200      	movs	r2, #0
 80149ee:	2103      	movs	r1, #3
 80149f0:	6878      	ldr	r0, [r7, #4]
 80149f2:	f7ff f9bd 	bl	8013d70 <USBH_OS_PutMessage>
      break;
 80149f6:	e077      	b.n	8014ae8 <USBH_HandleControl+0x390>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	795b      	ldrb	r3, [r3, #5]
 80149fc:	2201      	movs	r2, #1
 80149fe:	9200      	str	r2, [sp, #0]
 8014a00:	2200      	movs	r2, #0
 8014a02:	2100      	movs	r1, #0
 8014a04:	6878      	ldr	r0, [r7, #4]
 8014a06:	f000 f891 	bl	8014b2c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8014a10:	b29a      	uxth	r2, r3
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	220a      	movs	r2, #10
 8014a1a:	761a      	strb	r2, [r3, #24]
      break;
 8014a1c:	e067      	b.n	8014aee <USBH_HandleControl+0x396>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	795b      	ldrb	r3, [r3, #5]
 8014a22:	4619      	mov	r1, r3
 8014a24:	6878      	ldr	r0, [r7, #4]
 8014a26:	f006 faf5 	bl	801b014 <USBH_LL_GetURBState>
 8014a2a:	4603      	mov	r3, r0
 8014a2c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8014a2e:	7bbb      	ldrb	r3, [r7, #14]
 8014a30:	2b01      	cmp	r3, #1
 8014a32:	d10b      	bne.n	8014a4c <USBH_HandleControl+0x2f4>
      {
        status = USBH_OK;
 8014a34:	2300      	movs	r3, #0
 8014a36:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	220d      	movs	r2, #13
 8014a3c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8014a3e:	2300      	movs	r3, #0
 8014a40:	2200      	movs	r2, #0
 8014a42:	2103      	movs	r1, #3
 8014a44:	6878      	ldr	r0, [r7, #4]
 8014a46:	f7ff f993 	bl	8013d70 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8014a4a:	e04f      	b.n	8014aec <USBH_HandleControl+0x394>
      else if (URB_Status == USBH_URB_NOTREADY)
 8014a4c:	7bbb      	ldrb	r3, [r7, #14]
 8014a4e:	2b02      	cmp	r3, #2
 8014a50:	d109      	bne.n	8014a66 <USBH_HandleControl+0x30e>
        phost->Control.state = CTRL_STATUS_OUT;
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	2209      	movs	r2, #9
 8014a56:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8014a58:	2300      	movs	r3, #0
 8014a5a:	2200      	movs	r2, #0
 8014a5c:	2103      	movs	r1, #3
 8014a5e:	6878      	ldr	r0, [r7, #4]
 8014a60:	f7ff f986 	bl	8013d70 <USBH_OS_PutMessage>
      break;
 8014a64:	e042      	b.n	8014aec <USBH_HandleControl+0x394>
        if (URB_Status == USBH_URB_ERROR)
 8014a66:	7bbb      	ldrb	r3, [r7, #14]
 8014a68:	2b04      	cmp	r3, #4
 8014a6a:	d13f      	bne.n	8014aec <USBH_HandleControl+0x394>
          phost->Control.state = CTRL_ERROR;
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	220b      	movs	r2, #11
 8014a70:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8014a72:	2300      	movs	r3, #0
 8014a74:	2200      	movs	r2, #0
 8014a76:	2103      	movs	r1, #3
 8014a78:	6878      	ldr	r0, [r7, #4]
 8014a7a:	f7ff f979 	bl	8013d70 <USBH_OS_PutMessage>
      break;
 8014a7e:	e035      	b.n	8014aec <USBH_HandleControl+0x394>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	7e5b      	ldrb	r3, [r3, #25]
 8014a84:	3301      	adds	r3, #1
 8014a86:	b2da      	uxtb	r2, r3
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	765a      	strb	r2, [r3, #25]
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	7e5b      	ldrb	r3, [r3, #25]
 8014a90:	2b02      	cmp	r3, #2
 8014a92:	d806      	bhi.n	8014aa2 <USBH_HandleControl+0x34a>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	2201      	movs	r2, #1
 8014a98:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	2201      	movs	r2, #1
 8014a9e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8014aa0:	e025      	b.n	8014aee <USBH_HandleControl+0x396>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8014aa8:	2106      	movs	r1, #6
 8014aaa:	6878      	ldr	r0, [r7, #4]
 8014aac:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	2200      	movs	r2, #0
 8014ab2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	795b      	ldrb	r3, [r3, #5]
 8014ab8:	4619      	mov	r1, r3
 8014aba:	6878      	ldr	r0, [r7, #4]
 8014abc:	f000 f90c 	bl	8014cd8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	791b      	ldrb	r3, [r3, #4]
 8014ac4:	4619      	mov	r1, r3
 8014ac6:	6878      	ldr	r0, [r7, #4]
 8014ac8:	f000 f906 	bl	8014cd8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	2200      	movs	r2, #0
 8014ad0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8014ad2:	2302      	movs	r3, #2
 8014ad4:	73fb      	strb	r3, [r7, #15]
      break;
 8014ad6:	e00a      	b.n	8014aee <USBH_HandleControl+0x396>

    default:
      break;
 8014ad8:	bf00      	nop
 8014ada:	e008      	b.n	8014aee <USBH_HandleControl+0x396>
      break;
 8014adc:	bf00      	nop
 8014ade:	e006      	b.n	8014aee <USBH_HandleControl+0x396>
      break;
 8014ae0:	bf00      	nop
 8014ae2:	e004      	b.n	8014aee <USBH_HandleControl+0x396>
      break;
 8014ae4:	bf00      	nop
 8014ae6:	e002      	b.n	8014aee <USBH_HandleControl+0x396>
      break;
 8014ae8:	bf00      	nop
 8014aea:	e000      	b.n	8014aee <USBH_HandleControl+0x396>
      break;
 8014aec:	bf00      	nop
  }

  return status;
 8014aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8014af0:	4618      	mov	r0, r3
 8014af2:	3710      	adds	r7, #16
 8014af4:	46bd      	mov	sp, r7
 8014af6:	bd80      	pop	{r7, pc}

08014af8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8014af8:	b580      	push	{r7, lr}
 8014afa:	b088      	sub	sp, #32
 8014afc:	af04      	add	r7, sp, #16
 8014afe:	60f8      	str	r0, [r7, #12]
 8014b00:	60b9      	str	r1, [r7, #8]
 8014b02:	4613      	mov	r3, r2
 8014b04:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8014b06:	79f9      	ldrb	r1, [r7, #7]
 8014b08:	2300      	movs	r3, #0
 8014b0a:	9303      	str	r3, [sp, #12]
 8014b0c:	2308      	movs	r3, #8
 8014b0e:	9302      	str	r3, [sp, #8]
 8014b10:	68bb      	ldr	r3, [r7, #8]
 8014b12:	9301      	str	r3, [sp, #4]
 8014b14:	2300      	movs	r3, #0
 8014b16:	9300      	str	r3, [sp, #0]
 8014b18:	2300      	movs	r3, #0
 8014b1a:	2200      	movs	r2, #0
 8014b1c:	68f8      	ldr	r0, [r7, #12]
 8014b1e:	f006 fa48 	bl	801afb2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8014b22:	2300      	movs	r3, #0
}
 8014b24:	4618      	mov	r0, r3
 8014b26:	3710      	adds	r7, #16
 8014b28:	46bd      	mov	sp, r7
 8014b2a:	bd80      	pop	{r7, pc}

08014b2c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	b088      	sub	sp, #32
 8014b30:	af04      	add	r7, sp, #16
 8014b32:	60f8      	str	r0, [r7, #12]
 8014b34:	60b9      	str	r1, [r7, #8]
 8014b36:	4611      	mov	r1, r2
 8014b38:	461a      	mov	r2, r3
 8014b3a:	460b      	mov	r3, r1
 8014b3c:	80fb      	strh	r3, [r7, #6]
 8014b3e:	4613      	mov	r3, r2
 8014b40:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d001      	beq.n	8014b50 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8014b4c:	2300      	movs	r3, #0
 8014b4e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8014b50:	7979      	ldrb	r1, [r7, #5]
 8014b52:	7e3b      	ldrb	r3, [r7, #24]
 8014b54:	9303      	str	r3, [sp, #12]
 8014b56:	88fb      	ldrh	r3, [r7, #6]
 8014b58:	9302      	str	r3, [sp, #8]
 8014b5a:	68bb      	ldr	r3, [r7, #8]
 8014b5c:	9301      	str	r3, [sp, #4]
 8014b5e:	2301      	movs	r3, #1
 8014b60:	9300      	str	r3, [sp, #0]
 8014b62:	2300      	movs	r3, #0
 8014b64:	2200      	movs	r2, #0
 8014b66:	68f8      	ldr	r0, [r7, #12]
 8014b68:	f006 fa23 	bl	801afb2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8014b6c:	2300      	movs	r3, #0
}
 8014b6e:	4618      	mov	r0, r3
 8014b70:	3710      	adds	r7, #16
 8014b72:	46bd      	mov	sp, r7
 8014b74:	bd80      	pop	{r7, pc}

08014b76 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8014b76:	b580      	push	{r7, lr}
 8014b78:	b088      	sub	sp, #32
 8014b7a:	af04      	add	r7, sp, #16
 8014b7c:	60f8      	str	r0, [r7, #12]
 8014b7e:	60b9      	str	r1, [r7, #8]
 8014b80:	4611      	mov	r1, r2
 8014b82:	461a      	mov	r2, r3
 8014b84:	460b      	mov	r3, r1
 8014b86:	80fb      	strh	r3, [r7, #6]
 8014b88:	4613      	mov	r3, r2
 8014b8a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8014b8c:	7979      	ldrb	r1, [r7, #5]
 8014b8e:	2300      	movs	r3, #0
 8014b90:	9303      	str	r3, [sp, #12]
 8014b92:	88fb      	ldrh	r3, [r7, #6]
 8014b94:	9302      	str	r3, [sp, #8]
 8014b96:	68bb      	ldr	r3, [r7, #8]
 8014b98:	9301      	str	r3, [sp, #4]
 8014b9a:	2301      	movs	r3, #1
 8014b9c:	9300      	str	r3, [sp, #0]
 8014b9e:	2300      	movs	r3, #0
 8014ba0:	2201      	movs	r2, #1
 8014ba2:	68f8      	ldr	r0, [r7, #12]
 8014ba4:	f006 fa05 	bl	801afb2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8014ba8:	2300      	movs	r3, #0

}
 8014baa:	4618      	mov	r0, r3
 8014bac:	3710      	adds	r7, #16
 8014bae:	46bd      	mov	sp, r7
 8014bb0:	bd80      	pop	{r7, pc}

08014bb2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8014bb2:	b580      	push	{r7, lr}
 8014bb4:	b088      	sub	sp, #32
 8014bb6:	af04      	add	r7, sp, #16
 8014bb8:	60f8      	str	r0, [r7, #12]
 8014bba:	60b9      	str	r1, [r7, #8]
 8014bbc:	4611      	mov	r1, r2
 8014bbe:	461a      	mov	r2, r3
 8014bc0:	460b      	mov	r3, r1
 8014bc2:	80fb      	strh	r3, [r7, #6]
 8014bc4:	4613      	mov	r3, r2
 8014bc6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d001      	beq.n	8014bd6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8014bd2:	2300      	movs	r3, #0
 8014bd4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8014bd6:	7979      	ldrb	r1, [r7, #5]
 8014bd8:	7e3b      	ldrb	r3, [r7, #24]
 8014bda:	9303      	str	r3, [sp, #12]
 8014bdc:	88fb      	ldrh	r3, [r7, #6]
 8014bde:	9302      	str	r3, [sp, #8]
 8014be0:	68bb      	ldr	r3, [r7, #8]
 8014be2:	9301      	str	r3, [sp, #4]
 8014be4:	2301      	movs	r3, #1
 8014be6:	9300      	str	r3, [sp, #0]
 8014be8:	2302      	movs	r3, #2
 8014bea:	2200      	movs	r2, #0
 8014bec:	68f8      	ldr	r0, [r7, #12]
 8014bee:	f006 f9e0 	bl	801afb2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8014bf2:	2300      	movs	r3, #0
}
 8014bf4:	4618      	mov	r0, r3
 8014bf6:	3710      	adds	r7, #16
 8014bf8:	46bd      	mov	sp, r7
 8014bfa:	bd80      	pop	{r7, pc}

08014bfc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8014bfc:	b580      	push	{r7, lr}
 8014bfe:	b088      	sub	sp, #32
 8014c00:	af04      	add	r7, sp, #16
 8014c02:	60f8      	str	r0, [r7, #12]
 8014c04:	60b9      	str	r1, [r7, #8]
 8014c06:	4611      	mov	r1, r2
 8014c08:	461a      	mov	r2, r3
 8014c0a:	460b      	mov	r3, r1
 8014c0c:	80fb      	strh	r3, [r7, #6]
 8014c0e:	4613      	mov	r3, r2
 8014c10:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8014c12:	7979      	ldrb	r1, [r7, #5]
 8014c14:	2300      	movs	r3, #0
 8014c16:	9303      	str	r3, [sp, #12]
 8014c18:	88fb      	ldrh	r3, [r7, #6]
 8014c1a:	9302      	str	r3, [sp, #8]
 8014c1c:	68bb      	ldr	r3, [r7, #8]
 8014c1e:	9301      	str	r3, [sp, #4]
 8014c20:	2301      	movs	r3, #1
 8014c22:	9300      	str	r3, [sp, #0]
 8014c24:	2302      	movs	r3, #2
 8014c26:	2201      	movs	r2, #1
 8014c28:	68f8      	ldr	r0, [r7, #12]
 8014c2a:	f006 f9c2 	bl	801afb2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8014c2e:	2300      	movs	r3, #0
}
 8014c30:	4618      	mov	r0, r3
 8014c32:	3710      	adds	r7, #16
 8014c34:	46bd      	mov	sp, r7
 8014c36:	bd80      	pop	{r7, pc}

08014c38 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	b086      	sub	sp, #24
 8014c3c:	af04      	add	r7, sp, #16
 8014c3e:	6078      	str	r0, [r7, #4]
 8014c40:	4608      	mov	r0, r1
 8014c42:	4611      	mov	r1, r2
 8014c44:	461a      	mov	r2, r3
 8014c46:	4603      	mov	r3, r0
 8014c48:	70fb      	strb	r3, [r7, #3]
 8014c4a:	460b      	mov	r3, r1
 8014c4c:	70bb      	strb	r3, [r7, #2]
 8014c4e:	4613      	mov	r3, r2
 8014c50:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8014c52:	7878      	ldrb	r0, [r7, #1]
 8014c54:	78ba      	ldrb	r2, [r7, #2]
 8014c56:	78f9      	ldrb	r1, [r7, #3]
 8014c58:	8b3b      	ldrh	r3, [r7, #24]
 8014c5a:	9302      	str	r3, [sp, #8]
 8014c5c:	7d3b      	ldrb	r3, [r7, #20]
 8014c5e:	9301      	str	r3, [sp, #4]
 8014c60:	7c3b      	ldrb	r3, [r7, #16]
 8014c62:	9300      	str	r3, [sp, #0]
 8014c64:	4603      	mov	r3, r0
 8014c66:	6878      	ldr	r0, [r7, #4]
 8014c68:	f006 f955 	bl	801af16 <USBH_LL_OpenPipe>

  return USBH_OK;
 8014c6c:	2300      	movs	r3, #0
}
 8014c6e:	4618      	mov	r0, r3
 8014c70:	3708      	adds	r7, #8
 8014c72:	46bd      	mov	sp, r7
 8014c74:	bd80      	pop	{r7, pc}

08014c76 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8014c76:	b580      	push	{r7, lr}
 8014c78:	b082      	sub	sp, #8
 8014c7a:	af00      	add	r7, sp, #0
 8014c7c:	6078      	str	r0, [r7, #4]
 8014c7e:	460b      	mov	r3, r1
 8014c80:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8014c82:	78fb      	ldrb	r3, [r7, #3]
 8014c84:	4619      	mov	r1, r3
 8014c86:	6878      	ldr	r0, [r7, #4]
 8014c88:	f006 f974 	bl	801af74 <USBH_LL_ClosePipe>

  return USBH_OK;
 8014c8c:	2300      	movs	r3, #0
}
 8014c8e:	4618      	mov	r0, r3
 8014c90:	3708      	adds	r7, #8
 8014c92:	46bd      	mov	sp, r7
 8014c94:	bd80      	pop	{r7, pc}

08014c96 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8014c96:	b580      	push	{r7, lr}
 8014c98:	b084      	sub	sp, #16
 8014c9a:	af00      	add	r7, sp, #0
 8014c9c:	6078      	str	r0, [r7, #4]
 8014c9e:	460b      	mov	r3, r1
 8014ca0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8014ca2:	6878      	ldr	r0, [r7, #4]
 8014ca4:	f000 f836 	bl	8014d14 <USBH_GetFreePipe>
 8014ca8:	4603      	mov	r3, r0
 8014caa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8014cac:	89fb      	ldrh	r3, [r7, #14]
 8014cae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014cb2:	4293      	cmp	r3, r2
 8014cb4:	d00a      	beq.n	8014ccc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8014cb6:	78fa      	ldrb	r2, [r7, #3]
 8014cb8:	89fb      	ldrh	r3, [r7, #14]
 8014cba:	f003 030f 	and.w	r3, r3, #15
 8014cbe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8014cc2:	6879      	ldr	r1, [r7, #4]
 8014cc4:	33e0      	adds	r3, #224	@ 0xe0
 8014cc6:	009b      	lsls	r3, r3, #2
 8014cc8:	440b      	add	r3, r1
 8014cca:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8014ccc:	89fb      	ldrh	r3, [r7, #14]
 8014cce:	b2db      	uxtb	r3, r3
}
 8014cd0:	4618      	mov	r0, r3
 8014cd2:	3710      	adds	r7, #16
 8014cd4:	46bd      	mov	sp, r7
 8014cd6:	bd80      	pop	{r7, pc}

08014cd8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8014cd8:	b480      	push	{r7}
 8014cda:	b083      	sub	sp, #12
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	6078      	str	r0, [r7, #4]
 8014ce0:	460b      	mov	r3, r1
 8014ce2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8014ce4:	78fb      	ldrb	r3, [r7, #3]
 8014ce6:	2b0f      	cmp	r3, #15
 8014ce8:	d80d      	bhi.n	8014d06 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8014cea:	78fb      	ldrb	r3, [r7, #3]
 8014cec:	687a      	ldr	r2, [r7, #4]
 8014cee:	33e0      	adds	r3, #224	@ 0xe0
 8014cf0:	009b      	lsls	r3, r3, #2
 8014cf2:	4413      	add	r3, r2
 8014cf4:	685a      	ldr	r2, [r3, #4]
 8014cf6:	78fb      	ldrb	r3, [r7, #3]
 8014cf8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8014cfc:	6879      	ldr	r1, [r7, #4]
 8014cfe:	33e0      	adds	r3, #224	@ 0xe0
 8014d00:	009b      	lsls	r3, r3, #2
 8014d02:	440b      	add	r3, r1
 8014d04:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8014d06:	2300      	movs	r3, #0
}
 8014d08:	4618      	mov	r0, r3
 8014d0a:	370c      	adds	r7, #12
 8014d0c:	46bd      	mov	sp, r7
 8014d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d12:	4770      	bx	lr

08014d14 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8014d14:	b480      	push	{r7}
 8014d16:	b085      	sub	sp, #20
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8014d1c:	2300      	movs	r3, #0
 8014d1e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8014d20:	2300      	movs	r3, #0
 8014d22:	73fb      	strb	r3, [r7, #15]
 8014d24:	e00f      	b.n	8014d46 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8014d26:	7bfb      	ldrb	r3, [r7, #15]
 8014d28:	687a      	ldr	r2, [r7, #4]
 8014d2a:	33e0      	adds	r3, #224	@ 0xe0
 8014d2c:	009b      	lsls	r3, r3, #2
 8014d2e:	4413      	add	r3, r2
 8014d30:	685b      	ldr	r3, [r3, #4]
 8014d32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d102      	bne.n	8014d40 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8014d3a:	7bfb      	ldrb	r3, [r7, #15]
 8014d3c:	b29b      	uxth	r3, r3
 8014d3e:	e007      	b.n	8014d50 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8014d40:	7bfb      	ldrb	r3, [r7, #15]
 8014d42:	3301      	adds	r3, #1
 8014d44:	73fb      	strb	r3, [r7, #15]
 8014d46:	7bfb      	ldrb	r3, [r7, #15]
 8014d48:	2b0f      	cmp	r3, #15
 8014d4a:	d9ec      	bls.n	8014d26 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8014d4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8014d50:	4618      	mov	r0, r3
 8014d52:	3714      	adds	r7, #20
 8014d54:	46bd      	mov	sp, r7
 8014d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d5a:	4770      	bx	lr

08014d5c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8014d5c:	b580      	push	{r7, lr}
 8014d5e:	b084      	sub	sp, #16
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	4603      	mov	r3, r0
 8014d64:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8014d66:	79fb      	ldrb	r3, [r7, #7]
 8014d68:	4a08      	ldr	r2, [pc, #32]	@ (8014d8c <disk_status+0x30>)
 8014d6a:	009b      	lsls	r3, r3, #2
 8014d6c:	4413      	add	r3, r2
 8014d6e:	685b      	ldr	r3, [r3, #4]
 8014d70:	685b      	ldr	r3, [r3, #4]
 8014d72:	79fa      	ldrb	r2, [r7, #7]
 8014d74:	4905      	ldr	r1, [pc, #20]	@ (8014d8c <disk_status+0x30>)
 8014d76:	440a      	add	r2, r1
 8014d78:	7a12      	ldrb	r2, [r2, #8]
 8014d7a:	4610      	mov	r0, r2
 8014d7c:	4798      	blx	r3
 8014d7e:	4603      	mov	r3, r0
 8014d80:	73fb      	strb	r3, [r7, #15]
  return stat;
 8014d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d84:	4618      	mov	r0, r3
 8014d86:	3710      	adds	r7, #16
 8014d88:	46bd      	mov	sp, r7
 8014d8a:	bd80      	pop	{r7, pc}
 8014d8c:	20002408 	.word	0x20002408

08014d90 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8014d90:	b580      	push	{r7, lr}
 8014d92:	b084      	sub	sp, #16
 8014d94:	af00      	add	r7, sp, #0
 8014d96:	4603      	mov	r3, r0
 8014d98:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8014d9a:	2300      	movs	r3, #0
 8014d9c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8014d9e:	79fb      	ldrb	r3, [r7, #7]
 8014da0:	4a0d      	ldr	r2, [pc, #52]	@ (8014dd8 <disk_initialize+0x48>)
 8014da2:	5cd3      	ldrb	r3, [r2, r3]
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d111      	bne.n	8014dcc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8014da8:	79fb      	ldrb	r3, [r7, #7]
 8014daa:	4a0b      	ldr	r2, [pc, #44]	@ (8014dd8 <disk_initialize+0x48>)
 8014dac:	2101      	movs	r1, #1
 8014dae:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8014db0:	79fb      	ldrb	r3, [r7, #7]
 8014db2:	4a09      	ldr	r2, [pc, #36]	@ (8014dd8 <disk_initialize+0x48>)
 8014db4:	009b      	lsls	r3, r3, #2
 8014db6:	4413      	add	r3, r2
 8014db8:	685b      	ldr	r3, [r3, #4]
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	79fa      	ldrb	r2, [r7, #7]
 8014dbe:	4906      	ldr	r1, [pc, #24]	@ (8014dd8 <disk_initialize+0x48>)
 8014dc0:	440a      	add	r2, r1
 8014dc2:	7a12      	ldrb	r2, [r2, #8]
 8014dc4:	4610      	mov	r0, r2
 8014dc6:	4798      	blx	r3
 8014dc8:	4603      	mov	r3, r0
 8014dca:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8014dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8014dce:	4618      	mov	r0, r3
 8014dd0:	3710      	adds	r7, #16
 8014dd2:	46bd      	mov	sp, r7
 8014dd4:	bd80      	pop	{r7, pc}
 8014dd6:	bf00      	nop
 8014dd8:	20002408 	.word	0x20002408

08014ddc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8014ddc:	b590      	push	{r4, r7, lr}
 8014dde:	b087      	sub	sp, #28
 8014de0:	af00      	add	r7, sp, #0
 8014de2:	60b9      	str	r1, [r7, #8]
 8014de4:	607a      	str	r2, [r7, #4]
 8014de6:	603b      	str	r3, [r7, #0]
 8014de8:	4603      	mov	r3, r0
 8014dea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8014dec:	7bfb      	ldrb	r3, [r7, #15]
 8014dee:	4a0a      	ldr	r2, [pc, #40]	@ (8014e18 <disk_read+0x3c>)
 8014df0:	009b      	lsls	r3, r3, #2
 8014df2:	4413      	add	r3, r2
 8014df4:	685b      	ldr	r3, [r3, #4]
 8014df6:	689c      	ldr	r4, [r3, #8]
 8014df8:	7bfb      	ldrb	r3, [r7, #15]
 8014dfa:	4a07      	ldr	r2, [pc, #28]	@ (8014e18 <disk_read+0x3c>)
 8014dfc:	4413      	add	r3, r2
 8014dfe:	7a18      	ldrb	r0, [r3, #8]
 8014e00:	683b      	ldr	r3, [r7, #0]
 8014e02:	687a      	ldr	r2, [r7, #4]
 8014e04:	68b9      	ldr	r1, [r7, #8]
 8014e06:	47a0      	blx	r4
 8014e08:	4603      	mov	r3, r0
 8014e0a:	75fb      	strb	r3, [r7, #23]
  return res;
 8014e0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8014e0e:	4618      	mov	r0, r3
 8014e10:	371c      	adds	r7, #28
 8014e12:	46bd      	mov	sp, r7
 8014e14:	bd90      	pop	{r4, r7, pc}
 8014e16:	bf00      	nop
 8014e18:	20002408 	.word	0x20002408

08014e1c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8014e1c:	b590      	push	{r4, r7, lr}
 8014e1e:	b087      	sub	sp, #28
 8014e20:	af00      	add	r7, sp, #0
 8014e22:	60b9      	str	r1, [r7, #8]
 8014e24:	607a      	str	r2, [r7, #4]
 8014e26:	603b      	str	r3, [r7, #0]
 8014e28:	4603      	mov	r3, r0
 8014e2a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8014e2c:	7bfb      	ldrb	r3, [r7, #15]
 8014e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8014e58 <disk_write+0x3c>)
 8014e30:	009b      	lsls	r3, r3, #2
 8014e32:	4413      	add	r3, r2
 8014e34:	685b      	ldr	r3, [r3, #4]
 8014e36:	68dc      	ldr	r4, [r3, #12]
 8014e38:	7bfb      	ldrb	r3, [r7, #15]
 8014e3a:	4a07      	ldr	r2, [pc, #28]	@ (8014e58 <disk_write+0x3c>)
 8014e3c:	4413      	add	r3, r2
 8014e3e:	7a18      	ldrb	r0, [r3, #8]
 8014e40:	683b      	ldr	r3, [r7, #0]
 8014e42:	687a      	ldr	r2, [r7, #4]
 8014e44:	68b9      	ldr	r1, [r7, #8]
 8014e46:	47a0      	blx	r4
 8014e48:	4603      	mov	r3, r0
 8014e4a:	75fb      	strb	r3, [r7, #23]
  return res;
 8014e4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8014e4e:	4618      	mov	r0, r3
 8014e50:	371c      	adds	r7, #28
 8014e52:	46bd      	mov	sp, r7
 8014e54:	bd90      	pop	{r4, r7, pc}
 8014e56:	bf00      	nop
 8014e58:	20002408 	.word	0x20002408

08014e5c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8014e5c:	b580      	push	{r7, lr}
 8014e5e:	b084      	sub	sp, #16
 8014e60:	af00      	add	r7, sp, #0
 8014e62:	4603      	mov	r3, r0
 8014e64:	603a      	str	r2, [r7, #0]
 8014e66:	71fb      	strb	r3, [r7, #7]
 8014e68:	460b      	mov	r3, r1
 8014e6a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8014e6c:	79fb      	ldrb	r3, [r7, #7]
 8014e6e:	4a09      	ldr	r2, [pc, #36]	@ (8014e94 <disk_ioctl+0x38>)
 8014e70:	009b      	lsls	r3, r3, #2
 8014e72:	4413      	add	r3, r2
 8014e74:	685b      	ldr	r3, [r3, #4]
 8014e76:	691b      	ldr	r3, [r3, #16]
 8014e78:	79fa      	ldrb	r2, [r7, #7]
 8014e7a:	4906      	ldr	r1, [pc, #24]	@ (8014e94 <disk_ioctl+0x38>)
 8014e7c:	440a      	add	r2, r1
 8014e7e:	7a10      	ldrb	r0, [r2, #8]
 8014e80:	79b9      	ldrb	r1, [r7, #6]
 8014e82:	683a      	ldr	r2, [r7, #0]
 8014e84:	4798      	blx	r3
 8014e86:	4603      	mov	r3, r0
 8014e88:	73fb      	strb	r3, [r7, #15]
  return res;
 8014e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e8c:	4618      	mov	r0, r3
 8014e8e:	3710      	adds	r7, #16
 8014e90:	46bd      	mov	sp, r7
 8014e92:	bd80      	pop	{r7, pc}
 8014e94:	20002408 	.word	0x20002408

08014e98 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8014e98:	b480      	push	{r7}
 8014e9a:	b085      	sub	sp, #20
 8014e9c:	af00      	add	r7, sp, #0
 8014e9e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	3301      	adds	r3, #1
 8014ea4:	781b      	ldrb	r3, [r3, #0]
 8014ea6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8014ea8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014eac:	021b      	lsls	r3, r3, #8
 8014eae:	b21a      	sxth	r2, r3
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	781b      	ldrb	r3, [r3, #0]
 8014eb4:	b21b      	sxth	r3, r3
 8014eb6:	4313      	orrs	r3, r2
 8014eb8:	b21b      	sxth	r3, r3
 8014eba:	81fb      	strh	r3, [r7, #14]
	return rv;
 8014ebc:	89fb      	ldrh	r3, [r7, #14]
}
 8014ebe:	4618      	mov	r0, r3
 8014ec0:	3714      	adds	r7, #20
 8014ec2:	46bd      	mov	sp, r7
 8014ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ec8:	4770      	bx	lr

08014eca <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8014eca:	b480      	push	{r7}
 8014ecc:	b085      	sub	sp, #20
 8014ece:	af00      	add	r7, sp, #0
 8014ed0:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	3303      	adds	r3, #3
 8014ed6:	781b      	ldrb	r3, [r3, #0]
 8014ed8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	021b      	lsls	r3, r3, #8
 8014ede:	687a      	ldr	r2, [r7, #4]
 8014ee0:	3202      	adds	r2, #2
 8014ee2:	7812      	ldrb	r2, [r2, #0]
 8014ee4:	4313      	orrs	r3, r2
 8014ee6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	021b      	lsls	r3, r3, #8
 8014eec:	687a      	ldr	r2, [r7, #4]
 8014eee:	3201      	adds	r2, #1
 8014ef0:	7812      	ldrb	r2, [r2, #0]
 8014ef2:	4313      	orrs	r3, r2
 8014ef4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	021b      	lsls	r3, r3, #8
 8014efa:	687a      	ldr	r2, [r7, #4]
 8014efc:	7812      	ldrb	r2, [r2, #0]
 8014efe:	4313      	orrs	r3, r2
 8014f00:	60fb      	str	r3, [r7, #12]
	return rv;
 8014f02:	68fb      	ldr	r3, [r7, #12]
}
 8014f04:	4618      	mov	r0, r3
 8014f06:	3714      	adds	r7, #20
 8014f08:	46bd      	mov	sp, r7
 8014f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f0e:	4770      	bx	lr

08014f10 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8014f10:	b480      	push	{r7}
 8014f12:	b083      	sub	sp, #12
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	6078      	str	r0, [r7, #4]
 8014f18:	460b      	mov	r3, r1
 8014f1a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	1c5a      	adds	r2, r3, #1
 8014f20:	607a      	str	r2, [r7, #4]
 8014f22:	887a      	ldrh	r2, [r7, #2]
 8014f24:	b2d2      	uxtb	r2, r2
 8014f26:	701a      	strb	r2, [r3, #0]
 8014f28:	887b      	ldrh	r3, [r7, #2]
 8014f2a:	0a1b      	lsrs	r3, r3, #8
 8014f2c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	1c5a      	adds	r2, r3, #1
 8014f32:	607a      	str	r2, [r7, #4]
 8014f34:	887a      	ldrh	r2, [r7, #2]
 8014f36:	b2d2      	uxtb	r2, r2
 8014f38:	701a      	strb	r2, [r3, #0]
}
 8014f3a:	bf00      	nop
 8014f3c:	370c      	adds	r7, #12
 8014f3e:	46bd      	mov	sp, r7
 8014f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f44:	4770      	bx	lr

08014f46 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8014f46:	b480      	push	{r7}
 8014f48:	b083      	sub	sp, #12
 8014f4a:	af00      	add	r7, sp, #0
 8014f4c:	6078      	str	r0, [r7, #4]
 8014f4e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	1c5a      	adds	r2, r3, #1
 8014f54:	607a      	str	r2, [r7, #4]
 8014f56:	683a      	ldr	r2, [r7, #0]
 8014f58:	b2d2      	uxtb	r2, r2
 8014f5a:	701a      	strb	r2, [r3, #0]
 8014f5c:	683b      	ldr	r3, [r7, #0]
 8014f5e:	0a1b      	lsrs	r3, r3, #8
 8014f60:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	1c5a      	adds	r2, r3, #1
 8014f66:	607a      	str	r2, [r7, #4]
 8014f68:	683a      	ldr	r2, [r7, #0]
 8014f6a:	b2d2      	uxtb	r2, r2
 8014f6c:	701a      	strb	r2, [r3, #0]
 8014f6e:	683b      	ldr	r3, [r7, #0]
 8014f70:	0a1b      	lsrs	r3, r3, #8
 8014f72:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	1c5a      	adds	r2, r3, #1
 8014f78:	607a      	str	r2, [r7, #4]
 8014f7a:	683a      	ldr	r2, [r7, #0]
 8014f7c:	b2d2      	uxtb	r2, r2
 8014f7e:	701a      	strb	r2, [r3, #0]
 8014f80:	683b      	ldr	r3, [r7, #0]
 8014f82:	0a1b      	lsrs	r3, r3, #8
 8014f84:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	1c5a      	adds	r2, r3, #1
 8014f8a:	607a      	str	r2, [r7, #4]
 8014f8c:	683a      	ldr	r2, [r7, #0]
 8014f8e:	b2d2      	uxtb	r2, r2
 8014f90:	701a      	strb	r2, [r3, #0]
}
 8014f92:	bf00      	nop
 8014f94:	370c      	adds	r7, #12
 8014f96:	46bd      	mov	sp, r7
 8014f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f9c:	4770      	bx	lr

08014f9e <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8014f9e:	b480      	push	{r7}
 8014fa0:	b087      	sub	sp, #28
 8014fa2:	af00      	add	r7, sp, #0
 8014fa4:	60f8      	str	r0, [r7, #12]
 8014fa6:	60b9      	str	r1, [r7, #8]
 8014fa8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8014fae:	68bb      	ldr	r3, [r7, #8]
 8014fb0:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d00d      	beq.n	8014fd4 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8014fb8:	693a      	ldr	r2, [r7, #16]
 8014fba:	1c53      	adds	r3, r2, #1
 8014fbc:	613b      	str	r3, [r7, #16]
 8014fbe:	697b      	ldr	r3, [r7, #20]
 8014fc0:	1c59      	adds	r1, r3, #1
 8014fc2:	6179      	str	r1, [r7, #20]
 8014fc4:	7812      	ldrb	r2, [r2, #0]
 8014fc6:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	3b01      	subs	r3, #1
 8014fcc:	607b      	str	r3, [r7, #4]
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d1f1      	bne.n	8014fb8 <mem_cpy+0x1a>
	}
}
 8014fd4:	bf00      	nop
 8014fd6:	371c      	adds	r7, #28
 8014fd8:	46bd      	mov	sp, r7
 8014fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fde:	4770      	bx	lr

08014fe0 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8014fe0:	b480      	push	{r7}
 8014fe2:	b087      	sub	sp, #28
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	60f8      	str	r0, [r7, #12]
 8014fe8:	60b9      	str	r1, [r7, #8]
 8014fea:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8014ff0:	697b      	ldr	r3, [r7, #20]
 8014ff2:	1c5a      	adds	r2, r3, #1
 8014ff4:	617a      	str	r2, [r7, #20]
 8014ff6:	68ba      	ldr	r2, [r7, #8]
 8014ff8:	b2d2      	uxtb	r2, r2
 8014ffa:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	3b01      	subs	r3, #1
 8015000:	607b      	str	r3, [r7, #4]
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	2b00      	cmp	r3, #0
 8015006:	d1f3      	bne.n	8014ff0 <mem_set+0x10>
}
 8015008:	bf00      	nop
 801500a:	bf00      	nop
 801500c:	371c      	adds	r7, #28
 801500e:	46bd      	mov	sp, r7
 8015010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015014:	4770      	bx	lr

08015016 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8015016:	b480      	push	{r7}
 8015018:	b089      	sub	sp, #36	@ 0x24
 801501a:	af00      	add	r7, sp, #0
 801501c:	60f8      	str	r0, [r7, #12]
 801501e:	60b9      	str	r1, [r7, #8]
 8015020:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	61fb      	str	r3, [r7, #28]
 8015026:	68bb      	ldr	r3, [r7, #8]
 8015028:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801502a:	2300      	movs	r3, #0
 801502c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801502e:	69fb      	ldr	r3, [r7, #28]
 8015030:	1c5a      	adds	r2, r3, #1
 8015032:	61fa      	str	r2, [r7, #28]
 8015034:	781b      	ldrb	r3, [r3, #0]
 8015036:	4619      	mov	r1, r3
 8015038:	69bb      	ldr	r3, [r7, #24]
 801503a:	1c5a      	adds	r2, r3, #1
 801503c:	61ba      	str	r2, [r7, #24]
 801503e:	781b      	ldrb	r3, [r3, #0]
 8015040:	1acb      	subs	r3, r1, r3
 8015042:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	3b01      	subs	r3, #1
 8015048:	607b      	str	r3, [r7, #4]
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	2b00      	cmp	r3, #0
 801504e:	d002      	beq.n	8015056 <mem_cmp+0x40>
 8015050:	697b      	ldr	r3, [r7, #20]
 8015052:	2b00      	cmp	r3, #0
 8015054:	d0eb      	beq.n	801502e <mem_cmp+0x18>

	return r;
 8015056:	697b      	ldr	r3, [r7, #20]
}
 8015058:	4618      	mov	r0, r3
 801505a:	3724      	adds	r7, #36	@ 0x24
 801505c:	46bd      	mov	sp, r7
 801505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015062:	4770      	bx	lr

08015064 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8015064:	b480      	push	{r7}
 8015066:	b083      	sub	sp, #12
 8015068:	af00      	add	r7, sp, #0
 801506a:	6078      	str	r0, [r7, #4]
 801506c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801506e:	e002      	b.n	8015076 <chk_chr+0x12>
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	3301      	adds	r3, #1
 8015074:	607b      	str	r3, [r7, #4]
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	781b      	ldrb	r3, [r3, #0]
 801507a:	2b00      	cmp	r3, #0
 801507c:	d005      	beq.n	801508a <chk_chr+0x26>
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	781b      	ldrb	r3, [r3, #0]
 8015082:	461a      	mov	r2, r3
 8015084:	683b      	ldr	r3, [r7, #0]
 8015086:	4293      	cmp	r3, r2
 8015088:	d1f2      	bne.n	8015070 <chk_chr+0xc>
	return *str;
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	781b      	ldrb	r3, [r3, #0]
}
 801508e:	4618      	mov	r0, r3
 8015090:	370c      	adds	r7, #12
 8015092:	46bd      	mov	sp, r7
 8015094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015098:	4770      	bx	lr

0801509a <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 801509a:	b580      	push	{r7, lr}
 801509c:	b082      	sub	sp, #8
 801509e:	af00      	add	r7, sp, #0
 80150a0:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d009      	beq.n	80150bc <lock_fs+0x22>
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	68db      	ldr	r3, [r3, #12]
 80150ac:	4618      	mov	r0, r3
 80150ae:	f002 fd10 	bl	8017ad2 <ff_req_grant>
 80150b2:	4603      	mov	r3, r0
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d001      	beq.n	80150bc <lock_fs+0x22>
 80150b8:	2301      	movs	r3, #1
 80150ba:	e000      	b.n	80150be <lock_fs+0x24>
 80150bc:	2300      	movs	r3, #0
}
 80150be:	4618      	mov	r0, r3
 80150c0:	3708      	adds	r7, #8
 80150c2:	46bd      	mov	sp, r7
 80150c4:	bd80      	pop	{r7, pc}

080150c6 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80150c6:	b580      	push	{r7, lr}
 80150c8:	b082      	sub	sp, #8
 80150ca:	af00      	add	r7, sp, #0
 80150cc:	6078      	str	r0, [r7, #4]
 80150ce:	460b      	mov	r3, r1
 80150d0:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d00d      	beq.n	80150f4 <unlock_fs+0x2e>
 80150d8:	78fb      	ldrb	r3, [r7, #3]
 80150da:	2b0c      	cmp	r3, #12
 80150dc:	d00a      	beq.n	80150f4 <unlock_fs+0x2e>
 80150de:	78fb      	ldrb	r3, [r7, #3]
 80150e0:	2b0b      	cmp	r3, #11
 80150e2:	d007      	beq.n	80150f4 <unlock_fs+0x2e>
 80150e4:	78fb      	ldrb	r3, [r7, #3]
 80150e6:	2b0f      	cmp	r3, #15
 80150e8:	d004      	beq.n	80150f4 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	68db      	ldr	r3, [r3, #12]
 80150ee:	4618      	mov	r0, r3
 80150f0:	f002 fd04 	bl	8017afc <ff_rel_grant>
	}
}
 80150f4:	bf00      	nop
 80150f6:	3708      	adds	r7, #8
 80150f8:	46bd      	mov	sp, r7
 80150fa:	bd80      	pop	{r7, pc}

080150fc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80150fc:	b480      	push	{r7}
 80150fe:	b085      	sub	sp, #20
 8015100:	af00      	add	r7, sp, #0
 8015102:	6078      	str	r0, [r7, #4]
 8015104:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8015106:	2300      	movs	r3, #0
 8015108:	60bb      	str	r3, [r7, #8]
 801510a:	68bb      	ldr	r3, [r7, #8]
 801510c:	60fb      	str	r3, [r7, #12]
 801510e:	e029      	b.n	8015164 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8015110:	4a27      	ldr	r2, [pc, #156]	@ (80151b0 <chk_lock+0xb4>)
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	011b      	lsls	r3, r3, #4
 8015116:	4413      	add	r3, r2
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	2b00      	cmp	r3, #0
 801511c:	d01d      	beq.n	801515a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801511e:	4a24      	ldr	r2, [pc, #144]	@ (80151b0 <chk_lock+0xb4>)
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	011b      	lsls	r3, r3, #4
 8015124:	4413      	add	r3, r2
 8015126:	681a      	ldr	r2, [r3, #0]
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	429a      	cmp	r2, r3
 801512e:	d116      	bne.n	801515e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8015130:	4a1f      	ldr	r2, [pc, #124]	@ (80151b0 <chk_lock+0xb4>)
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	011b      	lsls	r3, r3, #4
 8015136:	4413      	add	r3, r2
 8015138:	3304      	adds	r3, #4
 801513a:	681a      	ldr	r2, [r3, #0]
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8015140:	429a      	cmp	r2, r3
 8015142:	d10c      	bne.n	801515e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8015144:	4a1a      	ldr	r2, [pc, #104]	@ (80151b0 <chk_lock+0xb4>)
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	011b      	lsls	r3, r3, #4
 801514a:	4413      	add	r3, r2
 801514c:	3308      	adds	r3, #8
 801514e:	681a      	ldr	r2, [r3, #0]
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8015154:	429a      	cmp	r2, r3
 8015156:	d102      	bne.n	801515e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8015158:	e007      	b.n	801516a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801515a:	2301      	movs	r3, #1
 801515c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	3301      	adds	r3, #1
 8015162:	60fb      	str	r3, [r7, #12]
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	2b01      	cmp	r3, #1
 8015168:	d9d2      	bls.n	8015110 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	2b02      	cmp	r3, #2
 801516e:	d109      	bne.n	8015184 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8015170:	68bb      	ldr	r3, [r7, #8]
 8015172:	2b00      	cmp	r3, #0
 8015174:	d102      	bne.n	801517c <chk_lock+0x80>
 8015176:	683b      	ldr	r3, [r7, #0]
 8015178:	2b02      	cmp	r3, #2
 801517a:	d101      	bne.n	8015180 <chk_lock+0x84>
 801517c:	2300      	movs	r3, #0
 801517e:	e010      	b.n	80151a2 <chk_lock+0xa6>
 8015180:	2312      	movs	r3, #18
 8015182:	e00e      	b.n	80151a2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8015184:	683b      	ldr	r3, [r7, #0]
 8015186:	2b00      	cmp	r3, #0
 8015188:	d108      	bne.n	801519c <chk_lock+0xa0>
 801518a:	4a09      	ldr	r2, [pc, #36]	@ (80151b0 <chk_lock+0xb4>)
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	011b      	lsls	r3, r3, #4
 8015190:	4413      	add	r3, r2
 8015192:	330c      	adds	r3, #12
 8015194:	881b      	ldrh	r3, [r3, #0]
 8015196:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801519a:	d101      	bne.n	80151a0 <chk_lock+0xa4>
 801519c:	2310      	movs	r3, #16
 801519e:	e000      	b.n	80151a2 <chk_lock+0xa6>
 80151a0:	2300      	movs	r3, #0
}
 80151a2:	4618      	mov	r0, r3
 80151a4:	3714      	adds	r7, #20
 80151a6:	46bd      	mov	sp, r7
 80151a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ac:	4770      	bx	lr
 80151ae:	bf00      	nop
 80151b0:	200023e8 	.word	0x200023e8

080151b4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80151b4:	b480      	push	{r7}
 80151b6:	b083      	sub	sp, #12
 80151b8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80151ba:	2300      	movs	r3, #0
 80151bc:	607b      	str	r3, [r7, #4]
 80151be:	e002      	b.n	80151c6 <enq_lock+0x12>
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	3301      	adds	r3, #1
 80151c4:	607b      	str	r3, [r7, #4]
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	2b01      	cmp	r3, #1
 80151ca:	d806      	bhi.n	80151da <enq_lock+0x26>
 80151cc:	4a09      	ldr	r2, [pc, #36]	@ (80151f4 <enq_lock+0x40>)
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	011b      	lsls	r3, r3, #4
 80151d2:	4413      	add	r3, r2
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d1f2      	bne.n	80151c0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	2b02      	cmp	r3, #2
 80151de:	bf14      	ite	ne
 80151e0:	2301      	movne	r3, #1
 80151e2:	2300      	moveq	r3, #0
 80151e4:	b2db      	uxtb	r3, r3
}
 80151e6:	4618      	mov	r0, r3
 80151e8:	370c      	adds	r7, #12
 80151ea:	46bd      	mov	sp, r7
 80151ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151f0:	4770      	bx	lr
 80151f2:	bf00      	nop
 80151f4:	200023e8 	.word	0x200023e8

080151f8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80151f8:	b480      	push	{r7}
 80151fa:	b085      	sub	sp, #20
 80151fc:	af00      	add	r7, sp, #0
 80151fe:	6078      	str	r0, [r7, #4]
 8015200:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8015202:	2300      	movs	r3, #0
 8015204:	60fb      	str	r3, [r7, #12]
 8015206:	e01f      	b.n	8015248 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8015208:	4a41      	ldr	r2, [pc, #260]	@ (8015310 <inc_lock+0x118>)
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	011b      	lsls	r3, r3, #4
 801520e:	4413      	add	r3, r2
 8015210:	681a      	ldr	r2, [r3, #0]
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	681b      	ldr	r3, [r3, #0]
 8015216:	429a      	cmp	r2, r3
 8015218:	d113      	bne.n	8015242 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801521a:	4a3d      	ldr	r2, [pc, #244]	@ (8015310 <inc_lock+0x118>)
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	011b      	lsls	r3, r3, #4
 8015220:	4413      	add	r3, r2
 8015222:	3304      	adds	r3, #4
 8015224:	681a      	ldr	r2, [r3, #0]
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801522a:	429a      	cmp	r2, r3
 801522c:	d109      	bne.n	8015242 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801522e:	4a38      	ldr	r2, [pc, #224]	@ (8015310 <inc_lock+0x118>)
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	011b      	lsls	r3, r3, #4
 8015234:	4413      	add	r3, r2
 8015236:	3308      	adds	r3, #8
 8015238:	681a      	ldr	r2, [r3, #0]
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801523e:	429a      	cmp	r2, r3
 8015240:	d006      	beq.n	8015250 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	3301      	adds	r3, #1
 8015246:	60fb      	str	r3, [r7, #12]
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	2b01      	cmp	r3, #1
 801524c:	d9dc      	bls.n	8015208 <inc_lock+0x10>
 801524e:	e000      	b.n	8015252 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8015250:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	2b02      	cmp	r3, #2
 8015256:	d132      	bne.n	80152be <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8015258:	2300      	movs	r3, #0
 801525a:	60fb      	str	r3, [r7, #12]
 801525c:	e002      	b.n	8015264 <inc_lock+0x6c>
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	3301      	adds	r3, #1
 8015262:	60fb      	str	r3, [r7, #12]
 8015264:	68fb      	ldr	r3, [r7, #12]
 8015266:	2b01      	cmp	r3, #1
 8015268:	d806      	bhi.n	8015278 <inc_lock+0x80>
 801526a:	4a29      	ldr	r2, [pc, #164]	@ (8015310 <inc_lock+0x118>)
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	011b      	lsls	r3, r3, #4
 8015270:	4413      	add	r3, r2
 8015272:	681b      	ldr	r3, [r3, #0]
 8015274:	2b00      	cmp	r3, #0
 8015276:	d1f2      	bne.n	801525e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8015278:	68fb      	ldr	r3, [r7, #12]
 801527a:	2b02      	cmp	r3, #2
 801527c:	d101      	bne.n	8015282 <inc_lock+0x8a>
 801527e:	2300      	movs	r3, #0
 8015280:	e040      	b.n	8015304 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	681a      	ldr	r2, [r3, #0]
 8015286:	4922      	ldr	r1, [pc, #136]	@ (8015310 <inc_lock+0x118>)
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	011b      	lsls	r3, r3, #4
 801528c:	440b      	add	r3, r1
 801528e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	689a      	ldr	r2, [r3, #8]
 8015294:	491e      	ldr	r1, [pc, #120]	@ (8015310 <inc_lock+0x118>)
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	011b      	lsls	r3, r3, #4
 801529a:	440b      	add	r3, r1
 801529c:	3304      	adds	r3, #4
 801529e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	695a      	ldr	r2, [r3, #20]
 80152a4:	491a      	ldr	r1, [pc, #104]	@ (8015310 <inc_lock+0x118>)
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	011b      	lsls	r3, r3, #4
 80152aa:	440b      	add	r3, r1
 80152ac:	3308      	adds	r3, #8
 80152ae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80152b0:	4a17      	ldr	r2, [pc, #92]	@ (8015310 <inc_lock+0x118>)
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	011b      	lsls	r3, r3, #4
 80152b6:	4413      	add	r3, r2
 80152b8:	330c      	adds	r3, #12
 80152ba:	2200      	movs	r2, #0
 80152bc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80152be:	683b      	ldr	r3, [r7, #0]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d009      	beq.n	80152d8 <inc_lock+0xe0>
 80152c4:	4a12      	ldr	r2, [pc, #72]	@ (8015310 <inc_lock+0x118>)
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	011b      	lsls	r3, r3, #4
 80152ca:	4413      	add	r3, r2
 80152cc:	330c      	adds	r3, #12
 80152ce:	881b      	ldrh	r3, [r3, #0]
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d001      	beq.n	80152d8 <inc_lock+0xe0>
 80152d4:	2300      	movs	r3, #0
 80152d6:	e015      	b.n	8015304 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80152d8:	683b      	ldr	r3, [r7, #0]
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d108      	bne.n	80152f0 <inc_lock+0xf8>
 80152de:	4a0c      	ldr	r2, [pc, #48]	@ (8015310 <inc_lock+0x118>)
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	011b      	lsls	r3, r3, #4
 80152e4:	4413      	add	r3, r2
 80152e6:	330c      	adds	r3, #12
 80152e8:	881b      	ldrh	r3, [r3, #0]
 80152ea:	3301      	adds	r3, #1
 80152ec:	b29a      	uxth	r2, r3
 80152ee:	e001      	b.n	80152f4 <inc_lock+0xfc>
 80152f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80152f4:	4906      	ldr	r1, [pc, #24]	@ (8015310 <inc_lock+0x118>)
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	011b      	lsls	r3, r3, #4
 80152fa:	440b      	add	r3, r1
 80152fc:	330c      	adds	r3, #12
 80152fe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	3301      	adds	r3, #1
}
 8015304:	4618      	mov	r0, r3
 8015306:	3714      	adds	r7, #20
 8015308:	46bd      	mov	sp, r7
 801530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801530e:	4770      	bx	lr
 8015310:	200023e8 	.word	0x200023e8

08015314 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8015314:	b480      	push	{r7}
 8015316:	b085      	sub	sp, #20
 8015318:	af00      	add	r7, sp, #0
 801531a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	3b01      	subs	r3, #1
 8015320:	607b      	str	r3, [r7, #4]
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	2b01      	cmp	r3, #1
 8015326:	d825      	bhi.n	8015374 <dec_lock+0x60>
		n = Files[i].ctr;
 8015328:	4a17      	ldr	r2, [pc, #92]	@ (8015388 <dec_lock+0x74>)
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	011b      	lsls	r3, r3, #4
 801532e:	4413      	add	r3, r2
 8015330:	330c      	adds	r3, #12
 8015332:	881b      	ldrh	r3, [r3, #0]
 8015334:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8015336:	89fb      	ldrh	r3, [r7, #14]
 8015338:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801533c:	d101      	bne.n	8015342 <dec_lock+0x2e>
 801533e:	2300      	movs	r3, #0
 8015340:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8015342:	89fb      	ldrh	r3, [r7, #14]
 8015344:	2b00      	cmp	r3, #0
 8015346:	d002      	beq.n	801534e <dec_lock+0x3a>
 8015348:	89fb      	ldrh	r3, [r7, #14]
 801534a:	3b01      	subs	r3, #1
 801534c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801534e:	4a0e      	ldr	r2, [pc, #56]	@ (8015388 <dec_lock+0x74>)
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	011b      	lsls	r3, r3, #4
 8015354:	4413      	add	r3, r2
 8015356:	330c      	adds	r3, #12
 8015358:	89fa      	ldrh	r2, [r7, #14]
 801535a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801535c:	89fb      	ldrh	r3, [r7, #14]
 801535e:	2b00      	cmp	r3, #0
 8015360:	d105      	bne.n	801536e <dec_lock+0x5a>
 8015362:	4a09      	ldr	r2, [pc, #36]	@ (8015388 <dec_lock+0x74>)
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	011b      	lsls	r3, r3, #4
 8015368:	4413      	add	r3, r2
 801536a:	2200      	movs	r2, #0
 801536c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801536e:	2300      	movs	r3, #0
 8015370:	737b      	strb	r3, [r7, #13]
 8015372:	e001      	b.n	8015378 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8015374:	2302      	movs	r3, #2
 8015376:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8015378:	7b7b      	ldrb	r3, [r7, #13]
}
 801537a:	4618      	mov	r0, r3
 801537c:	3714      	adds	r7, #20
 801537e:	46bd      	mov	sp, r7
 8015380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015384:	4770      	bx	lr
 8015386:	bf00      	nop
 8015388:	200023e8 	.word	0x200023e8

0801538c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801538c:	b480      	push	{r7}
 801538e:	b085      	sub	sp, #20
 8015390:	af00      	add	r7, sp, #0
 8015392:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8015394:	2300      	movs	r3, #0
 8015396:	60fb      	str	r3, [r7, #12]
 8015398:	e010      	b.n	80153bc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801539a:	4a0d      	ldr	r2, [pc, #52]	@ (80153d0 <clear_lock+0x44>)
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	011b      	lsls	r3, r3, #4
 80153a0:	4413      	add	r3, r2
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	687a      	ldr	r2, [r7, #4]
 80153a6:	429a      	cmp	r2, r3
 80153a8:	d105      	bne.n	80153b6 <clear_lock+0x2a>
 80153aa:	4a09      	ldr	r2, [pc, #36]	@ (80153d0 <clear_lock+0x44>)
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	011b      	lsls	r3, r3, #4
 80153b0:	4413      	add	r3, r2
 80153b2:	2200      	movs	r2, #0
 80153b4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	3301      	adds	r3, #1
 80153ba:	60fb      	str	r3, [r7, #12]
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	2b01      	cmp	r3, #1
 80153c0:	d9eb      	bls.n	801539a <clear_lock+0xe>
	}
}
 80153c2:	bf00      	nop
 80153c4:	bf00      	nop
 80153c6:	3714      	adds	r7, #20
 80153c8:	46bd      	mov	sp, r7
 80153ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ce:	4770      	bx	lr
 80153d0:	200023e8 	.word	0x200023e8

080153d4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80153d4:	b580      	push	{r7, lr}
 80153d6:	b086      	sub	sp, #24
 80153d8:	af00      	add	r7, sp, #0
 80153da:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80153dc:	2300      	movs	r3, #0
 80153de:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	78db      	ldrb	r3, [r3, #3]
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d034      	beq.n	8015452 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80153ec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	7858      	ldrb	r0, [r3, #1]
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80153f8:	2301      	movs	r3, #1
 80153fa:	697a      	ldr	r2, [r7, #20]
 80153fc:	f7ff fd0e 	bl	8014e1c <disk_write>
 8015400:	4603      	mov	r3, r0
 8015402:	2b00      	cmp	r3, #0
 8015404:	d002      	beq.n	801540c <sync_window+0x38>
			res = FR_DISK_ERR;
 8015406:	2301      	movs	r3, #1
 8015408:	73fb      	strb	r3, [r7, #15]
 801540a:	e022      	b.n	8015452 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	2200      	movs	r2, #0
 8015410:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015416:	697a      	ldr	r2, [r7, #20]
 8015418:	1ad2      	subs	r2, r2, r3
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	69db      	ldr	r3, [r3, #28]
 801541e:	429a      	cmp	r2, r3
 8015420:	d217      	bcs.n	8015452 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	789b      	ldrb	r3, [r3, #2]
 8015426:	613b      	str	r3, [r7, #16]
 8015428:	e010      	b.n	801544c <sync_window+0x78>
					wsect += fs->fsize;
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	69db      	ldr	r3, [r3, #28]
 801542e:	697a      	ldr	r2, [r7, #20]
 8015430:	4413      	add	r3, r2
 8015432:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	7858      	ldrb	r0, [r3, #1]
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 801543e:	2301      	movs	r3, #1
 8015440:	697a      	ldr	r2, [r7, #20]
 8015442:	f7ff fceb 	bl	8014e1c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015446:	693b      	ldr	r3, [r7, #16]
 8015448:	3b01      	subs	r3, #1
 801544a:	613b      	str	r3, [r7, #16]
 801544c:	693b      	ldr	r3, [r7, #16]
 801544e:	2b01      	cmp	r3, #1
 8015450:	d8eb      	bhi.n	801542a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8015452:	7bfb      	ldrb	r3, [r7, #15]
}
 8015454:	4618      	mov	r0, r3
 8015456:	3718      	adds	r7, #24
 8015458:	46bd      	mov	sp, r7
 801545a:	bd80      	pop	{r7, pc}

0801545c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801545c:	b580      	push	{r7, lr}
 801545e:	b084      	sub	sp, #16
 8015460:	af00      	add	r7, sp, #0
 8015462:	6078      	str	r0, [r7, #4]
 8015464:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8015466:	2300      	movs	r3, #0
 8015468:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801546e:	683a      	ldr	r2, [r7, #0]
 8015470:	429a      	cmp	r2, r3
 8015472:	d01b      	beq.n	80154ac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8015474:	6878      	ldr	r0, [r7, #4]
 8015476:	f7ff ffad 	bl	80153d4 <sync_window>
 801547a:	4603      	mov	r3, r0
 801547c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801547e:	7bfb      	ldrb	r3, [r7, #15]
 8015480:	2b00      	cmp	r3, #0
 8015482:	d113      	bne.n	80154ac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	7858      	ldrb	r0, [r3, #1]
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 801548e:	2301      	movs	r3, #1
 8015490:	683a      	ldr	r2, [r7, #0]
 8015492:	f7ff fca3 	bl	8014ddc <disk_read>
 8015496:	4603      	mov	r3, r0
 8015498:	2b00      	cmp	r3, #0
 801549a:	d004      	beq.n	80154a6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801549c:	f04f 33ff 	mov.w	r3, #4294967295
 80154a0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80154a2:	2301      	movs	r3, #1
 80154a4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	683a      	ldr	r2, [r7, #0]
 80154aa:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 80154ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80154ae:	4618      	mov	r0, r3
 80154b0:	3710      	adds	r7, #16
 80154b2:	46bd      	mov	sp, r7
 80154b4:	bd80      	pop	{r7, pc}
	...

080154b8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80154b8:	b580      	push	{r7, lr}
 80154ba:	b084      	sub	sp, #16
 80154bc:	af00      	add	r7, sp, #0
 80154be:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80154c0:	6878      	ldr	r0, [r7, #4]
 80154c2:	f7ff ff87 	bl	80153d4 <sync_window>
 80154c6:	4603      	mov	r3, r0
 80154c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80154ca:	7bfb      	ldrb	r3, [r7, #15]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d158      	bne.n	8015582 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	781b      	ldrb	r3, [r3, #0]
 80154d4:	2b03      	cmp	r3, #3
 80154d6:	d148      	bne.n	801556a <sync_fs+0xb2>
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	791b      	ldrb	r3, [r3, #4]
 80154dc:	2b01      	cmp	r3, #1
 80154de:	d144      	bne.n	801556a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	3334      	adds	r3, #52	@ 0x34
 80154e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80154e8:	2100      	movs	r1, #0
 80154ea:	4618      	mov	r0, r3
 80154ec:	f7ff fd78 	bl	8014fe0 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	3334      	adds	r3, #52	@ 0x34
 80154f4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80154f8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80154fc:	4618      	mov	r0, r3
 80154fe:	f7ff fd07 	bl	8014f10 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	3334      	adds	r3, #52	@ 0x34
 8015506:	4921      	ldr	r1, [pc, #132]	@ (801558c <sync_fs+0xd4>)
 8015508:	4618      	mov	r0, r3
 801550a:	f7ff fd1c 	bl	8014f46 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	3334      	adds	r3, #52	@ 0x34
 8015512:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8015516:	491e      	ldr	r1, [pc, #120]	@ (8015590 <sync_fs+0xd8>)
 8015518:	4618      	mov	r0, r3
 801551a:	f7ff fd14 	bl	8014f46 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	3334      	adds	r3, #52	@ 0x34
 8015522:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	695b      	ldr	r3, [r3, #20]
 801552a:	4619      	mov	r1, r3
 801552c:	4610      	mov	r0, r2
 801552e:	f7ff fd0a 	bl	8014f46 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	3334      	adds	r3, #52	@ 0x34
 8015536:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	691b      	ldr	r3, [r3, #16]
 801553e:	4619      	mov	r1, r3
 8015540:	4610      	mov	r0, r2
 8015542:	f7ff fd00 	bl	8014f46 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	6a1b      	ldr	r3, [r3, #32]
 801554a:	1c5a      	adds	r2, r3, #1
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	7858      	ldrb	r0, [r3, #1]
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801555e:	2301      	movs	r3, #1
 8015560:	f7ff fc5c 	bl	8014e1c <disk_write>
			fs->fsi_flag = 0;
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	2200      	movs	r2, #0
 8015568:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	785b      	ldrb	r3, [r3, #1]
 801556e:	2200      	movs	r2, #0
 8015570:	2100      	movs	r1, #0
 8015572:	4618      	mov	r0, r3
 8015574:	f7ff fc72 	bl	8014e5c <disk_ioctl>
 8015578:	4603      	mov	r3, r0
 801557a:	2b00      	cmp	r3, #0
 801557c:	d001      	beq.n	8015582 <sync_fs+0xca>
 801557e:	2301      	movs	r3, #1
 8015580:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8015582:	7bfb      	ldrb	r3, [r7, #15]
}
 8015584:	4618      	mov	r0, r3
 8015586:	3710      	adds	r7, #16
 8015588:	46bd      	mov	sp, r7
 801558a:	bd80      	pop	{r7, pc}
 801558c:	41615252 	.word	0x41615252
 8015590:	61417272 	.word	0x61417272

08015594 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8015594:	b480      	push	{r7}
 8015596:	b083      	sub	sp, #12
 8015598:	af00      	add	r7, sp, #0
 801559a:	6078      	str	r0, [r7, #4]
 801559c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801559e:	683b      	ldr	r3, [r7, #0]
 80155a0:	3b02      	subs	r3, #2
 80155a2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	699b      	ldr	r3, [r3, #24]
 80155a8:	3b02      	subs	r3, #2
 80155aa:	683a      	ldr	r2, [r7, #0]
 80155ac:	429a      	cmp	r2, r3
 80155ae:	d301      	bcc.n	80155b4 <clust2sect+0x20>
 80155b0:	2300      	movs	r3, #0
 80155b2:	e008      	b.n	80155c6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	895b      	ldrh	r3, [r3, #10]
 80155b8:	461a      	mov	r2, r3
 80155ba:	683b      	ldr	r3, [r7, #0]
 80155bc:	fb03 f202 	mul.w	r2, r3, r2
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155c4:	4413      	add	r3, r2
}
 80155c6:	4618      	mov	r0, r3
 80155c8:	370c      	adds	r7, #12
 80155ca:	46bd      	mov	sp, r7
 80155cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155d0:	4770      	bx	lr

080155d2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80155d2:	b580      	push	{r7, lr}
 80155d4:	b086      	sub	sp, #24
 80155d6:	af00      	add	r7, sp, #0
 80155d8:	6078      	str	r0, [r7, #4]
 80155da:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80155e2:	683b      	ldr	r3, [r7, #0]
 80155e4:	2b01      	cmp	r3, #1
 80155e6:	d904      	bls.n	80155f2 <get_fat+0x20>
 80155e8:	693b      	ldr	r3, [r7, #16]
 80155ea:	699b      	ldr	r3, [r3, #24]
 80155ec:	683a      	ldr	r2, [r7, #0]
 80155ee:	429a      	cmp	r2, r3
 80155f0:	d302      	bcc.n	80155f8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80155f2:	2301      	movs	r3, #1
 80155f4:	617b      	str	r3, [r7, #20]
 80155f6:	e08e      	b.n	8015716 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80155f8:	f04f 33ff 	mov.w	r3, #4294967295
 80155fc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80155fe:	693b      	ldr	r3, [r7, #16]
 8015600:	781b      	ldrb	r3, [r3, #0]
 8015602:	2b03      	cmp	r3, #3
 8015604:	d061      	beq.n	80156ca <get_fat+0xf8>
 8015606:	2b03      	cmp	r3, #3
 8015608:	dc7b      	bgt.n	8015702 <get_fat+0x130>
 801560a:	2b01      	cmp	r3, #1
 801560c:	d002      	beq.n	8015614 <get_fat+0x42>
 801560e:	2b02      	cmp	r3, #2
 8015610:	d041      	beq.n	8015696 <get_fat+0xc4>
 8015612:	e076      	b.n	8015702 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8015614:	683b      	ldr	r3, [r7, #0]
 8015616:	60fb      	str	r3, [r7, #12]
 8015618:	68fb      	ldr	r3, [r7, #12]
 801561a:	085b      	lsrs	r3, r3, #1
 801561c:	68fa      	ldr	r2, [r7, #12]
 801561e:	4413      	add	r3, r2
 8015620:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015622:	693b      	ldr	r3, [r7, #16]
 8015624:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015626:	68fb      	ldr	r3, [r7, #12]
 8015628:	0a5b      	lsrs	r3, r3, #9
 801562a:	4413      	add	r3, r2
 801562c:	4619      	mov	r1, r3
 801562e:	6938      	ldr	r0, [r7, #16]
 8015630:	f7ff ff14 	bl	801545c <move_window>
 8015634:	4603      	mov	r3, r0
 8015636:	2b00      	cmp	r3, #0
 8015638:	d166      	bne.n	8015708 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 801563a:	68fb      	ldr	r3, [r7, #12]
 801563c:	1c5a      	adds	r2, r3, #1
 801563e:	60fa      	str	r2, [r7, #12]
 8015640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015644:	693a      	ldr	r2, [r7, #16]
 8015646:	4413      	add	r3, r2
 8015648:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801564c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801564e:	693b      	ldr	r3, [r7, #16]
 8015650:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	0a5b      	lsrs	r3, r3, #9
 8015656:	4413      	add	r3, r2
 8015658:	4619      	mov	r1, r3
 801565a:	6938      	ldr	r0, [r7, #16]
 801565c:	f7ff fefe 	bl	801545c <move_window>
 8015660:	4603      	mov	r3, r0
 8015662:	2b00      	cmp	r3, #0
 8015664:	d152      	bne.n	801570c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8015666:	68fb      	ldr	r3, [r7, #12]
 8015668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801566c:	693a      	ldr	r2, [r7, #16]
 801566e:	4413      	add	r3, r2
 8015670:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8015674:	021b      	lsls	r3, r3, #8
 8015676:	68ba      	ldr	r2, [r7, #8]
 8015678:	4313      	orrs	r3, r2
 801567a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801567c:	683b      	ldr	r3, [r7, #0]
 801567e:	f003 0301 	and.w	r3, r3, #1
 8015682:	2b00      	cmp	r3, #0
 8015684:	d002      	beq.n	801568c <get_fat+0xba>
 8015686:	68bb      	ldr	r3, [r7, #8]
 8015688:	091b      	lsrs	r3, r3, #4
 801568a:	e002      	b.n	8015692 <get_fat+0xc0>
 801568c:	68bb      	ldr	r3, [r7, #8]
 801568e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015692:	617b      	str	r3, [r7, #20]
			break;
 8015694:	e03f      	b.n	8015716 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015696:	693b      	ldr	r3, [r7, #16]
 8015698:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801569a:	683b      	ldr	r3, [r7, #0]
 801569c:	0a1b      	lsrs	r3, r3, #8
 801569e:	4413      	add	r3, r2
 80156a0:	4619      	mov	r1, r3
 80156a2:	6938      	ldr	r0, [r7, #16]
 80156a4:	f7ff feda 	bl	801545c <move_window>
 80156a8:	4603      	mov	r3, r0
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d130      	bne.n	8015710 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80156ae:	693b      	ldr	r3, [r7, #16]
 80156b0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80156b4:	683b      	ldr	r3, [r7, #0]
 80156b6:	005b      	lsls	r3, r3, #1
 80156b8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80156bc:	4413      	add	r3, r2
 80156be:	4618      	mov	r0, r3
 80156c0:	f7ff fbea 	bl	8014e98 <ld_word>
 80156c4:	4603      	mov	r3, r0
 80156c6:	617b      	str	r3, [r7, #20]
			break;
 80156c8:	e025      	b.n	8015716 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80156ca:	693b      	ldr	r3, [r7, #16]
 80156cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80156ce:	683b      	ldr	r3, [r7, #0]
 80156d0:	09db      	lsrs	r3, r3, #7
 80156d2:	4413      	add	r3, r2
 80156d4:	4619      	mov	r1, r3
 80156d6:	6938      	ldr	r0, [r7, #16]
 80156d8:	f7ff fec0 	bl	801545c <move_window>
 80156dc:	4603      	mov	r3, r0
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d118      	bne.n	8015714 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80156e2:	693b      	ldr	r3, [r7, #16]
 80156e4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80156e8:	683b      	ldr	r3, [r7, #0]
 80156ea:	009b      	lsls	r3, r3, #2
 80156ec:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80156f0:	4413      	add	r3, r2
 80156f2:	4618      	mov	r0, r3
 80156f4:	f7ff fbe9 	bl	8014eca <ld_dword>
 80156f8:	4603      	mov	r3, r0
 80156fa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80156fe:	617b      	str	r3, [r7, #20]
			break;
 8015700:	e009      	b.n	8015716 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8015702:	2301      	movs	r3, #1
 8015704:	617b      	str	r3, [r7, #20]
 8015706:	e006      	b.n	8015716 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015708:	bf00      	nop
 801570a:	e004      	b.n	8015716 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801570c:	bf00      	nop
 801570e:	e002      	b.n	8015716 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015710:	bf00      	nop
 8015712:	e000      	b.n	8015716 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015714:	bf00      	nop
		}
	}

	return val;
 8015716:	697b      	ldr	r3, [r7, #20]
}
 8015718:	4618      	mov	r0, r3
 801571a:	3718      	adds	r7, #24
 801571c:	46bd      	mov	sp, r7
 801571e:	bd80      	pop	{r7, pc}

08015720 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8015720:	b590      	push	{r4, r7, lr}
 8015722:	b089      	sub	sp, #36	@ 0x24
 8015724:	af00      	add	r7, sp, #0
 8015726:	60f8      	str	r0, [r7, #12]
 8015728:	60b9      	str	r1, [r7, #8]
 801572a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801572c:	2302      	movs	r3, #2
 801572e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8015730:	68bb      	ldr	r3, [r7, #8]
 8015732:	2b01      	cmp	r3, #1
 8015734:	f240 80d9 	bls.w	80158ea <put_fat+0x1ca>
 8015738:	68fb      	ldr	r3, [r7, #12]
 801573a:	699b      	ldr	r3, [r3, #24]
 801573c:	68ba      	ldr	r2, [r7, #8]
 801573e:	429a      	cmp	r2, r3
 8015740:	f080 80d3 	bcs.w	80158ea <put_fat+0x1ca>
		switch (fs->fs_type) {
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	781b      	ldrb	r3, [r3, #0]
 8015748:	2b03      	cmp	r3, #3
 801574a:	f000 8096 	beq.w	801587a <put_fat+0x15a>
 801574e:	2b03      	cmp	r3, #3
 8015750:	f300 80cb 	bgt.w	80158ea <put_fat+0x1ca>
 8015754:	2b01      	cmp	r3, #1
 8015756:	d002      	beq.n	801575e <put_fat+0x3e>
 8015758:	2b02      	cmp	r3, #2
 801575a:	d06e      	beq.n	801583a <put_fat+0x11a>
 801575c:	e0c5      	b.n	80158ea <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801575e:	68bb      	ldr	r3, [r7, #8]
 8015760:	61bb      	str	r3, [r7, #24]
 8015762:	69bb      	ldr	r3, [r7, #24]
 8015764:	085b      	lsrs	r3, r3, #1
 8015766:	69ba      	ldr	r2, [r7, #24]
 8015768:	4413      	add	r3, r2
 801576a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801576c:	68fb      	ldr	r3, [r7, #12]
 801576e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015770:	69bb      	ldr	r3, [r7, #24]
 8015772:	0a5b      	lsrs	r3, r3, #9
 8015774:	4413      	add	r3, r2
 8015776:	4619      	mov	r1, r3
 8015778:	68f8      	ldr	r0, [r7, #12]
 801577a:	f7ff fe6f 	bl	801545c <move_window>
 801577e:	4603      	mov	r3, r0
 8015780:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015782:	7ffb      	ldrb	r3, [r7, #31]
 8015784:	2b00      	cmp	r3, #0
 8015786:	f040 80a9 	bne.w	80158dc <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8015790:	69bb      	ldr	r3, [r7, #24]
 8015792:	1c59      	adds	r1, r3, #1
 8015794:	61b9      	str	r1, [r7, #24]
 8015796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801579a:	4413      	add	r3, r2
 801579c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801579e:	68bb      	ldr	r3, [r7, #8]
 80157a0:	f003 0301 	and.w	r3, r3, #1
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d00d      	beq.n	80157c4 <put_fat+0xa4>
 80157a8:	697b      	ldr	r3, [r7, #20]
 80157aa:	781b      	ldrb	r3, [r3, #0]
 80157ac:	b25b      	sxtb	r3, r3
 80157ae:	f003 030f 	and.w	r3, r3, #15
 80157b2:	b25a      	sxtb	r2, r3
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	b25b      	sxtb	r3, r3
 80157b8:	011b      	lsls	r3, r3, #4
 80157ba:	b25b      	sxtb	r3, r3
 80157bc:	4313      	orrs	r3, r2
 80157be:	b25b      	sxtb	r3, r3
 80157c0:	b2db      	uxtb	r3, r3
 80157c2:	e001      	b.n	80157c8 <put_fat+0xa8>
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	b2db      	uxtb	r3, r3
 80157c8:	697a      	ldr	r2, [r7, #20]
 80157ca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	2201      	movs	r2, #1
 80157d0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80157d6:	69bb      	ldr	r3, [r7, #24]
 80157d8:	0a5b      	lsrs	r3, r3, #9
 80157da:	4413      	add	r3, r2
 80157dc:	4619      	mov	r1, r3
 80157de:	68f8      	ldr	r0, [r7, #12]
 80157e0:	f7ff fe3c 	bl	801545c <move_window>
 80157e4:	4603      	mov	r3, r0
 80157e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80157e8:	7ffb      	ldrb	r3, [r7, #31]
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d178      	bne.n	80158e0 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80157f4:	69bb      	ldr	r3, [r7, #24]
 80157f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80157fa:	4413      	add	r3, r2
 80157fc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80157fe:	68bb      	ldr	r3, [r7, #8]
 8015800:	f003 0301 	and.w	r3, r3, #1
 8015804:	2b00      	cmp	r3, #0
 8015806:	d003      	beq.n	8015810 <put_fat+0xf0>
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	091b      	lsrs	r3, r3, #4
 801580c:	b2db      	uxtb	r3, r3
 801580e:	e00e      	b.n	801582e <put_fat+0x10e>
 8015810:	697b      	ldr	r3, [r7, #20]
 8015812:	781b      	ldrb	r3, [r3, #0]
 8015814:	b25b      	sxtb	r3, r3
 8015816:	f023 030f 	bic.w	r3, r3, #15
 801581a:	b25a      	sxtb	r2, r3
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	0a1b      	lsrs	r3, r3, #8
 8015820:	b25b      	sxtb	r3, r3
 8015822:	f003 030f 	and.w	r3, r3, #15
 8015826:	b25b      	sxtb	r3, r3
 8015828:	4313      	orrs	r3, r2
 801582a:	b25b      	sxtb	r3, r3
 801582c:	b2db      	uxtb	r3, r3
 801582e:	697a      	ldr	r2, [r7, #20]
 8015830:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	2201      	movs	r2, #1
 8015836:	70da      	strb	r2, [r3, #3]
			break;
 8015838:	e057      	b.n	80158ea <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801583a:	68fb      	ldr	r3, [r7, #12]
 801583c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801583e:	68bb      	ldr	r3, [r7, #8]
 8015840:	0a1b      	lsrs	r3, r3, #8
 8015842:	4413      	add	r3, r2
 8015844:	4619      	mov	r1, r3
 8015846:	68f8      	ldr	r0, [r7, #12]
 8015848:	f7ff fe08 	bl	801545c <move_window>
 801584c:	4603      	mov	r3, r0
 801584e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015850:	7ffb      	ldrb	r3, [r7, #31]
 8015852:	2b00      	cmp	r3, #0
 8015854:	d146      	bne.n	80158e4 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801585c:	68bb      	ldr	r3, [r7, #8]
 801585e:	005b      	lsls	r3, r3, #1
 8015860:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8015864:	4413      	add	r3, r2
 8015866:	687a      	ldr	r2, [r7, #4]
 8015868:	b292      	uxth	r2, r2
 801586a:	4611      	mov	r1, r2
 801586c:	4618      	mov	r0, r3
 801586e:	f7ff fb4f 	bl	8014f10 <st_word>
			fs->wflag = 1;
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	2201      	movs	r2, #1
 8015876:	70da      	strb	r2, [r3, #3]
			break;
 8015878:	e037      	b.n	80158ea <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801587e:	68bb      	ldr	r3, [r7, #8]
 8015880:	09db      	lsrs	r3, r3, #7
 8015882:	4413      	add	r3, r2
 8015884:	4619      	mov	r1, r3
 8015886:	68f8      	ldr	r0, [r7, #12]
 8015888:	f7ff fde8 	bl	801545c <move_window>
 801588c:	4603      	mov	r3, r0
 801588e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015890:	7ffb      	ldrb	r3, [r7, #31]
 8015892:	2b00      	cmp	r3, #0
 8015894:	d128      	bne.n	80158e8 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80158a2:	68bb      	ldr	r3, [r7, #8]
 80158a4:	009b      	lsls	r3, r3, #2
 80158a6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80158aa:	4413      	add	r3, r2
 80158ac:	4618      	mov	r0, r3
 80158ae:	f7ff fb0c 	bl	8014eca <ld_dword>
 80158b2:	4603      	mov	r3, r0
 80158b4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80158b8:	4323      	orrs	r3, r4
 80158ba:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80158bc:	68fb      	ldr	r3, [r7, #12]
 80158be:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80158c2:	68bb      	ldr	r3, [r7, #8]
 80158c4:	009b      	lsls	r3, r3, #2
 80158c6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80158ca:	4413      	add	r3, r2
 80158cc:	6879      	ldr	r1, [r7, #4]
 80158ce:	4618      	mov	r0, r3
 80158d0:	f7ff fb39 	bl	8014f46 <st_dword>
			fs->wflag = 1;
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	2201      	movs	r2, #1
 80158d8:	70da      	strb	r2, [r3, #3]
			break;
 80158da:	e006      	b.n	80158ea <put_fat+0x1ca>
			if (res != FR_OK) break;
 80158dc:	bf00      	nop
 80158de:	e004      	b.n	80158ea <put_fat+0x1ca>
			if (res != FR_OK) break;
 80158e0:	bf00      	nop
 80158e2:	e002      	b.n	80158ea <put_fat+0x1ca>
			if (res != FR_OK) break;
 80158e4:	bf00      	nop
 80158e6:	e000      	b.n	80158ea <put_fat+0x1ca>
			if (res != FR_OK) break;
 80158e8:	bf00      	nop
		}
	}
	return res;
 80158ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80158ec:	4618      	mov	r0, r3
 80158ee:	3724      	adds	r7, #36	@ 0x24
 80158f0:	46bd      	mov	sp, r7
 80158f2:	bd90      	pop	{r4, r7, pc}

080158f4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80158f4:	b580      	push	{r7, lr}
 80158f6:	b088      	sub	sp, #32
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	60f8      	str	r0, [r7, #12]
 80158fc:	60b9      	str	r1, [r7, #8]
 80158fe:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8015900:	2300      	movs	r3, #0
 8015902:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801590a:	68bb      	ldr	r3, [r7, #8]
 801590c:	2b01      	cmp	r3, #1
 801590e:	d904      	bls.n	801591a <remove_chain+0x26>
 8015910:	69bb      	ldr	r3, [r7, #24]
 8015912:	699b      	ldr	r3, [r3, #24]
 8015914:	68ba      	ldr	r2, [r7, #8]
 8015916:	429a      	cmp	r2, r3
 8015918:	d301      	bcc.n	801591e <remove_chain+0x2a>
 801591a:	2302      	movs	r3, #2
 801591c:	e04b      	b.n	80159b6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	2b00      	cmp	r3, #0
 8015922:	d00c      	beq.n	801593e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8015924:	f04f 32ff 	mov.w	r2, #4294967295
 8015928:	6879      	ldr	r1, [r7, #4]
 801592a:	69b8      	ldr	r0, [r7, #24]
 801592c:	f7ff fef8 	bl	8015720 <put_fat>
 8015930:	4603      	mov	r3, r0
 8015932:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8015934:	7ffb      	ldrb	r3, [r7, #31]
 8015936:	2b00      	cmp	r3, #0
 8015938:	d001      	beq.n	801593e <remove_chain+0x4a>
 801593a:	7ffb      	ldrb	r3, [r7, #31]
 801593c:	e03b      	b.n	80159b6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801593e:	68b9      	ldr	r1, [r7, #8]
 8015940:	68f8      	ldr	r0, [r7, #12]
 8015942:	f7ff fe46 	bl	80155d2 <get_fat>
 8015946:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8015948:	697b      	ldr	r3, [r7, #20]
 801594a:	2b00      	cmp	r3, #0
 801594c:	d031      	beq.n	80159b2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801594e:	697b      	ldr	r3, [r7, #20]
 8015950:	2b01      	cmp	r3, #1
 8015952:	d101      	bne.n	8015958 <remove_chain+0x64>
 8015954:	2302      	movs	r3, #2
 8015956:	e02e      	b.n	80159b6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8015958:	697b      	ldr	r3, [r7, #20]
 801595a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801595e:	d101      	bne.n	8015964 <remove_chain+0x70>
 8015960:	2301      	movs	r3, #1
 8015962:	e028      	b.n	80159b6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8015964:	2200      	movs	r2, #0
 8015966:	68b9      	ldr	r1, [r7, #8]
 8015968:	69b8      	ldr	r0, [r7, #24]
 801596a:	f7ff fed9 	bl	8015720 <put_fat>
 801596e:	4603      	mov	r3, r0
 8015970:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8015972:	7ffb      	ldrb	r3, [r7, #31]
 8015974:	2b00      	cmp	r3, #0
 8015976:	d001      	beq.n	801597c <remove_chain+0x88>
 8015978:	7ffb      	ldrb	r3, [r7, #31]
 801597a:	e01c      	b.n	80159b6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801597c:	69bb      	ldr	r3, [r7, #24]
 801597e:	695a      	ldr	r2, [r3, #20]
 8015980:	69bb      	ldr	r3, [r7, #24]
 8015982:	699b      	ldr	r3, [r3, #24]
 8015984:	3b02      	subs	r3, #2
 8015986:	429a      	cmp	r2, r3
 8015988:	d20b      	bcs.n	80159a2 <remove_chain+0xae>
			fs->free_clst++;
 801598a:	69bb      	ldr	r3, [r7, #24]
 801598c:	695b      	ldr	r3, [r3, #20]
 801598e:	1c5a      	adds	r2, r3, #1
 8015990:	69bb      	ldr	r3, [r7, #24]
 8015992:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8015994:	69bb      	ldr	r3, [r7, #24]
 8015996:	791b      	ldrb	r3, [r3, #4]
 8015998:	f043 0301 	orr.w	r3, r3, #1
 801599c:	b2da      	uxtb	r2, r3
 801599e:	69bb      	ldr	r3, [r7, #24]
 80159a0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80159a2:	697b      	ldr	r3, [r7, #20]
 80159a4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80159a6:	69bb      	ldr	r3, [r7, #24]
 80159a8:	699b      	ldr	r3, [r3, #24]
 80159aa:	68ba      	ldr	r2, [r7, #8]
 80159ac:	429a      	cmp	r2, r3
 80159ae:	d3c6      	bcc.n	801593e <remove_chain+0x4a>
 80159b0:	e000      	b.n	80159b4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80159b2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80159b4:	2300      	movs	r3, #0
}
 80159b6:	4618      	mov	r0, r3
 80159b8:	3720      	adds	r7, #32
 80159ba:	46bd      	mov	sp, r7
 80159bc:	bd80      	pop	{r7, pc}

080159be <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80159be:	b580      	push	{r7, lr}
 80159c0:	b088      	sub	sp, #32
 80159c2:	af00      	add	r7, sp, #0
 80159c4:	6078      	str	r0, [r7, #4]
 80159c6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	681b      	ldr	r3, [r3, #0]
 80159cc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80159ce:	683b      	ldr	r3, [r7, #0]
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d10d      	bne.n	80159f0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80159d4:	693b      	ldr	r3, [r7, #16]
 80159d6:	691b      	ldr	r3, [r3, #16]
 80159d8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80159da:	69bb      	ldr	r3, [r7, #24]
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d004      	beq.n	80159ea <create_chain+0x2c>
 80159e0:	693b      	ldr	r3, [r7, #16]
 80159e2:	699b      	ldr	r3, [r3, #24]
 80159e4:	69ba      	ldr	r2, [r7, #24]
 80159e6:	429a      	cmp	r2, r3
 80159e8:	d31b      	bcc.n	8015a22 <create_chain+0x64>
 80159ea:	2301      	movs	r3, #1
 80159ec:	61bb      	str	r3, [r7, #24]
 80159ee:	e018      	b.n	8015a22 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80159f0:	6839      	ldr	r1, [r7, #0]
 80159f2:	6878      	ldr	r0, [r7, #4]
 80159f4:	f7ff fded 	bl	80155d2 <get_fat>
 80159f8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	2b01      	cmp	r3, #1
 80159fe:	d801      	bhi.n	8015a04 <create_chain+0x46>
 8015a00:	2301      	movs	r3, #1
 8015a02:	e070      	b.n	8015ae6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a0a:	d101      	bne.n	8015a10 <create_chain+0x52>
 8015a0c:	68fb      	ldr	r3, [r7, #12]
 8015a0e:	e06a      	b.n	8015ae6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8015a10:	693b      	ldr	r3, [r7, #16]
 8015a12:	699b      	ldr	r3, [r3, #24]
 8015a14:	68fa      	ldr	r2, [r7, #12]
 8015a16:	429a      	cmp	r2, r3
 8015a18:	d201      	bcs.n	8015a1e <create_chain+0x60>
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	e063      	b.n	8015ae6 <create_chain+0x128>
		scl = clst;
 8015a1e:	683b      	ldr	r3, [r7, #0]
 8015a20:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8015a22:	69bb      	ldr	r3, [r7, #24]
 8015a24:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8015a26:	69fb      	ldr	r3, [r7, #28]
 8015a28:	3301      	adds	r3, #1
 8015a2a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8015a2c:	693b      	ldr	r3, [r7, #16]
 8015a2e:	699b      	ldr	r3, [r3, #24]
 8015a30:	69fa      	ldr	r2, [r7, #28]
 8015a32:	429a      	cmp	r2, r3
 8015a34:	d307      	bcc.n	8015a46 <create_chain+0x88>
				ncl = 2;
 8015a36:	2302      	movs	r3, #2
 8015a38:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8015a3a:	69fa      	ldr	r2, [r7, #28]
 8015a3c:	69bb      	ldr	r3, [r7, #24]
 8015a3e:	429a      	cmp	r2, r3
 8015a40:	d901      	bls.n	8015a46 <create_chain+0x88>
 8015a42:	2300      	movs	r3, #0
 8015a44:	e04f      	b.n	8015ae6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8015a46:	69f9      	ldr	r1, [r7, #28]
 8015a48:	6878      	ldr	r0, [r7, #4]
 8015a4a:	f7ff fdc2 	bl	80155d2 <get_fat>
 8015a4e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d00e      	beq.n	8015a74 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8015a56:	68fb      	ldr	r3, [r7, #12]
 8015a58:	2b01      	cmp	r3, #1
 8015a5a:	d003      	beq.n	8015a64 <create_chain+0xa6>
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a62:	d101      	bne.n	8015a68 <create_chain+0xaa>
 8015a64:	68fb      	ldr	r3, [r7, #12]
 8015a66:	e03e      	b.n	8015ae6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8015a68:	69fa      	ldr	r2, [r7, #28]
 8015a6a:	69bb      	ldr	r3, [r7, #24]
 8015a6c:	429a      	cmp	r2, r3
 8015a6e:	d1da      	bne.n	8015a26 <create_chain+0x68>
 8015a70:	2300      	movs	r3, #0
 8015a72:	e038      	b.n	8015ae6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8015a74:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8015a76:	f04f 32ff 	mov.w	r2, #4294967295
 8015a7a:	69f9      	ldr	r1, [r7, #28]
 8015a7c:	6938      	ldr	r0, [r7, #16]
 8015a7e:	f7ff fe4f 	bl	8015720 <put_fat>
 8015a82:	4603      	mov	r3, r0
 8015a84:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8015a86:	7dfb      	ldrb	r3, [r7, #23]
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d109      	bne.n	8015aa0 <create_chain+0xe2>
 8015a8c:	683b      	ldr	r3, [r7, #0]
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d006      	beq.n	8015aa0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8015a92:	69fa      	ldr	r2, [r7, #28]
 8015a94:	6839      	ldr	r1, [r7, #0]
 8015a96:	6938      	ldr	r0, [r7, #16]
 8015a98:	f7ff fe42 	bl	8015720 <put_fat>
 8015a9c:	4603      	mov	r3, r0
 8015a9e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8015aa0:	7dfb      	ldrb	r3, [r7, #23]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d116      	bne.n	8015ad4 <create_chain+0x116>
		fs->last_clst = ncl;
 8015aa6:	693b      	ldr	r3, [r7, #16]
 8015aa8:	69fa      	ldr	r2, [r7, #28]
 8015aaa:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8015aac:	693b      	ldr	r3, [r7, #16]
 8015aae:	695a      	ldr	r2, [r3, #20]
 8015ab0:	693b      	ldr	r3, [r7, #16]
 8015ab2:	699b      	ldr	r3, [r3, #24]
 8015ab4:	3b02      	subs	r3, #2
 8015ab6:	429a      	cmp	r2, r3
 8015ab8:	d804      	bhi.n	8015ac4 <create_chain+0x106>
 8015aba:	693b      	ldr	r3, [r7, #16]
 8015abc:	695b      	ldr	r3, [r3, #20]
 8015abe:	1e5a      	subs	r2, r3, #1
 8015ac0:	693b      	ldr	r3, [r7, #16]
 8015ac2:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8015ac4:	693b      	ldr	r3, [r7, #16]
 8015ac6:	791b      	ldrb	r3, [r3, #4]
 8015ac8:	f043 0301 	orr.w	r3, r3, #1
 8015acc:	b2da      	uxtb	r2, r3
 8015ace:	693b      	ldr	r3, [r7, #16]
 8015ad0:	711a      	strb	r2, [r3, #4]
 8015ad2:	e007      	b.n	8015ae4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8015ad4:	7dfb      	ldrb	r3, [r7, #23]
 8015ad6:	2b01      	cmp	r3, #1
 8015ad8:	d102      	bne.n	8015ae0 <create_chain+0x122>
 8015ada:	f04f 33ff 	mov.w	r3, #4294967295
 8015ade:	e000      	b.n	8015ae2 <create_chain+0x124>
 8015ae0:	2301      	movs	r3, #1
 8015ae2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8015ae4:	69fb      	ldr	r3, [r7, #28]
}
 8015ae6:	4618      	mov	r0, r3
 8015ae8:	3720      	adds	r7, #32
 8015aea:	46bd      	mov	sp, r7
 8015aec:	bd80      	pop	{r7, pc}

08015aee <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8015aee:	b480      	push	{r7}
 8015af0:	b087      	sub	sp, #28
 8015af2:	af00      	add	r7, sp, #0
 8015af4:	6078      	str	r0, [r7, #4]
 8015af6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	681b      	ldr	r3, [r3, #0]
 8015afc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b02:	3304      	adds	r3, #4
 8015b04:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8015b06:	683b      	ldr	r3, [r7, #0]
 8015b08:	0a5b      	lsrs	r3, r3, #9
 8015b0a:	68fa      	ldr	r2, [r7, #12]
 8015b0c:	8952      	ldrh	r2, [r2, #10]
 8015b0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8015b12:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8015b14:	693b      	ldr	r3, [r7, #16]
 8015b16:	1d1a      	adds	r2, r3, #4
 8015b18:	613a      	str	r2, [r7, #16]
 8015b1a:	681b      	ldr	r3, [r3, #0]
 8015b1c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8015b1e:	68bb      	ldr	r3, [r7, #8]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d101      	bne.n	8015b28 <clmt_clust+0x3a>
 8015b24:	2300      	movs	r3, #0
 8015b26:	e010      	b.n	8015b4a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8015b28:	697a      	ldr	r2, [r7, #20]
 8015b2a:	68bb      	ldr	r3, [r7, #8]
 8015b2c:	429a      	cmp	r2, r3
 8015b2e:	d307      	bcc.n	8015b40 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8015b30:	697a      	ldr	r2, [r7, #20]
 8015b32:	68bb      	ldr	r3, [r7, #8]
 8015b34:	1ad3      	subs	r3, r2, r3
 8015b36:	617b      	str	r3, [r7, #20]
 8015b38:	693b      	ldr	r3, [r7, #16]
 8015b3a:	3304      	adds	r3, #4
 8015b3c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8015b3e:	e7e9      	b.n	8015b14 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8015b40:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8015b42:	693b      	ldr	r3, [r7, #16]
 8015b44:	681a      	ldr	r2, [r3, #0]
 8015b46:	697b      	ldr	r3, [r7, #20]
 8015b48:	4413      	add	r3, r2
}
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	371c      	adds	r7, #28
 8015b4e:	46bd      	mov	sp, r7
 8015b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b54:	4770      	bx	lr

08015b56 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8015b56:	b580      	push	{r7, lr}
 8015b58:	b086      	sub	sp, #24
 8015b5a:	af00      	add	r7, sp, #0
 8015b5c:	6078      	str	r0, [r7, #4]
 8015b5e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8015b66:	683b      	ldr	r3, [r7, #0]
 8015b68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8015b6c:	d204      	bcs.n	8015b78 <dir_sdi+0x22>
 8015b6e:	683b      	ldr	r3, [r7, #0]
 8015b70:	f003 031f 	and.w	r3, r3, #31
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d001      	beq.n	8015b7c <dir_sdi+0x26>
		return FR_INT_ERR;
 8015b78:	2302      	movs	r3, #2
 8015b7a:	e063      	b.n	8015c44 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	683a      	ldr	r2, [r7, #0]
 8015b80:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	689b      	ldr	r3, [r3, #8]
 8015b86:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8015b88:	697b      	ldr	r3, [r7, #20]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d106      	bne.n	8015b9c <dir_sdi+0x46>
 8015b8e:	693b      	ldr	r3, [r7, #16]
 8015b90:	781b      	ldrb	r3, [r3, #0]
 8015b92:	2b02      	cmp	r3, #2
 8015b94:	d902      	bls.n	8015b9c <dir_sdi+0x46>
		clst = fs->dirbase;
 8015b96:	693b      	ldr	r3, [r7, #16]
 8015b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015b9a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8015b9c:	697b      	ldr	r3, [r7, #20]
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d10c      	bne.n	8015bbc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8015ba2:	683b      	ldr	r3, [r7, #0]
 8015ba4:	095b      	lsrs	r3, r3, #5
 8015ba6:	693a      	ldr	r2, [r7, #16]
 8015ba8:	8912      	ldrh	r2, [r2, #8]
 8015baa:	4293      	cmp	r3, r2
 8015bac:	d301      	bcc.n	8015bb2 <dir_sdi+0x5c>
 8015bae:	2302      	movs	r3, #2
 8015bb0:	e048      	b.n	8015c44 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8015bb2:	693b      	ldr	r3, [r7, #16]
 8015bb4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	61da      	str	r2, [r3, #28]
 8015bba:	e029      	b.n	8015c10 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8015bbc:	693b      	ldr	r3, [r7, #16]
 8015bbe:	895b      	ldrh	r3, [r3, #10]
 8015bc0:	025b      	lsls	r3, r3, #9
 8015bc2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8015bc4:	e019      	b.n	8015bfa <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	6979      	ldr	r1, [r7, #20]
 8015bca:	4618      	mov	r0, r3
 8015bcc:	f7ff fd01 	bl	80155d2 <get_fat>
 8015bd0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015bd2:	697b      	ldr	r3, [r7, #20]
 8015bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015bd8:	d101      	bne.n	8015bde <dir_sdi+0x88>
 8015bda:	2301      	movs	r3, #1
 8015bdc:	e032      	b.n	8015c44 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8015bde:	697b      	ldr	r3, [r7, #20]
 8015be0:	2b01      	cmp	r3, #1
 8015be2:	d904      	bls.n	8015bee <dir_sdi+0x98>
 8015be4:	693b      	ldr	r3, [r7, #16]
 8015be6:	699b      	ldr	r3, [r3, #24]
 8015be8:	697a      	ldr	r2, [r7, #20]
 8015bea:	429a      	cmp	r2, r3
 8015bec:	d301      	bcc.n	8015bf2 <dir_sdi+0x9c>
 8015bee:	2302      	movs	r3, #2
 8015bf0:	e028      	b.n	8015c44 <dir_sdi+0xee>
			ofs -= csz;
 8015bf2:	683a      	ldr	r2, [r7, #0]
 8015bf4:	68fb      	ldr	r3, [r7, #12]
 8015bf6:	1ad3      	subs	r3, r2, r3
 8015bf8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8015bfa:	683a      	ldr	r2, [r7, #0]
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	429a      	cmp	r2, r3
 8015c00:	d2e1      	bcs.n	8015bc6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8015c02:	6979      	ldr	r1, [r7, #20]
 8015c04:	6938      	ldr	r0, [r7, #16]
 8015c06:	f7ff fcc5 	bl	8015594 <clust2sect>
 8015c0a:	4602      	mov	r2, r0
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	697a      	ldr	r2, [r7, #20]
 8015c14:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	69db      	ldr	r3, [r3, #28]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d101      	bne.n	8015c22 <dir_sdi+0xcc>
 8015c1e:	2302      	movs	r3, #2
 8015c20:	e010      	b.n	8015c44 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	69da      	ldr	r2, [r3, #28]
 8015c26:	683b      	ldr	r3, [r7, #0]
 8015c28:	0a5b      	lsrs	r3, r3, #9
 8015c2a:	441a      	add	r2, r3
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8015c30:	693b      	ldr	r3, [r7, #16]
 8015c32:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8015c36:	683b      	ldr	r3, [r7, #0]
 8015c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015c3c:	441a      	add	r2, r3
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8015c42:	2300      	movs	r3, #0
}
 8015c44:	4618      	mov	r0, r3
 8015c46:	3718      	adds	r7, #24
 8015c48:	46bd      	mov	sp, r7
 8015c4a:	bd80      	pop	{r7, pc}

08015c4c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8015c4c:	b580      	push	{r7, lr}
 8015c4e:	b086      	sub	sp, #24
 8015c50:	af00      	add	r7, sp, #0
 8015c52:	6078      	str	r0, [r7, #4]
 8015c54:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	695b      	ldr	r3, [r3, #20]
 8015c60:	3320      	adds	r3, #32
 8015c62:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	69db      	ldr	r3, [r3, #28]
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d003      	beq.n	8015c74 <dir_next+0x28>
 8015c6c:	68bb      	ldr	r3, [r7, #8]
 8015c6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8015c72:	d301      	bcc.n	8015c78 <dir_next+0x2c>
 8015c74:	2304      	movs	r3, #4
 8015c76:	e0aa      	b.n	8015dce <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8015c78:	68bb      	ldr	r3, [r7, #8]
 8015c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	f040 8098 	bne.w	8015db4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	69db      	ldr	r3, [r3, #28]
 8015c88:	1c5a      	adds	r2, r3, #1
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	699b      	ldr	r3, [r3, #24]
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d10b      	bne.n	8015cae <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8015c96:	68bb      	ldr	r3, [r7, #8]
 8015c98:	095b      	lsrs	r3, r3, #5
 8015c9a:	68fa      	ldr	r2, [r7, #12]
 8015c9c:	8912      	ldrh	r2, [r2, #8]
 8015c9e:	4293      	cmp	r3, r2
 8015ca0:	f0c0 8088 	bcc.w	8015db4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	2200      	movs	r2, #0
 8015ca8:	61da      	str	r2, [r3, #28]
 8015caa:	2304      	movs	r3, #4
 8015cac:	e08f      	b.n	8015dce <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8015cae:	68bb      	ldr	r3, [r7, #8]
 8015cb0:	0a5b      	lsrs	r3, r3, #9
 8015cb2:	68fa      	ldr	r2, [r7, #12]
 8015cb4:	8952      	ldrh	r2, [r2, #10]
 8015cb6:	3a01      	subs	r2, #1
 8015cb8:	4013      	ands	r3, r2
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d17a      	bne.n	8015db4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8015cbe:	687a      	ldr	r2, [r7, #4]
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	699b      	ldr	r3, [r3, #24]
 8015cc4:	4619      	mov	r1, r3
 8015cc6:	4610      	mov	r0, r2
 8015cc8:	f7ff fc83 	bl	80155d2 <get_fat>
 8015ccc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8015cce:	697b      	ldr	r3, [r7, #20]
 8015cd0:	2b01      	cmp	r3, #1
 8015cd2:	d801      	bhi.n	8015cd8 <dir_next+0x8c>
 8015cd4:	2302      	movs	r3, #2
 8015cd6:	e07a      	b.n	8015dce <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8015cd8:	697b      	ldr	r3, [r7, #20]
 8015cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015cde:	d101      	bne.n	8015ce4 <dir_next+0x98>
 8015ce0:	2301      	movs	r3, #1
 8015ce2:	e074      	b.n	8015dce <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8015ce4:	68fb      	ldr	r3, [r7, #12]
 8015ce6:	699b      	ldr	r3, [r3, #24]
 8015ce8:	697a      	ldr	r2, [r7, #20]
 8015cea:	429a      	cmp	r2, r3
 8015cec:	d358      	bcc.n	8015da0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8015cee:	683b      	ldr	r3, [r7, #0]
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d104      	bne.n	8015cfe <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	2200      	movs	r2, #0
 8015cf8:	61da      	str	r2, [r3, #28]
 8015cfa:	2304      	movs	r3, #4
 8015cfc:	e067      	b.n	8015dce <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8015cfe:	687a      	ldr	r2, [r7, #4]
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	699b      	ldr	r3, [r3, #24]
 8015d04:	4619      	mov	r1, r3
 8015d06:	4610      	mov	r0, r2
 8015d08:	f7ff fe59 	bl	80159be <create_chain>
 8015d0c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8015d0e:	697b      	ldr	r3, [r7, #20]
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d101      	bne.n	8015d18 <dir_next+0xcc>
 8015d14:	2307      	movs	r3, #7
 8015d16:	e05a      	b.n	8015dce <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8015d18:	697b      	ldr	r3, [r7, #20]
 8015d1a:	2b01      	cmp	r3, #1
 8015d1c:	d101      	bne.n	8015d22 <dir_next+0xd6>
 8015d1e:	2302      	movs	r3, #2
 8015d20:	e055      	b.n	8015dce <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015d22:	697b      	ldr	r3, [r7, #20]
 8015d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d28:	d101      	bne.n	8015d2e <dir_next+0xe2>
 8015d2a:	2301      	movs	r3, #1
 8015d2c:	e04f      	b.n	8015dce <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8015d2e:	68f8      	ldr	r0, [r7, #12]
 8015d30:	f7ff fb50 	bl	80153d4 <sync_window>
 8015d34:	4603      	mov	r3, r0
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d001      	beq.n	8015d3e <dir_next+0xf2>
 8015d3a:	2301      	movs	r3, #1
 8015d3c:	e047      	b.n	8015dce <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	3334      	adds	r3, #52	@ 0x34
 8015d42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015d46:	2100      	movs	r1, #0
 8015d48:	4618      	mov	r0, r3
 8015d4a:	f7ff f949 	bl	8014fe0 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8015d4e:	2300      	movs	r3, #0
 8015d50:	613b      	str	r3, [r7, #16]
 8015d52:	6979      	ldr	r1, [r7, #20]
 8015d54:	68f8      	ldr	r0, [r7, #12]
 8015d56:	f7ff fc1d 	bl	8015594 <clust2sect>
 8015d5a:	4602      	mov	r2, r0
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8015d60:	e012      	b.n	8015d88 <dir_next+0x13c>
						fs->wflag = 1;
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	2201      	movs	r2, #1
 8015d66:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8015d68:	68f8      	ldr	r0, [r7, #12]
 8015d6a:	f7ff fb33 	bl	80153d4 <sync_window>
 8015d6e:	4603      	mov	r3, r0
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d001      	beq.n	8015d78 <dir_next+0x12c>
 8015d74:	2301      	movs	r3, #1
 8015d76:	e02a      	b.n	8015dce <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8015d78:	693b      	ldr	r3, [r7, #16]
 8015d7a:	3301      	adds	r3, #1
 8015d7c:	613b      	str	r3, [r7, #16]
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015d82:	1c5a      	adds	r2, r3, #1
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	631a      	str	r2, [r3, #48]	@ 0x30
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	895b      	ldrh	r3, [r3, #10]
 8015d8c:	461a      	mov	r2, r3
 8015d8e:	693b      	ldr	r3, [r7, #16]
 8015d90:	4293      	cmp	r3, r2
 8015d92:	d3e6      	bcc.n	8015d62 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015d98:	693b      	ldr	r3, [r7, #16]
 8015d9a:	1ad2      	subs	r2, r2, r3
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	697a      	ldr	r2, [r7, #20]
 8015da4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8015da6:	6979      	ldr	r1, [r7, #20]
 8015da8:	68f8      	ldr	r0, [r7, #12]
 8015daa:	f7ff fbf3 	bl	8015594 <clust2sect>
 8015dae:	4602      	mov	r2, r0
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	68ba      	ldr	r2, [r7, #8]
 8015db8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8015dc0:	68bb      	ldr	r3, [r7, #8]
 8015dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015dc6:	441a      	add	r2, r3
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8015dcc:	2300      	movs	r3, #0
}
 8015dce:	4618      	mov	r0, r3
 8015dd0:	3718      	adds	r7, #24
 8015dd2:	46bd      	mov	sp, r7
 8015dd4:	bd80      	pop	{r7, pc}

08015dd6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8015dd6:	b580      	push	{r7, lr}
 8015dd8:	b086      	sub	sp, #24
 8015dda:	af00      	add	r7, sp, #0
 8015ddc:	6078      	str	r0, [r7, #4]
 8015dde:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	681b      	ldr	r3, [r3, #0]
 8015de4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8015de6:	2100      	movs	r1, #0
 8015de8:	6878      	ldr	r0, [r7, #4]
 8015dea:	f7ff feb4 	bl	8015b56 <dir_sdi>
 8015dee:	4603      	mov	r3, r0
 8015df0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015df2:	7dfb      	ldrb	r3, [r7, #23]
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d12b      	bne.n	8015e50 <dir_alloc+0x7a>
		n = 0;
 8015df8:	2300      	movs	r3, #0
 8015dfa:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	69db      	ldr	r3, [r3, #28]
 8015e00:	4619      	mov	r1, r3
 8015e02:	68f8      	ldr	r0, [r7, #12]
 8015e04:	f7ff fb2a 	bl	801545c <move_window>
 8015e08:	4603      	mov	r3, r0
 8015e0a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8015e0c:	7dfb      	ldrb	r3, [r7, #23]
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d11d      	bne.n	8015e4e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	6a1b      	ldr	r3, [r3, #32]
 8015e16:	781b      	ldrb	r3, [r3, #0]
 8015e18:	2be5      	cmp	r3, #229	@ 0xe5
 8015e1a:	d004      	beq.n	8015e26 <dir_alloc+0x50>
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	6a1b      	ldr	r3, [r3, #32]
 8015e20:	781b      	ldrb	r3, [r3, #0]
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d107      	bne.n	8015e36 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8015e26:	693b      	ldr	r3, [r7, #16]
 8015e28:	3301      	adds	r3, #1
 8015e2a:	613b      	str	r3, [r7, #16]
 8015e2c:	693a      	ldr	r2, [r7, #16]
 8015e2e:	683b      	ldr	r3, [r7, #0]
 8015e30:	429a      	cmp	r2, r3
 8015e32:	d102      	bne.n	8015e3a <dir_alloc+0x64>
 8015e34:	e00c      	b.n	8015e50 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8015e36:	2300      	movs	r3, #0
 8015e38:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8015e3a:	2101      	movs	r1, #1
 8015e3c:	6878      	ldr	r0, [r7, #4]
 8015e3e:	f7ff ff05 	bl	8015c4c <dir_next>
 8015e42:	4603      	mov	r3, r0
 8015e44:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8015e46:	7dfb      	ldrb	r3, [r7, #23]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d0d7      	beq.n	8015dfc <dir_alloc+0x26>
 8015e4c:	e000      	b.n	8015e50 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8015e4e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8015e50:	7dfb      	ldrb	r3, [r7, #23]
 8015e52:	2b04      	cmp	r3, #4
 8015e54:	d101      	bne.n	8015e5a <dir_alloc+0x84>
 8015e56:	2307      	movs	r3, #7
 8015e58:	75fb      	strb	r3, [r7, #23]
	return res;
 8015e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	3718      	adds	r7, #24
 8015e60:	46bd      	mov	sp, r7
 8015e62:	bd80      	pop	{r7, pc}

08015e64 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8015e64:	b580      	push	{r7, lr}
 8015e66:	b084      	sub	sp, #16
 8015e68:	af00      	add	r7, sp, #0
 8015e6a:	6078      	str	r0, [r7, #4]
 8015e6c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8015e6e:	683b      	ldr	r3, [r7, #0]
 8015e70:	331a      	adds	r3, #26
 8015e72:	4618      	mov	r0, r3
 8015e74:	f7ff f810 	bl	8014e98 <ld_word>
 8015e78:	4603      	mov	r3, r0
 8015e7a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	781b      	ldrb	r3, [r3, #0]
 8015e80:	2b03      	cmp	r3, #3
 8015e82:	d109      	bne.n	8015e98 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8015e84:	683b      	ldr	r3, [r7, #0]
 8015e86:	3314      	adds	r3, #20
 8015e88:	4618      	mov	r0, r3
 8015e8a:	f7ff f805 	bl	8014e98 <ld_word>
 8015e8e:	4603      	mov	r3, r0
 8015e90:	041b      	lsls	r3, r3, #16
 8015e92:	68fa      	ldr	r2, [r7, #12]
 8015e94:	4313      	orrs	r3, r2
 8015e96:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8015e98:	68fb      	ldr	r3, [r7, #12]
}
 8015e9a:	4618      	mov	r0, r3
 8015e9c:	3710      	adds	r7, #16
 8015e9e:	46bd      	mov	sp, r7
 8015ea0:	bd80      	pop	{r7, pc}

08015ea2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8015ea2:	b580      	push	{r7, lr}
 8015ea4:	b084      	sub	sp, #16
 8015ea6:	af00      	add	r7, sp, #0
 8015ea8:	60f8      	str	r0, [r7, #12]
 8015eaa:	60b9      	str	r1, [r7, #8]
 8015eac:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8015eae:	68bb      	ldr	r3, [r7, #8]
 8015eb0:	331a      	adds	r3, #26
 8015eb2:	687a      	ldr	r2, [r7, #4]
 8015eb4:	b292      	uxth	r2, r2
 8015eb6:	4611      	mov	r1, r2
 8015eb8:	4618      	mov	r0, r3
 8015eba:	f7ff f829 	bl	8014f10 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	781b      	ldrb	r3, [r3, #0]
 8015ec2:	2b03      	cmp	r3, #3
 8015ec4:	d109      	bne.n	8015eda <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8015ec6:	68bb      	ldr	r3, [r7, #8]
 8015ec8:	f103 0214 	add.w	r2, r3, #20
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	0c1b      	lsrs	r3, r3, #16
 8015ed0:	b29b      	uxth	r3, r3
 8015ed2:	4619      	mov	r1, r3
 8015ed4:	4610      	mov	r0, r2
 8015ed6:	f7ff f81b 	bl	8014f10 <st_word>
	}
}
 8015eda:	bf00      	nop
 8015edc:	3710      	adds	r7, #16
 8015ede:	46bd      	mov	sp, r7
 8015ee0:	bd80      	pop	{r7, pc}

08015ee2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8015ee2:	b580      	push	{r7, lr}
 8015ee4:	b086      	sub	sp, #24
 8015ee6:	af00      	add	r7, sp, #0
 8015ee8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8015ef0:	2100      	movs	r1, #0
 8015ef2:	6878      	ldr	r0, [r7, #4]
 8015ef4:	f7ff fe2f 	bl	8015b56 <dir_sdi>
 8015ef8:	4603      	mov	r3, r0
 8015efa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8015efc:	7dfb      	ldrb	r3, [r7, #23]
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d001      	beq.n	8015f06 <dir_find+0x24>
 8015f02:	7dfb      	ldrb	r3, [r7, #23]
 8015f04:	e03e      	b.n	8015f84 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	69db      	ldr	r3, [r3, #28]
 8015f0a:	4619      	mov	r1, r3
 8015f0c:	6938      	ldr	r0, [r7, #16]
 8015f0e:	f7ff faa5 	bl	801545c <move_window>
 8015f12:	4603      	mov	r3, r0
 8015f14:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8015f16:	7dfb      	ldrb	r3, [r7, #23]
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d12f      	bne.n	8015f7c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	6a1b      	ldr	r3, [r3, #32]
 8015f20:	781b      	ldrb	r3, [r3, #0]
 8015f22:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8015f24:	7bfb      	ldrb	r3, [r7, #15]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d102      	bne.n	8015f30 <dir_find+0x4e>
 8015f2a:	2304      	movs	r3, #4
 8015f2c:	75fb      	strb	r3, [r7, #23]
 8015f2e:	e028      	b.n	8015f82 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	6a1b      	ldr	r3, [r3, #32]
 8015f34:	330b      	adds	r3, #11
 8015f36:	781b      	ldrb	r3, [r3, #0]
 8015f38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015f3c:	b2da      	uxtb	r2, r3
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	6a1b      	ldr	r3, [r3, #32]
 8015f46:	330b      	adds	r3, #11
 8015f48:	781b      	ldrb	r3, [r3, #0]
 8015f4a:	f003 0308 	and.w	r3, r3, #8
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d10a      	bne.n	8015f68 <dir_find+0x86>
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	6a18      	ldr	r0, [r3, #32]
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	3324      	adds	r3, #36	@ 0x24
 8015f5a:	220b      	movs	r2, #11
 8015f5c:	4619      	mov	r1, r3
 8015f5e:	f7ff f85a 	bl	8015016 <mem_cmp>
 8015f62:	4603      	mov	r3, r0
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d00b      	beq.n	8015f80 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8015f68:	2100      	movs	r1, #0
 8015f6a:	6878      	ldr	r0, [r7, #4]
 8015f6c:	f7ff fe6e 	bl	8015c4c <dir_next>
 8015f70:	4603      	mov	r3, r0
 8015f72:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8015f74:	7dfb      	ldrb	r3, [r7, #23]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d0c5      	beq.n	8015f06 <dir_find+0x24>
 8015f7a:	e002      	b.n	8015f82 <dir_find+0xa0>
		if (res != FR_OK) break;
 8015f7c:	bf00      	nop
 8015f7e:	e000      	b.n	8015f82 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8015f80:	bf00      	nop

	return res;
 8015f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8015f84:	4618      	mov	r0, r3
 8015f86:	3718      	adds	r7, #24
 8015f88:	46bd      	mov	sp, r7
 8015f8a:	bd80      	pop	{r7, pc}

08015f8c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8015f8c:	b580      	push	{r7, lr}
 8015f8e:	b084      	sub	sp, #16
 8015f90:	af00      	add	r7, sp, #0
 8015f92:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8015f9a:	2101      	movs	r1, #1
 8015f9c:	6878      	ldr	r0, [r7, #4]
 8015f9e:	f7ff ff1a 	bl	8015dd6 <dir_alloc>
 8015fa2:	4603      	mov	r3, r0
 8015fa4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8015fa6:	7bfb      	ldrb	r3, [r7, #15]
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d11c      	bne.n	8015fe6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	69db      	ldr	r3, [r3, #28]
 8015fb0:	4619      	mov	r1, r3
 8015fb2:	68b8      	ldr	r0, [r7, #8]
 8015fb4:	f7ff fa52 	bl	801545c <move_window>
 8015fb8:	4603      	mov	r3, r0
 8015fba:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8015fbc:	7bfb      	ldrb	r3, [r7, #15]
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d111      	bne.n	8015fe6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	6a1b      	ldr	r3, [r3, #32]
 8015fc6:	2220      	movs	r2, #32
 8015fc8:	2100      	movs	r1, #0
 8015fca:	4618      	mov	r0, r3
 8015fcc:	f7ff f808 	bl	8014fe0 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	6a18      	ldr	r0, [r3, #32]
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	3324      	adds	r3, #36	@ 0x24
 8015fd8:	220b      	movs	r2, #11
 8015fda:	4619      	mov	r1, r3
 8015fdc:	f7fe ffdf 	bl	8014f9e <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8015fe0:	68bb      	ldr	r3, [r7, #8]
 8015fe2:	2201      	movs	r2, #1
 8015fe4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8015fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fe8:	4618      	mov	r0, r3
 8015fea:	3710      	adds	r7, #16
 8015fec:	46bd      	mov	sp, r7
 8015fee:	bd80      	pop	{r7, pc}

08015ff0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8015ff0:	b580      	push	{r7, lr}
 8015ff2:	b088      	sub	sp, #32
 8015ff4:	af00      	add	r7, sp, #0
 8015ff6:	6078      	str	r0, [r7, #4]
 8015ff8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8015ffa:	683b      	ldr	r3, [r7, #0]
 8015ffc:	681b      	ldr	r3, [r3, #0]
 8015ffe:	60fb      	str	r3, [r7, #12]
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	3324      	adds	r3, #36	@ 0x24
 8016004:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8016006:	220b      	movs	r2, #11
 8016008:	2120      	movs	r1, #32
 801600a:	68b8      	ldr	r0, [r7, #8]
 801600c:	f7fe ffe8 	bl	8014fe0 <mem_set>
	si = i = 0; ni = 8;
 8016010:	2300      	movs	r3, #0
 8016012:	613b      	str	r3, [r7, #16]
 8016014:	693b      	ldr	r3, [r7, #16]
 8016016:	61fb      	str	r3, [r7, #28]
 8016018:	2308      	movs	r3, #8
 801601a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801601c:	69fb      	ldr	r3, [r7, #28]
 801601e:	1c5a      	adds	r2, r3, #1
 8016020:	61fa      	str	r2, [r7, #28]
 8016022:	68fa      	ldr	r2, [r7, #12]
 8016024:	4413      	add	r3, r2
 8016026:	781b      	ldrb	r3, [r3, #0]
 8016028:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801602a:	7efb      	ldrb	r3, [r7, #27]
 801602c:	2b20      	cmp	r3, #32
 801602e:	d94e      	bls.n	80160ce <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8016030:	7efb      	ldrb	r3, [r7, #27]
 8016032:	2b2f      	cmp	r3, #47	@ 0x2f
 8016034:	d006      	beq.n	8016044 <create_name+0x54>
 8016036:	7efb      	ldrb	r3, [r7, #27]
 8016038:	2b5c      	cmp	r3, #92	@ 0x5c
 801603a:	d110      	bne.n	801605e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801603c:	e002      	b.n	8016044 <create_name+0x54>
 801603e:	69fb      	ldr	r3, [r7, #28]
 8016040:	3301      	adds	r3, #1
 8016042:	61fb      	str	r3, [r7, #28]
 8016044:	68fa      	ldr	r2, [r7, #12]
 8016046:	69fb      	ldr	r3, [r7, #28]
 8016048:	4413      	add	r3, r2
 801604a:	781b      	ldrb	r3, [r3, #0]
 801604c:	2b2f      	cmp	r3, #47	@ 0x2f
 801604e:	d0f6      	beq.n	801603e <create_name+0x4e>
 8016050:	68fa      	ldr	r2, [r7, #12]
 8016052:	69fb      	ldr	r3, [r7, #28]
 8016054:	4413      	add	r3, r2
 8016056:	781b      	ldrb	r3, [r3, #0]
 8016058:	2b5c      	cmp	r3, #92	@ 0x5c
 801605a:	d0f0      	beq.n	801603e <create_name+0x4e>
			break;
 801605c:	e038      	b.n	80160d0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801605e:	7efb      	ldrb	r3, [r7, #27]
 8016060:	2b2e      	cmp	r3, #46	@ 0x2e
 8016062:	d003      	beq.n	801606c <create_name+0x7c>
 8016064:	693a      	ldr	r2, [r7, #16]
 8016066:	697b      	ldr	r3, [r7, #20]
 8016068:	429a      	cmp	r2, r3
 801606a:	d30c      	bcc.n	8016086 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801606c:	697b      	ldr	r3, [r7, #20]
 801606e:	2b0b      	cmp	r3, #11
 8016070:	d002      	beq.n	8016078 <create_name+0x88>
 8016072:	7efb      	ldrb	r3, [r7, #27]
 8016074:	2b2e      	cmp	r3, #46	@ 0x2e
 8016076:	d001      	beq.n	801607c <create_name+0x8c>
 8016078:	2306      	movs	r3, #6
 801607a:	e044      	b.n	8016106 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801607c:	2308      	movs	r3, #8
 801607e:	613b      	str	r3, [r7, #16]
 8016080:	230b      	movs	r3, #11
 8016082:	617b      	str	r3, [r7, #20]
			continue;
 8016084:	e022      	b.n	80160cc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8016086:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801608a:	2b00      	cmp	r3, #0
 801608c:	da04      	bge.n	8016098 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801608e:	7efb      	ldrb	r3, [r7, #27]
 8016090:	3b80      	subs	r3, #128	@ 0x80
 8016092:	4a1f      	ldr	r2, [pc, #124]	@ (8016110 <create_name+0x120>)
 8016094:	5cd3      	ldrb	r3, [r2, r3]
 8016096:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8016098:	7efb      	ldrb	r3, [r7, #27]
 801609a:	4619      	mov	r1, r3
 801609c:	481d      	ldr	r0, [pc, #116]	@ (8016114 <create_name+0x124>)
 801609e:	f7fe ffe1 	bl	8015064 <chk_chr>
 80160a2:	4603      	mov	r3, r0
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d001      	beq.n	80160ac <create_name+0xbc>
 80160a8:	2306      	movs	r3, #6
 80160aa:	e02c      	b.n	8016106 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80160ac:	7efb      	ldrb	r3, [r7, #27]
 80160ae:	2b60      	cmp	r3, #96	@ 0x60
 80160b0:	d905      	bls.n	80160be <create_name+0xce>
 80160b2:	7efb      	ldrb	r3, [r7, #27]
 80160b4:	2b7a      	cmp	r3, #122	@ 0x7a
 80160b6:	d802      	bhi.n	80160be <create_name+0xce>
 80160b8:	7efb      	ldrb	r3, [r7, #27]
 80160ba:	3b20      	subs	r3, #32
 80160bc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80160be:	693b      	ldr	r3, [r7, #16]
 80160c0:	1c5a      	adds	r2, r3, #1
 80160c2:	613a      	str	r2, [r7, #16]
 80160c4:	68ba      	ldr	r2, [r7, #8]
 80160c6:	4413      	add	r3, r2
 80160c8:	7efa      	ldrb	r2, [r7, #27]
 80160ca:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80160cc:	e7a6      	b.n	801601c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80160ce:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80160d0:	68fa      	ldr	r2, [r7, #12]
 80160d2:	69fb      	ldr	r3, [r7, #28]
 80160d4:	441a      	add	r2, r3
 80160d6:	683b      	ldr	r3, [r7, #0]
 80160d8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80160da:	693b      	ldr	r3, [r7, #16]
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d101      	bne.n	80160e4 <create_name+0xf4>
 80160e0:	2306      	movs	r3, #6
 80160e2:	e010      	b.n	8016106 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80160e4:	68bb      	ldr	r3, [r7, #8]
 80160e6:	781b      	ldrb	r3, [r3, #0]
 80160e8:	2be5      	cmp	r3, #229	@ 0xe5
 80160ea:	d102      	bne.n	80160f2 <create_name+0x102>
 80160ec:	68bb      	ldr	r3, [r7, #8]
 80160ee:	2205      	movs	r2, #5
 80160f0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80160f2:	7efb      	ldrb	r3, [r7, #27]
 80160f4:	2b20      	cmp	r3, #32
 80160f6:	d801      	bhi.n	80160fc <create_name+0x10c>
 80160f8:	2204      	movs	r2, #4
 80160fa:	e000      	b.n	80160fe <create_name+0x10e>
 80160fc:	2200      	movs	r2, #0
 80160fe:	68bb      	ldr	r3, [r7, #8]
 8016100:	330b      	adds	r3, #11
 8016102:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8016104:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8016106:	4618      	mov	r0, r3
 8016108:	3720      	adds	r7, #32
 801610a:	46bd      	mov	sp, r7
 801610c:	bd80      	pop	{r7, pc}
 801610e:	bf00      	nop
 8016110:	0801ec84 	.word	0x0801ec84
 8016114:	0801ec04 	.word	0x0801ec04

08016118 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8016118:	b580      	push	{r7, lr}
 801611a:	b086      	sub	sp, #24
 801611c:	af00      	add	r7, sp, #0
 801611e:	6078      	str	r0, [r7, #4]
 8016120:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8016126:	693b      	ldr	r3, [r7, #16]
 8016128:	681b      	ldr	r3, [r3, #0]
 801612a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801612c:	e002      	b.n	8016134 <follow_path+0x1c>
 801612e:	683b      	ldr	r3, [r7, #0]
 8016130:	3301      	adds	r3, #1
 8016132:	603b      	str	r3, [r7, #0]
 8016134:	683b      	ldr	r3, [r7, #0]
 8016136:	781b      	ldrb	r3, [r3, #0]
 8016138:	2b2f      	cmp	r3, #47	@ 0x2f
 801613a:	d0f8      	beq.n	801612e <follow_path+0x16>
 801613c:	683b      	ldr	r3, [r7, #0]
 801613e:	781b      	ldrb	r3, [r3, #0]
 8016140:	2b5c      	cmp	r3, #92	@ 0x5c
 8016142:	d0f4      	beq.n	801612e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8016144:	693b      	ldr	r3, [r7, #16]
 8016146:	2200      	movs	r2, #0
 8016148:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801614a:	683b      	ldr	r3, [r7, #0]
 801614c:	781b      	ldrb	r3, [r3, #0]
 801614e:	2b1f      	cmp	r3, #31
 8016150:	d80a      	bhi.n	8016168 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	2280      	movs	r2, #128	@ 0x80
 8016156:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801615a:	2100      	movs	r1, #0
 801615c:	6878      	ldr	r0, [r7, #4]
 801615e:	f7ff fcfa 	bl	8015b56 <dir_sdi>
 8016162:	4603      	mov	r3, r0
 8016164:	75fb      	strb	r3, [r7, #23]
 8016166:	e043      	b.n	80161f0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8016168:	463b      	mov	r3, r7
 801616a:	4619      	mov	r1, r3
 801616c:	6878      	ldr	r0, [r7, #4]
 801616e:	f7ff ff3f 	bl	8015ff0 <create_name>
 8016172:	4603      	mov	r3, r0
 8016174:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8016176:	7dfb      	ldrb	r3, [r7, #23]
 8016178:	2b00      	cmp	r3, #0
 801617a:	d134      	bne.n	80161e6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801617c:	6878      	ldr	r0, [r7, #4]
 801617e:	f7ff feb0 	bl	8015ee2 <dir_find>
 8016182:	4603      	mov	r3, r0
 8016184:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801618c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801618e:	7dfb      	ldrb	r3, [r7, #23]
 8016190:	2b00      	cmp	r3, #0
 8016192:	d00a      	beq.n	80161aa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8016194:	7dfb      	ldrb	r3, [r7, #23]
 8016196:	2b04      	cmp	r3, #4
 8016198:	d127      	bne.n	80161ea <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801619a:	7afb      	ldrb	r3, [r7, #11]
 801619c:	f003 0304 	and.w	r3, r3, #4
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d122      	bne.n	80161ea <follow_path+0xd2>
 80161a4:	2305      	movs	r3, #5
 80161a6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80161a8:	e01f      	b.n	80161ea <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80161aa:	7afb      	ldrb	r3, [r7, #11]
 80161ac:	f003 0304 	and.w	r3, r3, #4
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d11c      	bne.n	80161ee <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80161b4:	693b      	ldr	r3, [r7, #16]
 80161b6:	799b      	ldrb	r3, [r3, #6]
 80161b8:	f003 0310 	and.w	r3, r3, #16
 80161bc:	2b00      	cmp	r3, #0
 80161be:	d102      	bne.n	80161c6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80161c0:	2305      	movs	r3, #5
 80161c2:	75fb      	strb	r3, [r7, #23]
 80161c4:	e014      	b.n	80161f0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	695b      	ldr	r3, [r3, #20]
 80161d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80161d4:	4413      	add	r3, r2
 80161d6:	4619      	mov	r1, r3
 80161d8:	68f8      	ldr	r0, [r7, #12]
 80161da:	f7ff fe43 	bl	8015e64 <ld_clust>
 80161de:	4602      	mov	r2, r0
 80161e0:	693b      	ldr	r3, [r7, #16]
 80161e2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80161e4:	e7c0      	b.n	8016168 <follow_path+0x50>
			if (res != FR_OK) break;
 80161e6:	bf00      	nop
 80161e8:	e002      	b.n	80161f0 <follow_path+0xd8>
				break;
 80161ea:	bf00      	nop
 80161ec:	e000      	b.n	80161f0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80161ee:	bf00      	nop
			}
		}
	}

	return res;
 80161f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80161f2:	4618      	mov	r0, r3
 80161f4:	3718      	adds	r7, #24
 80161f6:	46bd      	mov	sp, r7
 80161f8:	bd80      	pop	{r7, pc}

080161fa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80161fa:	b480      	push	{r7}
 80161fc:	b087      	sub	sp, #28
 80161fe:	af00      	add	r7, sp, #0
 8016200:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8016202:	f04f 33ff 	mov.w	r3, #4294967295
 8016206:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	2b00      	cmp	r3, #0
 801620e:	d031      	beq.n	8016274 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	617b      	str	r3, [r7, #20]
 8016216:	e002      	b.n	801621e <get_ldnumber+0x24>
 8016218:	697b      	ldr	r3, [r7, #20]
 801621a:	3301      	adds	r3, #1
 801621c:	617b      	str	r3, [r7, #20]
 801621e:	697b      	ldr	r3, [r7, #20]
 8016220:	781b      	ldrb	r3, [r3, #0]
 8016222:	2b20      	cmp	r3, #32
 8016224:	d903      	bls.n	801622e <get_ldnumber+0x34>
 8016226:	697b      	ldr	r3, [r7, #20]
 8016228:	781b      	ldrb	r3, [r3, #0]
 801622a:	2b3a      	cmp	r3, #58	@ 0x3a
 801622c:	d1f4      	bne.n	8016218 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801622e:	697b      	ldr	r3, [r7, #20]
 8016230:	781b      	ldrb	r3, [r3, #0]
 8016232:	2b3a      	cmp	r3, #58	@ 0x3a
 8016234:	d11c      	bne.n	8016270 <get_ldnumber+0x76>
			tp = *path;
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	1c5a      	adds	r2, r3, #1
 8016240:	60fa      	str	r2, [r7, #12]
 8016242:	781b      	ldrb	r3, [r3, #0]
 8016244:	3b30      	subs	r3, #48	@ 0x30
 8016246:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8016248:	68bb      	ldr	r3, [r7, #8]
 801624a:	2b09      	cmp	r3, #9
 801624c:	d80e      	bhi.n	801626c <get_ldnumber+0x72>
 801624e:	68fa      	ldr	r2, [r7, #12]
 8016250:	697b      	ldr	r3, [r7, #20]
 8016252:	429a      	cmp	r2, r3
 8016254:	d10a      	bne.n	801626c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8016256:	68bb      	ldr	r3, [r7, #8]
 8016258:	2b00      	cmp	r3, #0
 801625a:	d107      	bne.n	801626c <get_ldnumber+0x72>
					vol = (int)i;
 801625c:	68bb      	ldr	r3, [r7, #8]
 801625e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8016260:	697b      	ldr	r3, [r7, #20]
 8016262:	3301      	adds	r3, #1
 8016264:	617b      	str	r3, [r7, #20]
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	697a      	ldr	r2, [r7, #20]
 801626a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801626c:	693b      	ldr	r3, [r7, #16]
 801626e:	e002      	b.n	8016276 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8016270:	2300      	movs	r3, #0
 8016272:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8016274:	693b      	ldr	r3, [r7, #16]
}
 8016276:	4618      	mov	r0, r3
 8016278:	371c      	adds	r7, #28
 801627a:	46bd      	mov	sp, r7
 801627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016280:	4770      	bx	lr
	...

08016284 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8016284:	b580      	push	{r7, lr}
 8016286:	b082      	sub	sp, #8
 8016288:	af00      	add	r7, sp, #0
 801628a:	6078      	str	r0, [r7, #4]
 801628c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	2200      	movs	r2, #0
 8016292:	70da      	strb	r2, [r3, #3]
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	f04f 32ff 	mov.w	r2, #4294967295
 801629a:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801629c:	6839      	ldr	r1, [r7, #0]
 801629e:	6878      	ldr	r0, [r7, #4]
 80162a0:	f7ff f8dc 	bl	801545c <move_window>
 80162a4:	4603      	mov	r3, r0
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d001      	beq.n	80162ae <check_fs+0x2a>
 80162aa:	2304      	movs	r3, #4
 80162ac:	e038      	b.n	8016320 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	3334      	adds	r3, #52	@ 0x34
 80162b2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80162b6:	4618      	mov	r0, r3
 80162b8:	f7fe fdee 	bl	8014e98 <ld_word>
 80162bc:	4603      	mov	r3, r0
 80162be:	461a      	mov	r2, r3
 80162c0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80162c4:	429a      	cmp	r2, r3
 80162c6:	d001      	beq.n	80162cc <check_fs+0x48>
 80162c8:	2303      	movs	r3, #3
 80162ca:	e029      	b.n	8016320 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80162d2:	2be9      	cmp	r3, #233	@ 0xe9
 80162d4:	d009      	beq.n	80162ea <check_fs+0x66>
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80162dc:	2beb      	cmp	r3, #235	@ 0xeb
 80162de:	d11e      	bne.n	801631e <check_fs+0x9a>
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80162e6:	2b90      	cmp	r3, #144	@ 0x90
 80162e8:	d119      	bne.n	801631e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	3334      	adds	r3, #52	@ 0x34
 80162ee:	3336      	adds	r3, #54	@ 0x36
 80162f0:	4618      	mov	r0, r3
 80162f2:	f7fe fdea 	bl	8014eca <ld_dword>
 80162f6:	4603      	mov	r3, r0
 80162f8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80162fc:	4a0a      	ldr	r2, [pc, #40]	@ (8016328 <check_fs+0xa4>)
 80162fe:	4293      	cmp	r3, r2
 8016300:	d101      	bne.n	8016306 <check_fs+0x82>
 8016302:	2300      	movs	r3, #0
 8016304:	e00c      	b.n	8016320 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	3334      	adds	r3, #52	@ 0x34
 801630a:	3352      	adds	r3, #82	@ 0x52
 801630c:	4618      	mov	r0, r3
 801630e:	f7fe fddc 	bl	8014eca <ld_dword>
 8016312:	4603      	mov	r3, r0
 8016314:	4a05      	ldr	r2, [pc, #20]	@ (801632c <check_fs+0xa8>)
 8016316:	4293      	cmp	r3, r2
 8016318:	d101      	bne.n	801631e <check_fs+0x9a>
 801631a:	2300      	movs	r3, #0
 801631c:	e000      	b.n	8016320 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801631e:	2302      	movs	r3, #2
}
 8016320:	4618      	mov	r0, r3
 8016322:	3708      	adds	r7, #8
 8016324:	46bd      	mov	sp, r7
 8016326:	bd80      	pop	{r7, pc}
 8016328:	00544146 	.word	0x00544146
 801632c:	33544146 	.word	0x33544146

08016330 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8016330:	b580      	push	{r7, lr}
 8016332:	b096      	sub	sp, #88	@ 0x58
 8016334:	af00      	add	r7, sp, #0
 8016336:	60f8      	str	r0, [r7, #12]
 8016338:	60b9      	str	r1, [r7, #8]
 801633a:	4613      	mov	r3, r2
 801633c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801633e:	68bb      	ldr	r3, [r7, #8]
 8016340:	2200      	movs	r2, #0
 8016342:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8016344:	68f8      	ldr	r0, [r7, #12]
 8016346:	f7ff ff58 	bl	80161fa <get_ldnumber>
 801634a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801634c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801634e:	2b00      	cmp	r3, #0
 8016350:	da01      	bge.n	8016356 <find_volume+0x26>
 8016352:	230b      	movs	r3, #11
 8016354:	e235      	b.n	80167c2 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8016356:	4aa5      	ldr	r2, [pc, #660]	@ (80165ec <find_volume+0x2bc>)
 8016358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801635a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801635e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8016360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016362:	2b00      	cmp	r3, #0
 8016364:	d101      	bne.n	801636a <find_volume+0x3a>
 8016366:	230c      	movs	r3, #12
 8016368:	e22b      	b.n	80167c2 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 801636a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801636c:	f7fe fe95 	bl	801509a <lock_fs>
 8016370:	4603      	mov	r3, r0
 8016372:	2b00      	cmp	r3, #0
 8016374:	d101      	bne.n	801637a <find_volume+0x4a>
 8016376:	230f      	movs	r3, #15
 8016378:	e223      	b.n	80167c2 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 801637a:	68bb      	ldr	r3, [r7, #8]
 801637c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801637e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8016380:	79fb      	ldrb	r3, [r7, #7]
 8016382:	f023 0301 	bic.w	r3, r3, #1
 8016386:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8016388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801638a:	781b      	ldrb	r3, [r3, #0]
 801638c:	2b00      	cmp	r3, #0
 801638e:	d01a      	beq.n	80163c6 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8016390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016392:	785b      	ldrb	r3, [r3, #1]
 8016394:	4618      	mov	r0, r3
 8016396:	f7fe fce1 	bl	8014d5c <disk_status>
 801639a:	4603      	mov	r3, r0
 801639c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80163a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80163a4:	f003 0301 	and.w	r3, r3, #1
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d10c      	bne.n	80163c6 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80163ac:	79fb      	ldrb	r3, [r7, #7]
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d007      	beq.n	80163c2 <find_volume+0x92>
 80163b2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80163b6:	f003 0304 	and.w	r3, r3, #4
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d001      	beq.n	80163c2 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80163be:	230a      	movs	r3, #10
 80163c0:	e1ff      	b.n	80167c2 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 80163c2:	2300      	movs	r3, #0
 80163c4:	e1fd      	b.n	80167c2 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80163c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80163c8:	2200      	movs	r2, #0
 80163ca:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80163cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80163ce:	b2da      	uxtb	r2, r3
 80163d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80163d2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80163d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80163d6:	785b      	ldrb	r3, [r3, #1]
 80163d8:	4618      	mov	r0, r3
 80163da:	f7fe fcd9 	bl	8014d90 <disk_initialize>
 80163de:	4603      	mov	r3, r0
 80163e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80163e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80163e8:	f003 0301 	and.w	r3, r3, #1
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d001      	beq.n	80163f4 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80163f0:	2303      	movs	r3, #3
 80163f2:	e1e6      	b.n	80167c2 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80163f4:	79fb      	ldrb	r3, [r7, #7]
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d007      	beq.n	801640a <find_volume+0xda>
 80163fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80163fe:	f003 0304 	and.w	r3, r3, #4
 8016402:	2b00      	cmp	r3, #0
 8016404:	d001      	beq.n	801640a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8016406:	230a      	movs	r3, #10
 8016408:	e1db      	b.n	80167c2 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801640a:	2300      	movs	r3, #0
 801640c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801640e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8016410:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016412:	f7ff ff37 	bl	8016284 <check_fs>
 8016416:	4603      	mov	r3, r0
 8016418:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801641c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8016420:	2b02      	cmp	r3, #2
 8016422:	d149      	bne.n	80164b8 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016424:	2300      	movs	r3, #0
 8016426:	643b      	str	r3, [r7, #64]	@ 0x40
 8016428:	e01e      	b.n	8016468 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801642a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801642c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8016430:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016432:	011b      	lsls	r3, r3, #4
 8016434:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8016438:	4413      	add	r3, r2
 801643a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801643c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801643e:	3304      	adds	r3, #4
 8016440:	781b      	ldrb	r3, [r3, #0]
 8016442:	2b00      	cmp	r3, #0
 8016444:	d006      	beq.n	8016454 <find_volume+0x124>
 8016446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016448:	3308      	adds	r3, #8
 801644a:	4618      	mov	r0, r3
 801644c:	f7fe fd3d 	bl	8014eca <ld_dword>
 8016450:	4602      	mov	r2, r0
 8016452:	e000      	b.n	8016456 <find_volume+0x126>
 8016454:	2200      	movs	r2, #0
 8016456:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016458:	009b      	lsls	r3, r3, #2
 801645a:	3358      	adds	r3, #88	@ 0x58
 801645c:	443b      	add	r3, r7
 801645e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016464:	3301      	adds	r3, #1
 8016466:	643b      	str	r3, [r7, #64]	@ 0x40
 8016468:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801646a:	2b03      	cmp	r3, #3
 801646c:	d9dd      	bls.n	801642a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801646e:	2300      	movs	r3, #0
 8016470:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8016472:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016474:	2b00      	cmp	r3, #0
 8016476:	d002      	beq.n	801647e <find_volume+0x14e>
 8016478:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801647a:	3b01      	subs	r3, #1
 801647c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801647e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016480:	009b      	lsls	r3, r3, #2
 8016482:	3358      	adds	r3, #88	@ 0x58
 8016484:	443b      	add	r3, r7
 8016486:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801648a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801648c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801648e:	2b00      	cmp	r3, #0
 8016490:	d005      	beq.n	801649e <find_volume+0x16e>
 8016492:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8016494:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016496:	f7ff fef5 	bl	8016284 <check_fs>
 801649a:	4603      	mov	r3, r0
 801649c:	e000      	b.n	80164a0 <find_volume+0x170>
 801649e:	2303      	movs	r3, #3
 80164a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80164a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80164a8:	2b01      	cmp	r3, #1
 80164aa:	d905      	bls.n	80164b8 <find_volume+0x188>
 80164ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80164ae:	3301      	adds	r3, #1
 80164b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80164b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80164b4:	2b03      	cmp	r3, #3
 80164b6:	d9e2      	bls.n	801647e <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80164b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80164bc:	2b04      	cmp	r3, #4
 80164be:	d101      	bne.n	80164c4 <find_volume+0x194>
 80164c0:	2301      	movs	r3, #1
 80164c2:	e17e      	b.n	80167c2 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80164c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80164c8:	2b01      	cmp	r3, #1
 80164ca:	d901      	bls.n	80164d0 <find_volume+0x1a0>
 80164cc:	230d      	movs	r3, #13
 80164ce:	e178      	b.n	80167c2 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80164d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80164d2:	3334      	adds	r3, #52	@ 0x34
 80164d4:	330b      	adds	r3, #11
 80164d6:	4618      	mov	r0, r3
 80164d8:	f7fe fcde 	bl	8014e98 <ld_word>
 80164dc:	4603      	mov	r3, r0
 80164de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80164e2:	d001      	beq.n	80164e8 <find_volume+0x1b8>
 80164e4:	230d      	movs	r3, #13
 80164e6:	e16c      	b.n	80167c2 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80164e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80164ea:	3334      	adds	r3, #52	@ 0x34
 80164ec:	3316      	adds	r3, #22
 80164ee:	4618      	mov	r0, r3
 80164f0:	f7fe fcd2 	bl	8014e98 <ld_word>
 80164f4:	4603      	mov	r3, r0
 80164f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80164f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d106      	bne.n	801650c <find_volume+0x1dc>
 80164fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016500:	3334      	adds	r3, #52	@ 0x34
 8016502:	3324      	adds	r3, #36	@ 0x24
 8016504:	4618      	mov	r0, r3
 8016506:	f7fe fce0 	bl	8014eca <ld_dword>
 801650a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801650c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801650e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8016510:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8016512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016514:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8016518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801651a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801651c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801651e:	789b      	ldrb	r3, [r3, #2]
 8016520:	2b01      	cmp	r3, #1
 8016522:	d005      	beq.n	8016530 <find_volume+0x200>
 8016524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016526:	789b      	ldrb	r3, [r3, #2]
 8016528:	2b02      	cmp	r3, #2
 801652a:	d001      	beq.n	8016530 <find_volume+0x200>
 801652c:	230d      	movs	r3, #13
 801652e:	e148      	b.n	80167c2 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8016530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016532:	789b      	ldrb	r3, [r3, #2]
 8016534:	461a      	mov	r2, r3
 8016536:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016538:	fb02 f303 	mul.w	r3, r2, r3
 801653c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801653e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016540:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8016544:	461a      	mov	r2, r3
 8016546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016548:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801654a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801654c:	895b      	ldrh	r3, [r3, #10]
 801654e:	2b00      	cmp	r3, #0
 8016550:	d008      	beq.n	8016564 <find_volume+0x234>
 8016552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016554:	895b      	ldrh	r3, [r3, #10]
 8016556:	461a      	mov	r2, r3
 8016558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801655a:	895b      	ldrh	r3, [r3, #10]
 801655c:	3b01      	subs	r3, #1
 801655e:	4013      	ands	r3, r2
 8016560:	2b00      	cmp	r3, #0
 8016562:	d001      	beq.n	8016568 <find_volume+0x238>
 8016564:	230d      	movs	r3, #13
 8016566:	e12c      	b.n	80167c2 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8016568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801656a:	3334      	adds	r3, #52	@ 0x34
 801656c:	3311      	adds	r3, #17
 801656e:	4618      	mov	r0, r3
 8016570:	f7fe fc92 	bl	8014e98 <ld_word>
 8016574:	4603      	mov	r3, r0
 8016576:	461a      	mov	r2, r3
 8016578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801657a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801657c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801657e:	891b      	ldrh	r3, [r3, #8]
 8016580:	f003 030f 	and.w	r3, r3, #15
 8016584:	b29b      	uxth	r3, r3
 8016586:	2b00      	cmp	r3, #0
 8016588:	d001      	beq.n	801658e <find_volume+0x25e>
 801658a:	230d      	movs	r3, #13
 801658c:	e119      	b.n	80167c2 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801658e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016590:	3334      	adds	r3, #52	@ 0x34
 8016592:	3313      	adds	r3, #19
 8016594:	4618      	mov	r0, r3
 8016596:	f7fe fc7f 	bl	8014e98 <ld_word>
 801659a:	4603      	mov	r3, r0
 801659c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801659e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d106      	bne.n	80165b2 <find_volume+0x282>
 80165a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165a6:	3334      	adds	r3, #52	@ 0x34
 80165a8:	3320      	adds	r3, #32
 80165aa:	4618      	mov	r0, r3
 80165ac:	f7fe fc8d 	bl	8014eca <ld_dword>
 80165b0:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80165b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165b4:	3334      	adds	r3, #52	@ 0x34
 80165b6:	330e      	adds	r3, #14
 80165b8:	4618      	mov	r0, r3
 80165ba:	f7fe fc6d 	bl	8014e98 <ld_word>
 80165be:	4603      	mov	r3, r0
 80165c0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80165c2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d101      	bne.n	80165cc <find_volume+0x29c>
 80165c8:	230d      	movs	r3, #13
 80165ca:	e0fa      	b.n	80167c2 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80165cc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80165ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80165d0:	4413      	add	r3, r2
 80165d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80165d4:	8912      	ldrh	r2, [r2, #8]
 80165d6:	0912      	lsrs	r2, r2, #4
 80165d8:	b292      	uxth	r2, r2
 80165da:	4413      	add	r3, r2
 80165dc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80165de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80165e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165e2:	429a      	cmp	r2, r3
 80165e4:	d204      	bcs.n	80165f0 <find_volume+0x2c0>
 80165e6:	230d      	movs	r3, #13
 80165e8:	e0eb      	b.n	80167c2 <find_volume+0x492>
 80165ea:	bf00      	nop
 80165ec:	200023e0 	.word	0x200023e0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80165f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80165f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165f4:	1ad3      	subs	r3, r2, r3
 80165f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80165f8:	8952      	ldrh	r2, [r2, #10]
 80165fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80165fe:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8016600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016602:	2b00      	cmp	r3, #0
 8016604:	d101      	bne.n	801660a <find_volume+0x2da>
 8016606:	230d      	movs	r3, #13
 8016608:	e0db      	b.n	80167c2 <find_volume+0x492>
		fmt = FS_FAT32;
 801660a:	2303      	movs	r3, #3
 801660c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8016610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016612:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8016616:	4293      	cmp	r3, r2
 8016618:	d802      	bhi.n	8016620 <find_volume+0x2f0>
 801661a:	2302      	movs	r3, #2
 801661c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8016620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016622:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8016626:	4293      	cmp	r3, r2
 8016628:	d802      	bhi.n	8016630 <find_volume+0x300>
 801662a:	2301      	movs	r3, #1
 801662c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8016630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016632:	1c9a      	adds	r2, r3, #2
 8016634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016636:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8016638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801663a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801663c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801663e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8016640:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016642:	441a      	add	r2, r3
 8016644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016646:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8016648:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801664a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801664c:	441a      	add	r2, r3
 801664e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016650:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8016652:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8016656:	2b03      	cmp	r3, #3
 8016658:	d11e      	bne.n	8016698 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801665a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801665c:	3334      	adds	r3, #52	@ 0x34
 801665e:	332a      	adds	r3, #42	@ 0x2a
 8016660:	4618      	mov	r0, r3
 8016662:	f7fe fc19 	bl	8014e98 <ld_word>
 8016666:	4603      	mov	r3, r0
 8016668:	2b00      	cmp	r3, #0
 801666a:	d001      	beq.n	8016670 <find_volume+0x340>
 801666c:	230d      	movs	r3, #13
 801666e:	e0a8      	b.n	80167c2 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8016670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016672:	891b      	ldrh	r3, [r3, #8]
 8016674:	2b00      	cmp	r3, #0
 8016676:	d001      	beq.n	801667c <find_volume+0x34c>
 8016678:	230d      	movs	r3, #13
 801667a:	e0a2      	b.n	80167c2 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801667c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801667e:	3334      	adds	r3, #52	@ 0x34
 8016680:	332c      	adds	r3, #44	@ 0x2c
 8016682:	4618      	mov	r0, r3
 8016684:	f7fe fc21 	bl	8014eca <ld_dword>
 8016688:	4602      	mov	r2, r0
 801668a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801668c:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801668e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016690:	699b      	ldr	r3, [r3, #24]
 8016692:	009b      	lsls	r3, r3, #2
 8016694:	647b      	str	r3, [r7, #68]	@ 0x44
 8016696:	e01f      	b.n	80166d8 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8016698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801669a:	891b      	ldrh	r3, [r3, #8]
 801669c:	2b00      	cmp	r3, #0
 801669e:	d101      	bne.n	80166a4 <find_volume+0x374>
 80166a0:	230d      	movs	r3, #13
 80166a2:	e08e      	b.n	80167c2 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80166a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80166a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80166a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80166aa:	441a      	add	r2, r3
 80166ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80166ae:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80166b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80166b4:	2b02      	cmp	r3, #2
 80166b6:	d103      	bne.n	80166c0 <find_volume+0x390>
 80166b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80166ba:	699b      	ldr	r3, [r3, #24]
 80166bc:	005b      	lsls	r3, r3, #1
 80166be:	e00a      	b.n	80166d6 <find_volume+0x3a6>
 80166c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80166c2:	699a      	ldr	r2, [r3, #24]
 80166c4:	4613      	mov	r3, r2
 80166c6:	005b      	lsls	r3, r3, #1
 80166c8:	4413      	add	r3, r2
 80166ca:	085a      	lsrs	r2, r3, #1
 80166cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80166ce:	699b      	ldr	r3, [r3, #24]
 80166d0:	f003 0301 	and.w	r3, r3, #1
 80166d4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80166d6:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80166d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80166da:	69da      	ldr	r2, [r3, #28]
 80166dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80166de:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80166e2:	0a5b      	lsrs	r3, r3, #9
 80166e4:	429a      	cmp	r2, r3
 80166e6:	d201      	bcs.n	80166ec <find_volume+0x3bc>
 80166e8:	230d      	movs	r3, #13
 80166ea:	e06a      	b.n	80167c2 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80166ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80166ee:	f04f 32ff 	mov.w	r2, #4294967295
 80166f2:	615a      	str	r2, [r3, #20]
 80166f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80166f6:	695a      	ldr	r2, [r3, #20]
 80166f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80166fa:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80166fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80166fe:	2280      	movs	r2, #128	@ 0x80
 8016700:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8016702:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8016706:	2b03      	cmp	r3, #3
 8016708:	d149      	bne.n	801679e <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801670a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801670c:	3334      	adds	r3, #52	@ 0x34
 801670e:	3330      	adds	r3, #48	@ 0x30
 8016710:	4618      	mov	r0, r3
 8016712:	f7fe fbc1 	bl	8014e98 <ld_word>
 8016716:	4603      	mov	r3, r0
 8016718:	2b01      	cmp	r3, #1
 801671a:	d140      	bne.n	801679e <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 801671c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801671e:	3301      	adds	r3, #1
 8016720:	4619      	mov	r1, r3
 8016722:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016724:	f7fe fe9a 	bl	801545c <move_window>
 8016728:	4603      	mov	r3, r0
 801672a:	2b00      	cmp	r3, #0
 801672c:	d137      	bne.n	801679e <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 801672e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016730:	2200      	movs	r2, #0
 8016732:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8016734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016736:	3334      	adds	r3, #52	@ 0x34
 8016738:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801673c:	4618      	mov	r0, r3
 801673e:	f7fe fbab 	bl	8014e98 <ld_word>
 8016742:	4603      	mov	r3, r0
 8016744:	461a      	mov	r2, r3
 8016746:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801674a:	429a      	cmp	r2, r3
 801674c:	d127      	bne.n	801679e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801674e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016750:	3334      	adds	r3, #52	@ 0x34
 8016752:	4618      	mov	r0, r3
 8016754:	f7fe fbb9 	bl	8014eca <ld_dword>
 8016758:	4603      	mov	r3, r0
 801675a:	4a1c      	ldr	r2, [pc, #112]	@ (80167cc <find_volume+0x49c>)
 801675c:	4293      	cmp	r3, r2
 801675e:	d11e      	bne.n	801679e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8016760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016762:	3334      	adds	r3, #52	@ 0x34
 8016764:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8016768:	4618      	mov	r0, r3
 801676a:	f7fe fbae 	bl	8014eca <ld_dword>
 801676e:	4603      	mov	r3, r0
 8016770:	4a17      	ldr	r2, [pc, #92]	@ (80167d0 <find_volume+0x4a0>)
 8016772:	4293      	cmp	r3, r2
 8016774:	d113      	bne.n	801679e <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8016776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016778:	3334      	adds	r3, #52	@ 0x34
 801677a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801677e:	4618      	mov	r0, r3
 8016780:	f7fe fba3 	bl	8014eca <ld_dword>
 8016784:	4602      	mov	r2, r0
 8016786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016788:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801678a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801678c:	3334      	adds	r3, #52	@ 0x34
 801678e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8016792:	4618      	mov	r0, r3
 8016794:	f7fe fb99 	bl	8014eca <ld_dword>
 8016798:	4602      	mov	r2, r0
 801679a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801679c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801679e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80167a0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80167a4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80167a6:	4b0b      	ldr	r3, [pc, #44]	@ (80167d4 <find_volume+0x4a4>)
 80167a8:	881b      	ldrh	r3, [r3, #0]
 80167aa:	3301      	adds	r3, #1
 80167ac:	b29a      	uxth	r2, r3
 80167ae:	4b09      	ldr	r3, [pc, #36]	@ (80167d4 <find_volume+0x4a4>)
 80167b0:	801a      	strh	r2, [r3, #0]
 80167b2:	4b08      	ldr	r3, [pc, #32]	@ (80167d4 <find_volume+0x4a4>)
 80167b4:	881a      	ldrh	r2, [r3, #0]
 80167b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80167b8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80167ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80167bc:	f7fe fde6 	bl	801538c <clear_lock>
#endif
	return FR_OK;
 80167c0:	2300      	movs	r3, #0
}
 80167c2:	4618      	mov	r0, r3
 80167c4:	3758      	adds	r7, #88	@ 0x58
 80167c6:	46bd      	mov	sp, r7
 80167c8:	bd80      	pop	{r7, pc}
 80167ca:	bf00      	nop
 80167cc:	41615252 	.word	0x41615252
 80167d0:	61417272 	.word	0x61417272
 80167d4:	200023e4 	.word	0x200023e4

080167d8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80167d8:	b580      	push	{r7, lr}
 80167da:	b084      	sub	sp, #16
 80167dc:	af00      	add	r7, sp, #0
 80167de:	6078      	str	r0, [r7, #4]
 80167e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80167e2:	2309      	movs	r3, #9
 80167e4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d02e      	beq.n	801684a <validate+0x72>
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	d02a      	beq.n	801684a <validate+0x72>
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	681b      	ldr	r3, [r3, #0]
 80167f8:	781b      	ldrb	r3, [r3, #0]
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d025      	beq.n	801684a <validate+0x72>
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	889a      	ldrh	r2, [r3, #4]
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	88db      	ldrh	r3, [r3, #6]
 8016808:	429a      	cmp	r2, r3
 801680a:	d11e      	bne.n	801684a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	4618      	mov	r0, r3
 8016812:	f7fe fc42 	bl	801509a <lock_fs>
 8016816:	4603      	mov	r3, r0
 8016818:	2b00      	cmp	r3, #0
 801681a:	d014      	beq.n	8016846 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	785b      	ldrb	r3, [r3, #1]
 8016822:	4618      	mov	r0, r3
 8016824:	f7fe fa9a 	bl	8014d5c <disk_status>
 8016828:	4603      	mov	r3, r0
 801682a:	f003 0301 	and.w	r3, r3, #1
 801682e:	2b00      	cmp	r3, #0
 8016830:	d102      	bne.n	8016838 <validate+0x60>
				res = FR_OK;
 8016832:	2300      	movs	r3, #0
 8016834:	73fb      	strb	r3, [r7, #15]
 8016836:	e008      	b.n	801684a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	681b      	ldr	r3, [r3, #0]
 801683c:	2100      	movs	r1, #0
 801683e:	4618      	mov	r0, r3
 8016840:	f7fe fc41 	bl	80150c6 <unlock_fs>
 8016844:	e001      	b.n	801684a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8016846:	230f      	movs	r3, #15
 8016848:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801684a:	7bfb      	ldrb	r3, [r7, #15]
 801684c:	2b00      	cmp	r3, #0
 801684e:	d102      	bne.n	8016856 <validate+0x7e>
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	681b      	ldr	r3, [r3, #0]
 8016854:	e000      	b.n	8016858 <validate+0x80>
 8016856:	2300      	movs	r3, #0
 8016858:	683a      	ldr	r2, [r7, #0]
 801685a:	6013      	str	r3, [r2, #0]
	return res;
 801685c:	7bfb      	ldrb	r3, [r7, #15]
}
 801685e:	4618      	mov	r0, r3
 8016860:	3710      	adds	r7, #16
 8016862:	46bd      	mov	sp, r7
 8016864:	bd80      	pop	{r7, pc}
	...

08016868 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8016868:	b580      	push	{r7, lr}
 801686a:	b088      	sub	sp, #32
 801686c:	af00      	add	r7, sp, #0
 801686e:	60f8      	str	r0, [r7, #12]
 8016870:	60b9      	str	r1, [r7, #8]
 8016872:	4613      	mov	r3, r2
 8016874:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8016876:	68bb      	ldr	r3, [r7, #8]
 8016878:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801687a:	f107 0310 	add.w	r3, r7, #16
 801687e:	4618      	mov	r0, r3
 8016880:	f7ff fcbb 	bl	80161fa <get_ldnumber>
 8016884:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8016886:	69fb      	ldr	r3, [r7, #28]
 8016888:	2b00      	cmp	r3, #0
 801688a:	da01      	bge.n	8016890 <f_mount+0x28>
 801688c:	230b      	movs	r3, #11
 801688e:	e048      	b.n	8016922 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8016890:	4a26      	ldr	r2, [pc, #152]	@ (801692c <f_mount+0xc4>)
 8016892:	69fb      	ldr	r3, [r7, #28]
 8016894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016898:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801689a:	69bb      	ldr	r3, [r7, #24]
 801689c:	2b00      	cmp	r3, #0
 801689e:	d00f      	beq.n	80168c0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80168a0:	69b8      	ldr	r0, [r7, #24]
 80168a2:	f7fe fd73 	bl	801538c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80168a6:	69bb      	ldr	r3, [r7, #24]
 80168a8:	68db      	ldr	r3, [r3, #12]
 80168aa:	4618      	mov	r0, r3
 80168ac:	f001 f905 	bl	8017aba <ff_del_syncobj>
 80168b0:	4603      	mov	r3, r0
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d101      	bne.n	80168ba <f_mount+0x52>
 80168b6:	2302      	movs	r3, #2
 80168b8:	e033      	b.n	8016922 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80168ba:	69bb      	ldr	r3, [r7, #24]
 80168bc:	2200      	movs	r2, #0
 80168be:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d00f      	beq.n	80168e6 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	2200      	movs	r2, #0
 80168ca:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80168cc:	69fb      	ldr	r3, [r7, #28]
 80168ce:	b2da      	uxtb	r2, r3
 80168d0:	68fb      	ldr	r3, [r7, #12]
 80168d2:	330c      	adds	r3, #12
 80168d4:	4619      	mov	r1, r3
 80168d6:	4610      	mov	r0, r2
 80168d8:	f001 f8cf 	bl	8017a7a <ff_cre_syncobj>
 80168dc:	4603      	mov	r3, r0
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d101      	bne.n	80168e6 <f_mount+0x7e>
 80168e2:	2302      	movs	r3, #2
 80168e4:	e01d      	b.n	8016922 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80168e6:	68fa      	ldr	r2, [r7, #12]
 80168e8:	4910      	ldr	r1, [pc, #64]	@ (801692c <f_mount+0xc4>)
 80168ea:	69fb      	ldr	r3, [r7, #28]
 80168ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80168f0:	68fb      	ldr	r3, [r7, #12]
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	d002      	beq.n	80168fc <f_mount+0x94>
 80168f6:	79fb      	ldrb	r3, [r7, #7]
 80168f8:	2b01      	cmp	r3, #1
 80168fa:	d001      	beq.n	8016900 <f_mount+0x98>
 80168fc:	2300      	movs	r3, #0
 80168fe:	e010      	b.n	8016922 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8016900:	f107 010c 	add.w	r1, r7, #12
 8016904:	f107 0308 	add.w	r3, r7, #8
 8016908:	2200      	movs	r2, #0
 801690a:	4618      	mov	r0, r3
 801690c:	f7ff fd10 	bl	8016330 <find_volume>
 8016910:	4603      	mov	r3, r0
 8016912:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8016914:	68fb      	ldr	r3, [r7, #12]
 8016916:	7dfa      	ldrb	r2, [r7, #23]
 8016918:	4611      	mov	r1, r2
 801691a:	4618      	mov	r0, r3
 801691c:	f7fe fbd3 	bl	80150c6 <unlock_fs>
 8016920:	7dfb      	ldrb	r3, [r7, #23]
}
 8016922:	4618      	mov	r0, r3
 8016924:	3720      	adds	r7, #32
 8016926:	46bd      	mov	sp, r7
 8016928:	bd80      	pop	{r7, pc}
 801692a:	bf00      	nop
 801692c:	200023e0 	.word	0x200023e0

08016930 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8016930:	b580      	push	{r7, lr}
 8016932:	b098      	sub	sp, #96	@ 0x60
 8016934:	af00      	add	r7, sp, #0
 8016936:	60f8      	str	r0, [r7, #12]
 8016938:	60b9      	str	r1, [r7, #8]
 801693a:	4613      	mov	r3, r2
 801693c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801693e:	68fb      	ldr	r3, [r7, #12]
 8016940:	2b00      	cmp	r3, #0
 8016942:	d101      	bne.n	8016948 <f_open+0x18>
 8016944:	2309      	movs	r3, #9
 8016946:	e1b0      	b.n	8016caa <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8016948:	79fb      	ldrb	r3, [r7, #7]
 801694a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801694e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8016950:	79fa      	ldrb	r2, [r7, #7]
 8016952:	f107 0110 	add.w	r1, r7, #16
 8016956:	f107 0308 	add.w	r3, r7, #8
 801695a:	4618      	mov	r0, r3
 801695c:	f7ff fce8 	bl	8016330 <find_volume>
 8016960:	4603      	mov	r3, r0
 8016962:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8016966:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801696a:	2b00      	cmp	r3, #0
 801696c:	f040 818d 	bne.w	8016c8a <f_open+0x35a>
		dj.obj.fs = fs;
 8016970:	693b      	ldr	r3, [r7, #16]
 8016972:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8016974:	68ba      	ldr	r2, [r7, #8]
 8016976:	f107 0314 	add.w	r3, r7, #20
 801697a:	4611      	mov	r1, r2
 801697c:	4618      	mov	r0, r3
 801697e:	f7ff fbcb 	bl	8016118 <follow_path>
 8016982:	4603      	mov	r3, r0
 8016984:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8016988:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801698c:	2b00      	cmp	r3, #0
 801698e:	d118      	bne.n	80169c2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8016990:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8016994:	b25b      	sxtb	r3, r3
 8016996:	2b00      	cmp	r3, #0
 8016998:	da03      	bge.n	80169a2 <f_open+0x72>
				res = FR_INVALID_NAME;
 801699a:	2306      	movs	r3, #6
 801699c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80169a0:	e00f      	b.n	80169c2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80169a2:	79fb      	ldrb	r3, [r7, #7]
 80169a4:	2b01      	cmp	r3, #1
 80169a6:	bf8c      	ite	hi
 80169a8:	2301      	movhi	r3, #1
 80169aa:	2300      	movls	r3, #0
 80169ac:	b2db      	uxtb	r3, r3
 80169ae:	461a      	mov	r2, r3
 80169b0:	f107 0314 	add.w	r3, r7, #20
 80169b4:	4611      	mov	r1, r2
 80169b6:	4618      	mov	r0, r3
 80169b8:	f7fe fba0 	bl	80150fc <chk_lock>
 80169bc:	4603      	mov	r3, r0
 80169be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80169c2:	79fb      	ldrb	r3, [r7, #7]
 80169c4:	f003 031c 	and.w	r3, r3, #28
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d07f      	beq.n	8016acc <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80169cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d017      	beq.n	8016a04 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80169d4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80169d8:	2b04      	cmp	r3, #4
 80169da:	d10e      	bne.n	80169fa <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80169dc:	f7fe fbea 	bl	80151b4 <enq_lock>
 80169e0:	4603      	mov	r3, r0
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d006      	beq.n	80169f4 <f_open+0xc4>
 80169e6:	f107 0314 	add.w	r3, r7, #20
 80169ea:	4618      	mov	r0, r3
 80169ec:	f7ff face 	bl	8015f8c <dir_register>
 80169f0:	4603      	mov	r3, r0
 80169f2:	e000      	b.n	80169f6 <f_open+0xc6>
 80169f4:	2312      	movs	r3, #18
 80169f6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80169fa:	79fb      	ldrb	r3, [r7, #7]
 80169fc:	f043 0308 	orr.w	r3, r3, #8
 8016a00:	71fb      	strb	r3, [r7, #7]
 8016a02:	e010      	b.n	8016a26 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8016a04:	7ebb      	ldrb	r3, [r7, #26]
 8016a06:	f003 0311 	and.w	r3, r3, #17
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d003      	beq.n	8016a16 <f_open+0xe6>
					res = FR_DENIED;
 8016a0e:	2307      	movs	r3, #7
 8016a10:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8016a14:	e007      	b.n	8016a26 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8016a16:	79fb      	ldrb	r3, [r7, #7]
 8016a18:	f003 0304 	and.w	r3, r3, #4
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d002      	beq.n	8016a26 <f_open+0xf6>
 8016a20:	2308      	movs	r3, #8
 8016a22:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8016a26:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	d168      	bne.n	8016b00 <f_open+0x1d0>
 8016a2e:	79fb      	ldrb	r3, [r7, #7]
 8016a30:	f003 0308 	and.w	r3, r3, #8
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d063      	beq.n	8016b00 <f_open+0x1d0>
				dw = GET_FATTIME();
 8016a38:	f7fb fd60 	bl	80124fc <get_fattime>
 8016a3c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8016a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016a40:	330e      	adds	r3, #14
 8016a42:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8016a44:	4618      	mov	r0, r3
 8016a46:	f7fe fa7e 	bl	8014f46 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8016a4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016a4c:	3316      	adds	r3, #22
 8016a4e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8016a50:	4618      	mov	r0, r3
 8016a52:	f7fe fa78 	bl	8014f46 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8016a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016a58:	330b      	adds	r3, #11
 8016a5a:	2220      	movs	r2, #32
 8016a5c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8016a5e:	693b      	ldr	r3, [r7, #16]
 8016a60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016a62:	4611      	mov	r1, r2
 8016a64:	4618      	mov	r0, r3
 8016a66:	f7ff f9fd 	bl	8015e64 <ld_clust>
 8016a6a:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8016a6c:	693b      	ldr	r3, [r7, #16]
 8016a6e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8016a70:	2200      	movs	r2, #0
 8016a72:	4618      	mov	r0, r3
 8016a74:	f7ff fa15 	bl	8015ea2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8016a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016a7a:	331c      	adds	r3, #28
 8016a7c:	2100      	movs	r1, #0
 8016a7e:	4618      	mov	r0, r3
 8016a80:	f7fe fa61 	bl	8014f46 <st_dword>
					fs->wflag = 1;
 8016a84:	693b      	ldr	r3, [r7, #16]
 8016a86:	2201      	movs	r2, #1
 8016a88:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8016a8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d037      	beq.n	8016b00 <f_open+0x1d0>
						dw = fs->winsect;
 8016a90:	693b      	ldr	r3, [r7, #16]
 8016a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016a94:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8016a96:	f107 0314 	add.w	r3, r7, #20
 8016a9a:	2200      	movs	r2, #0
 8016a9c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8016a9e:	4618      	mov	r0, r3
 8016aa0:	f7fe ff28 	bl	80158f4 <remove_chain>
 8016aa4:	4603      	mov	r3, r0
 8016aa6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8016aaa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d126      	bne.n	8016b00 <f_open+0x1d0>
							res = move_window(fs, dw);
 8016ab2:	693b      	ldr	r3, [r7, #16]
 8016ab4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8016ab6:	4618      	mov	r0, r3
 8016ab8:	f7fe fcd0 	bl	801545c <move_window>
 8016abc:	4603      	mov	r3, r0
 8016abe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8016ac2:	693b      	ldr	r3, [r7, #16]
 8016ac4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8016ac6:	3a01      	subs	r2, #1
 8016ac8:	611a      	str	r2, [r3, #16]
 8016aca:	e019      	b.n	8016b00 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8016acc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d115      	bne.n	8016b00 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8016ad4:	7ebb      	ldrb	r3, [r7, #26]
 8016ad6:	f003 0310 	and.w	r3, r3, #16
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d003      	beq.n	8016ae6 <f_open+0x1b6>
					res = FR_NO_FILE;
 8016ade:	2304      	movs	r3, #4
 8016ae0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8016ae4:	e00c      	b.n	8016b00 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8016ae6:	79fb      	ldrb	r3, [r7, #7]
 8016ae8:	f003 0302 	and.w	r3, r3, #2
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d007      	beq.n	8016b00 <f_open+0x1d0>
 8016af0:	7ebb      	ldrb	r3, [r7, #26]
 8016af2:	f003 0301 	and.w	r3, r3, #1
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d002      	beq.n	8016b00 <f_open+0x1d0>
						res = FR_DENIED;
 8016afa:	2307      	movs	r3, #7
 8016afc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8016b00:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	d126      	bne.n	8016b56 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8016b08:	79fb      	ldrb	r3, [r7, #7]
 8016b0a:	f003 0308 	and.w	r3, r3, #8
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	d003      	beq.n	8016b1a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8016b12:	79fb      	ldrb	r3, [r7, #7]
 8016b14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016b18:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8016b1a:	693b      	ldr	r3, [r7, #16]
 8016b1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8016b1e:	68fb      	ldr	r3, [r7, #12]
 8016b20:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8016b22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016b24:	68fb      	ldr	r3, [r7, #12]
 8016b26:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016b28:	79fb      	ldrb	r3, [r7, #7]
 8016b2a:	2b01      	cmp	r3, #1
 8016b2c:	bf8c      	ite	hi
 8016b2e:	2301      	movhi	r3, #1
 8016b30:	2300      	movls	r3, #0
 8016b32:	b2db      	uxtb	r3, r3
 8016b34:	461a      	mov	r2, r3
 8016b36:	f107 0314 	add.w	r3, r7, #20
 8016b3a:	4611      	mov	r1, r2
 8016b3c:	4618      	mov	r0, r3
 8016b3e:	f7fe fb5b 	bl	80151f8 <inc_lock>
 8016b42:	4602      	mov	r2, r0
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8016b48:	68fb      	ldr	r3, [r7, #12]
 8016b4a:	691b      	ldr	r3, [r3, #16]
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d102      	bne.n	8016b56 <f_open+0x226>
 8016b50:	2302      	movs	r3, #2
 8016b52:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8016b56:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	f040 8095 	bne.w	8016c8a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8016b60:	693b      	ldr	r3, [r7, #16]
 8016b62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016b64:	4611      	mov	r1, r2
 8016b66:	4618      	mov	r0, r3
 8016b68:	f7ff f97c 	bl	8015e64 <ld_clust>
 8016b6c:	4602      	mov	r2, r0
 8016b6e:	68fb      	ldr	r3, [r7, #12]
 8016b70:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8016b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016b74:	331c      	adds	r3, #28
 8016b76:	4618      	mov	r0, r3
 8016b78:	f7fe f9a7 	bl	8014eca <ld_dword>
 8016b7c:	4602      	mov	r2, r0
 8016b7e:	68fb      	ldr	r3, [r7, #12]
 8016b80:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8016b82:	68fb      	ldr	r3, [r7, #12]
 8016b84:	2200      	movs	r2, #0
 8016b86:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8016b88:	693a      	ldr	r2, [r7, #16]
 8016b8a:	68fb      	ldr	r3, [r7, #12]
 8016b8c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8016b8e:	693b      	ldr	r3, [r7, #16]
 8016b90:	88da      	ldrh	r2, [r3, #6]
 8016b92:	68fb      	ldr	r3, [r7, #12]
 8016b94:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	79fa      	ldrb	r2, [r7, #7]
 8016b9a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8016b9c:	68fb      	ldr	r3, [r7, #12]
 8016b9e:	2200      	movs	r2, #0
 8016ba0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8016ba2:	68fb      	ldr	r3, [r7, #12]
 8016ba4:	2200      	movs	r2, #0
 8016ba6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8016ba8:	68fb      	ldr	r3, [r7, #12]
 8016baa:	2200      	movs	r2, #0
 8016bac:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8016bae:	68fb      	ldr	r3, [r7, #12]
 8016bb0:	3330      	adds	r3, #48	@ 0x30
 8016bb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016bb6:	2100      	movs	r1, #0
 8016bb8:	4618      	mov	r0, r3
 8016bba:	f7fe fa11 	bl	8014fe0 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8016bbe:	79fb      	ldrb	r3, [r7, #7]
 8016bc0:	f003 0320 	and.w	r3, r3, #32
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d060      	beq.n	8016c8a <f_open+0x35a>
 8016bc8:	68fb      	ldr	r3, [r7, #12]
 8016bca:	68db      	ldr	r3, [r3, #12]
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d05c      	beq.n	8016c8a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	68da      	ldr	r2, [r3, #12]
 8016bd4:	68fb      	ldr	r3, [r7, #12]
 8016bd6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8016bd8:	693b      	ldr	r3, [r7, #16]
 8016bda:	895b      	ldrh	r3, [r3, #10]
 8016bdc:	025b      	lsls	r3, r3, #9
 8016bde:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8016be0:	68fb      	ldr	r3, [r7, #12]
 8016be2:	689b      	ldr	r3, [r3, #8]
 8016be4:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016be6:	68fb      	ldr	r3, [r7, #12]
 8016be8:	68db      	ldr	r3, [r3, #12]
 8016bea:	657b      	str	r3, [r7, #84]	@ 0x54
 8016bec:	e016      	b.n	8016c1c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8016bf2:	4618      	mov	r0, r3
 8016bf4:	f7fe fced 	bl	80155d2 <get_fat>
 8016bf8:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8016bfa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016bfc:	2b01      	cmp	r3, #1
 8016bfe:	d802      	bhi.n	8016c06 <f_open+0x2d6>
 8016c00:	2302      	movs	r3, #2
 8016c02:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8016c06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c0c:	d102      	bne.n	8016c14 <f_open+0x2e4>
 8016c0e:	2301      	movs	r3, #1
 8016c10:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016c14:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8016c16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016c18:	1ad3      	subs	r3, r2, r3
 8016c1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8016c1c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d103      	bne.n	8016c2c <f_open+0x2fc>
 8016c24:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8016c26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016c28:	429a      	cmp	r2, r3
 8016c2a:	d8e0      	bhi.n	8016bee <f_open+0x2be>
				}
				fp->clust = clst;
 8016c2c:	68fb      	ldr	r3, [r7, #12]
 8016c2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8016c30:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8016c32:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d127      	bne.n	8016c8a <f_open+0x35a>
 8016c3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d022      	beq.n	8016c8a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8016c44:	693b      	ldr	r3, [r7, #16]
 8016c46:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8016c48:	4618      	mov	r0, r3
 8016c4a:	f7fe fca3 	bl	8015594 <clust2sect>
 8016c4e:	6478      	str	r0, [r7, #68]	@ 0x44
 8016c50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d103      	bne.n	8016c5e <f_open+0x32e>
						res = FR_INT_ERR;
 8016c56:	2302      	movs	r3, #2
 8016c58:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8016c5c:	e015      	b.n	8016c8a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8016c5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016c60:	0a5a      	lsrs	r2, r3, #9
 8016c62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016c64:	441a      	add	r2, r3
 8016c66:	68fb      	ldr	r3, [r7, #12]
 8016c68:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8016c6a:	693b      	ldr	r3, [r7, #16]
 8016c6c:	7858      	ldrb	r0, [r3, #1]
 8016c6e:	68fb      	ldr	r3, [r7, #12]
 8016c70:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8016c74:	68fb      	ldr	r3, [r7, #12]
 8016c76:	6a1a      	ldr	r2, [r3, #32]
 8016c78:	2301      	movs	r3, #1
 8016c7a:	f7fe f8af 	bl	8014ddc <disk_read>
 8016c7e:	4603      	mov	r3, r0
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d002      	beq.n	8016c8a <f_open+0x35a>
 8016c84:	2301      	movs	r3, #1
 8016c86:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8016c8a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d002      	beq.n	8016c98 <f_open+0x368>
 8016c92:	68fb      	ldr	r3, [r7, #12]
 8016c94:	2200      	movs	r2, #0
 8016c96:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8016c98:	693b      	ldr	r3, [r7, #16]
 8016c9a:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8016c9e:	4611      	mov	r1, r2
 8016ca0:	4618      	mov	r0, r3
 8016ca2:	f7fe fa10 	bl	80150c6 <unlock_fs>
 8016ca6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8016caa:	4618      	mov	r0, r3
 8016cac:	3760      	adds	r7, #96	@ 0x60
 8016cae:	46bd      	mov	sp, r7
 8016cb0:	bd80      	pop	{r7, pc}

08016cb2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8016cb2:	b580      	push	{r7, lr}
 8016cb4:	b08c      	sub	sp, #48	@ 0x30
 8016cb6:	af00      	add	r7, sp, #0
 8016cb8:	60f8      	str	r0, [r7, #12]
 8016cba:	60b9      	str	r1, [r7, #8]
 8016cbc:	607a      	str	r2, [r7, #4]
 8016cbe:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8016cc0:	68bb      	ldr	r3, [r7, #8]
 8016cc2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8016cc4:	683b      	ldr	r3, [r7, #0]
 8016cc6:	2200      	movs	r2, #0
 8016cc8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8016cca:	68fb      	ldr	r3, [r7, #12]
 8016ccc:	f107 0210 	add.w	r2, r7, #16
 8016cd0:	4611      	mov	r1, r2
 8016cd2:	4618      	mov	r0, r3
 8016cd4:	f7ff fd80 	bl	80167d8 <validate>
 8016cd8:	4603      	mov	r3, r0
 8016cda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8016cde:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d107      	bne.n	8016cf6 <f_write+0x44>
 8016ce6:	68fb      	ldr	r3, [r7, #12]
 8016ce8:	7d5b      	ldrb	r3, [r3, #21]
 8016cea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8016cee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d009      	beq.n	8016d0a <f_write+0x58>
 8016cf6:	693b      	ldr	r3, [r7, #16]
 8016cf8:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8016cfc:	4611      	mov	r1, r2
 8016cfe:	4618      	mov	r0, r3
 8016d00:	f7fe f9e1 	bl	80150c6 <unlock_fs>
 8016d04:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8016d08:	e173      	b.n	8016ff2 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8016d0a:	68fb      	ldr	r3, [r7, #12]
 8016d0c:	7d1b      	ldrb	r3, [r3, #20]
 8016d0e:	f003 0302 	and.w	r3, r3, #2
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d106      	bne.n	8016d24 <f_write+0x72>
 8016d16:	693b      	ldr	r3, [r7, #16]
 8016d18:	2107      	movs	r1, #7
 8016d1a:	4618      	mov	r0, r3
 8016d1c:	f7fe f9d3 	bl	80150c6 <unlock_fs>
 8016d20:	2307      	movs	r3, #7
 8016d22:	e166      	b.n	8016ff2 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8016d24:	68fb      	ldr	r3, [r7, #12]
 8016d26:	699a      	ldr	r2, [r3, #24]
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	441a      	add	r2, r3
 8016d2c:	68fb      	ldr	r3, [r7, #12]
 8016d2e:	699b      	ldr	r3, [r3, #24]
 8016d30:	429a      	cmp	r2, r3
 8016d32:	f080 814b 	bcs.w	8016fcc <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8016d36:	68fb      	ldr	r3, [r7, #12]
 8016d38:	699b      	ldr	r3, [r3, #24]
 8016d3a:	43db      	mvns	r3, r3
 8016d3c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8016d3e:	e145      	b.n	8016fcc <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8016d40:	68fb      	ldr	r3, [r7, #12]
 8016d42:	699b      	ldr	r3, [r3, #24]
 8016d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	f040 8101 	bne.w	8016f50 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8016d4e:	68fb      	ldr	r3, [r7, #12]
 8016d50:	699b      	ldr	r3, [r3, #24]
 8016d52:	0a5b      	lsrs	r3, r3, #9
 8016d54:	693a      	ldr	r2, [r7, #16]
 8016d56:	8952      	ldrh	r2, [r2, #10]
 8016d58:	3a01      	subs	r2, #1
 8016d5a:	4013      	ands	r3, r2
 8016d5c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8016d5e:	69bb      	ldr	r3, [r7, #24]
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d14d      	bne.n	8016e00 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8016d64:	68fb      	ldr	r3, [r7, #12]
 8016d66:	699b      	ldr	r3, [r3, #24]
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d10c      	bne.n	8016d86 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8016d6c:	68fb      	ldr	r3, [r7, #12]
 8016d6e:	689b      	ldr	r3, [r3, #8]
 8016d70:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8016d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d11a      	bne.n	8016dae <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8016d78:	68fb      	ldr	r3, [r7, #12]
 8016d7a:	2100      	movs	r1, #0
 8016d7c:	4618      	mov	r0, r3
 8016d7e:	f7fe fe1e 	bl	80159be <create_chain>
 8016d82:	62b8      	str	r0, [r7, #40]	@ 0x28
 8016d84:	e013      	b.n	8016dae <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8016d86:	68fb      	ldr	r3, [r7, #12]
 8016d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d007      	beq.n	8016d9e <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8016d8e:	68fb      	ldr	r3, [r7, #12]
 8016d90:	699b      	ldr	r3, [r3, #24]
 8016d92:	4619      	mov	r1, r3
 8016d94:	68f8      	ldr	r0, [r7, #12]
 8016d96:	f7fe feaa 	bl	8015aee <clmt_clust>
 8016d9a:	62b8      	str	r0, [r7, #40]	@ 0x28
 8016d9c:	e007      	b.n	8016dae <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8016d9e:	68fa      	ldr	r2, [r7, #12]
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	69db      	ldr	r3, [r3, #28]
 8016da4:	4619      	mov	r1, r3
 8016da6:	4610      	mov	r0, r2
 8016da8:	f7fe fe09 	bl	80159be <create_chain>
 8016dac:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8016dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	f000 8110 	beq.w	8016fd6 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8016db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016db8:	2b01      	cmp	r3, #1
 8016dba:	d109      	bne.n	8016dd0 <f_write+0x11e>
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	2202      	movs	r2, #2
 8016dc0:	755a      	strb	r2, [r3, #21]
 8016dc2:	693b      	ldr	r3, [r7, #16]
 8016dc4:	2102      	movs	r1, #2
 8016dc6:	4618      	mov	r0, r3
 8016dc8:	f7fe f97d 	bl	80150c6 <unlock_fs>
 8016dcc:	2302      	movs	r3, #2
 8016dce:	e110      	b.n	8016ff2 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8016dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016dd6:	d109      	bne.n	8016dec <f_write+0x13a>
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	2201      	movs	r2, #1
 8016ddc:	755a      	strb	r2, [r3, #21]
 8016dde:	693b      	ldr	r3, [r7, #16]
 8016de0:	2101      	movs	r1, #1
 8016de2:	4618      	mov	r0, r3
 8016de4:	f7fe f96f 	bl	80150c6 <unlock_fs>
 8016de8:	2301      	movs	r3, #1
 8016dea:	e102      	b.n	8016ff2 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016df0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8016df2:	68fb      	ldr	r3, [r7, #12]
 8016df4:	689b      	ldr	r3, [r3, #8]
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d102      	bne.n	8016e00 <f_write+0x14e>
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016dfe:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8016e00:	68fb      	ldr	r3, [r7, #12]
 8016e02:	7d1b      	ldrb	r3, [r3, #20]
 8016e04:	b25b      	sxtb	r3, r3
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	da1d      	bge.n	8016e46 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016e0a:	693b      	ldr	r3, [r7, #16]
 8016e0c:	7858      	ldrb	r0, [r3, #1]
 8016e0e:	68fb      	ldr	r3, [r7, #12]
 8016e10:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8016e14:	68fb      	ldr	r3, [r7, #12]
 8016e16:	6a1a      	ldr	r2, [r3, #32]
 8016e18:	2301      	movs	r3, #1
 8016e1a:	f7fd ffff 	bl	8014e1c <disk_write>
 8016e1e:	4603      	mov	r3, r0
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d009      	beq.n	8016e38 <f_write+0x186>
 8016e24:	68fb      	ldr	r3, [r7, #12]
 8016e26:	2201      	movs	r2, #1
 8016e28:	755a      	strb	r2, [r3, #21]
 8016e2a:	693b      	ldr	r3, [r7, #16]
 8016e2c:	2101      	movs	r1, #1
 8016e2e:	4618      	mov	r0, r3
 8016e30:	f7fe f949 	bl	80150c6 <unlock_fs>
 8016e34:	2301      	movs	r3, #1
 8016e36:	e0dc      	b.n	8016ff2 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8016e38:	68fb      	ldr	r3, [r7, #12]
 8016e3a:	7d1b      	ldrb	r3, [r3, #20]
 8016e3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016e40:	b2da      	uxtb	r2, r3
 8016e42:	68fb      	ldr	r3, [r7, #12]
 8016e44:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8016e46:	693a      	ldr	r2, [r7, #16]
 8016e48:	68fb      	ldr	r3, [r7, #12]
 8016e4a:	69db      	ldr	r3, [r3, #28]
 8016e4c:	4619      	mov	r1, r3
 8016e4e:	4610      	mov	r0, r2
 8016e50:	f7fe fba0 	bl	8015594 <clust2sect>
 8016e54:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8016e56:	697b      	ldr	r3, [r7, #20]
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d109      	bne.n	8016e70 <f_write+0x1be>
 8016e5c:	68fb      	ldr	r3, [r7, #12]
 8016e5e:	2202      	movs	r2, #2
 8016e60:	755a      	strb	r2, [r3, #21]
 8016e62:	693b      	ldr	r3, [r7, #16]
 8016e64:	2102      	movs	r1, #2
 8016e66:	4618      	mov	r0, r3
 8016e68:	f7fe f92d 	bl	80150c6 <unlock_fs>
 8016e6c:	2302      	movs	r3, #2
 8016e6e:	e0c0      	b.n	8016ff2 <f_write+0x340>
			sect += csect;
 8016e70:	697a      	ldr	r2, [r7, #20]
 8016e72:	69bb      	ldr	r3, [r7, #24]
 8016e74:	4413      	add	r3, r2
 8016e76:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	0a5b      	lsrs	r3, r3, #9
 8016e7c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8016e7e:	6a3b      	ldr	r3, [r7, #32]
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	d041      	beq.n	8016f08 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8016e84:	69ba      	ldr	r2, [r7, #24]
 8016e86:	6a3b      	ldr	r3, [r7, #32]
 8016e88:	4413      	add	r3, r2
 8016e8a:	693a      	ldr	r2, [r7, #16]
 8016e8c:	8952      	ldrh	r2, [r2, #10]
 8016e8e:	4293      	cmp	r3, r2
 8016e90:	d905      	bls.n	8016e9e <f_write+0x1ec>
					cc = fs->csize - csect;
 8016e92:	693b      	ldr	r3, [r7, #16]
 8016e94:	895b      	ldrh	r3, [r3, #10]
 8016e96:	461a      	mov	r2, r3
 8016e98:	69bb      	ldr	r3, [r7, #24]
 8016e9a:	1ad3      	subs	r3, r2, r3
 8016e9c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016e9e:	693b      	ldr	r3, [r7, #16]
 8016ea0:	7858      	ldrb	r0, [r3, #1]
 8016ea2:	6a3b      	ldr	r3, [r7, #32]
 8016ea4:	697a      	ldr	r2, [r7, #20]
 8016ea6:	69f9      	ldr	r1, [r7, #28]
 8016ea8:	f7fd ffb8 	bl	8014e1c <disk_write>
 8016eac:	4603      	mov	r3, r0
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d009      	beq.n	8016ec6 <f_write+0x214>
 8016eb2:	68fb      	ldr	r3, [r7, #12]
 8016eb4:	2201      	movs	r2, #1
 8016eb6:	755a      	strb	r2, [r3, #21]
 8016eb8:	693b      	ldr	r3, [r7, #16]
 8016eba:	2101      	movs	r1, #1
 8016ebc:	4618      	mov	r0, r3
 8016ebe:	f7fe f902 	bl	80150c6 <unlock_fs>
 8016ec2:	2301      	movs	r3, #1
 8016ec4:	e095      	b.n	8016ff2 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8016ec6:	68fb      	ldr	r3, [r7, #12]
 8016ec8:	6a1a      	ldr	r2, [r3, #32]
 8016eca:	697b      	ldr	r3, [r7, #20]
 8016ecc:	1ad3      	subs	r3, r2, r3
 8016ece:	6a3a      	ldr	r2, [r7, #32]
 8016ed0:	429a      	cmp	r2, r3
 8016ed2:	d915      	bls.n	8016f00 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8016ed4:	68fb      	ldr	r3, [r7, #12]
 8016ed6:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8016eda:	68fb      	ldr	r3, [r7, #12]
 8016edc:	6a1a      	ldr	r2, [r3, #32]
 8016ede:	697b      	ldr	r3, [r7, #20]
 8016ee0:	1ad3      	subs	r3, r2, r3
 8016ee2:	025b      	lsls	r3, r3, #9
 8016ee4:	69fa      	ldr	r2, [r7, #28]
 8016ee6:	4413      	add	r3, r2
 8016ee8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016eec:	4619      	mov	r1, r3
 8016eee:	f7fe f856 	bl	8014f9e <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8016ef2:	68fb      	ldr	r3, [r7, #12]
 8016ef4:	7d1b      	ldrb	r3, [r3, #20]
 8016ef6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016efa:	b2da      	uxtb	r2, r3
 8016efc:	68fb      	ldr	r3, [r7, #12]
 8016efe:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8016f00:	6a3b      	ldr	r3, [r7, #32]
 8016f02:	025b      	lsls	r3, r3, #9
 8016f04:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8016f06:	e044      	b.n	8016f92 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8016f08:	68fb      	ldr	r3, [r7, #12]
 8016f0a:	6a1b      	ldr	r3, [r3, #32]
 8016f0c:	697a      	ldr	r2, [r7, #20]
 8016f0e:	429a      	cmp	r2, r3
 8016f10:	d01b      	beq.n	8016f4a <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	699a      	ldr	r2, [r3, #24]
 8016f16:	68fb      	ldr	r3, [r7, #12]
 8016f18:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8016f1a:	429a      	cmp	r2, r3
 8016f1c:	d215      	bcs.n	8016f4a <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8016f1e:	693b      	ldr	r3, [r7, #16]
 8016f20:	7858      	ldrb	r0, [r3, #1]
 8016f22:	68fb      	ldr	r3, [r7, #12]
 8016f24:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8016f28:	2301      	movs	r3, #1
 8016f2a:	697a      	ldr	r2, [r7, #20]
 8016f2c:	f7fd ff56 	bl	8014ddc <disk_read>
 8016f30:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d009      	beq.n	8016f4a <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8016f36:	68fb      	ldr	r3, [r7, #12]
 8016f38:	2201      	movs	r2, #1
 8016f3a:	755a      	strb	r2, [r3, #21]
 8016f3c:	693b      	ldr	r3, [r7, #16]
 8016f3e:	2101      	movs	r1, #1
 8016f40:	4618      	mov	r0, r3
 8016f42:	f7fe f8c0 	bl	80150c6 <unlock_fs>
 8016f46:	2301      	movs	r3, #1
 8016f48:	e053      	b.n	8016ff2 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8016f4a:	68fb      	ldr	r3, [r7, #12]
 8016f4c:	697a      	ldr	r2, [r7, #20]
 8016f4e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8016f50:	68fb      	ldr	r3, [r7, #12]
 8016f52:	699b      	ldr	r3, [r3, #24]
 8016f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016f58:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8016f5c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8016f5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	429a      	cmp	r2, r3
 8016f64:	d901      	bls.n	8016f6a <f_write+0x2b8>
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8016f70:	68fb      	ldr	r3, [r7, #12]
 8016f72:	699b      	ldr	r3, [r3, #24]
 8016f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016f78:	4413      	add	r3, r2
 8016f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016f7c:	69f9      	ldr	r1, [r7, #28]
 8016f7e:	4618      	mov	r0, r3
 8016f80:	f7fe f80d 	bl	8014f9e <mem_cpy>
		fp->flag |= FA_DIRTY;
 8016f84:	68fb      	ldr	r3, [r7, #12]
 8016f86:	7d1b      	ldrb	r3, [r3, #20]
 8016f88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8016f8c:	b2da      	uxtb	r2, r3
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8016f92:	69fa      	ldr	r2, [r7, #28]
 8016f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f96:	4413      	add	r3, r2
 8016f98:	61fb      	str	r3, [r7, #28]
 8016f9a:	68fb      	ldr	r3, [r7, #12]
 8016f9c:	699a      	ldr	r2, [r3, #24]
 8016f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fa0:	441a      	add	r2, r3
 8016fa2:	68fb      	ldr	r3, [r7, #12]
 8016fa4:	619a      	str	r2, [r3, #24]
 8016fa6:	68fb      	ldr	r3, [r7, #12]
 8016fa8:	68da      	ldr	r2, [r3, #12]
 8016faa:	68fb      	ldr	r3, [r7, #12]
 8016fac:	699b      	ldr	r3, [r3, #24]
 8016fae:	429a      	cmp	r2, r3
 8016fb0:	bf38      	it	cc
 8016fb2:	461a      	movcc	r2, r3
 8016fb4:	68fb      	ldr	r3, [r7, #12]
 8016fb6:	60da      	str	r2, [r3, #12]
 8016fb8:	683b      	ldr	r3, [r7, #0]
 8016fba:	681a      	ldr	r2, [r3, #0]
 8016fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fbe:	441a      	add	r2, r3
 8016fc0:	683b      	ldr	r3, [r7, #0]
 8016fc2:	601a      	str	r2, [r3, #0]
 8016fc4:	687a      	ldr	r2, [r7, #4]
 8016fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fc8:	1ad3      	subs	r3, r2, r3
 8016fca:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	f47f aeb6 	bne.w	8016d40 <f_write+0x8e>
 8016fd4:	e000      	b.n	8016fd8 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8016fd6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8016fd8:	68fb      	ldr	r3, [r7, #12]
 8016fda:	7d1b      	ldrb	r3, [r3, #20]
 8016fdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016fe0:	b2da      	uxtb	r2, r3
 8016fe2:	68fb      	ldr	r3, [r7, #12]
 8016fe4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8016fe6:	693b      	ldr	r3, [r7, #16]
 8016fe8:	2100      	movs	r1, #0
 8016fea:	4618      	mov	r0, r3
 8016fec:	f7fe f86b 	bl	80150c6 <unlock_fs>
 8016ff0:	2300      	movs	r3, #0
}
 8016ff2:	4618      	mov	r0, r3
 8016ff4:	3730      	adds	r7, #48	@ 0x30
 8016ff6:	46bd      	mov	sp, r7
 8016ff8:	bd80      	pop	{r7, pc}

08016ffa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8016ffa:	b580      	push	{r7, lr}
 8016ffc:	b086      	sub	sp, #24
 8016ffe:	af00      	add	r7, sp, #0
 8017000:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	f107 0208 	add.w	r2, r7, #8
 8017008:	4611      	mov	r1, r2
 801700a:	4618      	mov	r0, r3
 801700c:	f7ff fbe4 	bl	80167d8 <validate>
 8017010:	4603      	mov	r3, r0
 8017012:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8017014:	7dfb      	ldrb	r3, [r7, #23]
 8017016:	2b00      	cmp	r3, #0
 8017018:	d16d      	bne.n	80170f6 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	7d1b      	ldrb	r3, [r3, #20]
 801701e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017022:	2b00      	cmp	r3, #0
 8017024:	d067      	beq.n	80170f6 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	7d1b      	ldrb	r3, [r3, #20]
 801702a:	b25b      	sxtb	r3, r3
 801702c:	2b00      	cmp	r3, #0
 801702e:	da1a      	bge.n	8017066 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8017030:	68bb      	ldr	r3, [r7, #8]
 8017032:	7858      	ldrb	r0, [r3, #1]
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	6a1a      	ldr	r2, [r3, #32]
 801703e:	2301      	movs	r3, #1
 8017040:	f7fd feec 	bl	8014e1c <disk_write>
 8017044:	4603      	mov	r3, r0
 8017046:	2b00      	cmp	r3, #0
 8017048:	d006      	beq.n	8017058 <f_sync+0x5e>
 801704a:	68bb      	ldr	r3, [r7, #8]
 801704c:	2101      	movs	r1, #1
 801704e:	4618      	mov	r0, r3
 8017050:	f7fe f839 	bl	80150c6 <unlock_fs>
 8017054:	2301      	movs	r3, #1
 8017056:	e055      	b.n	8017104 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	7d1b      	ldrb	r3, [r3, #20]
 801705c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017060:	b2da      	uxtb	r2, r3
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8017066:	f7fb fa49 	bl	80124fc <get_fattime>
 801706a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801706c:	68ba      	ldr	r2, [r7, #8]
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017072:	4619      	mov	r1, r3
 8017074:	4610      	mov	r0, r2
 8017076:	f7fe f9f1 	bl	801545c <move_window>
 801707a:	4603      	mov	r3, r0
 801707c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801707e:	7dfb      	ldrb	r3, [r7, #23]
 8017080:	2b00      	cmp	r3, #0
 8017082:	d138      	bne.n	80170f6 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017088:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801708a:	68fb      	ldr	r3, [r7, #12]
 801708c:	330b      	adds	r3, #11
 801708e:	781a      	ldrb	r2, [r3, #0]
 8017090:	68fb      	ldr	r3, [r7, #12]
 8017092:	330b      	adds	r3, #11
 8017094:	f042 0220 	orr.w	r2, r2, #32
 8017098:	b2d2      	uxtb	r2, r2
 801709a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	6818      	ldr	r0, [r3, #0]
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	689b      	ldr	r3, [r3, #8]
 80170a4:	461a      	mov	r2, r3
 80170a6:	68f9      	ldr	r1, [r7, #12]
 80170a8:	f7fe fefb 	bl	8015ea2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80170ac:	68fb      	ldr	r3, [r7, #12]
 80170ae:	f103 021c 	add.w	r2, r3, #28
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	68db      	ldr	r3, [r3, #12]
 80170b6:	4619      	mov	r1, r3
 80170b8:	4610      	mov	r0, r2
 80170ba:	f7fd ff44 	bl	8014f46 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80170be:	68fb      	ldr	r3, [r7, #12]
 80170c0:	3316      	adds	r3, #22
 80170c2:	6939      	ldr	r1, [r7, #16]
 80170c4:	4618      	mov	r0, r3
 80170c6:	f7fd ff3e 	bl	8014f46 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80170ca:	68fb      	ldr	r3, [r7, #12]
 80170cc:	3312      	adds	r3, #18
 80170ce:	2100      	movs	r1, #0
 80170d0:	4618      	mov	r0, r3
 80170d2:	f7fd ff1d 	bl	8014f10 <st_word>
					fs->wflag = 1;
 80170d6:	68bb      	ldr	r3, [r7, #8]
 80170d8:	2201      	movs	r2, #1
 80170da:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80170dc:	68bb      	ldr	r3, [r7, #8]
 80170de:	4618      	mov	r0, r3
 80170e0:	f7fe f9ea 	bl	80154b8 <sync_fs>
 80170e4:	4603      	mov	r3, r0
 80170e6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	7d1b      	ldrb	r3, [r3, #20]
 80170ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80170f0:	b2da      	uxtb	r2, r3
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80170f6:	68bb      	ldr	r3, [r7, #8]
 80170f8:	7dfa      	ldrb	r2, [r7, #23]
 80170fa:	4611      	mov	r1, r2
 80170fc:	4618      	mov	r0, r3
 80170fe:	f7fd ffe2 	bl	80150c6 <unlock_fs>
 8017102:	7dfb      	ldrb	r3, [r7, #23]
}
 8017104:	4618      	mov	r0, r3
 8017106:	3718      	adds	r7, #24
 8017108:	46bd      	mov	sp, r7
 801710a:	bd80      	pop	{r7, pc}

0801710c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801710c:	b580      	push	{r7, lr}
 801710e:	b084      	sub	sp, #16
 8017110:	af00      	add	r7, sp, #0
 8017112:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8017114:	6878      	ldr	r0, [r7, #4]
 8017116:	f7ff ff70 	bl	8016ffa <f_sync>
 801711a:	4603      	mov	r3, r0
 801711c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801711e:	7bfb      	ldrb	r3, [r7, #15]
 8017120:	2b00      	cmp	r3, #0
 8017122:	d11d      	bne.n	8017160 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	f107 0208 	add.w	r2, r7, #8
 801712a:	4611      	mov	r1, r2
 801712c:	4618      	mov	r0, r3
 801712e:	f7ff fb53 	bl	80167d8 <validate>
 8017132:	4603      	mov	r3, r0
 8017134:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8017136:	7bfb      	ldrb	r3, [r7, #15]
 8017138:	2b00      	cmp	r3, #0
 801713a:	d111      	bne.n	8017160 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	691b      	ldr	r3, [r3, #16]
 8017140:	4618      	mov	r0, r3
 8017142:	f7fe f8e7 	bl	8015314 <dec_lock>
 8017146:	4603      	mov	r3, r0
 8017148:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801714a:	7bfb      	ldrb	r3, [r7, #15]
 801714c:	2b00      	cmp	r3, #0
 801714e:	d102      	bne.n	8017156 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	2200      	movs	r2, #0
 8017154:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8017156:	68bb      	ldr	r3, [r7, #8]
 8017158:	2100      	movs	r1, #0
 801715a:	4618      	mov	r0, r3
 801715c:	f7fd ffb3 	bl	80150c6 <unlock_fs>
#endif
		}
	}
	return res;
 8017160:	7bfb      	ldrb	r3, [r7, #15]
}
 8017162:	4618      	mov	r0, r3
 8017164:	3710      	adds	r7, #16
 8017166:	46bd      	mov	sp, r7
 8017168:	bd80      	pop	{r7, pc}
	...

0801716c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 801716c:	b590      	push	{r4, r7, lr}
 801716e:	b09d      	sub	sp, #116	@ 0x74
 8017170:	af00      	add	r7, sp, #0
 8017172:	60f8      	str	r0, [r7, #12]
 8017174:	607a      	str	r2, [r7, #4]
 8017176:	603b      	str	r3, [r7, #0]
 8017178:	460b      	mov	r3, r1
 801717a:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 801717c:	2301      	movs	r3, #1
 801717e:	647b      	str	r3, [r7, #68]	@ 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8017180:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8017184:	643b      	str	r3, [r7, #64]	@ 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8017186:	f107 030c 	add.w	r3, r7, #12
 801718a:	4618      	mov	r0, r3
 801718c:	f7ff f835 	bl	80161fa <get_ldnumber>
 8017190:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8017192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017194:	2b00      	cmp	r3, #0
 8017196:	da02      	bge.n	801719e <f_mkfs+0x32>
 8017198:	230b      	movs	r3, #11
 801719a:	f000 bc0d 	b.w	80179b8 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 801719e:	4a94      	ldr	r2, [pc, #592]	@ (80173f0 <f_mkfs+0x284>)
 80171a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80171a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d005      	beq.n	80171b6 <f_mkfs+0x4a>
 80171aa:	4a91      	ldr	r2, [pc, #580]	@ (80173f0 <f_mkfs+0x284>)
 80171ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80171ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80171b2:	2200      	movs	r2, #0
 80171b4:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 80171b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80171b8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 80171bc:	2300      	movs	r3, #0
 80171be:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 80171c2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80171c6:	4618      	mov	r0, r3
 80171c8:	f7fd fde2 	bl	8014d90 <disk_initialize>
 80171cc:	4603      	mov	r3, r0
 80171ce:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 80171d2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80171d6:	f003 0301 	and.w	r3, r3, #1
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d001      	beq.n	80171e2 <f_mkfs+0x76>
 80171de:	2303      	movs	r3, #3
 80171e0:	e3ea      	b.n	80179b8 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 80171e2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80171e6:	f003 0304 	and.w	r3, r3, #4
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	d001      	beq.n	80171f2 <f_mkfs+0x86>
 80171ee:	230a      	movs	r3, #10
 80171f0:	e3e2      	b.n	80179b8 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 80171f2:	f107 0214 	add.w	r2, r7, #20
 80171f6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80171fa:	2103      	movs	r1, #3
 80171fc:	4618      	mov	r0, r3
 80171fe:	f7fd fe2d 	bl	8014e5c <disk_ioctl>
 8017202:	4603      	mov	r3, r0
 8017204:	2b00      	cmp	r3, #0
 8017206:	d10c      	bne.n	8017222 <f_mkfs+0xb6>
 8017208:	697b      	ldr	r3, [r7, #20]
 801720a:	2b00      	cmp	r3, #0
 801720c:	d009      	beq.n	8017222 <f_mkfs+0xb6>
 801720e:	697b      	ldr	r3, [r7, #20]
 8017210:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017214:	d805      	bhi.n	8017222 <f_mkfs+0xb6>
 8017216:	697b      	ldr	r3, [r7, #20]
 8017218:	1e5a      	subs	r2, r3, #1
 801721a:	697b      	ldr	r3, [r7, #20]
 801721c:	4013      	ands	r3, r2
 801721e:	2b00      	cmp	r3, #0
 8017220:	d001      	beq.n	8017226 <f_mkfs+0xba>
 8017222:	2301      	movs	r3, #1
 8017224:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8017226:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801722a:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	2b00      	cmp	r3, #0
 8017230:	d003      	beq.n	801723a <f_mkfs+0xce>
 8017232:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017234:	687a      	ldr	r2, [r7, #4]
 8017236:	429a      	cmp	r2, r3
 8017238:	d309      	bcc.n	801724e <f_mkfs+0xe2>
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8017240:	d805      	bhi.n	801724e <f_mkfs+0xe2>
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	1e5a      	subs	r2, r3, #1
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	4013      	ands	r3, r2
 801724a:	2b00      	cmp	r3, #0
 801724c:	d001      	beq.n	8017252 <f_mkfs+0xe6>
 801724e:	2313      	movs	r3, #19
 8017250:	e3b2      	b.n	80179b8 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8017252:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017254:	687a      	ldr	r2, [r7, #4]
 8017256:	fbb2 f3f3 	udiv	r3, r2, r3
 801725a:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 801725c:	683b      	ldr	r3, [r7, #0]
 801725e:	633b      	str	r3, [r7, #48]	@ 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8017260:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017262:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8017266:	fbb2 f3f3 	udiv	r3, r2, r3
 801726a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 801726c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801726e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017270:	fb02 f303 	mul.w	r3, r2, r3
 8017274:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8017276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017278:	2b00      	cmp	r3, #0
 801727a:	d101      	bne.n	8017280 <f_mkfs+0x114>
 801727c:	230e      	movs	r3, #14
 801727e:	e39b      	b.n	80179b8 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8017280:	f107 0210 	add.w	r2, r7, #16
 8017284:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8017288:	2101      	movs	r1, #1
 801728a:	4618      	mov	r0, r3
 801728c:	f7fd fde6 	bl	8014e5c <disk_ioctl>
 8017290:	4603      	mov	r3, r0
 8017292:	2b00      	cmp	r3, #0
 8017294:	d001      	beq.n	801729a <f_mkfs+0x12e>
 8017296:	2301      	movs	r3, #1
 8017298:	e38e      	b.n	80179b8 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 801729a:	7afb      	ldrb	r3, [r7, #11]
 801729c:	f003 0308 	and.w	r3, r3, #8
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d001      	beq.n	80172a8 <f_mkfs+0x13c>
 80172a4:	2300      	movs	r3, #0
 80172a6:	e000      	b.n	80172aa <f_mkfs+0x13e>
 80172a8:	233f      	movs	r3, #63	@ 0x3f
 80172aa:	627b      	str	r3, [r7, #36]	@ 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 80172ac:	693b      	ldr	r3, [r7, #16]
 80172ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80172b0:	429a      	cmp	r2, r3
 80172b2:	d901      	bls.n	80172b8 <f_mkfs+0x14c>
 80172b4:	230e      	movs	r3, #14
 80172b6:	e37f      	b.n	80179b8 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 80172b8:	693a      	ldr	r2, [r7, #16]
 80172ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172bc:	1ad3      	subs	r3, r2, r3
 80172be:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 80172c0:	693b      	ldr	r3, [r7, #16]
 80172c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80172c4:	d801      	bhi.n	80172ca <f_mkfs+0x15e>
 80172c6:	230e      	movs	r3, #14
 80172c8:	e376      	b.n	80179b8 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	2b80      	cmp	r3, #128	@ 0x80
 80172ce:	d901      	bls.n	80172d4 <f_mkfs+0x168>
 80172d0:	2313      	movs	r3, #19
 80172d2:	e371      	b.n	80179b8 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 80172d4:	7afb      	ldrb	r3, [r7, #11]
 80172d6:	f003 0302 	and.w	r3, r3, #2
 80172da:	2b00      	cmp	r3, #0
 80172dc:	d00d      	beq.n	80172fa <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 80172de:	7afb      	ldrb	r3, [r7, #11]
 80172e0:	f003 0307 	and.w	r3, r3, #7
 80172e4:	2b02      	cmp	r3, #2
 80172e6:	d004      	beq.n	80172f2 <f_mkfs+0x186>
 80172e8:	7afb      	ldrb	r3, [r7, #11]
 80172ea:	f003 0301 	and.w	r3, r3, #1
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d103      	bne.n	80172fa <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 80172f2:	2303      	movs	r3, #3
 80172f4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80172f8:	e009      	b.n	801730e <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 80172fa:	7afb      	ldrb	r3, [r7, #11]
 80172fc:	f003 0301 	and.w	r3, r3, #1
 8017300:	2b00      	cmp	r3, #0
 8017302:	d101      	bne.n	8017308 <f_mkfs+0x19c>
 8017304:	2313      	movs	r3, #19
 8017306:	e357      	b.n	80179b8 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8017308:	2302      	movs	r3, #2
 801730a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	653b      	str	r3, [r7, #80]	@ 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8017312:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8017316:	2b03      	cmp	r3, #3
 8017318:	d13c      	bne.n	8017394 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 801731a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801731c:	2b00      	cmp	r3, #0
 801731e:	d11b      	bne.n	8017358 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8017320:	693b      	ldr	r3, [r7, #16]
 8017322:	0c5b      	lsrs	r3, r3, #17
 8017324:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8017326:	2300      	movs	r3, #0
 8017328:	64bb      	str	r3, [r7, #72]	@ 0x48
 801732a:	2301      	movs	r3, #1
 801732c:	653b      	str	r3, [r7, #80]	@ 0x50
 801732e:	e005      	b.n	801733c <f_mkfs+0x1d0>
 8017330:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017332:	3301      	adds	r3, #1
 8017334:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017336:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017338:	005b      	lsls	r3, r3, #1
 801733a:	653b      	str	r3, [r7, #80]	@ 0x50
 801733c:	4a2d      	ldr	r2, [pc, #180]	@ (80173f4 <f_mkfs+0x288>)
 801733e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017340:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017344:	2b00      	cmp	r3, #0
 8017346:	d007      	beq.n	8017358 <f_mkfs+0x1ec>
 8017348:	4a2a      	ldr	r2, [pc, #168]	@ (80173f4 <f_mkfs+0x288>)
 801734a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801734c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017350:	461a      	mov	r2, r3
 8017352:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017354:	4293      	cmp	r3, r2
 8017356:	d2eb      	bcs.n	8017330 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8017358:	693a      	ldr	r2, [r7, #16]
 801735a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801735c:	fbb2 f3f3 	udiv	r3, r2, r3
 8017360:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8017362:	6a3b      	ldr	r3, [r7, #32]
 8017364:	3302      	adds	r3, #2
 8017366:	009a      	lsls	r2, r3, #2
 8017368:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801736a:	4413      	add	r3, r2
 801736c:	1e5a      	subs	r2, r3, #1
 801736e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017370:	fbb2 f3f3 	udiv	r3, r2, r3
 8017374:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8017376:	2320      	movs	r3, #32
 8017378:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = 0;		/* No static directory */
 801737a:	2300      	movs	r3, #0
 801737c:	66fb      	str	r3, [r7, #108]	@ 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 801737e:	6a3b      	ldr	r3, [r7, #32]
 8017380:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8017384:	4293      	cmp	r3, r2
 8017386:	d903      	bls.n	8017390 <f_mkfs+0x224>
 8017388:	6a3b      	ldr	r3, [r7, #32]
 801738a:	4a1b      	ldr	r2, [pc, #108]	@ (80173f8 <f_mkfs+0x28c>)
 801738c:	4293      	cmp	r3, r2
 801738e:	d952      	bls.n	8017436 <f_mkfs+0x2ca>
 8017390:	230e      	movs	r3, #14
 8017392:	e311      	b.n	80179b8 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8017394:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017396:	2b00      	cmp	r3, #0
 8017398:	d11b      	bne.n	80173d2 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 801739a:	693b      	ldr	r3, [r7, #16]
 801739c:	0b1b      	lsrs	r3, r3, #12
 801739e:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80173a0:	2300      	movs	r3, #0
 80173a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80173a4:	2301      	movs	r3, #1
 80173a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80173a8:	e005      	b.n	80173b6 <f_mkfs+0x24a>
 80173aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80173ac:	3301      	adds	r3, #1
 80173ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80173b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80173b2:	005b      	lsls	r3, r3, #1
 80173b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80173b6:	4a11      	ldr	r2, [pc, #68]	@ (80173fc <f_mkfs+0x290>)
 80173b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80173ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80173be:	2b00      	cmp	r3, #0
 80173c0:	d007      	beq.n	80173d2 <f_mkfs+0x266>
 80173c2:	4a0e      	ldr	r2, [pc, #56]	@ (80173fc <f_mkfs+0x290>)
 80173c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80173c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80173ca:	461a      	mov	r2, r3
 80173cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80173ce:	4293      	cmp	r3, r2
 80173d0:	d2eb      	bcs.n	80173aa <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 80173d2:	693a      	ldr	r2, [r7, #16]
 80173d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80173d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80173da:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 80173dc:	6a3b      	ldr	r3, [r7, #32]
 80173de:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80173e2:	4293      	cmp	r3, r2
 80173e4:	d90c      	bls.n	8017400 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 80173e6:	6a3b      	ldr	r3, [r7, #32]
 80173e8:	3302      	adds	r3, #2
 80173ea:	005b      	lsls	r3, r3, #1
 80173ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80173ee:	e012      	b.n	8017416 <f_mkfs+0x2aa>
 80173f0:	200023e0 	.word	0x200023e0
 80173f4:	0801ed04 	.word	0x0801ed04
 80173f8:	0ffffff5 	.word	0x0ffffff5
 80173fc:	0801ed14 	.word	0x0801ed14
				} else {
					fmt = FS_FAT12;
 8017400:	2301      	movs	r3, #1
 8017402:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8017406:	6a3a      	ldr	r2, [r7, #32]
 8017408:	4613      	mov	r3, r2
 801740a:	005b      	lsls	r3, r3, #1
 801740c:	4413      	add	r3, r2
 801740e:	3301      	adds	r3, #1
 8017410:	085b      	lsrs	r3, r3, #1
 8017412:	3303      	adds	r3, #3
 8017414:	65fb      	str	r3, [r7, #92]	@ 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8017416:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8017418:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801741a:	4413      	add	r3, r2
 801741c:	1e5a      	subs	r2, r3, #1
 801741e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017420:	fbb2 f3f3 	udiv	r3, r2, r3
 8017424:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8017426:	2301      	movs	r3, #1
 8017428:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 801742a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801742c:	015a      	lsls	r2, r3, #5
 801742e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017430:	fbb2 f3f3 	udiv	r3, r2, r3
 8017434:	66fb      	str	r3, [r7, #108]	@ 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8017436:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017438:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801743a:	4413      	add	r3, r2
 801743c:	65bb      	str	r3, [r7, #88]	@ 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 801743e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017440:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017442:	fb03 f202 	mul.w	r2, r3, r2
 8017446:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017448:	4413      	add	r3, r2
 801744a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801744c:	4413      	add	r3, r2
 801744e:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8017450:	697a      	ldr	r2, [r7, #20]
 8017452:	69fb      	ldr	r3, [r7, #28]
 8017454:	4413      	add	r3, r2
 8017456:	1e5a      	subs	r2, r3, #1
 8017458:	697b      	ldr	r3, [r7, #20]
 801745a:	425b      	negs	r3, r3
 801745c:	401a      	ands	r2, r3
 801745e:	69fb      	ldr	r3, [r7, #28]
 8017460:	1ad3      	subs	r3, r2, r3
 8017462:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8017464:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8017468:	2b03      	cmp	r3, #3
 801746a:	d108      	bne.n	801747e <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 801746c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801746e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017470:	4413      	add	r3, r2
 8017472:	657b      	str	r3, [r7, #84]	@ 0x54
 8017474:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8017476:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017478:	4413      	add	r3, r2
 801747a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801747c:	e006      	b.n	801748c <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 801747e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8017480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017482:	fbb2 f3f3 	udiv	r3, r2, r3
 8017486:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8017488:	4413      	add	r3, r2
 801748a:	66bb      	str	r3, [r7, #104]	@ 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 801748c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801748e:	011a      	lsls	r2, r3, #4
 8017490:	69fb      	ldr	r3, [r7, #28]
 8017492:	441a      	add	r2, r3
 8017494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017496:	1ad2      	subs	r2, r2, r3
 8017498:	693b      	ldr	r3, [r7, #16]
 801749a:	429a      	cmp	r2, r3
 801749c:	d901      	bls.n	80174a2 <f_mkfs+0x336>
 801749e:	230e      	movs	r3, #14
 80174a0:	e28a      	b.n	80179b8 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 80174a2:	693a      	ldr	r2, [r7, #16]
 80174a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80174a6:	1ad2      	subs	r2, r2, r3
 80174a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80174aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80174ac:	fb01 f303 	mul.w	r3, r1, r3
 80174b0:	1ad2      	subs	r2, r2, r3
 80174b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80174b4:	1ad2      	subs	r2, r2, r3
 80174b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80174b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80174bc:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 80174be:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80174c2:	2b03      	cmp	r3, #3
 80174c4:	d10f      	bne.n	80174e6 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 80174c6:	6a3b      	ldr	r3, [r7, #32]
 80174c8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80174cc:	4293      	cmp	r3, r2
 80174ce:	d80a      	bhi.n	80174e6 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d105      	bne.n	80174e2 <f_mkfs+0x376>
 80174d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80174d8:	085b      	lsrs	r3, r3, #1
 80174da:	607b      	str	r3, [r7, #4]
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d144      	bne.n	801756c <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 80174e2:	230e      	movs	r3, #14
 80174e4:	e268      	b.n	80179b8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 80174e6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80174ea:	2b02      	cmp	r3, #2
 80174ec:	d133      	bne.n	8017556 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 80174ee:	6a3b      	ldr	r3, [r7, #32]
 80174f0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80174f4:	4293      	cmp	r3, r2
 80174f6:	d91e      	bls.n	8017536 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	d107      	bne.n	801750e <f_mkfs+0x3a2>
 80174fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017500:	005b      	lsls	r3, r3, #1
 8017502:	2b40      	cmp	r3, #64	@ 0x40
 8017504:	d803      	bhi.n	801750e <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8017506:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017508:	005b      	lsls	r3, r3, #1
 801750a:	607b      	str	r3, [r7, #4]
 801750c:	e033      	b.n	8017576 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 801750e:	7afb      	ldrb	r3, [r7, #11]
 8017510:	f003 0302 	and.w	r3, r3, #2
 8017514:	2b00      	cmp	r3, #0
 8017516:	d003      	beq.n	8017520 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8017518:	2303      	movs	r3, #3
 801751a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 801751e:	e02a      	b.n	8017576 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	2b00      	cmp	r3, #0
 8017524:	d105      	bne.n	8017532 <f_mkfs+0x3c6>
 8017526:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017528:	005b      	lsls	r3, r3, #1
 801752a:	607b      	str	r3, [r7, #4]
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	2b80      	cmp	r3, #128	@ 0x80
 8017530:	d91e      	bls.n	8017570 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8017532:	230e      	movs	r3, #14
 8017534:	e240      	b.n	80179b8 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8017536:	6a3b      	ldr	r3, [r7, #32]
 8017538:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801753c:	4293      	cmp	r3, r2
 801753e:	d80a      	bhi.n	8017556 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	2b00      	cmp	r3, #0
 8017544:	d105      	bne.n	8017552 <f_mkfs+0x3e6>
 8017546:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017548:	005b      	lsls	r3, r3, #1
 801754a:	607b      	str	r3, [r7, #4]
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	2b80      	cmp	r3, #128	@ 0x80
 8017550:	d910      	bls.n	8017574 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8017552:	230e      	movs	r3, #14
 8017554:	e230      	b.n	80179b8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8017556:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801755a:	2b01      	cmp	r3, #1
 801755c:	d10c      	bne.n	8017578 <f_mkfs+0x40c>
 801755e:	6a3b      	ldr	r3, [r7, #32]
 8017560:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8017564:	4293      	cmp	r3, r2
 8017566:	d907      	bls.n	8017578 <f_mkfs+0x40c>
 8017568:	230e      	movs	r3, #14
 801756a:	e225      	b.n	80179b8 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 801756c:	bf00      	nop
 801756e:	e6ce      	b.n	801730e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8017570:	bf00      	nop
 8017572:	e6cc      	b.n	801730e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8017574:	bf00      	nop
			pau = au;
 8017576:	e6ca      	b.n	801730e <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8017578:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 801757a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801757c:	461a      	mov	r2, r3
 801757e:	2100      	movs	r1, #0
 8017580:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017582:	f7fd fd2d 	bl	8014fe0 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8017586:	220b      	movs	r2, #11
 8017588:	49b2      	ldr	r1, [pc, #712]	@ (8017854 <f_mkfs+0x6e8>)
 801758a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801758c:	f7fd fd07 	bl	8014f9e <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8017590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017592:	330b      	adds	r3, #11
 8017594:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8017596:	4611      	mov	r1, r2
 8017598:	4618      	mov	r0, r3
 801759a:	f7fd fcb9 	bl	8014f10 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 801759e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80175a0:	330d      	adds	r3, #13
 80175a2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80175a4:	b2d2      	uxtb	r2, r2
 80175a6:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 80175a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80175aa:	330e      	adds	r3, #14
 80175ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80175ae:	b292      	uxth	r2, r2
 80175b0:	4611      	mov	r1, r2
 80175b2:	4618      	mov	r0, r3
 80175b4:	f7fd fcac 	bl	8014f10 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 80175b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80175ba:	3310      	adds	r3, #16
 80175bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80175be:	b2d2      	uxtb	r2, r2
 80175c0:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 80175c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80175c4:	f103 0211 	add.w	r2, r3, #17
 80175c8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80175cc:	2b03      	cmp	r3, #3
 80175ce:	d002      	beq.n	80175d6 <f_mkfs+0x46a>
 80175d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80175d2:	b29b      	uxth	r3, r3
 80175d4:	e000      	b.n	80175d8 <f_mkfs+0x46c>
 80175d6:	2300      	movs	r3, #0
 80175d8:	4619      	mov	r1, r3
 80175da:	4610      	mov	r0, r2
 80175dc:	f7fd fc98 	bl	8014f10 <st_word>
		if (sz_vol < 0x10000) {
 80175e0:	693b      	ldr	r3, [r7, #16]
 80175e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80175e6:	d208      	bcs.n	80175fa <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 80175e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80175ea:	3313      	adds	r3, #19
 80175ec:	693a      	ldr	r2, [r7, #16]
 80175ee:	b292      	uxth	r2, r2
 80175f0:	4611      	mov	r1, r2
 80175f2:	4618      	mov	r0, r3
 80175f4:	f7fd fc8c 	bl	8014f10 <st_word>
 80175f8:	e006      	b.n	8017608 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 80175fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80175fc:	3320      	adds	r3, #32
 80175fe:	693a      	ldr	r2, [r7, #16]
 8017600:	4611      	mov	r1, r2
 8017602:	4618      	mov	r0, r3
 8017604:	f7fd fc9f 	bl	8014f46 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8017608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801760a:	3315      	adds	r3, #21
 801760c:	22f8      	movs	r2, #248	@ 0xf8
 801760e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8017610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017612:	3318      	adds	r3, #24
 8017614:	213f      	movs	r1, #63	@ 0x3f
 8017616:	4618      	mov	r0, r3
 8017618:	f7fd fc7a 	bl	8014f10 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 801761c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801761e:	331a      	adds	r3, #26
 8017620:	21ff      	movs	r1, #255	@ 0xff
 8017622:	4618      	mov	r0, r3
 8017624:	f7fd fc74 	bl	8014f10 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8017628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801762a:	331c      	adds	r3, #28
 801762c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801762e:	4618      	mov	r0, r3
 8017630:	f7fd fc89 	bl	8014f46 <st_dword>
		if (fmt == FS_FAT32) {
 8017634:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8017638:	2b03      	cmp	r3, #3
 801763a:	d131      	bne.n	80176a0 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 801763c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801763e:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 8017642:	f7fa ff5b 	bl	80124fc <get_fattime>
 8017646:	4603      	mov	r3, r0
 8017648:	4619      	mov	r1, r3
 801764a:	4620      	mov	r0, r4
 801764c:	f7fd fc7b 	bl	8014f46 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8017650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017652:	3324      	adds	r3, #36	@ 0x24
 8017654:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8017656:	4618      	mov	r0, r3
 8017658:	f7fd fc75 	bl	8014f46 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 801765c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801765e:	332c      	adds	r3, #44	@ 0x2c
 8017660:	2102      	movs	r1, #2
 8017662:	4618      	mov	r0, r3
 8017664:	f7fd fc6f 	bl	8014f46 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8017668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801766a:	3330      	adds	r3, #48	@ 0x30
 801766c:	2101      	movs	r1, #1
 801766e:	4618      	mov	r0, r3
 8017670:	f7fd fc4e 	bl	8014f10 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8017674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017676:	3332      	adds	r3, #50	@ 0x32
 8017678:	2106      	movs	r1, #6
 801767a:	4618      	mov	r0, r3
 801767c:	f7fd fc48 	bl	8014f10 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8017680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017682:	3340      	adds	r3, #64	@ 0x40
 8017684:	2280      	movs	r2, #128	@ 0x80
 8017686:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8017688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801768a:	3342      	adds	r3, #66	@ 0x42
 801768c:	2229      	movs	r2, #41	@ 0x29
 801768e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8017690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017692:	3347      	adds	r3, #71	@ 0x47
 8017694:	2213      	movs	r2, #19
 8017696:	4970      	ldr	r1, [pc, #448]	@ (8017858 <f_mkfs+0x6ec>)
 8017698:	4618      	mov	r0, r3
 801769a:	f7fd fc80 	bl	8014f9e <mem_cpy>
 801769e:	e020      	b.n	80176e2 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 80176a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80176a2:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 80176a6:	f7fa ff29 	bl	80124fc <get_fattime>
 80176aa:	4603      	mov	r3, r0
 80176ac:	4619      	mov	r1, r3
 80176ae:	4620      	mov	r0, r4
 80176b0:	f7fd fc49 	bl	8014f46 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 80176b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80176b6:	3316      	adds	r3, #22
 80176b8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80176ba:	b292      	uxth	r2, r2
 80176bc:	4611      	mov	r1, r2
 80176be:	4618      	mov	r0, r3
 80176c0:	f7fd fc26 	bl	8014f10 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 80176c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80176c6:	3324      	adds	r3, #36	@ 0x24
 80176c8:	2280      	movs	r2, #128	@ 0x80
 80176ca:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 80176cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80176ce:	3326      	adds	r3, #38	@ 0x26
 80176d0:	2229      	movs	r2, #41	@ 0x29
 80176d2:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 80176d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80176d6:	332b      	adds	r3, #43	@ 0x2b
 80176d8:	2213      	movs	r2, #19
 80176da:	4960      	ldr	r1, [pc, #384]	@ (801785c <f_mkfs+0x6f0>)
 80176dc:	4618      	mov	r0, r3
 80176de:	f7fd fc5e 	bl	8014f9e <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 80176e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80176e4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80176e8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80176ec:	4618      	mov	r0, r3
 80176ee:	f7fd fc0f 	bl	8014f10 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 80176f2:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 80176f6:	2301      	movs	r3, #1
 80176f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80176fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80176fc:	f7fd fb8e 	bl	8014e1c <disk_write>
 8017700:	4603      	mov	r3, r0
 8017702:	2b00      	cmp	r3, #0
 8017704:	d001      	beq.n	801770a <f_mkfs+0x59e>
 8017706:	2301      	movs	r3, #1
 8017708:	e156      	b.n	80179b8 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 801770a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801770e:	2b03      	cmp	r3, #3
 8017710:	d140      	bne.n	8017794 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8017712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017714:	1d9a      	adds	r2, r3, #6
 8017716:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 801771a:	2301      	movs	r3, #1
 801771c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801771e:	f7fd fb7d 	bl	8014e1c <disk_write>
			mem_set(buf, 0, ss);
 8017722:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017724:	461a      	mov	r2, r3
 8017726:	2100      	movs	r1, #0
 8017728:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801772a:	f7fd fc59 	bl	8014fe0 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 801772e:	494c      	ldr	r1, [pc, #304]	@ (8017860 <f_mkfs+0x6f4>)
 8017730:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017732:	f7fd fc08 	bl	8014f46 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8017736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017738:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801773c:	4949      	ldr	r1, [pc, #292]	@ (8017864 <f_mkfs+0x6f8>)
 801773e:	4618      	mov	r0, r3
 8017740:	f7fd fc01 	bl	8014f46 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8017744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017746:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801774a:	6a3b      	ldr	r3, [r7, #32]
 801774c:	3b01      	subs	r3, #1
 801774e:	4619      	mov	r1, r3
 8017750:	4610      	mov	r0, r2
 8017752:	f7fd fbf8 	bl	8014f46 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8017756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017758:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801775c:	2102      	movs	r1, #2
 801775e:	4618      	mov	r0, r3
 8017760:	f7fd fbf1 	bl	8014f46 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8017764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017766:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801776a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801776e:	4618      	mov	r0, r3
 8017770:	f7fd fbce 	bl	8014f10 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8017774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017776:	1dda      	adds	r2, r3, #7
 8017778:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 801777c:	2301      	movs	r3, #1
 801777e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017780:	f7fd fb4c 	bl	8014e1c <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8017784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017786:	1c5a      	adds	r2, r3, #1
 8017788:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 801778c:	2301      	movs	r3, #1
 801778e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017790:	f7fd fb44 	bl	8014e1c <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8017794:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017796:	2100      	movs	r1, #0
 8017798:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801779a:	f7fd fc21 	bl	8014fe0 <mem_set>
		sect = b_fat;		/* FAT start sector */
 801779e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80177a0:	667b      	str	r3, [r7, #100]	@ 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80177a2:	2300      	movs	r3, #0
 80177a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80177a6:	e04b      	b.n	8017840 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 80177a8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80177ac:	2b03      	cmp	r3, #3
 80177ae:	d113      	bne.n	80177d8 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 80177b0:	f06f 0107 	mvn.w	r1, #7
 80177b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80177b6:	f7fd fbc6 	bl	8014f46 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 80177ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177bc:	3304      	adds	r3, #4
 80177be:	f04f 31ff 	mov.w	r1, #4294967295
 80177c2:	4618      	mov	r0, r3
 80177c4:	f7fd fbbf 	bl	8014f46 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 80177c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177ca:	3308      	adds	r3, #8
 80177cc:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 80177d0:	4618      	mov	r0, r3
 80177d2:	f7fd fbb8 	bl	8014f46 <st_dword>
 80177d6:	e00b      	b.n	80177f0 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 80177d8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80177dc:	2b01      	cmp	r3, #1
 80177de:	d101      	bne.n	80177e4 <f_mkfs+0x678>
 80177e0:	4b21      	ldr	r3, [pc, #132]	@ (8017868 <f_mkfs+0x6fc>)
 80177e2:	e001      	b.n	80177e8 <f_mkfs+0x67c>
 80177e4:	f06f 0307 	mvn.w	r3, #7
 80177e8:	4619      	mov	r1, r3
 80177ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80177ec:	f7fd fbab 	bl	8014f46 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 80177f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80177f2:	663b      	str	r3, [r7, #96]	@ 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 80177f4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80177f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80177f8:	4293      	cmp	r3, r2
 80177fa:	bf28      	it	cs
 80177fc:	4613      	movcs	r3, r2
 80177fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8017800:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8017804:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017806:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8017808:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801780a:	f7fd fb07 	bl	8014e1c <disk_write>
 801780e:	4603      	mov	r3, r0
 8017810:	2b00      	cmp	r3, #0
 8017812:	d001      	beq.n	8017818 <f_mkfs+0x6ac>
 8017814:	2301      	movs	r3, #1
 8017816:	e0cf      	b.n	80179b8 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8017818:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801781a:	461a      	mov	r2, r3
 801781c:	2100      	movs	r1, #0
 801781e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017820:	f7fd fbde 	bl	8014fe0 <mem_set>
				sect += n; nsect -= n;
 8017824:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8017826:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017828:	4413      	add	r3, r2
 801782a:	667b      	str	r3, [r7, #100]	@ 0x64
 801782c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801782e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017830:	1ad3      	subs	r3, r2, r3
 8017832:	663b      	str	r3, [r7, #96]	@ 0x60
			} while (nsect);
 8017834:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017836:	2b00      	cmp	r3, #0
 8017838:	d1dc      	bne.n	80177f4 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 801783a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801783c:	3301      	adds	r3, #1
 801783e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017840:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8017842:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017844:	429a      	cmp	r2, r3
 8017846:	d3af      	bcc.n	80177a8 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8017848:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801784c:	2b03      	cmp	r3, #3
 801784e:	d10d      	bne.n	801786c <f_mkfs+0x700>
 8017850:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017852:	e00c      	b.n	801786e <f_mkfs+0x702>
 8017854:	0801ec14 	.word	0x0801ec14
 8017858:	0801ec20 	.word	0x0801ec20
 801785c:	0801ec34 	.word	0x0801ec34
 8017860:	41615252 	.word	0x41615252
 8017864:	61417272 	.word	0x61417272
 8017868:	00fffff8 	.word	0x00fffff8
 801786c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801786e:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8017870:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8017872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017874:	4293      	cmp	r3, r2
 8017876:	bf28      	it	cs
 8017878:	4613      	movcs	r3, r2
 801787a:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 801787c:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8017880:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017882:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8017884:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017886:	f7fd fac9 	bl	8014e1c <disk_write>
 801788a:	4603      	mov	r3, r0
 801788c:	2b00      	cmp	r3, #0
 801788e:	d001      	beq.n	8017894 <f_mkfs+0x728>
 8017890:	2301      	movs	r3, #1
 8017892:	e091      	b.n	80179b8 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8017894:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8017896:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017898:	4413      	add	r3, r2
 801789a:	667b      	str	r3, [r7, #100]	@ 0x64
 801789c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801789e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80178a0:	1ad3      	subs	r3, r2, r3
 80178a2:	663b      	str	r3, [r7, #96]	@ 0x60
		} while (nsect);
 80178a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d1e2      	bne.n	8017870 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 80178aa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80178ae:	2b03      	cmp	r3, #3
 80178b0:	d103      	bne.n	80178ba <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 80178b2:	230c      	movs	r3, #12
 80178b4:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 80178b8:	e010      	b.n	80178dc <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 80178ba:	693b      	ldr	r3, [r7, #16]
 80178bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80178c0:	d303      	bcc.n	80178ca <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 80178c2:	2306      	movs	r3, #6
 80178c4:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 80178c8:	e008      	b.n	80178dc <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 80178ca:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80178ce:	2b02      	cmp	r3, #2
 80178d0:	d101      	bne.n	80178d6 <f_mkfs+0x76a>
 80178d2:	2304      	movs	r3, #4
 80178d4:	e000      	b.n	80178d8 <f_mkfs+0x76c>
 80178d6:	2301      	movs	r3, #1
 80178d8:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 80178dc:	7afb      	ldrb	r3, [r7, #11]
 80178de:	f003 0308 	and.w	r3, r3, #8
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d15b      	bne.n	801799e <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 80178e6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80178e8:	461a      	mov	r2, r3
 80178ea:	2100      	movs	r1, #0
 80178ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80178ee:	f7fd fb77 	bl	8014fe0 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 80178f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178f4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80178f8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80178fc:	4618      	mov	r0, r3
 80178fe:	f7fd fb07 	bl	8014f10 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8017902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017904:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8017908:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 801790a:	69bb      	ldr	r3, [r7, #24]
 801790c:	2200      	movs	r2, #0
 801790e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8017910:	69bb      	ldr	r3, [r7, #24]
 8017912:	3301      	adds	r3, #1
 8017914:	2201      	movs	r2, #1
 8017916:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8017918:	69bb      	ldr	r3, [r7, #24]
 801791a:	3302      	adds	r3, #2
 801791c:	2201      	movs	r2, #1
 801791e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8017920:	69bb      	ldr	r3, [r7, #24]
 8017922:	3303      	adds	r3, #3
 8017924:	2200      	movs	r2, #0
 8017926:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8017928:	69bb      	ldr	r3, [r7, #24]
 801792a:	3304      	adds	r3, #4
 801792c:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8017930:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8017932:	693a      	ldr	r2, [r7, #16]
 8017934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017936:	441a      	add	r2, r3
 8017938:	4b21      	ldr	r3, [pc, #132]	@ (80179c0 <f_mkfs+0x854>)
 801793a:	fba3 1302 	umull	r1, r3, r3, r2
 801793e:	1ad2      	subs	r2, r2, r3
 8017940:	0852      	lsrs	r2, r2, #1
 8017942:	4413      	add	r3, r2
 8017944:	0b5b      	lsrs	r3, r3, #13
 8017946:	65fb      	str	r3, [r7, #92]	@ 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8017948:	69bb      	ldr	r3, [r7, #24]
 801794a:	3305      	adds	r3, #5
 801794c:	22fe      	movs	r2, #254	@ 0xfe
 801794e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8017950:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017952:	089b      	lsrs	r3, r3, #2
 8017954:	b2da      	uxtb	r2, r3
 8017956:	69bb      	ldr	r3, [r7, #24]
 8017958:	3306      	adds	r3, #6
 801795a:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 801795e:	b2d2      	uxtb	r2, r2
 8017960:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8017962:	69bb      	ldr	r3, [r7, #24]
 8017964:	3307      	adds	r3, #7
 8017966:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8017968:	b2d2      	uxtb	r2, r2
 801796a:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 801796c:	69bb      	ldr	r3, [r7, #24]
 801796e:	3308      	adds	r3, #8
 8017970:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017972:	4618      	mov	r0, r3
 8017974:	f7fd fae7 	bl	8014f46 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8017978:	69bb      	ldr	r3, [r7, #24]
 801797a:	330c      	adds	r3, #12
 801797c:	693a      	ldr	r2, [r7, #16]
 801797e:	4611      	mov	r1, r2
 8017980:	4618      	mov	r0, r3
 8017982:	f7fd fae0 	bl	8014f46 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8017986:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 801798a:	2301      	movs	r3, #1
 801798c:	2200      	movs	r2, #0
 801798e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017990:	f7fd fa44 	bl	8014e1c <disk_write>
 8017994:	4603      	mov	r3, r0
 8017996:	2b00      	cmp	r3, #0
 8017998:	d001      	beq.n	801799e <f_mkfs+0x832>
 801799a:	2301      	movs	r3, #1
 801799c:	e00c      	b.n	80179b8 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 801799e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80179a2:	2200      	movs	r2, #0
 80179a4:	2100      	movs	r1, #0
 80179a6:	4618      	mov	r0, r3
 80179a8:	f7fd fa58 	bl	8014e5c <disk_ioctl>
 80179ac:	4603      	mov	r3, r0
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d001      	beq.n	80179b6 <f_mkfs+0x84a>
 80179b2:	2301      	movs	r3, #1
 80179b4:	e000      	b.n	80179b8 <f_mkfs+0x84c>

	return FR_OK;
 80179b6:	2300      	movs	r3, #0
}
 80179b8:	4618      	mov	r0, r3
 80179ba:	3774      	adds	r7, #116	@ 0x74
 80179bc:	46bd      	mov	sp, r7
 80179be:	bd90      	pop	{r4, r7, pc}
 80179c0:	0515565b 	.word	0x0515565b

080179c4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80179c4:	b480      	push	{r7}
 80179c6:	b087      	sub	sp, #28
 80179c8:	af00      	add	r7, sp, #0
 80179ca:	60f8      	str	r0, [r7, #12]
 80179cc:	60b9      	str	r1, [r7, #8]
 80179ce:	4613      	mov	r3, r2
 80179d0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80179d2:	2301      	movs	r3, #1
 80179d4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80179d6:	2300      	movs	r3, #0
 80179d8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80179da:	4b1f      	ldr	r3, [pc, #124]	@ (8017a58 <FATFS_LinkDriverEx+0x94>)
 80179dc:	7a5b      	ldrb	r3, [r3, #9]
 80179de:	b2db      	uxtb	r3, r3
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d131      	bne.n	8017a48 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80179e4:	4b1c      	ldr	r3, [pc, #112]	@ (8017a58 <FATFS_LinkDriverEx+0x94>)
 80179e6:	7a5b      	ldrb	r3, [r3, #9]
 80179e8:	b2db      	uxtb	r3, r3
 80179ea:	461a      	mov	r2, r3
 80179ec:	4b1a      	ldr	r3, [pc, #104]	@ (8017a58 <FATFS_LinkDriverEx+0x94>)
 80179ee:	2100      	movs	r1, #0
 80179f0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80179f2:	4b19      	ldr	r3, [pc, #100]	@ (8017a58 <FATFS_LinkDriverEx+0x94>)
 80179f4:	7a5b      	ldrb	r3, [r3, #9]
 80179f6:	b2db      	uxtb	r3, r3
 80179f8:	4a17      	ldr	r2, [pc, #92]	@ (8017a58 <FATFS_LinkDriverEx+0x94>)
 80179fa:	009b      	lsls	r3, r3, #2
 80179fc:	4413      	add	r3, r2
 80179fe:	68fa      	ldr	r2, [r7, #12]
 8017a00:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8017a02:	4b15      	ldr	r3, [pc, #84]	@ (8017a58 <FATFS_LinkDriverEx+0x94>)
 8017a04:	7a5b      	ldrb	r3, [r3, #9]
 8017a06:	b2db      	uxtb	r3, r3
 8017a08:	461a      	mov	r2, r3
 8017a0a:	4b13      	ldr	r3, [pc, #76]	@ (8017a58 <FATFS_LinkDriverEx+0x94>)
 8017a0c:	4413      	add	r3, r2
 8017a0e:	79fa      	ldrb	r2, [r7, #7]
 8017a10:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8017a12:	4b11      	ldr	r3, [pc, #68]	@ (8017a58 <FATFS_LinkDriverEx+0x94>)
 8017a14:	7a5b      	ldrb	r3, [r3, #9]
 8017a16:	b2db      	uxtb	r3, r3
 8017a18:	1c5a      	adds	r2, r3, #1
 8017a1a:	b2d1      	uxtb	r1, r2
 8017a1c:	4a0e      	ldr	r2, [pc, #56]	@ (8017a58 <FATFS_LinkDriverEx+0x94>)
 8017a1e:	7251      	strb	r1, [r2, #9]
 8017a20:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8017a22:	7dbb      	ldrb	r3, [r7, #22]
 8017a24:	3330      	adds	r3, #48	@ 0x30
 8017a26:	b2da      	uxtb	r2, r3
 8017a28:	68bb      	ldr	r3, [r7, #8]
 8017a2a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8017a2c:	68bb      	ldr	r3, [r7, #8]
 8017a2e:	3301      	adds	r3, #1
 8017a30:	223a      	movs	r2, #58	@ 0x3a
 8017a32:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8017a34:	68bb      	ldr	r3, [r7, #8]
 8017a36:	3302      	adds	r3, #2
 8017a38:	222f      	movs	r2, #47	@ 0x2f
 8017a3a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8017a3c:	68bb      	ldr	r3, [r7, #8]
 8017a3e:	3303      	adds	r3, #3
 8017a40:	2200      	movs	r2, #0
 8017a42:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8017a44:	2300      	movs	r3, #0
 8017a46:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8017a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8017a4a:	4618      	mov	r0, r3
 8017a4c:	371c      	adds	r7, #28
 8017a4e:	46bd      	mov	sp, r7
 8017a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a54:	4770      	bx	lr
 8017a56:	bf00      	nop
 8017a58:	20002408 	.word	0x20002408

08017a5c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8017a5c:	b580      	push	{r7, lr}
 8017a5e:	b082      	sub	sp, #8
 8017a60:	af00      	add	r7, sp, #0
 8017a62:	6078      	str	r0, [r7, #4]
 8017a64:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8017a66:	2200      	movs	r2, #0
 8017a68:	6839      	ldr	r1, [r7, #0]
 8017a6a:	6878      	ldr	r0, [r7, #4]
 8017a6c:	f7ff ffaa 	bl	80179c4 <FATFS_LinkDriverEx>
 8017a70:	4603      	mov	r3, r0
}
 8017a72:	4618      	mov	r0, r3
 8017a74:	3708      	adds	r7, #8
 8017a76:	46bd      	mov	sp, r7
 8017a78:	bd80      	pop	{r7, pc}

08017a7a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8017a7a:	b580      	push	{r7, lr}
 8017a7c:	b086      	sub	sp, #24
 8017a7e:	af00      	add	r7, sp, #0
 8017a80:	4603      	mov	r3, r0
 8017a82:	6039      	str	r1, [r7, #0]
 8017a84:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8017a86:	2300      	movs	r3, #0
 8017a88:	60fb      	str	r3, [r7, #12]
 8017a8a:	2300      	movs	r3, #0
 8017a8c:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8017a8e:	f107 030c 	add.w	r3, r7, #12
 8017a92:	2101      	movs	r1, #1
 8017a94:	4618      	mov	r0, r3
 8017a96:	f000 f8e9 	bl	8017c6c <osSemaphoreCreate>
 8017a9a:	4602      	mov	r2, r0
 8017a9c:	683b      	ldr	r3, [r7, #0]
 8017a9e:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8017aa0:	683b      	ldr	r3, [r7, #0]
 8017aa2:	681b      	ldr	r3, [r3, #0]
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	bf14      	ite	ne
 8017aa8:	2301      	movne	r3, #1
 8017aaa:	2300      	moveq	r3, #0
 8017aac:	b2db      	uxtb	r3, r3
 8017aae:	617b      	str	r3, [r7, #20]

    return ret;
 8017ab0:	697b      	ldr	r3, [r7, #20]
}
 8017ab2:	4618      	mov	r0, r3
 8017ab4:	3718      	adds	r7, #24
 8017ab6:	46bd      	mov	sp, r7
 8017ab8:	bd80      	pop	{r7, pc}

08017aba <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8017aba:	b580      	push	{r7, lr}
 8017abc:	b082      	sub	sp, #8
 8017abe:	af00      	add	r7, sp, #0
 8017ac0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8017ac2:	6878      	ldr	r0, [r7, #4]
 8017ac4:	f000 f996 	bl	8017df4 <osSemaphoreDelete>
#endif
    return 1;
 8017ac8:	2301      	movs	r3, #1
}
 8017aca:	4618      	mov	r0, r3
 8017acc:	3708      	adds	r7, #8
 8017ace:	46bd      	mov	sp, r7
 8017ad0:	bd80      	pop	{r7, pc}

08017ad2 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8017ad2:	b580      	push	{r7, lr}
 8017ad4:	b084      	sub	sp, #16
 8017ad6:	af00      	add	r7, sp, #0
 8017ad8:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8017ada:	2300      	movs	r3, #0
 8017adc:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8017ade:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8017ae2:	6878      	ldr	r0, [r7, #4]
 8017ae4:	f000 f902 	bl	8017cec <osSemaphoreWait>
 8017ae8:	4603      	mov	r3, r0
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d101      	bne.n	8017af2 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8017aee:	2301      	movs	r3, #1
 8017af0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8017af2:	68fb      	ldr	r3, [r7, #12]
}
 8017af4:	4618      	mov	r0, r3
 8017af6:	3710      	adds	r7, #16
 8017af8:	46bd      	mov	sp, r7
 8017afa:	bd80      	pop	{r7, pc}

08017afc <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8017afc:	b580      	push	{r7, lr}
 8017afe:	b082      	sub	sp, #8
 8017b00:	af00      	add	r7, sp, #0
 8017b02:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8017b04:	6878      	ldr	r0, [r7, #4]
 8017b06:	f000 f93f 	bl	8017d88 <osSemaphoreRelease>
#endif
}
 8017b0a:	bf00      	nop
 8017b0c:	3708      	adds	r7, #8
 8017b0e:	46bd      	mov	sp, r7
 8017b10:	bd80      	pop	{r7, pc}

08017b12 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8017b12:	b480      	push	{r7}
 8017b14:	b085      	sub	sp, #20
 8017b16:	af00      	add	r7, sp, #0
 8017b18:	4603      	mov	r3, r0
 8017b1a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8017b1c:	2300      	movs	r3, #0
 8017b1e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8017b20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017b24:	2b84      	cmp	r3, #132	@ 0x84
 8017b26:	d005      	beq.n	8017b34 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8017b28:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8017b2c:	68fb      	ldr	r3, [r7, #12]
 8017b2e:	4413      	add	r3, r2
 8017b30:	3303      	adds	r3, #3
 8017b32:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8017b34:	68fb      	ldr	r3, [r7, #12]
}
 8017b36:	4618      	mov	r0, r3
 8017b38:	3714      	adds	r7, #20
 8017b3a:	46bd      	mov	sp, r7
 8017b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b40:	4770      	bx	lr

08017b42 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8017b42:	b480      	push	{r7}
 8017b44:	b083      	sub	sp, #12
 8017b46:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017b48:	f3ef 8305 	mrs	r3, IPSR
 8017b4c:	607b      	str	r3, [r7, #4]
  return(result);
 8017b4e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	bf14      	ite	ne
 8017b54:	2301      	movne	r3, #1
 8017b56:	2300      	moveq	r3, #0
 8017b58:	b2db      	uxtb	r3, r3
}
 8017b5a:	4618      	mov	r0, r3
 8017b5c:	370c      	adds	r7, #12
 8017b5e:	46bd      	mov	sp, r7
 8017b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b64:	4770      	bx	lr

08017b66 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8017b66:	b580      	push	{r7, lr}
 8017b68:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8017b6a:	f001 fd33 	bl	80195d4 <vTaskStartScheduler>
  
  return osOK;
 8017b6e:	2300      	movs	r3, #0
}
 8017b70:	4618      	mov	r0, r3
 8017b72:	bd80      	pop	{r7, pc}

08017b74 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8017b74:	b580      	push	{r7, lr}
 8017b76:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8017b78:	f002 f994 	bl	8019ea4 <xTaskGetSchedulerState>
 8017b7c:	4603      	mov	r3, r0
 8017b7e:	2b01      	cmp	r3, #1
 8017b80:	d101      	bne.n	8017b86 <osKernelRunning+0x12>
    return 0;
 8017b82:	2300      	movs	r3, #0
 8017b84:	e000      	b.n	8017b88 <osKernelRunning+0x14>
  else
    return 1;
 8017b86:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8017b88:	4618      	mov	r0, r3
 8017b8a:	bd80      	pop	{r7, pc}

08017b8c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8017b8c:	b580      	push	{r7, lr}
 8017b8e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8017b90:	f7ff ffd7 	bl	8017b42 <inHandlerMode>
 8017b94:	4603      	mov	r3, r0
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d003      	beq.n	8017ba2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8017b9a:	f001 fe3f 	bl	801981c <xTaskGetTickCountFromISR>
 8017b9e:	4603      	mov	r3, r0
 8017ba0:	e002      	b.n	8017ba8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8017ba2:	f001 fe2b 	bl	80197fc <xTaskGetTickCount>
 8017ba6:	4603      	mov	r3, r0
  }
}
 8017ba8:	4618      	mov	r0, r3
 8017baa:	bd80      	pop	{r7, pc}

08017bac <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8017bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017bae:	b089      	sub	sp, #36	@ 0x24
 8017bb0:	af04      	add	r7, sp, #16
 8017bb2:	6078      	str	r0, [r7, #4]
 8017bb4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8017bb6:	687b      	ldr	r3, [r7, #4]
 8017bb8:	695b      	ldr	r3, [r3, #20]
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d020      	beq.n	8017c00 <osThreadCreate+0x54>
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	699b      	ldr	r3, [r3, #24]
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	d01c      	beq.n	8017c00 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	685c      	ldr	r4, [r3, #4]
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	691e      	ldr	r6, [r3, #16]
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8017bd8:	4618      	mov	r0, r3
 8017bda:	f7ff ff9a 	bl	8017b12 <makeFreeRtosPriority>
 8017bde:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	695b      	ldr	r3, [r3, #20]
 8017be4:	687a      	ldr	r2, [r7, #4]
 8017be6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8017be8:	9202      	str	r2, [sp, #8]
 8017bea:	9301      	str	r3, [sp, #4]
 8017bec:	9100      	str	r1, [sp, #0]
 8017bee:	683b      	ldr	r3, [r7, #0]
 8017bf0:	4632      	mov	r2, r6
 8017bf2:	4629      	mov	r1, r5
 8017bf4:	4620      	mov	r0, r4
 8017bf6:	f001 fb0b 	bl	8019210 <xTaskCreateStatic>
 8017bfa:	4603      	mov	r3, r0
 8017bfc:	60fb      	str	r3, [r7, #12]
 8017bfe:	e01c      	b.n	8017c3a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	685c      	ldr	r4, [r3, #4]
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8017c0c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8017c14:	4618      	mov	r0, r3
 8017c16:	f7ff ff7c 	bl	8017b12 <makeFreeRtosPriority>
 8017c1a:	4602      	mov	r2, r0
 8017c1c:	f107 030c 	add.w	r3, r7, #12
 8017c20:	9301      	str	r3, [sp, #4]
 8017c22:	9200      	str	r2, [sp, #0]
 8017c24:	683b      	ldr	r3, [r7, #0]
 8017c26:	4632      	mov	r2, r6
 8017c28:	4629      	mov	r1, r5
 8017c2a:	4620      	mov	r0, r4
 8017c2c:	f001 fb56 	bl	80192dc <xTaskCreate>
 8017c30:	4603      	mov	r3, r0
 8017c32:	2b01      	cmp	r3, #1
 8017c34:	d001      	beq.n	8017c3a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8017c36:	2300      	movs	r3, #0
 8017c38:	e000      	b.n	8017c3c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8017c3a:	68fb      	ldr	r3, [r7, #12]
}
 8017c3c:	4618      	mov	r0, r3
 8017c3e:	3714      	adds	r7, #20
 8017c40:	46bd      	mov	sp, r7
 8017c42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017c44 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8017c44:	b580      	push	{r7, lr}
 8017c46:	b084      	sub	sp, #16
 8017c48:	af00      	add	r7, sp, #0
 8017c4a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8017c50:	68fb      	ldr	r3, [r7, #12]
 8017c52:	2b00      	cmp	r3, #0
 8017c54:	d001      	beq.n	8017c5a <osDelay+0x16>
 8017c56:	68fb      	ldr	r3, [r7, #12]
 8017c58:	e000      	b.n	8017c5c <osDelay+0x18>
 8017c5a:	2301      	movs	r3, #1
 8017c5c:	4618      	mov	r0, r3
 8017c5e:	f001 fc81 	bl	8019564 <vTaskDelay>
  
  return osOK;
 8017c62:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8017c64:	4618      	mov	r0, r3
 8017c66:	3710      	adds	r7, #16
 8017c68:	46bd      	mov	sp, r7
 8017c6a:	bd80      	pop	{r7, pc}

08017c6c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8017c6c:	b580      	push	{r7, lr}
 8017c6e:	b086      	sub	sp, #24
 8017c70:	af02      	add	r7, sp, #8
 8017c72:	6078      	str	r0, [r7, #4]
 8017c74:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	685b      	ldr	r3, [r3, #4]
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d016      	beq.n	8017cac <osSemaphoreCreate+0x40>
    if (count == 1) {
 8017c7e:	683b      	ldr	r3, [r7, #0]
 8017c80:	2b01      	cmp	r3, #1
 8017c82:	d10a      	bne.n	8017c9a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	685b      	ldr	r3, [r3, #4]
 8017c88:	2203      	movs	r2, #3
 8017c8a:	9200      	str	r2, [sp, #0]
 8017c8c:	2200      	movs	r2, #0
 8017c8e:	2100      	movs	r1, #0
 8017c90:	2001      	movs	r0, #1
 8017c92:	f000 fad5 	bl	8018240 <xQueueGenericCreateStatic>
 8017c96:	4603      	mov	r3, r0
 8017c98:	e023      	b.n	8017ce2 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8017c9a:	6838      	ldr	r0, [r7, #0]
 8017c9c:	6839      	ldr	r1, [r7, #0]
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	685b      	ldr	r3, [r3, #4]
 8017ca2:	461a      	mov	r2, r3
 8017ca4:	f000 fbb5 	bl	8018412 <xQueueCreateCountingSemaphoreStatic>
 8017ca8:	4603      	mov	r3, r0
 8017caa:	e01a      	b.n	8017ce2 <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8017cac:	683b      	ldr	r3, [r7, #0]
 8017cae:	2b01      	cmp	r3, #1
 8017cb0:	d110      	bne.n	8017cd4 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 8017cb2:	2203      	movs	r2, #3
 8017cb4:	2100      	movs	r1, #0
 8017cb6:	2001      	movs	r0, #1
 8017cb8:	f000 fb49 	bl	801834e <xQueueGenericCreate>
 8017cbc:	60f8      	str	r0, [r7, #12]
 8017cbe:	68fb      	ldr	r3, [r7, #12]
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	d005      	beq.n	8017cd0 <osSemaphoreCreate+0x64>
 8017cc4:	2300      	movs	r3, #0
 8017cc6:	2200      	movs	r2, #0
 8017cc8:	2100      	movs	r1, #0
 8017cca:	68f8      	ldr	r0, [r7, #12]
 8017ccc:	f000 fc18 	bl	8018500 <xQueueGenericSend>
      return sema;
 8017cd0:	68fb      	ldr	r3, [r7, #12]
 8017cd2:	e006      	b.n	8017ce2 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8017cd4:	683b      	ldr	r3, [r7, #0]
 8017cd6:	683a      	ldr	r2, [r7, #0]
 8017cd8:	4611      	mov	r1, r2
 8017cda:	4618      	mov	r0, r3
 8017cdc:	f000 fbd6 	bl	801848c <xQueueCreateCountingSemaphore>
 8017ce0:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8017ce2:	4618      	mov	r0, r3
 8017ce4:	3710      	adds	r7, #16
 8017ce6:	46bd      	mov	sp, r7
 8017ce8:	bd80      	pop	{r7, pc}
	...

08017cec <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8017cec:	b580      	push	{r7, lr}
 8017cee:	b084      	sub	sp, #16
 8017cf0:	af00      	add	r7, sp, #0
 8017cf2:	6078      	str	r0, [r7, #4]
 8017cf4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8017cf6:	2300      	movs	r3, #0
 8017cf8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8017cfa:	687b      	ldr	r3, [r7, #4]
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d101      	bne.n	8017d04 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8017d00:	2380      	movs	r3, #128	@ 0x80
 8017d02:	e03a      	b.n	8017d7a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8017d04:	2300      	movs	r3, #0
 8017d06:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8017d08:	683b      	ldr	r3, [r7, #0]
 8017d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017d0e:	d103      	bne.n	8017d18 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8017d10:	f04f 33ff 	mov.w	r3, #4294967295
 8017d14:	60fb      	str	r3, [r7, #12]
 8017d16:	e009      	b.n	8017d2c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8017d18:	683b      	ldr	r3, [r7, #0]
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d006      	beq.n	8017d2c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8017d1e:	683b      	ldr	r3, [r7, #0]
 8017d20:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8017d22:	68fb      	ldr	r3, [r7, #12]
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	d101      	bne.n	8017d2c <osSemaphoreWait+0x40>
      ticks = 1;
 8017d28:	2301      	movs	r3, #1
 8017d2a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8017d2c:	f7ff ff09 	bl	8017b42 <inHandlerMode>
 8017d30:	4603      	mov	r3, r0
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	d017      	beq.n	8017d66 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8017d36:	f107 0308 	add.w	r3, r7, #8
 8017d3a:	461a      	mov	r2, r3
 8017d3c:	2100      	movs	r1, #0
 8017d3e:	6878      	ldr	r0, [r7, #4]
 8017d40:	f001 f824 	bl	8018d8c <xQueueReceiveFromISR>
 8017d44:	4603      	mov	r3, r0
 8017d46:	2b01      	cmp	r3, #1
 8017d48:	d001      	beq.n	8017d4e <osSemaphoreWait+0x62>
      return osErrorOS;
 8017d4a:	23ff      	movs	r3, #255	@ 0xff
 8017d4c:	e015      	b.n	8017d7a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8017d4e:	68bb      	ldr	r3, [r7, #8]
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d011      	beq.n	8017d78 <osSemaphoreWait+0x8c>
 8017d54:	4b0b      	ldr	r3, [pc, #44]	@ (8017d84 <osSemaphoreWait+0x98>)
 8017d56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017d5a:	601a      	str	r2, [r3, #0]
 8017d5c:	f3bf 8f4f 	dsb	sy
 8017d60:	f3bf 8f6f 	isb	sy
 8017d64:	e008      	b.n	8017d78 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8017d66:	68f9      	ldr	r1, [r7, #12]
 8017d68:	6878      	ldr	r0, [r7, #4]
 8017d6a:	f000 fef7 	bl	8018b5c <xQueueSemaphoreTake>
 8017d6e:	4603      	mov	r3, r0
 8017d70:	2b01      	cmp	r3, #1
 8017d72:	d001      	beq.n	8017d78 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8017d74:	23ff      	movs	r3, #255	@ 0xff
 8017d76:	e000      	b.n	8017d7a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8017d78:	2300      	movs	r3, #0
}
 8017d7a:	4618      	mov	r0, r3
 8017d7c:	3710      	adds	r7, #16
 8017d7e:	46bd      	mov	sp, r7
 8017d80:	bd80      	pop	{r7, pc}
 8017d82:	bf00      	nop
 8017d84:	e000ed04 	.word	0xe000ed04

08017d88 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8017d88:	b580      	push	{r7, lr}
 8017d8a:	b084      	sub	sp, #16
 8017d8c:	af00      	add	r7, sp, #0
 8017d8e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8017d90:	2300      	movs	r3, #0
 8017d92:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8017d94:	2300      	movs	r3, #0
 8017d96:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8017d98:	f7ff fed3 	bl	8017b42 <inHandlerMode>
 8017d9c:	4603      	mov	r3, r0
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d016      	beq.n	8017dd0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8017da2:	f107 0308 	add.w	r3, r7, #8
 8017da6:	4619      	mov	r1, r3
 8017da8:	6878      	ldr	r0, [r7, #4]
 8017daa:	f000 fd56 	bl	801885a <xQueueGiveFromISR>
 8017dae:	4603      	mov	r3, r0
 8017db0:	2b01      	cmp	r3, #1
 8017db2:	d001      	beq.n	8017db8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8017db4:	23ff      	movs	r3, #255	@ 0xff
 8017db6:	e017      	b.n	8017de8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8017db8:	68bb      	ldr	r3, [r7, #8]
 8017dba:	2b00      	cmp	r3, #0
 8017dbc:	d013      	beq.n	8017de6 <osSemaphoreRelease+0x5e>
 8017dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8017df0 <osSemaphoreRelease+0x68>)
 8017dc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017dc4:	601a      	str	r2, [r3, #0]
 8017dc6:	f3bf 8f4f 	dsb	sy
 8017dca:	f3bf 8f6f 	isb	sy
 8017dce:	e00a      	b.n	8017de6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8017dd0:	2300      	movs	r3, #0
 8017dd2:	2200      	movs	r2, #0
 8017dd4:	2100      	movs	r1, #0
 8017dd6:	6878      	ldr	r0, [r7, #4]
 8017dd8:	f000 fb92 	bl	8018500 <xQueueGenericSend>
 8017ddc:	4603      	mov	r3, r0
 8017dde:	2b01      	cmp	r3, #1
 8017de0:	d001      	beq.n	8017de6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8017de2:	23ff      	movs	r3, #255	@ 0xff
 8017de4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8017de6:	68fb      	ldr	r3, [r7, #12]
}
 8017de8:	4618      	mov	r0, r3
 8017dea:	3710      	adds	r7, #16
 8017dec:	46bd      	mov	sp, r7
 8017dee:	bd80      	pop	{r7, pc}
 8017df0:	e000ed04 	.word	0xe000ed04

08017df4 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8017df4:	b580      	push	{r7, lr}
 8017df6:	b082      	sub	sp, #8
 8017df8:	af00      	add	r7, sp, #0
 8017dfa:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8017dfc:	f7ff fea1 	bl	8017b42 <inHandlerMode>
 8017e00:	4603      	mov	r3, r0
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	d001      	beq.n	8017e0a <osSemaphoreDelete+0x16>
    return osErrorISR;
 8017e06:	2382      	movs	r3, #130	@ 0x82
 8017e08:	e003      	b.n	8017e12 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8017e0a:	6878      	ldr	r0, [r7, #4]
 8017e0c:	f001 f888 	bl	8018f20 <vQueueDelete>

  return osOK; 
 8017e10:	2300      	movs	r3, #0
}
 8017e12:	4618      	mov	r0, r3
 8017e14:	3708      	adds	r7, #8
 8017e16:	46bd      	mov	sp, r7
 8017e18:	bd80      	pop	{r7, pc}

08017e1a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8017e1a:	b590      	push	{r4, r7, lr}
 8017e1c:	b085      	sub	sp, #20
 8017e1e:	af02      	add	r7, sp, #8
 8017e20:	6078      	str	r0, [r7, #4]
 8017e22:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	689b      	ldr	r3, [r3, #8]
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d011      	beq.n	8017e50 <osMessageCreate+0x36>
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	68db      	ldr	r3, [r3, #12]
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	d00d      	beq.n	8017e50 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	6818      	ldr	r0, [r3, #0]
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	6859      	ldr	r1, [r3, #4]
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	689a      	ldr	r2, [r3, #8]
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	68db      	ldr	r3, [r3, #12]
 8017e44:	2400      	movs	r4, #0
 8017e46:	9400      	str	r4, [sp, #0]
 8017e48:	f000 f9fa 	bl	8018240 <xQueueGenericCreateStatic>
 8017e4c:	4603      	mov	r3, r0
 8017e4e:	e008      	b.n	8017e62 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	6818      	ldr	r0, [r3, #0]
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	685b      	ldr	r3, [r3, #4]
 8017e58:	2200      	movs	r2, #0
 8017e5a:	4619      	mov	r1, r3
 8017e5c:	f000 fa77 	bl	801834e <xQueueGenericCreate>
 8017e60:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8017e62:	4618      	mov	r0, r3
 8017e64:	370c      	adds	r7, #12
 8017e66:	46bd      	mov	sp, r7
 8017e68:	bd90      	pop	{r4, r7, pc}
	...

08017e6c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8017e6c:	b580      	push	{r7, lr}
 8017e6e:	b086      	sub	sp, #24
 8017e70:	af00      	add	r7, sp, #0
 8017e72:	60f8      	str	r0, [r7, #12]
 8017e74:	60b9      	str	r1, [r7, #8]
 8017e76:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8017e78:	2300      	movs	r3, #0
 8017e7a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8017e80:	697b      	ldr	r3, [r7, #20]
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d101      	bne.n	8017e8a <osMessagePut+0x1e>
    ticks = 1;
 8017e86:	2301      	movs	r3, #1
 8017e88:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8017e8a:	f7ff fe5a 	bl	8017b42 <inHandlerMode>
 8017e8e:	4603      	mov	r3, r0
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d018      	beq.n	8017ec6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8017e94:	f107 0210 	add.w	r2, r7, #16
 8017e98:	f107 0108 	add.w	r1, r7, #8
 8017e9c:	2300      	movs	r3, #0
 8017e9e:	68f8      	ldr	r0, [r7, #12]
 8017ea0:	f000 fc38 	bl	8018714 <xQueueGenericSendFromISR>
 8017ea4:	4603      	mov	r3, r0
 8017ea6:	2b01      	cmp	r3, #1
 8017ea8:	d001      	beq.n	8017eae <osMessagePut+0x42>
      return osErrorOS;
 8017eaa:	23ff      	movs	r3, #255	@ 0xff
 8017eac:	e018      	b.n	8017ee0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8017eae:	693b      	ldr	r3, [r7, #16]
 8017eb0:	2b00      	cmp	r3, #0
 8017eb2:	d014      	beq.n	8017ede <osMessagePut+0x72>
 8017eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8017ee8 <osMessagePut+0x7c>)
 8017eb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017eba:	601a      	str	r2, [r3, #0]
 8017ebc:	f3bf 8f4f 	dsb	sy
 8017ec0:	f3bf 8f6f 	isb	sy
 8017ec4:	e00b      	b.n	8017ede <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8017ec6:	f107 0108 	add.w	r1, r7, #8
 8017eca:	2300      	movs	r3, #0
 8017ecc:	697a      	ldr	r2, [r7, #20]
 8017ece:	68f8      	ldr	r0, [r7, #12]
 8017ed0:	f000 fb16 	bl	8018500 <xQueueGenericSend>
 8017ed4:	4603      	mov	r3, r0
 8017ed6:	2b01      	cmp	r3, #1
 8017ed8:	d001      	beq.n	8017ede <osMessagePut+0x72>
      return osErrorOS;
 8017eda:	23ff      	movs	r3, #255	@ 0xff
 8017edc:	e000      	b.n	8017ee0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8017ede:	2300      	movs	r3, #0
}
 8017ee0:	4618      	mov	r0, r3
 8017ee2:	3718      	adds	r7, #24
 8017ee4:	46bd      	mov	sp, r7
 8017ee6:	bd80      	pop	{r7, pc}
 8017ee8:	e000ed04 	.word	0xe000ed04

08017eec <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8017eec:	b590      	push	{r4, r7, lr}
 8017eee:	b08b      	sub	sp, #44	@ 0x2c
 8017ef0:	af00      	add	r7, sp, #0
 8017ef2:	60f8      	str	r0, [r7, #12]
 8017ef4:	60b9      	str	r1, [r7, #8]
 8017ef6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8017ef8:	68bb      	ldr	r3, [r7, #8]
 8017efa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8017efc:	2300      	movs	r3, #0
 8017efe:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8017f00:	68bb      	ldr	r3, [r7, #8]
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d10a      	bne.n	8017f1c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8017f06:	2380      	movs	r3, #128	@ 0x80
 8017f08:	617b      	str	r3, [r7, #20]
    return event;
 8017f0a:	68fb      	ldr	r3, [r7, #12]
 8017f0c:	461c      	mov	r4, r3
 8017f0e:	f107 0314 	add.w	r3, r7, #20
 8017f12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017f16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8017f1a:	e054      	b.n	8017fc6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8017f1c:	2300      	movs	r3, #0
 8017f1e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8017f20:	2300      	movs	r3, #0
 8017f22:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f2a:	d103      	bne.n	8017f34 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8017f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8017f30:	627b      	str	r3, [r7, #36]	@ 0x24
 8017f32:	e009      	b.n	8017f48 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	d006      	beq.n	8017f48 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8017f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	d101      	bne.n	8017f48 <osMessageGet+0x5c>
      ticks = 1;
 8017f44:	2301      	movs	r3, #1
 8017f46:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8017f48:	f7ff fdfb 	bl	8017b42 <inHandlerMode>
 8017f4c:	4603      	mov	r3, r0
 8017f4e:	2b00      	cmp	r3, #0
 8017f50:	d01c      	beq.n	8017f8c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8017f52:	f107 0220 	add.w	r2, r7, #32
 8017f56:	f107 0314 	add.w	r3, r7, #20
 8017f5a:	3304      	adds	r3, #4
 8017f5c:	4619      	mov	r1, r3
 8017f5e:	68b8      	ldr	r0, [r7, #8]
 8017f60:	f000 ff14 	bl	8018d8c <xQueueReceiveFromISR>
 8017f64:	4603      	mov	r3, r0
 8017f66:	2b01      	cmp	r3, #1
 8017f68:	d102      	bne.n	8017f70 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8017f6a:	2310      	movs	r3, #16
 8017f6c:	617b      	str	r3, [r7, #20]
 8017f6e:	e001      	b.n	8017f74 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8017f70:	2300      	movs	r3, #0
 8017f72:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8017f74:	6a3b      	ldr	r3, [r7, #32]
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d01d      	beq.n	8017fb6 <osMessageGet+0xca>
 8017f7a:	4b15      	ldr	r3, [pc, #84]	@ (8017fd0 <osMessageGet+0xe4>)
 8017f7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017f80:	601a      	str	r2, [r3, #0]
 8017f82:	f3bf 8f4f 	dsb	sy
 8017f86:	f3bf 8f6f 	isb	sy
 8017f8a:	e014      	b.n	8017fb6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8017f8c:	f107 0314 	add.w	r3, r7, #20
 8017f90:	3304      	adds	r3, #4
 8017f92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017f94:	4619      	mov	r1, r3
 8017f96:	68b8      	ldr	r0, [r7, #8]
 8017f98:	f000 fcf8 	bl	801898c <xQueueReceive>
 8017f9c:	4603      	mov	r3, r0
 8017f9e:	2b01      	cmp	r3, #1
 8017fa0:	d102      	bne.n	8017fa8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8017fa2:	2310      	movs	r3, #16
 8017fa4:	617b      	str	r3, [r7, #20]
 8017fa6:	e006      	b.n	8017fb6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8017fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d101      	bne.n	8017fb2 <osMessageGet+0xc6>
 8017fae:	2300      	movs	r3, #0
 8017fb0:	e000      	b.n	8017fb4 <osMessageGet+0xc8>
 8017fb2:	2340      	movs	r3, #64	@ 0x40
 8017fb4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8017fb6:	68fb      	ldr	r3, [r7, #12]
 8017fb8:	461c      	mov	r4, r3
 8017fba:	f107 0314 	add.w	r3, r7, #20
 8017fbe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017fc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8017fc6:	68f8      	ldr	r0, [r7, #12]
 8017fc8:	372c      	adds	r7, #44	@ 0x2c
 8017fca:	46bd      	mov	sp, r7
 8017fcc:	bd90      	pop	{r4, r7, pc}
 8017fce:	bf00      	nop
 8017fd0:	e000ed04 	.word	0xe000ed04

08017fd4 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8017fd4:	b580      	push	{r7, lr}
 8017fd6:	b082      	sub	sp, #8
 8017fd8:	af00      	add	r7, sp, #0
 8017fda:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8017fdc:	f7ff fdb1 	bl	8017b42 <inHandlerMode>
 8017fe0:	4603      	mov	r3, r0
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d004      	beq.n	8017ff0 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8017fe6:	6878      	ldr	r0, [r7, #4]
 8017fe8:	f000 ff79 	bl	8018ede <uxQueueMessagesWaitingFromISR>
 8017fec:	4603      	mov	r3, r0
 8017fee:	e003      	b.n	8017ff8 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8017ff0:	6878      	ldr	r0, [r7, #4]
 8017ff2:	f000 ff53 	bl	8018e9c <uxQueueMessagesWaiting>
 8017ff6:	4603      	mov	r3, r0
  }
}
 8017ff8:	4618      	mov	r0, r3
 8017ffa:	3708      	adds	r7, #8
 8017ffc:	46bd      	mov	sp, r7
 8017ffe:	bd80      	pop	{r7, pc}

08018000 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8018000:	b480      	push	{r7}
 8018002:	b083      	sub	sp, #12
 8018004:	af00      	add	r7, sp, #0
 8018006:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	f103 0208 	add.w	r2, r3, #8
 801800e:	687b      	ldr	r3, [r7, #4]
 8018010:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	f04f 32ff 	mov.w	r2, #4294967295
 8018018:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	f103 0208 	add.w	r2, r3, #8
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	f103 0208 	add.w	r2, r3, #8
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	2200      	movs	r2, #0
 8018032:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8018034:	bf00      	nop
 8018036:	370c      	adds	r7, #12
 8018038:	46bd      	mov	sp, r7
 801803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801803e:	4770      	bx	lr

08018040 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8018040:	b480      	push	{r7}
 8018042:	b083      	sub	sp, #12
 8018044:	af00      	add	r7, sp, #0
 8018046:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	2200      	movs	r2, #0
 801804c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801804e:	bf00      	nop
 8018050:	370c      	adds	r7, #12
 8018052:	46bd      	mov	sp, r7
 8018054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018058:	4770      	bx	lr

0801805a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801805a:	b480      	push	{r7}
 801805c:	b085      	sub	sp, #20
 801805e:	af00      	add	r7, sp, #0
 8018060:	6078      	str	r0, [r7, #4]
 8018062:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	685b      	ldr	r3, [r3, #4]
 8018068:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801806a:	683b      	ldr	r3, [r7, #0]
 801806c:	68fa      	ldr	r2, [r7, #12]
 801806e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8018070:	68fb      	ldr	r3, [r7, #12]
 8018072:	689a      	ldr	r2, [r3, #8]
 8018074:	683b      	ldr	r3, [r7, #0]
 8018076:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8018078:	68fb      	ldr	r3, [r7, #12]
 801807a:	689b      	ldr	r3, [r3, #8]
 801807c:	683a      	ldr	r2, [r7, #0]
 801807e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8018080:	68fb      	ldr	r3, [r7, #12]
 8018082:	683a      	ldr	r2, [r7, #0]
 8018084:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8018086:	683b      	ldr	r3, [r7, #0]
 8018088:	687a      	ldr	r2, [r7, #4]
 801808a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	681b      	ldr	r3, [r3, #0]
 8018090:	1c5a      	adds	r2, r3, #1
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	601a      	str	r2, [r3, #0]
}
 8018096:	bf00      	nop
 8018098:	3714      	adds	r7, #20
 801809a:	46bd      	mov	sp, r7
 801809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180a0:	4770      	bx	lr

080180a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80180a2:	b480      	push	{r7}
 80180a4:	b085      	sub	sp, #20
 80180a6:	af00      	add	r7, sp, #0
 80180a8:	6078      	str	r0, [r7, #4]
 80180aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80180ac:	683b      	ldr	r3, [r7, #0]
 80180ae:	681b      	ldr	r3, [r3, #0]
 80180b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80180b2:	68bb      	ldr	r3, [r7, #8]
 80180b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80180b8:	d103      	bne.n	80180c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	691b      	ldr	r3, [r3, #16]
 80180be:	60fb      	str	r3, [r7, #12]
 80180c0:	e00c      	b.n	80180dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	3308      	adds	r3, #8
 80180c6:	60fb      	str	r3, [r7, #12]
 80180c8:	e002      	b.n	80180d0 <vListInsert+0x2e>
 80180ca:	68fb      	ldr	r3, [r7, #12]
 80180cc:	685b      	ldr	r3, [r3, #4]
 80180ce:	60fb      	str	r3, [r7, #12]
 80180d0:	68fb      	ldr	r3, [r7, #12]
 80180d2:	685b      	ldr	r3, [r3, #4]
 80180d4:	681b      	ldr	r3, [r3, #0]
 80180d6:	68ba      	ldr	r2, [r7, #8]
 80180d8:	429a      	cmp	r2, r3
 80180da:	d2f6      	bcs.n	80180ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80180dc:	68fb      	ldr	r3, [r7, #12]
 80180de:	685a      	ldr	r2, [r3, #4]
 80180e0:	683b      	ldr	r3, [r7, #0]
 80180e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80180e4:	683b      	ldr	r3, [r7, #0]
 80180e6:	685b      	ldr	r3, [r3, #4]
 80180e8:	683a      	ldr	r2, [r7, #0]
 80180ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80180ec:	683b      	ldr	r3, [r7, #0]
 80180ee:	68fa      	ldr	r2, [r7, #12]
 80180f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80180f2:	68fb      	ldr	r3, [r7, #12]
 80180f4:	683a      	ldr	r2, [r7, #0]
 80180f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80180f8:	683b      	ldr	r3, [r7, #0]
 80180fa:	687a      	ldr	r2, [r7, #4]
 80180fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	681b      	ldr	r3, [r3, #0]
 8018102:	1c5a      	adds	r2, r3, #1
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	601a      	str	r2, [r3, #0]
}
 8018108:	bf00      	nop
 801810a:	3714      	adds	r7, #20
 801810c:	46bd      	mov	sp, r7
 801810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018112:	4770      	bx	lr

08018114 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8018114:	b480      	push	{r7}
 8018116:	b085      	sub	sp, #20
 8018118:	af00      	add	r7, sp, #0
 801811a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	691b      	ldr	r3, [r3, #16]
 8018120:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	685b      	ldr	r3, [r3, #4]
 8018126:	687a      	ldr	r2, [r7, #4]
 8018128:	6892      	ldr	r2, [r2, #8]
 801812a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	689b      	ldr	r3, [r3, #8]
 8018130:	687a      	ldr	r2, [r7, #4]
 8018132:	6852      	ldr	r2, [r2, #4]
 8018134:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8018136:	68fb      	ldr	r3, [r7, #12]
 8018138:	685b      	ldr	r3, [r3, #4]
 801813a:	687a      	ldr	r2, [r7, #4]
 801813c:	429a      	cmp	r2, r3
 801813e:	d103      	bne.n	8018148 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	689a      	ldr	r2, [r3, #8]
 8018144:	68fb      	ldr	r3, [r7, #12]
 8018146:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	2200      	movs	r2, #0
 801814c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801814e:	68fb      	ldr	r3, [r7, #12]
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	1e5a      	subs	r2, r3, #1
 8018154:	68fb      	ldr	r3, [r7, #12]
 8018156:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8018158:	68fb      	ldr	r3, [r7, #12]
 801815a:	681b      	ldr	r3, [r3, #0]
}
 801815c:	4618      	mov	r0, r3
 801815e:	3714      	adds	r7, #20
 8018160:	46bd      	mov	sp, r7
 8018162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018166:	4770      	bx	lr

08018168 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8018168:	b580      	push	{r7, lr}
 801816a:	b084      	sub	sp, #16
 801816c:	af00      	add	r7, sp, #0
 801816e:	6078      	str	r0, [r7, #4]
 8018170:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8018176:	68fb      	ldr	r3, [r7, #12]
 8018178:	2b00      	cmp	r3, #0
 801817a:	d10d      	bne.n	8018198 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801817c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018180:	b672      	cpsid	i
 8018182:	f383 8811 	msr	BASEPRI, r3
 8018186:	f3bf 8f6f 	isb	sy
 801818a:	f3bf 8f4f 	dsb	sy
 801818e:	b662      	cpsie	i
 8018190:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8018192:	bf00      	nop
 8018194:	bf00      	nop
 8018196:	e7fd      	b.n	8018194 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8018198:	f002 f9d8 	bl	801a54c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801819c:	68fb      	ldr	r3, [r7, #12]
 801819e:	681a      	ldr	r2, [r3, #0]
 80181a0:	68fb      	ldr	r3, [r7, #12]
 80181a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80181a4:	68f9      	ldr	r1, [r7, #12]
 80181a6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80181a8:	fb01 f303 	mul.w	r3, r1, r3
 80181ac:	441a      	add	r2, r3
 80181ae:	68fb      	ldr	r3, [r7, #12]
 80181b0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80181b2:	68fb      	ldr	r3, [r7, #12]
 80181b4:	2200      	movs	r2, #0
 80181b6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80181b8:	68fb      	ldr	r3, [r7, #12]
 80181ba:	681a      	ldr	r2, [r3, #0]
 80181bc:	68fb      	ldr	r3, [r7, #12]
 80181be:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80181c0:	68fb      	ldr	r3, [r7, #12]
 80181c2:	681a      	ldr	r2, [r3, #0]
 80181c4:	68fb      	ldr	r3, [r7, #12]
 80181c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80181c8:	3b01      	subs	r3, #1
 80181ca:	68f9      	ldr	r1, [r7, #12]
 80181cc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80181ce:	fb01 f303 	mul.w	r3, r1, r3
 80181d2:	441a      	add	r2, r3
 80181d4:	68fb      	ldr	r3, [r7, #12]
 80181d6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80181d8:	68fb      	ldr	r3, [r7, #12]
 80181da:	22ff      	movs	r2, #255	@ 0xff
 80181dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80181e0:	68fb      	ldr	r3, [r7, #12]
 80181e2:	22ff      	movs	r2, #255	@ 0xff
 80181e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80181e8:	683b      	ldr	r3, [r7, #0]
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	d114      	bne.n	8018218 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80181ee:	68fb      	ldr	r3, [r7, #12]
 80181f0:	691b      	ldr	r3, [r3, #16]
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	d01a      	beq.n	801822c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80181f6:	68fb      	ldr	r3, [r7, #12]
 80181f8:	3310      	adds	r3, #16
 80181fa:	4618      	mov	r0, r3
 80181fc:	f001 fc88 	bl	8019b10 <xTaskRemoveFromEventList>
 8018200:	4603      	mov	r3, r0
 8018202:	2b00      	cmp	r3, #0
 8018204:	d012      	beq.n	801822c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8018206:	4b0d      	ldr	r3, [pc, #52]	@ (801823c <xQueueGenericReset+0xd4>)
 8018208:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801820c:	601a      	str	r2, [r3, #0]
 801820e:	f3bf 8f4f 	dsb	sy
 8018212:	f3bf 8f6f 	isb	sy
 8018216:	e009      	b.n	801822c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8018218:	68fb      	ldr	r3, [r7, #12]
 801821a:	3310      	adds	r3, #16
 801821c:	4618      	mov	r0, r3
 801821e:	f7ff feef 	bl	8018000 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8018222:	68fb      	ldr	r3, [r7, #12]
 8018224:	3324      	adds	r3, #36	@ 0x24
 8018226:	4618      	mov	r0, r3
 8018228:	f7ff feea 	bl	8018000 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801822c:	f002 f9c4 	bl	801a5b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8018230:	2301      	movs	r3, #1
}
 8018232:	4618      	mov	r0, r3
 8018234:	3710      	adds	r7, #16
 8018236:	46bd      	mov	sp, r7
 8018238:	bd80      	pop	{r7, pc}
 801823a:	bf00      	nop
 801823c:	e000ed04 	.word	0xe000ed04

08018240 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8018240:	b580      	push	{r7, lr}
 8018242:	b08e      	sub	sp, #56	@ 0x38
 8018244:	af02      	add	r7, sp, #8
 8018246:	60f8      	str	r0, [r7, #12]
 8018248:	60b9      	str	r1, [r7, #8]
 801824a:	607a      	str	r2, [r7, #4]
 801824c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801824e:	68fb      	ldr	r3, [r7, #12]
 8018250:	2b00      	cmp	r3, #0
 8018252:	d10d      	bne.n	8018270 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8018254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018258:	b672      	cpsid	i
 801825a:	f383 8811 	msr	BASEPRI, r3
 801825e:	f3bf 8f6f 	isb	sy
 8018262:	f3bf 8f4f 	dsb	sy
 8018266:	b662      	cpsie	i
 8018268:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801826a:	bf00      	nop
 801826c:	bf00      	nop
 801826e:	e7fd      	b.n	801826c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8018270:	683b      	ldr	r3, [r7, #0]
 8018272:	2b00      	cmp	r3, #0
 8018274:	d10d      	bne.n	8018292 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8018276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801827a:	b672      	cpsid	i
 801827c:	f383 8811 	msr	BASEPRI, r3
 8018280:	f3bf 8f6f 	isb	sy
 8018284:	f3bf 8f4f 	dsb	sy
 8018288:	b662      	cpsie	i
 801828a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801828c:	bf00      	nop
 801828e:	bf00      	nop
 8018290:	e7fd      	b.n	801828e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	2b00      	cmp	r3, #0
 8018296:	d002      	beq.n	801829e <xQueueGenericCreateStatic+0x5e>
 8018298:	68bb      	ldr	r3, [r7, #8]
 801829a:	2b00      	cmp	r3, #0
 801829c:	d001      	beq.n	80182a2 <xQueueGenericCreateStatic+0x62>
 801829e:	2301      	movs	r3, #1
 80182a0:	e000      	b.n	80182a4 <xQueueGenericCreateStatic+0x64>
 80182a2:	2300      	movs	r3, #0
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	d10d      	bne.n	80182c4 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80182a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80182ac:	b672      	cpsid	i
 80182ae:	f383 8811 	msr	BASEPRI, r3
 80182b2:	f3bf 8f6f 	isb	sy
 80182b6:	f3bf 8f4f 	dsb	sy
 80182ba:	b662      	cpsie	i
 80182bc:	623b      	str	r3, [r7, #32]
}
 80182be:	bf00      	nop
 80182c0:	bf00      	nop
 80182c2:	e7fd      	b.n	80182c0 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d102      	bne.n	80182d0 <xQueueGenericCreateStatic+0x90>
 80182ca:	68bb      	ldr	r3, [r7, #8]
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	d101      	bne.n	80182d4 <xQueueGenericCreateStatic+0x94>
 80182d0:	2301      	movs	r3, #1
 80182d2:	e000      	b.n	80182d6 <xQueueGenericCreateStatic+0x96>
 80182d4:	2300      	movs	r3, #0
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	d10d      	bne.n	80182f6 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80182da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80182de:	b672      	cpsid	i
 80182e0:	f383 8811 	msr	BASEPRI, r3
 80182e4:	f3bf 8f6f 	isb	sy
 80182e8:	f3bf 8f4f 	dsb	sy
 80182ec:	b662      	cpsie	i
 80182ee:	61fb      	str	r3, [r7, #28]
}
 80182f0:	bf00      	nop
 80182f2:	bf00      	nop
 80182f4:	e7fd      	b.n	80182f2 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80182f6:	2348      	movs	r3, #72	@ 0x48
 80182f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80182fa:	697b      	ldr	r3, [r7, #20]
 80182fc:	2b48      	cmp	r3, #72	@ 0x48
 80182fe:	d00d      	beq.n	801831c <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8018300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018304:	b672      	cpsid	i
 8018306:	f383 8811 	msr	BASEPRI, r3
 801830a:	f3bf 8f6f 	isb	sy
 801830e:	f3bf 8f4f 	dsb	sy
 8018312:	b662      	cpsie	i
 8018314:	61bb      	str	r3, [r7, #24]
}
 8018316:	bf00      	nop
 8018318:	bf00      	nop
 801831a:	e7fd      	b.n	8018318 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801831c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801831e:	683b      	ldr	r3, [r7, #0]
 8018320:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8018322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018324:	2b00      	cmp	r3, #0
 8018326:	d00d      	beq.n	8018344 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8018328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801832a:	2201      	movs	r2, #1
 801832c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8018330:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8018334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018336:	9300      	str	r3, [sp, #0]
 8018338:	4613      	mov	r3, r2
 801833a:	687a      	ldr	r2, [r7, #4]
 801833c:	68b9      	ldr	r1, [r7, #8]
 801833e:	68f8      	ldr	r0, [r7, #12]
 8018340:	f000 f848 	bl	80183d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8018344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8018346:	4618      	mov	r0, r3
 8018348:	3730      	adds	r7, #48	@ 0x30
 801834a:	46bd      	mov	sp, r7
 801834c:	bd80      	pop	{r7, pc}

0801834e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801834e:	b580      	push	{r7, lr}
 8018350:	b08a      	sub	sp, #40	@ 0x28
 8018352:	af02      	add	r7, sp, #8
 8018354:	60f8      	str	r0, [r7, #12]
 8018356:	60b9      	str	r1, [r7, #8]
 8018358:	4613      	mov	r3, r2
 801835a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801835c:	68fb      	ldr	r3, [r7, #12]
 801835e:	2b00      	cmp	r3, #0
 8018360:	d10d      	bne.n	801837e <xQueueGenericCreate+0x30>
	__asm volatile
 8018362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018366:	b672      	cpsid	i
 8018368:	f383 8811 	msr	BASEPRI, r3
 801836c:	f3bf 8f6f 	isb	sy
 8018370:	f3bf 8f4f 	dsb	sy
 8018374:	b662      	cpsie	i
 8018376:	613b      	str	r3, [r7, #16]
}
 8018378:	bf00      	nop
 801837a:	bf00      	nop
 801837c:	e7fd      	b.n	801837a <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801837e:	68bb      	ldr	r3, [r7, #8]
 8018380:	2b00      	cmp	r3, #0
 8018382:	d102      	bne.n	801838a <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8018384:	2300      	movs	r3, #0
 8018386:	61fb      	str	r3, [r7, #28]
 8018388:	e004      	b.n	8018394 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801838a:	68fb      	ldr	r3, [r7, #12]
 801838c:	68ba      	ldr	r2, [r7, #8]
 801838e:	fb02 f303 	mul.w	r3, r2, r3
 8018392:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8018394:	69fb      	ldr	r3, [r7, #28]
 8018396:	3348      	adds	r3, #72	@ 0x48
 8018398:	4618      	mov	r0, r3
 801839a:	f002 fa05 	bl	801a7a8 <pvPortMalloc>
 801839e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80183a0:	69bb      	ldr	r3, [r7, #24]
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	d011      	beq.n	80183ca <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80183a6:	69bb      	ldr	r3, [r7, #24]
 80183a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80183aa:	697b      	ldr	r3, [r7, #20]
 80183ac:	3348      	adds	r3, #72	@ 0x48
 80183ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80183b0:	69bb      	ldr	r3, [r7, #24]
 80183b2:	2200      	movs	r2, #0
 80183b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80183b8:	79fa      	ldrb	r2, [r7, #7]
 80183ba:	69bb      	ldr	r3, [r7, #24]
 80183bc:	9300      	str	r3, [sp, #0]
 80183be:	4613      	mov	r3, r2
 80183c0:	697a      	ldr	r2, [r7, #20]
 80183c2:	68b9      	ldr	r1, [r7, #8]
 80183c4:	68f8      	ldr	r0, [r7, #12]
 80183c6:	f000 f805 	bl	80183d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80183ca:	69bb      	ldr	r3, [r7, #24]
	}
 80183cc:	4618      	mov	r0, r3
 80183ce:	3720      	adds	r7, #32
 80183d0:	46bd      	mov	sp, r7
 80183d2:	bd80      	pop	{r7, pc}

080183d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80183d4:	b580      	push	{r7, lr}
 80183d6:	b084      	sub	sp, #16
 80183d8:	af00      	add	r7, sp, #0
 80183da:	60f8      	str	r0, [r7, #12]
 80183dc:	60b9      	str	r1, [r7, #8]
 80183de:	607a      	str	r2, [r7, #4]
 80183e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80183e2:	68bb      	ldr	r3, [r7, #8]
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	d103      	bne.n	80183f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80183e8:	69bb      	ldr	r3, [r7, #24]
 80183ea:	69ba      	ldr	r2, [r7, #24]
 80183ec:	601a      	str	r2, [r3, #0]
 80183ee:	e002      	b.n	80183f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80183f0:	69bb      	ldr	r3, [r7, #24]
 80183f2:	687a      	ldr	r2, [r7, #4]
 80183f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80183f6:	69bb      	ldr	r3, [r7, #24]
 80183f8:	68fa      	ldr	r2, [r7, #12]
 80183fa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80183fc:	69bb      	ldr	r3, [r7, #24]
 80183fe:	68ba      	ldr	r2, [r7, #8]
 8018400:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8018402:	2101      	movs	r1, #1
 8018404:	69b8      	ldr	r0, [r7, #24]
 8018406:	f7ff feaf 	bl	8018168 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801840a:	bf00      	nop
 801840c:	3710      	adds	r7, #16
 801840e:	46bd      	mov	sp, r7
 8018410:	bd80      	pop	{r7, pc}

08018412 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8018412:	b580      	push	{r7, lr}
 8018414:	b08a      	sub	sp, #40	@ 0x28
 8018416:	af02      	add	r7, sp, #8
 8018418:	60f8      	str	r0, [r7, #12]
 801841a:	60b9      	str	r1, [r7, #8]
 801841c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801841e:	68fb      	ldr	r3, [r7, #12]
 8018420:	2b00      	cmp	r3, #0
 8018422:	d10d      	bne.n	8018440 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 8018424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018428:	b672      	cpsid	i
 801842a:	f383 8811 	msr	BASEPRI, r3
 801842e:	f3bf 8f6f 	isb	sy
 8018432:	f3bf 8f4f 	dsb	sy
 8018436:	b662      	cpsie	i
 8018438:	61bb      	str	r3, [r7, #24]
}
 801843a:	bf00      	nop
 801843c:	bf00      	nop
 801843e:	e7fd      	b.n	801843c <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8018440:	68ba      	ldr	r2, [r7, #8]
 8018442:	68fb      	ldr	r3, [r7, #12]
 8018444:	429a      	cmp	r2, r3
 8018446:	d90d      	bls.n	8018464 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 8018448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801844c:	b672      	cpsid	i
 801844e:	f383 8811 	msr	BASEPRI, r3
 8018452:	f3bf 8f6f 	isb	sy
 8018456:	f3bf 8f4f 	dsb	sy
 801845a:	b662      	cpsie	i
 801845c:	617b      	str	r3, [r7, #20]
}
 801845e:	bf00      	nop
 8018460:	bf00      	nop
 8018462:	e7fd      	b.n	8018460 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8018464:	2302      	movs	r3, #2
 8018466:	9300      	str	r3, [sp, #0]
 8018468:	687b      	ldr	r3, [r7, #4]
 801846a:	2200      	movs	r2, #0
 801846c:	2100      	movs	r1, #0
 801846e:	68f8      	ldr	r0, [r7, #12]
 8018470:	f7ff fee6 	bl	8018240 <xQueueGenericCreateStatic>
 8018474:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8018476:	69fb      	ldr	r3, [r7, #28]
 8018478:	2b00      	cmp	r3, #0
 801847a:	d002      	beq.n	8018482 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801847c:	69fb      	ldr	r3, [r7, #28]
 801847e:	68ba      	ldr	r2, [r7, #8]
 8018480:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8018482:	69fb      	ldr	r3, [r7, #28]
	}
 8018484:	4618      	mov	r0, r3
 8018486:	3720      	adds	r7, #32
 8018488:	46bd      	mov	sp, r7
 801848a:	bd80      	pop	{r7, pc}

0801848c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 801848c:	b580      	push	{r7, lr}
 801848e:	b086      	sub	sp, #24
 8018490:	af00      	add	r7, sp, #0
 8018492:	6078      	str	r0, [r7, #4]
 8018494:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	2b00      	cmp	r3, #0
 801849a:	d10d      	bne.n	80184b8 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 801849c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80184a0:	b672      	cpsid	i
 80184a2:	f383 8811 	msr	BASEPRI, r3
 80184a6:	f3bf 8f6f 	isb	sy
 80184aa:	f3bf 8f4f 	dsb	sy
 80184ae:	b662      	cpsie	i
 80184b0:	613b      	str	r3, [r7, #16]
}
 80184b2:	bf00      	nop
 80184b4:	bf00      	nop
 80184b6:	e7fd      	b.n	80184b4 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80184b8:	683a      	ldr	r2, [r7, #0]
 80184ba:	687b      	ldr	r3, [r7, #4]
 80184bc:	429a      	cmp	r2, r3
 80184be:	d90d      	bls.n	80184dc <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 80184c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80184c4:	b672      	cpsid	i
 80184c6:	f383 8811 	msr	BASEPRI, r3
 80184ca:	f3bf 8f6f 	isb	sy
 80184ce:	f3bf 8f4f 	dsb	sy
 80184d2:	b662      	cpsie	i
 80184d4:	60fb      	str	r3, [r7, #12]
}
 80184d6:	bf00      	nop
 80184d8:	bf00      	nop
 80184da:	e7fd      	b.n	80184d8 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80184dc:	2202      	movs	r2, #2
 80184de:	2100      	movs	r1, #0
 80184e0:	6878      	ldr	r0, [r7, #4]
 80184e2:	f7ff ff34 	bl	801834e <xQueueGenericCreate>
 80184e6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80184e8:	697b      	ldr	r3, [r7, #20]
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	d002      	beq.n	80184f4 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80184ee:	697b      	ldr	r3, [r7, #20]
 80184f0:	683a      	ldr	r2, [r7, #0]
 80184f2:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80184f4:	697b      	ldr	r3, [r7, #20]
	}
 80184f6:	4618      	mov	r0, r3
 80184f8:	3718      	adds	r7, #24
 80184fa:	46bd      	mov	sp, r7
 80184fc:	bd80      	pop	{r7, pc}
	...

08018500 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8018500:	b580      	push	{r7, lr}
 8018502:	b08e      	sub	sp, #56	@ 0x38
 8018504:	af00      	add	r7, sp, #0
 8018506:	60f8      	str	r0, [r7, #12]
 8018508:	60b9      	str	r1, [r7, #8]
 801850a:	607a      	str	r2, [r7, #4]
 801850c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801850e:	2300      	movs	r3, #0
 8018510:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8018512:	68fb      	ldr	r3, [r7, #12]
 8018514:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8018516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018518:	2b00      	cmp	r3, #0
 801851a:	d10d      	bne.n	8018538 <xQueueGenericSend+0x38>
	__asm volatile
 801851c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018520:	b672      	cpsid	i
 8018522:	f383 8811 	msr	BASEPRI, r3
 8018526:	f3bf 8f6f 	isb	sy
 801852a:	f3bf 8f4f 	dsb	sy
 801852e:	b662      	cpsie	i
 8018530:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8018532:	bf00      	nop
 8018534:	bf00      	nop
 8018536:	e7fd      	b.n	8018534 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018538:	68bb      	ldr	r3, [r7, #8]
 801853a:	2b00      	cmp	r3, #0
 801853c:	d103      	bne.n	8018546 <xQueueGenericSend+0x46>
 801853e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018542:	2b00      	cmp	r3, #0
 8018544:	d101      	bne.n	801854a <xQueueGenericSend+0x4a>
 8018546:	2301      	movs	r3, #1
 8018548:	e000      	b.n	801854c <xQueueGenericSend+0x4c>
 801854a:	2300      	movs	r3, #0
 801854c:	2b00      	cmp	r3, #0
 801854e:	d10d      	bne.n	801856c <xQueueGenericSend+0x6c>
	__asm volatile
 8018550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018554:	b672      	cpsid	i
 8018556:	f383 8811 	msr	BASEPRI, r3
 801855a:	f3bf 8f6f 	isb	sy
 801855e:	f3bf 8f4f 	dsb	sy
 8018562:	b662      	cpsie	i
 8018564:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8018566:	bf00      	nop
 8018568:	bf00      	nop
 801856a:	e7fd      	b.n	8018568 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801856c:	683b      	ldr	r3, [r7, #0]
 801856e:	2b02      	cmp	r3, #2
 8018570:	d103      	bne.n	801857a <xQueueGenericSend+0x7a>
 8018572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018576:	2b01      	cmp	r3, #1
 8018578:	d101      	bne.n	801857e <xQueueGenericSend+0x7e>
 801857a:	2301      	movs	r3, #1
 801857c:	e000      	b.n	8018580 <xQueueGenericSend+0x80>
 801857e:	2300      	movs	r3, #0
 8018580:	2b00      	cmp	r3, #0
 8018582:	d10d      	bne.n	80185a0 <xQueueGenericSend+0xa0>
	__asm volatile
 8018584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018588:	b672      	cpsid	i
 801858a:	f383 8811 	msr	BASEPRI, r3
 801858e:	f3bf 8f6f 	isb	sy
 8018592:	f3bf 8f4f 	dsb	sy
 8018596:	b662      	cpsie	i
 8018598:	623b      	str	r3, [r7, #32]
}
 801859a:	bf00      	nop
 801859c:	bf00      	nop
 801859e:	e7fd      	b.n	801859c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80185a0:	f001 fc80 	bl	8019ea4 <xTaskGetSchedulerState>
 80185a4:	4603      	mov	r3, r0
 80185a6:	2b00      	cmp	r3, #0
 80185a8:	d102      	bne.n	80185b0 <xQueueGenericSend+0xb0>
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	2b00      	cmp	r3, #0
 80185ae:	d101      	bne.n	80185b4 <xQueueGenericSend+0xb4>
 80185b0:	2301      	movs	r3, #1
 80185b2:	e000      	b.n	80185b6 <xQueueGenericSend+0xb6>
 80185b4:	2300      	movs	r3, #0
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d10d      	bne.n	80185d6 <xQueueGenericSend+0xd6>
	__asm volatile
 80185ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80185be:	b672      	cpsid	i
 80185c0:	f383 8811 	msr	BASEPRI, r3
 80185c4:	f3bf 8f6f 	isb	sy
 80185c8:	f3bf 8f4f 	dsb	sy
 80185cc:	b662      	cpsie	i
 80185ce:	61fb      	str	r3, [r7, #28]
}
 80185d0:	bf00      	nop
 80185d2:	bf00      	nop
 80185d4:	e7fd      	b.n	80185d2 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80185d6:	f001 ffb9 	bl	801a54c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80185da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80185dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80185de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80185e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80185e2:	429a      	cmp	r2, r3
 80185e4:	d302      	bcc.n	80185ec <xQueueGenericSend+0xec>
 80185e6:	683b      	ldr	r3, [r7, #0]
 80185e8:	2b02      	cmp	r3, #2
 80185ea:	d129      	bne.n	8018640 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80185ec:	683a      	ldr	r2, [r7, #0]
 80185ee:	68b9      	ldr	r1, [r7, #8]
 80185f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80185f2:	f000 fcd3 	bl	8018f9c <prvCopyDataToQueue>
 80185f6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80185f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80185fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	d010      	beq.n	8018622 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018602:	3324      	adds	r3, #36	@ 0x24
 8018604:	4618      	mov	r0, r3
 8018606:	f001 fa83 	bl	8019b10 <xTaskRemoveFromEventList>
 801860a:	4603      	mov	r3, r0
 801860c:	2b00      	cmp	r3, #0
 801860e:	d013      	beq.n	8018638 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8018610:	4b3f      	ldr	r3, [pc, #252]	@ (8018710 <xQueueGenericSend+0x210>)
 8018612:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018616:	601a      	str	r2, [r3, #0]
 8018618:	f3bf 8f4f 	dsb	sy
 801861c:	f3bf 8f6f 	isb	sy
 8018620:	e00a      	b.n	8018638 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8018622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018624:	2b00      	cmp	r3, #0
 8018626:	d007      	beq.n	8018638 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8018628:	4b39      	ldr	r3, [pc, #228]	@ (8018710 <xQueueGenericSend+0x210>)
 801862a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801862e:	601a      	str	r2, [r3, #0]
 8018630:	f3bf 8f4f 	dsb	sy
 8018634:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8018638:	f001 ffbe 	bl	801a5b8 <vPortExitCritical>
				return pdPASS;
 801863c:	2301      	movs	r3, #1
 801863e:	e063      	b.n	8018708 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	2b00      	cmp	r3, #0
 8018644:	d103      	bne.n	801864e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8018646:	f001 ffb7 	bl	801a5b8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801864a:	2300      	movs	r3, #0
 801864c:	e05c      	b.n	8018708 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 801864e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018650:	2b00      	cmp	r3, #0
 8018652:	d106      	bne.n	8018662 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018654:	f107 0314 	add.w	r3, r7, #20
 8018658:	4618      	mov	r0, r3
 801865a:	f001 fabf 	bl	8019bdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801865e:	2301      	movs	r3, #1
 8018660:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8018662:	f001 ffa9 	bl	801a5b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018666:	f001 f81b 	bl	80196a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801866a:	f001 ff6f 	bl	801a54c <vPortEnterCritical>
 801866e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018670:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8018674:	b25b      	sxtb	r3, r3
 8018676:	f1b3 3fff 	cmp.w	r3, #4294967295
 801867a:	d103      	bne.n	8018684 <xQueueGenericSend+0x184>
 801867c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801867e:	2200      	movs	r2, #0
 8018680:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8018684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018686:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801868a:	b25b      	sxtb	r3, r3
 801868c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018690:	d103      	bne.n	801869a <xQueueGenericSend+0x19a>
 8018692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018694:	2200      	movs	r2, #0
 8018696:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801869a:	f001 ff8d 	bl	801a5b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801869e:	1d3a      	adds	r2, r7, #4
 80186a0:	f107 0314 	add.w	r3, r7, #20
 80186a4:	4611      	mov	r1, r2
 80186a6:	4618      	mov	r0, r3
 80186a8:	f001 faae 	bl	8019c08 <xTaskCheckForTimeOut>
 80186ac:	4603      	mov	r3, r0
 80186ae:	2b00      	cmp	r3, #0
 80186b0:	d124      	bne.n	80186fc <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80186b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80186b4:	f000 fd6a 	bl	801918c <prvIsQueueFull>
 80186b8:	4603      	mov	r3, r0
 80186ba:	2b00      	cmp	r3, #0
 80186bc:	d018      	beq.n	80186f0 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80186be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80186c0:	3310      	adds	r3, #16
 80186c2:	687a      	ldr	r2, [r7, #4]
 80186c4:	4611      	mov	r1, r2
 80186c6:	4618      	mov	r0, r3
 80186c8:	f001 f9fa 	bl	8019ac0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80186cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80186ce:	f000 fcf5 	bl	80190bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80186d2:	f000 fff3 	bl	80196bc <xTaskResumeAll>
 80186d6:	4603      	mov	r3, r0
 80186d8:	2b00      	cmp	r3, #0
 80186da:	f47f af7c 	bne.w	80185d6 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80186de:	4b0c      	ldr	r3, [pc, #48]	@ (8018710 <xQueueGenericSend+0x210>)
 80186e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80186e4:	601a      	str	r2, [r3, #0]
 80186e6:	f3bf 8f4f 	dsb	sy
 80186ea:	f3bf 8f6f 	isb	sy
 80186ee:	e772      	b.n	80185d6 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80186f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80186f2:	f000 fce3 	bl	80190bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80186f6:	f000 ffe1 	bl	80196bc <xTaskResumeAll>
 80186fa:	e76c      	b.n	80185d6 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80186fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80186fe:	f000 fcdd 	bl	80190bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018702:	f000 ffdb 	bl	80196bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8018706:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8018708:	4618      	mov	r0, r3
 801870a:	3738      	adds	r7, #56	@ 0x38
 801870c:	46bd      	mov	sp, r7
 801870e:	bd80      	pop	{r7, pc}
 8018710:	e000ed04 	.word	0xe000ed04

08018714 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8018714:	b580      	push	{r7, lr}
 8018716:	b08e      	sub	sp, #56	@ 0x38
 8018718:	af00      	add	r7, sp, #0
 801871a:	60f8      	str	r0, [r7, #12]
 801871c:	60b9      	str	r1, [r7, #8]
 801871e:	607a      	str	r2, [r7, #4]
 8018720:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8018722:	68fb      	ldr	r3, [r7, #12]
 8018724:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8018726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018728:	2b00      	cmp	r3, #0
 801872a:	d10d      	bne.n	8018748 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 801872c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018730:	b672      	cpsid	i
 8018732:	f383 8811 	msr	BASEPRI, r3
 8018736:	f3bf 8f6f 	isb	sy
 801873a:	f3bf 8f4f 	dsb	sy
 801873e:	b662      	cpsie	i
 8018740:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8018742:	bf00      	nop
 8018744:	bf00      	nop
 8018746:	e7fd      	b.n	8018744 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018748:	68bb      	ldr	r3, [r7, #8]
 801874a:	2b00      	cmp	r3, #0
 801874c:	d103      	bne.n	8018756 <xQueueGenericSendFromISR+0x42>
 801874e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018752:	2b00      	cmp	r3, #0
 8018754:	d101      	bne.n	801875a <xQueueGenericSendFromISR+0x46>
 8018756:	2301      	movs	r3, #1
 8018758:	e000      	b.n	801875c <xQueueGenericSendFromISR+0x48>
 801875a:	2300      	movs	r3, #0
 801875c:	2b00      	cmp	r3, #0
 801875e:	d10d      	bne.n	801877c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8018760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018764:	b672      	cpsid	i
 8018766:	f383 8811 	msr	BASEPRI, r3
 801876a:	f3bf 8f6f 	isb	sy
 801876e:	f3bf 8f4f 	dsb	sy
 8018772:	b662      	cpsie	i
 8018774:	623b      	str	r3, [r7, #32]
}
 8018776:	bf00      	nop
 8018778:	bf00      	nop
 801877a:	e7fd      	b.n	8018778 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801877c:	683b      	ldr	r3, [r7, #0]
 801877e:	2b02      	cmp	r3, #2
 8018780:	d103      	bne.n	801878a <xQueueGenericSendFromISR+0x76>
 8018782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018786:	2b01      	cmp	r3, #1
 8018788:	d101      	bne.n	801878e <xQueueGenericSendFromISR+0x7a>
 801878a:	2301      	movs	r3, #1
 801878c:	e000      	b.n	8018790 <xQueueGenericSendFromISR+0x7c>
 801878e:	2300      	movs	r3, #0
 8018790:	2b00      	cmp	r3, #0
 8018792:	d10d      	bne.n	80187b0 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8018794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018798:	b672      	cpsid	i
 801879a:	f383 8811 	msr	BASEPRI, r3
 801879e:	f3bf 8f6f 	isb	sy
 80187a2:	f3bf 8f4f 	dsb	sy
 80187a6:	b662      	cpsie	i
 80187a8:	61fb      	str	r3, [r7, #28]
}
 80187aa:	bf00      	nop
 80187ac:	bf00      	nop
 80187ae:	e7fd      	b.n	80187ac <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80187b0:	f001 ffb4 	bl	801a71c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80187b4:	f3ef 8211 	mrs	r2, BASEPRI
 80187b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80187bc:	b672      	cpsid	i
 80187be:	f383 8811 	msr	BASEPRI, r3
 80187c2:	f3bf 8f6f 	isb	sy
 80187c6:	f3bf 8f4f 	dsb	sy
 80187ca:	b662      	cpsie	i
 80187cc:	61ba      	str	r2, [r7, #24]
 80187ce:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80187d0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80187d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80187d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80187d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80187d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80187da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80187dc:	429a      	cmp	r2, r3
 80187de:	d302      	bcc.n	80187e6 <xQueueGenericSendFromISR+0xd2>
 80187e0:	683b      	ldr	r3, [r7, #0]
 80187e2:	2b02      	cmp	r3, #2
 80187e4:	d12c      	bne.n	8018840 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80187e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80187e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80187ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80187f0:	683a      	ldr	r2, [r7, #0]
 80187f2:	68b9      	ldr	r1, [r7, #8]
 80187f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80187f6:	f000 fbd1 	bl	8018f9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80187fa:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80187fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018802:	d112      	bne.n	801882a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018808:	2b00      	cmp	r3, #0
 801880a:	d016      	beq.n	801883a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801880c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801880e:	3324      	adds	r3, #36	@ 0x24
 8018810:	4618      	mov	r0, r3
 8018812:	f001 f97d 	bl	8019b10 <xTaskRemoveFromEventList>
 8018816:	4603      	mov	r3, r0
 8018818:	2b00      	cmp	r3, #0
 801881a:	d00e      	beq.n	801883a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	2b00      	cmp	r3, #0
 8018820:	d00b      	beq.n	801883a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	2201      	movs	r2, #1
 8018826:	601a      	str	r2, [r3, #0]
 8018828:	e007      	b.n	801883a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801882a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801882e:	3301      	adds	r3, #1
 8018830:	b2db      	uxtb	r3, r3
 8018832:	b25a      	sxtb	r2, r3
 8018834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018836:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 801883a:	2301      	movs	r3, #1
 801883c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 801883e:	e001      	b.n	8018844 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8018840:	2300      	movs	r3, #0
 8018842:	637b      	str	r3, [r7, #52]	@ 0x34
 8018844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018846:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8018848:	693b      	ldr	r3, [r7, #16]
 801884a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801884e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8018850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8018852:	4618      	mov	r0, r3
 8018854:	3738      	adds	r7, #56	@ 0x38
 8018856:	46bd      	mov	sp, r7
 8018858:	bd80      	pop	{r7, pc}

0801885a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801885a:	b580      	push	{r7, lr}
 801885c:	b08e      	sub	sp, #56	@ 0x38
 801885e:	af00      	add	r7, sp, #0
 8018860:	6078      	str	r0, [r7, #4]
 8018862:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8018868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801886a:	2b00      	cmp	r3, #0
 801886c:	d10d      	bne.n	801888a <xQueueGiveFromISR+0x30>
	__asm volatile
 801886e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018872:	b672      	cpsid	i
 8018874:	f383 8811 	msr	BASEPRI, r3
 8018878:	f3bf 8f6f 	isb	sy
 801887c:	f3bf 8f4f 	dsb	sy
 8018880:	b662      	cpsie	i
 8018882:	623b      	str	r3, [r7, #32]
}
 8018884:	bf00      	nop
 8018886:	bf00      	nop
 8018888:	e7fd      	b.n	8018886 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801888a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801888c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801888e:	2b00      	cmp	r3, #0
 8018890:	d00d      	beq.n	80188ae <xQueueGiveFromISR+0x54>
	__asm volatile
 8018892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018896:	b672      	cpsid	i
 8018898:	f383 8811 	msr	BASEPRI, r3
 801889c:	f3bf 8f6f 	isb	sy
 80188a0:	f3bf 8f4f 	dsb	sy
 80188a4:	b662      	cpsie	i
 80188a6:	61fb      	str	r3, [r7, #28]
}
 80188a8:	bf00      	nop
 80188aa:	bf00      	nop
 80188ac:	e7fd      	b.n	80188aa <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80188ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80188b0:	681b      	ldr	r3, [r3, #0]
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	d103      	bne.n	80188be <xQueueGiveFromISR+0x64>
 80188b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80188b8:	689b      	ldr	r3, [r3, #8]
 80188ba:	2b00      	cmp	r3, #0
 80188bc:	d101      	bne.n	80188c2 <xQueueGiveFromISR+0x68>
 80188be:	2301      	movs	r3, #1
 80188c0:	e000      	b.n	80188c4 <xQueueGiveFromISR+0x6a>
 80188c2:	2300      	movs	r3, #0
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	d10d      	bne.n	80188e4 <xQueueGiveFromISR+0x8a>
	__asm volatile
 80188c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80188cc:	b672      	cpsid	i
 80188ce:	f383 8811 	msr	BASEPRI, r3
 80188d2:	f3bf 8f6f 	isb	sy
 80188d6:	f3bf 8f4f 	dsb	sy
 80188da:	b662      	cpsie	i
 80188dc:	61bb      	str	r3, [r7, #24]
}
 80188de:	bf00      	nop
 80188e0:	bf00      	nop
 80188e2:	e7fd      	b.n	80188e0 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80188e4:	f001 ff1a 	bl	801a71c <vPortValidateInterruptPriority>
	__asm volatile
 80188e8:	f3ef 8211 	mrs	r2, BASEPRI
 80188ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80188f0:	b672      	cpsid	i
 80188f2:	f383 8811 	msr	BASEPRI, r3
 80188f6:	f3bf 8f6f 	isb	sy
 80188fa:	f3bf 8f4f 	dsb	sy
 80188fe:	b662      	cpsie	i
 8018900:	617a      	str	r2, [r7, #20]
 8018902:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8018904:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018906:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801890a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801890c:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801890e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018912:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018914:	429a      	cmp	r2, r3
 8018916:	d22b      	bcs.n	8018970 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8018918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801891a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801891e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8018922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018924:	1c5a      	adds	r2, r3, #1
 8018926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018928:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801892a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801892e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018932:	d112      	bne.n	801895a <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018938:	2b00      	cmp	r3, #0
 801893a:	d016      	beq.n	801896a <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801893c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801893e:	3324      	adds	r3, #36	@ 0x24
 8018940:	4618      	mov	r0, r3
 8018942:	f001 f8e5 	bl	8019b10 <xTaskRemoveFromEventList>
 8018946:	4603      	mov	r3, r0
 8018948:	2b00      	cmp	r3, #0
 801894a:	d00e      	beq.n	801896a <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801894c:	683b      	ldr	r3, [r7, #0]
 801894e:	2b00      	cmp	r3, #0
 8018950:	d00b      	beq.n	801896a <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8018952:	683b      	ldr	r3, [r7, #0]
 8018954:	2201      	movs	r2, #1
 8018956:	601a      	str	r2, [r3, #0]
 8018958:	e007      	b.n	801896a <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801895a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801895e:	3301      	adds	r3, #1
 8018960:	b2db      	uxtb	r3, r3
 8018962:	b25a      	sxtb	r2, r3
 8018964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018966:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 801896a:	2301      	movs	r3, #1
 801896c:	637b      	str	r3, [r7, #52]	@ 0x34
 801896e:	e001      	b.n	8018974 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8018970:	2300      	movs	r3, #0
 8018972:	637b      	str	r3, [r7, #52]	@ 0x34
 8018974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018976:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8018978:	68fb      	ldr	r3, [r7, #12]
 801897a:	f383 8811 	msr	BASEPRI, r3
}
 801897e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8018980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8018982:	4618      	mov	r0, r3
 8018984:	3738      	adds	r7, #56	@ 0x38
 8018986:	46bd      	mov	sp, r7
 8018988:	bd80      	pop	{r7, pc}
	...

0801898c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801898c:	b580      	push	{r7, lr}
 801898e:	b08c      	sub	sp, #48	@ 0x30
 8018990:	af00      	add	r7, sp, #0
 8018992:	60f8      	str	r0, [r7, #12]
 8018994:	60b9      	str	r1, [r7, #8]
 8018996:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8018998:	2300      	movs	r3, #0
 801899a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801899c:	68fb      	ldr	r3, [r7, #12]
 801899e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80189a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	d10d      	bne.n	80189c2 <xQueueReceive+0x36>
	__asm volatile
 80189a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80189aa:	b672      	cpsid	i
 80189ac:	f383 8811 	msr	BASEPRI, r3
 80189b0:	f3bf 8f6f 	isb	sy
 80189b4:	f3bf 8f4f 	dsb	sy
 80189b8:	b662      	cpsie	i
 80189ba:	623b      	str	r3, [r7, #32]
}
 80189bc:	bf00      	nop
 80189be:	bf00      	nop
 80189c0:	e7fd      	b.n	80189be <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80189c2:	68bb      	ldr	r3, [r7, #8]
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	d103      	bne.n	80189d0 <xQueueReceive+0x44>
 80189c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80189ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d101      	bne.n	80189d4 <xQueueReceive+0x48>
 80189d0:	2301      	movs	r3, #1
 80189d2:	e000      	b.n	80189d6 <xQueueReceive+0x4a>
 80189d4:	2300      	movs	r3, #0
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	d10d      	bne.n	80189f6 <xQueueReceive+0x6a>
	__asm volatile
 80189da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80189de:	b672      	cpsid	i
 80189e0:	f383 8811 	msr	BASEPRI, r3
 80189e4:	f3bf 8f6f 	isb	sy
 80189e8:	f3bf 8f4f 	dsb	sy
 80189ec:	b662      	cpsie	i
 80189ee:	61fb      	str	r3, [r7, #28]
}
 80189f0:	bf00      	nop
 80189f2:	bf00      	nop
 80189f4:	e7fd      	b.n	80189f2 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80189f6:	f001 fa55 	bl	8019ea4 <xTaskGetSchedulerState>
 80189fa:	4603      	mov	r3, r0
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	d102      	bne.n	8018a06 <xQueueReceive+0x7a>
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	2b00      	cmp	r3, #0
 8018a04:	d101      	bne.n	8018a0a <xQueueReceive+0x7e>
 8018a06:	2301      	movs	r3, #1
 8018a08:	e000      	b.n	8018a0c <xQueueReceive+0x80>
 8018a0a:	2300      	movs	r3, #0
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	d10d      	bne.n	8018a2c <xQueueReceive+0xa0>
	__asm volatile
 8018a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018a14:	b672      	cpsid	i
 8018a16:	f383 8811 	msr	BASEPRI, r3
 8018a1a:	f3bf 8f6f 	isb	sy
 8018a1e:	f3bf 8f4f 	dsb	sy
 8018a22:	b662      	cpsie	i
 8018a24:	61bb      	str	r3, [r7, #24]
}
 8018a26:	bf00      	nop
 8018a28:	bf00      	nop
 8018a2a:	e7fd      	b.n	8018a28 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018a2c:	f001 fd8e 	bl	801a54c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018a34:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	d01f      	beq.n	8018a7c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8018a3c:	68b9      	ldr	r1, [r7, #8]
 8018a3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018a40:	f000 fb16 	bl	8019070 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8018a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a46:	1e5a      	subs	r2, r3, #1
 8018a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a4a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a4e:	691b      	ldr	r3, [r3, #16]
 8018a50:	2b00      	cmp	r3, #0
 8018a52:	d00f      	beq.n	8018a74 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a56:	3310      	adds	r3, #16
 8018a58:	4618      	mov	r0, r3
 8018a5a:	f001 f859 	bl	8019b10 <xTaskRemoveFromEventList>
 8018a5e:	4603      	mov	r3, r0
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	d007      	beq.n	8018a74 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8018a64:	4b3c      	ldr	r3, [pc, #240]	@ (8018b58 <xQueueReceive+0x1cc>)
 8018a66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018a6a:	601a      	str	r2, [r3, #0]
 8018a6c:	f3bf 8f4f 	dsb	sy
 8018a70:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8018a74:	f001 fda0 	bl	801a5b8 <vPortExitCritical>
				return pdPASS;
 8018a78:	2301      	movs	r3, #1
 8018a7a:	e069      	b.n	8018b50 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	2b00      	cmp	r3, #0
 8018a80:	d103      	bne.n	8018a8a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8018a82:	f001 fd99 	bl	801a5b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8018a86:	2300      	movs	r3, #0
 8018a88:	e062      	b.n	8018b50 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	d106      	bne.n	8018a9e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018a90:	f107 0310 	add.w	r3, r7, #16
 8018a94:	4618      	mov	r0, r3
 8018a96:	f001 f8a1 	bl	8019bdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018a9a:	2301      	movs	r3, #1
 8018a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8018a9e:	f001 fd8b 	bl	801a5b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018aa2:	f000 fdfd 	bl	80196a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018aa6:	f001 fd51 	bl	801a54c <vPortEnterCritical>
 8018aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018aac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8018ab0:	b25b      	sxtb	r3, r3
 8018ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018ab6:	d103      	bne.n	8018ac0 <xQueueReceive+0x134>
 8018ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018aba:	2200      	movs	r2, #0
 8018abc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8018ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018ac2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8018ac6:	b25b      	sxtb	r3, r3
 8018ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018acc:	d103      	bne.n	8018ad6 <xQueueReceive+0x14a>
 8018ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018ad0:	2200      	movs	r2, #0
 8018ad2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8018ad6:	f001 fd6f 	bl	801a5b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018ada:	1d3a      	adds	r2, r7, #4
 8018adc:	f107 0310 	add.w	r3, r7, #16
 8018ae0:	4611      	mov	r1, r2
 8018ae2:	4618      	mov	r0, r3
 8018ae4:	f001 f890 	bl	8019c08 <xTaskCheckForTimeOut>
 8018ae8:	4603      	mov	r3, r0
 8018aea:	2b00      	cmp	r3, #0
 8018aec:	d123      	bne.n	8018b36 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018aee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018af0:	f000 fb36 	bl	8019160 <prvIsQueueEmpty>
 8018af4:	4603      	mov	r3, r0
 8018af6:	2b00      	cmp	r3, #0
 8018af8:	d017      	beq.n	8018b2a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8018afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018afc:	3324      	adds	r3, #36	@ 0x24
 8018afe:	687a      	ldr	r2, [r7, #4]
 8018b00:	4611      	mov	r1, r2
 8018b02:	4618      	mov	r0, r3
 8018b04:	f000 ffdc 	bl	8019ac0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018b08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018b0a:	f000 fad7 	bl	80190bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018b0e:	f000 fdd5 	bl	80196bc <xTaskResumeAll>
 8018b12:	4603      	mov	r3, r0
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	d189      	bne.n	8018a2c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8018b18:	4b0f      	ldr	r3, [pc, #60]	@ (8018b58 <xQueueReceive+0x1cc>)
 8018b1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018b1e:	601a      	str	r2, [r3, #0]
 8018b20:	f3bf 8f4f 	dsb	sy
 8018b24:	f3bf 8f6f 	isb	sy
 8018b28:	e780      	b.n	8018a2c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8018b2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018b2c:	f000 fac6 	bl	80190bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018b30:	f000 fdc4 	bl	80196bc <xTaskResumeAll>
 8018b34:	e77a      	b.n	8018a2c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8018b36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018b38:	f000 fac0 	bl	80190bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018b3c:	f000 fdbe 	bl	80196bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018b40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018b42:	f000 fb0d 	bl	8019160 <prvIsQueueEmpty>
 8018b46:	4603      	mov	r3, r0
 8018b48:	2b00      	cmp	r3, #0
 8018b4a:	f43f af6f 	beq.w	8018a2c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8018b4e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8018b50:	4618      	mov	r0, r3
 8018b52:	3730      	adds	r7, #48	@ 0x30
 8018b54:	46bd      	mov	sp, r7
 8018b56:	bd80      	pop	{r7, pc}
 8018b58:	e000ed04 	.word	0xe000ed04

08018b5c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8018b5c:	b580      	push	{r7, lr}
 8018b5e:	b08e      	sub	sp, #56	@ 0x38
 8018b60:	af00      	add	r7, sp, #0
 8018b62:	6078      	str	r0, [r7, #4]
 8018b64:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8018b66:	2300      	movs	r3, #0
 8018b68:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8018b6e:	2300      	movs	r3, #0
 8018b70:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8018b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018b74:	2b00      	cmp	r3, #0
 8018b76:	d10d      	bne.n	8018b94 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8018b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b7c:	b672      	cpsid	i
 8018b7e:	f383 8811 	msr	BASEPRI, r3
 8018b82:	f3bf 8f6f 	isb	sy
 8018b86:	f3bf 8f4f 	dsb	sy
 8018b8a:	b662      	cpsie	i
 8018b8c:	623b      	str	r3, [r7, #32]
}
 8018b8e:	bf00      	nop
 8018b90:	bf00      	nop
 8018b92:	e7fd      	b.n	8018b90 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8018b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	d00d      	beq.n	8018bb8 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8018b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018ba0:	b672      	cpsid	i
 8018ba2:	f383 8811 	msr	BASEPRI, r3
 8018ba6:	f3bf 8f6f 	isb	sy
 8018baa:	f3bf 8f4f 	dsb	sy
 8018bae:	b662      	cpsie	i
 8018bb0:	61fb      	str	r3, [r7, #28]
}
 8018bb2:	bf00      	nop
 8018bb4:	bf00      	nop
 8018bb6:	e7fd      	b.n	8018bb4 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018bb8:	f001 f974 	bl	8019ea4 <xTaskGetSchedulerState>
 8018bbc:	4603      	mov	r3, r0
 8018bbe:	2b00      	cmp	r3, #0
 8018bc0:	d102      	bne.n	8018bc8 <xQueueSemaphoreTake+0x6c>
 8018bc2:	683b      	ldr	r3, [r7, #0]
 8018bc4:	2b00      	cmp	r3, #0
 8018bc6:	d101      	bne.n	8018bcc <xQueueSemaphoreTake+0x70>
 8018bc8:	2301      	movs	r3, #1
 8018bca:	e000      	b.n	8018bce <xQueueSemaphoreTake+0x72>
 8018bcc:	2300      	movs	r3, #0
 8018bce:	2b00      	cmp	r3, #0
 8018bd0:	d10d      	bne.n	8018bee <xQueueSemaphoreTake+0x92>
	__asm volatile
 8018bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018bd6:	b672      	cpsid	i
 8018bd8:	f383 8811 	msr	BASEPRI, r3
 8018bdc:	f3bf 8f6f 	isb	sy
 8018be0:	f3bf 8f4f 	dsb	sy
 8018be4:	b662      	cpsie	i
 8018be6:	61bb      	str	r3, [r7, #24]
}
 8018be8:	bf00      	nop
 8018bea:	bf00      	nop
 8018bec:	e7fd      	b.n	8018bea <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018bee:	f001 fcad 	bl	801a54c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8018bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018bf6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8018bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bfa:	2b00      	cmp	r3, #0
 8018bfc:	d024      	beq.n	8018c48 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8018bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c00:	1e5a      	subs	r2, r3, #1
 8018c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018c04:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018c08:	681b      	ldr	r3, [r3, #0]
 8018c0a:	2b00      	cmp	r3, #0
 8018c0c:	d104      	bne.n	8018c18 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8018c0e:	f001 fb13 	bl	801a238 <pvTaskIncrementMutexHeldCount>
 8018c12:	4602      	mov	r2, r0
 8018c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018c16:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018c1a:	691b      	ldr	r3, [r3, #16]
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	d00f      	beq.n	8018c40 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018c22:	3310      	adds	r3, #16
 8018c24:	4618      	mov	r0, r3
 8018c26:	f000 ff73 	bl	8019b10 <xTaskRemoveFromEventList>
 8018c2a:	4603      	mov	r3, r0
 8018c2c:	2b00      	cmp	r3, #0
 8018c2e:	d007      	beq.n	8018c40 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8018c30:	4b55      	ldr	r3, [pc, #340]	@ (8018d88 <xQueueSemaphoreTake+0x22c>)
 8018c32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018c36:	601a      	str	r2, [r3, #0]
 8018c38:	f3bf 8f4f 	dsb	sy
 8018c3c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8018c40:	f001 fcba 	bl	801a5b8 <vPortExitCritical>
				return pdPASS;
 8018c44:	2301      	movs	r3, #1
 8018c46:	e09a      	b.n	8018d7e <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8018c48:	683b      	ldr	r3, [r7, #0]
 8018c4a:	2b00      	cmp	r3, #0
 8018c4c:	d114      	bne.n	8018c78 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8018c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	d00d      	beq.n	8018c70 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8018c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018c58:	b672      	cpsid	i
 8018c5a:	f383 8811 	msr	BASEPRI, r3
 8018c5e:	f3bf 8f6f 	isb	sy
 8018c62:	f3bf 8f4f 	dsb	sy
 8018c66:	b662      	cpsie	i
 8018c68:	617b      	str	r3, [r7, #20]
}
 8018c6a:	bf00      	nop
 8018c6c:	bf00      	nop
 8018c6e:	e7fd      	b.n	8018c6c <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8018c70:	f001 fca2 	bl	801a5b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8018c74:	2300      	movs	r3, #0
 8018c76:	e082      	b.n	8018d7e <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018c7a:	2b00      	cmp	r3, #0
 8018c7c:	d106      	bne.n	8018c8c <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018c7e:	f107 030c 	add.w	r3, r7, #12
 8018c82:	4618      	mov	r0, r3
 8018c84:	f000 ffaa 	bl	8019bdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018c88:	2301      	movs	r3, #1
 8018c8a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8018c8c:	f001 fc94 	bl	801a5b8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018c90:	f000 fd06 	bl	80196a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018c94:	f001 fc5a 	bl	801a54c <vPortEnterCritical>
 8018c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018c9a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8018c9e:	b25b      	sxtb	r3, r3
 8018ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018ca4:	d103      	bne.n	8018cae <xQueueSemaphoreTake+0x152>
 8018ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018ca8:	2200      	movs	r2, #0
 8018caa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8018cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018cb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8018cb4:	b25b      	sxtb	r3, r3
 8018cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018cba:	d103      	bne.n	8018cc4 <xQueueSemaphoreTake+0x168>
 8018cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018cbe:	2200      	movs	r2, #0
 8018cc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8018cc4:	f001 fc78 	bl	801a5b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018cc8:	463a      	mov	r2, r7
 8018cca:	f107 030c 	add.w	r3, r7, #12
 8018cce:	4611      	mov	r1, r2
 8018cd0:	4618      	mov	r0, r3
 8018cd2:	f000 ff99 	bl	8019c08 <xTaskCheckForTimeOut>
 8018cd6:	4603      	mov	r3, r0
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	d132      	bne.n	8018d42 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018cdc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8018cde:	f000 fa3f 	bl	8019160 <prvIsQueueEmpty>
 8018ce2:	4603      	mov	r3, r0
 8018ce4:	2b00      	cmp	r3, #0
 8018ce6:	d026      	beq.n	8018d36 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018cea:	681b      	ldr	r3, [r3, #0]
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	d109      	bne.n	8018d04 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8018cf0:	f001 fc2c 	bl	801a54c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8018cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018cf6:	689b      	ldr	r3, [r3, #8]
 8018cf8:	4618      	mov	r0, r3
 8018cfa:	f001 f8f1 	bl	8019ee0 <xTaskPriorityInherit>
 8018cfe:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8018d00:	f001 fc5a 	bl	801a5b8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8018d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d06:	3324      	adds	r3, #36	@ 0x24
 8018d08:	683a      	ldr	r2, [r7, #0]
 8018d0a:	4611      	mov	r1, r2
 8018d0c:	4618      	mov	r0, r3
 8018d0e:	f000 fed7 	bl	8019ac0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018d12:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8018d14:	f000 f9d2 	bl	80190bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018d18:	f000 fcd0 	bl	80196bc <xTaskResumeAll>
 8018d1c:	4603      	mov	r3, r0
 8018d1e:	2b00      	cmp	r3, #0
 8018d20:	f47f af65 	bne.w	8018bee <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8018d24:	4b18      	ldr	r3, [pc, #96]	@ (8018d88 <xQueueSemaphoreTake+0x22c>)
 8018d26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018d2a:	601a      	str	r2, [r3, #0]
 8018d2c:	f3bf 8f4f 	dsb	sy
 8018d30:	f3bf 8f6f 	isb	sy
 8018d34:	e75b      	b.n	8018bee <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8018d36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8018d38:	f000 f9c0 	bl	80190bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018d3c:	f000 fcbe 	bl	80196bc <xTaskResumeAll>
 8018d40:	e755      	b.n	8018bee <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8018d42:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8018d44:	f000 f9ba 	bl	80190bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018d48:	f000 fcb8 	bl	80196bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018d4c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8018d4e:	f000 fa07 	bl	8019160 <prvIsQueueEmpty>
 8018d52:	4603      	mov	r3, r0
 8018d54:	2b00      	cmp	r3, #0
 8018d56:	f43f af4a 	beq.w	8018bee <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8018d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	d00d      	beq.n	8018d7c <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8018d60:	f001 fbf4 	bl	801a54c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8018d64:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8018d66:	f000 f901 	bl	8018f6c <prvGetDisinheritPriorityAfterTimeout>
 8018d6a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8018d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d6e:	689b      	ldr	r3, [r3, #8]
 8018d70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018d72:	4618      	mov	r0, r3
 8018d74:	f001 f9c0 	bl	801a0f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8018d78:	f001 fc1e 	bl	801a5b8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8018d7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8018d7e:	4618      	mov	r0, r3
 8018d80:	3738      	adds	r7, #56	@ 0x38
 8018d82:	46bd      	mov	sp, r7
 8018d84:	bd80      	pop	{r7, pc}
 8018d86:	bf00      	nop
 8018d88:	e000ed04 	.word	0xe000ed04

08018d8c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8018d8c:	b580      	push	{r7, lr}
 8018d8e:	b08e      	sub	sp, #56	@ 0x38
 8018d90:	af00      	add	r7, sp, #0
 8018d92:	60f8      	str	r0, [r7, #12]
 8018d94:	60b9      	str	r1, [r7, #8]
 8018d96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8018d98:	68fb      	ldr	r3, [r7, #12]
 8018d9a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8018d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d9e:	2b00      	cmp	r3, #0
 8018da0:	d10d      	bne.n	8018dbe <xQueueReceiveFromISR+0x32>
	__asm volatile
 8018da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018da6:	b672      	cpsid	i
 8018da8:	f383 8811 	msr	BASEPRI, r3
 8018dac:	f3bf 8f6f 	isb	sy
 8018db0:	f3bf 8f4f 	dsb	sy
 8018db4:	b662      	cpsie	i
 8018db6:	623b      	str	r3, [r7, #32]
}
 8018db8:	bf00      	nop
 8018dba:	bf00      	nop
 8018dbc:	e7fd      	b.n	8018dba <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018dbe:	68bb      	ldr	r3, [r7, #8]
 8018dc0:	2b00      	cmp	r3, #0
 8018dc2:	d103      	bne.n	8018dcc <xQueueReceiveFromISR+0x40>
 8018dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018dc8:	2b00      	cmp	r3, #0
 8018dca:	d101      	bne.n	8018dd0 <xQueueReceiveFromISR+0x44>
 8018dcc:	2301      	movs	r3, #1
 8018dce:	e000      	b.n	8018dd2 <xQueueReceiveFromISR+0x46>
 8018dd0:	2300      	movs	r3, #0
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	d10d      	bne.n	8018df2 <xQueueReceiveFromISR+0x66>
	__asm volatile
 8018dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018dda:	b672      	cpsid	i
 8018ddc:	f383 8811 	msr	BASEPRI, r3
 8018de0:	f3bf 8f6f 	isb	sy
 8018de4:	f3bf 8f4f 	dsb	sy
 8018de8:	b662      	cpsie	i
 8018dea:	61fb      	str	r3, [r7, #28]
}
 8018dec:	bf00      	nop
 8018dee:	bf00      	nop
 8018df0:	e7fd      	b.n	8018dee <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018df2:	f001 fc93 	bl	801a71c <vPortValidateInterruptPriority>
	__asm volatile
 8018df6:	f3ef 8211 	mrs	r2, BASEPRI
 8018dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018dfe:	b672      	cpsid	i
 8018e00:	f383 8811 	msr	BASEPRI, r3
 8018e04:	f3bf 8f6f 	isb	sy
 8018e08:	f3bf 8f4f 	dsb	sy
 8018e0c:	b662      	cpsie	i
 8018e0e:	61ba      	str	r2, [r7, #24]
 8018e10:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8018e12:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018e1a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d02f      	beq.n	8018e82 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8018e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8018e28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8018e2c:	68b9      	ldr	r1, [r7, #8]
 8018e2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018e30:	f000 f91e 	bl	8019070 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8018e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e36:	1e5a      	subs	r2, r3, #1
 8018e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e3a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8018e3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8018e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018e44:	d112      	bne.n	8018e6c <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e48:	691b      	ldr	r3, [r3, #16]
 8018e4a:	2b00      	cmp	r3, #0
 8018e4c:	d016      	beq.n	8018e7c <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e50:	3310      	adds	r3, #16
 8018e52:	4618      	mov	r0, r3
 8018e54:	f000 fe5c 	bl	8019b10 <xTaskRemoveFromEventList>
 8018e58:	4603      	mov	r3, r0
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	d00e      	beq.n	8018e7c <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8018e5e:	687b      	ldr	r3, [r7, #4]
 8018e60:	2b00      	cmp	r3, #0
 8018e62:	d00b      	beq.n	8018e7c <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	2201      	movs	r2, #1
 8018e68:	601a      	str	r2, [r3, #0]
 8018e6a:	e007      	b.n	8018e7c <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8018e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018e70:	3301      	adds	r3, #1
 8018e72:	b2db      	uxtb	r3, r3
 8018e74:	b25a      	sxtb	r2, r3
 8018e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8018e7c:	2301      	movs	r3, #1
 8018e7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8018e80:	e001      	b.n	8018e86 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8018e82:	2300      	movs	r3, #0
 8018e84:	637b      	str	r3, [r7, #52]	@ 0x34
 8018e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e88:	613b      	str	r3, [r7, #16]
	__asm volatile
 8018e8a:	693b      	ldr	r3, [r7, #16]
 8018e8c:	f383 8811 	msr	BASEPRI, r3
}
 8018e90:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8018e92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8018e94:	4618      	mov	r0, r3
 8018e96:	3738      	adds	r7, #56	@ 0x38
 8018e98:	46bd      	mov	sp, r7
 8018e9a:	bd80      	pop	{r7, pc}

08018e9c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8018e9c:	b580      	push	{r7, lr}
 8018e9e:	b084      	sub	sp, #16
 8018ea0:	af00      	add	r7, sp, #0
 8018ea2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	d10d      	bne.n	8018ec6 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8018eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018eae:	b672      	cpsid	i
 8018eb0:	f383 8811 	msr	BASEPRI, r3
 8018eb4:	f3bf 8f6f 	isb	sy
 8018eb8:	f3bf 8f4f 	dsb	sy
 8018ebc:	b662      	cpsie	i
 8018ebe:	60bb      	str	r3, [r7, #8]
}
 8018ec0:	bf00      	nop
 8018ec2:	bf00      	nop
 8018ec4:	e7fd      	b.n	8018ec2 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8018ec6:	f001 fb41 	bl	801a54c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018ece:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8018ed0:	f001 fb72 	bl	801a5b8 <vPortExitCritical>

	return uxReturn;
 8018ed4:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8018ed6:	4618      	mov	r0, r3
 8018ed8:	3710      	adds	r7, #16
 8018eda:	46bd      	mov	sp, r7
 8018edc:	bd80      	pop	{r7, pc}

08018ede <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8018ede:	b480      	push	{r7}
 8018ee0:	b087      	sub	sp, #28
 8018ee2:	af00      	add	r7, sp, #0
 8018ee4:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8018eea:	697b      	ldr	r3, [r7, #20]
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	d10d      	bne.n	8018f0c <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 8018ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018ef4:	b672      	cpsid	i
 8018ef6:	f383 8811 	msr	BASEPRI, r3
 8018efa:	f3bf 8f6f 	isb	sy
 8018efe:	f3bf 8f4f 	dsb	sy
 8018f02:	b662      	cpsie	i
 8018f04:	60fb      	str	r3, [r7, #12]
}
 8018f06:	bf00      	nop
 8018f08:	bf00      	nop
 8018f0a:	e7fd      	b.n	8018f08 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8018f0c:	697b      	ldr	r3, [r7, #20]
 8018f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018f10:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8018f12:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8018f14:	4618      	mov	r0, r3
 8018f16:	371c      	adds	r7, #28
 8018f18:	46bd      	mov	sp, r7
 8018f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f1e:	4770      	bx	lr

08018f20 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8018f20:	b580      	push	{r7, lr}
 8018f22:	b084      	sub	sp, #16
 8018f24:	af00      	add	r7, sp, #0
 8018f26:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8018f2c:	68fb      	ldr	r3, [r7, #12]
 8018f2e:	2b00      	cmp	r3, #0
 8018f30:	d10d      	bne.n	8018f4e <vQueueDelete+0x2e>
	__asm volatile
 8018f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f36:	b672      	cpsid	i
 8018f38:	f383 8811 	msr	BASEPRI, r3
 8018f3c:	f3bf 8f6f 	isb	sy
 8018f40:	f3bf 8f4f 	dsb	sy
 8018f44:	b662      	cpsie	i
 8018f46:	60bb      	str	r3, [r7, #8]
}
 8018f48:	bf00      	nop
 8018f4a:	bf00      	nop
 8018f4c:	e7fd      	b.n	8018f4a <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8018f4e:	68f8      	ldr	r0, [r7, #12]
 8018f50:	f000 f934 	bl	80191bc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8018f54:	68fb      	ldr	r3, [r7, #12]
 8018f56:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8018f5a:	2b00      	cmp	r3, #0
 8018f5c:	d102      	bne.n	8018f64 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8018f5e:	68f8      	ldr	r0, [r7, #12]
 8018f60:	f001 fcf4 	bl	801a94c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8018f64:	bf00      	nop
 8018f66:	3710      	adds	r7, #16
 8018f68:	46bd      	mov	sp, r7
 8018f6a:	bd80      	pop	{r7, pc}

08018f6c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8018f6c:	b480      	push	{r7}
 8018f6e:	b085      	sub	sp, #20
 8018f70:	af00      	add	r7, sp, #0
 8018f72:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018f78:	2b00      	cmp	r3, #0
 8018f7a:	d006      	beq.n	8018f8a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018f80:	681b      	ldr	r3, [r3, #0]
 8018f82:	f1c3 0307 	rsb	r3, r3, #7
 8018f86:	60fb      	str	r3, [r7, #12]
 8018f88:	e001      	b.n	8018f8e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8018f8a:	2300      	movs	r3, #0
 8018f8c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8018f8e:	68fb      	ldr	r3, [r7, #12]
	}
 8018f90:	4618      	mov	r0, r3
 8018f92:	3714      	adds	r7, #20
 8018f94:	46bd      	mov	sp, r7
 8018f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f9a:	4770      	bx	lr

08018f9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8018f9c:	b580      	push	{r7, lr}
 8018f9e:	b086      	sub	sp, #24
 8018fa0:	af00      	add	r7, sp, #0
 8018fa2:	60f8      	str	r0, [r7, #12]
 8018fa4:	60b9      	str	r1, [r7, #8]
 8018fa6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8018fa8:	2300      	movs	r3, #0
 8018faa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018fac:	68fb      	ldr	r3, [r7, #12]
 8018fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018fb0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8018fb2:	68fb      	ldr	r3, [r7, #12]
 8018fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018fb6:	2b00      	cmp	r3, #0
 8018fb8:	d10d      	bne.n	8018fd6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018fba:	68fb      	ldr	r3, [r7, #12]
 8018fbc:	681b      	ldr	r3, [r3, #0]
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	d14d      	bne.n	801905e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8018fc2:	68fb      	ldr	r3, [r7, #12]
 8018fc4:	689b      	ldr	r3, [r3, #8]
 8018fc6:	4618      	mov	r0, r3
 8018fc8:	f001 f80a 	bl	8019fe0 <xTaskPriorityDisinherit>
 8018fcc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8018fce:	68fb      	ldr	r3, [r7, #12]
 8018fd0:	2200      	movs	r2, #0
 8018fd2:	609a      	str	r2, [r3, #8]
 8018fd4:	e043      	b.n	801905e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	d119      	bne.n	8019010 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018fdc:	68fb      	ldr	r3, [r7, #12]
 8018fde:	6858      	ldr	r0, [r3, #4]
 8018fe0:	68fb      	ldr	r3, [r7, #12]
 8018fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018fe4:	461a      	mov	r2, r3
 8018fe6:	68b9      	ldr	r1, [r7, #8]
 8018fe8:	f002 fa94 	bl	801b514 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018fec:	68fb      	ldr	r3, [r7, #12]
 8018fee:	685a      	ldr	r2, [r3, #4]
 8018ff0:	68fb      	ldr	r3, [r7, #12]
 8018ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018ff4:	441a      	add	r2, r3
 8018ff6:	68fb      	ldr	r3, [r7, #12]
 8018ff8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8018ffa:	68fb      	ldr	r3, [r7, #12]
 8018ffc:	685a      	ldr	r2, [r3, #4]
 8018ffe:	68fb      	ldr	r3, [r7, #12]
 8019000:	689b      	ldr	r3, [r3, #8]
 8019002:	429a      	cmp	r2, r3
 8019004:	d32b      	bcc.n	801905e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8019006:	68fb      	ldr	r3, [r7, #12]
 8019008:	681a      	ldr	r2, [r3, #0]
 801900a:	68fb      	ldr	r3, [r7, #12]
 801900c:	605a      	str	r2, [r3, #4]
 801900e:	e026      	b.n	801905e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8019010:	68fb      	ldr	r3, [r7, #12]
 8019012:	68d8      	ldr	r0, [r3, #12]
 8019014:	68fb      	ldr	r3, [r7, #12]
 8019016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019018:	461a      	mov	r2, r3
 801901a:	68b9      	ldr	r1, [r7, #8]
 801901c:	f002 fa7a 	bl	801b514 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8019020:	68fb      	ldr	r3, [r7, #12]
 8019022:	68da      	ldr	r2, [r3, #12]
 8019024:	68fb      	ldr	r3, [r7, #12]
 8019026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019028:	425b      	negs	r3, r3
 801902a:	441a      	add	r2, r3
 801902c:	68fb      	ldr	r3, [r7, #12]
 801902e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8019030:	68fb      	ldr	r3, [r7, #12]
 8019032:	68da      	ldr	r2, [r3, #12]
 8019034:	68fb      	ldr	r3, [r7, #12]
 8019036:	681b      	ldr	r3, [r3, #0]
 8019038:	429a      	cmp	r2, r3
 801903a:	d207      	bcs.n	801904c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801903c:	68fb      	ldr	r3, [r7, #12]
 801903e:	689a      	ldr	r2, [r3, #8]
 8019040:	68fb      	ldr	r3, [r7, #12]
 8019042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019044:	425b      	negs	r3, r3
 8019046:	441a      	add	r2, r3
 8019048:	68fb      	ldr	r3, [r7, #12]
 801904a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	2b02      	cmp	r3, #2
 8019050:	d105      	bne.n	801905e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019052:	693b      	ldr	r3, [r7, #16]
 8019054:	2b00      	cmp	r3, #0
 8019056:	d002      	beq.n	801905e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8019058:	693b      	ldr	r3, [r7, #16]
 801905a:	3b01      	subs	r3, #1
 801905c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801905e:	693b      	ldr	r3, [r7, #16]
 8019060:	1c5a      	adds	r2, r3, #1
 8019062:	68fb      	ldr	r3, [r7, #12]
 8019064:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8019066:	697b      	ldr	r3, [r7, #20]
}
 8019068:	4618      	mov	r0, r3
 801906a:	3718      	adds	r7, #24
 801906c:	46bd      	mov	sp, r7
 801906e:	bd80      	pop	{r7, pc}

08019070 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8019070:	b580      	push	{r7, lr}
 8019072:	b082      	sub	sp, #8
 8019074:	af00      	add	r7, sp, #0
 8019076:	6078      	str	r0, [r7, #4]
 8019078:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801907e:	2b00      	cmp	r3, #0
 8019080:	d018      	beq.n	80190b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	68da      	ldr	r2, [r3, #12]
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801908a:	441a      	add	r2, r3
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	68da      	ldr	r2, [r3, #12]
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	689b      	ldr	r3, [r3, #8]
 8019098:	429a      	cmp	r2, r3
 801909a:	d303      	bcc.n	80190a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	681a      	ldr	r2, [r3, #0]
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	68d9      	ldr	r1, [r3, #12]
 80190a8:	687b      	ldr	r3, [r7, #4]
 80190aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80190ac:	461a      	mov	r2, r3
 80190ae:	6838      	ldr	r0, [r7, #0]
 80190b0:	f002 fa30 	bl	801b514 <memcpy>
	}
}
 80190b4:	bf00      	nop
 80190b6:	3708      	adds	r7, #8
 80190b8:	46bd      	mov	sp, r7
 80190ba:	bd80      	pop	{r7, pc}

080190bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80190bc:	b580      	push	{r7, lr}
 80190be:	b084      	sub	sp, #16
 80190c0:	af00      	add	r7, sp, #0
 80190c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80190c4:	f001 fa42 	bl	801a54c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80190ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80190d0:	e011      	b.n	80190f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80190d2:	687b      	ldr	r3, [r7, #4]
 80190d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80190d6:	2b00      	cmp	r3, #0
 80190d8:	d012      	beq.n	8019100 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	3324      	adds	r3, #36	@ 0x24
 80190de:	4618      	mov	r0, r3
 80190e0:	f000 fd16 	bl	8019b10 <xTaskRemoveFromEventList>
 80190e4:	4603      	mov	r3, r0
 80190e6:	2b00      	cmp	r3, #0
 80190e8:	d001      	beq.n	80190ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80190ea:	f000 fdf5 	bl	8019cd8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80190ee:	7bfb      	ldrb	r3, [r7, #15]
 80190f0:	3b01      	subs	r3, #1
 80190f2:	b2db      	uxtb	r3, r3
 80190f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80190f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	dce9      	bgt.n	80190d2 <prvUnlockQueue+0x16>
 80190fe:	e000      	b.n	8019102 <prvUnlockQueue+0x46>
					break;
 8019100:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8019102:	687b      	ldr	r3, [r7, #4]
 8019104:	22ff      	movs	r2, #255	@ 0xff
 8019106:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801910a:	f001 fa55 	bl	801a5b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801910e:	f001 fa1d 	bl	801a54c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8019112:	687b      	ldr	r3, [r7, #4]
 8019114:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8019118:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801911a:	e011      	b.n	8019140 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	691b      	ldr	r3, [r3, #16]
 8019120:	2b00      	cmp	r3, #0
 8019122:	d012      	beq.n	801914a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	3310      	adds	r3, #16
 8019128:	4618      	mov	r0, r3
 801912a:	f000 fcf1 	bl	8019b10 <xTaskRemoveFromEventList>
 801912e:	4603      	mov	r3, r0
 8019130:	2b00      	cmp	r3, #0
 8019132:	d001      	beq.n	8019138 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8019134:	f000 fdd0 	bl	8019cd8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8019138:	7bbb      	ldrb	r3, [r7, #14]
 801913a:	3b01      	subs	r3, #1
 801913c:	b2db      	uxtb	r3, r3
 801913e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8019140:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019144:	2b00      	cmp	r3, #0
 8019146:	dce9      	bgt.n	801911c <prvUnlockQueue+0x60>
 8019148:	e000      	b.n	801914c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801914a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	22ff      	movs	r2, #255	@ 0xff
 8019150:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8019154:	f001 fa30 	bl	801a5b8 <vPortExitCritical>
}
 8019158:	bf00      	nop
 801915a:	3710      	adds	r7, #16
 801915c:	46bd      	mov	sp, r7
 801915e:	bd80      	pop	{r7, pc}

08019160 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8019160:	b580      	push	{r7, lr}
 8019162:	b084      	sub	sp, #16
 8019164:	af00      	add	r7, sp, #0
 8019166:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8019168:	f001 f9f0 	bl	801a54c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019170:	2b00      	cmp	r3, #0
 8019172:	d102      	bne.n	801917a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8019174:	2301      	movs	r3, #1
 8019176:	60fb      	str	r3, [r7, #12]
 8019178:	e001      	b.n	801917e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801917a:	2300      	movs	r3, #0
 801917c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801917e:	f001 fa1b 	bl	801a5b8 <vPortExitCritical>

	return xReturn;
 8019182:	68fb      	ldr	r3, [r7, #12]
}
 8019184:	4618      	mov	r0, r3
 8019186:	3710      	adds	r7, #16
 8019188:	46bd      	mov	sp, r7
 801918a:	bd80      	pop	{r7, pc}

0801918c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801918c:	b580      	push	{r7, lr}
 801918e:	b084      	sub	sp, #16
 8019190:	af00      	add	r7, sp, #0
 8019192:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8019194:	f001 f9da 	bl	801a54c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80191a0:	429a      	cmp	r2, r3
 80191a2:	d102      	bne.n	80191aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80191a4:	2301      	movs	r3, #1
 80191a6:	60fb      	str	r3, [r7, #12]
 80191a8:	e001      	b.n	80191ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80191aa:	2300      	movs	r3, #0
 80191ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80191ae:	f001 fa03 	bl	801a5b8 <vPortExitCritical>

	return xReturn;
 80191b2:	68fb      	ldr	r3, [r7, #12]
}
 80191b4:	4618      	mov	r0, r3
 80191b6:	3710      	adds	r7, #16
 80191b8:	46bd      	mov	sp, r7
 80191ba:	bd80      	pop	{r7, pc}

080191bc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80191bc:	b480      	push	{r7}
 80191be:	b085      	sub	sp, #20
 80191c0:	af00      	add	r7, sp, #0
 80191c2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80191c4:	2300      	movs	r3, #0
 80191c6:	60fb      	str	r3, [r7, #12]
 80191c8:	e016      	b.n	80191f8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80191ca:	4a10      	ldr	r2, [pc, #64]	@ (801920c <vQueueUnregisterQueue+0x50>)
 80191cc:	68fb      	ldr	r3, [r7, #12]
 80191ce:	00db      	lsls	r3, r3, #3
 80191d0:	4413      	add	r3, r2
 80191d2:	685b      	ldr	r3, [r3, #4]
 80191d4:	687a      	ldr	r2, [r7, #4]
 80191d6:	429a      	cmp	r2, r3
 80191d8:	d10b      	bne.n	80191f2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80191da:	4a0c      	ldr	r2, [pc, #48]	@ (801920c <vQueueUnregisterQueue+0x50>)
 80191dc:	68fb      	ldr	r3, [r7, #12]
 80191de:	2100      	movs	r1, #0
 80191e0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80191e4:	4a09      	ldr	r2, [pc, #36]	@ (801920c <vQueueUnregisterQueue+0x50>)
 80191e6:	68fb      	ldr	r3, [r7, #12]
 80191e8:	00db      	lsls	r3, r3, #3
 80191ea:	4413      	add	r3, r2
 80191ec:	2200      	movs	r2, #0
 80191ee:	605a      	str	r2, [r3, #4]
				break;
 80191f0:	e006      	b.n	8019200 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80191f2:	68fb      	ldr	r3, [r7, #12]
 80191f4:	3301      	adds	r3, #1
 80191f6:	60fb      	str	r3, [r7, #12]
 80191f8:	68fb      	ldr	r3, [r7, #12]
 80191fa:	2b07      	cmp	r3, #7
 80191fc:	d9e5      	bls.n	80191ca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80191fe:	bf00      	nop
 8019200:	bf00      	nop
 8019202:	3714      	adds	r7, #20
 8019204:	46bd      	mov	sp, r7
 8019206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801920a:	4770      	bx	lr
 801920c:	20002414 	.word	0x20002414

08019210 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8019210:	b580      	push	{r7, lr}
 8019212:	b08e      	sub	sp, #56	@ 0x38
 8019214:	af04      	add	r7, sp, #16
 8019216:	60f8      	str	r0, [r7, #12]
 8019218:	60b9      	str	r1, [r7, #8]
 801921a:	607a      	str	r2, [r7, #4]
 801921c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801921e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019220:	2b00      	cmp	r3, #0
 8019222:	d10d      	bne.n	8019240 <xTaskCreateStatic+0x30>
	__asm volatile
 8019224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019228:	b672      	cpsid	i
 801922a:	f383 8811 	msr	BASEPRI, r3
 801922e:	f3bf 8f6f 	isb	sy
 8019232:	f3bf 8f4f 	dsb	sy
 8019236:	b662      	cpsie	i
 8019238:	623b      	str	r3, [r7, #32]
}
 801923a:	bf00      	nop
 801923c:	bf00      	nop
 801923e:	e7fd      	b.n	801923c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8019240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019242:	2b00      	cmp	r3, #0
 8019244:	d10d      	bne.n	8019262 <xTaskCreateStatic+0x52>
	__asm volatile
 8019246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801924a:	b672      	cpsid	i
 801924c:	f383 8811 	msr	BASEPRI, r3
 8019250:	f3bf 8f6f 	isb	sy
 8019254:	f3bf 8f4f 	dsb	sy
 8019258:	b662      	cpsie	i
 801925a:	61fb      	str	r3, [r7, #28]
}
 801925c:	bf00      	nop
 801925e:	bf00      	nop
 8019260:	e7fd      	b.n	801925e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8019262:	2358      	movs	r3, #88	@ 0x58
 8019264:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8019266:	693b      	ldr	r3, [r7, #16]
 8019268:	2b58      	cmp	r3, #88	@ 0x58
 801926a:	d00d      	beq.n	8019288 <xTaskCreateStatic+0x78>
	__asm volatile
 801926c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019270:	b672      	cpsid	i
 8019272:	f383 8811 	msr	BASEPRI, r3
 8019276:	f3bf 8f6f 	isb	sy
 801927a:	f3bf 8f4f 	dsb	sy
 801927e:	b662      	cpsie	i
 8019280:	61bb      	str	r3, [r7, #24]
}
 8019282:	bf00      	nop
 8019284:	bf00      	nop
 8019286:	e7fd      	b.n	8019284 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8019288:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801928a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801928c:	2b00      	cmp	r3, #0
 801928e:	d01e      	beq.n	80192ce <xTaskCreateStatic+0xbe>
 8019290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019292:	2b00      	cmp	r3, #0
 8019294:	d01b      	beq.n	80192ce <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8019296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019298:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801929a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801929c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801929e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80192a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192a2:	2202      	movs	r2, #2
 80192a4:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80192a8:	2300      	movs	r3, #0
 80192aa:	9303      	str	r3, [sp, #12]
 80192ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192ae:	9302      	str	r3, [sp, #8]
 80192b0:	f107 0314 	add.w	r3, r7, #20
 80192b4:	9301      	str	r3, [sp, #4]
 80192b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80192b8:	9300      	str	r3, [sp, #0]
 80192ba:	683b      	ldr	r3, [r7, #0]
 80192bc:	687a      	ldr	r2, [r7, #4]
 80192be:	68b9      	ldr	r1, [r7, #8]
 80192c0:	68f8      	ldr	r0, [r7, #12]
 80192c2:	f000 f850 	bl	8019366 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80192c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80192c8:	f000 f8e2 	bl	8019490 <prvAddNewTaskToReadyList>
 80192cc:	e001      	b.n	80192d2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80192ce:	2300      	movs	r3, #0
 80192d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80192d2:	697b      	ldr	r3, [r7, #20]
	}
 80192d4:	4618      	mov	r0, r3
 80192d6:	3728      	adds	r7, #40	@ 0x28
 80192d8:	46bd      	mov	sp, r7
 80192da:	bd80      	pop	{r7, pc}

080192dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80192dc:	b580      	push	{r7, lr}
 80192de:	b08c      	sub	sp, #48	@ 0x30
 80192e0:	af04      	add	r7, sp, #16
 80192e2:	60f8      	str	r0, [r7, #12]
 80192e4:	60b9      	str	r1, [r7, #8]
 80192e6:	603b      	str	r3, [r7, #0]
 80192e8:	4613      	mov	r3, r2
 80192ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80192ec:	88fb      	ldrh	r3, [r7, #6]
 80192ee:	009b      	lsls	r3, r3, #2
 80192f0:	4618      	mov	r0, r3
 80192f2:	f001 fa59 	bl	801a7a8 <pvPortMalloc>
 80192f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80192f8:	697b      	ldr	r3, [r7, #20]
 80192fa:	2b00      	cmp	r3, #0
 80192fc:	d00e      	beq.n	801931c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80192fe:	2058      	movs	r0, #88	@ 0x58
 8019300:	f001 fa52 	bl	801a7a8 <pvPortMalloc>
 8019304:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8019306:	69fb      	ldr	r3, [r7, #28]
 8019308:	2b00      	cmp	r3, #0
 801930a:	d003      	beq.n	8019314 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801930c:	69fb      	ldr	r3, [r7, #28]
 801930e:	697a      	ldr	r2, [r7, #20]
 8019310:	631a      	str	r2, [r3, #48]	@ 0x30
 8019312:	e005      	b.n	8019320 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8019314:	6978      	ldr	r0, [r7, #20]
 8019316:	f001 fb19 	bl	801a94c <vPortFree>
 801931a:	e001      	b.n	8019320 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801931c:	2300      	movs	r3, #0
 801931e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8019320:	69fb      	ldr	r3, [r7, #28]
 8019322:	2b00      	cmp	r3, #0
 8019324:	d017      	beq.n	8019356 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8019326:	69fb      	ldr	r3, [r7, #28]
 8019328:	2200      	movs	r2, #0
 801932a:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801932e:	88fa      	ldrh	r2, [r7, #6]
 8019330:	2300      	movs	r3, #0
 8019332:	9303      	str	r3, [sp, #12]
 8019334:	69fb      	ldr	r3, [r7, #28]
 8019336:	9302      	str	r3, [sp, #8]
 8019338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801933a:	9301      	str	r3, [sp, #4]
 801933c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801933e:	9300      	str	r3, [sp, #0]
 8019340:	683b      	ldr	r3, [r7, #0]
 8019342:	68b9      	ldr	r1, [r7, #8]
 8019344:	68f8      	ldr	r0, [r7, #12]
 8019346:	f000 f80e 	bl	8019366 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801934a:	69f8      	ldr	r0, [r7, #28]
 801934c:	f000 f8a0 	bl	8019490 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8019350:	2301      	movs	r3, #1
 8019352:	61bb      	str	r3, [r7, #24]
 8019354:	e002      	b.n	801935c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8019356:	f04f 33ff 	mov.w	r3, #4294967295
 801935a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801935c:	69bb      	ldr	r3, [r7, #24]
	}
 801935e:	4618      	mov	r0, r3
 8019360:	3720      	adds	r7, #32
 8019362:	46bd      	mov	sp, r7
 8019364:	bd80      	pop	{r7, pc}

08019366 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8019366:	b580      	push	{r7, lr}
 8019368:	b088      	sub	sp, #32
 801936a:	af00      	add	r7, sp, #0
 801936c:	60f8      	str	r0, [r7, #12]
 801936e:	60b9      	str	r1, [r7, #8]
 8019370:	607a      	str	r2, [r7, #4]
 8019372:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8019374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019376:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8019378:	687b      	ldr	r3, [r7, #4]
 801937a:	009b      	lsls	r3, r3, #2
 801937c:	461a      	mov	r2, r3
 801937e:	21a5      	movs	r1, #165	@ 0xa5
 8019380:	f002 f85a 	bl	801b438 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8019384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019386:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8019388:	6879      	ldr	r1, [r7, #4]
 801938a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801938e:	440b      	add	r3, r1
 8019390:	009b      	lsls	r3, r3, #2
 8019392:	4413      	add	r3, r2
 8019394:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8019396:	69bb      	ldr	r3, [r7, #24]
 8019398:	f023 0307 	bic.w	r3, r3, #7
 801939c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801939e:	69bb      	ldr	r3, [r7, #24]
 80193a0:	f003 0307 	and.w	r3, r3, #7
 80193a4:	2b00      	cmp	r3, #0
 80193a6:	d00d      	beq.n	80193c4 <prvInitialiseNewTask+0x5e>
	__asm volatile
 80193a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80193ac:	b672      	cpsid	i
 80193ae:	f383 8811 	msr	BASEPRI, r3
 80193b2:	f3bf 8f6f 	isb	sy
 80193b6:	f3bf 8f4f 	dsb	sy
 80193ba:	b662      	cpsie	i
 80193bc:	617b      	str	r3, [r7, #20]
}
 80193be:	bf00      	nop
 80193c0:	bf00      	nop
 80193c2:	e7fd      	b.n	80193c0 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80193c4:	68bb      	ldr	r3, [r7, #8]
 80193c6:	2b00      	cmp	r3, #0
 80193c8:	d01f      	beq.n	801940a <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80193ca:	2300      	movs	r3, #0
 80193cc:	61fb      	str	r3, [r7, #28]
 80193ce:	e012      	b.n	80193f6 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80193d0:	68ba      	ldr	r2, [r7, #8]
 80193d2:	69fb      	ldr	r3, [r7, #28]
 80193d4:	4413      	add	r3, r2
 80193d6:	7819      	ldrb	r1, [r3, #0]
 80193d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80193da:	69fb      	ldr	r3, [r7, #28]
 80193dc:	4413      	add	r3, r2
 80193de:	3334      	adds	r3, #52	@ 0x34
 80193e0:	460a      	mov	r2, r1
 80193e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80193e4:	68ba      	ldr	r2, [r7, #8]
 80193e6:	69fb      	ldr	r3, [r7, #28]
 80193e8:	4413      	add	r3, r2
 80193ea:	781b      	ldrb	r3, [r3, #0]
 80193ec:	2b00      	cmp	r3, #0
 80193ee:	d006      	beq.n	80193fe <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80193f0:	69fb      	ldr	r3, [r7, #28]
 80193f2:	3301      	adds	r3, #1
 80193f4:	61fb      	str	r3, [r7, #28]
 80193f6:	69fb      	ldr	r3, [r7, #28]
 80193f8:	2b0f      	cmp	r3, #15
 80193fa:	d9e9      	bls.n	80193d0 <prvInitialiseNewTask+0x6a>
 80193fc:	e000      	b.n	8019400 <prvInitialiseNewTask+0x9a>
			{
				break;
 80193fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8019400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019402:	2200      	movs	r2, #0
 8019404:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8019408:	e003      	b.n	8019412 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801940a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801940c:	2200      	movs	r2, #0
 801940e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8019412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019414:	2b06      	cmp	r3, #6
 8019416:	d901      	bls.n	801941c <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8019418:	2306      	movs	r3, #6
 801941a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801941c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801941e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019420:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8019422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019424:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019426:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8019428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801942a:	2200      	movs	r2, #0
 801942c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801942e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019430:	3304      	adds	r3, #4
 8019432:	4618      	mov	r0, r3
 8019434:	f7fe fe04 	bl	8018040 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8019438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801943a:	3318      	adds	r3, #24
 801943c:	4618      	mov	r0, r3
 801943e:	f7fe fdff 	bl	8018040 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8019442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019444:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019446:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801944a:	f1c3 0207 	rsb	r2, r3, #7
 801944e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019450:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8019452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019454:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019456:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8019458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801945a:	2200      	movs	r2, #0
 801945c:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801945e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019460:	2200      	movs	r2, #0
 8019462:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8019464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019466:	2200      	movs	r2, #0
 8019468:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801946c:	683a      	ldr	r2, [r7, #0]
 801946e:	68f9      	ldr	r1, [r7, #12]
 8019470:	69b8      	ldr	r0, [r7, #24]
 8019472:	f000 ff5b 	bl	801a32c <pxPortInitialiseStack>
 8019476:	4602      	mov	r2, r0
 8019478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801947a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801947c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801947e:	2b00      	cmp	r3, #0
 8019480:	d002      	beq.n	8019488 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8019482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019484:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019486:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019488:	bf00      	nop
 801948a:	3720      	adds	r7, #32
 801948c:	46bd      	mov	sp, r7
 801948e:	bd80      	pop	{r7, pc}

08019490 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8019490:	b580      	push	{r7, lr}
 8019492:	b082      	sub	sp, #8
 8019494:	af00      	add	r7, sp, #0
 8019496:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8019498:	f001 f858 	bl	801a54c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801949c:	4b2a      	ldr	r3, [pc, #168]	@ (8019548 <prvAddNewTaskToReadyList+0xb8>)
 801949e:	681b      	ldr	r3, [r3, #0]
 80194a0:	3301      	adds	r3, #1
 80194a2:	4a29      	ldr	r2, [pc, #164]	@ (8019548 <prvAddNewTaskToReadyList+0xb8>)
 80194a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80194a6:	4b29      	ldr	r3, [pc, #164]	@ (801954c <prvAddNewTaskToReadyList+0xbc>)
 80194a8:	681b      	ldr	r3, [r3, #0]
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	d109      	bne.n	80194c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80194ae:	4a27      	ldr	r2, [pc, #156]	@ (801954c <prvAddNewTaskToReadyList+0xbc>)
 80194b0:	687b      	ldr	r3, [r7, #4]
 80194b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80194b4:	4b24      	ldr	r3, [pc, #144]	@ (8019548 <prvAddNewTaskToReadyList+0xb8>)
 80194b6:	681b      	ldr	r3, [r3, #0]
 80194b8:	2b01      	cmp	r3, #1
 80194ba:	d110      	bne.n	80194de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80194bc:	f000 fc32 	bl	8019d24 <prvInitialiseTaskLists>
 80194c0:	e00d      	b.n	80194de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80194c2:	4b23      	ldr	r3, [pc, #140]	@ (8019550 <prvAddNewTaskToReadyList+0xc0>)
 80194c4:	681b      	ldr	r3, [r3, #0]
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	d109      	bne.n	80194de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80194ca:	4b20      	ldr	r3, [pc, #128]	@ (801954c <prvAddNewTaskToReadyList+0xbc>)
 80194cc:	681b      	ldr	r3, [r3, #0]
 80194ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80194d4:	429a      	cmp	r2, r3
 80194d6:	d802      	bhi.n	80194de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80194d8:	4a1c      	ldr	r2, [pc, #112]	@ (801954c <prvAddNewTaskToReadyList+0xbc>)
 80194da:	687b      	ldr	r3, [r7, #4]
 80194dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80194de:	4b1d      	ldr	r3, [pc, #116]	@ (8019554 <prvAddNewTaskToReadyList+0xc4>)
 80194e0:	681b      	ldr	r3, [r3, #0]
 80194e2:	3301      	adds	r3, #1
 80194e4:	4a1b      	ldr	r2, [pc, #108]	@ (8019554 <prvAddNewTaskToReadyList+0xc4>)
 80194e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80194e8:	687b      	ldr	r3, [r7, #4]
 80194ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80194ec:	2201      	movs	r2, #1
 80194ee:	409a      	lsls	r2, r3
 80194f0:	4b19      	ldr	r3, [pc, #100]	@ (8019558 <prvAddNewTaskToReadyList+0xc8>)
 80194f2:	681b      	ldr	r3, [r3, #0]
 80194f4:	4313      	orrs	r3, r2
 80194f6:	4a18      	ldr	r2, [pc, #96]	@ (8019558 <prvAddNewTaskToReadyList+0xc8>)
 80194f8:	6013      	str	r3, [r2, #0]
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80194fe:	4613      	mov	r3, r2
 8019500:	009b      	lsls	r3, r3, #2
 8019502:	4413      	add	r3, r2
 8019504:	009b      	lsls	r3, r3, #2
 8019506:	4a15      	ldr	r2, [pc, #84]	@ (801955c <prvAddNewTaskToReadyList+0xcc>)
 8019508:	441a      	add	r2, r3
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	3304      	adds	r3, #4
 801950e:	4619      	mov	r1, r3
 8019510:	4610      	mov	r0, r2
 8019512:	f7fe fda2 	bl	801805a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8019516:	f001 f84f 	bl	801a5b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801951a:	4b0d      	ldr	r3, [pc, #52]	@ (8019550 <prvAddNewTaskToReadyList+0xc0>)
 801951c:	681b      	ldr	r3, [r3, #0]
 801951e:	2b00      	cmp	r3, #0
 8019520:	d00e      	beq.n	8019540 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8019522:	4b0a      	ldr	r3, [pc, #40]	@ (801954c <prvAddNewTaskToReadyList+0xbc>)
 8019524:	681b      	ldr	r3, [r3, #0]
 8019526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801952c:	429a      	cmp	r2, r3
 801952e:	d207      	bcs.n	8019540 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8019530:	4b0b      	ldr	r3, [pc, #44]	@ (8019560 <prvAddNewTaskToReadyList+0xd0>)
 8019532:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019536:	601a      	str	r2, [r3, #0]
 8019538:	f3bf 8f4f 	dsb	sy
 801953c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019540:	bf00      	nop
 8019542:	3708      	adds	r7, #8
 8019544:	46bd      	mov	sp, r7
 8019546:	bd80      	pop	{r7, pc}
 8019548:	20002554 	.word	0x20002554
 801954c:	20002454 	.word	0x20002454
 8019550:	20002560 	.word	0x20002560
 8019554:	20002570 	.word	0x20002570
 8019558:	2000255c 	.word	0x2000255c
 801955c:	20002458 	.word	0x20002458
 8019560:	e000ed04 	.word	0xe000ed04

08019564 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8019564:	b580      	push	{r7, lr}
 8019566:	b084      	sub	sp, #16
 8019568:	af00      	add	r7, sp, #0
 801956a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801956c:	2300      	movs	r3, #0
 801956e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	2b00      	cmp	r3, #0
 8019574:	d01a      	beq.n	80195ac <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8019576:	4b15      	ldr	r3, [pc, #84]	@ (80195cc <vTaskDelay+0x68>)
 8019578:	681b      	ldr	r3, [r3, #0]
 801957a:	2b00      	cmp	r3, #0
 801957c:	d00d      	beq.n	801959a <vTaskDelay+0x36>
	__asm volatile
 801957e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019582:	b672      	cpsid	i
 8019584:	f383 8811 	msr	BASEPRI, r3
 8019588:	f3bf 8f6f 	isb	sy
 801958c:	f3bf 8f4f 	dsb	sy
 8019590:	b662      	cpsie	i
 8019592:	60bb      	str	r3, [r7, #8]
}
 8019594:	bf00      	nop
 8019596:	bf00      	nop
 8019598:	e7fd      	b.n	8019596 <vTaskDelay+0x32>
			vTaskSuspendAll();
 801959a:	f000 f881 	bl	80196a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801959e:	2100      	movs	r1, #0
 80195a0:	6878      	ldr	r0, [r7, #4]
 80195a2:	f000 fe5d 	bl	801a260 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80195a6:	f000 f889 	bl	80196bc <xTaskResumeAll>
 80195aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80195ac:	68fb      	ldr	r3, [r7, #12]
 80195ae:	2b00      	cmp	r3, #0
 80195b0:	d107      	bne.n	80195c2 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80195b2:	4b07      	ldr	r3, [pc, #28]	@ (80195d0 <vTaskDelay+0x6c>)
 80195b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80195b8:	601a      	str	r2, [r3, #0]
 80195ba:	f3bf 8f4f 	dsb	sy
 80195be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80195c2:	bf00      	nop
 80195c4:	3710      	adds	r7, #16
 80195c6:	46bd      	mov	sp, r7
 80195c8:	bd80      	pop	{r7, pc}
 80195ca:	bf00      	nop
 80195cc:	2000257c 	.word	0x2000257c
 80195d0:	e000ed04 	.word	0xe000ed04

080195d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80195d4:	b580      	push	{r7, lr}
 80195d6:	b08a      	sub	sp, #40	@ 0x28
 80195d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80195da:	2300      	movs	r3, #0
 80195dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80195de:	2300      	movs	r3, #0
 80195e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80195e2:	463a      	mov	r2, r7
 80195e4:	1d39      	adds	r1, r7, #4
 80195e6:	f107 0308 	add.w	r3, r7, #8
 80195ea:	4618      	mov	r0, r3
 80195ec:	f7e8 f8fe 	bl	80017ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80195f0:	6839      	ldr	r1, [r7, #0]
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	68ba      	ldr	r2, [r7, #8]
 80195f6:	9202      	str	r2, [sp, #8]
 80195f8:	9301      	str	r3, [sp, #4]
 80195fa:	2300      	movs	r3, #0
 80195fc:	9300      	str	r3, [sp, #0]
 80195fe:	2300      	movs	r3, #0
 8019600:	460a      	mov	r2, r1
 8019602:	4921      	ldr	r1, [pc, #132]	@ (8019688 <vTaskStartScheduler+0xb4>)
 8019604:	4821      	ldr	r0, [pc, #132]	@ (801968c <vTaskStartScheduler+0xb8>)
 8019606:	f7ff fe03 	bl	8019210 <xTaskCreateStatic>
 801960a:	4603      	mov	r3, r0
 801960c:	4a20      	ldr	r2, [pc, #128]	@ (8019690 <vTaskStartScheduler+0xbc>)
 801960e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8019610:	4b1f      	ldr	r3, [pc, #124]	@ (8019690 <vTaskStartScheduler+0xbc>)
 8019612:	681b      	ldr	r3, [r3, #0]
 8019614:	2b00      	cmp	r3, #0
 8019616:	d002      	beq.n	801961e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8019618:	2301      	movs	r3, #1
 801961a:	617b      	str	r3, [r7, #20]
 801961c:	e001      	b.n	8019622 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801961e:	2300      	movs	r3, #0
 8019620:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8019622:	697b      	ldr	r3, [r7, #20]
 8019624:	2b01      	cmp	r3, #1
 8019626:	d118      	bne.n	801965a <vTaskStartScheduler+0x86>
	__asm volatile
 8019628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801962c:	b672      	cpsid	i
 801962e:	f383 8811 	msr	BASEPRI, r3
 8019632:	f3bf 8f6f 	isb	sy
 8019636:	f3bf 8f4f 	dsb	sy
 801963a:	b662      	cpsie	i
 801963c:	613b      	str	r3, [r7, #16]
}
 801963e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8019640:	4b14      	ldr	r3, [pc, #80]	@ (8019694 <vTaskStartScheduler+0xc0>)
 8019642:	f04f 32ff 	mov.w	r2, #4294967295
 8019646:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8019648:	4b13      	ldr	r3, [pc, #76]	@ (8019698 <vTaskStartScheduler+0xc4>)
 801964a:	2201      	movs	r2, #1
 801964c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801964e:	4b13      	ldr	r3, [pc, #76]	@ (801969c <vTaskStartScheduler+0xc8>)
 8019650:	2200      	movs	r2, #0
 8019652:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8019654:	f000 fefc 	bl	801a450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8019658:	e011      	b.n	801967e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801965a:	697b      	ldr	r3, [r7, #20]
 801965c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019660:	d10d      	bne.n	801967e <vTaskStartScheduler+0xaa>
	__asm volatile
 8019662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019666:	b672      	cpsid	i
 8019668:	f383 8811 	msr	BASEPRI, r3
 801966c:	f3bf 8f6f 	isb	sy
 8019670:	f3bf 8f4f 	dsb	sy
 8019674:	b662      	cpsie	i
 8019676:	60fb      	str	r3, [r7, #12]
}
 8019678:	bf00      	nop
 801967a:	bf00      	nop
 801967c:	e7fd      	b.n	801967a <vTaskStartScheduler+0xa6>
}
 801967e:	bf00      	nop
 8019680:	3718      	adds	r7, #24
 8019682:	46bd      	mov	sp, r7
 8019684:	bd80      	pop	{r7, pc}
 8019686:	bf00      	nop
 8019688:	0801ec48 	.word	0x0801ec48
 801968c:	08019cf1 	.word	0x08019cf1
 8019690:	20002578 	.word	0x20002578
 8019694:	20002574 	.word	0x20002574
 8019698:	20002560 	.word	0x20002560
 801969c:	20002558 	.word	0x20002558

080196a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80196a0:	b480      	push	{r7}
 80196a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80196a4:	4b04      	ldr	r3, [pc, #16]	@ (80196b8 <vTaskSuspendAll+0x18>)
 80196a6:	681b      	ldr	r3, [r3, #0]
 80196a8:	3301      	adds	r3, #1
 80196aa:	4a03      	ldr	r2, [pc, #12]	@ (80196b8 <vTaskSuspendAll+0x18>)
 80196ac:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80196ae:	bf00      	nop
 80196b0:	46bd      	mov	sp, r7
 80196b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196b6:	4770      	bx	lr
 80196b8:	2000257c 	.word	0x2000257c

080196bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80196bc:	b580      	push	{r7, lr}
 80196be:	b084      	sub	sp, #16
 80196c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80196c2:	2300      	movs	r3, #0
 80196c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80196c6:	2300      	movs	r3, #0
 80196c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80196ca:	4b43      	ldr	r3, [pc, #268]	@ (80197d8 <xTaskResumeAll+0x11c>)
 80196cc:	681b      	ldr	r3, [r3, #0]
 80196ce:	2b00      	cmp	r3, #0
 80196d0:	d10d      	bne.n	80196ee <xTaskResumeAll+0x32>
	__asm volatile
 80196d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80196d6:	b672      	cpsid	i
 80196d8:	f383 8811 	msr	BASEPRI, r3
 80196dc:	f3bf 8f6f 	isb	sy
 80196e0:	f3bf 8f4f 	dsb	sy
 80196e4:	b662      	cpsie	i
 80196e6:	603b      	str	r3, [r7, #0]
}
 80196e8:	bf00      	nop
 80196ea:	bf00      	nop
 80196ec:	e7fd      	b.n	80196ea <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80196ee:	f000 ff2d 	bl	801a54c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80196f2:	4b39      	ldr	r3, [pc, #228]	@ (80197d8 <xTaskResumeAll+0x11c>)
 80196f4:	681b      	ldr	r3, [r3, #0]
 80196f6:	3b01      	subs	r3, #1
 80196f8:	4a37      	ldr	r2, [pc, #220]	@ (80197d8 <xTaskResumeAll+0x11c>)
 80196fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80196fc:	4b36      	ldr	r3, [pc, #216]	@ (80197d8 <xTaskResumeAll+0x11c>)
 80196fe:	681b      	ldr	r3, [r3, #0]
 8019700:	2b00      	cmp	r3, #0
 8019702:	d161      	bne.n	80197c8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8019704:	4b35      	ldr	r3, [pc, #212]	@ (80197dc <xTaskResumeAll+0x120>)
 8019706:	681b      	ldr	r3, [r3, #0]
 8019708:	2b00      	cmp	r3, #0
 801970a:	d05d      	beq.n	80197c8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801970c:	e02e      	b.n	801976c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801970e:	4b34      	ldr	r3, [pc, #208]	@ (80197e0 <xTaskResumeAll+0x124>)
 8019710:	68db      	ldr	r3, [r3, #12]
 8019712:	68db      	ldr	r3, [r3, #12]
 8019714:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019716:	68fb      	ldr	r3, [r7, #12]
 8019718:	3318      	adds	r3, #24
 801971a:	4618      	mov	r0, r3
 801971c:	f7fe fcfa 	bl	8018114 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019720:	68fb      	ldr	r3, [r7, #12]
 8019722:	3304      	adds	r3, #4
 8019724:	4618      	mov	r0, r3
 8019726:	f7fe fcf5 	bl	8018114 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801972a:	68fb      	ldr	r3, [r7, #12]
 801972c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801972e:	2201      	movs	r2, #1
 8019730:	409a      	lsls	r2, r3
 8019732:	4b2c      	ldr	r3, [pc, #176]	@ (80197e4 <xTaskResumeAll+0x128>)
 8019734:	681b      	ldr	r3, [r3, #0]
 8019736:	4313      	orrs	r3, r2
 8019738:	4a2a      	ldr	r2, [pc, #168]	@ (80197e4 <xTaskResumeAll+0x128>)
 801973a:	6013      	str	r3, [r2, #0]
 801973c:	68fb      	ldr	r3, [r7, #12]
 801973e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019740:	4613      	mov	r3, r2
 8019742:	009b      	lsls	r3, r3, #2
 8019744:	4413      	add	r3, r2
 8019746:	009b      	lsls	r3, r3, #2
 8019748:	4a27      	ldr	r2, [pc, #156]	@ (80197e8 <xTaskResumeAll+0x12c>)
 801974a:	441a      	add	r2, r3
 801974c:	68fb      	ldr	r3, [r7, #12]
 801974e:	3304      	adds	r3, #4
 8019750:	4619      	mov	r1, r3
 8019752:	4610      	mov	r0, r2
 8019754:	f7fe fc81 	bl	801805a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019758:	68fb      	ldr	r3, [r7, #12]
 801975a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801975c:	4b23      	ldr	r3, [pc, #140]	@ (80197ec <xTaskResumeAll+0x130>)
 801975e:	681b      	ldr	r3, [r3, #0]
 8019760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019762:	429a      	cmp	r2, r3
 8019764:	d302      	bcc.n	801976c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8019766:	4b22      	ldr	r3, [pc, #136]	@ (80197f0 <xTaskResumeAll+0x134>)
 8019768:	2201      	movs	r2, #1
 801976a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801976c:	4b1c      	ldr	r3, [pc, #112]	@ (80197e0 <xTaskResumeAll+0x124>)
 801976e:	681b      	ldr	r3, [r3, #0]
 8019770:	2b00      	cmp	r3, #0
 8019772:	d1cc      	bne.n	801970e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8019774:	68fb      	ldr	r3, [r7, #12]
 8019776:	2b00      	cmp	r3, #0
 8019778:	d001      	beq.n	801977e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801977a:	f000 fb73 	bl	8019e64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801977e:	4b1d      	ldr	r3, [pc, #116]	@ (80197f4 <xTaskResumeAll+0x138>)
 8019780:	681b      	ldr	r3, [r3, #0]
 8019782:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	2b00      	cmp	r3, #0
 8019788:	d010      	beq.n	80197ac <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801978a:	f000 f859 	bl	8019840 <xTaskIncrementTick>
 801978e:	4603      	mov	r3, r0
 8019790:	2b00      	cmp	r3, #0
 8019792:	d002      	beq.n	801979a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8019794:	4b16      	ldr	r3, [pc, #88]	@ (80197f0 <xTaskResumeAll+0x134>)
 8019796:	2201      	movs	r2, #1
 8019798:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	3b01      	subs	r3, #1
 801979e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	2b00      	cmp	r3, #0
 80197a4:	d1f1      	bne.n	801978a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80197a6:	4b13      	ldr	r3, [pc, #76]	@ (80197f4 <xTaskResumeAll+0x138>)
 80197a8:	2200      	movs	r2, #0
 80197aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80197ac:	4b10      	ldr	r3, [pc, #64]	@ (80197f0 <xTaskResumeAll+0x134>)
 80197ae:	681b      	ldr	r3, [r3, #0]
 80197b0:	2b00      	cmp	r3, #0
 80197b2:	d009      	beq.n	80197c8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80197b4:	2301      	movs	r3, #1
 80197b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80197b8:	4b0f      	ldr	r3, [pc, #60]	@ (80197f8 <xTaskResumeAll+0x13c>)
 80197ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80197be:	601a      	str	r2, [r3, #0]
 80197c0:	f3bf 8f4f 	dsb	sy
 80197c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80197c8:	f000 fef6 	bl	801a5b8 <vPortExitCritical>

	return xAlreadyYielded;
 80197cc:	68bb      	ldr	r3, [r7, #8]
}
 80197ce:	4618      	mov	r0, r3
 80197d0:	3710      	adds	r7, #16
 80197d2:	46bd      	mov	sp, r7
 80197d4:	bd80      	pop	{r7, pc}
 80197d6:	bf00      	nop
 80197d8:	2000257c 	.word	0x2000257c
 80197dc:	20002554 	.word	0x20002554
 80197e0:	20002514 	.word	0x20002514
 80197e4:	2000255c 	.word	0x2000255c
 80197e8:	20002458 	.word	0x20002458
 80197ec:	20002454 	.word	0x20002454
 80197f0:	20002568 	.word	0x20002568
 80197f4:	20002564 	.word	0x20002564
 80197f8:	e000ed04 	.word	0xe000ed04

080197fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80197fc:	b480      	push	{r7}
 80197fe:	b083      	sub	sp, #12
 8019800:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8019802:	4b05      	ldr	r3, [pc, #20]	@ (8019818 <xTaskGetTickCount+0x1c>)
 8019804:	681b      	ldr	r3, [r3, #0]
 8019806:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8019808:	687b      	ldr	r3, [r7, #4]
}
 801980a:	4618      	mov	r0, r3
 801980c:	370c      	adds	r7, #12
 801980e:	46bd      	mov	sp, r7
 8019810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019814:	4770      	bx	lr
 8019816:	bf00      	nop
 8019818:	20002558 	.word	0x20002558

0801981c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 801981c:	b580      	push	{r7, lr}
 801981e:	b082      	sub	sp, #8
 8019820:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8019822:	f000 ff7b 	bl	801a71c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8019826:	2300      	movs	r3, #0
 8019828:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801982a:	4b04      	ldr	r3, [pc, #16]	@ (801983c <xTaskGetTickCountFromISR+0x20>)
 801982c:	681b      	ldr	r3, [r3, #0]
 801982e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8019830:	683b      	ldr	r3, [r7, #0]
}
 8019832:	4618      	mov	r0, r3
 8019834:	3708      	adds	r7, #8
 8019836:	46bd      	mov	sp, r7
 8019838:	bd80      	pop	{r7, pc}
 801983a:	bf00      	nop
 801983c:	20002558 	.word	0x20002558

08019840 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8019840:	b580      	push	{r7, lr}
 8019842:	b086      	sub	sp, #24
 8019844:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8019846:	2300      	movs	r3, #0
 8019848:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801984a:	4b50      	ldr	r3, [pc, #320]	@ (801998c <xTaskIncrementTick+0x14c>)
 801984c:	681b      	ldr	r3, [r3, #0]
 801984e:	2b00      	cmp	r3, #0
 8019850:	f040 808b 	bne.w	801996a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8019854:	4b4e      	ldr	r3, [pc, #312]	@ (8019990 <xTaskIncrementTick+0x150>)
 8019856:	681b      	ldr	r3, [r3, #0]
 8019858:	3301      	adds	r3, #1
 801985a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801985c:	4a4c      	ldr	r2, [pc, #304]	@ (8019990 <xTaskIncrementTick+0x150>)
 801985e:	693b      	ldr	r3, [r7, #16]
 8019860:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8019862:	693b      	ldr	r3, [r7, #16]
 8019864:	2b00      	cmp	r3, #0
 8019866:	d123      	bne.n	80198b0 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8019868:	4b4a      	ldr	r3, [pc, #296]	@ (8019994 <xTaskIncrementTick+0x154>)
 801986a:	681b      	ldr	r3, [r3, #0]
 801986c:	681b      	ldr	r3, [r3, #0]
 801986e:	2b00      	cmp	r3, #0
 8019870:	d00d      	beq.n	801988e <xTaskIncrementTick+0x4e>
	__asm volatile
 8019872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019876:	b672      	cpsid	i
 8019878:	f383 8811 	msr	BASEPRI, r3
 801987c:	f3bf 8f6f 	isb	sy
 8019880:	f3bf 8f4f 	dsb	sy
 8019884:	b662      	cpsie	i
 8019886:	603b      	str	r3, [r7, #0]
}
 8019888:	bf00      	nop
 801988a:	bf00      	nop
 801988c:	e7fd      	b.n	801988a <xTaskIncrementTick+0x4a>
 801988e:	4b41      	ldr	r3, [pc, #260]	@ (8019994 <xTaskIncrementTick+0x154>)
 8019890:	681b      	ldr	r3, [r3, #0]
 8019892:	60fb      	str	r3, [r7, #12]
 8019894:	4b40      	ldr	r3, [pc, #256]	@ (8019998 <xTaskIncrementTick+0x158>)
 8019896:	681b      	ldr	r3, [r3, #0]
 8019898:	4a3e      	ldr	r2, [pc, #248]	@ (8019994 <xTaskIncrementTick+0x154>)
 801989a:	6013      	str	r3, [r2, #0]
 801989c:	4a3e      	ldr	r2, [pc, #248]	@ (8019998 <xTaskIncrementTick+0x158>)
 801989e:	68fb      	ldr	r3, [r7, #12]
 80198a0:	6013      	str	r3, [r2, #0]
 80198a2:	4b3e      	ldr	r3, [pc, #248]	@ (801999c <xTaskIncrementTick+0x15c>)
 80198a4:	681b      	ldr	r3, [r3, #0]
 80198a6:	3301      	adds	r3, #1
 80198a8:	4a3c      	ldr	r2, [pc, #240]	@ (801999c <xTaskIncrementTick+0x15c>)
 80198aa:	6013      	str	r3, [r2, #0]
 80198ac:	f000 fada 	bl	8019e64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80198b0:	4b3b      	ldr	r3, [pc, #236]	@ (80199a0 <xTaskIncrementTick+0x160>)
 80198b2:	681b      	ldr	r3, [r3, #0]
 80198b4:	693a      	ldr	r2, [r7, #16]
 80198b6:	429a      	cmp	r2, r3
 80198b8:	d348      	bcc.n	801994c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80198ba:	4b36      	ldr	r3, [pc, #216]	@ (8019994 <xTaskIncrementTick+0x154>)
 80198bc:	681b      	ldr	r3, [r3, #0]
 80198be:	681b      	ldr	r3, [r3, #0]
 80198c0:	2b00      	cmp	r3, #0
 80198c2:	d104      	bne.n	80198ce <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80198c4:	4b36      	ldr	r3, [pc, #216]	@ (80199a0 <xTaskIncrementTick+0x160>)
 80198c6:	f04f 32ff 	mov.w	r2, #4294967295
 80198ca:	601a      	str	r2, [r3, #0]
					break;
 80198cc:	e03e      	b.n	801994c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80198ce:	4b31      	ldr	r3, [pc, #196]	@ (8019994 <xTaskIncrementTick+0x154>)
 80198d0:	681b      	ldr	r3, [r3, #0]
 80198d2:	68db      	ldr	r3, [r3, #12]
 80198d4:	68db      	ldr	r3, [r3, #12]
 80198d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80198d8:	68bb      	ldr	r3, [r7, #8]
 80198da:	685b      	ldr	r3, [r3, #4]
 80198dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80198de:	693a      	ldr	r2, [r7, #16]
 80198e0:	687b      	ldr	r3, [r7, #4]
 80198e2:	429a      	cmp	r2, r3
 80198e4:	d203      	bcs.n	80198ee <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80198e6:	4a2e      	ldr	r2, [pc, #184]	@ (80199a0 <xTaskIncrementTick+0x160>)
 80198e8:	687b      	ldr	r3, [r7, #4]
 80198ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80198ec:	e02e      	b.n	801994c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80198ee:	68bb      	ldr	r3, [r7, #8]
 80198f0:	3304      	adds	r3, #4
 80198f2:	4618      	mov	r0, r3
 80198f4:	f7fe fc0e 	bl	8018114 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80198f8:	68bb      	ldr	r3, [r7, #8]
 80198fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	d004      	beq.n	801990a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019900:	68bb      	ldr	r3, [r7, #8]
 8019902:	3318      	adds	r3, #24
 8019904:	4618      	mov	r0, r3
 8019906:	f7fe fc05 	bl	8018114 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801990a:	68bb      	ldr	r3, [r7, #8]
 801990c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801990e:	2201      	movs	r2, #1
 8019910:	409a      	lsls	r2, r3
 8019912:	4b24      	ldr	r3, [pc, #144]	@ (80199a4 <xTaskIncrementTick+0x164>)
 8019914:	681b      	ldr	r3, [r3, #0]
 8019916:	4313      	orrs	r3, r2
 8019918:	4a22      	ldr	r2, [pc, #136]	@ (80199a4 <xTaskIncrementTick+0x164>)
 801991a:	6013      	str	r3, [r2, #0]
 801991c:	68bb      	ldr	r3, [r7, #8]
 801991e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019920:	4613      	mov	r3, r2
 8019922:	009b      	lsls	r3, r3, #2
 8019924:	4413      	add	r3, r2
 8019926:	009b      	lsls	r3, r3, #2
 8019928:	4a1f      	ldr	r2, [pc, #124]	@ (80199a8 <xTaskIncrementTick+0x168>)
 801992a:	441a      	add	r2, r3
 801992c:	68bb      	ldr	r3, [r7, #8]
 801992e:	3304      	adds	r3, #4
 8019930:	4619      	mov	r1, r3
 8019932:	4610      	mov	r0, r2
 8019934:	f7fe fb91 	bl	801805a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019938:	68bb      	ldr	r3, [r7, #8]
 801993a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801993c:	4b1b      	ldr	r3, [pc, #108]	@ (80199ac <xTaskIncrementTick+0x16c>)
 801993e:	681b      	ldr	r3, [r3, #0]
 8019940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019942:	429a      	cmp	r2, r3
 8019944:	d3b9      	bcc.n	80198ba <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8019946:	2301      	movs	r3, #1
 8019948:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801994a:	e7b6      	b.n	80198ba <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801994c:	4b17      	ldr	r3, [pc, #92]	@ (80199ac <xTaskIncrementTick+0x16c>)
 801994e:	681b      	ldr	r3, [r3, #0]
 8019950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019952:	4915      	ldr	r1, [pc, #84]	@ (80199a8 <xTaskIncrementTick+0x168>)
 8019954:	4613      	mov	r3, r2
 8019956:	009b      	lsls	r3, r3, #2
 8019958:	4413      	add	r3, r2
 801995a:	009b      	lsls	r3, r3, #2
 801995c:	440b      	add	r3, r1
 801995e:	681b      	ldr	r3, [r3, #0]
 8019960:	2b01      	cmp	r3, #1
 8019962:	d907      	bls.n	8019974 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8019964:	2301      	movs	r3, #1
 8019966:	617b      	str	r3, [r7, #20]
 8019968:	e004      	b.n	8019974 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801996a:	4b11      	ldr	r3, [pc, #68]	@ (80199b0 <xTaskIncrementTick+0x170>)
 801996c:	681b      	ldr	r3, [r3, #0]
 801996e:	3301      	adds	r3, #1
 8019970:	4a0f      	ldr	r2, [pc, #60]	@ (80199b0 <xTaskIncrementTick+0x170>)
 8019972:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8019974:	4b0f      	ldr	r3, [pc, #60]	@ (80199b4 <xTaskIncrementTick+0x174>)
 8019976:	681b      	ldr	r3, [r3, #0]
 8019978:	2b00      	cmp	r3, #0
 801997a:	d001      	beq.n	8019980 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 801997c:	2301      	movs	r3, #1
 801997e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8019980:	697b      	ldr	r3, [r7, #20]
}
 8019982:	4618      	mov	r0, r3
 8019984:	3718      	adds	r7, #24
 8019986:	46bd      	mov	sp, r7
 8019988:	bd80      	pop	{r7, pc}
 801998a:	bf00      	nop
 801998c:	2000257c 	.word	0x2000257c
 8019990:	20002558 	.word	0x20002558
 8019994:	2000250c 	.word	0x2000250c
 8019998:	20002510 	.word	0x20002510
 801999c:	2000256c 	.word	0x2000256c
 80199a0:	20002574 	.word	0x20002574
 80199a4:	2000255c 	.word	0x2000255c
 80199a8:	20002458 	.word	0x20002458
 80199ac:	20002454 	.word	0x20002454
 80199b0:	20002564 	.word	0x20002564
 80199b4:	20002568 	.word	0x20002568

080199b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80199b8:	b580      	push	{r7, lr}
 80199ba:	b088      	sub	sp, #32
 80199bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80199be:	4b3b      	ldr	r3, [pc, #236]	@ (8019aac <vTaskSwitchContext+0xf4>)
 80199c0:	681b      	ldr	r3, [r3, #0]
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	d003      	beq.n	80199ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80199c6:	4b3a      	ldr	r3, [pc, #232]	@ (8019ab0 <vTaskSwitchContext+0xf8>)
 80199c8:	2201      	movs	r2, #1
 80199ca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80199cc:	e069      	b.n	8019aa2 <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 80199ce:	4b38      	ldr	r3, [pc, #224]	@ (8019ab0 <vTaskSwitchContext+0xf8>)
 80199d0:	2200      	movs	r2, #0
 80199d2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80199d4:	4b37      	ldr	r3, [pc, #220]	@ (8019ab4 <vTaskSwitchContext+0xfc>)
 80199d6:	681b      	ldr	r3, [r3, #0]
 80199d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80199da:	61fb      	str	r3, [r7, #28]
 80199dc:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 80199e0:	61bb      	str	r3, [r7, #24]
 80199e2:	69fb      	ldr	r3, [r7, #28]
 80199e4:	681b      	ldr	r3, [r3, #0]
 80199e6:	69ba      	ldr	r2, [r7, #24]
 80199e8:	429a      	cmp	r2, r3
 80199ea:	d111      	bne.n	8019a10 <vTaskSwitchContext+0x58>
 80199ec:	69fb      	ldr	r3, [r7, #28]
 80199ee:	3304      	adds	r3, #4
 80199f0:	681b      	ldr	r3, [r3, #0]
 80199f2:	69ba      	ldr	r2, [r7, #24]
 80199f4:	429a      	cmp	r2, r3
 80199f6:	d10b      	bne.n	8019a10 <vTaskSwitchContext+0x58>
 80199f8:	69fb      	ldr	r3, [r7, #28]
 80199fa:	3308      	adds	r3, #8
 80199fc:	681b      	ldr	r3, [r3, #0]
 80199fe:	69ba      	ldr	r2, [r7, #24]
 8019a00:	429a      	cmp	r2, r3
 8019a02:	d105      	bne.n	8019a10 <vTaskSwitchContext+0x58>
 8019a04:	69fb      	ldr	r3, [r7, #28]
 8019a06:	330c      	adds	r3, #12
 8019a08:	681b      	ldr	r3, [r3, #0]
 8019a0a:	69ba      	ldr	r2, [r7, #24]
 8019a0c:	429a      	cmp	r2, r3
 8019a0e:	d008      	beq.n	8019a22 <vTaskSwitchContext+0x6a>
 8019a10:	4b28      	ldr	r3, [pc, #160]	@ (8019ab4 <vTaskSwitchContext+0xfc>)
 8019a12:	681a      	ldr	r2, [r3, #0]
 8019a14:	4b27      	ldr	r3, [pc, #156]	@ (8019ab4 <vTaskSwitchContext+0xfc>)
 8019a16:	681b      	ldr	r3, [r3, #0]
 8019a18:	3334      	adds	r3, #52	@ 0x34
 8019a1a:	4619      	mov	r1, r3
 8019a1c:	4610      	mov	r0, r2
 8019a1e:	f7e7 fed3 	bl	80017c8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019a22:	4b25      	ldr	r3, [pc, #148]	@ (8019ab8 <vTaskSwitchContext+0x100>)
 8019a24:	681b      	ldr	r3, [r3, #0]
 8019a26:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8019a28:	68fb      	ldr	r3, [r7, #12]
 8019a2a:	fab3 f383 	clz	r3, r3
 8019a2e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8019a30:	7afb      	ldrb	r3, [r7, #11]
 8019a32:	f1c3 031f 	rsb	r3, r3, #31
 8019a36:	617b      	str	r3, [r7, #20]
 8019a38:	4920      	ldr	r1, [pc, #128]	@ (8019abc <vTaskSwitchContext+0x104>)
 8019a3a:	697a      	ldr	r2, [r7, #20]
 8019a3c:	4613      	mov	r3, r2
 8019a3e:	009b      	lsls	r3, r3, #2
 8019a40:	4413      	add	r3, r2
 8019a42:	009b      	lsls	r3, r3, #2
 8019a44:	440b      	add	r3, r1
 8019a46:	681b      	ldr	r3, [r3, #0]
 8019a48:	2b00      	cmp	r3, #0
 8019a4a:	d10d      	bne.n	8019a68 <vTaskSwitchContext+0xb0>
	__asm volatile
 8019a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019a50:	b672      	cpsid	i
 8019a52:	f383 8811 	msr	BASEPRI, r3
 8019a56:	f3bf 8f6f 	isb	sy
 8019a5a:	f3bf 8f4f 	dsb	sy
 8019a5e:	b662      	cpsie	i
 8019a60:	607b      	str	r3, [r7, #4]
}
 8019a62:	bf00      	nop
 8019a64:	bf00      	nop
 8019a66:	e7fd      	b.n	8019a64 <vTaskSwitchContext+0xac>
 8019a68:	697a      	ldr	r2, [r7, #20]
 8019a6a:	4613      	mov	r3, r2
 8019a6c:	009b      	lsls	r3, r3, #2
 8019a6e:	4413      	add	r3, r2
 8019a70:	009b      	lsls	r3, r3, #2
 8019a72:	4a12      	ldr	r2, [pc, #72]	@ (8019abc <vTaskSwitchContext+0x104>)
 8019a74:	4413      	add	r3, r2
 8019a76:	613b      	str	r3, [r7, #16]
 8019a78:	693b      	ldr	r3, [r7, #16]
 8019a7a:	685b      	ldr	r3, [r3, #4]
 8019a7c:	685a      	ldr	r2, [r3, #4]
 8019a7e:	693b      	ldr	r3, [r7, #16]
 8019a80:	605a      	str	r2, [r3, #4]
 8019a82:	693b      	ldr	r3, [r7, #16]
 8019a84:	685a      	ldr	r2, [r3, #4]
 8019a86:	693b      	ldr	r3, [r7, #16]
 8019a88:	3308      	adds	r3, #8
 8019a8a:	429a      	cmp	r2, r3
 8019a8c:	d104      	bne.n	8019a98 <vTaskSwitchContext+0xe0>
 8019a8e:	693b      	ldr	r3, [r7, #16]
 8019a90:	685b      	ldr	r3, [r3, #4]
 8019a92:	685a      	ldr	r2, [r3, #4]
 8019a94:	693b      	ldr	r3, [r7, #16]
 8019a96:	605a      	str	r2, [r3, #4]
 8019a98:	693b      	ldr	r3, [r7, #16]
 8019a9a:	685b      	ldr	r3, [r3, #4]
 8019a9c:	68db      	ldr	r3, [r3, #12]
 8019a9e:	4a05      	ldr	r2, [pc, #20]	@ (8019ab4 <vTaskSwitchContext+0xfc>)
 8019aa0:	6013      	str	r3, [r2, #0]
}
 8019aa2:	bf00      	nop
 8019aa4:	3720      	adds	r7, #32
 8019aa6:	46bd      	mov	sp, r7
 8019aa8:	bd80      	pop	{r7, pc}
 8019aaa:	bf00      	nop
 8019aac:	2000257c 	.word	0x2000257c
 8019ab0:	20002568 	.word	0x20002568
 8019ab4:	20002454 	.word	0x20002454
 8019ab8:	2000255c 	.word	0x2000255c
 8019abc:	20002458 	.word	0x20002458

08019ac0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8019ac0:	b580      	push	{r7, lr}
 8019ac2:	b084      	sub	sp, #16
 8019ac4:	af00      	add	r7, sp, #0
 8019ac6:	6078      	str	r0, [r7, #4]
 8019ac8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8019aca:	687b      	ldr	r3, [r7, #4]
 8019acc:	2b00      	cmp	r3, #0
 8019ace:	d10d      	bne.n	8019aec <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8019ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019ad4:	b672      	cpsid	i
 8019ad6:	f383 8811 	msr	BASEPRI, r3
 8019ada:	f3bf 8f6f 	isb	sy
 8019ade:	f3bf 8f4f 	dsb	sy
 8019ae2:	b662      	cpsie	i
 8019ae4:	60fb      	str	r3, [r7, #12]
}
 8019ae6:	bf00      	nop
 8019ae8:	bf00      	nop
 8019aea:	e7fd      	b.n	8019ae8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019aec:	4b07      	ldr	r3, [pc, #28]	@ (8019b0c <vTaskPlaceOnEventList+0x4c>)
 8019aee:	681b      	ldr	r3, [r3, #0]
 8019af0:	3318      	adds	r3, #24
 8019af2:	4619      	mov	r1, r3
 8019af4:	6878      	ldr	r0, [r7, #4]
 8019af6:	f7fe fad4 	bl	80180a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8019afa:	2101      	movs	r1, #1
 8019afc:	6838      	ldr	r0, [r7, #0]
 8019afe:	f000 fbaf 	bl	801a260 <prvAddCurrentTaskToDelayedList>
}
 8019b02:	bf00      	nop
 8019b04:	3710      	adds	r7, #16
 8019b06:	46bd      	mov	sp, r7
 8019b08:	bd80      	pop	{r7, pc}
 8019b0a:	bf00      	nop
 8019b0c:	20002454 	.word	0x20002454

08019b10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8019b10:	b580      	push	{r7, lr}
 8019b12:	b086      	sub	sp, #24
 8019b14:	af00      	add	r7, sp, #0
 8019b16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019b18:	687b      	ldr	r3, [r7, #4]
 8019b1a:	68db      	ldr	r3, [r3, #12]
 8019b1c:	68db      	ldr	r3, [r3, #12]
 8019b1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8019b20:	693b      	ldr	r3, [r7, #16]
 8019b22:	2b00      	cmp	r3, #0
 8019b24:	d10d      	bne.n	8019b42 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8019b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019b2a:	b672      	cpsid	i
 8019b2c:	f383 8811 	msr	BASEPRI, r3
 8019b30:	f3bf 8f6f 	isb	sy
 8019b34:	f3bf 8f4f 	dsb	sy
 8019b38:	b662      	cpsie	i
 8019b3a:	60fb      	str	r3, [r7, #12]
}
 8019b3c:	bf00      	nop
 8019b3e:	bf00      	nop
 8019b40:	e7fd      	b.n	8019b3e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8019b42:	693b      	ldr	r3, [r7, #16]
 8019b44:	3318      	adds	r3, #24
 8019b46:	4618      	mov	r0, r3
 8019b48:	f7fe fae4 	bl	8018114 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8019bc4 <xTaskRemoveFromEventList+0xb4>)
 8019b4e:	681b      	ldr	r3, [r3, #0]
 8019b50:	2b00      	cmp	r3, #0
 8019b52:	d11c      	bne.n	8019b8e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8019b54:	693b      	ldr	r3, [r7, #16]
 8019b56:	3304      	adds	r3, #4
 8019b58:	4618      	mov	r0, r3
 8019b5a:	f7fe fadb 	bl	8018114 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8019b5e:	693b      	ldr	r3, [r7, #16]
 8019b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019b62:	2201      	movs	r2, #1
 8019b64:	409a      	lsls	r2, r3
 8019b66:	4b18      	ldr	r3, [pc, #96]	@ (8019bc8 <xTaskRemoveFromEventList+0xb8>)
 8019b68:	681b      	ldr	r3, [r3, #0]
 8019b6a:	4313      	orrs	r3, r2
 8019b6c:	4a16      	ldr	r2, [pc, #88]	@ (8019bc8 <xTaskRemoveFromEventList+0xb8>)
 8019b6e:	6013      	str	r3, [r2, #0]
 8019b70:	693b      	ldr	r3, [r7, #16]
 8019b72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019b74:	4613      	mov	r3, r2
 8019b76:	009b      	lsls	r3, r3, #2
 8019b78:	4413      	add	r3, r2
 8019b7a:	009b      	lsls	r3, r3, #2
 8019b7c:	4a13      	ldr	r2, [pc, #76]	@ (8019bcc <xTaskRemoveFromEventList+0xbc>)
 8019b7e:	441a      	add	r2, r3
 8019b80:	693b      	ldr	r3, [r7, #16]
 8019b82:	3304      	adds	r3, #4
 8019b84:	4619      	mov	r1, r3
 8019b86:	4610      	mov	r0, r2
 8019b88:	f7fe fa67 	bl	801805a <vListInsertEnd>
 8019b8c:	e005      	b.n	8019b9a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8019b8e:	693b      	ldr	r3, [r7, #16]
 8019b90:	3318      	adds	r3, #24
 8019b92:	4619      	mov	r1, r3
 8019b94:	480e      	ldr	r0, [pc, #56]	@ (8019bd0 <xTaskRemoveFromEventList+0xc0>)
 8019b96:	f7fe fa60 	bl	801805a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8019b9a:	693b      	ldr	r3, [r7, #16]
 8019b9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8019bd4 <xTaskRemoveFromEventList+0xc4>)
 8019ba0:	681b      	ldr	r3, [r3, #0]
 8019ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019ba4:	429a      	cmp	r2, r3
 8019ba6:	d905      	bls.n	8019bb4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8019ba8:	2301      	movs	r3, #1
 8019baa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8019bac:	4b0a      	ldr	r3, [pc, #40]	@ (8019bd8 <xTaskRemoveFromEventList+0xc8>)
 8019bae:	2201      	movs	r2, #1
 8019bb0:	601a      	str	r2, [r3, #0]
 8019bb2:	e001      	b.n	8019bb8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8019bb4:	2300      	movs	r3, #0
 8019bb6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8019bb8:	697b      	ldr	r3, [r7, #20]
}
 8019bba:	4618      	mov	r0, r3
 8019bbc:	3718      	adds	r7, #24
 8019bbe:	46bd      	mov	sp, r7
 8019bc0:	bd80      	pop	{r7, pc}
 8019bc2:	bf00      	nop
 8019bc4:	2000257c 	.word	0x2000257c
 8019bc8:	2000255c 	.word	0x2000255c
 8019bcc:	20002458 	.word	0x20002458
 8019bd0:	20002514 	.word	0x20002514
 8019bd4:	20002454 	.word	0x20002454
 8019bd8:	20002568 	.word	0x20002568

08019bdc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8019bdc:	b480      	push	{r7}
 8019bde:	b083      	sub	sp, #12
 8019be0:	af00      	add	r7, sp, #0
 8019be2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8019be4:	4b06      	ldr	r3, [pc, #24]	@ (8019c00 <vTaskInternalSetTimeOutState+0x24>)
 8019be6:	681a      	ldr	r2, [r3, #0]
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8019bec:	4b05      	ldr	r3, [pc, #20]	@ (8019c04 <vTaskInternalSetTimeOutState+0x28>)
 8019bee:	681a      	ldr	r2, [r3, #0]
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	605a      	str	r2, [r3, #4]
}
 8019bf4:	bf00      	nop
 8019bf6:	370c      	adds	r7, #12
 8019bf8:	46bd      	mov	sp, r7
 8019bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bfe:	4770      	bx	lr
 8019c00:	2000256c 	.word	0x2000256c
 8019c04:	20002558 	.word	0x20002558

08019c08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8019c08:	b580      	push	{r7, lr}
 8019c0a:	b088      	sub	sp, #32
 8019c0c:	af00      	add	r7, sp, #0
 8019c0e:	6078      	str	r0, [r7, #4]
 8019c10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8019c12:	687b      	ldr	r3, [r7, #4]
 8019c14:	2b00      	cmp	r3, #0
 8019c16:	d10d      	bne.n	8019c34 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8019c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019c1c:	b672      	cpsid	i
 8019c1e:	f383 8811 	msr	BASEPRI, r3
 8019c22:	f3bf 8f6f 	isb	sy
 8019c26:	f3bf 8f4f 	dsb	sy
 8019c2a:	b662      	cpsie	i
 8019c2c:	613b      	str	r3, [r7, #16]
}
 8019c2e:	bf00      	nop
 8019c30:	bf00      	nop
 8019c32:	e7fd      	b.n	8019c30 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8019c34:	683b      	ldr	r3, [r7, #0]
 8019c36:	2b00      	cmp	r3, #0
 8019c38:	d10d      	bne.n	8019c56 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8019c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019c3e:	b672      	cpsid	i
 8019c40:	f383 8811 	msr	BASEPRI, r3
 8019c44:	f3bf 8f6f 	isb	sy
 8019c48:	f3bf 8f4f 	dsb	sy
 8019c4c:	b662      	cpsie	i
 8019c4e:	60fb      	str	r3, [r7, #12]
}
 8019c50:	bf00      	nop
 8019c52:	bf00      	nop
 8019c54:	e7fd      	b.n	8019c52 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8019c56:	f000 fc79 	bl	801a54c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8019c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8019cd0 <xTaskCheckForTimeOut+0xc8>)
 8019c5c:	681b      	ldr	r3, [r3, #0]
 8019c5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	685b      	ldr	r3, [r3, #4]
 8019c64:	69ba      	ldr	r2, [r7, #24]
 8019c66:	1ad3      	subs	r3, r2, r3
 8019c68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8019c6a:	683b      	ldr	r3, [r7, #0]
 8019c6c:	681b      	ldr	r3, [r3, #0]
 8019c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019c72:	d102      	bne.n	8019c7a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8019c74:	2300      	movs	r3, #0
 8019c76:	61fb      	str	r3, [r7, #28]
 8019c78:	e023      	b.n	8019cc2 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8019c7a:	687b      	ldr	r3, [r7, #4]
 8019c7c:	681a      	ldr	r2, [r3, #0]
 8019c7e:	4b15      	ldr	r3, [pc, #84]	@ (8019cd4 <xTaskCheckForTimeOut+0xcc>)
 8019c80:	681b      	ldr	r3, [r3, #0]
 8019c82:	429a      	cmp	r2, r3
 8019c84:	d007      	beq.n	8019c96 <xTaskCheckForTimeOut+0x8e>
 8019c86:	687b      	ldr	r3, [r7, #4]
 8019c88:	685b      	ldr	r3, [r3, #4]
 8019c8a:	69ba      	ldr	r2, [r7, #24]
 8019c8c:	429a      	cmp	r2, r3
 8019c8e:	d302      	bcc.n	8019c96 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8019c90:	2301      	movs	r3, #1
 8019c92:	61fb      	str	r3, [r7, #28]
 8019c94:	e015      	b.n	8019cc2 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8019c96:	683b      	ldr	r3, [r7, #0]
 8019c98:	681b      	ldr	r3, [r3, #0]
 8019c9a:	697a      	ldr	r2, [r7, #20]
 8019c9c:	429a      	cmp	r2, r3
 8019c9e:	d20b      	bcs.n	8019cb8 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8019ca0:	683b      	ldr	r3, [r7, #0]
 8019ca2:	681a      	ldr	r2, [r3, #0]
 8019ca4:	697b      	ldr	r3, [r7, #20]
 8019ca6:	1ad2      	subs	r2, r2, r3
 8019ca8:	683b      	ldr	r3, [r7, #0]
 8019caa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8019cac:	6878      	ldr	r0, [r7, #4]
 8019cae:	f7ff ff95 	bl	8019bdc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8019cb2:	2300      	movs	r3, #0
 8019cb4:	61fb      	str	r3, [r7, #28]
 8019cb6:	e004      	b.n	8019cc2 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8019cb8:	683b      	ldr	r3, [r7, #0]
 8019cba:	2200      	movs	r2, #0
 8019cbc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8019cbe:	2301      	movs	r3, #1
 8019cc0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8019cc2:	f000 fc79 	bl	801a5b8 <vPortExitCritical>

	return xReturn;
 8019cc6:	69fb      	ldr	r3, [r7, #28]
}
 8019cc8:	4618      	mov	r0, r3
 8019cca:	3720      	adds	r7, #32
 8019ccc:	46bd      	mov	sp, r7
 8019cce:	bd80      	pop	{r7, pc}
 8019cd0:	20002558 	.word	0x20002558
 8019cd4:	2000256c 	.word	0x2000256c

08019cd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8019cd8:	b480      	push	{r7}
 8019cda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8019cdc:	4b03      	ldr	r3, [pc, #12]	@ (8019cec <vTaskMissedYield+0x14>)
 8019cde:	2201      	movs	r2, #1
 8019ce0:	601a      	str	r2, [r3, #0]
}
 8019ce2:	bf00      	nop
 8019ce4:	46bd      	mov	sp, r7
 8019ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cea:	4770      	bx	lr
 8019cec:	20002568 	.word	0x20002568

08019cf0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8019cf0:	b580      	push	{r7, lr}
 8019cf2:	b082      	sub	sp, #8
 8019cf4:	af00      	add	r7, sp, #0
 8019cf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8019cf8:	f000 f854 	bl	8019da4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8019cfc:	4b07      	ldr	r3, [pc, #28]	@ (8019d1c <prvIdleTask+0x2c>)
 8019cfe:	681b      	ldr	r3, [r3, #0]
 8019d00:	2b01      	cmp	r3, #1
 8019d02:	d907      	bls.n	8019d14 <prvIdleTask+0x24>
			{
				taskYIELD();
 8019d04:	4b06      	ldr	r3, [pc, #24]	@ (8019d20 <prvIdleTask+0x30>)
 8019d06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019d0a:	601a      	str	r2, [r3, #0]
 8019d0c:	f3bf 8f4f 	dsb	sy
 8019d10:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8019d14:	f7e7 fd51 	bl	80017ba <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8019d18:	e7ee      	b.n	8019cf8 <prvIdleTask+0x8>
 8019d1a:	bf00      	nop
 8019d1c:	20002458 	.word	0x20002458
 8019d20:	e000ed04 	.word	0xe000ed04

08019d24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8019d24:	b580      	push	{r7, lr}
 8019d26:	b082      	sub	sp, #8
 8019d28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019d2a:	2300      	movs	r3, #0
 8019d2c:	607b      	str	r3, [r7, #4]
 8019d2e:	e00c      	b.n	8019d4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8019d30:	687a      	ldr	r2, [r7, #4]
 8019d32:	4613      	mov	r3, r2
 8019d34:	009b      	lsls	r3, r3, #2
 8019d36:	4413      	add	r3, r2
 8019d38:	009b      	lsls	r3, r3, #2
 8019d3a:	4a12      	ldr	r2, [pc, #72]	@ (8019d84 <prvInitialiseTaskLists+0x60>)
 8019d3c:	4413      	add	r3, r2
 8019d3e:	4618      	mov	r0, r3
 8019d40:	f7fe f95e 	bl	8018000 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019d44:	687b      	ldr	r3, [r7, #4]
 8019d46:	3301      	adds	r3, #1
 8019d48:	607b      	str	r3, [r7, #4]
 8019d4a:	687b      	ldr	r3, [r7, #4]
 8019d4c:	2b06      	cmp	r3, #6
 8019d4e:	d9ef      	bls.n	8019d30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8019d50:	480d      	ldr	r0, [pc, #52]	@ (8019d88 <prvInitialiseTaskLists+0x64>)
 8019d52:	f7fe f955 	bl	8018000 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8019d56:	480d      	ldr	r0, [pc, #52]	@ (8019d8c <prvInitialiseTaskLists+0x68>)
 8019d58:	f7fe f952 	bl	8018000 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8019d5c:	480c      	ldr	r0, [pc, #48]	@ (8019d90 <prvInitialiseTaskLists+0x6c>)
 8019d5e:	f7fe f94f 	bl	8018000 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8019d62:	480c      	ldr	r0, [pc, #48]	@ (8019d94 <prvInitialiseTaskLists+0x70>)
 8019d64:	f7fe f94c 	bl	8018000 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8019d68:	480b      	ldr	r0, [pc, #44]	@ (8019d98 <prvInitialiseTaskLists+0x74>)
 8019d6a:	f7fe f949 	bl	8018000 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8019d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8019d9c <prvInitialiseTaskLists+0x78>)
 8019d70:	4a05      	ldr	r2, [pc, #20]	@ (8019d88 <prvInitialiseTaskLists+0x64>)
 8019d72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8019d74:	4b0a      	ldr	r3, [pc, #40]	@ (8019da0 <prvInitialiseTaskLists+0x7c>)
 8019d76:	4a05      	ldr	r2, [pc, #20]	@ (8019d8c <prvInitialiseTaskLists+0x68>)
 8019d78:	601a      	str	r2, [r3, #0]
}
 8019d7a:	bf00      	nop
 8019d7c:	3708      	adds	r7, #8
 8019d7e:	46bd      	mov	sp, r7
 8019d80:	bd80      	pop	{r7, pc}
 8019d82:	bf00      	nop
 8019d84:	20002458 	.word	0x20002458
 8019d88:	200024e4 	.word	0x200024e4
 8019d8c:	200024f8 	.word	0x200024f8
 8019d90:	20002514 	.word	0x20002514
 8019d94:	20002528 	.word	0x20002528
 8019d98:	20002540 	.word	0x20002540
 8019d9c:	2000250c 	.word	0x2000250c
 8019da0:	20002510 	.word	0x20002510

08019da4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8019da4:	b580      	push	{r7, lr}
 8019da6:	b082      	sub	sp, #8
 8019da8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8019daa:	e019      	b.n	8019de0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8019dac:	f000 fbce 	bl	801a54c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019db0:	4b10      	ldr	r3, [pc, #64]	@ (8019df4 <prvCheckTasksWaitingTermination+0x50>)
 8019db2:	68db      	ldr	r3, [r3, #12]
 8019db4:	68db      	ldr	r3, [r3, #12]
 8019db6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019db8:	687b      	ldr	r3, [r7, #4]
 8019dba:	3304      	adds	r3, #4
 8019dbc:	4618      	mov	r0, r3
 8019dbe:	f7fe f9a9 	bl	8018114 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8019dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8019df8 <prvCheckTasksWaitingTermination+0x54>)
 8019dc4:	681b      	ldr	r3, [r3, #0]
 8019dc6:	3b01      	subs	r3, #1
 8019dc8:	4a0b      	ldr	r2, [pc, #44]	@ (8019df8 <prvCheckTasksWaitingTermination+0x54>)
 8019dca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8019dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8019dfc <prvCheckTasksWaitingTermination+0x58>)
 8019dce:	681b      	ldr	r3, [r3, #0]
 8019dd0:	3b01      	subs	r3, #1
 8019dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8019dfc <prvCheckTasksWaitingTermination+0x58>)
 8019dd4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8019dd6:	f000 fbef 	bl	801a5b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8019dda:	6878      	ldr	r0, [r7, #4]
 8019ddc:	f000 f810 	bl	8019e00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8019de0:	4b06      	ldr	r3, [pc, #24]	@ (8019dfc <prvCheckTasksWaitingTermination+0x58>)
 8019de2:	681b      	ldr	r3, [r3, #0]
 8019de4:	2b00      	cmp	r3, #0
 8019de6:	d1e1      	bne.n	8019dac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8019de8:	bf00      	nop
 8019dea:	bf00      	nop
 8019dec:	3708      	adds	r7, #8
 8019dee:	46bd      	mov	sp, r7
 8019df0:	bd80      	pop	{r7, pc}
 8019df2:	bf00      	nop
 8019df4:	20002528 	.word	0x20002528
 8019df8:	20002554 	.word	0x20002554
 8019dfc:	2000253c 	.word	0x2000253c

08019e00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8019e00:	b580      	push	{r7, lr}
 8019e02:	b084      	sub	sp, #16
 8019e04:	af00      	add	r7, sp, #0
 8019e06:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8019e0e:	2b00      	cmp	r3, #0
 8019e10:	d108      	bne.n	8019e24 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8019e12:	687b      	ldr	r3, [r7, #4]
 8019e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019e16:	4618      	mov	r0, r3
 8019e18:	f000 fd98 	bl	801a94c <vPortFree>
				vPortFree( pxTCB );
 8019e1c:	6878      	ldr	r0, [r7, #4]
 8019e1e:	f000 fd95 	bl	801a94c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8019e22:	e01b      	b.n	8019e5c <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8019e2a:	2b01      	cmp	r3, #1
 8019e2c:	d103      	bne.n	8019e36 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8019e2e:	6878      	ldr	r0, [r7, #4]
 8019e30:	f000 fd8c 	bl	801a94c <vPortFree>
	}
 8019e34:	e012      	b.n	8019e5c <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8019e36:	687b      	ldr	r3, [r7, #4]
 8019e38:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8019e3c:	2b02      	cmp	r3, #2
 8019e3e:	d00d      	beq.n	8019e5c <prvDeleteTCB+0x5c>
	__asm volatile
 8019e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019e44:	b672      	cpsid	i
 8019e46:	f383 8811 	msr	BASEPRI, r3
 8019e4a:	f3bf 8f6f 	isb	sy
 8019e4e:	f3bf 8f4f 	dsb	sy
 8019e52:	b662      	cpsie	i
 8019e54:	60fb      	str	r3, [r7, #12]
}
 8019e56:	bf00      	nop
 8019e58:	bf00      	nop
 8019e5a:	e7fd      	b.n	8019e58 <prvDeleteTCB+0x58>
	}
 8019e5c:	bf00      	nop
 8019e5e:	3710      	adds	r7, #16
 8019e60:	46bd      	mov	sp, r7
 8019e62:	bd80      	pop	{r7, pc}

08019e64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8019e64:	b480      	push	{r7}
 8019e66:	b083      	sub	sp, #12
 8019e68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8019e9c <prvResetNextTaskUnblockTime+0x38>)
 8019e6c:	681b      	ldr	r3, [r3, #0]
 8019e6e:	681b      	ldr	r3, [r3, #0]
 8019e70:	2b00      	cmp	r3, #0
 8019e72:	d104      	bne.n	8019e7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8019e74:	4b0a      	ldr	r3, [pc, #40]	@ (8019ea0 <prvResetNextTaskUnblockTime+0x3c>)
 8019e76:	f04f 32ff 	mov.w	r2, #4294967295
 8019e7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8019e7c:	e008      	b.n	8019e90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019e7e:	4b07      	ldr	r3, [pc, #28]	@ (8019e9c <prvResetNextTaskUnblockTime+0x38>)
 8019e80:	681b      	ldr	r3, [r3, #0]
 8019e82:	68db      	ldr	r3, [r3, #12]
 8019e84:	68db      	ldr	r3, [r3, #12]
 8019e86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8019e88:	687b      	ldr	r3, [r7, #4]
 8019e8a:	685b      	ldr	r3, [r3, #4]
 8019e8c:	4a04      	ldr	r2, [pc, #16]	@ (8019ea0 <prvResetNextTaskUnblockTime+0x3c>)
 8019e8e:	6013      	str	r3, [r2, #0]
}
 8019e90:	bf00      	nop
 8019e92:	370c      	adds	r7, #12
 8019e94:	46bd      	mov	sp, r7
 8019e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e9a:	4770      	bx	lr
 8019e9c:	2000250c 	.word	0x2000250c
 8019ea0:	20002574 	.word	0x20002574

08019ea4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8019ea4:	b480      	push	{r7}
 8019ea6:	b083      	sub	sp, #12
 8019ea8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8019eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8019ed8 <xTaskGetSchedulerState+0x34>)
 8019eac:	681b      	ldr	r3, [r3, #0]
 8019eae:	2b00      	cmp	r3, #0
 8019eb0:	d102      	bne.n	8019eb8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8019eb2:	2301      	movs	r3, #1
 8019eb4:	607b      	str	r3, [r7, #4]
 8019eb6:	e008      	b.n	8019eca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019eb8:	4b08      	ldr	r3, [pc, #32]	@ (8019edc <xTaskGetSchedulerState+0x38>)
 8019eba:	681b      	ldr	r3, [r3, #0]
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	d102      	bne.n	8019ec6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8019ec0:	2302      	movs	r3, #2
 8019ec2:	607b      	str	r3, [r7, #4]
 8019ec4:	e001      	b.n	8019eca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8019ec6:	2300      	movs	r3, #0
 8019ec8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8019eca:	687b      	ldr	r3, [r7, #4]
	}
 8019ecc:	4618      	mov	r0, r3
 8019ece:	370c      	adds	r7, #12
 8019ed0:	46bd      	mov	sp, r7
 8019ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ed6:	4770      	bx	lr
 8019ed8:	20002560 	.word	0x20002560
 8019edc:	2000257c 	.word	0x2000257c

08019ee0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8019ee0:	b580      	push	{r7, lr}
 8019ee2:	b084      	sub	sp, #16
 8019ee4:	af00      	add	r7, sp, #0
 8019ee6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8019eec:	2300      	movs	r3, #0
 8019eee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	2b00      	cmp	r3, #0
 8019ef4:	d069      	beq.n	8019fca <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8019ef6:	68bb      	ldr	r3, [r7, #8]
 8019ef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019efa:	4b36      	ldr	r3, [pc, #216]	@ (8019fd4 <xTaskPriorityInherit+0xf4>)
 8019efc:	681b      	ldr	r3, [r3, #0]
 8019efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019f00:	429a      	cmp	r2, r3
 8019f02:	d259      	bcs.n	8019fb8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8019f04:	68bb      	ldr	r3, [r7, #8]
 8019f06:	699b      	ldr	r3, [r3, #24]
 8019f08:	2b00      	cmp	r3, #0
 8019f0a:	db06      	blt.n	8019f1a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019f0c:	4b31      	ldr	r3, [pc, #196]	@ (8019fd4 <xTaskPriorityInherit+0xf4>)
 8019f0e:	681b      	ldr	r3, [r3, #0]
 8019f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019f12:	f1c3 0207 	rsb	r2, r3, #7
 8019f16:	68bb      	ldr	r3, [r7, #8]
 8019f18:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8019f1a:	68bb      	ldr	r3, [r7, #8]
 8019f1c:	6959      	ldr	r1, [r3, #20]
 8019f1e:	68bb      	ldr	r3, [r7, #8]
 8019f20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019f22:	4613      	mov	r3, r2
 8019f24:	009b      	lsls	r3, r3, #2
 8019f26:	4413      	add	r3, r2
 8019f28:	009b      	lsls	r3, r3, #2
 8019f2a:	4a2b      	ldr	r2, [pc, #172]	@ (8019fd8 <xTaskPriorityInherit+0xf8>)
 8019f2c:	4413      	add	r3, r2
 8019f2e:	4299      	cmp	r1, r3
 8019f30:	d13a      	bne.n	8019fa8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019f32:	68bb      	ldr	r3, [r7, #8]
 8019f34:	3304      	adds	r3, #4
 8019f36:	4618      	mov	r0, r3
 8019f38:	f7fe f8ec 	bl	8018114 <uxListRemove>
 8019f3c:	4603      	mov	r3, r0
 8019f3e:	2b00      	cmp	r3, #0
 8019f40:	d115      	bne.n	8019f6e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8019f42:	68bb      	ldr	r3, [r7, #8]
 8019f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019f46:	4924      	ldr	r1, [pc, #144]	@ (8019fd8 <xTaskPriorityInherit+0xf8>)
 8019f48:	4613      	mov	r3, r2
 8019f4a:	009b      	lsls	r3, r3, #2
 8019f4c:	4413      	add	r3, r2
 8019f4e:	009b      	lsls	r3, r3, #2
 8019f50:	440b      	add	r3, r1
 8019f52:	681b      	ldr	r3, [r3, #0]
 8019f54:	2b00      	cmp	r3, #0
 8019f56:	d10a      	bne.n	8019f6e <xTaskPriorityInherit+0x8e>
 8019f58:	68bb      	ldr	r3, [r7, #8]
 8019f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019f5c:	2201      	movs	r2, #1
 8019f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8019f62:	43da      	mvns	r2, r3
 8019f64:	4b1d      	ldr	r3, [pc, #116]	@ (8019fdc <xTaskPriorityInherit+0xfc>)
 8019f66:	681b      	ldr	r3, [r3, #0]
 8019f68:	4013      	ands	r3, r2
 8019f6a:	4a1c      	ldr	r2, [pc, #112]	@ (8019fdc <xTaskPriorityInherit+0xfc>)
 8019f6c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8019f6e:	4b19      	ldr	r3, [pc, #100]	@ (8019fd4 <xTaskPriorityInherit+0xf4>)
 8019f70:	681b      	ldr	r3, [r3, #0]
 8019f72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019f74:	68bb      	ldr	r3, [r7, #8]
 8019f76:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8019f78:	68bb      	ldr	r3, [r7, #8]
 8019f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019f7c:	2201      	movs	r2, #1
 8019f7e:	409a      	lsls	r2, r3
 8019f80:	4b16      	ldr	r3, [pc, #88]	@ (8019fdc <xTaskPriorityInherit+0xfc>)
 8019f82:	681b      	ldr	r3, [r3, #0]
 8019f84:	4313      	orrs	r3, r2
 8019f86:	4a15      	ldr	r2, [pc, #84]	@ (8019fdc <xTaskPriorityInherit+0xfc>)
 8019f88:	6013      	str	r3, [r2, #0]
 8019f8a:	68bb      	ldr	r3, [r7, #8]
 8019f8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019f8e:	4613      	mov	r3, r2
 8019f90:	009b      	lsls	r3, r3, #2
 8019f92:	4413      	add	r3, r2
 8019f94:	009b      	lsls	r3, r3, #2
 8019f96:	4a10      	ldr	r2, [pc, #64]	@ (8019fd8 <xTaskPriorityInherit+0xf8>)
 8019f98:	441a      	add	r2, r3
 8019f9a:	68bb      	ldr	r3, [r7, #8]
 8019f9c:	3304      	adds	r3, #4
 8019f9e:	4619      	mov	r1, r3
 8019fa0:	4610      	mov	r0, r2
 8019fa2:	f7fe f85a 	bl	801805a <vListInsertEnd>
 8019fa6:	e004      	b.n	8019fb2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8019fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8019fd4 <xTaskPriorityInherit+0xf4>)
 8019faa:	681b      	ldr	r3, [r3, #0]
 8019fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019fae:	68bb      	ldr	r3, [r7, #8]
 8019fb0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8019fb2:	2301      	movs	r3, #1
 8019fb4:	60fb      	str	r3, [r7, #12]
 8019fb6:	e008      	b.n	8019fca <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8019fb8:	68bb      	ldr	r3, [r7, #8]
 8019fba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8019fbc:	4b05      	ldr	r3, [pc, #20]	@ (8019fd4 <xTaskPriorityInherit+0xf4>)
 8019fbe:	681b      	ldr	r3, [r3, #0]
 8019fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019fc2:	429a      	cmp	r2, r3
 8019fc4:	d201      	bcs.n	8019fca <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8019fc6:	2301      	movs	r3, #1
 8019fc8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8019fca:	68fb      	ldr	r3, [r7, #12]
	}
 8019fcc:	4618      	mov	r0, r3
 8019fce:	3710      	adds	r7, #16
 8019fd0:	46bd      	mov	sp, r7
 8019fd2:	bd80      	pop	{r7, pc}
 8019fd4:	20002454 	.word	0x20002454
 8019fd8:	20002458 	.word	0x20002458
 8019fdc:	2000255c 	.word	0x2000255c

08019fe0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8019fe0:	b580      	push	{r7, lr}
 8019fe2:	b086      	sub	sp, #24
 8019fe4:	af00      	add	r7, sp, #0
 8019fe6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8019fec:	2300      	movs	r3, #0
 8019fee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8019ff0:	687b      	ldr	r3, [r7, #4]
 8019ff2:	2b00      	cmp	r3, #0
 8019ff4:	d074      	beq.n	801a0e0 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8019ff6:	4b3d      	ldr	r3, [pc, #244]	@ (801a0ec <xTaskPriorityDisinherit+0x10c>)
 8019ff8:	681b      	ldr	r3, [r3, #0]
 8019ffa:	693a      	ldr	r2, [r7, #16]
 8019ffc:	429a      	cmp	r2, r3
 8019ffe:	d00d      	beq.n	801a01c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 801a000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a004:	b672      	cpsid	i
 801a006:	f383 8811 	msr	BASEPRI, r3
 801a00a:	f3bf 8f6f 	isb	sy
 801a00e:	f3bf 8f4f 	dsb	sy
 801a012:	b662      	cpsie	i
 801a014:	60fb      	str	r3, [r7, #12]
}
 801a016:	bf00      	nop
 801a018:	bf00      	nop
 801a01a:	e7fd      	b.n	801a018 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 801a01c:	693b      	ldr	r3, [r7, #16]
 801a01e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a020:	2b00      	cmp	r3, #0
 801a022:	d10d      	bne.n	801a040 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 801a024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a028:	b672      	cpsid	i
 801a02a:	f383 8811 	msr	BASEPRI, r3
 801a02e:	f3bf 8f6f 	isb	sy
 801a032:	f3bf 8f4f 	dsb	sy
 801a036:	b662      	cpsie	i
 801a038:	60bb      	str	r3, [r7, #8]
}
 801a03a:	bf00      	nop
 801a03c:	bf00      	nop
 801a03e:	e7fd      	b.n	801a03c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 801a040:	693b      	ldr	r3, [r7, #16]
 801a042:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a044:	1e5a      	subs	r2, r3, #1
 801a046:	693b      	ldr	r3, [r7, #16]
 801a048:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801a04a:	693b      	ldr	r3, [r7, #16]
 801a04c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a04e:	693b      	ldr	r3, [r7, #16]
 801a050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a052:	429a      	cmp	r2, r3
 801a054:	d044      	beq.n	801a0e0 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801a056:	693b      	ldr	r3, [r7, #16]
 801a058:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a05a:	2b00      	cmp	r3, #0
 801a05c:	d140      	bne.n	801a0e0 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a05e:	693b      	ldr	r3, [r7, #16]
 801a060:	3304      	adds	r3, #4
 801a062:	4618      	mov	r0, r3
 801a064:	f7fe f856 	bl	8018114 <uxListRemove>
 801a068:	4603      	mov	r3, r0
 801a06a:	2b00      	cmp	r3, #0
 801a06c:	d115      	bne.n	801a09a <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801a06e:	693b      	ldr	r3, [r7, #16]
 801a070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a072:	491f      	ldr	r1, [pc, #124]	@ (801a0f0 <xTaskPriorityDisinherit+0x110>)
 801a074:	4613      	mov	r3, r2
 801a076:	009b      	lsls	r3, r3, #2
 801a078:	4413      	add	r3, r2
 801a07a:	009b      	lsls	r3, r3, #2
 801a07c:	440b      	add	r3, r1
 801a07e:	681b      	ldr	r3, [r3, #0]
 801a080:	2b00      	cmp	r3, #0
 801a082:	d10a      	bne.n	801a09a <xTaskPriorityDisinherit+0xba>
 801a084:	693b      	ldr	r3, [r7, #16]
 801a086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a088:	2201      	movs	r2, #1
 801a08a:	fa02 f303 	lsl.w	r3, r2, r3
 801a08e:	43da      	mvns	r2, r3
 801a090:	4b18      	ldr	r3, [pc, #96]	@ (801a0f4 <xTaskPriorityDisinherit+0x114>)
 801a092:	681b      	ldr	r3, [r3, #0]
 801a094:	4013      	ands	r3, r2
 801a096:	4a17      	ldr	r2, [pc, #92]	@ (801a0f4 <xTaskPriorityDisinherit+0x114>)
 801a098:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801a09a:	693b      	ldr	r3, [r7, #16]
 801a09c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801a09e:	693b      	ldr	r3, [r7, #16]
 801a0a0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a0a2:	693b      	ldr	r3, [r7, #16]
 801a0a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a0a6:	f1c3 0207 	rsb	r2, r3, #7
 801a0aa:	693b      	ldr	r3, [r7, #16]
 801a0ac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801a0ae:	693b      	ldr	r3, [r7, #16]
 801a0b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a0b2:	2201      	movs	r2, #1
 801a0b4:	409a      	lsls	r2, r3
 801a0b6:	4b0f      	ldr	r3, [pc, #60]	@ (801a0f4 <xTaskPriorityDisinherit+0x114>)
 801a0b8:	681b      	ldr	r3, [r3, #0]
 801a0ba:	4313      	orrs	r3, r2
 801a0bc:	4a0d      	ldr	r2, [pc, #52]	@ (801a0f4 <xTaskPriorityDisinherit+0x114>)
 801a0be:	6013      	str	r3, [r2, #0]
 801a0c0:	693b      	ldr	r3, [r7, #16]
 801a0c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a0c4:	4613      	mov	r3, r2
 801a0c6:	009b      	lsls	r3, r3, #2
 801a0c8:	4413      	add	r3, r2
 801a0ca:	009b      	lsls	r3, r3, #2
 801a0cc:	4a08      	ldr	r2, [pc, #32]	@ (801a0f0 <xTaskPriorityDisinherit+0x110>)
 801a0ce:	441a      	add	r2, r3
 801a0d0:	693b      	ldr	r3, [r7, #16]
 801a0d2:	3304      	adds	r3, #4
 801a0d4:	4619      	mov	r1, r3
 801a0d6:	4610      	mov	r0, r2
 801a0d8:	f7fd ffbf 	bl	801805a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801a0dc:	2301      	movs	r3, #1
 801a0de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801a0e0:	697b      	ldr	r3, [r7, #20]
	}
 801a0e2:	4618      	mov	r0, r3
 801a0e4:	3718      	adds	r7, #24
 801a0e6:	46bd      	mov	sp, r7
 801a0e8:	bd80      	pop	{r7, pc}
 801a0ea:	bf00      	nop
 801a0ec:	20002454 	.word	0x20002454
 801a0f0:	20002458 	.word	0x20002458
 801a0f4:	2000255c 	.word	0x2000255c

0801a0f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801a0f8:	b580      	push	{r7, lr}
 801a0fa:	b088      	sub	sp, #32
 801a0fc:	af00      	add	r7, sp, #0
 801a0fe:	6078      	str	r0, [r7, #4]
 801a100:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801a102:	687b      	ldr	r3, [r7, #4]
 801a104:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801a106:	2301      	movs	r3, #1
 801a108:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801a10a:	687b      	ldr	r3, [r7, #4]
 801a10c:	2b00      	cmp	r3, #0
 801a10e:	f000 8089 	beq.w	801a224 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801a112:	69bb      	ldr	r3, [r7, #24]
 801a114:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a116:	2b00      	cmp	r3, #0
 801a118:	d10d      	bne.n	801a136 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 801a11a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a11e:	b672      	cpsid	i
 801a120:	f383 8811 	msr	BASEPRI, r3
 801a124:	f3bf 8f6f 	isb	sy
 801a128:	f3bf 8f4f 	dsb	sy
 801a12c:	b662      	cpsie	i
 801a12e:	60fb      	str	r3, [r7, #12]
}
 801a130:	bf00      	nop
 801a132:	bf00      	nop
 801a134:	e7fd      	b.n	801a132 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801a136:	69bb      	ldr	r3, [r7, #24]
 801a138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a13a:	683a      	ldr	r2, [r7, #0]
 801a13c:	429a      	cmp	r2, r3
 801a13e:	d902      	bls.n	801a146 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801a140:	683b      	ldr	r3, [r7, #0]
 801a142:	61fb      	str	r3, [r7, #28]
 801a144:	e002      	b.n	801a14c <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801a146:	69bb      	ldr	r3, [r7, #24]
 801a148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a14a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801a14c:	69bb      	ldr	r3, [r7, #24]
 801a14e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a150:	69fa      	ldr	r2, [r7, #28]
 801a152:	429a      	cmp	r2, r3
 801a154:	d066      	beq.n	801a224 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801a156:	69bb      	ldr	r3, [r7, #24]
 801a158:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a15a:	697a      	ldr	r2, [r7, #20]
 801a15c:	429a      	cmp	r2, r3
 801a15e:	d161      	bne.n	801a224 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801a160:	4b32      	ldr	r3, [pc, #200]	@ (801a22c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801a162:	681b      	ldr	r3, [r3, #0]
 801a164:	69ba      	ldr	r2, [r7, #24]
 801a166:	429a      	cmp	r2, r3
 801a168:	d10d      	bne.n	801a186 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 801a16a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a16e:	b672      	cpsid	i
 801a170:	f383 8811 	msr	BASEPRI, r3
 801a174:	f3bf 8f6f 	isb	sy
 801a178:	f3bf 8f4f 	dsb	sy
 801a17c:	b662      	cpsie	i
 801a17e:	60bb      	str	r3, [r7, #8]
}
 801a180:	bf00      	nop
 801a182:	bf00      	nop
 801a184:	e7fd      	b.n	801a182 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801a186:	69bb      	ldr	r3, [r7, #24]
 801a188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a18a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801a18c:	69bb      	ldr	r3, [r7, #24]
 801a18e:	69fa      	ldr	r2, [r7, #28]
 801a190:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801a192:	69bb      	ldr	r3, [r7, #24]
 801a194:	699b      	ldr	r3, [r3, #24]
 801a196:	2b00      	cmp	r3, #0
 801a198:	db04      	blt.n	801a1a4 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a19a:	69fb      	ldr	r3, [r7, #28]
 801a19c:	f1c3 0207 	rsb	r2, r3, #7
 801a1a0:	69bb      	ldr	r3, [r7, #24]
 801a1a2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801a1a4:	69bb      	ldr	r3, [r7, #24]
 801a1a6:	6959      	ldr	r1, [r3, #20]
 801a1a8:	693a      	ldr	r2, [r7, #16]
 801a1aa:	4613      	mov	r3, r2
 801a1ac:	009b      	lsls	r3, r3, #2
 801a1ae:	4413      	add	r3, r2
 801a1b0:	009b      	lsls	r3, r3, #2
 801a1b2:	4a1f      	ldr	r2, [pc, #124]	@ (801a230 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801a1b4:	4413      	add	r3, r2
 801a1b6:	4299      	cmp	r1, r3
 801a1b8:	d134      	bne.n	801a224 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a1ba:	69bb      	ldr	r3, [r7, #24]
 801a1bc:	3304      	adds	r3, #4
 801a1be:	4618      	mov	r0, r3
 801a1c0:	f7fd ffa8 	bl	8018114 <uxListRemove>
 801a1c4:	4603      	mov	r3, r0
 801a1c6:	2b00      	cmp	r3, #0
 801a1c8:	d115      	bne.n	801a1f6 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801a1ca:	69bb      	ldr	r3, [r7, #24]
 801a1cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a1ce:	4918      	ldr	r1, [pc, #96]	@ (801a230 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801a1d0:	4613      	mov	r3, r2
 801a1d2:	009b      	lsls	r3, r3, #2
 801a1d4:	4413      	add	r3, r2
 801a1d6:	009b      	lsls	r3, r3, #2
 801a1d8:	440b      	add	r3, r1
 801a1da:	681b      	ldr	r3, [r3, #0]
 801a1dc:	2b00      	cmp	r3, #0
 801a1de:	d10a      	bne.n	801a1f6 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 801a1e0:	69bb      	ldr	r3, [r7, #24]
 801a1e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a1e4:	2201      	movs	r2, #1
 801a1e6:	fa02 f303 	lsl.w	r3, r2, r3
 801a1ea:	43da      	mvns	r2, r3
 801a1ec:	4b11      	ldr	r3, [pc, #68]	@ (801a234 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801a1ee:	681b      	ldr	r3, [r3, #0]
 801a1f0:	4013      	ands	r3, r2
 801a1f2:	4a10      	ldr	r2, [pc, #64]	@ (801a234 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801a1f4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801a1f6:	69bb      	ldr	r3, [r7, #24]
 801a1f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a1fa:	2201      	movs	r2, #1
 801a1fc:	409a      	lsls	r2, r3
 801a1fe:	4b0d      	ldr	r3, [pc, #52]	@ (801a234 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801a200:	681b      	ldr	r3, [r3, #0]
 801a202:	4313      	orrs	r3, r2
 801a204:	4a0b      	ldr	r2, [pc, #44]	@ (801a234 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801a206:	6013      	str	r3, [r2, #0]
 801a208:	69bb      	ldr	r3, [r7, #24]
 801a20a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a20c:	4613      	mov	r3, r2
 801a20e:	009b      	lsls	r3, r3, #2
 801a210:	4413      	add	r3, r2
 801a212:	009b      	lsls	r3, r3, #2
 801a214:	4a06      	ldr	r2, [pc, #24]	@ (801a230 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801a216:	441a      	add	r2, r3
 801a218:	69bb      	ldr	r3, [r7, #24]
 801a21a:	3304      	adds	r3, #4
 801a21c:	4619      	mov	r1, r3
 801a21e:	4610      	mov	r0, r2
 801a220:	f7fd ff1b 	bl	801805a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801a224:	bf00      	nop
 801a226:	3720      	adds	r7, #32
 801a228:	46bd      	mov	sp, r7
 801a22a:	bd80      	pop	{r7, pc}
 801a22c:	20002454 	.word	0x20002454
 801a230:	20002458 	.word	0x20002458
 801a234:	2000255c 	.word	0x2000255c

0801a238 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801a238:	b480      	push	{r7}
 801a23a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801a23c:	4b07      	ldr	r3, [pc, #28]	@ (801a25c <pvTaskIncrementMutexHeldCount+0x24>)
 801a23e:	681b      	ldr	r3, [r3, #0]
 801a240:	2b00      	cmp	r3, #0
 801a242:	d004      	beq.n	801a24e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801a244:	4b05      	ldr	r3, [pc, #20]	@ (801a25c <pvTaskIncrementMutexHeldCount+0x24>)
 801a246:	681b      	ldr	r3, [r3, #0]
 801a248:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801a24a:	3201      	adds	r2, #1
 801a24c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 801a24e:	4b03      	ldr	r3, [pc, #12]	@ (801a25c <pvTaskIncrementMutexHeldCount+0x24>)
 801a250:	681b      	ldr	r3, [r3, #0]
	}
 801a252:	4618      	mov	r0, r3
 801a254:	46bd      	mov	sp, r7
 801a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a25a:	4770      	bx	lr
 801a25c:	20002454 	.word	0x20002454

0801a260 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801a260:	b580      	push	{r7, lr}
 801a262:	b084      	sub	sp, #16
 801a264:	af00      	add	r7, sp, #0
 801a266:	6078      	str	r0, [r7, #4]
 801a268:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801a26a:	4b29      	ldr	r3, [pc, #164]	@ (801a310 <prvAddCurrentTaskToDelayedList+0xb0>)
 801a26c:	681b      	ldr	r3, [r3, #0]
 801a26e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a270:	4b28      	ldr	r3, [pc, #160]	@ (801a314 <prvAddCurrentTaskToDelayedList+0xb4>)
 801a272:	681b      	ldr	r3, [r3, #0]
 801a274:	3304      	adds	r3, #4
 801a276:	4618      	mov	r0, r3
 801a278:	f7fd ff4c 	bl	8018114 <uxListRemove>
 801a27c:	4603      	mov	r3, r0
 801a27e:	2b00      	cmp	r3, #0
 801a280:	d10b      	bne.n	801a29a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801a282:	4b24      	ldr	r3, [pc, #144]	@ (801a314 <prvAddCurrentTaskToDelayedList+0xb4>)
 801a284:	681b      	ldr	r3, [r3, #0]
 801a286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a288:	2201      	movs	r2, #1
 801a28a:	fa02 f303 	lsl.w	r3, r2, r3
 801a28e:	43da      	mvns	r2, r3
 801a290:	4b21      	ldr	r3, [pc, #132]	@ (801a318 <prvAddCurrentTaskToDelayedList+0xb8>)
 801a292:	681b      	ldr	r3, [r3, #0]
 801a294:	4013      	ands	r3, r2
 801a296:	4a20      	ldr	r2, [pc, #128]	@ (801a318 <prvAddCurrentTaskToDelayedList+0xb8>)
 801a298:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801a29a:	687b      	ldr	r3, [r7, #4]
 801a29c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a2a0:	d10a      	bne.n	801a2b8 <prvAddCurrentTaskToDelayedList+0x58>
 801a2a2:	683b      	ldr	r3, [r7, #0]
 801a2a4:	2b00      	cmp	r3, #0
 801a2a6:	d007      	beq.n	801a2b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a2a8:	4b1a      	ldr	r3, [pc, #104]	@ (801a314 <prvAddCurrentTaskToDelayedList+0xb4>)
 801a2aa:	681b      	ldr	r3, [r3, #0]
 801a2ac:	3304      	adds	r3, #4
 801a2ae:	4619      	mov	r1, r3
 801a2b0:	481a      	ldr	r0, [pc, #104]	@ (801a31c <prvAddCurrentTaskToDelayedList+0xbc>)
 801a2b2:	f7fd fed2 	bl	801805a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801a2b6:	e026      	b.n	801a306 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801a2b8:	68fa      	ldr	r2, [r7, #12]
 801a2ba:	687b      	ldr	r3, [r7, #4]
 801a2bc:	4413      	add	r3, r2
 801a2be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801a2c0:	4b14      	ldr	r3, [pc, #80]	@ (801a314 <prvAddCurrentTaskToDelayedList+0xb4>)
 801a2c2:	681b      	ldr	r3, [r3, #0]
 801a2c4:	68ba      	ldr	r2, [r7, #8]
 801a2c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801a2c8:	68ba      	ldr	r2, [r7, #8]
 801a2ca:	68fb      	ldr	r3, [r7, #12]
 801a2cc:	429a      	cmp	r2, r3
 801a2ce:	d209      	bcs.n	801a2e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a2d0:	4b13      	ldr	r3, [pc, #76]	@ (801a320 <prvAddCurrentTaskToDelayedList+0xc0>)
 801a2d2:	681a      	ldr	r2, [r3, #0]
 801a2d4:	4b0f      	ldr	r3, [pc, #60]	@ (801a314 <prvAddCurrentTaskToDelayedList+0xb4>)
 801a2d6:	681b      	ldr	r3, [r3, #0]
 801a2d8:	3304      	adds	r3, #4
 801a2da:	4619      	mov	r1, r3
 801a2dc:	4610      	mov	r0, r2
 801a2de:	f7fd fee0 	bl	80180a2 <vListInsert>
}
 801a2e2:	e010      	b.n	801a306 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a2e4:	4b0f      	ldr	r3, [pc, #60]	@ (801a324 <prvAddCurrentTaskToDelayedList+0xc4>)
 801a2e6:	681a      	ldr	r2, [r3, #0]
 801a2e8:	4b0a      	ldr	r3, [pc, #40]	@ (801a314 <prvAddCurrentTaskToDelayedList+0xb4>)
 801a2ea:	681b      	ldr	r3, [r3, #0]
 801a2ec:	3304      	adds	r3, #4
 801a2ee:	4619      	mov	r1, r3
 801a2f0:	4610      	mov	r0, r2
 801a2f2:	f7fd fed6 	bl	80180a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801a2f6:	4b0c      	ldr	r3, [pc, #48]	@ (801a328 <prvAddCurrentTaskToDelayedList+0xc8>)
 801a2f8:	681b      	ldr	r3, [r3, #0]
 801a2fa:	68ba      	ldr	r2, [r7, #8]
 801a2fc:	429a      	cmp	r2, r3
 801a2fe:	d202      	bcs.n	801a306 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801a300:	4a09      	ldr	r2, [pc, #36]	@ (801a328 <prvAddCurrentTaskToDelayedList+0xc8>)
 801a302:	68bb      	ldr	r3, [r7, #8]
 801a304:	6013      	str	r3, [r2, #0]
}
 801a306:	bf00      	nop
 801a308:	3710      	adds	r7, #16
 801a30a:	46bd      	mov	sp, r7
 801a30c:	bd80      	pop	{r7, pc}
 801a30e:	bf00      	nop
 801a310:	20002558 	.word	0x20002558
 801a314:	20002454 	.word	0x20002454
 801a318:	2000255c 	.word	0x2000255c
 801a31c:	20002540 	.word	0x20002540
 801a320:	20002510 	.word	0x20002510
 801a324:	2000250c 	.word	0x2000250c
 801a328:	20002574 	.word	0x20002574

0801a32c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801a32c:	b480      	push	{r7}
 801a32e:	b085      	sub	sp, #20
 801a330:	af00      	add	r7, sp, #0
 801a332:	60f8      	str	r0, [r7, #12]
 801a334:	60b9      	str	r1, [r7, #8]
 801a336:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801a338:	68fb      	ldr	r3, [r7, #12]
 801a33a:	3b04      	subs	r3, #4
 801a33c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801a33e:	68fb      	ldr	r3, [r7, #12]
 801a340:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801a344:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801a346:	68fb      	ldr	r3, [r7, #12]
 801a348:	3b04      	subs	r3, #4
 801a34a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801a34c:	68bb      	ldr	r3, [r7, #8]
 801a34e:	f023 0201 	bic.w	r2, r3, #1
 801a352:	68fb      	ldr	r3, [r7, #12]
 801a354:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801a356:	68fb      	ldr	r3, [r7, #12]
 801a358:	3b04      	subs	r3, #4
 801a35a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801a35c:	4a0c      	ldr	r2, [pc, #48]	@ (801a390 <pxPortInitialiseStack+0x64>)
 801a35e:	68fb      	ldr	r3, [r7, #12]
 801a360:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801a362:	68fb      	ldr	r3, [r7, #12]
 801a364:	3b14      	subs	r3, #20
 801a366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801a368:	687a      	ldr	r2, [r7, #4]
 801a36a:	68fb      	ldr	r3, [r7, #12]
 801a36c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801a36e:	68fb      	ldr	r3, [r7, #12]
 801a370:	3b04      	subs	r3, #4
 801a372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801a374:	68fb      	ldr	r3, [r7, #12]
 801a376:	f06f 0202 	mvn.w	r2, #2
 801a37a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801a37c:	68fb      	ldr	r3, [r7, #12]
 801a37e:	3b20      	subs	r3, #32
 801a380:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801a382:	68fb      	ldr	r3, [r7, #12]
}
 801a384:	4618      	mov	r0, r3
 801a386:	3714      	adds	r7, #20
 801a388:	46bd      	mov	sp, r7
 801a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a38e:	4770      	bx	lr
 801a390:	0801a395 	.word	0x0801a395

0801a394 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801a394:	b480      	push	{r7}
 801a396:	b085      	sub	sp, #20
 801a398:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801a39a:	2300      	movs	r3, #0
 801a39c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801a39e:	4b15      	ldr	r3, [pc, #84]	@ (801a3f4 <prvTaskExitError+0x60>)
 801a3a0:	681b      	ldr	r3, [r3, #0]
 801a3a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a3a6:	d00d      	beq.n	801a3c4 <prvTaskExitError+0x30>
	__asm volatile
 801a3a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a3ac:	b672      	cpsid	i
 801a3ae:	f383 8811 	msr	BASEPRI, r3
 801a3b2:	f3bf 8f6f 	isb	sy
 801a3b6:	f3bf 8f4f 	dsb	sy
 801a3ba:	b662      	cpsie	i
 801a3bc:	60fb      	str	r3, [r7, #12]
}
 801a3be:	bf00      	nop
 801a3c0:	bf00      	nop
 801a3c2:	e7fd      	b.n	801a3c0 <prvTaskExitError+0x2c>
	__asm volatile
 801a3c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a3c8:	b672      	cpsid	i
 801a3ca:	f383 8811 	msr	BASEPRI, r3
 801a3ce:	f3bf 8f6f 	isb	sy
 801a3d2:	f3bf 8f4f 	dsb	sy
 801a3d6:	b662      	cpsie	i
 801a3d8:	60bb      	str	r3, [r7, #8]
}
 801a3da:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801a3dc:	bf00      	nop
 801a3de:	687b      	ldr	r3, [r7, #4]
 801a3e0:	2b00      	cmp	r3, #0
 801a3e2:	d0fc      	beq.n	801a3de <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801a3e4:	bf00      	nop
 801a3e6:	bf00      	nop
 801a3e8:	3714      	adds	r7, #20
 801a3ea:	46bd      	mov	sp, r7
 801a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3f0:	4770      	bx	lr
 801a3f2:	bf00      	nop
 801a3f4:	2000008c 	.word	0x2000008c
	...

0801a400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801a400:	4b07      	ldr	r3, [pc, #28]	@ (801a420 <pxCurrentTCBConst2>)
 801a402:	6819      	ldr	r1, [r3, #0]
 801a404:	6808      	ldr	r0, [r1, #0]
 801a406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a40a:	f380 8809 	msr	PSP, r0
 801a40e:	f3bf 8f6f 	isb	sy
 801a412:	f04f 0000 	mov.w	r0, #0
 801a416:	f380 8811 	msr	BASEPRI, r0
 801a41a:	4770      	bx	lr
 801a41c:	f3af 8000 	nop.w

0801a420 <pxCurrentTCBConst2>:
 801a420:	20002454 	.word	0x20002454
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801a424:	bf00      	nop
 801a426:	bf00      	nop

0801a428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801a428:	4808      	ldr	r0, [pc, #32]	@ (801a44c <prvPortStartFirstTask+0x24>)
 801a42a:	6800      	ldr	r0, [r0, #0]
 801a42c:	6800      	ldr	r0, [r0, #0]
 801a42e:	f380 8808 	msr	MSP, r0
 801a432:	f04f 0000 	mov.w	r0, #0
 801a436:	f380 8814 	msr	CONTROL, r0
 801a43a:	b662      	cpsie	i
 801a43c:	b661      	cpsie	f
 801a43e:	f3bf 8f4f 	dsb	sy
 801a442:	f3bf 8f6f 	isb	sy
 801a446:	df00      	svc	0
 801a448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801a44a:	bf00      	nop
 801a44c:	e000ed08 	.word	0xe000ed08

0801a450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801a450:	b580      	push	{r7, lr}
 801a452:	b084      	sub	sp, #16
 801a454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801a456:	4b37      	ldr	r3, [pc, #220]	@ (801a534 <xPortStartScheduler+0xe4>)
 801a458:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801a45a:	68fb      	ldr	r3, [r7, #12]
 801a45c:	781b      	ldrb	r3, [r3, #0]
 801a45e:	b2db      	uxtb	r3, r3
 801a460:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801a462:	68fb      	ldr	r3, [r7, #12]
 801a464:	22ff      	movs	r2, #255	@ 0xff
 801a466:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801a468:	68fb      	ldr	r3, [r7, #12]
 801a46a:	781b      	ldrb	r3, [r3, #0]
 801a46c:	b2db      	uxtb	r3, r3
 801a46e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801a470:	78fb      	ldrb	r3, [r7, #3]
 801a472:	b2db      	uxtb	r3, r3
 801a474:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801a478:	b2da      	uxtb	r2, r3
 801a47a:	4b2f      	ldr	r3, [pc, #188]	@ (801a538 <xPortStartScheduler+0xe8>)
 801a47c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801a47e:	4b2f      	ldr	r3, [pc, #188]	@ (801a53c <xPortStartScheduler+0xec>)
 801a480:	2207      	movs	r2, #7
 801a482:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a484:	e009      	b.n	801a49a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 801a486:	4b2d      	ldr	r3, [pc, #180]	@ (801a53c <xPortStartScheduler+0xec>)
 801a488:	681b      	ldr	r3, [r3, #0]
 801a48a:	3b01      	subs	r3, #1
 801a48c:	4a2b      	ldr	r2, [pc, #172]	@ (801a53c <xPortStartScheduler+0xec>)
 801a48e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801a490:	78fb      	ldrb	r3, [r7, #3]
 801a492:	b2db      	uxtb	r3, r3
 801a494:	005b      	lsls	r3, r3, #1
 801a496:	b2db      	uxtb	r3, r3
 801a498:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a49a:	78fb      	ldrb	r3, [r7, #3]
 801a49c:	b2db      	uxtb	r3, r3
 801a49e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a4a2:	2b80      	cmp	r3, #128	@ 0x80
 801a4a4:	d0ef      	beq.n	801a486 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801a4a6:	4b25      	ldr	r3, [pc, #148]	@ (801a53c <xPortStartScheduler+0xec>)
 801a4a8:	681b      	ldr	r3, [r3, #0]
 801a4aa:	f1c3 0307 	rsb	r3, r3, #7
 801a4ae:	2b04      	cmp	r3, #4
 801a4b0:	d00d      	beq.n	801a4ce <xPortStartScheduler+0x7e>
	__asm volatile
 801a4b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a4b6:	b672      	cpsid	i
 801a4b8:	f383 8811 	msr	BASEPRI, r3
 801a4bc:	f3bf 8f6f 	isb	sy
 801a4c0:	f3bf 8f4f 	dsb	sy
 801a4c4:	b662      	cpsie	i
 801a4c6:	60bb      	str	r3, [r7, #8]
}
 801a4c8:	bf00      	nop
 801a4ca:	bf00      	nop
 801a4cc:	e7fd      	b.n	801a4ca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801a4ce:	4b1b      	ldr	r3, [pc, #108]	@ (801a53c <xPortStartScheduler+0xec>)
 801a4d0:	681b      	ldr	r3, [r3, #0]
 801a4d2:	021b      	lsls	r3, r3, #8
 801a4d4:	4a19      	ldr	r2, [pc, #100]	@ (801a53c <xPortStartScheduler+0xec>)
 801a4d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801a4d8:	4b18      	ldr	r3, [pc, #96]	@ (801a53c <xPortStartScheduler+0xec>)
 801a4da:	681b      	ldr	r3, [r3, #0]
 801a4dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801a4e0:	4a16      	ldr	r2, [pc, #88]	@ (801a53c <xPortStartScheduler+0xec>)
 801a4e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801a4e4:	687b      	ldr	r3, [r7, #4]
 801a4e6:	b2da      	uxtb	r2, r3
 801a4e8:	68fb      	ldr	r3, [r7, #12]
 801a4ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801a4ec:	4b14      	ldr	r3, [pc, #80]	@ (801a540 <xPortStartScheduler+0xf0>)
 801a4ee:	681b      	ldr	r3, [r3, #0]
 801a4f0:	4a13      	ldr	r2, [pc, #76]	@ (801a540 <xPortStartScheduler+0xf0>)
 801a4f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801a4f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801a4f8:	4b11      	ldr	r3, [pc, #68]	@ (801a540 <xPortStartScheduler+0xf0>)
 801a4fa:	681b      	ldr	r3, [r3, #0]
 801a4fc:	4a10      	ldr	r2, [pc, #64]	@ (801a540 <xPortStartScheduler+0xf0>)
 801a4fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 801a502:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801a504:	f000 f8dc 	bl	801a6c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801a508:	4b0e      	ldr	r3, [pc, #56]	@ (801a544 <xPortStartScheduler+0xf4>)
 801a50a:	2200      	movs	r2, #0
 801a50c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801a50e:	f000 f8fb 	bl	801a708 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801a512:	4b0d      	ldr	r3, [pc, #52]	@ (801a548 <xPortStartScheduler+0xf8>)
 801a514:	681b      	ldr	r3, [r3, #0]
 801a516:	4a0c      	ldr	r2, [pc, #48]	@ (801a548 <xPortStartScheduler+0xf8>)
 801a518:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801a51c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801a51e:	f7ff ff83 	bl	801a428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801a522:	f7ff fa49 	bl	80199b8 <vTaskSwitchContext>
	prvTaskExitError();
 801a526:	f7ff ff35 	bl	801a394 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801a52a:	2300      	movs	r3, #0
}
 801a52c:	4618      	mov	r0, r3
 801a52e:	3710      	adds	r7, #16
 801a530:	46bd      	mov	sp, r7
 801a532:	bd80      	pop	{r7, pc}
 801a534:	e000e400 	.word	0xe000e400
 801a538:	20002580 	.word	0x20002580
 801a53c:	20002584 	.word	0x20002584
 801a540:	e000ed20 	.word	0xe000ed20
 801a544:	2000008c 	.word	0x2000008c
 801a548:	e000ef34 	.word	0xe000ef34

0801a54c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801a54c:	b480      	push	{r7}
 801a54e:	b083      	sub	sp, #12
 801a550:	af00      	add	r7, sp, #0
	__asm volatile
 801a552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a556:	b672      	cpsid	i
 801a558:	f383 8811 	msr	BASEPRI, r3
 801a55c:	f3bf 8f6f 	isb	sy
 801a560:	f3bf 8f4f 	dsb	sy
 801a564:	b662      	cpsie	i
 801a566:	607b      	str	r3, [r7, #4]
}
 801a568:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801a56a:	4b11      	ldr	r3, [pc, #68]	@ (801a5b0 <vPortEnterCritical+0x64>)
 801a56c:	681b      	ldr	r3, [r3, #0]
 801a56e:	3301      	adds	r3, #1
 801a570:	4a0f      	ldr	r2, [pc, #60]	@ (801a5b0 <vPortEnterCritical+0x64>)
 801a572:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801a574:	4b0e      	ldr	r3, [pc, #56]	@ (801a5b0 <vPortEnterCritical+0x64>)
 801a576:	681b      	ldr	r3, [r3, #0]
 801a578:	2b01      	cmp	r3, #1
 801a57a:	d112      	bne.n	801a5a2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801a57c:	4b0d      	ldr	r3, [pc, #52]	@ (801a5b4 <vPortEnterCritical+0x68>)
 801a57e:	681b      	ldr	r3, [r3, #0]
 801a580:	b2db      	uxtb	r3, r3
 801a582:	2b00      	cmp	r3, #0
 801a584:	d00d      	beq.n	801a5a2 <vPortEnterCritical+0x56>
	__asm volatile
 801a586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a58a:	b672      	cpsid	i
 801a58c:	f383 8811 	msr	BASEPRI, r3
 801a590:	f3bf 8f6f 	isb	sy
 801a594:	f3bf 8f4f 	dsb	sy
 801a598:	b662      	cpsie	i
 801a59a:	603b      	str	r3, [r7, #0]
}
 801a59c:	bf00      	nop
 801a59e:	bf00      	nop
 801a5a0:	e7fd      	b.n	801a59e <vPortEnterCritical+0x52>
	}
}
 801a5a2:	bf00      	nop
 801a5a4:	370c      	adds	r7, #12
 801a5a6:	46bd      	mov	sp, r7
 801a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5ac:	4770      	bx	lr
 801a5ae:	bf00      	nop
 801a5b0:	2000008c 	.word	0x2000008c
 801a5b4:	e000ed04 	.word	0xe000ed04

0801a5b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801a5b8:	b480      	push	{r7}
 801a5ba:	b083      	sub	sp, #12
 801a5bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801a5be:	4b13      	ldr	r3, [pc, #76]	@ (801a60c <vPortExitCritical+0x54>)
 801a5c0:	681b      	ldr	r3, [r3, #0]
 801a5c2:	2b00      	cmp	r3, #0
 801a5c4:	d10d      	bne.n	801a5e2 <vPortExitCritical+0x2a>
	__asm volatile
 801a5c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a5ca:	b672      	cpsid	i
 801a5cc:	f383 8811 	msr	BASEPRI, r3
 801a5d0:	f3bf 8f6f 	isb	sy
 801a5d4:	f3bf 8f4f 	dsb	sy
 801a5d8:	b662      	cpsie	i
 801a5da:	607b      	str	r3, [r7, #4]
}
 801a5dc:	bf00      	nop
 801a5de:	bf00      	nop
 801a5e0:	e7fd      	b.n	801a5de <vPortExitCritical+0x26>
	uxCriticalNesting--;
 801a5e2:	4b0a      	ldr	r3, [pc, #40]	@ (801a60c <vPortExitCritical+0x54>)
 801a5e4:	681b      	ldr	r3, [r3, #0]
 801a5e6:	3b01      	subs	r3, #1
 801a5e8:	4a08      	ldr	r2, [pc, #32]	@ (801a60c <vPortExitCritical+0x54>)
 801a5ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801a5ec:	4b07      	ldr	r3, [pc, #28]	@ (801a60c <vPortExitCritical+0x54>)
 801a5ee:	681b      	ldr	r3, [r3, #0]
 801a5f0:	2b00      	cmp	r3, #0
 801a5f2:	d105      	bne.n	801a600 <vPortExitCritical+0x48>
 801a5f4:	2300      	movs	r3, #0
 801a5f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 801a5f8:	683b      	ldr	r3, [r7, #0]
 801a5fa:	f383 8811 	msr	BASEPRI, r3
}
 801a5fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801a600:	bf00      	nop
 801a602:	370c      	adds	r7, #12
 801a604:	46bd      	mov	sp, r7
 801a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a60a:	4770      	bx	lr
 801a60c:	2000008c 	.word	0x2000008c

0801a610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801a610:	f3ef 8009 	mrs	r0, PSP
 801a614:	f3bf 8f6f 	isb	sy
 801a618:	4b15      	ldr	r3, [pc, #84]	@ (801a670 <pxCurrentTCBConst>)
 801a61a:	681a      	ldr	r2, [r3, #0]
 801a61c:	f01e 0f10 	tst.w	lr, #16
 801a620:	bf08      	it	eq
 801a622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801a626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a62a:	6010      	str	r0, [r2, #0]
 801a62c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801a630:	f04f 0050 	mov.w	r0, #80	@ 0x50
 801a634:	b672      	cpsid	i
 801a636:	f380 8811 	msr	BASEPRI, r0
 801a63a:	f3bf 8f4f 	dsb	sy
 801a63e:	f3bf 8f6f 	isb	sy
 801a642:	b662      	cpsie	i
 801a644:	f7ff f9b8 	bl	80199b8 <vTaskSwitchContext>
 801a648:	f04f 0000 	mov.w	r0, #0
 801a64c:	f380 8811 	msr	BASEPRI, r0
 801a650:	bc09      	pop	{r0, r3}
 801a652:	6819      	ldr	r1, [r3, #0]
 801a654:	6808      	ldr	r0, [r1, #0]
 801a656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a65a:	f01e 0f10 	tst.w	lr, #16
 801a65e:	bf08      	it	eq
 801a660:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801a664:	f380 8809 	msr	PSP, r0
 801a668:	f3bf 8f6f 	isb	sy
 801a66c:	4770      	bx	lr
 801a66e:	bf00      	nop

0801a670 <pxCurrentTCBConst>:
 801a670:	20002454 	.word	0x20002454
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801a674:	bf00      	nop
 801a676:	bf00      	nop

0801a678 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801a678:	b580      	push	{r7, lr}
 801a67a:	b082      	sub	sp, #8
 801a67c:	af00      	add	r7, sp, #0
	__asm volatile
 801a67e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a682:	b672      	cpsid	i
 801a684:	f383 8811 	msr	BASEPRI, r3
 801a688:	f3bf 8f6f 	isb	sy
 801a68c:	f3bf 8f4f 	dsb	sy
 801a690:	b662      	cpsie	i
 801a692:	607b      	str	r3, [r7, #4]
}
 801a694:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801a696:	f7ff f8d3 	bl	8019840 <xTaskIncrementTick>
 801a69a:	4603      	mov	r3, r0
 801a69c:	2b00      	cmp	r3, #0
 801a69e:	d003      	beq.n	801a6a8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801a6a0:	4b06      	ldr	r3, [pc, #24]	@ (801a6bc <SysTick_Handler+0x44>)
 801a6a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a6a6:	601a      	str	r2, [r3, #0]
 801a6a8:	2300      	movs	r3, #0
 801a6aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 801a6ac:	683b      	ldr	r3, [r7, #0]
 801a6ae:	f383 8811 	msr	BASEPRI, r3
}
 801a6b2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801a6b4:	bf00      	nop
 801a6b6:	3708      	adds	r7, #8
 801a6b8:	46bd      	mov	sp, r7
 801a6ba:	bd80      	pop	{r7, pc}
 801a6bc:	e000ed04 	.word	0xe000ed04

0801a6c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801a6c0:	b480      	push	{r7}
 801a6c2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801a6c4:	4b0b      	ldr	r3, [pc, #44]	@ (801a6f4 <vPortSetupTimerInterrupt+0x34>)
 801a6c6:	2200      	movs	r2, #0
 801a6c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801a6ca:	4b0b      	ldr	r3, [pc, #44]	@ (801a6f8 <vPortSetupTimerInterrupt+0x38>)
 801a6cc:	2200      	movs	r2, #0
 801a6ce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801a6d0:	4b0a      	ldr	r3, [pc, #40]	@ (801a6fc <vPortSetupTimerInterrupt+0x3c>)
 801a6d2:	681b      	ldr	r3, [r3, #0]
 801a6d4:	4a0a      	ldr	r2, [pc, #40]	@ (801a700 <vPortSetupTimerInterrupt+0x40>)
 801a6d6:	fba2 2303 	umull	r2, r3, r2, r3
 801a6da:	099b      	lsrs	r3, r3, #6
 801a6dc:	4a09      	ldr	r2, [pc, #36]	@ (801a704 <vPortSetupTimerInterrupt+0x44>)
 801a6de:	3b01      	subs	r3, #1
 801a6e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801a6e2:	4b04      	ldr	r3, [pc, #16]	@ (801a6f4 <vPortSetupTimerInterrupt+0x34>)
 801a6e4:	2207      	movs	r2, #7
 801a6e6:	601a      	str	r2, [r3, #0]
}
 801a6e8:	bf00      	nop
 801a6ea:	46bd      	mov	sp, r7
 801a6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6f0:	4770      	bx	lr
 801a6f2:	bf00      	nop
 801a6f4:	e000e010 	.word	0xe000e010
 801a6f8:	e000e018 	.word	0xe000e018
 801a6fc:	20000018 	.word	0x20000018
 801a700:	10624dd3 	.word	0x10624dd3
 801a704:	e000e014 	.word	0xe000e014

0801a708 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801a708:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 801a718 <vPortEnableVFP+0x10>
 801a70c:	6801      	ldr	r1, [r0, #0]
 801a70e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801a712:	6001      	str	r1, [r0, #0]
 801a714:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801a716:	bf00      	nop
 801a718:	e000ed88 	.word	0xe000ed88

0801a71c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801a71c:	b480      	push	{r7}
 801a71e:	b085      	sub	sp, #20
 801a720:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801a722:	f3ef 8305 	mrs	r3, IPSR
 801a726:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801a728:	68fb      	ldr	r3, [r7, #12]
 801a72a:	2b0f      	cmp	r3, #15
 801a72c:	d917      	bls.n	801a75e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801a72e:	4a1a      	ldr	r2, [pc, #104]	@ (801a798 <vPortValidateInterruptPriority+0x7c>)
 801a730:	68fb      	ldr	r3, [r7, #12]
 801a732:	4413      	add	r3, r2
 801a734:	781b      	ldrb	r3, [r3, #0]
 801a736:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801a738:	4b18      	ldr	r3, [pc, #96]	@ (801a79c <vPortValidateInterruptPriority+0x80>)
 801a73a:	781b      	ldrb	r3, [r3, #0]
 801a73c:	7afa      	ldrb	r2, [r7, #11]
 801a73e:	429a      	cmp	r2, r3
 801a740:	d20d      	bcs.n	801a75e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 801a742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a746:	b672      	cpsid	i
 801a748:	f383 8811 	msr	BASEPRI, r3
 801a74c:	f3bf 8f6f 	isb	sy
 801a750:	f3bf 8f4f 	dsb	sy
 801a754:	b662      	cpsie	i
 801a756:	607b      	str	r3, [r7, #4]
}
 801a758:	bf00      	nop
 801a75a:	bf00      	nop
 801a75c:	e7fd      	b.n	801a75a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801a75e:	4b10      	ldr	r3, [pc, #64]	@ (801a7a0 <vPortValidateInterruptPriority+0x84>)
 801a760:	681b      	ldr	r3, [r3, #0]
 801a762:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801a766:	4b0f      	ldr	r3, [pc, #60]	@ (801a7a4 <vPortValidateInterruptPriority+0x88>)
 801a768:	681b      	ldr	r3, [r3, #0]
 801a76a:	429a      	cmp	r2, r3
 801a76c:	d90d      	bls.n	801a78a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 801a76e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a772:	b672      	cpsid	i
 801a774:	f383 8811 	msr	BASEPRI, r3
 801a778:	f3bf 8f6f 	isb	sy
 801a77c:	f3bf 8f4f 	dsb	sy
 801a780:	b662      	cpsie	i
 801a782:	603b      	str	r3, [r7, #0]
}
 801a784:	bf00      	nop
 801a786:	bf00      	nop
 801a788:	e7fd      	b.n	801a786 <vPortValidateInterruptPriority+0x6a>
	}
 801a78a:	bf00      	nop
 801a78c:	3714      	adds	r7, #20
 801a78e:	46bd      	mov	sp, r7
 801a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a794:	4770      	bx	lr
 801a796:	bf00      	nop
 801a798:	e000e3f0 	.word	0xe000e3f0
 801a79c:	20002580 	.word	0x20002580
 801a7a0:	e000ed0c 	.word	0xe000ed0c
 801a7a4:	20002584 	.word	0x20002584

0801a7a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801a7a8:	b580      	push	{r7, lr}
 801a7aa:	b08a      	sub	sp, #40	@ 0x28
 801a7ac:	af00      	add	r7, sp, #0
 801a7ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801a7b0:	2300      	movs	r3, #0
 801a7b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801a7b4:	f7fe ff74 	bl	80196a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801a7b8:	4b5f      	ldr	r3, [pc, #380]	@ (801a938 <pvPortMalloc+0x190>)
 801a7ba:	681b      	ldr	r3, [r3, #0]
 801a7bc:	2b00      	cmp	r3, #0
 801a7be:	d101      	bne.n	801a7c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801a7c0:	f000 f924 	bl	801aa0c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801a7c4:	4b5d      	ldr	r3, [pc, #372]	@ (801a93c <pvPortMalloc+0x194>)
 801a7c6:	681a      	ldr	r2, [r3, #0]
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	4013      	ands	r3, r2
 801a7cc:	2b00      	cmp	r3, #0
 801a7ce:	f040 8094 	bne.w	801a8fa <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801a7d2:	687b      	ldr	r3, [r7, #4]
 801a7d4:	2b00      	cmp	r3, #0
 801a7d6:	d020      	beq.n	801a81a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 801a7d8:	2208      	movs	r2, #8
 801a7da:	687b      	ldr	r3, [r7, #4]
 801a7dc:	4413      	add	r3, r2
 801a7de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801a7e0:	687b      	ldr	r3, [r7, #4]
 801a7e2:	f003 0307 	and.w	r3, r3, #7
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	d017      	beq.n	801a81a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801a7ea:	687b      	ldr	r3, [r7, #4]
 801a7ec:	f023 0307 	bic.w	r3, r3, #7
 801a7f0:	3308      	adds	r3, #8
 801a7f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a7f4:	687b      	ldr	r3, [r7, #4]
 801a7f6:	f003 0307 	and.w	r3, r3, #7
 801a7fa:	2b00      	cmp	r3, #0
 801a7fc:	d00d      	beq.n	801a81a <pvPortMalloc+0x72>
	__asm volatile
 801a7fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a802:	b672      	cpsid	i
 801a804:	f383 8811 	msr	BASEPRI, r3
 801a808:	f3bf 8f6f 	isb	sy
 801a80c:	f3bf 8f4f 	dsb	sy
 801a810:	b662      	cpsie	i
 801a812:	617b      	str	r3, [r7, #20]
}
 801a814:	bf00      	nop
 801a816:	bf00      	nop
 801a818:	e7fd      	b.n	801a816 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801a81a:	687b      	ldr	r3, [r7, #4]
 801a81c:	2b00      	cmp	r3, #0
 801a81e:	d06c      	beq.n	801a8fa <pvPortMalloc+0x152>
 801a820:	4b47      	ldr	r3, [pc, #284]	@ (801a940 <pvPortMalloc+0x198>)
 801a822:	681b      	ldr	r3, [r3, #0]
 801a824:	687a      	ldr	r2, [r7, #4]
 801a826:	429a      	cmp	r2, r3
 801a828:	d867      	bhi.n	801a8fa <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801a82a:	4b46      	ldr	r3, [pc, #280]	@ (801a944 <pvPortMalloc+0x19c>)
 801a82c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801a82e:	4b45      	ldr	r3, [pc, #276]	@ (801a944 <pvPortMalloc+0x19c>)
 801a830:	681b      	ldr	r3, [r3, #0]
 801a832:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a834:	e004      	b.n	801a840 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 801a836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a838:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801a83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a83c:	681b      	ldr	r3, [r3, #0]
 801a83e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a842:	685b      	ldr	r3, [r3, #4]
 801a844:	687a      	ldr	r2, [r7, #4]
 801a846:	429a      	cmp	r2, r3
 801a848:	d903      	bls.n	801a852 <pvPortMalloc+0xaa>
 801a84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a84c:	681b      	ldr	r3, [r3, #0]
 801a84e:	2b00      	cmp	r3, #0
 801a850:	d1f1      	bne.n	801a836 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801a852:	4b39      	ldr	r3, [pc, #228]	@ (801a938 <pvPortMalloc+0x190>)
 801a854:	681b      	ldr	r3, [r3, #0]
 801a856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a858:	429a      	cmp	r2, r3
 801a85a:	d04e      	beq.n	801a8fa <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801a85c:	6a3b      	ldr	r3, [r7, #32]
 801a85e:	681b      	ldr	r3, [r3, #0]
 801a860:	2208      	movs	r2, #8
 801a862:	4413      	add	r3, r2
 801a864:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801a866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a868:	681a      	ldr	r2, [r3, #0]
 801a86a:	6a3b      	ldr	r3, [r7, #32]
 801a86c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801a86e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a870:	685a      	ldr	r2, [r3, #4]
 801a872:	687b      	ldr	r3, [r7, #4]
 801a874:	1ad2      	subs	r2, r2, r3
 801a876:	2308      	movs	r3, #8
 801a878:	005b      	lsls	r3, r3, #1
 801a87a:	429a      	cmp	r2, r3
 801a87c:	d922      	bls.n	801a8c4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801a87e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a880:	687b      	ldr	r3, [r7, #4]
 801a882:	4413      	add	r3, r2
 801a884:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a886:	69bb      	ldr	r3, [r7, #24]
 801a888:	f003 0307 	and.w	r3, r3, #7
 801a88c:	2b00      	cmp	r3, #0
 801a88e:	d00d      	beq.n	801a8ac <pvPortMalloc+0x104>
	__asm volatile
 801a890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a894:	b672      	cpsid	i
 801a896:	f383 8811 	msr	BASEPRI, r3
 801a89a:	f3bf 8f6f 	isb	sy
 801a89e:	f3bf 8f4f 	dsb	sy
 801a8a2:	b662      	cpsie	i
 801a8a4:	613b      	str	r3, [r7, #16]
}
 801a8a6:	bf00      	nop
 801a8a8:	bf00      	nop
 801a8aa:	e7fd      	b.n	801a8a8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801a8ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a8ae:	685a      	ldr	r2, [r3, #4]
 801a8b0:	687b      	ldr	r3, [r7, #4]
 801a8b2:	1ad2      	subs	r2, r2, r3
 801a8b4:	69bb      	ldr	r3, [r7, #24]
 801a8b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801a8b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a8ba:	687a      	ldr	r2, [r7, #4]
 801a8bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801a8be:	69b8      	ldr	r0, [r7, #24]
 801a8c0:	f000 f906 	bl	801aad0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801a8c4:	4b1e      	ldr	r3, [pc, #120]	@ (801a940 <pvPortMalloc+0x198>)
 801a8c6:	681a      	ldr	r2, [r3, #0]
 801a8c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a8ca:	685b      	ldr	r3, [r3, #4]
 801a8cc:	1ad3      	subs	r3, r2, r3
 801a8ce:	4a1c      	ldr	r2, [pc, #112]	@ (801a940 <pvPortMalloc+0x198>)
 801a8d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801a8d2:	4b1b      	ldr	r3, [pc, #108]	@ (801a940 <pvPortMalloc+0x198>)
 801a8d4:	681a      	ldr	r2, [r3, #0]
 801a8d6:	4b1c      	ldr	r3, [pc, #112]	@ (801a948 <pvPortMalloc+0x1a0>)
 801a8d8:	681b      	ldr	r3, [r3, #0]
 801a8da:	429a      	cmp	r2, r3
 801a8dc:	d203      	bcs.n	801a8e6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801a8de:	4b18      	ldr	r3, [pc, #96]	@ (801a940 <pvPortMalloc+0x198>)
 801a8e0:	681b      	ldr	r3, [r3, #0]
 801a8e2:	4a19      	ldr	r2, [pc, #100]	@ (801a948 <pvPortMalloc+0x1a0>)
 801a8e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801a8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a8e8:	685a      	ldr	r2, [r3, #4]
 801a8ea:	4b14      	ldr	r3, [pc, #80]	@ (801a93c <pvPortMalloc+0x194>)
 801a8ec:	681b      	ldr	r3, [r3, #0]
 801a8ee:	431a      	orrs	r2, r3
 801a8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a8f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801a8f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a8f6:	2200      	movs	r2, #0
 801a8f8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801a8fa:	f7fe fedf 	bl	80196bc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801a8fe:	69fb      	ldr	r3, [r7, #28]
 801a900:	2b00      	cmp	r3, #0
 801a902:	d101      	bne.n	801a908 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 801a904:	f7e6 ff6b 	bl	80017de <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801a908:	69fb      	ldr	r3, [r7, #28]
 801a90a:	f003 0307 	and.w	r3, r3, #7
 801a90e:	2b00      	cmp	r3, #0
 801a910:	d00d      	beq.n	801a92e <pvPortMalloc+0x186>
	__asm volatile
 801a912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a916:	b672      	cpsid	i
 801a918:	f383 8811 	msr	BASEPRI, r3
 801a91c:	f3bf 8f6f 	isb	sy
 801a920:	f3bf 8f4f 	dsb	sy
 801a924:	b662      	cpsie	i
 801a926:	60fb      	str	r3, [r7, #12]
}
 801a928:	bf00      	nop
 801a92a:	bf00      	nop
 801a92c:	e7fd      	b.n	801a92a <pvPortMalloc+0x182>
	return pvReturn;
 801a92e:	69fb      	ldr	r3, [r7, #28]
}
 801a930:	4618      	mov	r0, r3
 801a932:	3728      	adds	r7, #40	@ 0x28
 801a934:	46bd      	mov	sp, r7
 801a936:	bd80      	pop	{r7, pc}
 801a938:	2000a590 	.word	0x2000a590
 801a93c:	2000a59c 	.word	0x2000a59c
 801a940:	2000a594 	.word	0x2000a594
 801a944:	2000a588 	.word	0x2000a588
 801a948:	2000a598 	.word	0x2000a598

0801a94c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801a94c:	b580      	push	{r7, lr}
 801a94e:	b086      	sub	sp, #24
 801a950:	af00      	add	r7, sp, #0
 801a952:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	2b00      	cmp	r3, #0
 801a95c:	d04e      	beq.n	801a9fc <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801a95e:	2308      	movs	r3, #8
 801a960:	425b      	negs	r3, r3
 801a962:	697a      	ldr	r2, [r7, #20]
 801a964:	4413      	add	r3, r2
 801a966:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801a968:	697b      	ldr	r3, [r7, #20]
 801a96a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801a96c:	693b      	ldr	r3, [r7, #16]
 801a96e:	685a      	ldr	r2, [r3, #4]
 801a970:	4b24      	ldr	r3, [pc, #144]	@ (801aa04 <vPortFree+0xb8>)
 801a972:	681b      	ldr	r3, [r3, #0]
 801a974:	4013      	ands	r3, r2
 801a976:	2b00      	cmp	r3, #0
 801a978:	d10d      	bne.n	801a996 <vPortFree+0x4a>
	__asm volatile
 801a97a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a97e:	b672      	cpsid	i
 801a980:	f383 8811 	msr	BASEPRI, r3
 801a984:	f3bf 8f6f 	isb	sy
 801a988:	f3bf 8f4f 	dsb	sy
 801a98c:	b662      	cpsie	i
 801a98e:	60fb      	str	r3, [r7, #12]
}
 801a990:	bf00      	nop
 801a992:	bf00      	nop
 801a994:	e7fd      	b.n	801a992 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801a996:	693b      	ldr	r3, [r7, #16]
 801a998:	681b      	ldr	r3, [r3, #0]
 801a99a:	2b00      	cmp	r3, #0
 801a99c:	d00d      	beq.n	801a9ba <vPortFree+0x6e>
	__asm volatile
 801a99e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a9a2:	b672      	cpsid	i
 801a9a4:	f383 8811 	msr	BASEPRI, r3
 801a9a8:	f3bf 8f6f 	isb	sy
 801a9ac:	f3bf 8f4f 	dsb	sy
 801a9b0:	b662      	cpsie	i
 801a9b2:	60bb      	str	r3, [r7, #8]
}
 801a9b4:	bf00      	nop
 801a9b6:	bf00      	nop
 801a9b8:	e7fd      	b.n	801a9b6 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801a9ba:	693b      	ldr	r3, [r7, #16]
 801a9bc:	685a      	ldr	r2, [r3, #4]
 801a9be:	4b11      	ldr	r3, [pc, #68]	@ (801aa04 <vPortFree+0xb8>)
 801a9c0:	681b      	ldr	r3, [r3, #0]
 801a9c2:	4013      	ands	r3, r2
 801a9c4:	2b00      	cmp	r3, #0
 801a9c6:	d019      	beq.n	801a9fc <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801a9c8:	693b      	ldr	r3, [r7, #16]
 801a9ca:	681b      	ldr	r3, [r3, #0]
 801a9cc:	2b00      	cmp	r3, #0
 801a9ce:	d115      	bne.n	801a9fc <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801a9d0:	693b      	ldr	r3, [r7, #16]
 801a9d2:	685a      	ldr	r2, [r3, #4]
 801a9d4:	4b0b      	ldr	r3, [pc, #44]	@ (801aa04 <vPortFree+0xb8>)
 801a9d6:	681b      	ldr	r3, [r3, #0]
 801a9d8:	43db      	mvns	r3, r3
 801a9da:	401a      	ands	r2, r3
 801a9dc:	693b      	ldr	r3, [r7, #16]
 801a9de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801a9e0:	f7fe fe5e 	bl	80196a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801a9e4:	693b      	ldr	r3, [r7, #16]
 801a9e6:	685a      	ldr	r2, [r3, #4]
 801a9e8:	4b07      	ldr	r3, [pc, #28]	@ (801aa08 <vPortFree+0xbc>)
 801a9ea:	681b      	ldr	r3, [r3, #0]
 801a9ec:	4413      	add	r3, r2
 801a9ee:	4a06      	ldr	r2, [pc, #24]	@ (801aa08 <vPortFree+0xbc>)
 801a9f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801a9f2:	6938      	ldr	r0, [r7, #16]
 801a9f4:	f000 f86c 	bl	801aad0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801a9f8:	f7fe fe60 	bl	80196bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801a9fc:	bf00      	nop
 801a9fe:	3718      	adds	r7, #24
 801aa00:	46bd      	mov	sp, r7
 801aa02:	bd80      	pop	{r7, pc}
 801aa04:	2000a59c 	.word	0x2000a59c
 801aa08:	2000a594 	.word	0x2000a594

0801aa0c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801aa0c:	b480      	push	{r7}
 801aa0e:	b085      	sub	sp, #20
 801aa10:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801aa12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801aa16:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801aa18:	4b27      	ldr	r3, [pc, #156]	@ (801aab8 <prvHeapInit+0xac>)
 801aa1a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801aa1c:	68fb      	ldr	r3, [r7, #12]
 801aa1e:	f003 0307 	and.w	r3, r3, #7
 801aa22:	2b00      	cmp	r3, #0
 801aa24:	d00c      	beq.n	801aa40 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801aa26:	68fb      	ldr	r3, [r7, #12]
 801aa28:	3307      	adds	r3, #7
 801aa2a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801aa2c:	68fb      	ldr	r3, [r7, #12]
 801aa2e:	f023 0307 	bic.w	r3, r3, #7
 801aa32:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801aa34:	68ba      	ldr	r2, [r7, #8]
 801aa36:	68fb      	ldr	r3, [r7, #12]
 801aa38:	1ad3      	subs	r3, r2, r3
 801aa3a:	4a1f      	ldr	r2, [pc, #124]	@ (801aab8 <prvHeapInit+0xac>)
 801aa3c:	4413      	add	r3, r2
 801aa3e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801aa40:	68fb      	ldr	r3, [r7, #12]
 801aa42:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801aa44:	4a1d      	ldr	r2, [pc, #116]	@ (801aabc <prvHeapInit+0xb0>)
 801aa46:	687b      	ldr	r3, [r7, #4]
 801aa48:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801aa4a:	4b1c      	ldr	r3, [pc, #112]	@ (801aabc <prvHeapInit+0xb0>)
 801aa4c:	2200      	movs	r2, #0
 801aa4e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801aa50:	687b      	ldr	r3, [r7, #4]
 801aa52:	68ba      	ldr	r2, [r7, #8]
 801aa54:	4413      	add	r3, r2
 801aa56:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801aa58:	2208      	movs	r2, #8
 801aa5a:	68fb      	ldr	r3, [r7, #12]
 801aa5c:	1a9b      	subs	r3, r3, r2
 801aa5e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801aa60:	68fb      	ldr	r3, [r7, #12]
 801aa62:	f023 0307 	bic.w	r3, r3, #7
 801aa66:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801aa68:	68fb      	ldr	r3, [r7, #12]
 801aa6a:	4a15      	ldr	r2, [pc, #84]	@ (801aac0 <prvHeapInit+0xb4>)
 801aa6c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801aa6e:	4b14      	ldr	r3, [pc, #80]	@ (801aac0 <prvHeapInit+0xb4>)
 801aa70:	681b      	ldr	r3, [r3, #0]
 801aa72:	2200      	movs	r2, #0
 801aa74:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801aa76:	4b12      	ldr	r3, [pc, #72]	@ (801aac0 <prvHeapInit+0xb4>)
 801aa78:	681b      	ldr	r3, [r3, #0]
 801aa7a:	2200      	movs	r2, #0
 801aa7c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801aa82:	683b      	ldr	r3, [r7, #0]
 801aa84:	68fa      	ldr	r2, [r7, #12]
 801aa86:	1ad2      	subs	r2, r2, r3
 801aa88:	683b      	ldr	r3, [r7, #0]
 801aa8a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801aa8c:	4b0c      	ldr	r3, [pc, #48]	@ (801aac0 <prvHeapInit+0xb4>)
 801aa8e:	681a      	ldr	r2, [r3, #0]
 801aa90:	683b      	ldr	r3, [r7, #0]
 801aa92:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801aa94:	683b      	ldr	r3, [r7, #0]
 801aa96:	685b      	ldr	r3, [r3, #4]
 801aa98:	4a0a      	ldr	r2, [pc, #40]	@ (801aac4 <prvHeapInit+0xb8>)
 801aa9a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801aa9c:	683b      	ldr	r3, [r7, #0]
 801aa9e:	685b      	ldr	r3, [r3, #4]
 801aaa0:	4a09      	ldr	r2, [pc, #36]	@ (801aac8 <prvHeapInit+0xbc>)
 801aaa2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801aaa4:	4b09      	ldr	r3, [pc, #36]	@ (801aacc <prvHeapInit+0xc0>)
 801aaa6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801aaaa:	601a      	str	r2, [r3, #0]
}
 801aaac:	bf00      	nop
 801aaae:	3714      	adds	r7, #20
 801aab0:	46bd      	mov	sp, r7
 801aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aab6:	4770      	bx	lr
 801aab8:	20002588 	.word	0x20002588
 801aabc:	2000a588 	.word	0x2000a588
 801aac0:	2000a590 	.word	0x2000a590
 801aac4:	2000a598 	.word	0x2000a598
 801aac8:	2000a594 	.word	0x2000a594
 801aacc:	2000a59c 	.word	0x2000a59c

0801aad0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801aad0:	b480      	push	{r7}
 801aad2:	b085      	sub	sp, #20
 801aad4:	af00      	add	r7, sp, #0
 801aad6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801aad8:	4b28      	ldr	r3, [pc, #160]	@ (801ab7c <prvInsertBlockIntoFreeList+0xac>)
 801aada:	60fb      	str	r3, [r7, #12]
 801aadc:	e002      	b.n	801aae4 <prvInsertBlockIntoFreeList+0x14>
 801aade:	68fb      	ldr	r3, [r7, #12]
 801aae0:	681b      	ldr	r3, [r3, #0]
 801aae2:	60fb      	str	r3, [r7, #12]
 801aae4:	68fb      	ldr	r3, [r7, #12]
 801aae6:	681b      	ldr	r3, [r3, #0]
 801aae8:	687a      	ldr	r2, [r7, #4]
 801aaea:	429a      	cmp	r2, r3
 801aaec:	d8f7      	bhi.n	801aade <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801aaee:	68fb      	ldr	r3, [r7, #12]
 801aaf0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801aaf2:	68fb      	ldr	r3, [r7, #12]
 801aaf4:	685b      	ldr	r3, [r3, #4]
 801aaf6:	68ba      	ldr	r2, [r7, #8]
 801aaf8:	4413      	add	r3, r2
 801aafa:	687a      	ldr	r2, [r7, #4]
 801aafc:	429a      	cmp	r2, r3
 801aafe:	d108      	bne.n	801ab12 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801ab00:	68fb      	ldr	r3, [r7, #12]
 801ab02:	685a      	ldr	r2, [r3, #4]
 801ab04:	687b      	ldr	r3, [r7, #4]
 801ab06:	685b      	ldr	r3, [r3, #4]
 801ab08:	441a      	add	r2, r3
 801ab0a:	68fb      	ldr	r3, [r7, #12]
 801ab0c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801ab0e:	68fb      	ldr	r3, [r7, #12]
 801ab10:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801ab12:	687b      	ldr	r3, [r7, #4]
 801ab14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801ab16:	687b      	ldr	r3, [r7, #4]
 801ab18:	685b      	ldr	r3, [r3, #4]
 801ab1a:	68ba      	ldr	r2, [r7, #8]
 801ab1c:	441a      	add	r2, r3
 801ab1e:	68fb      	ldr	r3, [r7, #12]
 801ab20:	681b      	ldr	r3, [r3, #0]
 801ab22:	429a      	cmp	r2, r3
 801ab24:	d118      	bne.n	801ab58 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801ab26:	68fb      	ldr	r3, [r7, #12]
 801ab28:	681a      	ldr	r2, [r3, #0]
 801ab2a:	4b15      	ldr	r3, [pc, #84]	@ (801ab80 <prvInsertBlockIntoFreeList+0xb0>)
 801ab2c:	681b      	ldr	r3, [r3, #0]
 801ab2e:	429a      	cmp	r2, r3
 801ab30:	d00d      	beq.n	801ab4e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801ab32:	687b      	ldr	r3, [r7, #4]
 801ab34:	685a      	ldr	r2, [r3, #4]
 801ab36:	68fb      	ldr	r3, [r7, #12]
 801ab38:	681b      	ldr	r3, [r3, #0]
 801ab3a:	685b      	ldr	r3, [r3, #4]
 801ab3c:	441a      	add	r2, r3
 801ab3e:	687b      	ldr	r3, [r7, #4]
 801ab40:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801ab42:	68fb      	ldr	r3, [r7, #12]
 801ab44:	681b      	ldr	r3, [r3, #0]
 801ab46:	681a      	ldr	r2, [r3, #0]
 801ab48:	687b      	ldr	r3, [r7, #4]
 801ab4a:	601a      	str	r2, [r3, #0]
 801ab4c:	e008      	b.n	801ab60 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801ab4e:	4b0c      	ldr	r3, [pc, #48]	@ (801ab80 <prvInsertBlockIntoFreeList+0xb0>)
 801ab50:	681a      	ldr	r2, [r3, #0]
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	601a      	str	r2, [r3, #0]
 801ab56:	e003      	b.n	801ab60 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801ab58:	68fb      	ldr	r3, [r7, #12]
 801ab5a:	681a      	ldr	r2, [r3, #0]
 801ab5c:	687b      	ldr	r3, [r7, #4]
 801ab5e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801ab60:	68fa      	ldr	r2, [r7, #12]
 801ab62:	687b      	ldr	r3, [r7, #4]
 801ab64:	429a      	cmp	r2, r3
 801ab66:	d002      	beq.n	801ab6e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801ab68:	68fb      	ldr	r3, [r7, #12]
 801ab6a:	687a      	ldr	r2, [r7, #4]
 801ab6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801ab6e:	bf00      	nop
 801ab70:	3714      	adds	r7, #20
 801ab72:	46bd      	mov	sp, r7
 801ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab78:	4770      	bx	lr
 801ab7a:	bf00      	nop
 801ab7c:	2000a588 	.word	0x2000a588
 801ab80:	2000a590 	.word	0x2000a590

0801ab84 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801ab84:	b580      	push	{r7, lr}
 801ab86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801ab88:	2201      	movs	r2, #1
 801ab8a:	490e      	ldr	r1, [pc, #56]	@ (801abc4 <MX_USB_HOST_Init+0x40>)
 801ab8c:	480e      	ldr	r0, [pc, #56]	@ (801abc8 <MX_USB_HOST_Init+0x44>)
 801ab8e:	f7f8 fac5 	bl	801311c <USBH_Init>
 801ab92:	4603      	mov	r3, r0
 801ab94:	2b00      	cmp	r3, #0
 801ab96:	d001      	beq.n	801ab9c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801ab98:	f7e8 fdbe 	bl	8003718 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801ab9c:	490b      	ldr	r1, [pc, #44]	@ (801abcc <MX_USB_HOST_Init+0x48>)
 801ab9e:	480a      	ldr	r0, [pc, #40]	@ (801abc8 <MX_USB_HOST_Init+0x44>)
 801aba0:	f7f8 fb8f 	bl	80132c2 <USBH_RegisterClass>
 801aba4:	4603      	mov	r3, r0
 801aba6:	2b00      	cmp	r3, #0
 801aba8:	d001      	beq.n	801abae <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801abaa:	f7e8 fdb5 	bl	8003718 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801abae:	4806      	ldr	r0, [pc, #24]	@ (801abc8 <MX_USB_HOST_Init+0x44>)
 801abb0:	f7f8 fc13 	bl	80133da <USBH_Start>
 801abb4:	4603      	mov	r3, r0
 801abb6:	2b00      	cmp	r3, #0
 801abb8:	d001      	beq.n	801abbe <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801abba:	f7e8 fdad 	bl	8003718 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801abbe:	bf00      	nop
 801abc0:	bd80      	pop	{r7, pc}
 801abc2:	bf00      	nop
 801abc4:	0801abd1 	.word	0x0801abd1
 801abc8:	2000a5a0 	.word	0x2000a5a0
 801abcc:	2000006c 	.word	0x2000006c

0801abd0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 801abd0:	b480      	push	{r7}
 801abd2:	b083      	sub	sp, #12
 801abd4:	af00      	add	r7, sp, #0
 801abd6:	6078      	str	r0, [r7, #4]
 801abd8:	460b      	mov	r3, r1
 801abda:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801abdc:	78fb      	ldrb	r3, [r7, #3]
 801abde:	3b01      	subs	r3, #1
 801abe0:	2b04      	cmp	r3, #4
 801abe2:	d819      	bhi.n	801ac18 <USBH_UserProcess+0x48>
 801abe4:	a201      	add	r2, pc, #4	@ (adr r2, 801abec <USBH_UserProcess+0x1c>)
 801abe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801abea:	bf00      	nop
 801abec:	0801ac19 	.word	0x0801ac19
 801abf0:	0801ac09 	.word	0x0801ac09
 801abf4:	0801ac19 	.word	0x0801ac19
 801abf8:	0801ac11 	.word	0x0801ac11
 801abfc:	0801ac01 	.word	0x0801ac01
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 801ac00:	4b09      	ldr	r3, [pc, #36]	@ (801ac28 <USBH_UserProcess+0x58>)
 801ac02:	2203      	movs	r2, #3
 801ac04:	701a      	strb	r2, [r3, #0]
  break;
 801ac06:	e008      	b.n	801ac1a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801ac08:	4b07      	ldr	r3, [pc, #28]	@ (801ac28 <USBH_UserProcess+0x58>)
 801ac0a:	2202      	movs	r2, #2
 801ac0c:	701a      	strb	r2, [r3, #0]
  break;
 801ac0e:	e004      	b.n	801ac1a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 801ac10:	4b05      	ldr	r3, [pc, #20]	@ (801ac28 <USBH_UserProcess+0x58>)
 801ac12:	2201      	movs	r2, #1
 801ac14:	701a      	strb	r2, [r3, #0]
  break;
 801ac16:	e000      	b.n	801ac1a <USBH_UserProcess+0x4a>

  default:
  break;
 801ac18:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801ac1a:	bf00      	nop
 801ac1c:	370c      	adds	r7, #12
 801ac1e:	46bd      	mov	sp, r7
 801ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac24:	4770      	bx	lr
 801ac26:	bf00      	nop
 801ac28:	2000a984 	.word	0x2000a984

0801ac2c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801ac2c:	b580      	push	{r7, lr}
 801ac2e:	b08a      	sub	sp, #40	@ 0x28
 801ac30:	af00      	add	r7, sp, #0
 801ac32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801ac34:	f107 0314 	add.w	r3, r7, #20
 801ac38:	2200      	movs	r2, #0
 801ac3a:	601a      	str	r2, [r3, #0]
 801ac3c:	605a      	str	r2, [r3, #4]
 801ac3e:	609a      	str	r2, [r3, #8]
 801ac40:	60da      	str	r2, [r3, #12]
 801ac42:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 801ac44:	687b      	ldr	r3, [r7, #4]
 801ac46:	681b      	ldr	r3, [r3, #0]
 801ac48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801ac4c:	d13c      	bne.n	801acc8 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801ac4e:	4b20      	ldr	r3, [pc, #128]	@ (801acd0 <HAL_HCD_MspInit+0xa4>)
 801ac50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ac52:	4a1f      	ldr	r2, [pc, #124]	@ (801acd0 <HAL_HCD_MspInit+0xa4>)
 801ac54:	f043 0301 	orr.w	r3, r3, #1
 801ac58:	6313      	str	r3, [r2, #48]	@ 0x30
 801ac5a:	4b1d      	ldr	r3, [pc, #116]	@ (801acd0 <HAL_HCD_MspInit+0xa4>)
 801ac5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ac5e:	f003 0301 	and.w	r3, r3, #1
 801ac62:	613b      	str	r3, [r7, #16]
 801ac64:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 801ac66:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 801ac6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ac6c:	2302      	movs	r3, #2
 801ac6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ac70:	2300      	movs	r3, #0
 801ac72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801ac74:	2303      	movs	r3, #3
 801ac76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801ac78:	230a      	movs	r3, #10
 801ac7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801ac7c:	f107 0314 	add.w	r3, r7, #20
 801ac80:	4619      	mov	r1, r3
 801ac82:	4814      	ldr	r0, [pc, #80]	@ (801acd4 <HAL_HCD_MspInit+0xa8>)
 801ac84:	f7ec fc30 	bl	80074e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801ac88:	4b11      	ldr	r3, [pc, #68]	@ (801acd0 <HAL_HCD_MspInit+0xa4>)
 801ac8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ac8c:	4a10      	ldr	r2, [pc, #64]	@ (801acd0 <HAL_HCD_MspInit+0xa4>)
 801ac8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ac92:	6353      	str	r3, [r2, #52]	@ 0x34
 801ac94:	4b0e      	ldr	r3, [pc, #56]	@ (801acd0 <HAL_HCD_MspInit+0xa4>)
 801ac96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ac98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801ac9c:	60fb      	str	r3, [r7, #12]
 801ac9e:	68fb      	ldr	r3, [r7, #12]
 801aca0:	4b0b      	ldr	r3, [pc, #44]	@ (801acd0 <HAL_HCD_MspInit+0xa4>)
 801aca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801aca4:	4a0a      	ldr	r2, [pc, #40]	@ (801acd0 <HAL_HCD_MspInit+0xa4>)
 801aca6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801acaa:	6453      	str	r3, [r2, #68]	@ 0x44
 801acac:	4b08      	ldr	r3, [pc, #32]	@ (801acd0 <HAL_HCD_MspInit+0xa4>)
 801acae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801acb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801acb4:	60bb      	str	r3, [r7, #8]
 801acb6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801acb8:	2200      	movs	r2, #0
 801acba:	2105      	movs	r1, #5
 801acbc:	2043      	movs	r0, #67	@ 0x43
 801acbe:	f7eb f8cf 	bl	8005e60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801acc2:	2043      	movs	r0, #67	@ 0x43
 801acc4:	f7eb f8e8 	bl	8005e98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801acc8:	bf00      	nop
 801acca:	3728      	adds	r7, #40	@ 0x28
 801accc:	46bd      	mov	sp, r7
 801acce:	bd80      	pop	{r7, pc}
 801acd0:	40023800 	.word	0x40023800
 801acd4:	40020000 	.word	0x40020000

0801acd8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801acd8:	b580      	push	{r7, lr}
 801acda:	b082      	sub	sp, #8
 801acdc:	af00      	add	r7, sp, #0
 801acde:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801ace6:	4618      	mov	r0, r3
 801ace8:	f7f8 ffaf 	bl	8013c4a <USBH_LL_IncTimer>
}
 801acec:	bf00      	nop
 801acee:	3708      	adds	r7, #8
 801acf0:	46bd      	mov	sp, r7
 801acf2:	bd80      	pop	{r7, pc}

0801acf4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801acf4:	b580      	push	{r7, lr}
 801acf6:	b082      	sub	sp, #8
 801acf8:	af00      	add	r7, sp, #0
 801acfa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801acfc:	687b      	ldr	r3, [r7, #4]
 801acfe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801ad02:	4618      	mov	r0, r3
 801ad04:	f7f8 ffef 	bl	8013ce6 <USBH_LL_Connect>
}
 801ad08:	bf00      	nop
 801ad0a:	3708      	adds	r7, #8
 801ad0c:	46bd      	mov	sp, r7
 801ad0e:	bd80      	pop	{r7, pc}

0801ad10 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801ad10:	b580      	push	{r7, lr}
 801ad12:	b082      	sub	sp, #8
 801ad14:	af00      	add	r7, sp, #0
 801ad16:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801ad18:	687b      	ldr	r3, [r7, #4]
 801ad1a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801ad1e:	4618      	mov	r0, r3
 801ad20:	f7f8 fffc 	bl	8013d1c <USBH_LL_Disconnect>
}
 801ad24:	bf00      	nop
 801ad26:	3708      	adds	r7, #8
 801ad28:	46bd      	mov	sp, r7
 801ad2a:	bd80      	pop	{r7, pc}

0801ad2c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801ad2c:	b580      	push	{r7, lr}
 801ad2e:	b082      	sub	sp, #8
 801ad30:	af00      	add	r7, sp, #0
 801ad32:	6078      	str	r0, [r7, #4]
 801ad34:	460b      	mov	r3, r1
 801ad36:	70fb      	strb	r3, [r7, #3]
 801ad38:	4613      	mov	r3, r2
 801ad3a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801ad3c:	687b      	ldr	r3, [r7, #4]
 801ad3e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801ad42:	4618      	mov	r0, r3
 801ad44:	f7f9 f850 	bl	8013de8 <USBH_LL_NotifyURBChange>
#endif
}
 801ad48:	bf00      	nop
 801ad4a:	3708      	adds	r7, #8
 801ad4c:	46bd      	mov	sp, r7
 801ad4e:	bd80      	pop	{r7, pc}

0801ad50 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801ad50:	b580      	push	{r7, lr}
 801ad52:	b082      	sub	sp, #8
 801ad54:	af00      	add	r7, sp, #0
 801ad56:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801ad58:	687b      	ldr	r3, [r7, #4]
 801ad5a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801ad5e:	4618      	mov	r0, r3
 801ad60:	f7f8 ff9d 	bl	8013c9e <USBH_LL_PortEnabled>
}
 801ad64:	bf00      	nop
 801ad66:	3708      	adds	r7, #8
 801ad68:	46bd      	mov	sp, r7
 801ad6a:	bd80      	pop	{r7, pc}

0801ad6c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801ad6c:	b580      	push	{r7, lr}
 801ad6e:	b082      	sub	sp, #8
 801ad70:	af00      	add	r7, sp, #0
 801ad72:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801ad74:	687b      	ldr	r3, [r7, #4]
 801ad76:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801ad7a:	4618      	mov	r0, r3
 801ad7c:	f7f8 ffa1 	bl	8013cc2 <USBH_LL_PortDisabled>
}
 801ad80:	bf00      	nop
 801ad82:	3708      	adds	r7, #8
 801ad84:	46bd      	mov	sp, r7
 801ad86:	bd80      	pop	{r7, pc}

0801ad88 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801ad88:	b580      	push	{r7, lr}
 801ad8a:	b082      	sub	sp, #8
 801ad8c:	af00      	add	r7, sp, #0
 801ad8e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801ad90:	687b      	ldr	r3, [r7, #4]
 801ad92:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 801ad96:	2b01      	cmp	r3, #1
 801ad98:	d12a      	bne.n	801adf0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801ad9a:	4a18      	ldr	r2, [pc, #96]	@ (801adfc <USBH_LL_Init+0x74>)
 801ad9c:	687b      	ldr	r3, [r7, #4]
 801ad9e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	4a15      	ldr	r2, [pc, #84]	@ (801adfc <USBH_LL_Init+0x74>)
 801ada6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801adaa:	4b14      	ldr	r3, [pc, #80]	@ (801adfc <USBH_LL_Init+0x74>)
 801adac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801adb0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801adb2:	4b12      	ldr	r3, [pc, #72]	@ (801adfc <USBH_LL_Init+0x74>)
 801adb4:	2208      	movs	r2, #8
 801adb6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801adb8:	4b10      	ldr	r3, [pc, #64]	@ (801adfc <USBH_LL_Init+0x74>)
 801adba:	2201      	movs	r2, #1
 801adbc:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801adbe:	4b0f      	ldr	r3, [pc, #60]	@ (801adfc <USBH_LL_Init+0x74>)
 801adc0:	2200      	movs	r2, #0
 801adc2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801adc4:	4b0d      	ldr	r3, [pc, #52]	@ (801adfc <USBH_LL_Init+0x74>)
 801adc6:	2202      	movs	r2, #2
 801adc8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801adca:	4b0c      	ldr	r3, [pc, #48]	@ (801adfc <USBH_LL_Init+0x74>)
 801adcc:	2200      	movs	r2, #0
 801adce:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801add0:	480a      	ldr	r0, [pc, #40]	@ (801adfc <USBH_LL_Init+0x74>)
 801add2:	f7ec fd4e 	bl	8007872 <HAL_HCD_Init>
 801add6:	4603      	mov	r3, r0
 801add8:	2b00      	cmp	r3, #0
 801adda:	d001      	beq.n	801ade0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801addc:	f7e8 fc9c 	bl	8003718 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801ade0:	4806      	ldr	r0, [pc, #24]	@ (801adfc <USBH_LL_Init+0x74>)
 801ade2:	f7ed f9af 	bl	8008144 <HAL_HCD_GetCurrentFrame>
 801ade6:	4603      	mov	r3, r0
 801ade8:	4619      	mov	r1, r3
 801adea:	6878      	ldr	r0, [r7, #4]
 801adec:	f7f8 ff1e 	bl	8013c2c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801adf0:	2300      	movs	r3, #0
}
 801adf2:	4618      	mov	r0, r3
 801adf4:	3708      	adds	r7, #8
 801adf6:	46bd      	mov	sp, r7
 801adf8:	bd80      	pop	{r7, pc}
 801adfa:	bf00      	nop
 801adfc:	2000a988 	.word	0x2000a988

0801ae00 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801ae00:	b580      	push	{r7, lr}
 801ae02:	b084      	sub	sp, #16
 801ae04:	af00      	add	r7, sp, #0
 801ae06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ae08:	2300      	movs	r3, #0
 801ae0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801ae0c:	2300      	movs	r3, #0
 801ae0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801ae10:	687b      	ldr	r3, [r7, #4]
 801ae12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801ae16:	4618      	mov	r0, r3
 801ae18:	f7ed f91c 	bl	8008054 <HAL_HCD_Start>
 801ae1c:	4603      	mov	r3, r0
 801ae1e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801ae20:	7bfb      	ldrb	r3, [r7, #15]
 801ae22:	4618      	mov	r0, r3
 801ae24:	f000 f95e 	bl	801b0e4 <USBH_Get_USB_Status>
 801ae28:	4603      	mov	r3, r0
 801ae2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ae2c:	7bbb      	ldrb	r3, [r7, #14]
}
 801ae2e:	4618      	mov	r0, r3
 801ae30:	3710      	adds	r7, #16
 801ae32:	46bd      	mov	sp, r7
 801ae34:	bd80      	pop	{r7, pc}

0801ae36 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801ae36:	b580      	push	{r7, lr}
 801ae38:	b084      	sub	sp, #16
 801ae3a:	af00      	add	r7, sp, #0
 801ae3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ae3e:	2300      	movs	r3, #0
 801ae40:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801ae42:	2300      	movs	r3, #0
 801ae44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801ae46:	687b      	ldr	r3, [r7, #4]
 801ae48:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801ae4c:	4618      	mov	r0, r3
 801ae4e:	f7ed f924 	bl	800809a <HAL_HCD_Stop>
 801ae52:	4603      	mov	r3, r0
 801ae54:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801ae56:	7bfb      	ldrb	r3, [r7, #15]
 801ae58:	4618      	mov	r0, r3
 801ae5a:	f000 f943 	bl	801b0e4 <USBH_Get_USB_Status>
 801ae5e:	4603      	mov	r3, r0
 801ae60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ae62:	7bbb      	ldrb	r3, [r7, #14]
}
 801ae64:	4618      	mov	r0, r3
 801ae66:	3710      	adds	r7, #16
 801ae68:	46bd      	mov	sp, r7
 801ae6a:	bd80      	pop	{r7, pc}

0801ae6c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801ae6c:	b580      	push	{r7, lr}
 801ae6e:	b084      	sub	sp, #16
 801ae70:	af00      	add	r7, sp, #0
 801ae72:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 801ae74:	2301      	movs	r3, #1
 801ae76:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801ae78:	687b      	ldr	r3, [r7, #4]
 801ae7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801ae7e:	4618      	mov	r0, r3
 801ae80:	f7ed f96e 	bl	8008160 <HAL_HCD_GetCurrentSpeed>
 801ae84:	4603      	mov	r3, r0
 801ae86:	2b02      	cmp	r3, #2
 801ae88:	d00c      	beq.n	801aea4 <USBH_LL_GetSpeed+0x38>
 801ae8a:	2b02      	cmp	r3, #2
 801ae8c:	d80d      	bhi.n	801aeaa <USBH_LL_GetSpeed+0x3e>
 801ae8e:	2b00      	cmp	r3, #0
 801ae90:	d002      	beq.n	801ae98 <USBH_LL_GetSpeed+0x2c>
 801ae92:	2b01      	cmp	r3, #1
 801ae94:	d003      	beq.n	801ae9e <USBH_LL_GetSpeed+0x32>
 801ae96:	e008      	b.n	801aeaa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 801ae98:	2300      	movs	r3, #0
 801ae9a:	73fb      	strb	r3, [r7, #15]
    break;
 801ae9c:	e008      	b.n	801aeb0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801ae9e:	2301      	movs	r3, #1
 801aea0:	73fb      	strb	r3, [r7, #15]
    break;
 801aea2:	e005      	b.n	801aeb0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 801aea4:	2302      	movs	r3, #2
 801aea6:	73fb      	strb	r3, [r7, #15]
    break;
 801aea8:	e002      	b.n	801aeb0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801aeaa:	2301      	movs	r3, #1
 801aeac:	73fb      	strb	r3, [r7, #15]
    break;
 801aeae:	bf00      	nop
  }
  return  speed;
 801aeb0:	7bfb      	ldrb	r3, [r7, #15]
}
 801aeb2:	4618      	mov	r0, r3
 801aeb4:	3710      	adds	r7, #16
 801aeb6:	46bd      	mov	sp, r7
 801aeb8:	bd80      	pop	{r7, pc}

0801aeba <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801aeba:	b580      	push	{r7, lr}
 801aebc:	b084      	sub	sp, #16
 801aebe:	af00      	add	r7, sp, #0
 801aec0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aec2:	2300      	movs	r3, #0
 801aec4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801aec6:	2300      	movs	r3, #0
 801aec8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801aeca:	687b      	ldr	r3, [r7, #4]
 801aecc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801aed0:	4618      	mov	r0, r3
 801aed2:	f7ed f8ff 	bl	80080d4 <HAL_HCD_ResetPort>
 801aed6:	4603      	mov	r3, r0
 801aed8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801aeda:	7bfb      	ldrb	r3, [r7, #15]
 801aedc:	4618      	mov	r0, r3
 801aede:	f000 f901 	bl	801b0e4 <USBH_Get_USB_Status>
 801aee2:	4603      	mov	r3, r0
 801aee4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801aee6:	7bbb      	ldrb	r3, [r7, #14]
}
 801aee8:	4618      	mov	r0, r3
 801aeea:	3710      	adds	r7, #16
 801aeec:	46bd      	mov	sp, r7
 801aeee:	bd80      	pop	{r7, pc}

0801aef0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801aef0:	b580      	push	{r7, lr}
 801aef2:	b082      	sub	sp, #8
 801aef4:	af00      	add	r7, sp, #0
 801aef6:	6078      	str	r0, [r7, #4]
 801aef8:	460b      	mov	r3, r1
 801aefa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801aefc:	687b      	ldr	r3, [r7, #4]
 801aefe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801af02:	78fa      	ldrb	r2, [r7, #3]
 801af04:	4611      	mov	r1, r2
 801af06:	4618      	mov	r0, r3
 801af08:	f7ed f907 	bl	800811a <HAL_HCD_HC_GetXferCount>
 801af0c:	4603      	mov	r3, r0
}
 801af0e:	4618      	mov	r0, r3
 801af10:	3708      	adds	r7, #8
 801af12:	46bd      	mov	sp, r7
 801af14:	bd80      	pop	{r7, pc}

0801af16 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801af16:	b590      	push	{r4, r7, lr}
 801af18:	b089      	sub	sp, #36	@ 0x24
 801af1a:	af04      	add	r7, sp, #16
 801af1c:	6078      	str	r0, [r7, #4]
 801af1e:	4608      	mov	r0, r1
 801af20:	4611      	mov	r1, r2
 801af22:	461a      	mov	r2, r3
 801af24:	4603      	mov	r3, r0
 801af26:	70fb      	strb	r3, [r7, #3]
 801af28:	460b      	mov	r3, r1
 801af2a:	70bb      	strb	r3, [r7, #2]
 801af2c:	4613      	mov	r3, r2
 801af2e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801af30:	2300      	movs	r3, #0
 801af32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801af34:	2300      	movs	r3, #0
 801af36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801af38:	687b      	ldr	r3, [r7, #4]
 801af3a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 801af3e:	787c      	ldrb	r4, [r7, #1]
 801af40:	78ba      	ldrb	r2, [r7, #2]
 801af42:	78f9      	ldrb	r1, [r7, #3]
 801af44:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801af46:	9302      	str	r3, [sp, #8]
 801af48:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801af4c:	9301      	str	r3, [sp, #4]
 801af4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 801af52:	9300      	str	r3, [sp, #0]
 801af54:	4623      	mov	r3, r4
 801af56:	f7ec fcf3 	bl	8007940 <HAL_HCD_HC_Init>
 801af5a:	4603      	mov	r3, r0
 801af5c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801af5e:	7bfb      	ldrb	r3, [r7, #15]
 801af60:	4618      	mov	r0, r3
 801af62:	f000 f8bf 	bl	801b0e4 <USBH_Get_USB_Status>
 801af66:	4603      	mov	r3, r0
 801af68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801af6a:	7bbb      	ldrb	r3, [r7, #14]
}
 801af6c:	4618      	mov	r0, r3
 801af6e:	3714      	adds	r7, #20
 801af70:	46bd      	mov	sp, r7
 801af72:	bd90      	pop	{r4, r7, pc}

0801af74 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801af74:	b580      	push	{r7, lr}
 801af76:	b084      	sub	sp, #16
 801af78:	af00      	add	r7, sp, #0
 801af7a:	6078      	str	r0, [r7, #4]
 801af7c:	460b      	mov	r3, r1
 801af7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801af80:	2300      	movs	r3, #0
 801af82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801af84:	2300      	movs	r3, #0
 801af86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801af88:	687b      	ldr	r3, [r7, #4]
 801af8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801af8e:	78fa      	ldrb	r2, [r7, #3]
 801af90:	4611      	mov	r1, r2
 801af92:	4618      	mov	r0, r3
 801af94:	f7ec fd8c 	bl	8007ab0 <HAL_HCD_HC_Halt>
 801af98:	4603      	mov	r3, r0
 801af9a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801af9c:	7bfb      	ldrb	r3, [r7, #15]
 801af9e:	4618      	mov	r0, r3
 801afa0:	f000 f8a0 	bl	801b0e4 <USBH_Get_USB_Status>
 801afa4:	4603      	mov	r3, r0
 801afa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801afa8:	7bbb      	ldrb	r3, [r7, #14]
}
 801afaa:	4618      	mov	r0, r3
 801afac:	3710      	adds	r7, #16
 801afae:	46bd      	mov	sp, r7
 801afb0:	bd80      	pop	{r7, pc}

0801afb2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801afb2:	b590      	push	{r4, r7, lr}
 801afb4:	b089      	sub	sp, #36	@ 0x24
 801afb6:	af04      	add	r7, sp, #16
 801afb8:	6078      	str	r0, [r7, #4]
 801afba:	4608      	mov	r0, r1
 801afbc:	4611      	mov	r1, r2
 801afbe:	461a      	mov	r2, r3
 801afc0:	4603      	mov	r3, r0
 801afc2:	70fb      	strb	r3, [r7, #3]
 801afc4:	460b      	mov	r3, r1
 801afc6:	70bb      	strb	r3, [r7, #2]
 801afc8:	4613      	mov	r3, r2
 801afca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801afcc:	2300      	movs	r3, #0
 801afce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801afd0:	2300      	movs	r3, #0
 801afd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801afd4:	687b      	ldr	r3, [r7, #4]
 801afd6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 801afda:	787c      	ldrb	r4, [r7, #1]
 801afdc:	78ba      	ldrb	r2, [r7, #2]
 801afde:	78f9      	ldrb	r1, [r7, #3]
 801afe0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801afe4:	9303      	str	r3, [sp, #12]
 801afe6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801afe8:	9302      	str	r3, [sp, #8]
 801afea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801afec:	9301      	str	r3, [sp, #4]
 801afee:	f897 3020 	ldrb.w	r3, [r7, #32]
 801aff2:	9300      	str	r3, [sp, #0]
 801aff4:	4623      	mov	r3, r4
 801aff6:	f7ec fd7f 	bl	8007af8 <HAL_HCD_HC_SubmitRequest>
 801affa:	4603      	mov	r3, r0
 801affc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801affe:	7bfb      	ldrb	r3, [r7, #15]
 801b000:	4618      	mov	r0, r3
 801b002:	f000 f86f 	bl	801b0e4 <USBH_Get_USB_Status>
 801b006:	4603      	mov	r3, r0
 801b008:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b00a:	7bbb      	ldrb	r3, [r7, #14]
}
 801b00c:	4618      	mov	r0, r3
 801b00e:	3714      	adds	r7, #20
 801b010:	46bd      	mov	sp, r7
 801b012:	bd90      	pop	{r4, r7, pc}

0801b014 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801b014:	b580      	push	{r7, lr}
 801b016:	b082      	sub	sp, #8
 801b018:	af00      	add	r7, sp, #0
 801b01a:	6078      	str	r0, [r7, #4]
 801b01c:	460b      	mov	r3, r1
 801b01e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801b020:	687b      	ldr	r3, [r7, #4]
 801b022:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801b026:	78fa      	ldrb	r2, [r7, #3]
 801b028:	4611      	mov	r1, r2
 801b02a:	4618      	mov	r0, r3
 801b02c:	f7ed f860 	bl	80080f0 <HAL_HCD_HC_GetURBState>
 801b030:	4603      	mov	r3, r0
}
 801b032:	4618      	mov	r0, r3
 801b034:	3708      	adds	r7, #8
 801b036:	46bd      	mov	sp, r7
 801b038:	bd80      	pop	{r7, pc}

0801b03a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801b03a:	b580      	push	{r7, lr}
 801b03c:	b082      	sub	sp, #8
 801b03e:	af00      	add	r7, sp, #0
 801b040:	6078      	str	r0, [r7, #4]
 801b042:	460b      	mov	r3, r1
 801b044:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 801b04c:	2b01      	cmp	r3, #1
 801b04e:	d103      	bne.n	801b058 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801b050:	78fb      	ldrb	r3, [r7, #3]
 801b052:	4618      	mov	r0, r3
 801b054:	f000 f872 	bl	801b13c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801b058:	20c8      	movs	r0, #200	@ 0xc8
 801b05a:	f7ea fb8d 	bl	8005778 <HAL_Delay>
  return USBH_OK;
 801b05e:	2300      	movs	r3, #0
}
 801b060:	4618      	mov	r0, r3
 801b062:	3708      	adds	r7, #8
 801b064:	46bd      	mov	sp, r7
 801b066:	bd80      	pop	{r7, pc}

0801b068 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801b068:	b480      	push	{r7}
 801b06a:	b085      	sub	sp, #20
 801b06c:	af00      	add	r7, sp, #0
 801b06e:	6078      	str	r0, [r7, #4]
 801b070:	460b      	mov	r3, r1
 801b072:	70fb      	strb	r3, [r7, #3]
 801b074:	4613      	mov	r3, r2
 801b076:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801b078:	687b      	ldr	r3, [r7, #4]
 801b07a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801b07e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801b080:	78fa      	ldrb	r2, [r7, #3]
 801b082:	68f9      	ldr	r1, [r7, #12]
 801b084:	4613      	mov	r3, r2
 801b086:	011b      	lsls	r3, r3, #4
 801b088:	1a9b      	subs	r3, r3, r2
 801b08a:	009b      	lsls	r3, r3, #2
 801b08c:	440b      	add	r3, r1
 801b08e:	3317      	adds	r3, #23
 801b090:	781b      	ldrb	r3, [r3, #0]
 801b092:	2b00      	cmp	r3, #0
 801b094:	d00a      	beq.n	801b0ac <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801b096:	78fa      	ldrb	r2, [r7, #3]
 801b098:	68f9      	ldr	r1, [r7, #12]
 801b09a:	4613      	mov	r3, r2
 801b09c:	011b      	lsls	r3, r3, #4
 801b09e:	1a9b      	subs	r3, r3, r2
 801b0a0:	009b      	lsls	r3, r3, #2
 801b0a2:	440b      	add	r3, r1
 801b0a4:	333c      	adds	r3, #60	@ 0x3c
 801b0a6:	78ba      	ldrb	r2, [r7, #2]
 801b0a8:	701a      	strb	r2, [r3, #0]
 801b0aa:	e009      	b.n	801b0c0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801b0ac:	78fa      	ldrb	r2, [r7, #3]
 801b0ae:	68f9      	ldr	r1, [r7, #12]
 801b0b0:	4613      	mov	r3, r2
 801b0b2:	011b      	lsls	r3, r3, #4
 801b0b4:	1a9b      	subs	r3, r3, r2
 801b0b6:	009b      	lsls	r3, r3, #2
 801b0b8:	440b      	add	r3, r1
 801b0ba:	333d      	adds	r3, #61	@ 0x3d
 801b0bc:	78ba      	ldrb	r2, [r7, #2]
 801b0be:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801b0c0:	2300      	movs	r3, #0
}
 801b0c2:	4618      	mov	r0, r3
 801b0c4:	3714      	adds	r7, #20
 801b0c6:	46bd      	mov	sp, r7
 801b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0cc:	4770      	bx	lr

0801b0ce <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801b0ce:	b580      	push	{r7, lr}
 801b0d0:	b082      	sub	sp, #8
 801b0d2:	af00      	add	r7, sp, #0
 801b0d4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801b0d6:	6878      	ldr	r0, [r7, #4]
 801b0d8:	f7ea fb4e 	bl	8005778 <HAL_Delay>
}
 801b0dc:	bf00      	nop
 801b0de:	3708      	adds	r7, #8
 801b0e0:	46bd      	mov	sp, r7
 801b0e2:	bd80      	pop	{r7, pc}

0801b0e4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801b0e4:	b480      	push	{r7}
 801b0e6:	b085      	sub	sp, #20
 801b0e8:	af00      	add	r7, sp, #0
 801b0ea:	4603      	mov	r3, r0
 801b0ec:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801b0ee:	2300      	movs	r3, #0
 801b0f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801b0f2:	79fb      	ldrb	r3, [r7, #7]
 801b0f4:	2b03      	cmp	r3, #3
 801b0f6:	d817      	bhi.n	801b128 <USBH_Get_USB_Status+0x44>
 801b0f8:	a201      	add	r2, pc, #4	@ (adr r2, 801b100 <USBH_Get_USB_Status+0x1c>)
 801b0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b0fe:	bf00      	nop
 801b100:	0801b111 	.word	0x0801b111
 801b104:	0801b117 	.word	0x0801b117
 801b108:	0801b11d 	.word	0x0801b11d
 801b10c:	0801b123 	.word	0x0801b123
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801b110:	2300      	movs	r3, #0
 801b112:	73fb      	strb	r3, [r7, #15]
    break;
 801b114:	e00b      	b.n	801b12e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801b116:	2302      	movs	r3, #2
 801b118:	73fb      	strb	r3, [r7, #15]
    break;
 801b11a:	e008      	b.n	801b12e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801b11c:	2301      	movs	r3, #1
 801b11e:	73fb      	strb	r3, [r7, #15]
    break;
 801b120:	e005      	b.n	801b12e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801b122:	2302      	movs	r3, #2
 801b124:	73fb      	strb	r3, [r7, #15]
    break;
 801b126:	e002      	b.n	801b12e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801b128:	2302      	movs	r3, #2
 801b12a:	73fb      	strb	r3, [r7, #15]
    break;
 801b12c:	bf00      	nop
  }
  return usb_status;
 801b12e:	7bfb      	ldrb	r3, [r7, #15]
}
 801b130:	4618      	mov	r0, r3
 801b132:	3714      	adds	r7, #20
 801b134:	46bd      	mov	sp, r7
 801b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b13a:	4770      	bx	lr

0801b13c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 801b13c:	b580      	push	{r7, lr}
 801b13e:	b084      	sub	sp, #16
 801b140:	af00      	add	r7, sp, #0
 801b142:	4603      	mov	r3, r0
 801b144:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801b146:	79fb      	ldrb	r3, [r7, #7]
 801b148:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801b14a:	79fb      	ldrb	r3, [r7, #7]
 801b14c:	2b00      	cmp	r3, #0
 801b14e:	d102      	bne.n	801b156 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 801b150:	2300      	movs	r3, #0
 801b152:	73fb      	strb	r3, [r7, #15]
 801b154:	e001      	b.n	801b15a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 801b156:	2301      	movs	r3, #1
 801b158:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 801b15a:	7bfb      	ldrb	r3, [r7, #15]
 801b15c:	461a      	mov	r2, r3
 801b15e:	2120      	movs	r1, #32
 801b160:	4803      	ldr	r0, [pc, #12]	@ (801b170 <MX_DriverVbusFS+0x34>)
 801b162:	f7ec fb6d 	bl	8007840 <HAL_GPIO_WritePin>
}
 801b166:	bf00      	nop
 801b168:	3710      	adds	r7, #16
 801b16a:	46bd      	mov	sp, r7
 801b16c:	bd80      	pop	{r7, pc}
 801b16e:	bf00      	nop
 801b170:	40020c00 	.word	0x40020c00

0801b174 <malloc>:
 801b174:	4b02      	ldr	r3, [pc, #8]	@ (801b180 <malloc+0xc>)
 801b176:	4601      	mov	r1, r0
 801b178:	6818      	ldr	r0, [r3, #0]
 801b17a:	f000 b82d 	b.w	801b1d8 <_malloc_r>
 801b17e:	bf00      	nop
 801b180:	20000090 	.word	0x20000090

0801b184 <free>:
 801b184:	4b02      	ldr	r3, [pc, #8]	@ (801b190 <free+0xc>)
 801b186:	4601      	mov	r1, r0
 801b188:	6818      	ldr	r0, [r3, #0]
 801b18a:	f000 b9d1 	b.w	801b530 <_free_r>
 801b18e:	bf00      	nop
 801b190:	20000090 	.word	0x20000090

0801b194 <sbrk_aligned>:
 801b194:	b570      	push	{r4, r5, r6, lr}
 801b196:	4e0f      	ldr	r6, [pc, #60]	@ (801b1d4 <sbrk_aligned+0x40>)
 801b198:	460c      	mov	r4, r1
 801b19a:	6831      	ldr	r1, [r6, #0]
 801b19c:	4605      	mov	r5, r0
 801b19e:	b911      	cbnz	r1, 801b1a6 <sbrk_aligned+0x12>
 801b1a0:	f000 f97c 	bl	801b49c <_sbrk_r>
 801b1a4:	6030      	str	r0, [r6, #0]
 801b1a6:	4621      	mov	r1, r4
 801b1a8:	4628      	mov	r0, r5
 801b1aa:	f000 f977 	bl	801b49c <_sbrk_r>
 801b1ae:	1c43      	adds	r3, r0, #1
 801b1b0:	d103      	bne.n	801b1ba <sbrk_aligned+0x26>
 801b1b2:	f04f 34ff 	mov.w	r4, #4294967295
 801b1b6:	4620      	mov	r0, r4
 801b1b8:	bd70      	pop	{r4, r5, r6, pc}
 801b1ba:	1cc4      	adds	r4, r0, #3
 801b1bc:	f024 0403 	bic.w	r4, r4, #3
 801b1c0:	42a0      	cmp	r0, r4
 801b1c2:	d0f8      	beq.n	801b1b6 <sbrk_aligned+0x22>
 801b1c4:	1a21      	subs	r1, r4, r0
 801b1c6:	4628      	mov	r0, r5
 801b1c8:	f000 f968 	bl	801b49c <_sbrk_r>
 801b1cc:	3001      	adds	r0, #1
 801b1ce:	d1f2      	bne.n	801b1b6 <sbrk_aligned+0x22>
 801b1d0:	e7ef      	b.n	801b1b2 <sbrk_aligned+0x1e>
 801b1d2:	bf00      	nop
 801b1d4:	2000ad68 	.word	0x2000ad68

0801b1d8 <_malloc_r>:
 801b1d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b1dc:	1ccd      	adds	r5, r1, #3
 801b1de:	f025 0503 	bic.w	r5, r5, #3
 801b1e2:	3508      	adds	r5, #8
 801b1e4:	2d0c      	cmp	r5, #12
 801b1e6:	bf38      	it	cc
 801b1e8:	250c      	movcc	r5, #12
 801b1ea:	2d00      	cmp	r5, #0
 801b1ec:	4606      	mov	r6, r0
 801b1ee:	db01      	blt.n	801b1f4 <_malloc_r+0x1c>
 801b1f0:	42a9      	cmp	r1, r5
 801b1f2:	d904      	bls.n	801b1fe <_malloc_r+0x26>
 801b1f4:	230c      	movs	r3, #12
 801b1f6:	6033      	str	r3, [r6, #0]
 801b1f8:	2000      	movs	r0, #0
 801b1fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b1fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801b2d4 <_malloc_r+0xfc>
 801b202:	f000 f869 	bl	801b2d8 <__malloc_lock>
 801b206:	f8d8 3000 	ldr.w	r3, [r8]
 801b20a:	461c      	mov	r4, r3
 801b20c:	bb44      	cbnz	r4, 801b260 <_malloc_r+0x88>
 801b20e:	4629      	mov	r1, r5
 801b210:	4630      	mov	r0, r6
 801b212:	f7ff ffbf 	bl	801b194 <sbrk_aligned>
 801b216:	1c43      	adds	r3, r0, #1
 801b218:	4604      	mov	r4, r0
 801b21a:	d158      	bne.n	801b2ce <_malloc_r+0xf6>
 801b21c:	f8d8 4000 	ldr.w	r4, [r8]
 801b220:	4627      	mov	r7, r4
 801b222:	2f00      	cmp	r7, #0
 801b224:	d143      	bne.n	801b2ae <_malloc_r+0xd6>
 801b226:	2c00      	cmp	r4, #0
 801b228:	d04b      	beq.n	801b2c2 <_malloc_r+0xea>
 801b22a:	6823      	ldr	r3, [r4, #0]
 801b22c:	4639      	mov	r1, r7
 801b22e:	4630      	mov	r0, r6
 801b230:	eb04 0903 	add.w	r9, r4, r3
 801b234:	f000 f932 	bl	801b49c <_sbrk_r>
 801b238:	4581      	cmp	r9, r0
 801b23a:	d142      	bne.n	801b2c2 <_malloc_r+0xea>
 801b23c:	6821      	ldr	r1, [r4, #0]
 801b23e:	1a6d      	subs	r5, r5, r1
 801b240:	4629      	mov	r1, r5
 801b242:	4630      	mov	r0, r6
 801b244:	f7ff ffa6 	bl	801b194 <sbrk_aligned>
 801b248:	3001      	adds	r0, #1
 801b24a:	d03a      	beq.n	801b2c2 <_malloc_r+0xea>
 801b24c:	6823      	ldr	r3, [r4, #0]
 801b24e:	442b      	add	r3, r5
 801b250:	6023      	str	r3, [r4, #0]
 801b252:	f8d8 3000 	ldr.w	r3, [r8]
 801b256:	685a      	ldr	r2, [r3, #4]
 801b258:	bb62      	cbnz	r2, 801b2b4 <_malloc_r+0xdc>
 801b25a:	f8c8 7000 	str.w	r7, [r8]
 801b25e:	e00f      	b.n	801b280 <_malloc_r+0xa8>
 801b260:	6822      	ldr	r2, [r4, #0]
 801b262:	1b52      	subs	r2, r2, r5
 801b264:	d420      	bmi.n	801b2a8 <_malloc_r+0xd0>
 801b266:	2a0b      	cmp	r2, #11
 801b268:	d917      	bls.n	801b29a <_malloc_r+0xc2>
 801b26a:	1961      	adds	r1, r4, r5
 801b26c:	42a3      	cmp	r3, r4
 801b26e:	6025      	str	r5, [r4, #0]
 801b270:	bf18      	it	ne
 801b272:	6059      	strne	r1, [r3, #4]
 801b274:	6863      	ldr	r3, [r4, #4]
 801b276:	bf08      	it	eq
 801b278:	f8c8 1000 	streq.w	r1, [r8]
 801b27c:	5162      	str	r2, [r4, r5]
 801b27e:	604b      	str	r3, [r1, #4]
 801b280:	4630      	mov	r0, r6
 801b282:	f000 f82f 	bl	801b2e4 <__malloc_unlock>
 801b286:	f104 000b 	add.w	r0, r4, #11
 801b28a:	1d23      	adds	r3, r4, #4
 801b28c:	f020 0007 	bic.w	r0, r0, #7
 801b290:	1ac2      	subs	r2, r0, r3
 801b292:	bf1c      	itt	ne
 801b294:	1a1b      	subne	r3, r3, r0
 801b296:	50a3      	strne	r3, [r4, r2]
 801b298:	e7af      	b.n	801b1fa <_malloc_r+0x22>
 801b29a:	6862      	ldr	r2, [r4, #4]
 801b29c:	42a3      	cmp	r3, r4
 801b29e:	bf0c      	ite	eq
 801b2a0:	f8c8 2000 	streq.w	r2, [r8]
 801b2a4:	605a      	strne	r2, [r3, #4]
 801b2a6:	e7eb      	b.n	801b280 <_malloc_r+0xa8>
 801b2a8:	4623      	mov	r3, r4
 801b2aa:	6864      	ldr	r4, [r4, #4]
 801b2ac:	e7ae      	b.n	801b20c <_malloc_r+0x34>
 801b2ae:	463c      	mov	r4, r7
 801b2b0:	687f      	ldr	r7, [r7, #4]
 801b2b2:	e7b6      	b.n	801b222 <_malloc_r+0x4a>
 801b2b4:	461a      	mov	r2, r3
 801b2b6:	685b      	ldr	r3, [r3, #4]
 801b2b8:	42a3      	cmp	r3, r4
 801b2ba:	d1fb      	bne.n	801b2b4 <_malloc_r+0xdc>
 801b2bc:	2300      	movs	r3, #0
 801b2be:	6053      	str	r3, [r2, #4]
 801b2c0:	e7de      	b.n	801b280 <_malloc_r+0xa8>
 801b2c2:	230c      	movs	r3, #12
 801b2c4:	6033      	str	r3, [r6, #0]
 801b2c6:	4630      	mov	r0, r6
 801b2c8:	f000 f80c 	bl	801b2e4 <__malloc_unlock>
 801b2cc:	e794      	b.n	801b1f8 <_malloc_r+0x20>
 801b2ce:	6005      	str	r5, [r0, #0]
 801b2d0:	e7d6      	b.n	801b280 <_malloc_r+0xa8>
 801b2d2:	bf00      	nop
 801b2d4:	2000ad6c 	.word	0x2000ad6c

0801b2d8 <__malloc_lock>:
 801b2d8:	4801      	ldr	r0, [pc, #4]	@ (801b2e0 <__malloc_lock+0x8>)
 801b2da:	f000 b919 	b.w	801b510 <__retarget_lock_acquire_recursive>
 801b2de:	bf00      	nop
 801b2e0:	2000aeac 	.word	0x2000aeac

0801b2e4 <__malloc_unlock>:
 801b2e4:	4801      	ldr	r0, [pc, #4]	@ (801b2ec <__malloc_unlock+0x8>)
 801b2e6:	f000 b914 	b.w	801b512 <__retarget_lock_release_recursive>
 801b2ea:	bf00      	nop
 801b2ec:	2000aeac 	.word	0x2000aeac

0801b2f0 <sniprintf>:
 801b2f0:	b40c      	push	{r2, r3}
 801b2f2:	b530      	push	{r4, r5, lr}
 801b2f4:	4b18      	ldr	r3, [pc, #96]	@ (801b358 <sniprintf+0x68>)
 801b2f6:	1e0c      	subs	r4, r1, #0
 801b2f8:	681d      	ldr	r5, [r3, #0]
 801b2fa:	b09d      	sub	sp, #116	@ 0x74
 801b2fc:	da08      	bge.n	801b310 <sniprintf+0x20>
 801b2fe:	238b      	movs	r3, #139	@ 0x8b
 801b300:	602b      	str	r3, [r5, #0]
 801b302:	f04f 30ff 	mov.w	r0, #4294967295
 801b306:	b01d      	add	sp, #116	@ 0x74
 801b308:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b30c:	b002      	add	sp, #8
 801b30e:	4770      	bx	lr
 801b310:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b314:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b318:	f04f 0300 	mov.w	r3, #0
 801b31c:	931b      	str	r3, [sp, #108]	@ 0x6c
 801b31e:	bf14      	ite	ne
 801b320:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b324:	4623      	moveq	r3, r4
 801b326:	9304      	str	r3, [sp, #16]
 801b328:	9307      	str	r3, [sp, #28]
 801b32a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b32e:	9002      	str	r0, [sp, #8]
 801b330:	9006      	str	r0, [sp, #24]
 801b332:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b336:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b338:	ab21      	add	r3, sp, #132	@ 0x84
 801b33a:	a902      	add	r1, sp, #8
 801b33c:	4628      	mov	r0, r5
 801b33e:	9301      	str	r3, [sp, #4]
 801b340:	f000 f99c 	bl	801b67c <_svfiprintf_r>
 801b344:	1c43      	adds	r3, r0, #1
 801b346:	bfbc      	itt	lt
 801b348:	238b      	movlt	r3, #139	@ 0x8b
 801b34a:	602b      	strlt	r3, [r5, #0]
 801b34c:	2c00      	cmp	r4, #0
 801b34e:	d0da      	beq.n	801b306 <sniprintf+0x16>
 801b350:	9b02      	ldr	r3, [sp, #8]
 801b352:	2200      	movs	r2, #0
 801b354:	701a      	strb	r2, [r3, #0]
 801b356:	e7d6      	b.n	801b306 <sniprintf+0x16>
 801b358:	20000090 	.word	0x20000090

0801b35c <siprintf>:
 801b35c:	b40e      	push	{r1, r2, r3}
 801b35e:	b510      	push	{r4, lr}
 801b360:	b09d      	sub	sp, #116	@ 0x74
 801b362:	ab1f      	add	r3, sp, #124	@ 0x7c
 801b364:	9002      	str	r0, [sp, #8]
 801b366:	9006      	str	r0, [sp, #24]
 801b368:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801b36c:	480a      	ldr	r0, [pc, #40]	@ (801b398 <siprintf+0x3c>)
 801b36e:	9107      	str	r1, [sp, #28]
 801b370:	9104      	str	r1, [sp, #16]
 801b372:	490a      	ldr	r1, [pc, #40]	@ (801b39c <siprintf+0x40>)
 801b374:	f853 2b04 	ldr.w	r2, [r3], #4
 801b378:	9105      	str	r1, [sp, #20]
 801b37a:	2400      	movs	r4, #0
 801b37c:	a902      	add	r1, sp, #8
 801b37e:	6800      	ldr	r0, [r0, #0]
 801b380:	9301      	str	r3, [sp, #4]
 801b382:	941b      	str	r4, [sp, #108]	@ 0x6c
 801b384:	f000 f97a 	bl	801b67c <_svfiprintf_r>
 801b388:	9b02      	ldr	r3, [sp, #8]
 801b38a:	701c      	strb	r4, [r3, #0]
 801b38c:	b01d      	add	sp, #116	@ 0x74
 801b38e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b392:	b003      	add	sp, #12
 801b394:	4770      	bx	lr
 801b396:	bf00      	nop
 801b398:	20000090 	.word	0x20000090
 801b39c:	ffff0208 	.word	0xffff0208

0801b3a0 <_vsniprintf_r>:
 801b3a0:	b530      	push	{r4, r5, lr}
 801b3a2:	4614      	mov	r4, r2
 801b3a4:	2c00      	cmp	r4, #0
 801b3a6:	b09b      	sub	sp, #108	@ 0x6c
 801b3a8:	4605      	mov	r5, r0
 801b3aa:	461a      	mov	r2, r3
 801b3ac:	da05      	bge.n	801b3ba <_vsniprintf_r+0x1a>
 801b3ae:	238b      	movs	r3, #139	@ 0x8b
 801b3b0:	6003      	str	r3, [r0, #0]
 801b3b2:	f04f 30ff 	mov.w	r0, #4294967295
 801b3b6:	b01b      	add	sp, #108	@ 0x6c
 801b3b8:	bd30      	pop	{r4, r5, pc}
 801b3ba:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b3be:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b3c2:	f04f 0300 	mov.w	r3, #0
 801b3c6:	9319      	str	r3, [sp, #100]	@ 0x64
 801b3c8:	bf14      	ite	ne
 801b3ca:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b3ce:	4623      	moveq	r3, r4
 801b3d0:	9302      	str	r3, [sp, #8]
 801b3d2:	9305      	str	r3, [sp, #20]
 801b3d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b3d8:	9100      	str	r1, [sp, #0]
 801b3da:	9104      	str	r1, [sp, #16]
 801b3dc:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b3e0:	4669      	mov	r1, sp
 801b3e2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801b3e4:	f000 f94a 	bl	801b67c <_svfiprintf_r>
 801b3e8:	1c43      	adds	r3, r0, #1
 801b3ea:	bfbc      	itt	lt
 801b3ec:	238b      	movlt	r3, #139	@ 0x8b
 801b3ee:	602b      	strlt	r3, [r5, #0]
 801b3f0:	2c00      	cmp	r4, #0
 801b3f2:	d0e0      	beq.n	801b3b6 <_vsniprintf_r+0x16>
 801b3f4:	9b00      	ldr	r3, [sp, #0]
 801b3f6:	2200      	movs	r2, #0
 801b3f8:	701a      	strb	r2, [r3, #0]
 801b3fa:	e7dc      	b.n	801b3b6 <_vsniprintf_r+0x16>

0801b3fc <vsniprintf>:
 801b3fc:	b507      	push	{r0, r1, r2, lr}
 801b3fe:	9300      	str	r3, [sp, #0]
 801b400:	4613      	mov	r3, r2
 801b402:	460a      	mov	r2, r1
 801b404:	4601      	mov	r1, r0
 801b406:	4803      	ldr	r0, [pc, #12]	@ (801b414 <vsniprintf+0x18>)
 801b408:	6800      	ldr	r0, [r0, #0]
 801b40a:	f7ff ffc9 	bl	801b3a0 <_vsniprintf_r>
 801b40e:	b003      	add	sp, #12
 801b410:	f85d fb04 	ldr.w	pc, [sp], #4
 801b414:	20000090 	.word	0x20000090

0801b418 <memcmp>:
 801b418:	b510      	push	{r4, lr}
 801b41a:	3901      	subs	r1, #1
 801b41c:	4402      	add	r2, r0
 801b41e:	4290      	cmp	r0, r2
 801b420:	d101      	bne.n	801b426 <memcmp+0xe>
 801b422:	2000      	movs	r0, #0
 801b424:	e005      	b.n	801b432 <memcmp+0x1a>
 801b426:	7803      	ldrb	r3, [r0, #0]
 801b428:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b42c:	42a3      	cmp	r3, r4
 801b42e:	d001      	beq.n	801b434 <memcmp+0x1c>
 801b430:	1b18      	subs	r0, r3, r4
 801b432:	bd10      	pop	{r4, pc}
 801b434:	3001      	adds	r0, #1
 801b436:	e7f2      	b.n	801b41e <memcmp+0x6>

0801b438 <memset>:
 801b438:	4402      	add	r2, r0
 801b43a:	4603      	mov	r3, r0
 801b43c:	4293      	cmp	r3, r2
 801b43e:	d100      	bne.n	801b442 <memset+0xa>
 801b440:	4770      	bx	lr
 801b442:	f803 1b01 	strb.w	r1, [r3], #1
 801b446:	e7f9      	b.n	801b43c <memset+0x4>

0801b448 <strncpy>:
 801b448:	b510      	push	{r4, lr}
 801b44a:	3901      	subs	r1, #1
 801b44c:	4603      	mov	r3, r0
 801b44e:	b132      	cbz	r2, 801b45e <strncpy+0x16>
 801b450:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b454:	f803 4b01 	strb.w	r4, [r3], #1
 801b458:	3a01      	subs	r2, #1
 801b45a:	2c00      	cmp	r4, #0
 801b45c:	d1f7      	bne.n	801b44e <strncpy+0x6>
 801b45e:	441a      	add	r2, r3
 801b460:	2100      	movs	r1, #0
 801b462:	4293      	cmp	r3, r2
 801b464:	d100      	bne.n	801b468 <strncpy+0x20>
 801b466:	bd10      	pop	{r4, pc}
 801b468:	f803 1b01 	strb.w	r1, [r3], #1
 801b46c:	e7f9      	b.n	801b462 <strncpy+0x1a>

0801b46e <strstr>:
 801b46e:	780a      	ldrb	r2, [r1, #0]
 801b470:	b570      	push	{r4, r5, r6, lr}
 801b472:	b96a      	cbnz	r2, 801b490 <strstr+0x22>
 801b474:	bd70      	pop	{r4, r5, r6, pc}
 801b476:	429a      	cmp	r2, r3
 801b478:	d109      	bne.n	801b48e <strstr+0x20>
 801b47a:	460c      	mov	r4, r1
 801b47c:	4605      	mov	r5, r0
 801b47e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801b482:	2b00      	cmp	r3, #0
 801b484:	d0f6      	beq.n	801b474 <strstr+0x6>
 801b486:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801b48a:	429e      	cmp	r6, r3
 801b48c:	d0f7      	beq.n	801b47e <strstr+0x10>
 801b48e:	3001      	adds	r0, #1
 801b490:	7803      	ldrb	r3, [r0, #0]
 801b492:	2b00      	cmp	r3, #0
 801b494:	d1ef      	bne.n	801b476 <strstr+0x8>
 801b496:	4618      	mov	r0, r3
 801b498:	e7ec      	b.n	801b474 <strstr+0x6>
	...

0801b49c <_sbrk_r>:
 801b49c:	b538      	push	{r3, r4, r5, lr}
 801b49e:	4d06      	ldr	r5, [pc, #24]	@ (801b4b8 <_sbrk_r+0x1c>)
 801b4a0:	2300      	movs	r3, #0
 801b4a2:	4604      	mov	r4, r0
 801b4a4:	4608      	mov	r0, r1
 801b4a6:	602b      	str	r3, [r5, #0]
 801b4a8:	f7e9 fb18 	bl	8004adc <_sbrk>
 801b4ac:	1c43      	adds	r3, r0, #1
 801b4ae:	d102      	bne.n	801b4b6 <_sbrk_r+0x1a>
 801b4b0:	682b      	ldr	r3, [r5, #0]
 801b4b2:	b103      	cbz	r3, 801b4b6 <_sbrk_r+0x1a>
 801b4b4:	6023      	str	r3, [r4, #0]
 801b4b6:	bd38      	pop	{r3, r4, r5, pc}
 801b4b8:	2000aea8 	.word	0x2000aea8

0801b4bc <__errno>:
 801b4bc:	4b01      	ldr	r3, [pc, #4]	@ (801b4c4 <__errno+0x8>)
 801b4be:	6818      	ldr	r0, [r3, #0]
 801b4c0:	4770      	bx	lr
 801b4c2:	bf00      	nop
 801b4c4:	20000090 	.word	0x20000090

0801b4c8 <__libc_init_array>:
 801b4c8:	b570      	push	{r4, r5, r6, lr}
 801b4ca:	4d0d      	ldr	r5, [pc, #52]	@ (801b500 <__libc_init_array+0x38>)
 801b4cc:	4c0d      	ldr	r4, [pc, #52]	@ (801b504 <__libc_init_array+0x3c>)
 801b4ce:	1b64      	subs	r4, r4, r5
 801b4d0:	10a4      	asrs	r4, r4, #2
 801b4d2:	2600      	movs	r6, #0
 801b4d4:	42a6      	cmp	r6, r4
 801b4d6:	d109      	bne.n	801b4ec <__libc_init_array+0x24>
 801b4d8:	4d0b      	ldr	r5, [pc, #44]	@ (801b508 <__libc_init_array+0x40>)
 801b4da:	4c0c      	ldr	r4, [pc, #48]	@ (801b50c <__libc_init_array+0x44>)
 801b4dc:	f000 fba6 	bl	801bc2c <_init>
 801b4e0:	1b64      	subs	r4, r4, r5
 801b4e2:	10a4      	asrs	r4, r4, #2
 801b4e4:	2600      	movs	r6, #0
 801b4e6:	42a6      	cmp	r6, r4
 801b4e8:	d105      	bne.n	801b4f6 <__libc_init_array+0x2e>
 801b4ea:	bd70      	pop	{r4, r5, r6, pc}
 801b4ec:	f855 3b04 	ldr.w	r3, [r5], #4
 801b4f0:	4798      	blx	r3
 801b4f2:	3601      	adds	r6, #1
 801b4f4:	e7ee      	b.n	801b4d4 <__libc_init_array+0xc>
 801b4f6:	f855 3b04 	ldr.w	r3, [r5], #4
 801b4fa:	4798      	blx	r3
 801b4fc:	3601      	adds	r6, #1
 801b4fe:	e7f2      	b.n	801b4e6 <__libc_init_array+0x1e>
 801b500:	0801ed60 	.word	0x0801ed60
 801b504:	0801ed60 	.word	0x0801ed60
 801b508:	0801ed60 	.word	0x0801ed60
 801b50c:	0801ed64 	.word	0x0801ed64

0801b510 <__retarget_lock_acquire_recursive>:
 801b510:	4770      	bx	lr

0801b512 <__retarget_lock_release_recursive>:
 801b512:	4770      	bx	lr

0801b514 <memcpy>:
 801b514:	440a      	add	r2, r1
 801b516:	4291      	cmp	r1, r2
 801b518:	f100 33ff 	add.w	r3, r0, #4294967295
 801b51c:	d100      	bne.n	801b520 <memcpy+0xc>
 801b51e:	4770      	bx	lr
 801b520:	b510      	push	{r4, lr}
 801b522:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b526:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b52a:	4291      	cmp	r1, r2
 801b52c:	d1f9      	bne.n	801b522 <memcpy+0xe>
 801b52e:	bd10      	pop	{r4, pc}

0801b530 <_free_r>:
 801b530:	b538      	push	{r3, r4, r5, lr}
 801b532:	4605      	mov	r5, r0
 801b534:	2900      	cmp	r1, #0
 801b536:	d041      	beq.n	801b5bc <_free_r+0x8c>
 801b538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b53c:	1f0c      	subs	r4, r1, #4
 801b53e:	2b00      	cmp	r3, #0
 801b540:	bfb8      	it	lt
 801b542:	18e4      	addlt	r4, r4, r3
 801b544:	f7ff fec8 	bl	801b2d8 <__malloc_lock>
 801b548:	4a1d      	ldr	r2, [pc, #116]	@ (801b5c0 <_free_r+0x90>)
 801b54a:	6813      	ldr	r3, [r2, #0]
 801b54c:	b933      	cbnz	r3, 801b55c <_free_r+0x2c>
 801b54e:	6063      	str	r3, [r4, #4]
 801b550:	6014      	str	r4, [r2, #0]
 801b552:	4628      	mov	r0, r5
 801b554:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b558:	f7ff bec4 	b.w	801b2e4 <__malloc_unlock>
 801b55c:	42a3      	cmp	r3, r4
 801b55e:	d908      	bls.n	801b572 <_free_r+0x42>
 801b560:	6820      	ldr	r0, [r4, #0]
 801b562:	1821      	adds	r1, r4, r0
 801b564:	428b      	cmp	r3, r1
 801b566:	bf01      	itttt	eq
 801b568:	6819      	ldreq	r1, [r3, #0]
 801b56a:	685b      	ldreq	r3, [r3, #4]
 801b56c:	1809      	addeq	r1, r1, r0
 801b56e:	6021      	streq	r1, [r4, #0]
 801b570:	e7ed      	b.n	801b54e <_free_r+0x1e>
 801b572:	461a      	mov	r2, r3
 801b574:	685b      	ldr	r3, [r3, #4]
 801b576:	b10b      	cbz	r3, 801b57c <_free_r+0x4c>
 801b578:	42a3      	cmp	r3, r4
 801b57a:	d9fa      	bls.n	801b572 <_free_r+0x42>
 801b57c:	6811      	ldr	r1, [r2, #0]
 801b57e:	1850      	adds	r0, r2, r1
 801b580:	42a0      	cmp	r0, r4
 801b582:	d10b      	bne.n	801b59c <_free_r+0x6c>
 801b584:	6820      	ldr	r0, [r4, #0]
 801b586:	4401      	add	r1, r0
 801b588:	1850      	adds	r0, r2, r1
 801b58a:	4283      	cmp	r3, r0
 801b58c:	6011      	str	r1, [r2, #0]
 801b58e:	d1e0      	bne.n	801b552 <_free_r+0x22>
 801b590:	6818      	ldr	r0, [r3, #0]
 801b592:	685b      	ldr	r3, [r3, #4]
 801b594:	6053      	str	r3, [r2, #4]
 801b596:	4408      	add	r0, r1
 801b598:	6010      	str	r0, [r2, #0]
 801b59a:	e7da      	b.n	801b552 <_free_r+0x22>
 801b59c:	d902      	bls.n	801b5a4 <_free_r+0x74>
 801b59e:	230c      	movs	r3, #12
 801b5a0:	602b      	str	r3, [r5, #0]
 801b5a2:	e7d6      	b.n	801b552 <_free_r+0x22>
 801b5a4:	6820      	ldr	r0, [r4, #0]
 801b5a6:	1821      	adds	r1, r4, r0
 801b5a8:	428b      	cmp	r3, r1
 801b5aa:	bf04      	itt	eq
 801b5ac:	6819      	ldreq	r1, [r3, #0]
 801b5ae:	685b      	ldreq	r3, [r3, #4]
 801b5b0:	6063      	str	r3, [r4, #4]
 801b5b2:	bf04      	itt	eq
 801b5b4:	1809      	addeq	r1, r1, r0
 801b5b6:	6021      	streq	r1, [r4, #0]
 801b5b8:	6054      	str	r4, [r2, #4]
 801b5ba:	e7ca      	b.n	801b552 <_free_r+0x22>
 801b5bc:	bd38      	pop	{r3, r4, r5, pc}
 801b5be:	bf00      	nop
 801b5c0:	2000ad6c 	.word	0x2000ad6c

0801b5c4 <__ssputs_r>:
 801b5c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b5c8:	688e      	ldr	r6, [r1, #8]
 801b5ca:	461f      	mov	r7, r3
 801b5cc:	42be      	cmp	r6, r7
 801b5ce:	680b      	ldr	r3, [r1, #0]
 801b5d0:	4682      	mov	sl, r0
 801b5d2:	460c      	mov	r4, r1
 801b5d4:	4690      	mov	r8, r2
 801b5d6:	d82d      	bhi.n	801b634 <__ssputs_r+0x70>
 801b5d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b5dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801b5e0:	d026      	beq.n	801b630 <__ssputs_r+0x6c>
 801b5e2:	6965      	ldr	r5, [r4, #20]
 801b5e4:	6909      	ldr	r1, [r1, #16]
 801b5e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b5ea:	eba3 0901 	sub.w	r9, r3, r1
 801b5ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b5f2:	1c7b      	adds	r3, r7, #1
 801b5f4:	444b      	add	r3, r9
 801b5f6:	106d      	asrs	r5, r5, #1
 801b5f8:	429d      	cmp	r5, r3
 801b5fa:	bf38      	it	cc
 801b5fc:	461d      	movcc	r5, r3
 801b5fe:	0553      	lsls	r3, r2, #21
 801b600:	d527      	bpl.n	801b652 <__ssputs_r+0x8e>
 801b602:	4629      	mov	r1, r5
 801b604:	f7ff fde8 	bl	801b1d8 <_malloc_r>
 801b608:	4606      	mov	r6, r0
 801b60a:	b360      	cbz	r0, 801b666 <__ssputs_r+0xa2>
 801b60c:	6921      	ldr	r1, [r4, #16]
 801b60e:	464a      	mov	r2, r9
 801b610:	f7ff ff80 	bl	801b514 <memcpy>
 801b614:	89a3      	ldrh	r3, [r4, #12]
 801b616:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801b61a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b61e:	81a3      	strh	r3, [r4, #12]
 801b620:	6126      	str	r6, [r4, #16]
 801b622:	6165      	str	r5, [r4, #20]
 801b624:	444e      	add	r6, r9
 801b626:	eba5 0509 	sub.w	r5, r5, r9
 801b62a:	6026      	str	r6, [r4, #0]
 801b62c:	60a5      	str	r5, [r4, #8]
 801b62e:	463e      	mov	r6, r7
 801b630:	42be      	cmp	r6, r7
 801b632:	d900      	bls.n	801b636 <__ssputs_r+0x72>
 801b634:	463e      	mov	r6, r7
 801b636:	6820      	ldr	r0, [r4, #0]
 801b638:	4632      	mov	r2, r6
 801b63a:	4641      	mov	r1, r8
 801b63c:	f000 faa6 	bl	801bb8c <memmove>
 801b640:	68a3      	ldr	r3, [r4, #8]
 801b642:	1b9b      	subs	r3, r3, r6
 801b644:	60a3      	str	r3, [r4, #8]
 801b646:	6823      	ldr	r3, [r4, #0]
 801b648:	4433      	add	r3, r6
 801b64a:	6023      	str	r3, [r4, #0]
 801b64c:	2000      	movs	r0, #0
 801b64e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b652:	462a      	mov	r2, r5
 801b654:	f000 fab4 	bl	801bbc0 <_realloc_r>
 801b658:	4606      	mov	r6, r0
 801b65a:	2800      	cmp	r0, #0
 801b65c:	d1e0      	bne.n	801b620 <__ssputs_r+0x5c>
 801b65e:	6921      	ldr	r1, [r4, #16]
 801b660:	4650      	mov	r0, sl
 801b662:	f7ff ff65 	bl	801b530 <_free_r>
 801b666:	230c      	movs	r3, #12
 801b668:	f8ca 3000 	str.w	r3, [sl]
 801b66c:	89a3      	ldrh	r3, [r4, #12]
 801b66e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b672:	81a3      	strh	r3, [r4, #12]
 801b674:	f04f 30ff 	mov.w	r0, #4294967295
 801b678:	e7e9      	b.n	801b64e <__ssputs_r+0x8a>
	...

0801b67c <_svfiprintf_r>:
 801b67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b680:	4698      	mov	r8, r3
 801b682:	898b      	ldrh	r3, [r1, #12]
 801b684:	061b      	lsls	r3, r3, #24
 801b686:	b09d      	sub	sp, #116	@ 0x74
 801b688:	4607      	mov	r7, r0
 801b68a:	460d      	mov	r5, r1
 801b68c:	4614      	mov	r4, r2
 801b68e:	d510      	bpl.n	801b6b2 <_svfiprintf_r+0x36>
 801b690:	690b      	ldr	r3, [r1, #16]
 801b692:	b973      	cbnz	r3, 801b6b2 <_svfiprintf_r+0x36>
 801b694:	2140      	movs	r1, #64	@ 0x40
 801b696:	f7ff fd9f 	bl	801b1d8 <_malloc_r>
 801b69a:	6028      	str	r0, [r5, #0]
 801b69c:	6128      	str	r0, [r5, #16]
 801b69e:	b930      	cbnz	r0, 801b6ae <_svfiprintf_r+0x32>
 801b6a0:	230c      	movs	r3, #12
 801b6a2:	603b      	str	r3, [r7, #0]
 801b6a4:	f04f 30ff 	mov.w	r0, #4294967295
 801b6a8:	b01d      	add	sp, #116	@ 0x74
 801b6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6ae:	2340      	movs	r3, #64	@ 0x40
 801b6b0:	616b      	str	r3, [r5, #20]
 801b6b2:	2300      	movs	r3, #0
 801b6b4:	9309      	str	r3, [sp, #36]	@ 0x24
 801b6b6:	2320      	movs	r3, #32
 801b6b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b6bc:	f8cd 800c 	str.w	r8, [sp, #12]
 801b6c0:	2330      	movs	r3, #48	@ 0x30
 801b6c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801b860 <_svfiprintf_r+0x1e4>
 801b6c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b6ca:	f04f 0901 	mov.w	r9, #1
 801b6ce:	4623      	mov	r3, r4
 801b6d0:	469a      	mov	sl, r3
 801b6d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b6d6:	b10a      	cbz	r2, 801b6dc <_svfiprintf_r+0x60>
 801b6d8:	2a25      	cmp	r2, #37	@ 0x25
 801b6da:	d1f9      	bne.n	801b6d0 <_svfiprintf_r+0x54>
 801b6dc:	ebba 0b04 	subs.w	fp, sl, r4
 801b6e0:	d00b      	beq.n	801b6fa <_svfiprintf_r+0x7e>
 801b6e2:	465b      	mov	r3, fp
 801b6e4:	4622      	mov	r2, r4
 801b6e6:	4629      	mov	r1, r5
 801b6e8:	4638      	mov	r0, r7
 801b6ea:	f7ff ff6b 	bl	801b5c4 <__ssputs_r>
 801b6ee:	3001      	adds	r0, #1
 801b6f0:	f000 80a7 	beq.w	801b842 <_svfiprintf_r+0x1c6>
 801b6f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b6f6:	445a      	add	r2, fp
 801b6f8:	9209      	str	r2, [sp, #36]	@ 0x24
 801b6fa:	f89a 3000 	ldrb.w	r3, [sl]
 801b6fe:	2b00      	cmp	r3, #0
 801b700:	f000 809f 	beq.w	801b842 <_svfiprintf_r+0x1c6>
 801b704:	2300      	movs	r3, #0
 801b706:	f04f 32ff 	mov.w	r2, #4294967295
 801b70a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b70e:	f10a 0a01 	add.w	sl, sl, #1
 801b712:	9304      	str	r3, [sp, #16]
 801b714:	9307      	str	r3, [sp, #28]
 801b716:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b71a:	931a      	str	r3, [sp, #104]	@ 0x68
 801b71c:	4654      	mov	r4, sl
 801b71e:	2205      	movs	r2, #5
 801b720:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b724:	484e      	ldr	r0, [pc, #312]	@ (801b860 <_svfiprintf_r+0x1e4>)
 801b726:	f7e4 fd8b 	bl	8000240 <memchr>
 801b72a:	9a04      	ldr	r2, [sp, #16]
 801b72c:	b9d8      	cbnz	r0, 801b766 <_svfiprintf_r+0xea>
 801b72e:	06d0      	lsls	r0, r2, #27
 801b730:	bf44      	itt	mi
 801b732:	2320      	movmi	r3, #32
 801b734:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b738:	0711      	lsls	r1, r2, #28
 801b73a:	bf44      	itt	mi
 801b73c:	232b      	movmi	r3, #43	@ 0x2b
 801b73e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b742:	f89a 3000 	ldrb.w	r3, [sl]
 801b746:	2b2a      	cmp	r3, #42	@ 0x2a
 801b748:	d015      	beq.n	801b776 <_svfiprintf_r+0xfa>
 801b74a:	9a07      	ldr	r2, [sp, #28]
 801b74c:	4654      	mov	r4, sl
 801b74e:	2000      	movs	r0, #0
 801b750:	f04f 0c0a 	mov.w	ip, #10
 801b754:	4621      	mov	r1, r4
 801b756:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b75a:	3b30      	subs	r3, #48	@ 0x30
 801b75c:	2b09      	cmp	r3, #9
 801b75e:	d94b      	bls.n	801b7f8 <_svfiprintf_r+0x17c>
 801b760:	b1b0      	cbz	r0, 801b790 <_svfiprintf_r+0x114>
 801b762:	9207      	str	r2, [sp, #28]
 801b764:	e014      	b.n	801b790 <_svfiprintf_r+0x114>
 801b766:	eba0 0308 	sub.w	r3, r0, r8
 801b76a:	fa09 f303 	lsl.w	r3, r9, r3
 801b76e:	4313      	orrs	r3, r2
 801b770:	9304      	str	r3, [sp, #16]
 801b772:	46a2      	mov	sl, r4
 801b774:	e7d2      	b.n	801b71c <_svfiprintf_r+0xa0>
 801b776:	9b03      	ldr	r3, [sp, #12]
 801b778:	1d19      	adds	r1, r3, #4
 801b77a:	681b      	ldr	r3, [r3, #0]
 801b77c:	9103      	str	r1, [sp, #12]
 801b77e:	2b00      	cmp	r3, #0
 801b780:	bfbb      	ittet	lt
 801b782:	425b      	neglt	r3, r3
 801b784:	f042 0202 	orrlt.w	r2, r2, #2
 801b788:	9307      	strge	r3, [sp, #28]
 801b78a:	9307      	strlt	r3, [sp, #28]
 801b78c:	bfb8      	it	lt
 801b78e:	9204      	strlt	r2, [sp, #16]
 801b790:	7823      	ldrb	r3, [r4, #0]
 801b792:	2b2e      	cmp	r3, #46	@ 0x2e
 801b794:	d10a      	bne.n	801b7ac <_svfiprintf_r+0x130>
 801b796:	7863      	ldrb	r3, [r4, #1]
 801b798:	2b2a      	cmp	r3, #42	@ 0x2a
 801b79a:	d132      	bne.n	801b802 <_svfiprintf_r+0x186>
 801b79c:	9b03      	ldr	r3, [sp, #12]
 801b79e:	1d1a      	adds	r2, r3, #4
 801b7a0:	681b      	ldr	r3, [r3, #0]
 801b7a2:	9203      	str	r2, [sp, #12]
 801b7a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b7a8:	3402      	adds	r4, #2
 801b7aa:	9305      	str	r3, [sp, #20]
 801b7ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801b870 <_svfiprintf_r+0x1f4>
 801b7b0:	7821      	ldrb	r1, [r4, #0]
 801b7b2:	2203      	movs	r2, #3
 801b7b4:	4650      	mov	r0, sl
 801b7b6:	f7e4 fd43 	bl	8000240 <memchr>
 801b7ba:	b138      	cbz	r0, 801b7cc <_svfiprintf_r+0x150>
 801b7bc:	9b04      	ldr	r3, [sp, #16]
 801b7be:	eba0 000a 	sub.w	r0, r0, sl
 801b7c2:	2240      	movs	r2, #64	@ 0x40
 801b7c4:	4082      	lsls	r2, r0
 801b7c6:	4313      	orrs	r3, r2
 801b7c8:	3401      	adds	r4, #1
 801b7ca:	9304      	str	r3, [sp, #16]
 801b7cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b7d0:	4824      	ldr	r0, [pc, #144]	@ (801b864 <_svfiprintf_r+0x1e8>)
 801b7d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b7d6:	2206      	movs	r2, #6
 801b7d8:	f7e4 fd32 	bl	8000240 <memchr>
 801b7dc:	2800      	cmp	r0, #0
 801b7de:	d036      	beq.n	801b84e <_svfiprintf_r+0x1d2>
 801b7e0:	4b21      	ldr	r3, [pc, #132]	@ (801b868 <_svfiprintf_r+0x1ec>)
 801b7e2:	bb1b      	cbnz	r3, 801b82c <_svfiprintf_r+0x1b0>
 801b7e4:	9b03      	ldr	r3, [sp, #12]
 801b7e6:	3307      	adds	r3, #7
 801b7e8:	f023 0307 	bic.w	r3, r3, #7
 801b7ec:	3308      	adds	r3, #8
 801b7ee:	9303      	str	r3, [sp, #12]
 801b7f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b7f2:	4433      	add	r3, r6
 801b7f4:	9309      	str	r3, [sp, #36]	@ 0x24
 801b7f6:	e76a      	b.n	801b6ce <_svfiprintf_r+0x52>
 801b7f8:	fb0c 3202 	mla	r2, ip, r2, r3
 801b7fc:	460c      	mov	r4, r1
 801b7fe:	2001      	movs	r0, #1
 801b800:	e7a8      	b.n	801b754 <_svfiprintf_r+0xd8>
 801b802:	2300      	movs	r3, #0
 801b804:	3401      	adds	r4, #1
 801b806:	9305      	str	r3, [sp, #20]
 801b808:	4619      	mov	r1, r3
 801b80a:	f04f 0c0a 	mov.w	ip, #10
 801b80e:	4620      	mov	r0, r4
 801b810:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b814:	3a30      	subs	r2, #48	@ 0x30
 801b816:	2a09      	cmp	r2, #9
 801b818:	d903      	bls.n	801b822 <_svfiprintf_r+0x1a6>
 801b81a:	2b00      	cmp	r3, #0
 801b81c:	d0c6      	beq.n	801b7ac <_svfiprintf_r+0x130>
 801b81e:	9105      	str	r1, [sp, #20]
 801b820:	e7c4      	b.n	801b7ac <_svfiprintf_r+0x130>
 801b822:	fb0c 2101 	mla	r1, ip, r1, r2
 801b826:	4604      	mov	r4, r0
 801b828:	2301      	movs	r3, #1
 801b82a:	e7f0      	b.n	801b80e <_svfiprintf_r+0x192>
 801b82c:	ab03      	add	r3, sp, #12
 801b82e:	9300      	str	r3, [sp, #0]
 801b830:	462a      	mov	r2, r5
 801b832:	4b0e      	ldr	r3, [pc, #56]	@ (801b86c <_svfiprintf_r+0x1f0>)
 801b834:	a904      	add	r1, sp, #16
 801b836:	4638      	mov	r0, r7
 801b838:	f3af 8000 	nop.w
 801b83c:	1c42      	adds	r2, r0, #1
 801b83e:	4606      	mov	r6, r0
 801b840:	d1d6      	bne.n	801b7f0 <_svfiprintf_r+0x174>
 801b842:	89ab      	ldrh	r3, [r5, #12]
 801b844:	065b      	lsls	r3, r3, #25
 801b846:	f53f af2d 	bmi.w	801b6a4 <_svfiprintf_r+0x28>
 801b84a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b84c:	e72c      	b.n	801b6a8 <_svfiprintf_r+0x2c>
 801b84e:	ab03      	add	r3, sp, #12
 801b850:	9300      	str	r3, [sp, #0]
 801b852:	462a      	mov	r2, r5
 801b854:	4b05      	ldr	r3, [pc, #20]	@ (801b86c <_svfiprintf_r+0x1f0>)
 801b856:	a904      	add	r1, sp, #16
 801b858:	4638      	mov	r0, r7
 801b85a:	f000 f879 	bl	801b950 <_printf_i>
 801b85e:	e7ed      	b.n	801b83c <_svfiprintf_r+0x1c0>
 801b860:	0801ed22 	.word	0x0801ed22
 801b864:	0801ed2c 	.word	0x0801ed2c
 801b868:	00000000 	.word	0x00000000
 801b86c:	0801b5c5 	.word	0x0801b5c5
 801b870:	0801ed28 	.word	0x0801ed28

0801b874 <_printf_common>:
 801b874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b878:	4616      	mov	r6, r2
 801b87a:	4698      	mov	r8, r3
 801b87c:	688a      	ldr	r2, [r1, #8]
 801b87e:	690b      	ldr	r3, [r1, #16]
 801b880:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801b884:	4293      	cmp	r3, r2
 801b886:	bfb8      	it	lt
 801b888:	4613      	movlt	r3, r2
 801b88a:	6033      	str	r3, [r6, #0]
 801b88c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801b890:	4607      	mov	r7, r0
 801b892:	460c      	mov	r4, r1
 801b894:	b10a      	cbz	r2, 801b89a <_printf_common+0x26>
 801b896:	3301      	adds	r3, #1
 801b898:	6033      	str	r3, [r6, #0]
 801b89a:	6823      	ldr	r3, [r4, #0]
 801b89c:	0699      	lsls	r1, r3, #26
 801b89e:	bf42      	ittt	mi
 801b8a0:	6833      	ldrmi	r3, [r6, #0]
 801b8a2:	3302      	addmi	r3, #2
 801b8a4:	6033      	strmi	r3, [r6, #0]
 801b8a6:	6825      	ldr	r5, [r4, #0]
 801b8a8:	f015 0506 	ands.w	r5, r5, #6
 801b8ac:	d106      	bne.n	801b8bc <_printf_common+0x48>
 801b8ae:	f104 0a19 	add.w	sl, r4, #25
 801b8b2:	68e3      	ldr	r3, [r4, #12]
 801b8b4:	6832      	ldr	r2, [r6, #0]
 801b8b6:	1a9b      	subs	r3, r3, r2
 801b8b8:	42ab      	cmp	r3, r5
 801b8ba:	dc26      	bgt.n	801b90a <_printf_common+0x96>
 801b8bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801b8c0:	6822      	ldr	r2, [r4, #0]
 801b8c2:	3b00      	subs	r3, #0
 801b8c4:	bf18      	it	ne
 801b8c6:	2301      	movne	r3, #1
 801b8c8:	0692      	lsls	r2, r2, #26
 801b8ca:	d42b      	bmi.n	801b924 <_printf_common+0xb0>
 801b8cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801b8d0:	4641      	mov	r1, r8
 801b8d2:	4638      	mov	r0, r7
 801b8d4:	47c8      	blx	r9
 801b8d6:	3001      	adds	r0, #1
 801b8d8:	d01e      	beq.n	801b918 <_printf_common+0xa4>
 801b8da:	6823      	ldr	r3, [r4, #0]
 801b8dc:	6922      	ldr	r2, [r4, #16]
 801b8de:	f003 0306 	and.w	r3, r3, #6
 801b8e2:	2b04      	cmp	r3, #4
 801b8e4:	bf02      	ittt	eq
 801b8e6:	68e5      	ldreq	r5, [r4, #12]
 801b8e8:	6833      	ldreq	r3, [r6, #0]
 801b8ea:	1aed      	subeq	r5, r5, r3
 801b8ec:	68a3      	ldr	r3, [r4, #8]
 801b8ee:	bf0c      	ite	eq
 801b8f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b8f4:	2500      	movne	r5, #0
 801b8f6:	4293      	cmp	r3, r2
 801b8f8:	bfc4      	itt	gt
 801b8fa:	1a9b      	subgt	r3, r3, r2
 801b8fc:	18ed      	addgt	r5, r5, r3
 801b8fe:	2600      	movs	r6, #0
 801b900:	341a      	adds	r4, #26
 801b902:	42b5      	cmp	r5, r6
 801b904:	d11a      	bne.n	801b93c <_printf_common+0xc8>
 801b906:	2000      	movs	r0, #0
 801b908:	e008      	b.n	801b91c <_printf_common+0xa8>
 801b90a:	2301      	movs	r3, #1
 801b90c:	4652      	mov	r2, sl
 801b90e:	4641      	mov	r1, r8
 801b910:	4638      	mov	r0, r7
 801b912:	47c8      	blx	r9
 801b914:	3001      	adds	r0, #1
 801b916:	d103      	bne.n	801b920 <_printf_common+0xac>
 801b918:	f04f 30ff 	mov.w	r0, #4294967295
 801b91c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b920:	3501      	adds	r5, #1
 801b922:	e7c6      	b.n	801b8b2 <_printf_common+0x3e>
 801b924:	18e1      	adds	r1, r4, r3
 801b926:	1c5a      	adds	r2, r3, #1
 801b928:	2030      	movs	r0, #48	@ 0x30
 801b92a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801b92e:	4422      	add	r2, r4
 801b930:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801b934:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801b938:	3302      	adds	r3, #2
 801b93a:	e7c7      	b.n	801b8cc <_printf_common+0x58>
 801b93c:	2301      	movs	r3, #1
 801b93e:	4622      	mov	r2, r4
 801b940:	4641      	mov	r1, r8
 801b942:	4638      	mov	r0, r7
 801b944:	47c8      	blx	r9
 801b946:	3001      	adds	r0, #1
 801b948:	d0e6      	beq.n	801b918 <_printf_common+0xa4>
 801b94a:	3601      	adds	r6, #1
 801b94c:	e7d9      	b.n	801b902 <_printf_common+0x8e>
	...

0801b950 <_printf_i>:
 801b950:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b954:	7e0f      	ldrb	r7, [r1, #24]
 801b956:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801b958:	2f78      	cmp	r7, #120	@ 0x78
 801b95a:	4691      	mov	r9, r2
 801b95c:	4680      	mov	r8, r0
 801b95e:	460c      	mov	r4, r1
 801b960:	469a      	mov	sl, r3
 801b962:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801b966:	d807      	bhi.n	801b978 <_printf_i+0x28>
 801b968:	2f62      	cmp	r7, #98	@ 0x62
 801b96a:	d80a      	bhi.n	801b982 <_printf_i+0x32>
 801b96c:	2f00      	cmp	r7, #0
 801b96e:	f000 80d1 	beq.w	801bb14 <_printf_i+0x1c4>
 801b972:	2f58      	cmp	r7, #88	@ 0x58
 801b974:	f000 80b8 	beq.w	801bae8 <_printf_i+0x198>
 801b978:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801b97c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801b980:	e03a      	b.n	801b9f8 <_printf_i+0xa8>
 801b982:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801b986:	2b15      	cmp	r3, #21
 801b988:	d8f6      	bhi.n	801b978 <_printf_i+0x28>
 801b98a:	a101      	add	r1, pc, #4	@ (adr r1, 801b990 <_printf_i+0x40>)
 801b98c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b990:	0801b9e9 	.word	0x0801b9e9
 801b994:	0801b9fd 	.word	0x0801b9fd
 801b998:	0801b979 	.word	0x0801b979
 801b99c:	0801b979 	.word	0x0801b979
 801b9a0:	0801b979 	.word	0x0801b979
 801b9a4:	0801b979 	.word	0x0801b979
 801b9a8:	0801b9fd 	.word	0x0801b9fd
 801b9ac:	0801b979 	.word	0x0801b979
 801b9b0:	0801b979 	.word	0x0801b979
 801b9b4:	0801b979 	.word	0x0801b979
 801b9b8:	0801b979 	.word	0x0801b979
 801b9bc:	0801bafb 	.word	0x0801bafb
 801b9c0:	0801ba27 	.word	0x0801ba27
 801b9c4:	0801bab5 	.word	0x0801bab5
 801b9c8:	0801b979 	.word	0x0801b979
 801b9cc:	0801b979 	.word	0x0801b979
 801b9d0:	0801bb1d 	.word	0x0801bb1d
 801b9d4:	0801b979 	.word	0x0801b979
 801b9d8:	0801ba27 	.word	0x0801ba27
 801b9dc:	0801b979 	.word	0x0801b979
 801b9e0:	0801b979 	.word	0x0801b979
 801b9e4:	0801babd 	.word	0x0801babd
 801b9e8:	6833      	ldr	r3, [r6, #0]
 801b9ea:	1d1a      	adds	r2, r3, #4
 801b9ec:	681b      	ldr	r3, [r3, #0]
 801b9ee:	6032      	str	r2, [r6, #0]
 801b9f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801b9f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801b9f8:	2301      	movs	r3, #1
 801b9fa:	e09c      	b.n	801bb36 <_printf_i+0x1e6>
 801b9fc:	6833      	ldr	r3, [r6, #0]
 801b9fe:	6820      	ldr	r0, [r4, #0]
 801ba00:	1d19      	adds	r1, r3, #4
 801ba02:	6031      	str	r1, [r6, #0]
 801ba04:	0606      	lsls	r6, r0, #24
 801ba06:	d501      	bpl.n	801ba0c <_printf_i+0xbc>
 801ba08:	681d      	ldr	r5, [r3, #0]
 801ba0a:	e003      	b.n	801ba14 <_printf_i+0xc4>
 801ba0c:	0645      	lsls	r5, r0, #25
 801ba0e:	d5fb      	bpl.n	801ba08 <_printf_i+0xb8>
 801ba10:	f9b3 5000 	ldrsh.w	r5, [r3]
 801ba14:	2d00      	cmp	r5, #0
 801ba16:	da03      	bge.n	801ba20 <_printf_i+0xd0>
 801ba18:	232d      	movs	r3, #45	@ 0x2d
 801ba1a:	426d      	negs	r5, r5
 801ba1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ba20:	4858      	ldr	r0, [pc, #352]	@ (801bb84 <_printf_i+0x234>)
 801ba22:	230a      	movs	r3, #10
 801ba24:	e011      	b.n	801ba4a <_printf_i+0xfa>
 801ba26:	6821      	ldr	r1, [r4, #0]
 801ba28:	6833      	ldr	r3, [r6, #0]
 801ba2a:	0608      	lsls	r0, r1, #24
 801ba2c:	f853 5b04 	ldr.w	r5, [r3], #4
 801ba30:	d402      	bmi.n	801ba38 <_printf_i+0xe8>
 801ba32:	0649      	lsls	r1, r1, #25
 801ba34:	bf48      	it	mi
 801ba36:	b2ad      	uxthmi	r5, r5
 801ba38:	2f6f      	cmp	r7, #111	@ 0x6f
 801ba3a:	4852      	ldr	r0, [pc, #328]	@ (801bb84 <_printf_i+0x234>)
 801ba3c:	6033      	str	r3, [r6, #0]
 801ba3e:	bf14      	ite	ne
 801ba40:	230a      	movne	r3, #10
 801ba42:	2308      	moveq	r3, #8
 801ba44:	2100      	movs	r1, #0
 801ba46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801ba4a:	6866      	ldr	r6, [r4, #4]
 801ba4c:	60a6      	str	r6, [r4, #8]
 801ba4e:	2e00      	cmp	r6, #0
 801ba50:	db05      	blt.n	801ba5e <_printf_i+0x10e>
 801ba52:	6821      	ldr	r1, [r4, #0]
 801ba54:	432e      	orrs	r6, r5
 801ba56:	f021 0104 	bic.w	r1, r1, #4
 801ba5a:	6021      	str	r1, [r4, #0]
 801ba5c:	d04b      	beq.n	801baf6 <_printf_i+0x1a6>
 801ba5e:	4616      	mov	r6, r2
 801ba60:	fbb5 f1f3 	udiv	r1, r5, r3
 801ba64:	fb03 5711 	mls	r7, r3, r1, r5
 801ba68:	5dc7      	ldrb	r7, [r0, r7]
 801ba6a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ba6e:	462f      	mov	r7, r5
 801ba70:	42bb      	cmp	r3, r7
 801ba72:	460d      	mov	r5, r1
 801ba74:	d9f4      	bls.n	801ba60 <_printf_i+0x110>
 801ba76:	2b08      	cmp	r3, #8
 801ba78:	d10b      	bne.n	801ba92 <_printf_i+0x142>
 801ba7a:	6823      	ldr	r3, [r4, #0]
 801ba7c:	07df      	lsls	r7, r3, #31
 801ba7e:	d508      	bpl.n	801ba92 <_printf_i+0x142>
 801ba80:	6923      	ldr	r3, [r4, #16]
 801ba82:	6861      	ldr	r1, [r4, #4]
 801ba84:	4299      	cmp	r1, r3
 801ba86:	bfde      	ittt	le
 801ba88:	2330      	movle	r3, #48	@ 0x30
 801ba8a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ba8e:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ba92:	1b92      	subs	r2, r2, r6
 801ba94:	6122      	str	r2, [r4, #16]
 801ba96:	f8cd a000 	str.w	sl, [sp]
 801ba9a:	464b      	mov	r3, r9
 801ba9c:	aa03      	add	r2, sp, #12
 801ba9e:	4621      	mov	r1, r4
 801baa0:	4640      	mov	r0, r8
 801baa2:	f7ff fee7 	bl	801b874 <_printf_common>
 801baa6:	3001      	adds	r0, #1
 801baa8:	d14a      	bne.n	801bb40 <_printf_i+0x1f0>
 801baaa:	f04f 30ff 	mov.w	r0, #4294967295
 801baae:	b004      	add	sp, #16
 801bab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bab4:	6823      	ldr	r3, [r4, #0]
 801bab6:	f043 0320 	orr.w	r3, r3, #32
 801baba:	6023      	str	r3, [r4, #0]
 801babc:	4832      	ldr	r0, [pc, #200]	@ (801bb88 <_printf_i+0x238>)
 801babe:	2778      	movs	r7, #120	@ 0x78
 801bac0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801bac4:	6823      	ldr	r3, [r4, #0]
 801bac6:	6831      	ldr	r1, [r6, #0]
 801bac8:	061f      	lsls	r7, r3, #24
 801baca:	f851 5b04 	ldr.w	r5, [r1], #4
 801bace:	d402      	bmi.n	801bad6 <_printf_i+0x186>
 801bad0:	065f      	lsls	r7, r3, #25
 801bad2:	bf48      	it	mi
 801bad4:	b2ad      	uxthmi	r5, r5
 801bad6:	6031      	str	r1, [r6, #0]
 801bad8:	07d9      	lsls	r1, r3, #31
 801bada:	bf44      	itt	mi
 801badc:	f043 0320 	orrmi.w	r3, r3, #32
 801bae0:	6023      	strmi	r3, [r4, #0]
 801bae2:	b11d      	cbz	r5, 801baec <_printf_i+0x19c>
 801bae4:	2310      	movs	r3, #16
 801bae6:	e7ad      	b.n	801ba44 <_printf_i+0xf4>
 801bae8:	4826      	ldr	r0, [pc, #152]	@ (801bb84 <_printf_i+0x234>)
 801baea:	e7e9      	b.n	801bac0 <_printf_i+0x170>
 801baec:	6823      	ldr	r3, [r4, #0]
 801baee:	f023 0320 	bic.w	r3, r3, #32
 801baf2:	6023      	str	r3, [r4, #0]
 801baf4:	e7f6      	b.n	801bae4 <_printf_i+0x194>
 801baf6:	4616      	mov	r6, r2
 801baf8:	e7bd      	b.n	801ba76 <_printf_i+0x126>
 801bafa:	6833      	ldr	r3, [r6, #0]
 801bafc:	6825      	ldr	r5, [r4, #0]
 801bafe:	6961      	ldr	r1, [r4, #20]
 801bb00:	1d18      	adds	r0, r3, #4
 801bb02:	6030      	str	r0, [r6, #0]
 801bb04:	062e      	lsls	r6, r5, #24
 801bb06:	681b      	ldr	r3, [r3, #0]
 801bb08:	d501      	bpl.n	801bb0e <_printf_i+0x1be>
 801bb0a:	6019      	str	r1, [r3, #0]
 801bb0c:	e002      	b.n	801bb14 <_printf_i+0x1c4>
 801bb0e:	0668      	lsls	r0, r5, #25
 801bb10:	d5fb      	bpl.n	801bb0a <_printf_i+0x1ba>
 801bb12:	8019      	strh	r1, [r3, #0]
 801bb14:	2300      	movs	r3, #0
 801bb16:	6123      	str	r3, [r4, #16]
 801bb18:	4616      	mov	r6, r2
 801bb1a:	e7bc      	b.n	801ba96 <_printf_i+0x146>
 801bb1c:	6833      	ldr	r3, [r6, #0]
 801bb1e:	1d1a      	adds	r2, r3, #4
 801bb20:	6032      	str	r2, [r6, #0]
 801bb22:	681e      	ldr	r6, [r3, #0]
 801bb24:	6862      	ldr	r2, [r4, #4]
 801bb26:	2100      	movs	r1, #0
 801bb28:	4630      	mov	r0, r6
 801bb2a:	f7e4 fb89 	bl	8000240 <memchr>
 801bb2e:	b108      	cbz	r0, 801bb34 <_printf_i+0x1e4>
 801bb30:	1b80      	subs	r0, r0, r6
 801bb32:	6060      	str	r0, [r4, #4]
 801bb34:	6863      	ldr	r3, [r4, #4]
 801bb36:	6123      	str	r3, [r4, #16]
 801bb38:	2300      	movs	r3, #0
 801bb3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bb3e:	e7aa      	b.n	801ba96 <_printf_i+0x146>
 801bb40:	6923      	ldr	r3, [r4, #16]
 801bb42:	4632      	mov	r2, r6
 801bb44:	4649      	mov	r1, r9
 801bb46:	4640      	mov	r0, r8
 801bb48:	47d0      	blx	sl
 801bb4a:	3001      	adds	r0, #1
 801bb4c:	d0ad      	beq.n	801baaa <_printf_i+0x15a>
 801bb4e:	6823      	ldr	r3, [r4, #0]
 801bb50:	079b      	lsls	r3, r3, #30
 801bb52:	d413      	bmi.n	801bb7c <_printf_i+0x22c>
 801bb54:	68e0      	ldr	r0, [r4, #12]
 801bb56:	9b03      	ldr	r3, [sp, #12]
 801bb58:	4298      	cmp	r0, r3
 801bb5a:	bfb8      	it	lt
 801bb5c:	4618      	movlt	r0, r3
 801bb5e:	e7a6      	b.n	801baae <_printf_i+0x15e>
 801bb60:	2301      	movs	r3, #1
 801bb62:	4632      	mov	r2, r6
 801bb64:	4649      	mov	r1, r9
 801bb66:	4640      	mov	r0, r8
 801bb68:	47d0      	blx	sl
 801bb6a:	3001      	adds	r0, #1
 801bb6c:	d09d      	beq.n	801baaa <_printf_i+0x15a>
 801bb6e:	3501      	adds	r5, #1
 801bb70:	68e3      	ldr	r3, [r4, #12]
 801bb72:	9903      	ldr	r1, [sp, #12]
 801bb74:	1a5b      	subs	r3, r3, r1
 801bb76:	42ab      	cmp	r3, r5
 801bb78:	dcf2      	bgt.n	801bb60 <_printf_i+0x210>
 801bb7a:	e7eb      	b.n	801bb54 <_printf_i+0x204>
 801bb7c:	2500      	movs	r5, #0
 801bb7e:	f104 0619 	add.w	r6, r4, #25
 801bb82:	e7f5      	b.n	801bb70 <_printf_i+0x220>
 801bb84:	0801ed33 	.word	0x0801ed33
 801bb88:	0801ed44 	.word	0x0801ed44

0801bb8c <memmove>:
 801bb8c:	4288      	cmp	r0, r1
 801bb8e:	b510      	push	{r4, lr}
 801bb90:	eb01 0402 	add.w	r4, r1, r2
 801bb94:	d902      	bls.n	801bb9c <memmove+0x10>
 801bb96:	4284      	cmp	r4, r0
 801bb98:	4623      	mov	r3, r4
 801bb9a:	d807      	bhi.n	801bbac <memmove+0x20>
 801bb9c:	1e43      	subs	r3, r0, #1
 801bb9e:	42a1      	cmp	r1, r4
 801bba0:	d008      	beq.n	801bbb4 <memmove+0x28>
 801bba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bba6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801bbaa:	e7f8      	b.n	801bb9e <memmove+0x12>
 801bbac:	4402      	add	r2, r0
 801bbae:	4601      	mov	r1, r0
 801bbb0:	428a      	cmp	r2, r1
 801bbb2:	d100      	bne.n	801bbb6 <memmove+0x2a>
 801bbb4:	bd10      	pop	{r4, pc}
 801bbb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801bbba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801bbbe:	e7f7      	b.n	801bbb0 <memmove+0x24>

0801bbc0 <_realloc_r>:
 801bbc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bbc4:	4607      	mov	r7, r0
 801bbc6:	4614      	mov	r4, r2
 801bbc8:	460d      	mov	r5, r1
 801bbca:	b921      	cbnz	r1, 801bbd6 <_realloc_r+0x16>
 801bbcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bbd0:	4611      	mov	r1, r2
 801bbd2:	f7ff bb01 	b.w	801b1d8 <_malloc_r>
 801bbd6:	b92a      	cbnz	r2, 801bbe4 <_realloc_r+0x24>
 801bbd8:	f7ff fcaa 	bl	801b530 <_free_r>
 801bbdc:	4625      	mov	r5, r4
 801bbde:	4628      	mov	r0, r5
 801bbe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bbe4:	f000 f81a 	bl	801bc1c <_malloc_usable_size_r>
 801bbe8:	4284      	cmp	r4, r0
 801bbea:	4606      	mov	r6, r0
 801bbec:	d802      	bhi.n	801bbf4 <_realloc_r+0x34>
 801bbee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801bbf2:	d8f4      	bhi.n	801bbde <_realloc_r+0x1e>
 801bbf4:	4621      	mov	r1, r4
 801bbf6:	4638      	mov	r0, r7
 801bbf8:	f7ff faee 	bl	801b1d8 <_malloc_r>
 801bbfc:	4680      	mov	r8, r0
 801bbfe:	b908      	cbnz	r0, 801bc04 <_realloc_r+0x44>
 801bc00:	4645      	mov	r5, r8
 801bc02:	e7ec      	b.n	801bbde <_realloc_r+0x1e>
 801bc04:	42b4      	cmp	r4, r6
 801bc06:	4622      	mov	r2, r4
 801bc08:	4629      	mov	r1, r5
 801bc0a:	bf28      	it	cs
 801bc0c:	4632      	movcs	r2, r6
 801bc0e:	f7ff fc81 	bl	801b514 <memcpy>
 801bc12:	4629      	mov	r1, r5
 801bc14:	4638      	mov	r0, r7
 801bc16:	f7ff fc8b 	bl	801b530 <_free_r>
 801bc1a:	e7f1      	b.n	801bc00 <_realloc_r+0x40>

0801bc1c <_malloc_usable_size_r>:
 801bc1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bc20:	1f18      	subs	r0, r3, #4
 801bc22:	2b00      	cmp	r3, #0
 801bc24:	bfbc      	itt	lt
 801bc26:	580b      	ldrlt	r3, [r1, r0]
 801bc28:	18c0      	addlt	r0, r0, r3
 801bc2a:	4770      	bx	lr

0801bc2c <_init>:
 801bc2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc2e:	bf00      	nop
 801bc30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bc32:	bc08      	pop	{r3}
 801bc34:	469e      	mov	lr, r3
 801bc36:	4770      	bx	lr

0801bc38 <_fini>:
 801bc38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc3a:	bf00      	nop
 801bc3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bc3e:	bc08      	pop	{r3}
 801bc40:	469e      	mov	lr, r3
 801bc42:	4770      	bx	lr
