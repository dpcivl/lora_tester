
lora_tester_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019270  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003ac8  08019440  08019440  0001a440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cf08  0801cf08  0001e214  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801cf08  0801cf08  0001df08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cf10  0801cf10  0001e214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cf10  0801cf10  0001df10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801cf14  0801cf14  0001df14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d4  20000000  0801cf18  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000d4  0801cfec  0001e0d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000174  0801d08c  0001e174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00012f90  20000220  0801d12c  0001e220  2**5
                  ALLOC
 12 ._user_heap_stack 00000600  200131b0  0801d12c  0001f1b0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001e214  2**0
                  CONTENTS, READONLY
 14 .debug_info   00042be3  00000000  00000000  0001e244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009195  00000000  00000000  00060e27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003800  00000000  00000000  00069fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002bad  00000000  00000000  0006d7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037efa  00000000  00000000  0007036d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004be21  00000000  00000000  000a8267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012e30c  00000000  00000000  000f4088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00222394  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000fa38  00000000  00000000  002223d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000082  00000000  00000000  00231e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08019428 	.word	0x08019428

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	08019428 	.word	0x08019428

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <CommandSender_Send>:
#include <stddef.h>
#include <string.h>
#include <stdio.h>

void CommandSender_Send(const char* command)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	@ 0x58
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    if (command != NULL) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d051      	beq.n	80006be <CommandSender_Send+0xb2>
        int len = strlen(command);
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff fe02 	bl	8000224 <strlen>
 8000620:	4603      	mov	r3, r0
 8000622:	653b      	str	r3, [r7, #80]	@ 0x50
        
        // 전송할 명령어를 명확히 로깅 (특수 문자도 표시)
        LOG_INFO("📤 TX: '%s' (%d bytes)", command, len);
 8000624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	4929      	ldr	r1, [pc, #164]	@ (80006d0 <CommandSender_Send+0xc4>)
 800062a:	2001      	movs	r0, #1
 800062c:	f005 f910 	bl	8005850 <LOGGER_SendFormatted>
        
        // 헥스 덤프도 표시 (처음 20바이트까지)
        if (len > 0) {
 8000630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000632:	2b00      	cmp	r3, #0
 8000634:	dd2c      	ble.n	8000690 <CommandSender_Send+0x84>
            char hex_dump[64] = {0};
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	2240      	movs	r2, #64	@ 0x40
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f017 fb20 	bl	8017c84 <memset>
            int dump_len = (len > 20) ? 20 : len;
 8000644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000646:	2b14      	cmp	r3, #20
 8000648:	bfa8      	it	ge
 800064a:	2314      	movge	r3, #20
 800064c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (int i = 0; i < dump_len; i++) {
 800064e:	2300      	movs	r3, #0
 8000650:	657b      	str	r3, [r7, #84]	@ 0x54
 8000652:	e012      	b.n	800067a <CommandSender_Send+0x6e>
                snprintf(hex_dump + i*3, 4, "%02X ", (unsigned char)command[i]);
 8000654:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000656:	4613      	mov	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	461a      	mov	r2, r3
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	1898      	adds	r0, r3, r2
 8000664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4a19      	ldr	r2, [pc, #100]	@ (80006d4 <CommandSender_Send+0xc8>)
 800066e:	2104      	movs	r1, #4
 8000670:	f017 fa02 	bl	8017a78 <sniprintf>
            for (int i = 0; i < dump_len; i++) {
 8000674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000676:	3301      	adds	r3, #1
 8000678:	657b      	str	r3, [r7, #84]	@ 0x54
 800067a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800067c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800067e:	429a      	cmp	r2, r3
 8000680:	dbe8      	blt.n	8000654 <CommandSender_Send+0x48>
            }
            LOG_DEBUG("[CommandSender] Hex: %s", hex_dump);
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	461a      	mov	r2, r3
 8000688:	4913      	ldr	r1, [pc, #76]	@ (80006d8 <CommandSender_Send+0xcc>)
 800068a:	2000      	movs	r0, #0
 800068c:	f005 f8e0 	bl	8005850 <LOGGER_SendFormatted>
        }
        
        UartStatus status = UART_Send(command);
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f005 fa41 	bl	8005b18 <UART_Send>
 8000696:	4603      	mov	r3, r0
 8000698:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        
        if (status == UART_STATUS_OK) {
 800069c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d104      	bne.n	80006ae <CommandSender_Send+0xa2>
            LOG_DEBUG("[CommandSender] ✓ Command sent successfully");
 80006a4:	490d      	ldr	r1, [pc, #52]	@ (80006dc <CommandSender_Send+0xd0>)
 80006a6:	2000      	movs	r0, #0
 80006a8:	f005 f8d2 	bl	8005850 <LOGGER_SendFormatted>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
        }
    } else {
        LOG_WARN("[CommandSender] Attempted to send NULL command");
    }
}
 80006ac:	e00b      	b.n	80006c6 <CommandSender_Send+0xba>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
 80006ae:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006b2:	461a      	mov	r2, r3
 80006b4:	490a      	ldr	r1, [pc, #40]	@ (80006e0 <CommandSender_Send+0xd4>)
 80006b6:	2003      	movs	r0, #3
 80006b8:	f005 f8ca 	bl	8005850 <LOGGER_SendFormatted>
}
 80006bc:	e003      	b.n	80006c6 <CommandSender_Send+0xba>
        LOG_WARN("[CommandSender] Attempted to send NULL command");
 80006be:	4909      	ldr	r1, [pc, #36]	@ (80006e4 <CommandSender_Send+0xd8>)
 80006c0:	2002      	movs	r0, #2
 80006c2:	f005 f8c5 	bl	8005850 <LOGGER_SendFormatted>
}
 80006c6:	bf00      	nop
 80006c8:	3758      	adds	r7, #88	@ 0x58
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	08019440 	.word	0x08019440
 80006d4:	0801945c 	.word	0x0801945c
 80006d8:	08019464 	.word	0x08019464
 80006dc:	0801947c 	.word	0x0801947c
 80006e0:	080194ac 	.word	0x080194ac
 80006e4:	080194e4 	.word	0x080194e4

080006e8 <get_state_name>:
};

const int LORA_DEFAULT_INIT_COMMANDS_COUNT = sizeof(LORA_DEFAULT_INIT_COMMANDS) / sizeof(LORA_DEFAULT_INIT_COMMANDS[0]);

// 상태 이름을 문자열로 변환하는 헬퍼 함수
static const char* get_state_name(LoraState state) {
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
    switch(state) {
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b0e      	cmp	r3, #14
 80006f6:	d83f      	bhi.n	8000778 <get_state_name+0x90>
 80006f8:	a201      	add	r2, pc, #4	@ (adr r2, 8000700 <get_state_name+0x18>)
 80006fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fe:	bf00      	nop
 8000700:	0800073d 	.word	0x0800073d
 8000704:	08000741 	.word	0x08000741
 8000708:	08000745 	.word	0x08000745
 800070c:	08000749 	.word	0x08000749
 8000710:	0800074d 	.word	0x0800074d
 8000714:	08000751 	.word	0x08000751
 8000718:	08000755 	.word	0x08000755
 800071c:	08000759 	.word	0x08000759
 8000720:	0800075d 	.word	0x0800075d
 8000724:	08000761 	.word	0x08000761
 8000728:	08000765 	.word	0x08000765
 800072c:	08000769 	.word	0x08000769
 8000730:	0800076d 	.word	0x0800076d
 8000734:	08000771 	.word	0x08000771
 8000738:	08000775 	.word	0x08000775
        case LORA_STATE_INIT: return "INIT";
 800073c:	4b12      	ldr	r3, [pc, #72]	@ (8000788 <get_state_name+0xa0>)
 800073e:	e01c      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_SEND_CMD: return "SEND_CMD";
 8000740:	4b12      	ldr	r3, [pc, #72]	@ (800078c <get_state_name+0xa4>)
 8000742:	e01a      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_WAIT_OK: return "WAIT_OK";
 8000744:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <get_state_name+0xa8>)
 8000746:	e018      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_SEND_JOIN: return "SEND_JOIN";
 8000748:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <get_state_name+0xac>)
 800074a:	e016      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_WAIT_JOIN_OK: return "WAIT_JOIN_OK";
 800074c:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <get_state_name+0xb0>)
 800074e:	e014      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_SEND_TIMEREQ: return "SEND_TIMEREQ";
 8000750:	4b12      	ldr	r3, [pc, #72]	@ (800079c <get_state_name+0xb4>)
 8000752:	e012      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_WAIT_TIMEREQ_OK: return "WAIT_TIMEREQ_OK";
 8000754:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <get_state_name+0xb8>)
 8000756:	e010      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_SEND_LTIME: return "SEND_LTIME";
 8000758:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <get_state_name+0xbc>)
 800075a:	e00e      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_WAIT_LTIME_RESPONSE: return "WAIT_LTIME_RESPONSE";
 800075c:	4b12      	ldr	r3, [pc, #72]	@ (80007a8 <get_state_name+0xc0>)
 800075e:	e00c      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_SEND_PERIODIC: return "SEND_PERIODIC";
 8000760:	4b12      	ldr	r3, [pc, #72]	@ (80007ac <get_state_name+0xc4>)
 8000762:	e00a      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_WAIT_SEND_RESPONSE: return "WAIT_SEND_RESPONSE";
 8000764:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <get_state_name+0xc8>)
 8000766:	e008      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_WAIT_SEND_INTERVAL: return "WAIT_SEND_INTERVAL";
 8000768:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <get_state_name+0xcc>)
 800076a:	e006      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_JOIN_RETRY: return "JOIN_RETRY";
 800076c:	4b12      	ldr	r3, [pc, #72]	@ (80007b8 <get_state_name+0xd0>)
 800076e:	e004      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_DONE: return "DONE";
 8000770:	4b12      	ldr	r3, [pc, #72]	@ (80007bc <get_state_name+0xd4>)
 8000772:	e002      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_ERROR: return "ERROR";
 8000774:	4b12      	ldr	r3, [pc, #72]	@ (80007c0 <get_state_name+0xd8>)
 8000776:	e000      	b.n	800077a <get_state_name+0x92>
        default: return "UNKNOWN";
 8000778:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <get_state_name+0xdc>)
    }
}
 800077a:	4618      	mov	r0, r3
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	08019550 	.word	0x08019550
 800078c:	08019558 	.word	0x08019558
 8000790:	08019564 	.word	0x08019564
 8000794:	0801956c 	.word	0x0801956c
 8000798:	08019578 	.word	0x08019578
 800079c:	08019588 	.word	0x08019588
 80007a0:	08019598 	.word	0x08019598
 80007a4:	080195a8 	.word	0x080195a8
 80007a8:	080195b4 	.word	0x080195b4
 80007ac:	080195c8 	.word	0x080195c8
 80007b0:	080195d8 	.word	0x080195d8
 80007b4:	080195ec 	.word	0x080195ec
 80007b8:	08019600 	.word	0x08019600
 80007bc:	0801960c 	.word	0x0801960c
 80007c0:	08019614 	.word	0x08019614
 80007c4:	0801961c 	.word	0x0801961c

080007c8 <LoraStarter_InitWithDefaults>:
    UART_Connect(port);
    LOG_INFO("[LoRa] UART connected to %s", port);
}

void LoraStarter_InitWithDefaults(LoraStarterContext* ctx, const char* send_message)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
    if (ctx == NULL) return;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d032      	beq.n	800083e <LoraStarter_InitWithDefaults+0x76>
    
    ctx->state = LORA_STATE_INIT;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
    ctx->cmd_index = 0;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2200      	movs	r2, #0
 80007e2:	605a      	str	r2, [r3, #4]
    ctx->commands = LORA_DEFAULT_INIT_COMMANDS;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4a18      	ldr	r2, [pc, #96]	@ (8000848 <LoraStarter_InitWithDefaults+0x80>)
 80007e8:	609a      	str	r2, [r3, #8]
    ctx->num_commands = LORA_DEFAULT_INIT_COMMANDS_COUNT;
 80007ea:	2205      	movs	r2, #5
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	60da      	str	r2, [r3, #12]
    ctx->send_message = (send_message != NULL) ? send_message : "TEST";
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <LoraStarter_InitWithDefaults+0x32>
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	e000      	b.n	80007fc <LoraStarter_InitWithDefaults+0x34>
 80007fa:	4b14      	ldr	r3, [pc, #80]	@ (800084c <LoraStarter_InitWithDefaults+0x84>)
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	61d3      	str	r3, [r2, #28]
    ctx->max_retry_count = 3;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2203      	movs	r2, #3
 8000804:	625a      	str	r2, [r3, #36]	@ 0x24
    ctx->send_interval_ms = 300000;  // 5분 간격
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4a11      	ldr	r2, [pc, #68]	@ (8000850 <LoraStarter_InitWithDefaults+0x88>)
 800080a:	615a      	str	r2, [r3, #20]
    ctx->last_send_time = 0;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
    ctx->send_count = 0;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
    ctx->error_count = 0;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2200      	movs	r2, #0
 800081c:	621a      	str	r2, [r3, #32]
    ctx->last_retry_time = 0;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2200      	movs	r2, #0
 8000822:	629a      	str	r2, [r3, #40]	@ 0x28
    ctx->retry_delay_ms = 1000;  // 1초 초기 지연
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800082a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    LOG_INFO("[LoRa] Initialized with defaults - Commands: %d, Message: %s", 
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	68da      	ldr	r2, [r3, #12]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	69db      	ldr	r3, [r3, #28]
 8000834:	4907      	ldr	r1, [pc, #28]	@ (8000854 <LoraStarter_InitWithDefaults+0x8c>)
 8000836:	2001      	movs	r0, #1
 8000838:	f005 f80a 	bl	8005850 <LOGGER_SendFormatted>
 800083c:	e000      	b.n	8000840 <LoraStarter_InitWithDefaults+0x78>
    if (ctx == NULL) return;
 800083e:	bf00      	nop
             ctx->num_commands, ctx->send_message);
}
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000000 	.word	0x20000000
 800084c:	08019640 	.word	0x08019640
 8000850:	000493e0 	.word	0x000493e0
 8000854:	08019648 	.word	0x08019648

08000858 <LoraStarter_Process>:

void LoraStarter_Process(LoraStarterContext* ctx, const char* uart_rx)
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b0bf      	sub	sp, #252	@ 0xfc
 800085c:	af02      	add	r7, sp, #8
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
    if (ctx == NULL) return;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2b00      	cmp	r3, #0
 8000866:	f000 82ff 	beq.w	8000e68 <LoraStarter_Process+0x610>

    LoraState old_state = ctx->state;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb

    switch(ctx->state) {
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b0c      	cmp	r3, #12
 8000878:	f200 82d5 	bhi.w	8000e26 <LoraStarter_Process+0x5ce>
 800087c:	a201      	add	r2, pc, #4	@ (adr r2, 8000884 <LoraStarter_Process+0x2c>)
 800087e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000882:	bf00      	nop
 8000884:	080008b9 	.word	0x080008b9
 8000888:	08000907 	.word	0x08000907
 800088c:	0800095d 	.word	0x0800095d
 8000890:	08000a17 	.word	0x08000a17
 8000894:	08000a2d 	.word	0x08000a2d
 8000898:	08000a75 	.word	0x08000a75
 800089c:	08000a8b 	.word	0x08000a8b
 80008a0:	08000ab1 	.word	0x08000ab1
 80008a4:	08000ac7 	.word	0x08000ac7
 80008a8:	08000b3f 	.word	0x08000b3f
 80008ac:	08000c5d 	.word	0x08000c5d
 80008b0:	08000d4d 	.word	0x08000d4d
 80008b4:	08000db3 	.word	0x08000db3
        case LORA_STATE_INIT:
            ctx->cmd_index = 0;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2200      	movs	r2, #0
 80008bc:	605a      	str	r2, [r3, #4]
            ctx->error_count = 0;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
            ctx->state = LORA_STATE_SEND_CMD;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2201      	movs	r2, #1
 80008c8:	701a      	strb	r2, [r3, #0]
            // 기본값 설정
            if (ctx->max_retry_count == 0) ctx->max_retry_count = 0; // 0이면 무제한
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d102      	bne.n	80008d8 <LoraStarter_Process+0x80>
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2200      	movs	r2, #0
 80008d6:	625a      	str	r2, [r3, #36]	@ 0x24
            if (ctx->send_message == NULL) ctx->send_message = "Hello";
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	69db      	ldr	r3, [r3, #28]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d102      	bne.n	80008e6 <LoraStarter_Process+0x8e>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4aa1      	ldr	r2, [pc, #644]	@ (8000b68 <LoraStarter_Process+0x310>)
 80008e4:	61da      	str	r2, [r3, #28]
            ctx->last_retry_time = 0;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2200      	movs	r2, #0
 80008ea:	629a      	str	r2, [r3, #40]	@ 0x28
            ctx->retry_delay_ms = 1000; // 초기 재시도 지연: 1초
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008f2:	62da      	str	r2, [r3, #44]	@ 0x2c
            LOG_INFO("[LoRa] Initialized with message: %s, max_retries: %d", 
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	69da      	ldr	r2, [r3, #28]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008fc:	499b      	ldr	r1, [pc, #620]	@ (8000b6c <LoraStarter_Process+0x314>)
 80008fe:	2001      	movs	r0, #1
 8000900:	f004 ffa6 	bl	8005850 <LOGGER_SendFormatted>
                    ctx->send_message, ctx->max_retry_count);
            break;
 8000904:	e298      	b.n	8000e38 <LoraStarter_Process+0x5e0>
        case LORA_STATE_SEND_CMD:
            if (ctx->cmd_index < ctx->num_commands) {
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	685a      	ldr	r2, [r3, #4]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	68db      	ldr	r3, [r3, #12]
 800090e:	429a      	cmp	r2, r3
 8000910:	da20      	bge.n	8000954 <LoraStarter_Process+0xfc>
                LOG_DEBUG("[LoRa] Sending command %d/%d: %s", 
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	1c59      	adds	r1, r3, #1
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	68d8      	ldr	r0, [r3, #12]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	689a      	ldr	r2, [r3, #8]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	4413      	add	r3, r2
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	9300      	str	r3, [sp, #0]
 800092c:	4603      	mov	r3, r0
 800092e:	460a      	mov	r2, r1
 8000930:	498f      	ldr	r1, [pc, #572]	@ (8000b70 <LoraStarter_Process+0x318>)
 8000932:	2000      	movs	r0, #0
 8000934:	f004 ff8c 	bl	8005850 <LOGGER_SendFormatted>
                         ctx->cmd_index + 1, ctx->num_commands, ctx->commands[ctx->cmd_index]);
                CommandSender_Send(ctx->commands[ctx->cmd_index]);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	689a      	ldr	r2, [r3, #8]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	4413      	add	r3, r2
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff fe60 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_OK;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2202      	movs	r2, #2
 8000950:	701a      	strb	r2, [r3, #0]
            } else {
                ctx->state = LORA_STATE_SEND_JOIN;
            }
            break;
 8000952:	e271      	b.n	8000e38 <LoraStarter_Process+0x5e0>
                ctx->state = LORA_STATE_SEND_JOIN;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2203      	movs	r2, #3
 8000958:	701a      	strb	r2, [r3, #0]
            break;
 800095a:	e26d      	b.n	8000e38 <LoraStarter_Process+0x5e0>
        case LORA_STATE_WAIT_OK:
            if (uart_rx) {
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	f000 8263 	beq.w	8000e2a <LoraStarter_Process+0x5d2>
                if (is_response_ok(uart_rx)) {
 8000964:	6838      	ldr	r0, [r7, #0]
 8000966:	f000 faab 	bl	8000ec0 <is_response_ok>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d010      	beq.n	8000992 <LoraStarter_Process+0x13a>
                    LOG_DEBUG("[LoRa] Command %d OK received", ctx->cmd_index + 1);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	3301      	adds	r3, #1
 8000976:	461a      	mov	r2, r3
 8000978:	497e      	ldr	r1, [pc, #504]	@ (8000b74 <LoraStarter_Process+0x31c>)
 800097a:	2000      	movs	r0, #0
 800097c:	f004 ff68 	bl	8005850 <LOGGER_SendFormatted>
                    ctx->cmd_index++;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	1c5a      	adds	r2, r3, #1
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	605a      	str	r2, [r3, #4]
                    ctx->state = LORA_STATE_SEND_CMD;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2201      	movs	r2, #1
 800098e:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 에러 카운터 리셋
                        ctx->state = LORA_STATE_SEND_CMD;
                    }
                }
            }
            break;
 8000990:	e24b      	b.n	8000e2a <LoraStarter_Process+0x5d2>
                } else if (strstr(uart_rx, "ERROR") || strstr(uart_rx, "AT_COMMAND_NOT_FOUND")) {
 8000992:	4979      	ldr	r1, [pc, #484]	@ (8000b78 <LoraStarter_Process+0x320>)
 8000994:	6838      	ldr	r0, [r7, #0]
 8000996:	f017 f99d 	bl	8017cd4 <strstr>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d107      	bne.n	80009b0 <LoraStarter_Process+0x158>
 80009a0:	4976      	ldr	r1, [pc, #472]	@ (8000b7c <LoraStarter_Process+0x324>)
 80009a2:	6838      	ldr	r0, [r7, #0]
 80009a4:	f017 f996 	bl	8017cd4 <strstr>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	f000 823d 	beq.w	8000e2a <LoraStarter_Process+0x5d2>
                    LOG_WARN("[LoRa] Command %d failed: %s", ctx->cmd_index + 1, uart_rx);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	1c5a      	adds	r2, r3, #1
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	4971      	ldr	r1, [pc, #452]	@ (8000b80 <LoraStarter_Process+0x328>)
 80009ba:	2002      	movs	r0, #2
 80009bc:	f004 ff48 	bl	8005850 <LOGGER_SendFormatted>
                    ctx->error_count++;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6a1b      	ldr	r3, [r3, #32]
 80009c4:	1c5a      	adds	r2, r3, #1
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	621a      	str	r2, [r3, #32]
                    if (ctx->error_count < 3) {
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6a1b      	ldr	r3, [r3, #32]
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	dc0d      	bgt.n	80009ee <LoraStarter_Process+0x196>
                        LOG_INFO("[LoRa] Retrying command %d (attempt %d/3)", ctx->cmd_index + 1, ctx->error_count + 1);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	1c5a      	adds	r2, r3, #1
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6a1b      	ldr	r3, [r3, #32]
 80009dc:	3301      	adds	r3, #1
 80009de:	4969      	ldr	r1, [pc, #420]	@ (8000b84 <LoraStarter_Process+0x32c>)
 80009e0:	2001      	movs	r0, #1
 80009e2:	f004 ff35 	bl	8005850 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_SEND_CMD; // 같은 명령 재시도
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2201      	movs	r2, #1
 80009ea:	701a      	strb	r2, [r3, #0]
            break;
 80009ec:	e21d      	b.n	8000e2a <LoraStarter_Process+0x5d2>
                        LOG_WARN("[LoRa] Command %d failed after 3 attempts, skipping to next", ctx->cmd_index + 1);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	3301      	adds	r3, #1
 80009f4:	461a      	mov	r2, r3
 80009f6:	4964      	ldr	r1, [pc, #400]	@ (8000b88 <LoraStarter_Process+0x330>)
 80009f8:	2002      	movs	r0, #2
 80009fa:	f004 ff29 	bl	8005850 <LOGGER_SendFormatted>
                        ctx->cmd_index++; // 다음 명령으로 건너뛰기
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	1c5a      	adds	r2, r3, #1
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	605a      	str	r2, [r3, #4]
                        ctx->error_count = 0; // 에러 카운터 리셋
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	621a      	str	r2, [r3, #32]
                        ctx->state = LORA_STATE_SEND_CMD;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2201      	movs	r2, #1
 8000a12:	701a      	strb	r2, [r3, #0]
            break;
 8000a14:	e209      	b.n	8000e2a <LoraStarter_Process+0x5d2>
        case LORA_STATE_SEND_JOIN:
            LORA_LOG_JOIN_ATTEMPT();
 8000a16:	495d      	ldr	r1, [pc, #372]	@ (8000b8c <LoraStarter_Process+0x334>)
 8000a18:	2002      	movs	r0, #2
 8000a1a:	f004 ff19 	bl	8005850 <LOGGER_SendFormatted>
            CommandSender_Send("AT+JOIN\r\n");
 8000a1e:	485c      	ldr	r0, [pc, #368]	@ (8000b90 <LoraStarter_Process+0x338>)
 8000a20:	f7ff fdf4 	bl	800060c <CommandSender_Send>
            ctx->state = LORA_STATE_WAIT_JOIN_OK;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2204      	movs	r2, #4
 8000a28:	701a      	strb	r2, [r3, #0]
            break;
 8000a2a:	e205      	b.n	8000e38 <LoraStarter_Process+0x5e0>
        case LORA_STATE_WAIT_JOIN_OK:
            if (uart_rx && is_join_response_ok(uart_rx)) {
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	f000 81fd 	beq.w	8000e2e <LoraStarter_Process+0x5d6>
 8000a34:	6838      	ldr	r0, [r7, #0]
 8000a36:	f000 faab 	bl	8000f90 <is_join_response_ok>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	f000 81f6 	beq.w	8000e2e <LoraStarter_Process+0x5d6>
                LORA_LOG_JOIN_SUCCESS();
 8000a42:	4954      	ldr	r1, [pc, #336]	@ (8000b94 <LoraStarter_Process+0x33c>)
 8000a44:	2002      	movs	r0, #2
 8000a46:	f004 ff03 	bl	8005850 <LOGGER_SendFormatted>
                ctx->state = LORA_STATE_SEND_TIMEREQ; // JOIN 후 시간 동기화 요청으로 전환
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2205      	movs	r2, #5
 8000a4e:	701a      	strb	r2, [r3, #0]
                ctx->send_count = 0;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2200      	movs	r2, #0
 8000a54:	619a      	str	r2, [r3, #24]
                ctx->error_count = 0; // JOIN 성공 시 에러 카운터 리셋
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	621a      	str	r2, [r3, #32]
                ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a62:	62da      	str	r2, [r3, #44]	@ 0x2c
                ctx->last_retry_time = 0; // 재시도 시간 리셋
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	629a      	str	r2, [r3, #40]	@ 0x28
                LOG_INFO("[LoRa] JOIN successful, requesting time synchronization...");
 8000a6a:	494b      	ldr	r1, [pc, #300]	@ (8000b98 <LoraStarter_Process+0x340>)
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f004 feef 	bl	8005850 <LOGGER_SendFormatted>
            }
            break;
 8000a72:	e1dc      	b.n	8000e2e <LoraStarter_Process+0x5d6>
        case LORA_STATE_SEND_TIMEREQ:
            LOG_INFO("[LoRa] Sending time synchronization request...");
 8000a74:	4949      	ldr	r1, [pc, #292]	@ (8000b9c <LoraStarter_Process+0x344>)
 8000a76:	2001      	movs	r0, #1
 8000a78:	f004 feea 	bl	8005850 <LOGGER_SendFormatted>
            CommandSender_Send("AT+TIMEREQ=1\r\n");
 8000a7c:	4848      	ldr	r0, [pc, #288]	@ (8000ba0 <LoraStarter_Process+0x348>)
 8000a7e:	f7ff fdc5 	bl	800060c <CommandSender_Send>
            ctx->state = LORA_STATE_WAIT_TIMEREQ_OK;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2206      	movs	r2, #6
 8000a86:	701a      	strb	r2, [r3, #0]
            break;
 8000a88:	e1d6      	b.n	8000e38 <LoraStarter_Process+0x5e0>
        case LORA_STATE_WAIT_TIMEREQ_OK:
            if (uart_rx && is_response_ok(uart_rx)) {
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	f000 81d0 	beq.w	8000e32 <LoraStarter_Process+0x5da>
 8000a92:	6838      	ldr	r0, [r7, #0]
 8000a94:	f000 fa14 	bl	8000ec0 <is_response_ok>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	f000 81c9 	beq.w	8000e32 <LoraStarter_Process+0x5da>
                LOG_WARN("[LoRa] ✅ Time synchronization enabled");
 8000aa0:	4940      	ldr	r1, [pc, #256]	@ (8000ba4 <LoraStarter_Process+0x34c>)
 8000aa2:	2002      	movs	r0, #2
 8000aa4:	f004 fed4 	bl	8005850 <LOGGER_SendFormatted>
                ctx->state = LORA_STATE_SEND_LTIME;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2207      	movs	r2, #7
 8000aac:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000aae:	e1c0      	b.n	8000e32 <LoraStarter_Process+0x5da>
        case LORA_STATE_SEND_LTIME:
            LOG_INFO("[LoRa] Requesting network time...");
 8000ab0:	493d      	ldr	r1, [pc, #244]	@ (8000ba8 <LoraStarter_Process+0x350>)
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f004 fecc 	bl	8005850 <LOGGER_SendFormatted>
            CommandSender_Send("AT+LTIME=?\r\n");
 8000ab8:	483c      	ldr	r0, [pc, #240]	@ (8000bac <LoraStarter_Process+0x354>)
 8000aba:	f7ff fda7 	bl	800060c <CommandSender_Send>
            ctx->state = LORA_STATE_WAIT_LTIME_RESPONSE;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2208      	movs	r2, #8
 8000ac2:	701a      	strb	r2, [r3, #0]
            break;
 8000ac4:	e1b8      	b.n	8000e38 <LoraStarter_Process+0x5e0>
        case LORA_STATE_WAIT_LTIME_RESPONSE:
            if (uart_rx) {
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d033      	beq.n	8000b34 <LoraStarter_Process+0x2dc>
                LOG_DEBUG("[LoRa] LTIME response received: '%s'", uart_rx);
 8000acc:	683a      	ldr	r2, [r7, #0]
 8000ace:	4938      	ldr	r1, [pc, #224]	@ (8000bb0 <LoraStarter_Process+0x358>)
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f004 febd 	bl	8005850 <LOGGER_SendFormatted>
                
                // ResponseHandler에서 시간 응답 파싱 처리
                if (ResponseHandler_IsTimeResponse(uart_rx)) {
 8000ad6:	6838      	ldr	r0, [r7, #0]
 8000ad8:	f000 fb40 	bl	800115c <ResponseHandler_IsTimeResponse>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d022      	beq.n	8000b28 <LoraStarter_Process+0x2d0>
                    ResponseHandler_ParseTimeResponse(uart_rx);
 8000ae2:	6838      	ldr	r0, [r7, #0]
 8000ae4:	f000 fbea 	bl	80012bc <ResponseHandler_ParseTimeResponse>
                    
                    // 현재 상태에 따라 다른 동작
                    if (ctx->send_count == 0) {
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d10e      	bne.n	8000b0e <LoraStarter_Process+0x2b6>
                        // 첫 번째 시간 동기화 (JOIN 후) - 주기적 전송 시작
                        LOG_WARN("[LoRa] 🕐 Initial time synchronized, starting periodic transmission");
 8000af0:	4930      	ldr	r1, [pc, #192]	@ (8000bb4 <LoraStarter_Process+0x35c>)
 8000af2:	2002      	movs	r0, #2
 8000af4:	f004 feac 	bl	8005850 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_SEND_PERIODIC;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2209      	movs	r2, #9
 8000afc:	701a      	strb	r2, [r3, #0]
                        LOG_WARN("[LoRa] 🚀 PERIODIC SEND STARTED with message: %s", ctx->send_message);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	461a      	mov	r2, r3
 8000b04:	492c      	ldr	r1, [pc, #176]	@ (8000bb8 <LoraStarter_Process+0x360>)
 8000b06:	2002      	movs	r0, #2
 8000b08:	f004 fea2 	bl	8005850 <LOGGER_SendFormatted>
                    LOG_DEBUG("[LoRa] Waiting for LTIME response, got: '%s'", uart_rx);
                }
            } else {
                LOG_DEBUG("[LoRa] WAIT_LTIME_RESPONSE: No uart_rx data received");
            }
            break;
 8000b0c:	e194      	b.n	8000e38 <LoraStarter_Process+0x5e0>
                        LOG_WARN("[LoRa] 🕐 Time logged after SEND, waiting for next interval");
 8000b0e:	492b      	ldr	r1, [pc, #172]	@ (8000bbc <LoraStarter_Process+0x364>)
 8000b10:	2002      	movs	r0, #2
 8000b12:	f004 fe9d 	bl	8005850 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_SEND_PERIODIC;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2209      	movs	r2, #9
 8000b1a:	701a      	strb	r2, [r3, #0]
                        ctx->last_send_time = TIME_GetCurrentMs(); // 마지막 송신 시간 저장
 8000b1c:	f004 fdfe 	bl	800571c <TIME_GetCurrentMs>
 8000b20:	4602      	mov	r2, r0
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	611a      	str	r2, [r3, #16]
            break;
 8000b26:	e187      	b.n	8000e38 <LoraStarter_Process+0x5e0>
                    LOG_DEBUG("[LoRa] Waiting for LTIME response, got: '%s'", uart_rx);
 8000b28:	683a      	ldr	r2, [r7, #0]
 8000b2a:	4925      	ldr	r1, [pc, #148]	@ (8000bc0 <LoraStarter_Process+0x368>)
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f004 fe8f 	bl	8005850 <LOGGER_SendFormatted>
            break;
 8000b32:	e181      	b.n	8000e38 <LoraStarter_Process+0x5e0>
                LOG_DEBUG("[LoRa] WAIT_LTIME_RESPONSE: No uart_rx data received");
 8000b34:	4923      	ldr	r1, [pc, #140]	@ (8000bc4 <LoraStarter_Process+0x36c>)
 8000b36:	2000      	movs	r0, #0
 8000b38:	f004 fe8a 	bl	8005850 <LOGGER_SendFormatted>
            break;
 8000b3c:	e17c      	b.n	8000e38 <LoraStarter_Process+0x5e0>
        case LORA_STATE_SEND_PERIODIC:
            {
                char send_cmd[128];
                char hex_data[64];
                const char* message = (ctx->send_message != NULL) ? ctx->send_message : "Hello";
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	69db      	ldr	r3, [r3, #28]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d002      	beq.n	8000b4c <LoraStarter_Process+0x2f4>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	e000      	b.n	8000b4e <LoraStarter_Process+0x2f6>
 8000b4c:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <LoraStarter_Process+0x310>)
 8000b4e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                
                // 문자열을 헥사 문자열로 변환
                int len = strlen(message);
 8000b52:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8000b56:	f7ff fb65 	bl	8000224 <strlen>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 8000b60:	2300      	movs	r3, #0
 8000b62:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000b66:	e044      	b.n	8000bf2 <LoraStarter_Process+0x39a>
 8000b68:	08019688 	.word	0x08019688
 8000b6c:	08019690 	.word	0x08019690
 8000b70:	080196c8 	.word	0x080196c8
 8000b74:	080196ec 	.word	0x080196ec
 8000b78:	08019614 	.word	0x08019614
 8000b7c:	0801970c 	.word	0x0801970c
 8000b80:	08019724 	.word	0x08019724
 8000b84:	08019744 	.word	0x08019744
 8000b88:	08019770 	.word	0x08019770
 8000b8c:	080197ac 	.word	0x080197ac
 8000b90:	080197d0 	.word	0x080197d0
 8000b94:	080197dc 	.word	0x080197dc
 8000b98:	080197f8 	.word	0x080197f8
 8000b9c:	08019834 	.word	0x08019834
 8000ba0:	08019864 	.word	0x08019864
 8000ba4:	08019874 	.word	0x08019874
 8000ba8:	0801989c 	.word	0x0801989c
 8000bac:	080198c0 	.word	0x080198c0
 8000bb0:	080198d0 	.word	0x080198d0
 8000bb4:	080198f8 	.word	0x080198f8
 8000bb8:	08019940 	.word	0x08019940
 8000bbc:	08019974 	.word	0x08019974
 8000bc0:	080199b4 	.word	0x080199b4
 8000bc4:	080199e4 	.word	0x080199e4
                    sprintf(&hex_data[i*2], "%02X", (unsigned char)message[i]);
 8000bc8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	f107 020c 	add.w	r2, r7, #12
 8000bd2:	18d0      	adds	r0, r2, r3
 8000bd4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000bd8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000bdc:	4413      	add	r3, r2
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	461a      	mov	r2, r3
 8000be2:	49a3      	ldr	r1, [pc, #652]	@ (8000e70 <LoraStarter_Process+0x618>)
 8000be4:	f016 ff7e 	bl	8017ae4 <siprintf>
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 8000be8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000bec:	3301      	adds	r3, #1
 8000bee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000bf2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8000bf6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	da03      	bge.n	8000c06 <LoraStarter_Process+0x3ae>
 8000bfe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000c02:	2b1e      	cmp	r3, #30
 8000c04:	dde0      	ble.n	8000bc8 <LoraStarter_Process+0x370>
                }
                hex_data[len*2] = '\0';
 8000c06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	33f0      	adds	r3, #240	@ 0xf0
 8000c0e:	443b      	add	r3, r7
 8000c10:	2200      	movs	r2, #0
 8000c12:	f803 2ce4 	strb.w	r2, [r3, #-228]
                
                snprintf(send_cmd, sizeof(send_cmd), "AT+SEND=1:%s\r\n", hex_data);
 8000c16:	f107 030c 	add.w	r3, r7, #12
 8000c1a:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8000c1e:	4a95      	ldr	r2, [pc, #596]	@ (8000e74 <LoraStarter_Process+0x61c>)
 8000c20:	2180      	movs	r1, #128	@ 0x80
 8000c22:	f016 ff29 	bl	8017a78 <sniprintf>
                LORA_LOG_SEND_ATTEMPT(message);
 8000c26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000c2a:	4993      	ldr	r1, [pc, #588]	@ (8000e78 <LoraStarter_Process+0x620>)
 8000c2c:	2002      	movs	r0, #2
 8000c2e:	f004 fe0f 	bl	8005850 <LOGGER_SendFormatted>
                CommandSender_Send(send_cmd);
 8000c32:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fce8 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_SEND_RESPONSE;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	220a      	movs	r2, #10
 8000c40:	701a      	strb	r2, [r3, #0]
                ctx->send_count++;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	699b      	ldr	r3, [r3, #24]
 8000c46:	1c5a      	adds	r2, r3, #1
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	619a      	str	r2, [r3, #24]
                LOG_DEBUG("[LoRa] Send count: %d", ctx->send_count);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	461a      	mov	r2, r3
 8000c52:	498a      	ldr	r1, [pc, #552]	@ (8000e7c <LoraStarter_Process+0x624>)
 8000c54:	2000      	movs	r0, #0
 8000c56:	f004 fdfb 	bl	8005850 <LOGGER_SendFormatted>
            }
            break;
 8000c5a:	e0ed      	b.n	8000e38 <LoraStarter_Process+0x5e0>
        case LORA_STATE_WAIT_SEND_RESPONSE:
            if (uart_rx) {
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f000 80e9 	beq.w	8000e36 <LoraStarter_Process+0x5de>
                ResponseType response_type = ResponseHandler_ParseSendResponse(uart_rx);
 8000c64:	6838      	ldr	r0, [r7, #0]
 8000c66:	f000 fa23 	bl	80010b0 <ResponseHandler_ParseSendResponse>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
                switch(response_type) {
 8000c70:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d019      	beq.n	8000cac <LoraStarter_Process+0x454>
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	dc60      	bgt.n	8000d3e <LoraStarter_Process+0x4e6>
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d002      	beq.n	8000c86 <LoraStarter_Process+0x42e>
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d027      	beq.n	8000cd4 <LoraStarter_Process+0x47c>
 8000c84:	e05b      	b.n	8000d3e <LoraStarter_Process+0x4e6>
                    case RESPONSE_OK:
                        LORA_LOG_SEND_SUCCESS();
 8000c86:	497e      	ldr	r1, [pc, #504]	@ (8000e80 <LoraStarter_Process+0x628>)
 8000c88:	2002      	movs	r0, #2
 8000c8a:	f004 fde1 	bl	8005850 <LOGGER_SendFormatted>
                        // SEND 성공 후 시간 정보 조회를 위해 LTIME 상태로 전환
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	220b      	movs	r2, #11
 8000c92:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 성공 시 에러 카운터 리셋
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2200      	movs	r2, #0
 8000c98:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ca0:	62da      	str	r2, [r3, #44]	@ 0x2c
                        LOG_INFO("[LoRa] SEND successful, requesting current time for logging...");
 8000ca2:	4978      	ldr	r1, [pc, #480]	@ (8000e84 <LoraStarter_Process+0x62c>)
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f004 fdd3 	bl	8005850 <LOGGER_SendFormatted>
                        break;
 8000caa:	e04e      	b.n	8000d4a <LoraStarter_Process+0x4f2>
                    case RESPONSE_TIMEOUT:
                        LOG_WARN("[LoRa] SEND timeout - skipping time query");
 8000cac:	4976      	ldr	r1, [pc, #472]	@ (8000e88 <LoraStarter_Process+0x630>)
 8000cae:	2002      	movs	r0, #2
 8000cb0:	f004 fdce 	bl	8005850 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL; // 타임아웃 시 시간 조회 생략
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	220b      	movs	r2, #11
 8000cb8:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; 
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000cc6:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs();
 8000cc8:	f004 fd28 	bl	800571c <TIME_GetCurrentMs>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	611a      	str	r2, [r3, #16]
                        break;
 8000cd2:	e03a      	b.n	8000d4a <LoraStarter_Process+0x4f2>
                    case RESPONSE_ERROR:
                        LORA_LOG_SEND_FAILED("Network error");
 8000cd4:	4a6d      	ldr	r2, [pc, #436]	@ (8000e8c <LoraStarter_Process+0x634>)
 8000cd6:	496e      	ldr	r1, [pc, #440]	@ (8000e90 <LoraStarter_Process+0x638>)
 8000cd8:	2002      	movs	r0, #2
 8000cda:	f004 fdb9 	bl	8005850 <LOGGER_SendFormatted>
                        ctx->error_count++;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6a1b      	ldr	r3, [r3, #32]
 8000ce2:	1c5a      	adds	r2, r3, #1
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	621a      	str	r2, [r3, #32]
                        LORA_LOG_ERROR_COUNT(ctx->error_count);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6a1b      	ldr	r3, [r3, #32]
 8000cec:	461a      	mov	r2, r3
 8000cee:	4969      	ldr	r1, [pc, #420]	@ (8000e94 <LoraStarter_Process+0x63c>)
 8000cf0:	2002      	movs	r0, #2
 8000cf2:	f004 fdad 	bl	8005850 <LOGGER_SendFormatted>
                        // 무제한 재시도 (max_retry_count가 0이거나 아직 제한에 도달하지 않은 경우)
                        if (ctx->max_retry_count == 0 || ctx->error_count < ctx->max_retry_count) {
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d005      	beq.n	8000d0a <LoraStarter_Process+0x4b2>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6a1a      	ldr	r2, [r3, #32]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d06:	429a      	cmp	r2, r3
 8000d08:	da11      	bge.n	8000d2e <LoraStarter_Process+0x4d6>
                            LORA_LOG_RETRY_ATTEMPT(ctx->error_count, ctx->max_retry_count);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6a1a      	ldr	r2, [r3, #32]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d002      	beq.n	8000d1c <LoraStarter_Process+0x4c4>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d1a:	e000      	b.n	8000d1e <LoraStarter_Process+0x4c6>
 8000d1c:	4b5e      	ldr	r3, [pc, #376]	@ (8000e98 <LoraStarter_Process+0x640>)
 8000d1e:	495f      	ldr	r1, [pc, #380]	@ (8000e9c <LoraStarter_Process+0x644>)
 8000d20:	2002      	movs	r0, #2
 8000d22:	f004 fd95 	bl	8005850 <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_JOIN_RETRY; // JOIN 재시도
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	220c      	movs	r2, #12
 8000d2a:	701a      	strb	r2, [r3, #0]
                        } else {
                            LORA_LOG_MAX_RETRIES_REACHED();
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
                        }
                        break;
 8000d2c:	e00d      	b.n	8000d4a <LoraStarter_Process+0x4f2>
                            LORA_LOG_MAX_RETRIES_REACHED();
 8000d2e:	495c      	ldr	r1, [pc, #368]	@ (8000ea0 <LoraStarter_Process+0x648>)
 8000d30:	2003      	movs	r0, #3
 8000d32:	f004 fd8d 	bl	8005850 <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	220e      	movs	r2, #14
 8000d3a:	701a      	strb	r2, [r3, #0]
                        break;
 8000d3c:	e005      	b.n	8000d4a <LoraStarter_Process+0x4f2>
                    default:
                        // 알 수 없는 응답은 무시하고 계속 대기
                        LOG_DEBUG("[LoRa] Unknown response: %s", uart_rx);
 8000d3e:	683a      	ldr	r2, [r7, #0]
 8000d40:	4958      	ldr	r1, [pc, #352]	@ (8000ea4 <LoraStarter_Process+0x64c>)
 8000d42:	2000      	movs	r0, #0
 8000d44:	f004 fd84 	bl	8005850 <LOGGER_SendFormatted>
                        break;
 8000d48:	bf00      	nop
                }
            }
            break;
 8000d4a:	e074      	b.n	8000e36 <LoraStarter_Process+0x5de>
        case LORA_STATE_WAIT_SEND_INTERVAL:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000d4c:	f004 fce6 	bl	800571c <TIME_GetCurrentMs>
 8000d50:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
                uint32_t interval_ms = (ctx->send_interval_ms > 0) ? ctx->send_interval_ms : 30000; // 기본값 30초
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	695b      	ldr	r3, [r3, #20]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d002      	beq.n	8000d62 <LoraStarter_Process+0x50a>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	695b      	ldr	r3, [r3, #20]
 8000d60:	e001      	b.n	8000d66 <LoraStarter_Process+0x50e>
 8000d62:	f247 5330 	movw	r3, #30000	@ 0x7530
 8000d66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                
                if ((current_time - ctx->last_send_time) >= interval_ms) {
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	691b      	ldr	r3, [r3, #16]
 8000d6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d809      	bhi.n	8000d90 <LoraStarter_Process+0x538>
                    LOG_DEBUG("[LoRa] Send interval passed (%u ms), requesting time before next send", interval_ms);
 8000d7c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000d80:	4949      	ldr	r1, [pc, #292]	@ (8000ea8 <LoraStarter_Process+0x650>)
 8000d82:	2000      	movs	r0, #0
 8000d84:	f004 fd64 	bl	8005850 <LOGGER_SendFormatted>
                    // 주기적 전송 시 시간 조회 먼저 실행
                    ctx->state = LORA_STATE_SEND_LTIME;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2207      	movs	r2, #7
 8000d8c:	701a      	strb	r2, [r3, #0]
                    // 아직 대기 시간이 남았으므로 상태 유지
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
                }
            }
            break;
 8000d8e:	e053      	b.n	8000e38 <LoraStarter_Process+0x5e0>
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	691a      	ldr	r2, [r3, #16]
 8000d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000d9e:	4413      	add	r3, r2
 8000da0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
 8000da4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000da8:	4940      	ldr	r1, [pc, #256]	@ (8000eac <LoraStarter_Process+0x654>)
 8000daa:	2000      	movs	r0, #0
 8000dac:	f004 fd50 	bl	8005850 <LOGGER_SendFormatted>
            break;
 8000db0:	e042      	b.n	8000e38 <LoraStarter_Process+0x5e0>
        case LORA_STATE_JOIN_RETRY:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000db2:	f004 fcb3 	bl	800571c <TIME_GetCurrentMs>
 8000db6:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
                
                if (ctx->last_retry_time == 0) {
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d10b      	bne.n	8000dda <LoraStarter_Process+0x582>
                    // 첫 재시도: 바로 SEND_JOIN
                    LOG_DEBUG("[LoRa] First JOIN retry");
 8000dc2:	493b      	ldr	r1, [pc, #236]	@ (8000eb0 <LoraStarter_Process+0x658>)
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f004 fd43 	bl	8005850 <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000dd0:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	701a      	strb	r2, [r3, #0]
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
                             ctx->retry_delay_ms - (current_time - ctx->last_retry_time));
                    // 아무것도 하지 않음
                }
            }
            break;
 8000dd8:	e02e      	b.n	8000e38 <LoraStarter_Process+0x5e0>
                } else if ((current_time - ctx->last_retry_time) >= ctx->retry_delay_ms) {
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dde:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000de2:	1ad2      	subs	r2, r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d30e      	bcc.n	8000e0a <LoraStarter_Process+0x5b2>
                    LOG_DEBUG("[LoRa] JOIN retry after %lu ms delay", ctx->retry_delay_ms);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000df0:	461a      	mov	r2, r3
 8000df2:	4930      	ldr	r1, [pc, #192]	@ (8000eb4 <LoraStarter_Process+0x65c>)
 8000df4:	2000      	movs	r0, #0
 8000df6:	f004 fd2b 	bl	8005850 <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000e00:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2203      	movs	r2, #3
 8000e06:	701a      	strb	r2, [r3, #0]
            break;
 8000e08:	e016      	b.n	8000e38 <LoraStarter_Process+0x5e0>
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000e16:	1acb      	subs	r3, r1, r3
 8000e18:	4413      	add	r3, r2
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	4926      	ldr	r1, [pc, #152]	@ (8000eb8 <LoraStarter_Process+0x660>)
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f004 fd16 	bl	8005850 <LOGGER_SendFormatted>
            break;
 8000e24:	e008      	b.n	8000e38 <LoraStarter_Process+0x5e0>
        case LORA_STATE_DONE:
        case LORA_STATE_ERROR:
        default:
            // 이미 완료된 상태이므로 아무것도 하지 않음
            break;
 8000e26:	bf00      	nop
 8000e28:	e006      	b.n	8000e38 <LoraStarter_Process+0x5e0>
            break;
 8000e2a:	bf00      	nop
 8000e2c:	e004      	b.n	8000e38 <LoraStarter_Process+0x5e0>
            break;
 8000e2e:	bf00      	nop
 8000e30:	e002      	b.n	8000e38 <LoraStarter_Process+0x5e0>
            break;
 8000e32:	bf00      	nop
 8000e34:	e000      	b.n	8000e38 <LoraStarter_Process+0x5e0>
            break;
 8000e36:	bf00      	nop
    }

    // 상태 변경 로깅
    if (old_state != ctx->state) {
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	f897 20eb 	ldrb.w	r2, [r7, #235]	@ 0xeb
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d012      	beq.n	8000e6a <LoraStarter_Process+0x612>
        LORA_LOG_STATE_CHANGE(get_state_name(old_state), get_state_name(ctx->state));
 8000e44:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fc4d 	bl	80006e8 <get_state_name>
 8000e4e:	4604      	mov	r4, r0
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fc47 	bl	80006e8 <get_state_name>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	4622      	mov	r2, r4
 8000e5e:	4917      	ldr	r1, [pc, #92]	@ (8000ebc <LoraStarter_Process+0x664>)
 8000e60:	2000      	movs	r0, #0
 8000e62:	f004 fcf5 	bl	8005850 <LOGGER_SendFormatted>
 8000e66:	e000      	b.n	8000e6a <LoraStarter_Process+0x612>
    if (ctx == NULL) return;
 8000e68:	bf00      	nop
    }
}
 8000e6a:	37f4      	adds	r7, #244	@ 0xf4
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd90      	pop	{r4, r7, pc}
 8000e70:	08019a1c 	.word	0x08019a1c
 8000e74:	08019a24 	.word	0x08019a24
 8000e78:	08019a34 	.word	0x08019a34
 8000e7c:	08019a54 	.word	0x08019a54
 8000e80:	08019a6c 	.word	0x08019a6c
 8000e84:	08019a88 	.word	0x08019a88
 8000e88:	08019ac8 	.word	0x08019ac8
 8000e8c:	08019af4 	.word	0x08019af4
 8000e90:	08019b04 	.word	0x08019b04
 8000e94:	08019b1c 	.word	0x08019b1c
 8000e98:	08019b34 	.word	0x08019b34
 8000e9c:	08019b38 	.word	0x08019b38
 8000ea0:	08019b54 	.word	0x08019b54
 8000ea4:	08019b78 	.word	0x08019b78
 8000ea8:	08019b94 	.word	0x08019b94
 8000eac:	08019bdc 	.word	0x08019bdc
 8000eb0:	08019c10 	.word	0x08019c10
 8000eb4:	08019c28 	.word	0x08019c28
 8000eb8:	08019c50 	.word	0x08019c50
 8000ebc:	08019c84 	.word	0x08019c84

08000ec0 <is_response_ok>:
// 전역 변수: 네트워크에서 수신한 시간 정보 저장
static char g_network_time[64] = {0};
static bool g_time_synchronized = false;

bool is_response_ok(const char* response)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d105      	bne.n	8000eda <is_response_ok+0x1a>
        LOG_DEBUG("[ResponseHandler] is_response_ok: NULL response");
 8000ece:	4925      	ldr	r1, [pc, #148]	@ (8000f64 <is_response_ok+0xa4>)
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f004 fcbd 	bl	8005850 <LOGGER_SendFormatted>
        return false;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	e03f      	b.n	8000f5a <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking OK response: '%s'", response);
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	4922      	ldr	r1, [pc, #136]	@ (8000f68 <is_response_ok+0xa8>)
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f004 fcb6 	bl	8005850 <LOGGER_SendFormatted>
    
    // OK 또는 OK\r\n, OK\n 등 허용
    if (strcmp(response, "OK") == 0) {
 8000ee4:	4921      	ldr	r1, [pc, #132]	@ (8000f6c <is_response_ok+0xac>)
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff f992 	bl	8000210 <strcmp>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d105      	bne.n	8000efe <is_response_ok+0x3e>
        LOG_DEBUG("[ResponseHandler] OK response confirmed");
 8000ef2:	491f      	ldr	r1, [pc, #124]	@ (8000f70 <is_response_ok+0xb0>)
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f004 fcab 	bl	8005850 <LOGGER_SendFormatted>
        return true;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e02d      	b.n	8000f5a <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\r\n") == 0) {
 8000efe:	491d      	ldr	r1, [pc, #116]	@ (8000f74 <is_response_ok+0xb4>)
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff f985 	bl	8000210 <strcmp>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d105      	bne.n	8000f18 <is_response_ok+0x58>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with CRLF)");
 8000f0c:	491a      	ldr	r1, [pc, #104]	@ (8000f78 <is_response_ok+0xb8>)
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f004 fc9e 	bl	8005850 <LOGGER_SendFormatted>
        return true;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e020      	b.n	8000f5a <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\n") == 0) {
 8000f18:	4918      	ldr	r1, [pc, #96]	@ (8000f7c <is_response_ok+0xbc>)
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff f978 	bl	8000210 <strcmp>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d105      	bne.n	8000f32 <is_response_ok+0x72>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with LF)");
 8000f26:	4916      	ldr	r1, [pc, #88]	@ (8000f80 <is_response_ok+0xc0>)
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f004 fc91 	bl	8005850 <LOGGER_SendFormatted>
        return true;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e013      	b.n	8000f5a <is_response_ok+0x9a>
    }
    
    // AT+VER 버전 응답도 성공으로 간주 (RUI_로 시작하는 응답)
    if (strstr(response, "RUI_") != NULL) {
 8000f32:	4914      	ldr	r1, [pc, #80]	@ (8000f84 <is_response_ok+0xc4>)
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f016 fecd 	bl	8017cd4 <strstr>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d006      	beq.n	8000f4e <is_response_ok+0x8e>
        LOG_DEBUG("[ResponseHandler] Version response confirmed: %s", response);
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	4911      	ldr	r1, [pc, #68]	@ (8000f88 <is_response_ok+0xc8>)
 8000f44:	2000      	movs	r0, #0
 8000f46:	f004 fc83 	bl	8005850 <LOGGER_SendFormatted>
        return true;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e005      	b.n	8000f5a <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Not an OK response: '%s'", response);
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	490e      	ldr	r1, [pc, #56]	@ (8000f8c <is_response_ok+0xcc>)
 8000f52:	2000      	movs	r0, #0
 8000f54:	f004 fc7c 	bl	8005850 <LOGGER_SendFormatted>
    return false;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	08019ca4 	.word	0x08019ca4
 8000f68:	08019cd4 	.word	0x08019cd4
 8000f6c:	08019d04 	.word	0x08019d04
 8000f70:	08019d08 	.word	0x08019d08
 8000f74:	08019d30 	.word	0x08019d30
 8000f78:	08019d38 	.word	0x08019d38
 8000f7c:	08019d6c 	.word	0x08019d6c
 8000f80:	08019d70 	.word	0x08019d70
 8000f84:	08019da4 	.word	0x08019da4
 8000f88:	08019dac 	.word	0x08019dac
 8000f8c:	08019de0 	.word	0x08019de0

08000f90 <is_join_response_ok>:

bool is_join_response_ok(const char* response)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f9c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000fa0:	6018      	str	r0, [r3, #0]
    if (response == NULL) {
 8000fa2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000fa6:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d105      	bne.n	8000fbc <is_join_response_ok+0x2c>
        LOG_DEBUG("[ResponseHandler] is_join_response_ok: NULL response");
 8000fb0:	4938      	ldr	r1, [pc, #224]	@ (8001094 <is_join_response_ok+0x104>)
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f004 fc4c 	bl	8005850 <LOGGER_SendFormatted>
        return false;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	e066      	b.n	800108a <is_join_response_ok+0xfa>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking JOIN response: '%s'", response);
 8000fbc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000fc0:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	4934      	ldr	r1, [pc, #208]	@ (8001098 <is_join_response_ok+0x108>)
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f004 fc41 	bl	8005850 <LOGGER_SendFormatted>
    
    // 개행 문자 제거하여 비교
    char clean_response[512];
    strncpy(clean_response, response, sizeof(clean_response) - 1);
 8000fce:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000fd2:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000fd6:	f107 0008 	add.w	r0, r7, #8
 8000fda:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8000fde:	6819      	ldr	r1, [r3, #0]
 8000fe0:	f016 fe65 	bl	8017cae <strncpy>
    clean_response[sizeof(clean_response) - 1] = '\0';
 8000fe4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000fe8:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
    
    // 개행 문자 제거
    char* pos = clean_response;
 8000ff2:	f107 0308 	add.w	r3, r7, #8
 8000ff6:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8000ffa:	e013      	b.n	8001024 <is_join_response_ok+0x94>
        if (*pos == '\r' || *pos == '\n') {
 8000ffc:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b0d      	cmp	r3, #13
 8001004:	d004      	beq.n	8001010 <is_join_response_ok+0x80>
 8001006:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b0a      	cmp	r3, #10
 800100e:	d104      	bne.n	800101a <is_join_response_ok+0x8a>
            *pos = '\0';
 8001010:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
            break;
 8001018:	e009      	b.n	800102e <is_join_response_ok+0x9e>
        }
        pos++;
 800101a:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800101e:	3301      	adds	r3, #1
 8001020:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8001024:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1e6      	bne.n	8000ffc <is_join_response_ok+0x6c>
    }
    
    bool result = (strcmp(clean_response, "+EVT:JOINED") == 0);
 800102e:	f107 0308 	add.w	r3, r7, #8
 8001032:	491a      	ldr	r1, [pc, #104]	@ (800109c <is_join_response_ok+0x10c>)
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff f8eb 	bl	8000210 <strcmp>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	bf0c      	ite	eq
 8001040:	2301      	moveq	r3, #1
 8001042:	2300      	movne	r3, #0
 8001044:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
    
    if (result) {
 8001048:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 800104c:	2b00      	cmp	r3, #0
 800104e:	d011      	beq.n	8001074 <is_join_response_ok+0xe4>
        LOG_WARN("[ResponseHandler] ✅ JOIN SUCCESS: %s", response);
 8001050:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001054:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	4911      	ldr	r1, [pc, #68]	@ (80010a0 <is_join_response_ok+0x110>)
 800105c:	2002      	movs	r0, #2
 800105e:	f004 fbf7 	bl	8005850 <LOGGER_SendFormatted>
        LOG_WARN("[LoRa] 🌐 Network joined successfully - SD logging active");
 8001062:	4910      	ldr	r1, [pc, #64]	@ (80010a4 <is_join_response_ok+0x114>)
 8001064:	2002      	movs	r0, #2
 8001066:	f004 fbf3 	bl	8005850 <LOGGER_SendFormatted>
        
        // JOIN 성공 후 시간 조회 요청 (네트워크 동기화 대기 후)
        LOG_INFO("[ResponseHandler] Requesting network time after JOIN success...");
 800106a:	490f      	ldr	r1, [pc, #60]	@ (80010a8 <is_join_response_ok+0x118>)
 800106c:	2001      	movs	r0, #1
 800106e:	f004 fbef 	bl	8005850 <LOGGER_SendFormatted>
 8001072:	e008      	b.n	8001086 <is_join_response_ok+0xf6>
        // 짧은 대기 후 시간 조회 (메인 루프에서 처리될 예정)
    } else {
        LOG_DEBUG("[ResponseHandler] Not a JOIN response: '%s'", response);
 8001074:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001078:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	490b      	ldr	r1, [pc, #44]	@ (80010ac <is_join_response_ok+0x11c>)
 8001080:	2000      	movs	r0, #0
 8001082:	f004 fbe5 	bl	8005850 <LOGGER_SendFormatted>
    }
    
    return result;
 8001086:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
}
 800108a:	4618      	mov	r0, r3
 800108c:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	08019e0c 	.word	0x08019e0c
 8001098:	08019e44 	.word	0x08019e44
 800109c:	08019e74 	.word	0x08019e74
 80010a0:	08019e80 	.word	0x08019e80
 80010a4:	08019ea8 	.word	0x08019ea8
 80010a8:	08019ee4 	.word	0x08019ee4
 80010ac:	08019f24 	.word	0x08019f24

080010b0 <ResponseHandler_ParseSendResponse>:

ResponseType ResponseHandler_ParseSendResponse(const char* response)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d105      	bne.n	80010ca <ResponseHandler_ParseSendResponse+0x1a>
        LOG_DEBUG("[ResponseHandler] ParseSendResponse: NULL response");
 80010be:	491e      	ldr	r1, [pc, #120]	@ (8001138 <ResponseHandler_ParseSendResponse+0x88>)
 80010c0:	2000      	movs	r0, #0
 80010c2:	f004 fbc5 	bl	8005850 <LOGGER_SendFormatted>
        return RESPONSE_UNKNOWN;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e031      	b.n	800112e <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Parsing SEND response: '%s'", response);
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	491b      	ldr	r1, [pc, #108]	@ (800113c <ResponseHandler_ParseSendResponse+0x8c>)
 80010ce:	2000      	movs	r0, #0
 80010d0:	f004 fbbe 	bl	8005850 <LOGGER_SendFormatted>
    
    if (strstr(response, "+EVT:SEND_CONFIRMED_OK") != NULL) {
 80010d4:	491a      	ldr	r1, [pc, #104]	@ (8001140 <ResponseHandler_ParseSendResponse+0x90>)
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f016 fdfc 	bl	8017cd4 <strstr>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d005      	beq.n	80010ee <ResponseHandler_ParseSendResponse+0x3e>
        LOG_WARN("[ResponseHandler] ✅ SEND SUCCESS: CONFIRMED_OK");
 80010e2:	4918      	ldr	r1, [pc, #96]	@ (8001144 <ResponseHandler_ParseSendResponse+0x94>)
 80010e4:	2002      	movs	r0, #2
 80010e6:	f004 fbb3 	bl	8005850 <LOGGER_SendFormatted>
        return RESPONSE_OK;
 80010ea:	2300      	movs	r3, #0
 80010ec:	e01f      	b.n	800112e <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strstr(response, "+EVT:SEND_CONFIRMED_FAILED") != NULL) {
 80010ee:	4916      	ldr	r1, [pc, #88]	@ (8001148 <ResponseHandler_ParseSendResponse+0x98>)
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f016 fdef 	bl	8017cd4 <strstr>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d005      	beq.n	8001108 <ResponseHandler_ParseSendResponse+0x58>
        LOG_WARN("[ResponseHandler] SEND response: CONFIRMED_FAILED");
 80010fc:	4913      	ldr	r1, [pc, #76]	@ (800114c <ResponseHandler_ParseSendResponse+0x9c>)
 80010fe:	2002      	movs	r0, #2
 8001100:	f004 fba6 	bl	8005850 <LOGGER_SendFormatted>
        return RESPONSE_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e012      	b.n	800112e <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strcmp(response, "TIMEOUT") == 0) {
 8001108:	4911      	ldr	r1, [pc, #68]	@ (8001150 <ResponseHandler_ParseSendResponse+0xa0>)
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff f880 	bl	8000210 <strcmp>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d105      	bne.n	8001122 <ResponseHandler_ParseSendResponse+0x72>
        LOG_WARN("[ResponseHandler] SEND response: TIMEOUT");
 8001116:	490f      	ldr	r1, [pc, #60]	@ (8001154 <ResponseHandler_ParseSendResponse+0xa4>)
 8001118:	2002      	movs	r0, #2
 800111a:	f004 fb99 	bl	8005850 <LOGGER_SendFormatted>
        return RESPONSE_TIMEOUT;
 800111e:	2302      	movs	r3, #2
 8001120:	e005      	b.n	800112e <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Unknown SEND response: '%s'", response);
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	490c      	ldr	r1, [pc, #48]	@ (8001158 <ResponseHandler_ParseSendResponse+0xa8>)
 8001126:	2000      	movs	r0, #0
 8001128:	f004 fb92 	bl	8005850 <LOGGER_SendFormatted>
    return RESPONSE_UNKNOWN;
 800112c:	2303      	movs	r3, #3
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	08019f50 	.word	0x08019f50
 800113c:	08019f84 	.word	0x08019f84
 8001140:	08019fb4 	.word	0x08019fb4
 8001144:	08019fcc 	.word	0x08019fcc
 8001148:	0801a000 	.word	0x0801a000
 800114c:	0801a01c 	.word	0x0801a01c
 8001150:	0801a050 	.word	0x0801a050
 8001154:	0801a058 	.word	0x0801a058
 8001158:	0801a084 	.word	0x0801a084

0800115c <ResponseHandler_IsTimeResponse>:

// 시간 응답 확인 함수
bool ResponseHandler_IsTimeResponse(const char* response)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d101      	bne.n	800116e <ResponseHandler_IsTimeResponse+0x12>
        return false;
 800116a:	2300      	movs	r3, #0
 800116c:	e013      	b.n	8001196 <ResponseHandler_IsTimeResponse+0x3a>
    }
    
    return (strstr(response, "LTIME:") != NULL || strstr(response, "LTIME=") != NULL);
 800116e:	490c      	ldr	r1, [pc, #48]	@ (80011a0 <ResponseHandler_IsTimeResponse+0x44>)
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f016 fdaf 	bl	8017cd4 <strstr>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d106      	bne.n	800118a <ResponseHandler_IsTimeResponse+0x2e>
 800117c:	4909      	ldr	r1, [pc, #36]	@ (80011a4 <ResponseHandler_IsTimeResponse+0x48>)
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f016 fda8 	bl	8017cd4 <strstr>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <ResponseHandler_IsTimeResponse+0x32>
 800118a:	2301      	movs	r3, #1
 800118c:	e000      	b.n	8001190 <ResponseHandler_IsTimeResponse+0x34>
 800118e:	2300      	movs	r3, #0
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	b2db      	uxtb	r3, r3
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	0801a0b4 	.word	0x0801a0b4
 80011a4:	0801a0bc 	.word	0x0801a0bc

080011a8 <ConvertUTCToKST>:

// 한국 시간대(UTC+9) 보정 함수
static void ConvertUTCToKST(char* time_str) {
 80011a8:	b5b0      	push	{r4, r5, r7, lr}
 80011aa:	b09a      	sub	sp, #104	@ 0x68
 80011ac:	af06      	add	r7, sp, #24
 80011ae:	6078      	str	r0, [r7, #4]
    int hour, min, sec, month, day, year;
    
    // "01h51m37s on 07/29/2025" 형식에서 시간 추출
    if (sscanf(time_str, "%dh%dm%ds on %d/%d/%d", 
 80011b0:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80011b4:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80011b8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011bc:	9303      	str	r3, [sp, #12]
 80011be:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80011c2:	9302      	str	r3, [sp, #8]
 80011c4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	460b      	mov	r3, r1
 80011d2:	4936      	ldr	r1, [pc, #216]	@ (80012ac <ConvertUTCToKST+0x104>)
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f016 fca7 	bl	8017b28 <siscanf>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b06      	cmp	r3, #6
 80011de:	d161      	bne.n	80012a4 <ConvertUTCToKST+0xfc>
               &hour, &min, &sec, &month, &day, &year) == 6) {
        
        // 한국 시간대로 보정 (UTC+9)
        hour += 9;
 80011e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011e2:	3309      	adds	r3, #9
 80011e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
        
        // 날짜 넘어가는 경우 처리
        if (hour >= 24) {
 80011e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011e8:	2b17      	cmp	r3, #23
 80011ea:	dd4a      	ble.n	8001282 <ConvertUTCToKST+0xda>
            hour -= 24;
 80011ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011ee:	3b18      	subs	r3, #24
 80011f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
            day += 1;
 80011f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011f4:	3301      	adds	r3, #1
 80011f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            
            // 월말 처리 (간단한 버전)
            int days_in_month[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 80011f8:	4b2d      	ldr	r3, [pc, #180]	@ (80012b0 <ConvertUTCToKST+0x108>)
 80011fa:	f107 0408 	add.w	r4, r7, #8
 80011fe:	461d      	mov	r5, r3
 8001200:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001204:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001208:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800120c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)) {
 8001210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d11c      	bne.n	8001254 <ConvertUTCToKST+0xac>
 800121a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800121c:	4b25      	ldr	r3, [pc, #148]	@ (80012b4 <ConvertUTCToKST+0x10c>)
 800121e:	fb83 1302 	smull	r1, r3, r3, r2
 8001222:	1159      	asrs	r1, r3, #5
 8001224:	17d3      	asrs	r3, r2, #31
 8001226:	1acb      	subs	r3, r1, r3
 8001228:	2164      	movs	r1, #100	@ 0x64
 800122a:	fb01 f303 	mul.w	r3, r1, r3
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b00      	cmp	r3, #0
 8001232:	d10d      	bne.n	8001250 <ConvertUTCToKST+0xa8>
 8001234:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001236:	4b1f      	ldr	r3, [pc, #124]	@ (80012b4 <ConvertUTCToKST+0x10c>)
 8001238:	fb83 1302 	smull	r1, r3, r3, r2
 800123c:	11d9      	asrs	r1, r3, #7
 800123e:	17d3      	asrs	r3, r2, #31
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8001246:	fb01 f303 	mul.w	r3, r1, r3
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b00      	cmp	r3, #0
 800124e:	d101      	bne.n	8001254 <ConvertUTCToKST+0xac>
                days_in_month[1] = 29; // 윤년
 8001250:	231d      	movs	r3, #29
 8001252:	60fb      	str	r3, [r7, #12]
            }
            
            if (day > days_in_month[month - 1]) {
 8001254:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001256:	3b01      	subs	r3, #1
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	3350      	adds	r3, #80	@ 0x50
 800125c:	443b      	add	r3, r7
 800125e:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8001262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001264:	429a      	cmp	r2, r3
 8001266:	da0c      	bge.n	8001282 <ConvertUTCToKST+0xda>
                day = 1;
 8001268:	2301      	movs	r3, #1
 800126a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                month += 1;
 800126c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800126e:	3301      	adds	r3, #1
 8001270:	643b      	str	r3, [r7, #64]	@ 0x40
                if (month > 12) {
 8001272:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001274:	2b0c      	cmp	r3, #12
 8001276:	dd04      	ble.n	8001282 <ConvertUTCToKST+0xda>
                    month = 1;
 8001278:	2301      	movs	r3, #1
 800127a:	643b      	str	r3, [r7, #64]	@ 0x40
                    year += 1;
 800127c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800127e:	3301      	adds	r3, #1
 8001280:	63bb      	str	r3, [r7, #56]	@ 0x38
                }
            }
        }
        
        // 한국 시간으로 수정된 시간 문자열 재구성
        snprintf(time_str, 64, "%02dh%02dm%02ds on %02d/%02d/%d (KST)", 
 8001282:	6cfd      	ldr	r5, [r7, #76]	@ 0x4c
 8001284:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001286:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001288:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800128a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800128c:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 800128e:	9404      	str	r4, [sp, #16]
 8001290:	9003      	str	r0, [sp, #12]
 8001292:	9102      	str	r1, [sp, #8]
 8001294:	9201      	str	r2, [sp, #4]
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	462b      	mov	r3, r5
 800129a:	4a07      	ldr	r2, [pc, #28]	@ (80012b8 <ConvertUTCToKST+0x110>)
 800129c:	2140      	movs	r1, #64	@ 0x40
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f016 fbea 	bl	8017a78 <sniprintf>
                 hour, min, sec, month, day, year);
    }
}
 80012a4:	bf00      	nop
 80012a6:	3750      	adds	r7, #80	@ 0x50
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bdb0      	pop	{r4, r5, r7, pc}
 80012ac:	0801a0c4 	.word	0x0801a0c4
 80012b0:	0801a104 	.word	0x0801a104
 80012b4:	51eb851f 	.word	0x51eb851f
 80012b8:	0801a0dc 	.word	0x0801a0dc

080012bc <ResponseHandler_ParseTimeResponse>:

// 시간 응답 파싱 및 저장 함수
void ResponseHandler_ParseTimeResponse(const char* response)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
    if (response == NULL || !ResponseHandler_IsTimeResponse(response)) {
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d05f      	beq.n	800138a <ResponseHandler_ParseTimeResponse+0xce>
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ff46 	bl	800115c <ResponseHandler_IsTimeResponse>
 80012d0:	4603      	mov	r3, r0
 80012d2:	f083 0301 	eor.w	r3, r3, #1
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d156      	bne.n	800138a <ResponseHandler_ParseTimeResponse+0xce>
        return;
    }
    
    LOG_DEBUG("[ResponseHandler] Parsing time response: '%s'", response);
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	492d      	ldr	r1, [pc, #180]	@ (8001394 <ResponseHandler_ParseTimeResponse+0xd8>)
 80012e0:	2000      	movs	r0, #0
 80012e2:	f004 fab5 	bl	8005850 <LOGGER_SendFormatted>
    
    // LTIME 응답에서 시간 정보 추출 (LTIME: 또는 LTIME= 형식 모두 지원)
    const char* time_start = strstr(response, "LTIME:");
 80012e6:	492c      	ldr	r1, [pc, #176]	@ (8001398 <ResponseHandler_ParseTimeResponse+0xdc>)
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f016 fcf3 	bl	8017cd4 <strstr>
 80012ee:	60f8      	str	r0, [r7, #12]
    if (time_start != NULL) {
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <ResponseHandler_ParseTimeResponse+0x42>
        // "LTIME: 14h25m30s on 01/29/2025" 형태에서 시간 부분 추출
        time_start += 6; // "LTIME:" 부분 건너뛰기
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	3306      	adds	r3, #6
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	e00a      	b.n	8001314 <ResponseHandler_ParseTimeResponse+0x58>
    } else {
        time_start = strstr(response, "LTIME=");
 80012fe:	4927      	ldr	r1, [pc, #156]	@ (800139c <ResponseHandler_ParseTimeResponse+0xe0>)
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f016 fce7 	bl	8017cd4 <strstr>
 8001306:	60f8      	str	r0, [r7, #12]
        if (time_start != NULL) {
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d002      	beq.n	8001314 <ResponseHandler_ParseTimeResponse+0x58>
            // "AT+LTIME=00h00m28s on 01/01/19" 형태에서 시간 부분 추출
            time_start += 6; // "LTIME=" 부분 건너뛰기
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	3306      	adds	r3, #6
 8001312:	60fb      	str	r3, [r7, #12]
        }
    }
    
    if (time_start != NULL) {
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d038      	beq.n	800138c <ResponseHandler_ParseTimeResponse+0xd0>
        
        // 앞쪽 공백 제거
        while (*time_start == ' ') {
 800131a:	e002      	b.n	8001322 <ResponseHandler_ParseTimeResponse+0x66>
            time_start++;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	3301      	adds	r3, #1
 8001320:	60fb      	str	r3, [r7, #12]
        while (*time_start == ' ') {
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b20      	cmp	r3, #32
 8001328:	d0f8      	beq.n	800131c <ResponseHandler_ParseTimeResponse+0x60>
        }
        
        // 전역 변수에 시간 정보 저장 (개행 문자 제거)
        strncpy(g_network_time, time_start, sizeof(g_network_time) - 1);
 800132a:	223f      	movs	r2, #63	@ 0x3f
 800132c:	68f9      	ldr	r1, [r7, #12]
 800132e:	481c      	ldr	r0, [pc, #112]	@ (80013a0 <ResponseHandler_ParseTimeResponse+0xe4>)
 8001330:	f016 fcbd 	bl	8017cae <strncpy>
        g_network_time[sizeof(g_network_time) - 1] = '\0';
 8001334:	4b1a      	ldr	r3, [pc, #104]	@ (80013a0 <ResponseHandler_ParseTimeResponse+0xe4>)
 8001336:	2200      	movs	r2, #0
 8001338:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
        
        // 개행 문자 제거
        char* newline = strchr(g_network_time, '\r');
 800133c:	210d      	movs	r1, #13
 800133e:	4818      	ldr	r0, [pc, #96]	@ (80013a0 <ResponseHandler_ParseTimeResponse+0xe4>)
 8001340:	f016 fca8 	bl	8017c94 <strchr>
 8001344:	60b8      	str	r0, [r7, #8]
        if (newline) *newline = '\0';
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d002      	beq.n	8001352 <ResponseHandler_ParseTimeResponse+0x96>
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	2200      	movs	r2, #0
 8001350:	701a      	strb	r2, [r3, #0]
        newline = strchr(g_network_time, '\n');
 8001352:	210a      	movs	r1, #10
 8001354:	4812      	ldr	r0, [pc, #72]	@ (80013a0 <ResponseHandler_ParseTimeResponse+0xe4>)
 8001356:	f016 fc9d 	bl	8017c94 <strchr>
 800135a:	60b8      	str	r0, [r7, #8]
        if (newline) *newline = '\0';
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d002      	beq.n	8001368 <ResponseHandler_ParseTimeResponse+0xac>
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]
        
        // 한국 시간대로 보정
        ConvertUTCToKST(g_network_time);
 8001368:	480d      	ldr	r0, [pc, #52]	@ (80013a0 <ResponseHandler_ParseTimeResponse+0xe4>)
 800136a:	f7ff ff1d 	bl	80011a8 <ConvertUTCToKST>
        
        g_time_synchronized = true;
 800136e:	4b0d      	ldr	r3, [pc, #52]	@ (80013a4 <ResponseHandler_ParseTimeResponse+0xe8>)
 8001370:	2201      	movs	r2, #1
 8001372:	701a      	strb	r2, [r3, #0]
        
        LOG_WARN("[LoRa] 🕐 Network time synchronized (KST): %s", g_network_time);
 8001374:	4a0a      	ldr	r2, [pc, #40]	@ (80013a0 <ResponseHandler_ParseTimeResponse+0xe4>)
 8001376:	490c      	ldr	r1, [pc, #48]	@ (80013a8 <ResponseHandler_ParseTimeResponse+0xec>)
 8001378:	2002      	movs	r0, #2
 800137a:	f004 fa69 	bl	8005850 <LOGGER_SendFormatted>
        LOG_WARN("[TIMESTAMP] Korean time: %s", g_network_time);
 800137e:	4a08      	ldr	r2, [pc, #32]	@ (80013a0 <ResponseHandler_ParseTimeResponse+0xe4>)
 8001380:	490a      	ldr	r1, [pc, #40]	@ (80013ac <ResponseHandler_ParseTimeResponse+0xf0>)
 8001382:	2002      	movs	r0, #2
 8001384:	f004 fa64 	bl	8005850 <LOGGER_SendFormatted>
 8001388:	e000      	b.n	800138c <ResponseHandler_ParseTimeResponse+0xd0>
        return;
 800138a:	bf00      	nop
    }
}
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	0801a134 	.word	0x0801a134
 8001398:	0801a0b4 	.word	0x0801a0b4
 800139c:	0801a0bc 	.word	0x0801a0bc
 80013a0:	2000023c 	.word	0x2000023c
 80013a4:	2000027c 	.word	0x2000027c
 80013a8:	0801a164 	.word	0x0801a164
 80013ac:	0801a194 	.word	0x0801a194

080013b0 <ResponseHandler_GetNetworkTime>:

// 현재 저장된 네트워크 시간 반환
const char* ResponseHandler_GetNetworkTime(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
    if (g_time_synchronized) {
 80013b4:	4b05      	ldr	r3, [pc, #20]	@ (80013cc <ResponseHandler_GetNetworkTime+0x1c>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <ResponseHandler_GetNetworkTime+0x10>
        return g_network_time;
 80013bc:	4b04      	ldr	r3, [pc, #16]	@ (80013d0 <ResponseHandler_GetNetworkTime+0x20>)
 80013be:	e000      	b.n	80013c2 <ResponseHandler_GetNetworkTime+0x12>
    }
    return NULL;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	2000027c 	.word	0x2000027c
 80013d0:	2000023c 	.word	0x2000023c

080013d4 <ResponseHandler_IsTimeSynchronized>:

// 시간 동기화 상태 확인
bool ResponseHandler_IsTimeSynchronized(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
    return g_time_synchronized;
 80013d8:	4b03      	ldr	r3, [pc, #12]	@ (80013e8 <ResponseHandler_IsTimeSynchronized+0x14>)
 80013da:	781b      	ldrb	r3, [r3, #0]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	2000027c 	.word	0x2000027c

080013ec <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80013f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001460 <SCB_CleanInvalidateDCache+0x74>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013fa:	f3bf 8f4f 	dsb	sy
}
 80013fe:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001400:	4b17      	ldr	r3, [pc, #92]	@ (8001460 <SCB_CleanInvalidateDCache+0x74>)
 8001402:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001406:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	0b5b      	lsrs	r3, r3, #13
 800140c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001410:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	08db      	lsrs	r3, r3, #3
 8001416:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800141a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	015a      	lsls	r2, r3, #5
 8001420:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001424:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800142a:	490d      	ldr	r1, [pc, #52]	@ (8001460 <SCB_CleanInvalidateDCache+0x74>)
 800142c:	4313      	orrs	r3, r2
 800142e:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	1e5a      	subs	r2, r3, #1
 8001436:	60ba      	str	r2, [r7, #8]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1ef      	bne.n	800141c <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	1e5a      	subs	r2, r3, #1
 8001440:	60fa      	str	r2, [r7, #12]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1e5      	bne.n	8001412 <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001446:	f3bf 8f4f 	dsb	sy
}
 800144a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800144c:	f3bf 8f6f 	isb	sy
}
 8001450:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001452:	bf00      	nop
 8001454:	3714      	adds	r7, #20
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <_ensure_file_closed>:
static FILE* g_log_file = NULL;
#endif

// 파일 닫기 보장 함수들
#ifdef STM32F746xx
static void _ensure_file_closed(void) {
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
    if (g_current_file_handle != NULL) {
 8001468:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <_ensure_file_closed+0x38>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d012      	beq.n	8001496 <_ensure_file_closed+0x32>
        LOG_DEBUG("[SDStorage] Force closing previously opened file: %s", g_current_open_file);
 8001470:	4a0b      	ldr	r2, [pc, #44]	@ (80014a0 <_ensure_file_closed+0x3c>)
 8001472:	490c      	ldr	r1, [pc, #48]	@ (80014a4 <_ensure_file_closed+0x40>)
 8001474:	2000      	movs	r0, #0
 8001476:	f004 f9eb 	bl	8005850 <LOGGER_SendFormatted>
        f_close(g_current_file_handle);
 800147a:	4b08      	ldr	r3, [pc, #32]	@ (800149c <_ensure_file_closed+0x38>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f012 ff8c 	bl	801439c <f_close>
        g_current_file_handle = NULL;
 8001484:	4b05      	ldr	r3, [pc, #20]	@ (800149c <_ensure_file_closed+0x38>)
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
        memset(g_current_open_file, 0, sizeof(g_current_open_file));
 800148a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800148e:	2100      	movs	r1, #0
 8001490:	4803      	ldr	r0, [pc, #12]	@ (80014a0 <_ensure_file_closed+0x3c>)
 8001492:	f016 fbf7 	bl	8017c84 <memset>
    }
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000388 	.word	0x20000388
 80014a0:	2000038c 	.word	0x2000038c
 80014a4:	0801a1b0 	.word	0x0801a1b0

080014a8 <_register_file_opened>:

static void _register_file_opened(FIL* file_handle, const char* filename) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
    g_current_file_handle = file_handle;
 80014b2:	4a08      	ldr	r2, [pc, #32]	@ (80014d4 <_register_file_opened+0x2c>)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6013      	str	r3, [r2, #0]
    strncpy(g_current_open_file, filename, sizeof(g_current_open_file) - 1);
 80014b8:	22ff      	movs	r2, #255	@ 0xff
 80014ba:	6839      	ldr	r1, [r7, #0]
 80014bc:	4806      	ldr	r0, [pc, #24]	@ (80014d8 <_register_file_opened+0x30>)
 80014be:	f016 fbf6 	bl	8017cae <strncpy>
    g_current_open_file[sizeof(g_current_open_file) - 1] = '\0';
 80014c2:	4b05      	ldr	r3, [pc, #20]	@ (80014d8 <_register_file_opened+0x30>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000388 	.word	0x20000388
 80014d8:	2000038c 	.word	0x2000038c

080014dc <_register_file_closed>:

static void _register_file_closed(void) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
    g_current_file_handle = NULL;
 80014e0:	4b05      	ldr	r3, [pc, #20]	@ (80014f8 <_register_file_closed+0x1c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
    memset(g_current_open_file, 0, sizeof(g_current_open_file));
 80014e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014ea:	2100      	movs	r1, #0
 80014ec:	4803      	ldr	r0, [pc, #12]	@ (80014fc <_register_file_closed+0x20>)
 80014ee:	f016 fbc9 	bl	8017c84 <memset>
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000388 	.word	0x20000388
 80014fc:	2000038c 	.word	0x2000038c

08001500 <SDStorage_Init>:
static int _create_log_directory(void);
static int _generate_log_filename(char* filename, size_t max_len);
// static uint32_t _get_current_timestamp(void); - unused function removed

int SDStorage_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af02      	add	r7, sp, #8
#ifdef STM32F746xx
    // STM32 환경: FatFs 초기화 및 진단
    LOG_INFO("[SDStorage] Starting SD card initialization...");
 8001506:	49b0      	ldr	r1, [pc, #704]	@ (80017c8 <SDStorage_Init+0x2c8>)
 8001508:	2001      	movs	r0, #1
 800150a:	f004 f9a1 	bl	8005850 <LOGGER_SendFormatted>
    
    // 초기화 시 파일 닫기 보장
    _ensure_file_closed();
 800150e:	f7ff ffa9 	bl	8001464 <_ensure_file_closed>
    
    // 1. 하드웨어 상태 진단 및 TRANSFER 상태까지 대기
    extern SD_HandleTypeDef hsd1;
    HAL_SD_CardStateTypeDef card_state = HAL_SD_GetCardState(&hsd1);
 8001512:	48ae      	ldr	r0, [pc, #696]	@ (80017cc <SDStorage_Init+0x2cc>)
 8001514:	f00c f952 	bl	800d7bc <HAL_SD_GetCardState>
 8001518:	6178      	str	r0, [r7, #20]
    LOG_INFO("[SDStorage] Initial SD card state: %d", card_state);
 800151a:	697a      	ldr	r2, [r7, #20]
 800151c:	49ac      	ldr	r1, [pc, #688]	@ (80017d0 <SDStorage_Init+0x2d0>)
 800151e:	2001      	movs	r0, #1
 8001520:	f004 f996 	bl	8005850 <LOGGER_SendFormatted>
    
    // SD 카드가 TRANSFER 상태가 될 때까지 대기 (성공 프로젝트 패턴)
    int wait_count = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	613b      	str	r3, [r7, #16]
    while (card_state != HAL_SD_CARD_TRANSFER && wait_count < 50) {  // 최대 5초 대기
 8001528:	e010      	b.n	800154c <SDStorage_Init+0x4c>
        LOG_INFO("[SDStorage] Waiting for SD card TRANSFER state... (attempt %d)", wait_count + 1);
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	3301      	adds	r3, #1
 800152e:	461a      	mov	r2, r3
 8001530:	49a8      	ldr	r1, [pc, #672]	@ (80017d4 <SDStorage_Init+0x2d4>)
 8001532:	2001      	movs	r0, #1
 8001534:	f004 f98c 	bl	8005850 <LOGGER_SendFormatted>
        HAL_Delay(100);
 8001538:	2064      	movs	r0, #100	@ 0x64
 800153a:	f004 ffa9 	bl	8006490 <HAL_Delay>
        card_state = HAL_SD_GetCardState(&hsd1);
 800153e:	48a3      	ldr	r0, [pc, #652]	@ (80017cc <SDStorage_Init+0x2cc>)
 8001540:	f00c f93c 	bl	800d7bc <HAL_SD_GetCardState>
 8001544:	6178      	str	r0, [r7, #20]
        wait_count++;
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	3301      	adds	r3, #1
 800154a:	613b      	str	r3, [r7, #16]
    while (card_state != HAL_SD_CARD_TRANSFER && wait_count < 50) {  // 최대 5초 대기
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	2b04      	cmp	r3, #4
 8001550:	d002      	beq.n	8001558 <SDStorage_Init+0x58>
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	2b31      	cmp	r3, #49	@ 0x31
 8001556:	dde8      	ble.n	800152a <SDStorage_Init+0x2a>
    }
    
    if (card_state == HAL_SD_CARD_TRANSFER) {
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	2b04      	cmp	r3, #4
 800155c:	d128      	bne.n	80015b0 <SDStorage_Init+0xb0>
        LOG_INFO("[SDStorage] ✅ SD card reached TRANSFER state successfully");
 800155e:	499e      	ldr	r1, [pc, #632]	@ (80017d8 <SDStorage_Init+0x2d8>)
 8001560:	2001      	movs	r0, #1
 8001562:	f004 f975 	bl	8005850 <LOGGER_SendFormatted>
        
        // SDMMC 에러 코드 상세 체크 (성공 프로젝트 패턴)
        if (hsd1.ErrorCode != HAL_SD_ERROR_NONE) {
 8001566:	4b99      	ldr	r3, [pc, #612]	@ (80017cc <SDStorage_Init+0x2cc>)
 8001568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800156a:	2b00      	cmp	r3, #0
 800156c:	d02f      	beq.n	80015ce <SDStorage_Init+0xce>
            LOG_WARN("[SDStorage] SDMMC ErrorCode detected: 0x%08X", hsd1.ErrorCode);
 800156e:	4b97      	ldr	r3, [pc, #604]	@ (80017cc <SDStorage_Init+0x2cc>)
 8001570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001572:	461a      	mov	r2, r3
 8001574:	4999      	ldr	r1, [pc, #612]	@ (80017dc <SDStorage_Init+0x2dc>)
 8001576:	2002      	movs	r0, #2
 8001578:	f004 f96a 	bl	8005850 <LOGGER_SendFormatted>
            
            if (hsd1.ErrorCode & SDMMC_ERROR_TX_UNDERRUN) {
 800157c:	4b93      	ldr	r3, [pc, #588]	@ (80017cc <SDStorage_Init+0x2cc>)
 800157e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001580:	f003 0310 	and.w	r3, r3, #16
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <SDStorage_Init+0x90>
                LOG_WARN("[SDStorage] TX_UNDERRUN detected - clock may be too fast");
 8001588:	4995      	ldr	r1, [pc, #596]	@ (80017e0 <SDStorage_Init+0x2e0>)
 800158a:	2002      	movs	r0, #2
 800158c:	f004 f960 	bl	8005850 <LOGGER_SendFormatted>
            }
            if (hsd1.ErrorCode & SDMMC_ERROR_DATA_CRC_FAIL) {
 8001590:	4b8e      	ldr	r3, [pc, #568]	@ (80017cc <SDStorage_Init+0x2cc>)
 8001592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d005      	beq.n	80015a8 <SDStorage_Init+0xa8>
                LOG_WARN("[SDStorage] CRC_FAIL detected - cache issue possible");
 800159c:	4991      	ldr	r1, [pc, #580]	@ (80017e4 <SDStorage_Init+0x2e4>)
 800159e:	2002      	movs	r0, #2
 80015a0:	f004 f956 	bl	8005850 <LOGGER_SendFormatted>
                SCB_CleanInvalidateDCache();
 80015a4:	f7ff ff22 	bl	80013ec <SCB_CleanInvalidateDCache>
            }
            
            // 에러 코드 클리어
            hsd1.ErrorCode = HAL_SD_ERROR_NONE;
 80015a8:	4b88      	ldr	r3, [pc, #544]	@ (80017cc <SDStorage_Init+0x2cc>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	639a      	str	r2, [r3, #56]	@ 0x38
 80015ae:	e00e      	b.n	80015ce <SDStorage_Init+0xce>
        }
    } else {
        LOG_ERROR("[SDStorage] ❌ SD card failed to reach TRANSFER state (state: %d)", card_state);
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	498d      	ldr	r1, [pc, #564]	@ (80017e8 <SDStorage_Init+0x2e8>)
 80015b4:	2003      	movs	r0, #3
 80015b6:	f004 f94b 	bl	8005850 <LOGGER_SendFormatted>
        LOG_ERROR("[SDStorage] SDMMC ErrorCode: 0x%08X", hsd1.ErrorCode);
 80015ba:	4b84      	ldr	r3, [pc, #528]	@ (80017cc <SDStorage_Init+0x2cc>)
 80015bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015be:	461a      	mov	r2, r3
 80015c0:	498a      	ldr	r1, [pc, #552]	@ (80017ec <SDStorage_Init+0x2ec>)
 80015c2:	2003      	movs	r0, #3
 80015c4:	f004 f944 	bl	8005850 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 80015c8:	f04f 33ff 	mov.w	r3, #4294967295
 80015cc:	e199      	b.n	8001902 <SDStorage_Init+0x402>
    }
    
    DSTATUS disk_status = disk_initialize(0);
 80015ce:	2000      	movs	r0, #0
 80015d0:	f010 ff72 	bl	80124b8 <disk_initialize>
 80015d4:	4603      	mov	r3, r0
 80015d6:	71fb      	strb	r3, [r7, #7]
    LOG_INFO("[SDStorage] disk_initialize result: 0x%02X", disk_status);
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	461a      	mov	r2, r3
 80015dc:	4984      	ldr	r1, [pc, #528]	@ (80017f0 <SDStorage_Init+0x2f0>)
 80015de:	2001      	movs	r0, #1
 80015e0:	f004 f936 	bl	8005850 <LOGGER_SendFormatted>
    
    // disk_initialize 실패 시 조기 종료 (블로킹 방지)
    if (disk_status != 0) {
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00a      	beq.n	8001600 <SDStorage_Init+0x100>
        LOG_ERROR("[SDStorage] disk_initialize failed - SD card not ready");
 80015ea:	4982      	ldr	r1, [pc, #520]	@ (80017f4 <SDStorage_Init+0x2f4>)
 80015ec:	2003      	movs	r0, #3
 80015ee:	f004 f92f 	bl	8005850 <LOGGER_SendFormatted>
        LOG_ERROR("[SDStorage] Possible causes: write-protected, bad card, or BSP/HAL conflict");
 80015f2:	4981      	ldr	r1, [pc, #516]	@ (80017f8 <SDStorage_Init+0x2f8>)
 80015f4:	2003      	movs	r0, #3
 80015f6:	f004 f92b 	bl	8005850 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 80015fa:	f04f 33ff 	mov.w	r3, #4294967295
 80015fe:	e180      	b.n	8001902 <SDStorage_Init+0x402>
    }
    
    // 2. 파일시스템 마운트 시도 (지연 마운트로 변경 - 블로킹 방지)
    LOG_INFO("[SDStorage] Using deferred mount (flag=0) to avoid blocking...");
 8001600:	497e      	ldr	r1, [pc, #504]	@ (80017fc <SDStorage_Init+0x2fc>)
 8001602:	2001      	movs	r0, #1
 8001604:	f004 f924 	bl	8005850 <LOGGER_SendFormatted>
    
    // f_mount 호출 전에 충분한 지연 (SD 카드 안정화)
    #ifdef STM32F746xx
    LOG_INFO("[SDStorage] Waiting for SD card stabilization (500ms)...");
 8001608:	497d      	ldr	r1, [pc, #500]	@ (8001800 <SDStorage_Init+0x300>)
 800160a:	2001      	movs	r0, #1
 800160c:	f004 f920 	bl	8005850 <LOGGER_SendFormatted>
    HAL_Delay(500);
 8001610:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001614:	f004 ff3c 	bl	8006490 <HAL_Delay>
    #endif
    
    // f_mount 블로킹 문제 - 완전 우회 시도
    LOG_WARN("[SDStorage] f_mount consistently blocks despite all fixes");
 8001618:	497a      	ldr	r1, [pc, #488]	@ (8001804 <SDStorage_Init+0x304>)
 800161a:	2002      	movs	r0, #2
 800161c:	f004 f918 	bl	8005850 <LOGGER_SendFormatted>
    LOG_INFO("[SDStorage] Attempting direct file operations without f_mount...");
 8001620:	4979      	ldr	r1, [pc, #484]	@ (8001808 <SDStorage_Init+0x308>)
 8001622:	2001      	movs	r0, #1
 8001624:	f004 f914 	bl	8005850 <LOGGER_SendFormatted>
    LOG_INFO("[SDStorage] Some FatFs implementations support auto-mount on first file access");
 8001628:	4978      	ldr	r1, [pc, #480]	@ (800180c <SDStorage_Init+0x30c>)
 800162a:	2001      	movs	r0, #1
 800162c:	f004 f910 	bl	8005850 <LOGGER_SendFormatted>
    
    // f_mount 여러 번 재시도 (성공 프로젝트 패턴)
    LOG_INFO("[SDStorage] Attempting f_mount with retry logic...");
 8001630:	4977      	ldr	r1, [pc, #476]	@ (8001810 <SDStorage_Init+0x310>)
 8001632:	2001      	movs	r0, #1
 8001634:	f004 f90c 	bl	8005850 <LOGGER_SendFormatted>
    FRESULT mount_result = FR_DISK_ERR;  // 초기값
 8001638:	2301      	movs	r3, #1
 800163a:	73fb      	strb	r3, [r7, #15]
    
    for (int retry = 0; retry < 3; retry++) {
 800163c:	2300      	movs	r3, #0
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	e035      	b.n	80016ae <SDStorage_Init+0x1ae>
        LOG_INFO("[SDStorage] f_mount attempt %d/3...", retry + 1);
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	3301      	adds	r3, #1
 8001646:	461a      	mov	r2, r3
 8001648:	4972      	ldr	r1, [pc, #456]	@ (8001814 <SDStorage_Init+0x314>)
 800164a:	2001      	movs	r0, #1
 800164c:	f004 f900 	bl	8005850 <LOGGER_SendFormatted>
        mount_result = f_mount(&SDFatFS, SDPath, 1);  // 즉시 마운트
 8001650:	2201      	movs	r2, #1
 8001652:	4971      	ldr	r1, [pc, #452]	@ (8001818 <SDStorage_Init+0x318>)
 8001654:	4871      	ldr	r0, [pc, #452]	@ (800181c <SDStorage_Init+0x31c>)
 8001656:	f012 fadf 	bl	8013c18 <f_mount>
 800165a:	4603      	mov	r3, r0
 800165c:	73fb      	strb	r3, [r7, #15]
        LOG_INFO("[SDStorage] f_mount result: %d", mount_result);
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	461a      	mov	r2, r3
 8001662:	496f      	ldr	r1, [pc, #444]	@ (8001820 <SDStorage_Init+0x320>)
 8001664:	2001      	movs	r0, #1
 8001666:	f004 f8f3 	bl	8005850 <LOGGER_SendFormatted>
        
        if (mount_result == FR_OK) {
 800166a:	7bfb      	ldrb	r3, [r7, #15]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d107      	bne.n	8001680 <SDStorage_Init+0x180>
            LOG_INFO("[SDStorage] ✅ f_mount successful on attempt %d", retry + 1);
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	3301      	adds	r3, #1
 8001674:	461a      	mov	r2, r3
 8001676:	496b      	ldr	r1, [pc, #428]	@ (8001824 <SDStorage_Init+0x324>)
 8001678:	2001      	movs	r0, #1
 800167a:	f004 f8e9 	bl	8005850 <LOGGER_SendFormatted>
            break;
 800167e:	e019      	b.n	80016b4 <SDStorage_Init+0x1b4>
        } else {
            LOG_WARN("[SDStorage] f_mount failed on attempt %d, retrying in 1000ms...", retry + 1);
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	3301      	adds	r3, #1
 8001684:	461a      	mov	r2, r3
 8001686:	4968      	ldr	r1, [pc, #416]	@ (8001828 <SDStorage_Init+0x328>)
 8001688:	2002      	movs	r0, #2
 800168a:	f004 f8e1 	bl	8005850 <LOGGER_SendFormatted>
            if (retry < 2) {  // 마지막 시도가 아니면 대기
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	2b01      	cmp	r3, #1
 8001692:	dc09      	bgt.n	80016a8 <SDStorage_Init+0x1a8>
                // STM32F7 D-Cache 클리어 (성공 프로젝트 패턴)
                LOG_INFO("[SDStorage] Clearing D-Cache for STM32F7 compatibility...");
 8001694:	4965      	ldr	r1, [pc, #404]	@ (800182c <SDStorage_Init+0x32c>)
 8001696:	2001      	movs	r0, #1
 8001698:	f004 f8da 	bl	8005850 <LOGGER_SendFormatted>
                SCB_CleanInvalidateDCache();
 800169c:	f7ff fea6 	bl	80013ec <SCB_CleanInvalidateDCache>
                HAL_Delay(1000);
 80016a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016a4:	f004 fef4 	bl	8006490 <HAL_Delay>
    for (int retry = 0; retry < 3; retry++) {
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	3301      	adds	r3, #1
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	ddc6      	ble.n	8001642 <SDStorage_Init+0x142>
            }
        }
    }
    
    // 즉시 마운트 성공 시 쓰기 준비 완료
    if (mount_result == FR_OK) {
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d103      	bne.n	80016c2 <SDStorage_Init+0x1c2>
        LOG_INFO("[SDStorage] Immediate mount successful - SD ready for write operations");
 80016ba:	495d      	ldr	r1, [pc, #372]	@ (8001830 <SDStorage_Init+0x330>)
 80016bc:	2001      	movs	r0, #1
 80016be:	f004 f8c7 	bl	8005850 <LOGGER_SendFormatted>
    }
    
    if (mount_result != FR_OK) {
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f000 80f8 	beq.w	80018ba <SDStorage_Init+0x3ba>
        LOG_WARN("[SDStorage] f_mount failed with result: %d", mount_result);
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4959      	ldr	r1, [pc, #356]	@ (8001834 <SDStorage_Init+0x334>)
 80016d0:	2002      	movs	r0, #2
 80016d2:	f004 f8bd 	bl	8005850 <LOGGER_SendFormatted>
        
        // SD 카드가 이미 포맷되어 있다면 f_mkfs 시도하지 않고 다른 접근법 사용
        if (mount_result == FR_DISK_ERR) {
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d12f      	bne.n	800173c <SDStorage_Init+0x23c>
            LOG_WARN("[SDStorage] FR_DISK_ERR detected - SD card may be formatted but incompatible");
 80016dc:	4956      	ldr	r1, [pc, #344]	@ (8001838 <SDStorage_Init+0x338>)
 80016de:	2002      	movs	r0, #2
 80016e0:	f004 f8b6 	bl	8005850 <LOGGER_SendFormatted>
            LOG_INFO("[SDStorage] Skipping f_mkfs since SD card is already FAT32 formatted");
 80016e4:	4955      	ldr	r1, [pc, #340]	@ (800183c <SDStorage_Init+0x33c>)
 80016e6:	2001      	movs	r0, #1
 80016e8:	f004 f8b2 	bl	8005850 <LOGGER_SendFormatted>
            LOG_INFO("[SDStorage] Trying alternative mount approach...");
 80016ec:	4954      	ldr	r1, [pc, #336]	@ (8001840 <SDStorage_Init+0x340>)
 80016ee:	2001      	movs	r0, #1
 80016f0:	f004 f8ae 	bl	8005850 <LOGGER_SendFormatted>
            
            // 다른 마운트 방식 시도 (지연 마운트)
            LOG_INFO("[SDStorage] Attempting deferred mount (flag=0)...");
 80016f4:	4953      	ldr	r1, [pc, #332]	@ (8001844 <SDStorage_Init+0x344>)
 80016f6:	2001      	movs	r0, #1
 80016f8:	f004 f8aa 	bl	8005850 <LOGGER_SendFormatted>
            mount_result = f_mount(&SDFatFS, SDPath, 0);
 80016fc:	2200      	movs	r2, #0
 80016fe:	4946      	ldr	r1, [pc, #280]	@ (8001818 <SDStorage_Init+0x318>)
 8001700:	4846      	ldr	r0, [pc, #280]	@ (800181c <SDStorage_Init+0x31c>)
 8001702:	f012 fa89 	bl	8013c18 <f_mount>
 8001706:	4603      	mov	r3, r0
 8001708:	73fb      	strb	r3, [r7, #15]
            LOG_INFO("[SDStorage] Deferred mount result: %d", mount_result);
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	461a      	mov	r2, r3
 800170e:	494e      	ldr	r1, [pc, #312]	@ (8001848 <SDStorage_Init+0x348>)
 8001710:	2001      	movs	r0, #1
 8001712:	f004 f89d 	bl	8005850 <LOGGER_SendFormatted>
            
            if (mount_result == FR_OK) {
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d104      	bne.n	8001726 <SDStorage_Init+0x226>
                LOG_INFO("[SDStorage] Deferred mount successful!");
 800171c:	494b      	ldr	r1, [pc, #300]	@ (800184c <SDStorage_Init+0x34c>)
 800171e:	2001      	movs	r0, #1
 8001720:	f004 f896 	bl	8005850 <LOGGER_SendFormatted>
 8001724:	e0c9      	b.n	80018ba <SDStorage_Init+0x3ba>
            } else {
                LOG_ERROR("[SDStorage] Both immediate and deferred mount failed");
 8001726:	494a      	ldr	r1, [pc, #296]	@ (8001850 <SDStorage_Init+0x350>)
 8001728:	2003      	movs	r0, #3
 800172a:	f004 f891 	bl	8005850 <LOGGER_SendFormatted>
                LOG_ERROR("[SDStorage] SD card may have hardware compatibility issues");
 800172e:	4949      	ldr	r1, [pc, #292]	@ (8001854 <SDStorage_Init+0x354>)
 8001730:	2003      	movs	r0, #3
 8001732:	f004 f88d 	bl	8005850 <LOGGER_SendFormatted>
                return SDSTORAGE_ERROR;
 8001736:	f04f 33ff 	mov.w	r3, #4294967295
 800173a:	e0e2      	b.n	8001902 <SDStorage_Init+0x402>
            }
        }
        else if (mount_result == FR_NOT_READY || mount_result == FR_NO_FILESYSTEM) {
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	2b03      	cmp	r3, #3
 8001740:	d003      	beq.n	800174a <SDStorage_Init+0x24a>
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	2b0d      	cmp	r3, #13
 8001746:	f040 80ae 	bne.w	80018a6 <SDStorage_Init+0x3a6>
            // 작업 버퍼 할당 (전역 또는 스택)
            static BYTE work[_MAX_SS];
            
            // 실제 f_mkfs 시도
            LOG_INFO("[SDStorage] Attempting to create filesystem with f_mkfs...");
 800174a:	4943      	ldr	r1, [pc, #268]	@ (8001858 <SDStorage_Init+0x358>)
 800174c:	2001      	movs	r0, #1
 800174e:	f004 f87f 	bl	8005850 <LOGGER_SendFormatted>
            FRESULT mkfs_result = f_mkfs(SDPath, FM_ANY, 0, work, sizeof(work));
 8001752:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	4b40      	ldr	r3, [pc, #256]	@ (800185c <SDStorage_Init+0x35c>)
 800175a:	2200      	movs	r2, #0
 800175c:	2107      	movs	r1, #7
 800175e:	482e      	ldr	r0, [pc, #184]	@ (8001818 <SDStorage_Init+0x318>)
 8001760:	f012 ff44 	bl	80145ec <f_mkfs>
 8001764:	4603      	mov	r3, r0
 8001766:	71bb      	strb	r3, [r7, #6]
            LOG_INFO("[SDStorage] f_mkfs(FM_ANY) result: %d", mkfs_result);
 8001768:	79bb      	ldrb	r3, [r7, #6]
 800176a:	461a      	mov	r2, r3
 800176c:	493c      	ldr	r1, [pc, #240]	@ (8001860 <SDStorage_Init+0x360>)
 800176e:	2001      	movs	r0, #1
 8001770:	f004 f86e 	bl	8005850 <LOGGER_SendFormatted>
            
            if (mkfs_result != FR_OK) {
 8001774:	79bb      	ldrb	r3, [r7, #6]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d07c      	beq.n	8001874 <SDStorage_Init+0x374>
                // FAT32로 다시 시도
                LOG_INFO("[SDStorage] Retrying with explicit FAT32 format...");
 800177a:	493a      	ldr	r1, [pc, #232]	@ (8001864 <SDStorage_Init+0x364>)
 800177c:	2001      	movs	r0, #1
 800177e:	f004 f867 	bl	8005850 <LOGGER_SendFormatted>
                mkfs_result = f_mkfs(SDPath, FM_FAT32, 4096, work, sizeof(work));
 8001782:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	4b34      	ldr	r3, [pc, #208]	@ (800185c <SDStorage_Init+0x35c>)
 800178a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800178e:	2102      	movs	r1, #2
 8001790:	4821      	ldr	r0, [pc, #132]	@ (8001818 <SDStorage_Init+0x318>)
 8001792:	f012 ff2b 	bl	80145ec <f_mkfs>
 8001796:	4603      	mov	r3, r0
 8001798:	71bb      	strb	r3, [r7, #6]
                LOG_INFO("[SDStorage] f_mkfs(FM_FAT32) result: %d", mkfs_result);
 800179a:	79bb      	ldrb	r3, [r7, #6]
 800179c:	461a      	mov	r2, r3
 800179e:	4932      	ldr	r1, [pc, #200]	@ (8001868 <SDStorage_Init+0x368>)
 80017a0:	2001      	movs	r0, #1
 80017a2:	f004 f855 	bl	8005850 <LOGGER_SendFormatted>
                
                if (mkfs_result != FR_OK) {
 80017a6:	79bb      	ldrb	r3, [r7, #6]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d063      	beq.n	8001874 <SDStorage_Init+0x374>
                    LOG_ERROR("[SDStorage] File system creation failed: %d", mkfs_result);
 80017ac:	79bb      	ldrb	r3, [r7, #6]
 80017ae:	461a      	mov	r2, r3
 80017b0:	492e      	ldr	r1, [pc, #184]	@ (800186c <SDStorage_Init+0x36c>)
 80017b2:	2003      	movs	r0, #3
 80017b4:	f004 f84c 	bl	8005850 <LOGGER_SendFormatted>
                    LOG_ERROR("[SDStorage] Possible SD card hardware issue - try different card");
 80017b8:	492d      	ldr	r1, [pc, #180]	@ (8001870 <SDStorage_Init+0x370>)
 80017ba:	2003      	movs	r0, #3
 80017bc:	f004 f848 	bl	8005850 <LOGGER_SendFormatted>
                    return SDSTORAGE_ERROR;
 80017c0:	f04f 33ff 	mov.w	r3, #4294967295
 80017c4:	e09d      	b.n	8001902 <SDStorage_Init+0x402>
 80017c6:	bf00      	nop
 80017c8:	0801a1e8 	.word	0x0801a1e8
 80017cc:	20001d90 	.word	0x20001d90
 80017d0:	0801a218 	.word	0x0801a218
 80017d4:	0801a240 	.word	0x0801a240
 80017d8:	0801a280 	.word	0x0801a280
 80017dc:	0801a2bc 	.word	0x0801a2bc
 80017e0:	0801a2ec 	.word	0x0801a2ec
 80017e4:	0801a328 	.word	0x0801a328
 80017e8:	0801a360 	.word	0x0801a360
 80017ec:	0801a3a4 	.word	0x0801a3a4
 80017f0:	0801a3c8 	.word	0x0801a3c8
 80017f4:	0801a3f4 	.word	0x0801a3f4
 80017f8:	0801a42c 	.word	0x0801a42c
 80017fc:	0801a478 	.word	0x0801a478
 8001800:	0801a4b8 	.word	0x0801a4b8
 8001804:	0801a4f4 	.word	0x0801a4f4
 8001808:	0801a530 	.word	0x0801a530
 800180c:	0801a574 	.word	0x0801a574
 8001810:	0801a5c4 	.word	0x0801a5c4
 8001814:	0801a5f8 	.word	0x0801a5f8
 8001818:	200026d4 	.word	0x200026d4
 800181c:	200026d8 	.word	0x200026d8
 8001820:	0801a61c 	.word	0x0801a61c
 8001824:	0801a63c 	.word	0x0801a63c
 8001828:	0801a670 	.word	0x0801a670
 800182c:	0801a6b0 	.word	0x0801a6b0
 8001830:	0801a6ec 	.word	0x0801a6ec
 8001834:	0801a734 	.word	0x0801a734
 8001838:	0801a760 	.word	0x0801a760
 800183c:	0801a7b0 	.word	0x0801a7b0
 8001840:	0801a7f8 	.word	0x0801a7f8
 8001844:	0801a82c 	.word	0x0801a82c
 8001848:	0801a860 	.word	0x0801a860
 800184c:	0801a888 	.word	0x0801a888
 8001850:	0801a8b0 	.word	0x0801a8b0
 8001854:	0801a8e8 	.word	0x0801a8e8
 8001858:	0801a924 	.word	0x0801a924
 800185c:	2000048c 	.word	0x2000048c
 8001860:	0801a960 	.word	0x0801a960
 8001864:	0801a988 	.word	0x0801a988
 8001868:	0801a9bc 	.word	0x0801a9bc
 800186c:	0801a9e4 	.word	0x0801a9e4
 8001870:	0801aa10 	.word	0x0801aa10
                }
            }
            
            // 파일시스템 생성 후 재마운트 시도
            mount_result = f_mount(&SDFatFS, SDPath, 1);
 8001874:	2201      	movs	r2, #1
 8001876:	4925      	ldr	r1, [pc, #148]	@ (800190c <SDStorage_Init+0x40c>)
 8001878:	4825      	ldr	r0, [pc, #148]	@ (8001910 <SDStorage_Init+0x410>)
 800187a:	f012 f9cd 	bl	8013c18 <f_mount>
 800187e:	4603      	mov	r3, r0
 8001880:	73fb      	strb	r3, [r7, #15]
            LOG_INFO("[SDStorage] Re-mount after mkfs result: %d", mount_result);
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	461a      	mov	r2, r3
 8001886:	4923      	ldr	r1, [pc, #140]	@ (8001914 <SDStorage_Init+0x414>)
 8001888:	2001      	movs	r0, #1
 800188a:	f003 ffe1 	bl	8005850 <LOGGER_SendFormatted>
            
            if (mount_result != FR_OK) {
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d011      	beq.n	80018b8 <SDStorage_Init+0x3b8>
                LOG_ERROR("[SDStorage] Re-mount failed after mkfs: %d", mount_result);
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	461a      	mov	r2, r3
 8001898:	491f      	ldr	r1, [pc, #124]	@ (8001918 <SDStorage_Init+0x418>)
 800189a:	2003      	movs	r0, #3
 800189c:	f003 ffd8 	bl	8005850 <LOGGER_SendFormatted>
                return SDSTORAGE_ERROR;
 80018a0:	f04f 33ff 	mov.w	r3, #4294967295
 80018a4:	e02d      	b.n	8001902 <SDStorage_Init+0x402>
            }
        } else {
            LOG_ERROR("[SDStorage] Mount failed with unrecoverable error: %d", mount_result);
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
 80018a8:	461a      	mov	r2, r3
 80018aa:	491c      	ldr	r1, [pc, #112]	@ (800191c <SDStorage_Init+0x41c>)
 80018ac:	2003      	movs	r0, #3
 80018ae:	f003 ffcf 	bl	8005850 <LOGGER_SendFormatted>
            return SDSTORAGE_ERROR;
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295
 80018b6:	e024      	b.n	8001902 <SDStorage_Init+0x402>
        else if (mount_result == FR_NOT_READY || mount_result == FR_NO_FILESYSTEM) {
 80018b8:	bf00      	nop
        }
    }
    
    LOG_INFO("[SDStorage] File system mount successful");
 80018ba:	4919      	ldr	r1, [pc, #100]	@ (8001920 <SDStorage_Init+0x420>)
 80018bc:	2001      	movs	r0, #1
 80018be:	f003 ffc7 	bl	8005850 <LOGGER_SendFormatted>
#endif

    // FatFs 마운트 성공 확인됨
    
    // 디렉토리 생성 시도
    LOG_INFO("[SDStorage] Creating log directory...");
 80018c2:	4918      	ldr	r1, [pc, #96]	@ (8001924 <SDStorage_Init+0x424>)
 80018c4:	2001      	movs	r0, #1
 80018c6:	f003 ffc3 	bl	8005850 <LOGGER_SendFormatted>
    int dir_result = _create_log_directory();
 80018ca:	f000 fb51 	bl	8001f70 <_create_log_directory>
 80018ce:	6038      	str	r0, [r7, #0]
    g_directory_available = (dir_result == SDSTORAGE_OK);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	bf0c      	ite	eq
 80018d6:	2301      	moveq	r3, #1
 80018d8:	2300      	movne	r3, #0
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	4b12      	ldr	r3, [pc, #72]	@ (8001928 <SDStorage_Init+0x428>)
 80018de:	701a      	strb	r2, [r3, #0]
    
    g_sd_ready = true;
 80018e0:	4b12      	ldr	r3, [pc, #72]	@ (800192c <SDStorage_Init+0x42c>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	701a      	strb	r2, [r3, #0]
    g_current_log_size = 0;
 80018e6:	4b12      	ldr	r3, [pc, #72]	@ (8001930 <SDStorage_Init+0x430>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
    memset(g_current_log_file, 0, sizeof(g_current_log_file));
 80018ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018f0:	2100      	movs	r1, #0
 80018f2:	4810      	ldr	r0, [pc, #64]	@ (8001934 <SDStorage_Init+0x434>)
 80018f4:	f016 f9c6 	bl	8017c84 <memset>
    
    LOG_INFO("[SDStorage] Initialization completed successfully");
 80018f8:	490f      	ldr	r1, [pc, #60]	@ (8001938 <SDStorage_Init+0x438>)
 80018fa:	2001      	movs	r0, #1
 80018fc:	f003 ffa8 	bl	8005850 <LOGGER_SendFormatted>
    return SDSTORAGE_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	200026d4 	.word	0x200026d4
 8001910:	200026d8 	.word	0x200026d8
 8001914:	0801aa54 	.word	0x0801aa54
 8001918:	0801aa80 	.word	0x0801aa80
 800191c:	0801aaac 	.word	0x0801aaac
 8001920:	0801aae4 	.word	0x0801aae4
 8001924:	0801ab10 	.word	0x0801ab10
 8001928:	20000384 	.word	0x20000384
 800192c:	2000027d 	.word	0x2000027d
 8001930:	20000380 	.word	0x20000380
 8001934:	20000280 	.word	0x20000280
 8001938:	0801ab38 	.word	0x0801ab38

0800193c <SDStorage_WriteLog>:

int SDStorage_WriteLog(const void* data, size_t size)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	f5ad 6d8b 	sub.w	sp, sp, #1112	@ 0x458
 8001942:	af02      	add	r7, sp, #8
 8001944:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001948:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800194c:	6018      	str	r0, [r3, #0]
 800194e:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001952:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8001956:	6019      	str	r1, [r3, #0]
    if (!g_sd_ready) {
 8001958:	4b90      	ldr	r3, [pc, #576]	@ (8001b9c <SDStorage_WriteLog+0x260>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	f083 0301 	eor.w	r3, r3, #1
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d002      	beq.n	800196c <SDStorage_WriteLog+0x30>
        return SDSTORAGE_NOT_READY;
 8001966:	f06f 0301 	mvn.w	r3, #1
 800196a:	e23c      	b.n	8001de6 <SDStorage_WriteLog+0x4aa>
    }
    
    if (data == NULL || size == 0) {
 800196c:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001970:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d006      	beq.n	8001988 <SDStorage_WriteLog+0x4c>
 800197a:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800197e:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d102      	bne.n	800198e <SDStorage_WriteLog+0x52>
        return SDSTORAGE_INVALID_PARAM;
 8001988:	f06f 0304 	mvn.w	r3, #4
 800198c:	e22b      	b.n	8001de6 <SDStorage_WriteLog+0x4aa>
    }
    
    // 새 로그 파일이 필요한 경우 생성
    if (strlen(g_current_log_file) == 0 || 
 800198e:	4b84      	ldr	r3, [pc, #528]	@ (8001ba0 <SDStorage_WriteLog+0x264>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00a      	beq.n	80019ac <SDStorage_WriteLog+0x70>
        g_current_log_size + size > SDSTORAGE_MAX_LOG_SIZE) {
 8001996:	4b83      	ldr	r3, [pc, #524]	@ (8001ba4 <SDStorage_WriteLog+0x268>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800199e:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4413      	add	r3, r2
    if (strlen(g_current_log_file) == 0 || 
 80019a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80019aa:	d907      	bls.n	80019bc <SDStorage_WriteLog+0x80>
        if (SDStorage_CreateNewLogFile() != SDSTORAGE_OK) {
 80019ac:	f000 fa3a 	bl	8001e24 <SDStorage_CreateNewLogFile>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d002      	beq.n	80019bc <SDStorage_WriteLog+0x80>
            return SDSTORAGE_FILE_ERROR;
 80019b6:	f06f 0302 	mvn.w	r3, #2
 80019ba:	e214      	b.n	8001de6 <SDStorage_WriteLog+0x4aa>

#ifdef STM32F746xx
    // STM32 환경: 안정적인 열기-쓰기-닫기 방식
    
    // 로그 파일명이 없으면 생성
    if (strlen(g_current_log_file) == 0) {
 80019bc:	4b78      	ldr	r3, [pc, #480]	@ (8001ba0 <SDStorage_WriteLog+0x264>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d10e      	bne.n	80019e2 <SDStorage_WriteLog+0xa6>
        if (_generate_log_filename(g_current_log_file, sizeof(g_current_log_file)) != SDSTORAGE_OK) {
 80019c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019c8:	4875      	ldr	r0, [pc, #468]	@ (8001ba0 <SDStorage_WriteLog+0x264>)
 80019ca:	f000 fb33 	bl	8002034 <_generate_log_filename>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d006      	beq.n	80019e2 <SDStorage_WriteLog+0xa6>
            LOG_ERROR("[SDStorage] Failed to generate log filename");
 80019d4:	4974      	ldr	r1, [pc, #464]	@ (8001ba8 <SDStorage_WriteLog+0x26c>)
 80019d6:	2003      	movs	r0, #3
 80019d8:	f003 ff3a 	bl	8005850 <LOGGER_SendFormatted>
            return SDSTORAGE_ERROR;
 80019dc:	f04f 33ff 	mov.w	r3, #4294967295
 80019e0:	e201      	b.n	8001de6 <SDStorage_WriteLog+0x4aa>
        }
    }
    
    // SD 카드 상태 변화에 robust한 방식: 매번 열고 닫기
    FIL temp_file;
    memset(&temp_file, 0, sizeof(temp_file));
 80019e2:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 80019e6:	f44f 720b 	mov.w	r2, #556	@ 0x22c
 80019ea:	2100      	movs	r1, #0
 80019ec:	4618      	mov	r0, r3
 80019ee:	f016 f949 	bl	8017c84 <memset>
    
    // 파일 닫기 보장: 이전에 열린 파일이 있으면 강제로 닫기
    _ensure_file_closed();
 80019f2:	f7ff fd37 	bl	8001464 <_ensure_file_closed>
    
    // 성공 프로젝트 방식: 디스크 상태 먼저 확인
    DSTATUS current_disk_stat = disk_status(0);
 80019f6:	2000      	movs	r0, #0
 80019f8:	f010 fd44 	bl	8012484 <disk_status>
 80019fc:	4603      	mov	r3, r0
 80019fe:	f887 344e 	strb.w	r3, [r7, #1102]	@ 0x44e
    if (current_disk_stat != 0) {
 8001a02:	f897 344e 	ldrb.w	r3, [r7, #1102]	@ 0x44e
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d01a      	beq.n	8001a40 <SDStorage_WriteLog+0x104>
        LOG_WARN("[SDStorage] Disk not ready (%d), reinitializing...", current_disk_stat);
 8001a0a:	f897 344e 	ldrb.w	r3, [r7, #1102]	@ 0x44e
 8001a0e:	461a      	mov	r2, r3
 8001a10:	4966      	ldr	r1, [pc, #408]	@ (8001bac <SDStorage_WriteLog+0x270>)
 8001a12:	2002      	movs	r0, #2
 8001a14:	f003 ff1c 	bl	8005850 <LOGGER_SendFormatted>
        DSTATUS init_result = disk_initialize(0);
 8001a18:	2000      	movs	r0, #0
 8001a1a:	f010 fd4d 	bl	80124b8 <disk_initialize>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	f887 344d 	strb.w	r3, [r7, #1101]	@ 0x44d
        if (init_result != 0) {
 8001a24:	f897 344d 	ldrb.w	r3, [r7, #1101]	@ 0x44d
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d009      	beq.n	8001a40 <SDStorage_WriteLog+0x104>
            LOG_ERROR("[SDStorage] Disk reinitialization failed: %d", init_result);
 8001a2c:	f897 344d 	ldrb.w	r3, [r7, #1101]	@ 0x44d
 8001a30:	461a      	mov	r2, r3
 8001a32:	495f      	ldr	r1, [pc, #380]	@ (8001bb0 <SDStorage_WriteLog+0x274>)
 8001a34:	2003      	movs	r0, #3
 8001a36:	f003 ff0b 	bl	8005850 <LOGGER_SendFormatted>
            return SDSTORAGE_NOT_READY;
 8001a3a:	f06f 0301 	mvn.w	r3, #1
 8001a3e:	e1d2      	b.n	8001de6 <SDStorage_WriteLog+0x4aa>
        }
    }
    
    // 파일 열기 (성공 프로젝트 방식: 단계적 시도)
    FRESULT open_result = f_open(&temp_file, g_current_log_file, FA_OPEN_APPEND | FA_WRITE);
 8001a40:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8001a44:	2232      	movs	r2, #50	@ 0x32
 8001a46:	4956      	ldr	r1, [pc, #344]	@ (8001ba0 <SDStorage_WriteLog+0x264>)
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f012 f929 	bl	8013ca0 <f_open>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	f887 344f 	strb.w	r3, [r7, #1103]	@ 0x44f
    
    // 파일 열기 성공 시 추적 등록
    if (open_result == FR_OK) {
 8001a54:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d10a      	bne.n	8001a72 <SDStorage_WriteLog+0x136>
        _register_file_opened(&temp_file, g_current_log_file);
 8001a5c:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8001a60:	494f      	ldr	r1, [pc, #316]	@ (8001ba0 <SDStorage_WriteLog+0x264>)
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff fd20 	bl	80014a8 <_register_file_opened>
        LOG_DEBUG("[SDStorage] File opened and registered: %s", g_current_log_file);
 8001a68:	4a4d      	ldr	r2, [pc, #308]	@ (8001ba0 <SDStorage_WriteLog+0x264>)
 8001a6a:	4952      	ldr	r1, [pc, #328]	@ (8001bb4 <SDStorage_WriteLog+0x278>)
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	f003 feef 	bl	8005850 <LOGGER_SendFormatted>
    }
    
    // f_open 실패 시 성공 프로젝트 방식의 복구 로직
    if (open_result != FR_OK) {
 8001a72:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 80b0 	beq.w	8001bdc <SDStorage_WriteLog+0x2a0>
        LOG_WARN("[SDStorage] f_open failed (%d), trying recovery...", open_result);
 8001a7c:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 8001a80:	461a      	mov	r2, r3
 8001a82:	494d      	ldr	r1, [pc, #308]	@ (8001bb8 <SDStorage_WriteLog+0x27c>)
 8001a84:	2002      	movs	r0, #2
 8001a86:	f003 fee3 	bl	8005850 <LOGGER_SendFormatted>
        
        // 1단계: 마운트 재시도
        f_mount(NULL, SDPath, 0);  // 언마운트
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	494b      	ldr	r1, [pc, #300]	@ (8001bbc <SDStorage_WriteLog+0x280>)
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f012 f8c2 	bl	8013c18 <f_mount>
        HAL_Delay(200);
 8001a94:	20c8      	movs	r0, #200	@ 0xc8
 8001a96:	f004 fcfb 	bl	8006490 <HAL_Delay>
        FRESULT remount_result = f_mount(&SDFatFS, SDPath, 1);  // 강제 재마운트
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	4947      	ldr	r1, [pc, #284]	@ (8001bbc <SDStorage_WriteLog+0x280>)
 8001a9e:	4848      	ldr	r0, [pc, #288]	@ (8001bc0 <SDStorage_WriteLog+0x284>)
 8001aa0:	f012 f8ba 	bl	8013c18 <f_mount>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	f887 344c 	strb.w	r3, [r7, #1100]	@ 0x44c
        
        if (remount_result == FR_OK) {
 8001aaa:	f897 344c 	ldrb.w	r3, [r7, #1100]	@ 0x44c
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d117      	bne.n	8001ae2 <SDStorage_WriteLog+0x1a6>
            // 재마운트 성공 후 다시 파일 열기 시도
            open_result = f_open(&temp_file, g_current_log_file, FA_OPEN_APPEND | FA_WRITE);
 8001ab2:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8001ab6:	2232      	movs	r2, #50	@ 0x32
 8001ab8:	4939      	ldr	r1, [pc, #228]	@ (8001ba0 <SDStorage_WriteLog+0x264>)
 8001aba:	4618      	mov	r0, r3
 8001abc:	f012 f8f0 	bl	8013ca0 <f_open>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f887 344f 	strb.w	r3, [r7, #1103]	@ 0x44f
            if (open_result == FR_OK) {
 8001ac6:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d109      	bne.n	8001ae2 <SDStorage_WriteLog+0x1a6>
                _register_file_opened(&temp_file, g_current_log_file);
 8001ace:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8001ad2:	4933      	ldr	r1, [pc, #204]	@ (8001ba0 <SDStorage_WriteLog+0x264>)
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff fce7 	bl	80014a8 <_register_file_opened>
                LOG_INFO("[SDStorage] File opened after remount recovery");
 8001ada:	493a      	ldr	r1, [pc, #232]	@ (8001bc4 <SDStorage_WriteLog+0x288>)
 8001adc:	2001      	movs	r0, #1
 8001ade:	f003 feb7 	bl	8005850 <LOGGER_SendFormatted>
            }
        }
        
        // 2단계: 여전히 실패하면 f_mkfs 시도
        if (open_result != FR_OK) {
 8001ae2:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d049      	beq.n	8001b7e <SDStorage_WriteLog+0x242>
            LOG_WARN("[SDStorage] File still failed, trying f_mkfs recovery...");
 8001aea:	4937      	ldr	r1, [pc, #220]	@ (8001bc8 <SDStorage_WriteLog+0x28c>)
 8001aec:	2002      	movs	r0, #2
 8001aee:	f003 feaf 	bl	8005850 <LOGGER_SendFormatted>
            static BYTE work[4096];
            FRESULT mkfs_result = f_mkfs(SDPath, FM_ANY, 0, work, sizeof(work));
 8001af2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	4b34      	ldr	r3, [pc, #208]	@ (8001bcc <SDStorage_WriteLog+0x290>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	2107      	movs	r1, #7
 8001afe:	482f      	ldr	r0, [pc, #188]	@ (8001bbc <SDStorage_WriteLog+0x280>)
 8001b00:	f012 fd74 	bl	80145ec <f_mkfs>
 8001b04:	4603      	mov	r3, r0
 8001b06:	f887 344b 	strb.w	r3, [r7, #1099]	@ 0x44b
            
            if (mkfs_result == FR_OK) {
 8001b0a:	f897 344b 	ldrb.w	r3, [r7, #1099]	@ 0x44b
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d135      	bne.n	8001b7e <SDStorage_WriteLog+0x242>
                LOG_INFO("[SDStorage] f_mkfs successful, remounting...");
 8001b12:	492f      	ldr	r1, [pc, #188]	@ (8001bd0 <SDStorage_WriteLog+0x294>)
 8001b14:	2001      	movs	r0, #1
 8001b16:	f003 fe9b 	bl	8005850 <LOGGER_SendFormatted>
                f_mount(NULL, SDPath, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	4927      	ldr	r1, [pc, #156]	@ (8001bbc <SDStorage_WriteLog+0x280>)
 8001b1e:	2000      	movs	r0, #0
 8001b20:	f012 f87a 	bl	8013c18 <f_mount>
                HAL_Delay(500);
 8001b24:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001b28:	f004 fcb2 	bl	8006490 <HAL_Delay>
                remount_result = f_mount(&SDFatFS, SDPath, 1);
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	4923      	ldr	r1, [pc, #140]	@ (8001bbc <SDStorage_WriteLog+0x280>)
 8001b30:	4823      	ldr	r0, [pc, #140]	@ (8001bc0 <SDStorage_WriteLog+0x284>)
 8001b32:	f012 f871 	bl	8013c18 <f_mount>
 8001b36:	4603      	mov	r3, r0
 8001b38:	f887 344c 	strb.w	r3, [r7, #1100]	@ 0x44c
                
                if (remount_result == FR_OK) {
 8001b3c:	f897 344c 	ldrb.w	r3, [r7, #1100]	@ 0x44c
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d11c      	bne.n	8001b7e <SDStorage_WriteLog+0x242>
                    // 파일명 재생성 (mkfs 후 파일이 사라졌으므로)
                    _generate_log_filename(g_current_log_file, sizeof(g_current_log_file));
 8001b44:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b48:	4815      	ldr	r0, [pc, #84]	@ (8001ba0 <SDStorage_WriteLog+0x264>)
 8001b4a:	f000 fa73 	bl	8002034 <_generate_log_filename>
                    open_result = f_open(&temp_file, g_current_log_file, FA_CREATE_ALWAYS | FA_WRITE);
 8001b4e:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8001b52:	220a      	movs	r2, #10
 8001b54:	4912      	ldr	r1, [pc, #72]	@ (8001ba0 <SDStorage_WriteLog+0x264>)
 8001b56:	4618      	mov	r0, r3
 8001b58:	f012 f8a2 	bl	8013ca0 <f_open>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	f887 344f 	strb.w	r3, [r7, #1103]	@ 0x44f
                    if (open_result == FR_OK) {
 8001b62:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d109      	bne.n	8001b7e <SDStorage_WriteLog+0x242>
                        _register_file_opened(&temp_file, g_current_log_file);
 8001b6a:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8001b6e:	490c      	ldr	r1, [pc, #48]	@ (8001ba0 <SDStorage_WriteLog+0x264>)
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff fc99 	bl	80014a8 <_register_file_opened>
                        LOG_INFO("[SDStorage] File created after f_mkfs recovery");
 8001b76:	4917      	ldr	r1, [pc, #92]	@ (8001bd4 <SDStorage_WriteLog+0x298>)
 8001b78:	2001      	movs	r0, #1
 8001b7a:	f003 fe69 	bl	8005850 <LOGGER_SendFormatted>
                }
            }
        }
        
        // 모든 복구 시도 실패
        if (open_result != FR_OK) {
 8001b7e:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d02a      	beq.n	8001bdc <SDStorage_WriteLog+0x2a0>
            LOG_ERROR("[SDStorage] All recovery attempts failed: %d", open_result);
 8001b86:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	4912      	ldr	r1, [pc, #72]	@ (8001bd8 <SDStorage_WriteLog+0x29c>)
 8001b8e:	2003      	movs	r0, #3
 8001b90:	f003 fe5e 	bl	8005850 <LOGGER_SendFormatted>
            return SDSTORAGE_FILE_ERROR;
 8001b94:	f06f 0302 	mvn.w	r3, #2
 8001b98:	e125      	b.n	8001de6 <SDStorage_WriteLog+0x4aa>
 8001b9a:	bf00      	nop
 8001b9c:	2000027d 	.word	0x2000027d
 8001ba0:	20000280 	.word	0x20000280
 8001ba4:	20000380 	.word	0x20000380
 8001ba8:	0801ab6c 	.word	0x0801ab6c
 8001bac:	0801ab98 	.word	0x0801ab98
 8001bb0:	0801abcc 	.word	0x0801abcc
 8001bb4:	0801abfc 	.word	0x0801abfc
 8001bb8:	0801ac28 	.word	0x0801ac28
 8001bbc:	200026d4 	.word	0x200026d4
 8001bc0:	200026d8 	.word	0x200026d8
 8001bc4:	0801ac5c 	.word	0x0801ac5c
 8001bc8:	0801ac8c 	.word	0x0801ac8c
 8001bcc:	2000068c 	.word	0x2000068c
 8001bd0:	0801acc8 	.word	0x0801acc8
 8001bd4:	0801acf8 	.word	0x0801acf8
 8001bd8:	0801ad28 	.word	0x0801ad28
        }
    }
    
    if (open_result == FR_OK) {
 8001bdc:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f040 80df 	bne.w	8001da4 <SDStorage_WriteLog+0x468>
        // FA_OPEN_APPEND 사용 시 자동으로 파일 끝에 위치
        
        // 원본 데이터 + 줄바꿈을 함께 쓰기 (FR_INVALID_OBJECT 방지)
        char write_buffer[512];  // 충분한 버퍼 크기
        UINT total_bytes_to_write = size + 2;  // 원본 데이터 + \r\n
 8001be6:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001bea:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	3302      	adds	r3, #2
 8001bf2:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
        
        if (size + 2 < sizeof(write_buffer)) {
 8001bf6:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001bfa:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	3302      	adds	r3, #2
 8001c02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c06:	d273      	bcs.n	8001cf0 <SDStorage_WriteLog+0x3b4>
            // 원본 데이터 복사
            memcpy(write_buffer, data, size);
 8001c08:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001c0c:	f5a3 628a 	sub.w	r2, r3, #1104	@ 0x450
 8001c10:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001c14:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8001c18:	f107 000c 	add.w	r0, r7, #12
 8001c1c:	6812      	ldr	r2, [r2, #0]
 8001c1e:	6819      	ldr	r1, [r3, #0]
 8001c20:	f016 f8f1 	bl	8017e06 <memcpy>
            // 줄바꿈 추가
            write_buffer[size] = '\r';
 8001c24:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001c28:	f2a3 4244 	subw	r2, r3, #1092	@ 0x444
 8001c2c:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001c30:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	220d      	movs	r2, #13
 8001c3a:	701a      	strb	r2, [r3, #0]
            write_buffer[size + 1] = '\n';
 8001c3c:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001c40:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	3301      	adds	r3, #1
 8001c48:	f507 628a 	add.w	r2, r7, #1104	@ 0x450
 8001c4c:	f2a2 4244 	subw	r2, r2, #1092	@ 0x444
 8001c50:	210a      	movs	r1, #10
 8001c52:	54d1      	strb	r1, [r2, r3]
            
            // 한 번에 쓰기
            UINT bytes_written;
            FRESULT write_result = f_write(&temp_file, write_buffer, total_bytes_to_write, &bytes_written);
 8001c54:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001c58:	f107 010c 	add.w	r1, r7, #12
 8001c5c:	f507 7005 	add.w	r0, r7, #532	@ 0x214
 8001c60:	f8d7 2444 	ldr.w	r2, [r7, #1092]	@ 0x444
 8001c64:	f012 f9a7 	bl	8013fb6 <f_write>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	f887 3442 	strb.w	r3, [r7, #1090]	@ 0x442
            
            // 즉시 동기화 및 닫기
            f_sync(&temp_file);
 8001c6e:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8001c72:	4618      	mov	r0, r3
 8001c74:	f012 fb14 	bl	80142a0 <f_sync>
            f_close(&temp_file);
 8001c78:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f012 fb8d 	bl	801439c <f_close>
            _register_file_closed();  // 추적 해제
 8001c82:	f7ff fc2b 	bl	80014dc <_register_file_closed>
            
            if (write_result == FR_OK && bytes_written == total_bytes_to_write) {
 8001c86:	f897 3442 	ldrb.w	r3, [r7, #1090]	@ 0x442
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d11e      	bne.n	8001ccc <SDStorage_WriteLog+0x390>
 8001c8e:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001c92:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f8d7 2444 	ldr.w	r2, [r7, #1092]	@ 0x444
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d115      	bne.n	8001ccc <SDStorage_WriteLog+0x390>
                g_current_log_size += bytes_written;
 8001ca0:	4b53      	ldr	r3, [pc, #332]	@ (8001df0 <SDStorage_WriteLog+0x4b4>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001ca8:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4413      	add	r3, r2
 8001cb0:	4a4f      	ldr	r2, [pc, #316]	@ (8001df0 <SDStorage_WriteLog+0x4b4>)
 8001cb2:	6013      	str	r3, [r2, #0]
                LOG_DEBUG("[SDStorage] Log written successfully: %d bytes (including CRLF)", bytes_written);
 8001cb4:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001cb8:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	494c      	ldr	r1, [pc, #304]	@ (8001df4 <SDStorage_WriteLog+0x4b8>)
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f003 fdc4 	bl	8005850 <LOGGER_SendFormatted>
                return SDSTORAGE_OK;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	e08c      	b.n	8001de6 <SDStorage_WriteLog+0x4aa>
            } else {
                LOG_ERROR("[SDStorage] f_write failed: %d, written: %d/%d", write_result, bytes_written, total_bytes_to_write);
 8001ccc:	f897 2442 	ldrb.w	r2, [r7, #1090]	@ 0x442
 8001cd0:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001cd4:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001cd8:	6819      	ldr	r1, [r3, #0]
 8001cda:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4945      	ldr	r1, [pc, #276]	@ (8001df8 <SDStorage_WriteLog+0x4bc>)
 8001ce4:	2003      	movs	r0, #3
 8001ce6:	f003 fdb3 	bl	8005850 <LOGGER_SendFormatted>
                return SDSTORAGE_FILE_ERROR;
 8001cea:	f06f 0302 	mvn.w	r3, #2
 8001cee:	e07a      	b.n	8001de6 <SDStorage_WriteLog+0x4aa>
            }
        } else {
            // 버퍼 크기 초과 - 원본 데이터만 쓰기
            UINT bytes_written;
            FRESULT write_result = f_write(&temp_file, data, size, &bytes_written);
 8001cf0:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 8001cf4:	f507 628a 	add.w	r2, r7, #1104	@ 0x450
 8001cf8:	f5a2 628a 	sub.w	r2, r2, #1104	@ 0x450
 8001cfc:	f507 618a 	add.w	r1, r7, #1104	@ 0x450
 8001d00:	f2a1 414c 	subw	r1, r1, #1100	@ 0x44c
 8001d04:	f507 7005 	add.w	r0, r7, #532	@ 0x214
 8001d08:	6812      	ldr	r2, [r2, #0]
 8001d0a:	6809      	ldr	r1, [r1, #0]
 8001d0c:	f012 f953 	bl	8013fb6 <f_write>
 8001d10:	4603      	mov	r3, r0
 8001d12:	f887 3443 	strb.w	r3, [r7, #1091]	@ 0x443
            
            // 즉시 동기화 및 닫기
            f_sync(&temp_file);
 8001d16:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f012 fac0 	bl	80142a0 <f_sync>
            f_close(&temp_file);
 8001d20:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8001d24:	4618      	mov	r0, r3
 8001d26:	f012 fb39 	bl	801439c <f_close>
            _register_file_closed();  // 추적 해제
 8001d2a:	f7ff fbd7 	bl	80014dc <_register_file_closed>
            
            if (write_result == FR_OK && bytes_written == size) {
 8001d2e:	f897 3443 	ldrb.w	r3, [r7, #1091]	@ 0x443
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d121      	bne.n	8001d7a <SDStorage_WriteLog+0x43e>
 8001d36:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001d3a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f507 628a 	add.w	r2, r7, #1104	@ 0x450
 8001d44:	f5a2 628a 	sub.w	r2, r2, #1104	@ 0x450
 8001d48:	6812      	ldr	r2, [r2, #0]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d115      	bne.n	8001d7a <SDStorage_WriteLog+0x43e>
                g_current_log_size += bytes_written;
 8001d4e:	4b28      	ldr	r3, [pc, #160]	@ (8001df0 <SDStorage_WriteLog+0x4b4>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001d56:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	4a24      	ldr	r2, [pc, #144]	@ (8001df0 <SDStorage_WriteLog+0x4b4>)
 8001d60:	6013      	str	r3, [r2, #0]
                LOG_DEBUG("[SDStorage] Log written successfully: %d bytes (no CRLF due to size)", bytes_written);
 8001d62:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001d66:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4923      	ldr	r1, [pc, #140]	@ (8001dfc <SDStorage_WriteLog+0x4c0>)
 8001d70:	2000      	movs	r0, #0
 8001d72:	f003 fd6d 	bl	8005850 <LOGGER_SendFormatted>
                return SDSTORAGE_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	e035      	b.n	8001de6 <SDStorage_WriteLog+0x4aa>
            } else {
                LOG_ERROR("[SDStorage] f_write failed: %d, written: %d/%d", write_result, bytes_written, size);
 8001d7a:	f897 2443 	ldrb.w	r2, [r7, #1091]	@ 0x443
 8001d7e:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001d82:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8001d86:	6819      	ldr	r1, [r3, #0]
 8001d88:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001d8c:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	460b      	mov	r3, r1
 8001d96:	4918      	ldr	r1, [pc, #96]	@ (8001df8 <SDStorage_WriteLog+0x4bc>)
 8001d98:	2003      	movs	r0, #3
 8001d9a:	f003 fd59 	bl	8005850 <LOGGER_SendFormatted>
                return SDSTORAGE_FILE_ERROR;
 8001d9e:	f06f 0302 	mvn.w	r3, #2
 8001da2:	e020      	b.n	8001de6 <SDStorage_WriteLog+0x4aa>
            }
        }
    } else {
        LOG_ERROR("[SDStorage] f_open failed: %d - SD card state may have changed", open_result);
 8001da4:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 8001da8:	461a      	mov	r2, r3
 8001daa:	4915      	ldr	r1, [pc, #84]	@ (8001e00 <SDStorage_WriteLog+0x4c4>)
 8001dac:	2003      	movs	r0, #3
 8001dae:	f003 fd4f 	bl	8005850 <LOGGER_SendFormatted>
        
        // SD 카드 상태 재확인
        DSTATUS current_status = disk_status(0);
 8001db2:	2000      	movs	r0, #0
 8001db4:	f010 fb66 	bl	8012484 <disk_status>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f887 344a 	strb.w	r3, [r7, #1098]	@ 0x44a
        LOG_WARN("[SDStorage] Current disk status: 0x%02X", current_status);
 8001dbe:	f897 344a 	ldrb.w	r3, [r7, #1098]	@ 0x44a
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	490f      	ldr	r1, [pc, #60]	@ (8001e04 <SDStorage_WriteLog+0x4c8>)
 8001dc6:	2002      	movs	r0, #2
 8001dc8:	f003 fd42 	bl	8005850 <LOGGER_SendFormatted>
        
        if (current_status != 0) {
 8001dcc:	f897 344a 	ldrb.w	r3, [r7, #1098]	@ 0x44a
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d006      	beq.n	8001de2 <SDStorage_WriteLog+0x4a6>
            LOG_WARN("[SDStorage] SD card not ready - temporarily disabling SD logging");
 8001dd4:	490c      	ldr	r1, [pc, #48]	@ (8001e08 <SDStorage_WriteLog+0x4cc>)
 8001dd6:	2002      	movs	r0, #2
 8001dd8:	f003 fd3a 	bl	8005850 <LOGGER_SendFormatted>
            return SDSTORAGE_NOT_READY;
 8001ddc:	f06f 0301 	mvn.w	r3, #1
 8001de0:	e001      	b.n	8001de6 <SDStorage_WriteLog+0x4aa>
        }
        
        return SDSTORAGE_FILE_ERROR;
 8001de2:	f06f 0302 	mvn.w	r3, #2
    // 실제 파일 쓰기 없이 성공으로 처리
#endif

    g_current_log_size += size;
    return SDSTORAGE_OK;
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	f507 678a 	add.w	r7, r7, #1104	@ 0x450
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20000380 	.word	0x20000380
 8001df4:	0801ad58 	.word	0x0801ad58
 8001df8:	0801ad98 	.word	0x0801ad98
 8001dfc:	0801adc8 	.word	0x0801adc8
 8001e00:	0801ae10 	.word	0x0801ae10
 8001e04:	0801ae50 	.word	0x0801ae50
 8001e08:	0801ae78 	.word	0x0801ae78

08001e0c <SDStorage_IsReady>:

bool SDStorage_IsReady(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
    return g_sd_ready;
 8001e10:	4b03      	ldr	r3, [pc, #12]	@ (8001e20 <SDStorage_IsReady+0x14>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	2000027d 	.word	0x2000027d

08001e24 <SDStorage_CreateNewLogFile>:
        memset(g_current_log_file, 0, sizeof(g_current_log_file));
    }
}

int SDStorage_CreateNewLogFile(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 8001e2a:	af00      	add	r7, sp, #0
    if (!g_sd_ready) {
 8001e2c:	4b43      	ldr	r3, [pc, #268]	@ (8001f3c <SDStorage_CreateNewLogFile+0x118>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	f083 0301 	eor.w	r3, r3, #1
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d002      	beq.n	8001e40 <SDStorage_CreateNewLogFile+0x1c>
        return SDSTORAGE_NOT_READY;
 8001e3a:	f06f 0301 	mvn.w	r3, #1
 8001e3e:	e077      	b.n	8001f30 <SDStorage_CreateNewLogFile+0x10c>
    }
    
    // 전역 파일 객체 제거됨 - 별도 처리 불필요
    
    // 새 파일명 생성
    if (_generate_log_filename(g_current_log_file, sizeof(g_current_log_file)) != SDSTORAGE_OK) {
 8001e40:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e44:	483e      	ldr	r0, [pc, #248]	@ (8001f40 <SDStorage_CreateNewLogFile+0x11c>)
 8001e46:	f000 f8f5 	bl	8002034 <_generate_log_filename>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d002      	beq.n	8001e56 <SDStorage_CreateNewLogFile+0x32>
        return SDSTORAGE_ERROR;
 8001e50:	f04f 33ff 	mov.w	r3, #4294967295
 8001e54:	e06c      	b.n	8001f30 <SDStorage_CreateNewLogFile+0x10c>
    }
    
    // 파일 생성 테스트 (간단한 방식)
#ifdef STM32F746xx
    LOG_INFO("[SDStorage] Testing file creation: %s", g_current_log_file);
 8001e56:	4a3a      	ldr	r2, [pc, #232]	@ (8001f40 <SDStorage_CreateNewLogFile+0x11c>)
 8001e58:	493a      	ldr	r1, [pc, #232]	@ (8001f44 <SDStorage_CreateNewLogFile+0x120>)
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	f003 fcf8 	bl	8005850 <LOGGER_SendFormatted>
    
    // 지역 변수로 파일 객체 생성
    FIL test_file;
    memset(&test_file, 0, sizeof(test_file));
 8001e60:	463b      	mov	r3, r7
 8001e62:	f44f 720b 	mov.w	r2, #556	@ 0x22c
 8001e66:	2100      	movs	r1, #0
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f015 ff0b 	bl	8017c84 <memset>
    
    // SD 카드 상태 재확인
    DSTATUS current_disk_status = disk_status(0);
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f010 fb08 	bl	8012484 <disk_status>
 8001e74:	4603      	mov	r3, r0
 8001e76:	f887 322f 	strb.w	r3, [r7, #559]	@ 0x22f
    LOG_INFO("[SDStorage] Current disk status: 0x%02X", current_disk_status);
 8001e7a:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8001e7e:	461a      	mov	r2, r3
 8001e80:	4931      	ldr	r1, [pc, #196]	@ (8001f48 <SDStorage_CreateNewLogFile+0x124>)
 8001e82:	2001      	movs	r0, #1
 8001e84:	f003 fce4 	bl	8005850 <LOGGER_SendFormatted>
    
    // 파일 생성 테스트
    FRESULT open_result = f_open(&test_file, g_current_log_file, FA_CREATE_ALWAYS | FA_WRITE);
 8001e88:	463b      	mov	r3, r7
 8001e8a:	220a      	movs	r2, #10
 8001e8c:	492c      	ldr	r1, [pc, #176]	@ (8001f40 <SDStorage_CreateNewLogFile+0x11c>)
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f011 ff06 	bl	8013ca0 <f_open>
 8001e94:	4603      	mov	r3, r0
 8001e96:	f887 322e 	strb.w	r3, [r7, #558]	@ 0x22e
    LOG_INFO("[SDStorage] f_open result: %d", open_result);
 8001e9a:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	492a      	ldr	r1, [pc, #168]	@ (8001f4c <SDStorage_CreateNewLogFile+0x128>)
 8001ea2:	2001      	movs	r0, #1
 8001ea4:	f003 fcd4 	bl	8005850 <LOGGER_SendFormatted>
    
    if (open_result != FR_OK) {
 8001ea8:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d032      	beq.n	8001f16 <SDStorage_CreateNewLogFile+0xf2>
        LOG_ERROR("[SDStorage] f_open failed: %d", open_result);
 8001eb0:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4926      	ldr	r1, [pc, #152]	@ (8001f50 <SDStorage_CreateNewLogFile+0x12c>)
 8001eb8:	2003      	movs	r0, #3
 8001eba:	f003 fcc9 	bl	8005850 <LOGGER_SendFormatted>
        
        // 상세 에러 분석
        switch (open_result) {
 8001ebe:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001ec2:	2b10      	cmp	r3, #16
 8001ec4:	d006      	beq.n	8001ed4 <SDStorage_CreateNewLogFile+0xb0>
 8001ec6:	2b10      	cmp	r3, #16
 8001ec8:	dc13      	bgt.n	8001ef2 <SDStorage_CreateNewLogFile+0xce>
 8001eca:	2b03      	cmp	r3, #3
 8001ecc:	d00c      	beq.n	8001ee8 <SDStorage_CreateNewLogFile+0xc4>
 8001ece:	2b09      	cmp	r3, #9
 8001ed0:	d005      	beq.n	8001ede <SDStorage_CreateNewLogFile+0xba>
 8001ed2:	e00e      	b.n	8001ef2 <SDStorage_CreateNewLogFile+0xce>
            case 16: // FR_INVALID_OBJECT
                LOG_ERROR("[SDStorage] FR_INVALID_OBJECT - File object initialization issue");
 8001ed4:	491f      	ldr	r1, [pc, #124]	@ (8001f54 <SDStorage_CreateNewLogFile+0x130>)
 8001ed6:	2003      	movs	r0, #3
 8001ed8:	f003 fcba 	bl	8005850 <LOGGER_SendFormatted>
                break;
 8001edc:	e011      	b.n	8001f02 <SDStorage_CreateNewLogFile+0xde>
            case 9: // FR_WRITE_PROTECTED  
                LOG_ERROR("[SDStorage] FR_WRITE_PROTECTED - SD card is write protected");
 8001ede:	491e      	ldr	r1, [pc, #120]	@ (8001f58 <SDStorage_CreateNewLogFile+0x134>)
 8001ee0:	2003      	movs	r0, #3
 8001ee2:	f003 fcb5 	bl	8005850 <LOGGER_SendFormatted>
                break;
 8001ee6:	e00c      	b.n	8001f02 <SDStorage_CreateNewLogFile+0xde>
            case 3: // FR_NOT_READY
                LOG_ERROR("[SDStorage] FR_NOT_READY - Disk not ready");
 8001ee8:	491c      	ldr	r1, [pc, #112]	@ (8001f5c <SDStorage_CreateNewLogFile+0x138>)
 8001eea:	2003      	movs	r0, #3
 8001eec:	f003 fcb0 	bl	8005850 <LOGGER_SendFormatted>
                break;
 8001ef0:	e007      	b.n	8001f02 <SDStorage_CreateNewLogFile+0xde>
            default:
                LOG_ERROR("[SDStorage] Unknown f_open error: %d", open_result);
 8001ef2:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	4919      	ldr	r1, [pc, #100]	@ (8001f60 <SDStorage_CreateNewLogFile+0x13c>)
 8001efa:	2003      	movs	r0, #3
 8001efc:	f003 fca8 	bl	8005850 <LOGGER_SendFormatted>
                break;
 8001f00:	bf00      	nop
        }
        
        LOG_WARN("[SDStorage] Disabling SD logging due to file creation failure");
 8001f02:	4918      	ldr	r1, [pc, #96]	@ (8001f64 <SDStorage_CreateNewLogFile+0x140>)
 8001f04:	2002      	movs	r0, #2
 8001f06:	f003 fca3 	bl	8005850 <LOGGER_SendFormatted>
        g_sd_ready = false;  // SD 로깅 비활성화
 8001f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f3c <SDStorage_CreateNewLogFile+0x118>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	701a      	strb	r2, [r3, #0]
        return SDSTORAGE_FILE_ERROR;
 8001f10:	f06f 0302 	mvn.w	r3, #2
 8001f14:	e00c      	b.n	8001f30 <SDStorage_CreateNewLogFile+0x10c>
    }
    
    // 파일 생성 확인 후 즉시 닫기 (추적 등록 없이)
    f_close(&test_file);
 8001f16:	463b      	mov	r3, r7
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f012 fa3f 	bl	801439c <f_close>
    LOG_INFO("[SDStorage] File created and ready for logging: %s", g_current_log_file);
 8001f1e:	4a08      	ldr	r2, [pc, #32]	@ (8001f40 <SDStorage_CreateNewLogFile+0x11c>)
 8001f20:	4911      	ldr	r1, [pc, #68]	@ (8001f68 <SDStorage_CreateNewLogFile+0x144>)
 8001f22:	2001      	movs	r0, #1
 8001f24:	f003 fc94 	bl	8005850 <LOGGER_SendFormatted>
#else
    // PC/테스트 환경: 파일 생성 시뮬레이션 (항상 성공)
    LOG_INFO("[SDStorage] Test environment - file creation simulated");
#endif
    
    g_current_log_size = 0;
 8001f28:	4b10      	ldr	r3, [pc, #64]	@ (8001f6c <SDStorage_CreateNewLogFile+0x148>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
    return SDSTORAGE_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	f507 770c 	add.w	r7, r7, #560	@ 0x230
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	2000027d 	.word	0x2000027d
 8001f40:	20000280 	.word	0x20000280
 8001f44:	0801aebc 	.word	0x0801aebc
 8001f48:	0801ae50 	.word	0x0801ae50
 8001f4c:	0801aee4 	.word	0x0801aee4
 8001f50:	0801af04 	.word	0x0801af04
 8001f54:	0801af24 	.word	0x0801af24
 8001f58:	0801af68 	.word	0x0801af68
 8001f5c:	0801afa4 	.word	0x0801afa4
 8001f60:	0801afd0 	.word	0x0801afd0
 8001f64:	0801aff8 	.word	0x0801aff8
 8001f68:	0801b038 	.word	0x0801b038
 8001f6c:	20000380 	.word	0x20000380

08001f70 <_create_log_directory>:
    return g_current_log_size;
}

// 내부 함수 구현
static int _create_log_directory(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
#ifdef STM32F746xx
    // FatFs가 이미 정상 동작하므로 HAL 테스트 불필요
    
    // f_mkdir 전에 볼륨 상태 재확인 (에러 6 방지)
    LOG_INFO("[SDStorage] Verifying volume state before f_mkdir...");
 8001f76:	4924      	ldr	r1, [pc, #144]	@ (8002008 <_create_log_directory+0x98>)
 8001f78:	2001      	movs	r0, #1
 8001f7a:	f003 fc69 	bl	8005850 <LOGGER_SendFormatted>
    
    // 볼륨 재마운트 시도 (상태 안정화)
    FRESULT remount_result = f_mount(&SDFatFS, SDPath, 1);
 8001f7e:	2201      	movs	r2, #1
 8001f80:	4922      	ldr	r1, [pc, #136]	@ (800200c <_create_log_directory+0x9c>)
 8001f82:	4823      	ldr	r0, [pc, #140]	@ (8002010 <_create_log_directory+0xa0>)
 8001f84:	f011 fe48 	bl	8013c18 <f_mount>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	71bb      	strb	r3, [r7, #6]
    LOG_INFO("[SDStorage] Volume re-mount result: %d", remount_result);
 8001f8c:	79bb      	ldrb	r3, [r7, #6]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4920      	ldr	r1, [pc, #128]	@ (8002014 <_create_log_directory+0xa4>)
 8001f92:	2001      	movs	r0, #1
 8001f94:	f003 fc5c 	bl	8005850 <LOGGER_SendFormatted>
    
    FRESULT mkdir_result = FR_NOT_ENABLED;  // 초기값 설정
 8001f98:	230c      	movs	r3, #12
 8001f9a:	71fb      	strb	r3, [r7, #7]
    
    if (remount_result == FR_OK) {
 8001f9c:	79bb      	ldrb	r3, [r7, #6]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10f      	bne.n	8001fc2 <_create_log_directory+0x52>
        LOG_INFO("[SDStorage] Volume ready - attempting f_mkdir...");
 8001fa2:	491d      	ldr	r1, [pc, #116]	@ (8002018 <_create_log_directory+0xa8>)
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	f003 fc53 	bl	8005850 <LOGGER_SendFormatted>
        mkdir_result = f_mkdir("lora_logs");
 8001faa:	481c      	ldr	r0, [pc, #112]	@ (800201c <_create_log_directory+0xac>)
 8001fac:	f012 fa16 	bl	80143dc <f_mkdir>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	71fb      	strb	r3, [r7, #7]
        LOG_INFO("[SDStorage] f_mkdir result: %d", mkdir_result);
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4919      	ldr	r1, [pc, #100]	@ (8002020 <_create_log_directory+0xb0>)
 8001fba:	2001      	movs	r0, #1
 8001fbc:	f003 fc48 	bl	8005850 <LOGGER_SendFormatted>
 8001fc0:	e005      	b.n	8001fce <_create_log_directory+0x5e>
    } else {
        LOG_ERROR("[SDStorage] Volume re-mount failed: %d", remount_result);
 8001fc2:	79bb      	ldrb	r3, [r7, #6]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4917      	ldr	r1, [pc, #92]	@ (8002024 <_create_log_directory+0xb4>)
 8001fc8:	2003      	movs	r0, #3
 8001fca:	f003 fc41 	bl	8005850 <LOGGER_SendFormatted>
    }
    
    // FR_EXIST(9)는 이미 존재함을 의미하므로 성공으로 처리
    if (mkdir_result == FR_OK || mkdir_result == FR_EXIST) {
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d002      	beq.n	8001fda <_create_log_directory+0x6a>
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	2b08      	cmp	r3, #8
 8001fd8:	d105      	bne.n	8001fe6 <_create_log_directory+0x76>
        LOG_INFO("[SDStorage] Directory ready (created or already exists)");
 8001fda:	4913      	ldr	r1, [pc, #76]	@ (8002028 <_create_log_directory+0xb8>)
 8001fdc:	2001      	movs	r0, #1
 8001fde:	f003 fc37 	bl	8005850 <LOGGER_SendFormatted>
        return SDSTORAGE_OK;  // 디렉토리 성공
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	e00b      	b.n	8001ffe <_create_log_directory+0x8e>
    } else {
        LOG_ERROR("[SDStorage] f_mkdir failed: %d - FatFs level problem", mkdir_result);
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4910      	ldr	r1, [pc, #64]	@ (800202c <_create_log_directory+0xbc>)
 8001fec:	2003      	movs	r0, #3
 8001fee:	f003 fc2f 	bl	8005850 <LOGGER_SendFormatted>
        LOG_INFO("[SDStorage] Will try direct file creation without directory");
 8001ff2:	490f      	ldr	r1, [pc, #60]	@ (8002030 <_create_log_directory+0xc0>)
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	f003 fc2b 	bl	8005850 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;  // 디렉토리 실패
 8001ffa:	f04f 33ff 	mov.w	r3, #4294967295
#else
    // PC: mkdir 시뮬레이션 (테스트에서는 성공으로 가정)
    LOG_INFO("[SDStorage] Test environment - directory creation simulated");
    return SDSTORAGE_OK;
#endif
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	0801b06c 	.word	0x0801b06c
 800200c:	200026d4 	.word	0x200026d4
 8002010:	200026d8 	.word	0x200026d8
 8002014:	0801b0a4 	.word	0x0801b0a4
 8002018:	0801b0cc 	.word	0x0801b0cc
 800201c:	0801b100 	.word	0x0801b100
 8002020:	0801b10c 	.word	0x0801b10c
 8002024:	0801b12c 	.word	0x0801b12c
 8002028:	0801b154 	.word	0x0801b154
 800202c:	0801b18c 	.word	0x0801b18c
 8002030:	0801b1c4 	.word	0x0801b1c4

08002034 <_generate_log_filename>:

static int _generate_log_filename(char* filename, size_t max_len)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	f5ad 7d50 	sub.w	sp, sp, #832	@ 0x340
 800203a:	af00      	add	r7, sp, #0
 800203c:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8002040:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8002044:	6018      	str	r0, [r3, #0]
 8002046:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 800204a:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 800204e:	6019      	str	r1, [r3, #0]
    // 8.3 형식 파일명 생성 - 기존 파일 확인하여 중복 방지
    static int file_counter = 0;  // 0부터 시작하여 첫 번째 호출에서 1로 설정
    
    // 첫 번째 호출에서만 기존 파일 확인
    if (file_counter == 0) {
 8002050:	4b48      	ldr	r3, [pc, #288]	@ (8002174 <_generate_log_filename+0x140>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d14a      	bne.n	80020ee <_generate_log_filename+0xba>
        file_counter = 1;
 8002058:	4b46      	ldr	r3, [pc, #280]	@ (8002174 <_generate_log_filename+0x140>)
 800205a:	2201      	movs	r2, #1
 800205c:	601a      	str	r2, [r3, #0]
        
        // 기존 파일들 확인하여 다음 번호 찾기
        for (int i = 1; i <= 9999; i++) {
 800205e:	2301      	movs	r3, #1
 8002060:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8002064:	e034      	b.n	80020d0 <_generate_log_filename+0x9c>
            char test_filename[256];
            FIL test_file;
            
            if (g_directory_available) {
 8002066:	4b44      	ldr	r3, [pc, #272]	@ (8002178 <_generate_log_filename+0x144>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d009      	beq.n	8002082 <_generate_log_filename+0x4e>
                snprintf(test_filename, sizeof(test_filename), "lora_logs/LORA%04d.TXT", i);
 800206e:	f107 0008 	add.w	r0, r7, #8
 8002072:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8002076:	4a41      	ldr	r2, [pc, #260]	@ (800217c <_generate_log_filename+0x148>)
 8002078:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800207c:	f015 fcfc 	bl	8017a78 <sniprintf>
 8002080:	e008      	b.n	8002094 <_generate_log_filename+0x60>
            } else {
                snprintf(test_filename, sizeof(test_filename), "LORA%04d.TXT", i);
 8002082:	f107 0008 	add.w	r0, r7, #8
 8002086:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 800208a:	4a3d      	ldr	r2, [pc, #244]	@ (8002180 <_generate_log_filename+0x14c>)
 800208c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002090:	f015 fcf2 	bl	8017a78 <sniprintf>
            }
            
            // 파일이 존재하는지 확인
            FRESULT test_result = f_open(&test_file, test_filename, FA_READ);
 8002094:	f107 0108 	add.w	r1, r7, #8
 8002098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800209c:	2201      	movs	r2, #1
 800209e:	4618      	mov	r0, r3
 80020a0:	f011 fdfe 	bl	8013ca0 <f_open>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f887 3337 	strb.w	r3, [r7, #823]	@ 0x337
            if (test_result == FR_OK) {
 80020aa:	f897 3337 	ldrb.w	r3, [r7, #823]	@ 0x337
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d115      	bne.n	80020de <_generate_log_filename+0xaa>
                f_close(&test_file);
 80020b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80020b6:	4618      	mov	r0, r3
 80020b8:	f012 f970 	bl	801439c <f_close>
                file_counter = i + 1;  // 다음 번호로 설정
 80020bc:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 80020c0:	3301      	adds	r3, #1
 80020c2:	4a2c      	ldr	r2, [pc, #176]	@ (8002174 <_generate_log_filename+0x140>)
 80020c4:	6013      	str	r3, [r2, #0]
        for (int i = 1; i <= 9999; i++) {
 80020c6:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 80020ca:	3301      	adds	r3, #1
 80020cc:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 80020d0:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 80020d4:	f242 720f 	movw	r2, #9999	@ 0x270f
 80020d8:	4293      	cmp	r3, r2
 80020da:	ddc4      	ble.n	8002066 <_generate_log_filename+0x32>
 80020dc:	e000      	b.n	80020e0 <_generate_log_filename+0xac>
            } else {
                break;  // 파일이 없으면 현재 번호 사용
 80020de:	bf00      	nop
            }
        }
        
        LOG_DEBUG("[SDStorage] Auto-detected next log file number: %d", file_counter);
 80020e0:	4b24      	ldr	r3, [pc, #144]	@ (8002174 <_generate_log_filename+0x140>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	461a      	mov	r2, r3
 80020e6:	4927      	ldr	r1, [pc, #156]	@ (8002184 <_generate_log_filename+0x150>)
 80020e8:	2000      	movs	r0, #0
 80020ea:	f003 fbb1 	bl	8005850 <LOGGER_SendFormatted>
    }
    
    // 디렉토리 사용 가능 여부에 따라 경로 결정
    int result;
    if (g_directory_available) {
 80020ee:	4b22      	ldr	r3, [pc, #136]	@ (8002178 <_generate_log_filename+0x144>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d011      	beq.n	800211a <_generate_log_filename+0xe6>
        // lora_logs 디렉토리에 파일 생성 (TXT 형식)
        result = snprintf(filename, max_len, "lora_logs/LORA%04d.TXT", file_counter);
 80020f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002174 <_generate_log_filename+0x140>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 80020fe:	f5a2 7150 	sub.w	r1, r2, #832	@ 0x340
 8002102:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 8002106:	f5a2 704f 	sub.w	r0, r2, #828	@ 0x33c
 800210a:	4a1c      	ldr	r2, [pc, #112]	@ (800217c <_generate_log_filename+0x148>)
 800210c:	6809      	ldr	r1, [r1, #0]
 800210e:	6800      	ldr	r0, [r0, #0]
 8002110:	f015 fcb2 	bl	8017a78 <sniprintf>
 8002114:	f8c7 0338 	str.w	r0, [r7, #824]	@ 0x338
 8002118:	e010      	b.n	800213c <_generate_log_filename+0x108>
    } else {
        // 루트 디렉토리에 파일 생성 (TXT 형식)
        result = snprintf(filename, max_len, "LORA%04d.TXT", file_counter);
 800211a:	4b16      	ldr	r3, [pc, #88]	@ (8002174 <_generate_log_filename+0x140>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 8002122:	f5a2 7150 	sub.w	r1, r2, #832	@ 0x340
 8002126:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 800212a:	f5a2 704f 	sub.w	r0, r2, #828	@ 0x33c
 800212e:	4a14      	ldr	r2, [pc, #80]	@ (8002180 <_generate_log_filename+0x14c>)
 8002130:	6809      	ldr	r1, [r1, #0]
 8002132:	6800      	ldr	r0, [r0, #0]
 8002134:	f015 fca0 	bl	8017a78 <sniprintf>
 8002138:	f8c7 0338 	str.w	r0, [r7, #824]	@ 0x338
    }
    
    file_counter++;
 800213c:	4b0d      	ldr	r3, [pc, #52]	@ (8002174 <_generate_log_filename+0x140>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	3301      	adds	r3, #1
 8002142:	4a0c      	ldr	r2, [pc, #48]	@ (8002174 <_generate_log_filename+0x140>)
 8002144:	6013      	str	r3, [r2, #0]
    
    if (result < 0 || (size_t)result >= max_len) {
 8002146:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 800214a:	2b00      	cmp	r3, #0
 800214c:	db08      	blt.n	8002160 <_generate_log_filename+0x12c>
 800214e:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8002152:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 8002156:	f5a2 7250 	sub.w	r2, r2, #832	@ 0x340
 800215a:	6812      	ldr	r2, [r2, #0]
 800215c:	429a      	cmp	r2, r3
 800215e:	d802      	bhi.n	8002166 <_generate_log_filename+0x132>
        return SDSTORAGE_ERROR;
 8002160:	f04f 33ff 	mov.w	r3, #4294967295
 8002164:	e000      	b.n	8002168 <_generate_log_filename+0x134>
    }
    
    return SDSTORAGE_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	f507 7750 	add.w	r7, r7, #832	@ 0x340
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	2000168c 	.word	0x2000168c
 8002178:	20000384 	.word	0x20000384
 800217c:	0801b200 	.word	0x0801b200
 8002180:	0801b218 	.word	0x0801b218
 8002184:	0801b228 	.word	0x0801b228

08002188 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
	...

080021bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4a07      	ldr	r2, [pc, #28]	@ (80021e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80021cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	4a06      	ldr	r2, [pc, #24]	@ (80021ec <vApplicationGetIdleTaskMemory+0x30>)
 80021d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2280      	movs	r2, #128	@ 0x80
 80021d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80021da:	bf00      	nop
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20001690 	.word	0x20001690
 80021ec:	200016e8 	.word	0x200016e8

080021f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021f0:	b5b0      	push	{r4, r5, r7, lr}
 80021f2:	b09a      	sub	sp, #104	@ 0x68
 80021f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // 리셋 카운터 추가
  static uint32_t reset_count = 0;
  reset_count++;
 80021f6:	4b96      	ldr	r3, [pc, #600]	@ (8002450 <main+0x260>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	3301      	adds	r3, #1
 80021fc:	4a94      	ldr	r2, [pc, #592]	@ (8002450 <main+0x260>)
 80021fe:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002200:	f004 f919 	bl	8006436 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002204:	f000 f966 	bl	80024d4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002208:	f000 f9d6 	bl	80025b8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800220c:	f001 f9a0 	bl	8003550 <MX_GPIO_Init>
  MX_DMA_Init();  // DMA는 UART보다 먼저 초기화
 8002210:	f001 ffe6 	bl	80041e0 <MX_DMA_Init>
  MX_USART6_DMA_Init();  // USART6 DMA 초기화 (UART보다 먼저)
 8002214:	f002 f80a 	bl	800422c <MX_USART6_DMA_Init>
  MX_ADC3_Init();
 8002218:	f000 fa00 	bl	800261c <MX_ADC3_Init>
  MX_CRC_Init();
 800221c:	f000 fa50 	bl	80026c0 <MX_CRC_Init>
  MX_DCMI_Init();
 8002220:	f000 fa70 	bl	8002704 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8002224:	f000 faa2 	bl	800276c <MX_DMA2D_Init>
  MX_ETH_Init();
 8002228:	f000 fad2 	bl	80027d0 <MX_ETH_Init>
  MX_FMC_Init();
 800222c:	f001 f940 	bl	80034b0 <MX_FMC_Init>
  MX_I2C1_Init();
 8002230:	f000 fb1c 	bl	800286c <MX_I2C1_Init>
  MX_I2C3_Init();
 8002234:	f000 fb5a 	bl	80028ec <MX_I2C3_Init>
  MX_LTDC_Init();
 8002238:	f000 fb98 	bl	800296c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800223c:	f000 fc18 	bl	8002a70 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8002240:	f000 fc42 	bl	8002ac8 <MX_RTC_Init>
  MX_SAI2_Init();
 8002244:	f000 fce4 	bl	8002c10 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8002248:	f000 fd8a 	bl	8002d60 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 800224c:	f000 fdb6 	bl	8002dbc <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8002250:	f000 fde4 	bl	8002e1c <MX_SPI2_Init>
  MX_TIM1_Init();
 8002254:	f000 fe20 	bl	8002e98 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002258:	f000 feca 	bl	8002ff0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800225c:	f000 ff3e 	bl	80030dc <MX_TIM3_Init>
  MX_TIM5_Init();
 8002260:	f000 ffb4 	bl	80031cc <MX_TIM5_Init>
  MX_TIM8_Init();
 8002264:	f001 f82a 	bl	80032bc <MX_TIM8_Init>
  MX_TIM12_Init();
 8002268:	f001 f87c 	bl	8003364 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 800226c:	f001 f8c0 	bl	80033f0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002270:	f001 f8ee 	bl	8003450 <MX_USART6_UART_Init>
  
  // UART 초기화 후 DMA 핸들 다시 연결 (HAL_UART_Init에서 리셋될 수 있음)
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8002274:	4b77      	ldr	r3, [pc, #476]	@ (8002454 <main+0x264>)
 8002276:	4a78      	ldr	r2, [pc, #480]	@ (8002458 <main+0x268>)
 8002278:	675a      	str	r2, [r3, #116]	@ 0x74
 800227a:	4b77      	ldr	r3, [pc, #476]	@ (8002458 <main+0x268>)
 800227c:	4a75      	ldr	r2, [pc, #468]	@ (8002454 <main+0x264>)
 800227e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  // UART IDLE 인터럽트 활성화 (DMA 기반 수신을 위해)
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8002280:	4b74      	ldr	r3, [pc, #464]	@ (8002454 <main+0x264>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	4b73      	ldr	r3, [pc, #460]	@ (8002454 <main+0x264>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0210 	orr.w	r2, r2, #16
 800228e:	601a      	str	r2, [r3, #0]
  MX_FATFS_Init();
 8002290:	f00f fd00 	bl	8011c94 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  
  // Logger 초기화 (터미널 출력만 사용)
  LOGGER_Connect("STM32", 0);
 8002294:	2100      	movs	r1, #0
 8002296:	4871      	ldr	r0, [pc, #452]	@ (800245c <main+0x26c>)
 8002298:	f003 fa4e 	bl	8005738 <LOGGER_Connect>
  
  // 리셋 원인 확인
  LOG_INFO("=== SYSTEM START (Reset #%lu) ===", reset_count);
 800229c:	4b6c      	ldr	r3, [pc, #432]	@ (8002450 <main+0x260>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	461a      	mov	r2, r3
 80022a2:	496f      	ldr	r1, [pc, #444]	@ (8002460 <main+0x270>)
 80022a4:	2001      	movs	r0, #1
 80022a6:	f003 fad3 	bl	8005850 <LOGGER_SendFormatted>
  
  // RCC 리셋 플래그 확인
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST)) LOG_WARN("Reset: BOR (Brown-out)");
 80022aa:	4b6e      	ldr	r3, [pc, #440]	@ (8002464 <main+0x274>)
 80022ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <main+0xce>
 80022b6:	496c      	ldr	r1, [pc, #432]	@ (8002468 <main+0x278>)
 80022b8:	2002      	movs	r0, #2
 80022ba:	f003 fac9 	bl	8005850 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)) LOG_WARN("Reset: PIN (External)");
 80022be:	4b69      	ldr	r3, [pc, #420]	@ (8002464 <main+0x274>)
 80022c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <main+0xe2>
 80022ca:	4968      	ldr	r1, [pc, #416]	@ (800246c <main+0x27c>)
 80022cc:	2002      	movs	r0, #2
 80022ce:	f003 fabf 	bl	8005850 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST)) LOG_WARN("Reset: POR (Power-on)");
 80022d2:	4b64      	ldr	r3, [pc, #400]	@ (8002464 <main+0x274>)
 80022d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <main+0xf6>
 80022de:	4964      	ldr	r1, [pc, #400]	@ (8002470 <main+0x280>)
 80022e0:	2002      	movs	r0, #2
 80022e2:	f003 fab5 	bl	8005850 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)) LOG_WARN("Reset: SOFTWARE");
 80022e6:	4b5f      	ldr	r3, [pc, #380]	@ (8002464 <main+0x274>)
 80022e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <main+0x10a>
 80022f2:	4960      	ldr	r1, [pc, #384]	@ (8002474 <main+0x284>)
 80022f4:	2002      	movs	r0, #2
 80022f6:	f003 faab 	bl	8005850 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST)) LOG_WARN("Reset: IWDG (Watchdog)");
 80022fa:	4b5a      	ldr	r3, [pc, #360]	@ (8002464 <main+0x274>)
 80022fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <main+0x11e>
 8002306:	495c      	ldr	r1, [pc, #368]	@ (8002478 <main+0x288>)
 8002308:	2002      	movs	r0, #2
 800230a:	f003 faa1 	bl	8005850 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST)) LOG_WARN("Reset: WWDG (Window Watchdog)");
 800230e:	4b55      	ldr	r3, [pc, #340]	@ (8002464 <main+0x274>)
 8002310:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002312:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <main+0x132>
 800231a:	4958      	ldr	r1, [pc, #352]	@ (800247c <main+0x28c>)
 800231c:	2002      	movs	r0, #2
 800231e:	f003 fa97 	bl	8005850 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST)) LOG_WARN("Reset: LPWR (Low Power)");
 8002322:	4b50      	ldr	r3, [pc, #320]	@ (8002464 <main+0x274>)
 8002324:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002326:	2b00      	cmp	r3, #0
 8002328:	da03      	bge.n	8002332 <main+0x142>
 800232a:	4955      	ldr	r1, [pc, #340]	@ (8002480 <main+0x290>)
 800232c:	2002      	movs	r0, #2
 800232e:	f003 fa8f 	bl	8005850 <LOGGER_SendFormatted>
  
  // 플래그 클리어
  __HAL_RCC_CLEAR_RESET_FLAGS();
 8002332:	4b4c      	ldr	r3, [pc, #304]	@ (8002464 <main+0x274>)
 8002334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002336:	4a4b      	ldr	r2, [pc, #300]	@ (8002464 <main+0x274>)
 8002338:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800233c:	6753      	str	r3, [r2, #116]	@ 0x74
  
  // ===== 하드웨어 초기화만 main()에서 수행 =====
  
  // SD카드 초기화는 FreeRTOS 태스크에서 수행 (커널 시작 후)
  LOG_INFO("🔄 SD card initialization will be performed in FreeRTOS task");
 800233e:	4951      	ldr	r1, [pc, #324]	@ (8002484 <main+0x294>)
 8002340:	2001      	movs	r0, #1
 8002342:	f003 fa85 	bl	8005850 <LOGGER_SendFormatted>
  g_sd_initialization_result = -1;  // 초기화 안됨 상태
 8002346:	4b50      	ldr	r3, [pc, #320]	@ (8002488 <main+0x298>)
 8002348:	f04f 32ff 	mov.w	r2, #4294967295
 800234c:	601a      	str	r2, [r3, #0]
  
  // UART6 DMA 초기화 건너뛰기 (이미 main 초기화에서 완료됨)
  LOG_INFO("📤 UART DMA already initialized in main() - skipping");
 800234e:	494f      	ldr	r1, [pc, #316]	@ (800248c <main+0x29c>)
 8002350:	2001      	movs	r0, #1
 8002352:	f003 fa7d 	bl	8005850 <LOGGER_SendFormatted>
  
  // IDLE 인터럽트만 활성화 (메시지 끝 감지용)
  LOG_INFO("📤 Enabling UART IDLE interrupt...");
 8002356:	494e      	ldr	r1, [pc, #312]	@ (8002490 <main+0x2a0>)
 8002358:	2001      	movs	r0, #1
 800235a:	f003 fa79 	bl	8005850 <LOGGER_SendFormatted>
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 800235e:	4b3d      	ldr	r3, [pc, #244]	@ (8002454 <main+0x264>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4b3b      	ldr	r3, [pc, #236]	@ (8002454 <main+0x264>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f042 0210 	orr.w	r2, r2, #16
 800236c:	601a      	str	r2, [r3, #0]
  LOG_INFO("✅ UART setup completed");
 800236e:	4949      	ldr	r1, [pc, #292]	@ (8002494 <main+0x2a4>)
 8002370:	2001      	movs	r0, #1
 8002372:	f003 fa6d 	bl	8005850 <LOGGER_SendFormatted>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  // SD 로깅 큐 생성 (안전성 체크 포함)
  LOG_INFO("📤 Creating SD logging queue (size: %d, item: %d bytes)", 
 8002376:	2388      	movs	r3, #136	@ 0x88
 8002378:	220a      	movs	r2, #10
 800237a:	4947      	ldr	r1, [pc, #284]	@ (8002498 <main+0x2a8>)
 800237c:	2001      	movs	r0, #1
 800237e:	f003 fa67 	bl	8005850 <LOGGER_SendFormatted>
           SD_LOG_QUEUE_SIZE, sizeof(SDLogEntry_t));
  
  osMessageQDef(sdLogQueue, SD_LOG_QUEUE_SIZE, SDLogEntry_t);
 8002382:	4b46      	ldr	r3, [pc, #280]	@ (800249c <main+0x2ac>)
 8002384:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8002388:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800238a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  sdLogQueueHandle = osMessageCreate(osMessageQ(sdLogQueue), NULL);
 800238e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002392:	2100      	movs	r1, #0
 8002394:	4618      	mov	r0, r3
 8002396:	f012 fe5d 	bl	8015054 <osMessageCreate>
 800239a:	4603      	mov	r3, r0
 800239c:	4a40      	ldr	r2, [pc, #256]	@ (80024a0 <main+0x2b0>)
 800239e:	6013      	str	r3, [r2, #0]
  
  if (sdLogQueueHandle == NULL) {
 80023a0:	4b3f      	ldr	r3, [pc, #252]	@ (80024a0 <main+0x2b0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d104      	bne.n	80023b2 <main+0x1c2>
    LOG_ERROR("❌ SD logging queue creation FAILED - insufficient memory");
 80023a8:	493e      	ldr	r1, [pc, #248]	@ (80024a4 <main+0x2b4>)
 80023aa:	2003      	movs	r0, #3
 80023ac:	f003 fa50 	bl	8005850 <LOGGER_SendFormatted>
 80023b0:	e003      	b.n	80023ba <main+0x1ca>
  } else {
    LOG_INFO("✅ SD logging queue created successfully");
 80023b2:	493d      	ldr	r1, [pc, #244]	@ (80024a8 <main+0x2b8>)
 80023b4:	2001      	movs	r0, #1
 80023b6:	f003 fa4b 	bl	8005850 <LOGGER_SendFormatted>
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 8192);
 80023ba:	4b3c      	ldr	r3, [pc, #240]	@ (80024ac <main+0x2bc>)
 80023bc:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80023c0:	461d      	mov	r5, r3
 80023c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80023ce:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80023d2:	2100      	movs	r1, #0
 80023d4:	4618      	mov	r0, r3
 80023d6:	f012 fddd 	bl	8014f94 <osThreadCreate>
 80023da:	4603      	mov	r3, r0
 80023dc:	4a34      	ldr	r2, [pc, #208]	@ (80024b0 <main+0x2c0>)
 80023de:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* 수신 태스크 활성화 - LoRa 통신을 위해 필수 */
  osThreadDef(receiveTask, StartReceiveTask, osPriorityNormal, 0, 4096);
 80023e0:	4b34      	ldr	r3, [pc, #208]	@ (80024b4 <main+0x2c4>)
 80023e2:	f107 0420 	add.w	r4, r7, #32
 80023e6:	461d      	mov	r5, r3
 80023e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receiveTaskHandle = osThreadCreate(osThread(receiveTask), NULL);
 80023f4:	f107 0320 	add.w	r3, r7, #32
 80023f8:	2100      	movs	r1, #0
 80023fa:	4618      	mov	r0, r3
 80023fc:	f012 fdca 	bl	8014f94 <osThreadCreate>
 8002400:	4603      	mov	r3, r0
 8002402:	4a2d      	ldr	r2, [pc, #180]	@ (80024b8 <main+0x2c8>)
 8002404:	6013      	str	r3, [r2, #0]
  LOG_INFO("📤 Receive Task enabled for LoRa communication");
 8002406:	492d      	ldr	r1, [pc, #180]	@ (80024bc <main+0x2cc>)
 8002408:	2001      	movs	r0, #1
 800240a:	f003 fa21 	bl	8005850 <LOGGER_SendFormatted>
  
  /* SD 로깅 태스크 활성화 - SD 카드 로깅을 위해 */
  osThreadDef(sdLoggingTask, StartSDLoggingTask, osPriorityLow, 0, 4096);
 800240e:	4b2c      	ldr	r3, [pc, #176]	@ (80024c0 <main+0x2d0>)
 8002410:	1d3c      	adds	r4, r7, #4
 8002412:	461d      	mov	r5, r3
 8002414:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002416:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002418:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800241c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sdLoggingTaskHandle = osThreadCreate(osThread(sdLoggingTask), NULL);
 8002420:	1d3b      	adds	r3, r7, #4
 8002422:	2100      	movs	r1, #0
 8002424:	4618      	mov	r0, r3
 8002426:	f012 fdb5 	bl	8014f94 <osThreadCreate>
 800242a:	4603      	mov	r3, r0
 800242c:	4a25      	ldr	r2, [pc, #148]	@ (80024c4 <main+0x2d4>)
 800242e:	6013      	str	r3, [r2, #0]
  LOG_INFO("📤 SD Logging Task enabled");
 8002430:	4925      	ldr	r1, [pc, #148]	@ (80024c8 <main+0x2d8>)
 8002432:	2001      	movs	r0, #1
 8002434:	f003 fa0c 	bl	8005850 <LOGGER_SendFormatted>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  LOG_INFO("🚀 Starting FreeRTOS scheduler...");
 8002438:	4924      	ldr	r1, [pc, #144]	@ (80024cc <main+0x2dc>)
 800243a:	2001      	movs	r0, #1
 800243c:	f003 fa08 	bl	8005850 <LOGGER_SendFormatted>
  osKernelStart();
 8002440:	f012 fd85 	bl	8014f4e <osKernelStart>
  
  // 이 부분은 절대 실행되면 안됨 (스케줄러가 제어를 가져가야 함)
  LOG_ERROR("❌ FATAL: Scheduler failed to start - system halted");
 8002444:	4922      	ldr	r1, [pc, #136]	@ (80024d0 <main+0x2e0>)
 8002446:	2003      	movs	r0, #3
 8002448:	f003 fa02 	bl	8005850 <LOGGER_SendFormatted>

  /* We should never get here as control is now taken by the scheduler */
  
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800244c:	bf00      	nop
 800244e:	e7fd      	b.n	800244c <main+0x25c>
 8002450:	20002450 	.word	0x20002450
 8002454:	20002114 	.word	0x20002114
 8002458:	200023ec 	.word	0x200023ec
 800245c:	0801b25c 	.word	0x0801b25c
 8002460:	0801b264 	.word	0x0801b264
 8002464:	40023800 	.word	0x40023800
 8002468:	0801b288 	.word	0x0801b288
 800246c:	0801b2a0 	.word	0x0801b2a0
 8002470:	0801b2b8 	.word	0x0801b2b8
 8002474:	0801b2d0 	.word	0x0801b2d0
 8002478:	0801b2e0 	.word	0x0801b2e0
 800247c:	0801b2f8 	.word	0x0801b2f8
 8002480:	0801b318 	.word	0x0801b318
 8002484:	0801b330 	.word	0x0801b330
 8002488:	20000014 	.word	0x20000014
 800248c:	0801b370 	.word	0x0801b370
 8002490:	0801b3a8 	.word	0x0801b3a8
 8002494:	0801b3d0 	.word	0x0801b3d0
 8002498:	0801b3ec 	.word	0x0801b3ec
 800249c:	0801b540 	.word	0x0801b540
 80024a0:	200021dc 	.word	0x200021dc
 80024a4:	0801b428 	.word	0x0801b428
 80024a8:	0801b464 	.word	0x0801b464
 80024ac:	0801b55c 	.word	0x0801b55c
 80024b0:	200021d0 	.word	0x200021d0
 80024b4:	0801b584 	.word	0x0801b584
 80024b8:	200021d4 	.word	0x200021d4
 80024bc:	0801b490 	.word	0x0801b490
 80024c0:	0801b5b0 	.word	0x0801b5b0
 80024c4:	200021d8 	.word	0x200021d8
 80024c8:	0801b4c4 	.word	0x0801b4c4
 80024cc:	0801b4e4 	.word	0x0801b4e4
 80024d0:	0801b508 	.word	0x0801b508

080024d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b094      	sub	sp, #80	@ 0x50
 80024d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024da:	f107 0320 	add.w	r3, r7, #32
 80024de:	2230      	movs	r2, #48	@ 0x30
 80024e0:	2100      	movs	r1, #0
 80024e2:	4618      	mov	r0, r3
 80024e4:	f015 fbce 	bl	8017c84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024e8:	f107 030c 	add.w	r3, r7, #12
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80024f8:	f008 fa4c 	bl	800a994 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024fc:	4b2c      	ldr	r3, [pc, #176]	@ (80025b0 <SystemClock_Config+0xdc>)
 80024fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002500:	4a2b      	ldr	r2, [pc, #172]	@ (80025b0 <SystemClock_Config+0xdc>)
 8002502:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002506:	6413      	str	r3, [r2, #64]	@ 0x40
 8002508:	4b29      	ldr	r3, [pc, #164]	@ (80025b0 <SystemClock_Config+0xdc>)
 800250a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002514:	4b27      	ldr	r3, [pc, #156]	@ (80025b4 <SystemClock_Config+0xe0>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a26      	ldr	r2, [pc, #152]	@ (80025b4 <SystemClock_Config+0xe0>)
 800251a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800251e:	6013      	str	r3, [r2, #0]
 8002520:	4b24      	ldr	r3, [pc, #144]	@ (80025b4 <SystemClock_Config+0xe0>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002528:	607b      	str	r3, [r7, #4]
 800252a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800252c:	2309      	movs	r3, #9
 800252e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002530:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002534:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002536:	2301      	movs	r3, #1
 8002538:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800253a:	2302      	movs	r3, #2
 800253c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800253e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002542:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002544:	2319      	movs	r3, #25
 8002546:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8002548:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800254c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800254e:	2302      	movs	r3, #2
 8002550:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002552:	2309      	movs	r3, #9
 8002554:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002556:	f107 0320 	add.w	r3, r7, #32
 800255a:	4618      	mov	r0, r3
 800255c:	f008 fb3c 	bl	800abd8 <HAL_RCC_OscConfig>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002566:	f001 fe35 	bl	80041d4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800256a:	f008 fa23 	bl	800a9b4 <HAL_PWREx_EnableOverDrive>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002574:	f001 fe2e 	bl	80041d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002578:	230f      	movs	r3, #15
 800257a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800257c:	2302      	movs	r3, #2
 800257e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002584:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002588:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800258a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800258e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002590:	f107 030c 	add.w	r3, r7, #12
 8002594:	2106      	movs	r1, #6
 8002596:	4618      	mov	r0, r3
 8002598:	f008 fdc2 	bl	800b120 <HAL_RCC_ClockConfig>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80025a2:	f001 fe17 	bl	80041d4 <Error_Handler>
  }
}
 80025a6:	bf00      	nop
 80025a8:	3750      	adds	r7, #80	@ 0x50
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40007000 	.word	0x40007000

080025b8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b0a2      	sub	sp, #136	@ 0x88
 80025bc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025be:	1d3b      	adds	r3, r7, #4
 80025c0:	2284      	movs	r2, #132	@ 0x84
 80025c2:	2100      	movs	r1, #0
 80025c4:	4618      	mov	r0, r3
 80025c6:	f015 fb5d 	bl	8017c84 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 80025ca:	4b13      	ldr	r3, [pc, #76]	@ (8002618 <PeriphCommonClock_Config+0x60>)
 80025cc:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80025ce:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80025d2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80025d4:	2305      	movs	r3, #5
 80025d6:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80025d8:	2302      	movs	r3, #2
 80025da:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80025dc:	2303      	movs	r3, #3
 80025de:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80025e0:	2301      	movs	r3, #1
 80025e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80025e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025e8:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80025ea:	2300      	movs	r3, #0
 80025ec:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80025ee:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80025f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80025f6:	2300      	movs	r3, #0
 80025f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025fc:	1d3b      	adds	r3, r7, #4
 80025fe:	4618      	mov	r0, r3
 8002600:	f008 ffa6 	bl	800b550 <HAL_RCCEx_PeriphCLKConfig>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800260a:	f001 fde3 	bl	80041d4 <Error_Handler>
  }
}
 800260e:	bf00      	nop
 8002610:	3788      	adds	r7, #136	@ 0x88
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	00b00008 	.word	0x00b00008

0800261c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002622:	463b      	mov	r3, r7
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800262e:	4b21      	ldr	r3, [pc, #132]	@ (80026b4 <MX_ADC3_Init+0x98>)
 8002630:	4a21      	ldr	r2, [pc, #132]	@ (80026b8 <MX_ADC3_Init+0x9c>)
 8002632:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002634:	4b1f      	ldr	r3, [pc, #124]	@ (80026b4 <MX_ADC3_Init+0x98>)
 8002636:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800263a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800263c:	4b1d      	ldr	r3, [pc, #116]	@ (80026b4 <MX_ADC3_Init+0x98>)
 800263e:	2200      	movs	r2, #0
 8002640:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002642:	4b1c      	ldr	r3, [pc, #112]	@ (80026b4 <MX_ADC3_Init+0x98>)
 8002644:	2200      	movs	r2, #0
 8002646:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002648:	4b1a      	ldr	r3, [pc, #104]	@ (80026b4 <MX_ADC3_Init+0x98>)
 800264a:	2200      	movs	r2, #0
 800264c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800264e:	4b19      	ldr	r3, [pc, #100]	@ (80026b4 <MX_ADC3_Init+0x98>)
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002656:	4b17      	ldr	r3, [pc, #92]	@ (80026b4 <MX_ADC3_Init+0x98>)
 8002658:	2200      	movs	r2, #0
 800265a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800265c:	4b15      	ldr	r3, [pc, #84]	@ (80026b4 <MX_ADC3_Init+0x98>)
 800265e:	4a17      	ldr	r2, [pc, #92]	@ (80026bc <MX_ADC3_Init+0xa0>)
 8002660:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002662:	4b14      	ldr	r3, [pc, #80]	@ (80026b4 <MX_ADC3_Init+0x98>)
 8002664:	2200      	movs	r2, #0
 8002666:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002668:	4b12      	ldr	r3, [pc, #72]	@ (80026b4 <MX_ADC3_Init+0x98>)
 800266a:	2201      	movs	r2, #1
 800266c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800266e:	4b11      	ldr	r3, [pc, #68]	@ (80026b4 <MX_ADC3_Init+0x98>)
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002676:	4b0f      	ldr	r3, [pc, #60]	@ (80026b4 <MX_ADC3_Init+0x98>)
 8002678:	2201      	movs	r2, #1
 800267a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800267c:	480d      	ldr	r0, [pc, #52]	@ (80026b4 <MX_ADC3_Init+0x98>)
 800267e:	f003 ff2b 	bl	80064d8 <HAL_ADC_Init>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8002688:	f001 fda4 	bl	80041d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800268c:	2304      	movs	r3, #4
 800268e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002690:	2301      	movs	r3, #1
 8002692:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002694:	2300      	movs	r3, #0
 8002696:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002698:	463b      	mov	r3, r7
 800269a:	4619      	mov	r1, r3
 800269c:	4805      	ldr	r0, [pc, #20]	@ (80026b4 <MX_ADC3_Init+0x98>)
 800269e:	f003 ff5f 	bl	8006560 <HAL_ADC_ConfigChannel>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80026a8:	f001 fd94 	bl	80041d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80026ac:	bf00      	nop
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	20001920 	.word	0x20001920
 80026b8:	40012200 	.word	0x40012200
 80026bc:	0f000001 	.word	0x0f000001

080026c0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80026c4:	4b0d      	ldr	r3, [pc, #52]	@ (80026fc <MX_CRC_Init+0x3c>)
 80026c6:	4a0e      	ldr	r2, [pc, #56]	@ (8002700 <MX_CRC_Init+0x40>)
 80026c8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80026ca:	4b0c      	ldr	r3, [pc, #48]	@ (80026fc <MX_CRC_Init+0x3c>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80026d0:	4b0a      	ldr	r3, [pc, #40]	@ (80026fc <MX_CRC_Init+0x3c>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80026d6:	4b09      	ldr	r3, [pc, #36]	@ (80026fc <MX_CRC_Init+0x3c>)
 80026d8:	2200      	movs	r2, #0
 80026da:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80026dc:	4b07      	ldr	r3, [pc, #28]	@ (80026fc <MX_CRC_Init+0x3c>)
 80026de:	2200      	movs	r2, #0
 80026e0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80026e2:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <MX_CRC_Init+0x3c>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80026e8:	4804      	ldr	r0, [pc, #16]	@ (80026fc <MX_CRC_Init+0x3c>)
 80026ea:	f004 fa6f 	bl	8006bcc <HAL_CRC_Init>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80026f4:	f001 fd6e 	bl	80041d4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80026f8:	bf00      	nop
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	20001968 	.word	0x20001968
 8002700:	40023000 	.word	0x40023000

08002704 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8002708:	4b16      	ldr	r3, [pc, #88]	@ (8002764 <MX_DCMI_Init+0x60>)
 800270a:	4a17      	ldr	r2, [pc, #92]	@ (8002768 <MX_DCMI_Init+0x64>)
 800270c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800270e:	4b15      	ldr	r3, [pc, #84]	@ (8002764 <MX_DCMI_Init+0x60>)
 8002710:	2200      	movs	r2, #0
 8002712:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8002714:	4b13      	ldr	r3, [pc, #76]	@ (8002764 <MX_DCMI_Init+0x60>)
 8002716:	2200      	movs	r2, #0
 8002718:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800271a:	4b12      	ldr	r3, [pc, #72]	@ (8002764 <MX_DCMI_Init+0x60>)
 800271c:	2200      	movs	r2, #0
 800271e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8002720:	4b10      	ldr	r3, [pc, #64]	@ (8002764 <MX_DCMI_Init+0x60>)
 8002722:	2200      	movs	r2, #0
 8002724:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8002726:	4b0f      	ldr	r3, [pc, #60]	@ (8002764 <MX_DCMI_Init+0x60>)
 8002728:	2200      	movs	r2, #0
 800272a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800272c:	4b0d      	ldr	r3, [pc, #52]	@ (8002764 <MX_DCMI_Init+0x60>)
 800272e:	2200      	movs	r2, #0
 8002730:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8002732:	4b0c      	ldr	r3, [pc, #48]	@ (8002764 <MX_DCMI_Init+0x60>)
 8002734:	2200      	movs	r2, #0
 8002736:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8002738:	4b0a      	ldr	r3, [pc, #40]	@ (8002764 <MX_DCMI_Init+0x60>)
 800273a:	2200      	movs	r2, #0
 800273c:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800273e:	4b09      	ldr	r3, [pc, #36]	@ (8002764 <MX_DCMI_Init+0x60>)
 8002740:	2200      	movs	r2, #0
 8002742:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8002744:	4b07      	ldr	r3, [pc, #28]	@ (8002764 <MX_DCMI_Init+0x60>)
 8002746:	2200      	movs	r2, #0
 8002748:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800274a:	4b06      	ldr	r3, [pc, #24]	@ (8002764 <MX_DCMI_Init+0x60>)
 800274c:	2200      	movs	r2, #0
 800274e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8002750:	4804      	ldr	r0, [pc, #16]	@ (8002764 <MX_DCMI_Init+0x60>)
 8002752:	f004 fb2d 	bl	8006db0 <HAL_DCMI_Init>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 800275c:	f001 fd3a 	bl	80041d4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8002760:	bf00      	nop
 8002762:	bd80      	pop	{r7, pc}
 8002764:	2000198c 	.word	0x2000198c
 8002768:	50050000 	.word	0x50050000

0800276c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8002770:	4b15      	ldr	r3, [pc, #84]	@ (80027c8 <MX_DMA2D_Init+0x5c>)
 8002772:	4a16      	ldr	r2, [pc, #88]	@ (80027cc <MX_DMA2D_Init+0x60>)
 8002774:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8002776:	4b14      	ldr	r3, [pc, #80]	@ (80027c8 <MX_DMA2D_Init+0x5c>)
 8002778:	2200      	movs	r2, #0
 800277a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800277c:	4b12      	ldr	r3, [pc, #72]	@ (80027c8 <MX_DMA2D_Init+0x5c>)
 800277e:	2200      	movs	r2, #0
 8002780:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8002782:	4b11      	ldr	r3, [pc, #68]	@ (80027c8 <MX_DMA2D_Init+0x5c>)
 8002784:	2200      	movs	r2, #0
 8002786:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8002788:	4b0f      	ldr	r3, [pc, #60]	@ (80027c8 <MX_DMA2D_Init+0x5c>)
 800278a:	2200      	movs	r2, #0
 800278c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800278e:	4b0e      	ldr	r3, [pc, #56]	@ (80027c8 <MX_DMA2D_Init+0x5c>)
 8002790:	2200      	movs	r2, #0
 8002792:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002794:	4b0c      	ldr	r3, [pc, #48]	@ (80027c8 <MX_DMA2D_Init+0x5c>)
 8002796:	2200      	movs	r2, #0
 8002798:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800279a:	4b0b      	ldr	r3, [pc, #44]	@ (80027c8 <MX_DMA2D_Init+0x5c>)
 800279c:	2200      	movs	r2, #0
 800279e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80027a0:	4809      	ldr	r0, [pc, #36]	@ (80027c8 <MX_DMA2D_Init+0x5c>)
 80027a2:	f004 fff3 	bl	800778c <HAL_DMA2D_Init>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80027ac:	f001 fd12 	bl	80041d4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80027b0:	2101      	movs	r1, #1
 80027b2:	4805      	ldr	r0, [pc, #20]	@ (80027c8 <MX_DMA2D_Init+0x5c>)
 80027b4:	f005 f944 	bl	8007a40 <HAL_DMA2D_ConfigLayer>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80027be:	f001 fd09 	bl	80041d4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	200019dc 	.word	0x200019dc
 80027cc:	4002b000 	.word	0x4002b000

080027d0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80027d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002854 <MX_ETH_Init+0x84>)
 80027d6:	4a20      	ldr	r2, [pc, #128]	@ (8002858 <MX_ETH_Init+0x88>)
 80027d8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80027da:	4b20      	ldr	r3, [pc, #128]	@ (800285c <MX_ETH_Init+0x8c>)
 80027dc:	2200      	movs	r2, #0
 80027de:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80027e0:	4b1e      	ldr	r3, [pc, #120]	@ (800285c <MX_ETH_Init+0x8c>)
 80027e2:	2280      	movs	r2, #128	@ 0x80
 80027e4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80027e6:	4b1d      	ldr	r3, [pc, #116]	@ (800285c <MX_ETH_Init+0x8c>)
 80027e8:	22e1      	movs	r2, #225	@ 0xe1
 80027ea:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80027ec:	4b1b      	ldr	r3, [pc, #108]	@ (800285c <MX_ETH_Init+0x8c>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80027f2:	4b1a      	ldr	r3, [pc, #104]	@ (800285c <MX_ETH_Init+0x8c>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80027f8:	4b18      	ldr	r3, [pc, #96]	@ (800285c <MX_ETH_Init+0x8c>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80027fe:	4b15      	ldr	r3, [pc, #84]	@ (8002854 <MX_ETH_Init+0x84>)
 8002800:	4a16      	ldr	r2, [pc, #88]	@ (800285c <MX_ETH_Init+0x8c>)
 8002802:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002804:	4b13      	ldr	r3, [pc, #76]	@ (8002854 <MX_ETH_Init+0x84>)
 8002806:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800280a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800280c:	4b11      	ldr	r3, [pc, #68]	@ (8002854 <MX_ETH_Init+0x84>)
 800280e:	4a14      	ldr	r2, [pc, #80]	@ (8002860 <MX_ETH_Init+0x90>)
 8002810:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8002812:	4b10      	ldr	r3, [pc, #64]	@ (8002854 <MX_ETH_Init+0x84>)
 8002814:	4a13      	ldr	r2, [pc, #76]	@ (8002864 <MX_ETH_Init+0x94>)
 8002816:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8002818:	4b0e      	ldr	r3, [pc, #56]	@ (8002854 <MX_ETH_Init+0x84>)
 800281a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800281e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002820:	480c      	ldr	r0, [pc, #48]	@ (8002854 <MX_ETH_Init+0x84>)
 8002822:	f005 f99f 	bl	8007b64 <HAL_ETH_Init>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800282c:	f001 fcd2 	bl	80041d4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002830:	2238      	movs	r2, #56	@ 0x38
 8002832:	2100      	movs	r1, #0
 8002834:	480c      	ldr	r0, [pc, #48]	@ (8002868 <MX_ETH_Init+0x98>)
 8002836:	f015 fa25 	bl	8017c84 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800283a:	4b0b      	ldr	r3, [pc, #44]	@ (8002868 <MX_ETH_Init+0x98>)
 800283c:	2221      	movs	r2, #33	@ 0x21
 800283e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002840:	4b09      	ldr	r3, [pc, #36]	@ (8002868 <MX_ETH_Init+0x98>)
 8002842:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8002846:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002848:	4b07      	ldr	r3, [pc, #28]	@ (8002868 <MX_ETH_Init+0x98>)
 800284a:	2200      	movs	r2, #0
 800284c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20001a1c 	.word	0x20001a1c
 8002858:	40028000 	.word	0x40028000
 800285c:	20002454 	.word	0x20002454
 8002860:	20000174 	.word	0x20000174
 8002864:	200000d4 	.word	0x200000d4
 8002868:	200018e8 	.word	0x200018e8

0800286c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002870:	4b1b      	ldr	r3, [pc, #108]	@ (80028e0 <MX_I2C1_Init+0x74>)
 8002872:	4a1c      	ldr	r2, [pc, #112]	@ (80028e4 <MX_I2C1_Init+0x78>)
 8002874:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8002876:	4b1a      	ldr	r3, [pc, #104]	@ (80028e0 <MX_I2C1_Init+0x74>)
 8002878:	4a1b      	ldr	r2, [pc, #108]	@ (80028e8 <MX_I2C1_Init+0x7c>)
 800287a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800287c:	4b18      	ldr	r3, [pc, #96]	@ (80028e0 <MX_I2C1_Init+0x74>)
 800287e:	2200      	movs	r2, #0
 8002880:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002882:	4b17      	ldr	r3, [pc, #92]	@ (80028e0 <MX_I2C1_Init+0x74>)
 8002884:	2201      	movs	r2, #1
 8002886:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002888:	4b15      	ldr	r3, [pc, #84]	@ (80028e0 <MX_I2C1_Init+0x74>)
 800288a:	2200      	movs	r2, #0
 800288c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800288e:	4b14      	ldr	r3, [pc, #80]	@ (80028e0 <MX_I2C1_Init+0x74>)
 8002890:	2200      	movs	r2, #0
 8002892:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002894:	4b12      	ldr	r3, [pc, #72]	@ (80028e0 <MX_I2C1_Init+0x74>)
 8002896:	2200      	movs	r2, #0
 8002898:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800289a:	4b11      	ldr	r3, [pc, #68]	@ (80028e0 <MX_I2C1_Init+0x74>)
 800289c:	2200      	movs	r2, #0
 800289e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028a0:	4b0f      	ldr	r3, [pc, #60]	@ (80028e0 <MX_I2C1_Init+0x74>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028a6:	480e      	ldr	r0, [pc, #56]	@ (80028e0 <MX_I2C1_Init+0x74>)
 80028a8:	f007 fc2e 	bl	800a108 <HAL_I2C_Init>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80028b2:	f001 fc8f 	bl	80041d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80028b6:	2100      	movs	r1, #0
 80028b8:	4809      	ldr	r0, [pc, #36]	@ (80028e0 <MX_I2C1_Init+0x74>)
 80028ba:	f007 fcc1 	bl	800a240 <HAL_I2CEx_ConfigAnalogFilter>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80028c4:	f001 fc86 	bl	80041d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80028c8:	2100      	movs	r1, #0
 80028ca:	4805      	ldr	r0, [pc, #20]	@ (80028e0 <MX_I2C1_Init+0x74>)
 80028cc:	f007 fd03 	bl	800a2d6 <HAL_I2CEx_ConfigDigitalFilter>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80028d6:	f001 fc7d 	bl	80041d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20001acc 	.word	0x20001acc
 80028e4:	40005400 	.word	0x40005400
 80028e8:	00c0eaff 	.word	0x00c0eaff

080028ec <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80028f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002960 <MX_I2C3_Init+0x74>)
 80028f2:	4a1c      	ldr	r2, [pc, #112]	@ (8002964 <MX_I2C3_Init+0x78>)
 80028f4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80028f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002960 <MX_I2C3_Init+0x74>)
 80028f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002968 <MX_I2C3_Init+0x7c>)
 80028fa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80028fc:	4b18      	ldr	r3, [pc, #96]	@ (8002960 <MX_I2C3_Init+0x74>)
 80028fe:	2200      	movs	r2, #0
 8002900:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002902:	4b17      	ldr	r3, [pc, #92]	@ (8002960 <MX_I2C3_Init+0x74>)
 8002904:	2201      	movs	r2, #1
 8002906:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002908:	4b15      	ldr	r3, [pc, #84]	@ (8002960 <MX_I2C3_Init+0x74>)
 800290a:	2200      	movs	r2, #0
 800290c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800290e:	4b14      	ldr	r3, [pc, #80]	@ (8002960 <MX_I2C3_Init+0x74>)
 8002910:	2200      	movs	r2, #0
 8002912:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002914:	4b12      	ldr	r3, [pc, #72]	@ (8002960 <MX_I2C3_Init+0x74>)
 8002916:	2200      	movs	r2, #0
 8002918:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800291a:	4b11      	ldr	r3, [pc, #68]	@ (8002960 <MX_I2C3_Init+0x74>)
 800291c:	2200      	movs	r2, #0
 800291e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002920:	4b0f      	ldr	r3, [pc, #60]	@ (8002960 <MX_I2C3_Init+0x74>)
 8002922:	2200      	movs	r2, #0
 8002924:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002926:	480e      	ldr	r0, [pc, #56]	@ (8002960 <MX_I2C3_Init+0x74>)
 8002928:	f007 fbee 	bl	800a108 <HAL_I2C_Init>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002932:	f001 fc4f 	bl	80041d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002936:	2100      	movs	r1, #0
 8002938:	4809      	ldr	r0, [pc, #36]	@ (8002960 <MX_I2C3_Init+0x74>)
 800293a:	f007 fc81 	bl	800a240 <HAL_I2CEx_ConfigAnalogFilter>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002944:	f001 fc46 	bl	80041d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002948:	2100      	movs	r1, #0
 800294a:	4805      	ldr	r0, [pc, #20]	@ (8002960 <MX_I2C3_Init+0x74>)
 800294c:	f007 fcc3 	bl	800a2d6 <HAL_I2CEx_ConfigDigitalFilter>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002956:	f001 fc3d 	bl	80041d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	20001b20 	.word	0x20001b20
 8002964:	40005c00 	.word	0x40005c00
 8002968:	00c0eaff 	.word	0x00c0eaff

0800296c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08e      	sub	sp, #56	@ 0x38
 8002970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002972:	1d3b      	adds	r3, r7, #4
 8002974:	2234      	movs	r2, #52	@ 0x34
 8002976:	2100      	movs	r1, #0
 8002978:	4618      	mov	r0, r3
 800297a:	f015 f983 	bl	8017c84 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800297e:	4b3a      	ldr	r3, [pc, #232]	@ (8002a68 <MX_LTDC_Init+0xfc>)
 8002980:	4a3a      	ldr	r2, [pc, #232]	@ (8002a6c <MX_LTDC_Init+0x100>)
 8002982:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002984:	4b38      	ldr	r3, [pc, #224]	@ (8002a68 <MX_LTDC_Init+0xfc>)
 8002986:	2200      	movs	r2, #0
 8002988:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800298a:	4b37      	ldr	r3, [pc, #220]	@ (8002a68 <MX_LTDC_Init+0xfc>)
 800298c:	2200      	movs	r2, #0
 800298e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002990:	4b35      	ldr	r3, [pc, #212]	@ (8002a68 <MX_LTDC_Init+0xfc>)
 8002992:	2200      	movs	r2, #0
 8002994:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002996:	4b34      	ldr	r3, [pc, #208]	@ (8002a68 <MX_LTDC_Init+0xfc>)
 8002998:	2200      	movs	r2, #0
 800299a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800299c:	4b32      	ldr	r3, [pc, #200]	@ (8002a68 <MX_LTDC_Init+0xfc>)
 800299e:	2228      	movs	r2, #40	@ 0x28
 80029a0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80029a2:	4b31      	ldr	r3, [pc, #196]	@ (8002a68 <MX_LTDC_Init+0xfc>)
 80029a4:	2209      	movs	r2, #9
 80029a6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80029a8:	4b2f      	ldr	r3, [pc, #188]	@ (8002a68 <MX_LTDC_Init+0xfc>)
 80029aa:	2235      	movs	r2, #53	@ 0x35
 80029ac:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80029ae:	4b2e      	ldr	r3, [pc, #184]	@ (8002a68 <MX_LTDC_Init+0xfc>)
 80029b0:	220b      	movs	r2, #11
 80029b2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80029b4:	4b2c      	ldr	r3, [pc, #176]	@ (8002a68 <MX_LTDC_Init+0xfc>)
 80029b6:	f240 2215 	movw	r2, #533	@ 0x215
 80029ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80029bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002a68 <MX_LTDC_Init+0xfc>)
 80029be:	f240 121b 	movw	r2, #283	@ 0x11b
 80029c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 80029c4:	4b28      	ldr	r3, [pc, #160]	@ (8002a68 <MX_LTDC_Init+0xfc>)
 80029c6:	f240 2235 	movw	r2, #565	@ 0x235
 80029ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 80029cc:	4b26      	ldr	r3, [pc, #152]	@ (8002a68 <MX_LTDC_Init+0xfc>)
 80029ce:	f240 121d 	movw	r2, #285	@ 0x11d
 80029d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80029d4:	4b24      	ldr	r3, [pc, #144]	@ (8002a68 <MX_LTDC_Init+0xfc>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80029dc:	4b22      	ldr	r3, [pc, #136]	@ (8002a68 <MX_LTDC_Init+0xfc>)
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80029e4:	4b20      	ldr	r3, [pc, #128]	@ (8002a68 <MX_LTDC_Init+0xfc>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80029ec:	481e      	ldr	r0, [pc, #120]	@ (8002a68 <MX_LTDC_Init+0xfc>)
 80029ee:	f007 fcbe 	bl	800a36e <HAL_LTDC_Init>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80029f8:	f001 fbec 	bl	80041d4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80029fc:	2300      	movs	r3, #0
 80029fe:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8002a00:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002a04:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8002a0a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002a0e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002a10:	2302      	movs	r3, #2
 8002a12:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8002a14:	23ff      	movs	r3, #255	@ 0xff
 8002a16:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002a1c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002a20:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002a22:	2307      	movs	r3, #7
 8002a24:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8002a26:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8002a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8002a2c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8002a32:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002a36:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002a44:	2300      	movs	r3, #0
 8002a46:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002a4a:	1d3b      	adds	r3, r7, #4
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4805      	ldr	r0, [pc, #20]	@ (8002a68 <MX_LTDC_Init+0xfc>)
 8002a52:	f007 fdeb 	bl	800a62c <HAL_LTDC_ConfigLayer>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8002a5c:	f001 fbba 	bl	80041d4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002a60:	bf00      	nop
 8002a62:	3738      	adds	r7, #56	@ 0x38
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	20001b74 	.word	0x20001b74
 8002a6c:	40016800 	.word	0x40016800

08002a70 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8002a74:	4b12      	ldr	r3, [pc, #72]	@ (8002ac0 <MX_QUADSPI_Init+0x50>)
 8002a76:	4a13      	ldr	r2, [pc, #76]	@ (8002ac4 <MX_QUADSPI_Init+0x54>)
 8002a78:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8002a7a:	4b11      	ldr	r3, [pc, #68]	@ (8002ac0 <MX_QUADSPI_Init+0x50>)
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8002a80:	4b0f      	ldr	r3, [pc, #60]	@ (8002ac0 <MX_QUADSPI_Init+0x50>)
 8002a82:	2204      	movs	r2, #4
 8002a84:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002a86:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac0 <MX_QUADSPI_Init+0x50>)
 8002a88:	2210      	movs	r2, #16
 8002a8a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac0 <MX_QUADSPI_Init+0x50>)
 8002a8e:	2218      	movs	r2, #24
 8002a90:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8002a92:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac0 <MX_QUADSPI_Init+0x50>)
 8002a94:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8002a98:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002a9a:	4b09      	ldr	r3, [pc, #36]	@ (8002ac0 <MX_QUADSPI_Init+0x50>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8002aa0:	4b07      	ldr	r3, [pc, #28]	@ (8002ac0 <MX_QUADSPI_Init+0x50>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8002aa6:	4b06      	ldr	r3, [pc, #24]	@ (8002ac0 <MX_QUADSPI_Init+0x50>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002aac:	4804      	ldr	r0, [pc, #16]	@ (8002ac0 <MX_QUADSPI_Init+0x50>)
 8002aae:	f007 ffd1 	bl	800aa54 <HAL_QSPI_Init>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8002ab8:	f001 fb8c 	bl	80041d4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002abc:	bf00      	nop
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	20001c1c 	.word	0x20001c1c
 8002ac4:	a0001000 	.word	0xa0001000

08002ac8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b090      	sub	sp, #64	@ 0x40
 8002acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002ace:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	605a      	str	r2, [r3, #4]
 8002ad8:	609a      	str	r2, [r3, #8]
 8002ada:	60da      	str	r2, [r3, #12]
 8002adc:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002ade:	2300      	movs	r3, #0
 8002ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8002ae2:	463b      	mov	r3, r7
 8002ae4:	2228      	movs	r2, #40	@ 0x28
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f015 f8cb 	bl	8017c84 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002aee:	4b46      	ldr	r3, [pc, #280]	@ (8002c08 <MX_RTC_Init+0x140>)
 8002af0:	4a46      	ldr	r2, [pc, #280]	@ (8002c0c <MX_RTC_Init+0x144>)
 8002af2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002af4:	4b44      	ldr	r3, [pc, #272]	@ (8002c08 <MX_RTC_Init+0x140>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002afa:	4b43      	ldr	r3, [pc, #268]	@ (8002c08 <MX_RTC_Init+0x140>)
 8002afc:	227f      	movs	r2, #127	@ 0x7f
 8002afe:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002b00:	4b41      	ldr	r3, [pc, #260]	@ (8002c08 <MX_RTC_Init+0x140>)
 8002b02:	22ff      	movs	r2, #255	@ 0xff
 8002b04:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002b06:	4b40      	ldr	r3, [pc, #256]	@ (8002c08 <MX_RTC_Init+0x140>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002b0c:	4b3e      	ldr	r3, [pc, #248]	@ (8002c08 <MX_RTC_Init+0x140>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002b12:	4b3d      	ldr	r3, [pc, #244]	@ (8002c08 <MX_RTC_Init+0x140>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002b18:	483b      	ldr	r0, [pc, #236]	@ (8002c08 <MX_RTC_Init+0x140>)
 8002b1a:	f009 fa49 	bl	800bfb0 <HAL_RTC_Init>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002b24:	f001 fb56 	bl	80041d4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8002b34:	2300      	movs	r3, #0
 8002b36:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002b42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b46:	2201      	movs	r2, #1
 8002b48:	4619      	mov	r1, r3
 8002b4a:	482f      	ldr	r0, [pc, #188]	@ (8002c08 <MX_RTC_Init+0x140>)
 8002b4c:	f009 fab2 	bl	800c0b4 <HAL_RTC_SetTime>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8002b56:	f001 fb3d 	bl	80041d4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002b60:	2301      	movs	r3, #1
 8002b62:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8002b66:	2301      	movs	r3, #1
 8002b68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002b72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b76:	2201      	movs	r2, #1
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4823      	ldr	r0, [pc, #140]	@ (8002c08 <MX_RTC_Init+0x140>)
 8002b7c:	f009 fb34 	bl	800c1e8 <HAL_RTC_SetDate>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8002b86:	f001 fb25 	bl	80041d4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002b92:	2300      	movs	r3, #0
 8002b94:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002b96:	2300      	movs	r3, #0
 8002b98:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002bb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bb8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002bba:	463b      	mov	r3, r7
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4811      	ldr	r0, [pc, #68]	@ (8002c08 <MX_RTC_Init+0x140>)
 8002bc2:	f009 fb95 	bl	800c2f0 <HAL_RTC_SetAlarm>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8002bcc:	f001 fb02 	bl	80041d4 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8002bd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002bd6:	463b      	mov	r3, r7
 8002bd8:	2201      	movs	r2, #1
 8002bda:	4619      	mov	r1, r3
 8002bdc:	480a      	ldr	r0, [pc, #40]	@ (8002c08 <MX_RTC_Init+0x140>)
 8002bde:	f009 fb87 	bl	800c2f0 <HAL_RTC_SetAlarm>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8002be8:	f001 faf4 	bl	80041d4 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8002bec:	2202      	movs	r2, #2
 8002bee:	2100      	movs	r1, #0
 8002bf0:	4805      	ldr	r0, [pc, #20]	@ (8002c08 <MX_RTC_Init+0x140>)
 8002bf2:	f009 fd47 	bl	800c684 <HAL_RTCEx_SetTimeStamp>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8002bfc:	f001 faea 	bl	80041d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002c00:	bf00      	nop
 8002c02:	3740      	adds	r7, #64	@ 0x40
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20001c68 	.word	0x20001c68
 8002c0c:	40002800 	.word	0x40002800

08002c10 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8002c14:	4b4d      	ldr	r3, [pc, #308]	@ (8002d4c <MX_SAI2_Init+0x13c>)
 8002c16:	4a4e      	ldr	r2, [pc, #312]	@ (8002d50 <MX_SAI2_Init+0x140>)
 8002c18:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8002c1a:	4b4c      	ldr	r3, [pc, #304]	@ (8002d4c <MX_SAI2_Init+0x13c>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8002c20:	4b4a      	ldr	r3, [pc, #296]	@ (8002d4c <MX_SAI2_Init+0x13c>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8002c26:	4b49      	ldr	r3, [pc, #292]	@ (8002d4c <MX_SAI2_Init+0x13c>)
 8002c28:	2240      	movs	r2, #64	@ 0x40
 8002c2a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002c2c:	4b47      	ldr	r3, [pc, #284]	@ (8002d4c <MX_SAI2_Init+0x13c>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002c32:	4b46      	ldr	r3, [pc, #280]	@ (8002d4c <MX_SAI2_Init+0x13c>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8002c38:	4b44      	ldr	r3, [pc, #272]	@ (8002d4c <MX_SAI2_Init+0x13c>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002c3e:	4b43      	ldr	r3, [pc, #268]	@ (8002d4c <MX_SAI2_Init+0x13c>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002c44:	4b41      	ldr	r3, [pc, #260]	@ (8002d4c <MX_SAI2_Init+0x13c>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002c4a:	4b40      	ldr	r3, [pc, #256]	@ (8002d4c <MX_SAI2_Init+0x13c>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002c50:	4b3e      	ldr	r3, [pc, #248]	@ (8002d4c <MX_SAI2_Init+0x13c>)
 8002c52:	4a40      	ldr	r2, [pc, #256]	@ (8002d54 <MX_SAI2_Init+0x144>)
 8002c54:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002c56:	4b3d      	ldr	r3, [pc, #244]	@ (8002d4c <MX_SAI2_Init+0x13c>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002c5c:	4b3b      	ldr	r3, [pc, #236]	@ (8002d4c <MX_SAI2_Init+0x13c>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8002c62:	4b3a      	ldr	r3, [pc, #232]	@ (8002d4c <MX_SAI2_Init+0x13c>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002c68:	4b38      	ldr	r3, [pc, #224]	@ (8002d4c <MX_SAI2_Init+0x13c>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8002c6e:	4b37      	ldr	r3, [pc, #220]	@ (8002d4c <MX_SAI2_Init+0x13c>)
 8002c70:	2208      	movs	r2, #8
 8002c72:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8002c74:	4b35      	ldr	r3, [pc, #212]	@ (8002d4c <MX_SAI2_Init+0x13c>)
 8002c76:	2201      	movs	r2, #1
 8002c78:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002c7a:	4b34      	ldr	r3, [pc, #208]	@ (8002d4c <MX_SAI2_Init+0x13c>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002c80:	4b32      	ldr	r3, [pc, #200]	@ (8002d4c <MX_SAI2_Init+0x13c>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002c86:	4b31      	ldr	r3, [pc, #196]	@ (8002d4c <MX_SAI2_Init+0x13c>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8002c8c:	4b2f      	ldr	r3, [pc, #188]	@ (8002d4c <MX_SAI2_Init+0x13c>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002c92:	4b2e      	ldr	r3, [pc, #184]	@ (8002d4c <MX_SAI2_Init+0x13c>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8002c98:	4b2c      	ldr	r3, [pc, #176]	@ (8002d4c <MX_SAI2_Init+0x13c>)
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8002c9e:	4b2b      	ldr	r3, [pc, #172]	@ (8002d4c <MX_SAI2_Init+0x13c>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8002ca4:	4829      	ldr	r0, [pc, #164]	@ (8002d4c <MX_SAI2_Init+0x13c>)
 8002ca6:	f009 fd55 	bl	800c754 <HAL_SAI_Init>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8002cb0:	f001 fa90 	bl	80041d4 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8002cb4:	4b28      	ldr	r3, [pc, #160]	@ (8002d58 <MX_SAI2_Init+0x148>)
 8002cb6:	4a29      	ldr	r2, [pc, #164]	@ (8002d5c <MX_SAI2_Init+0x14c>)
 8002cb8:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8002cba:	4b27      	ldr	r3, [pc, #156]	@ (8002d58 <MX_SAI2_Init+0x148>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8002cc0:	4b25      	ldr	r3, [pc, #148]	@ (8002d58 <MX_SAI2_Init+0x148>)
 8002cc2:	2203      	movs	r2, #3
 8002cc4:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8002cc6:	4b24      	ldr	r3, [pc, #144]	@ (8002d58 <MX_SAI2_Init+0x148>)
 8002cc8:	2240      	movs	r2, #64	@ 0x40
 8002cca:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002ccc:	4b22      	ldr	r3, [pc, #136]	@ (8002d58 <MX_SAI2_Init+0x148>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002cd2:	4b21      	ldr	r3, [pc, #132]	@ (8002d58 <MX_SAI2_Init+0x148>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8002cd8:	4b1f      	ldr	r3, [pc, #124]	@ (8002d58 <MX_SAI2_Init+0x148>)
 8002cda:	2201      	movs	r2, #1
 8002cdc:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002cde:	4b1e      	ldr	r3, [pc, #120]	@ (8002d58 <MX_SAI2_Init+0x148>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8002d58 <MX_SAI2_Init+0x148>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002cea:	4b1b      	ldr	r3, [pc, #108]	@ (8002d58 <MX_SAI2_Init+0x148>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002cf0:	4b19      	ldr	r3, [pc, #100]	@ (8002d58 <MX_SAI2_Init+0x148>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8002cf6:	4b18      	ldr	r3, [pc, #96]	@ (8002d58 <MX_SAI2_Init+0x148>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002cfc:	4b16      	ldr	r3, [pc, #88]	@ (8002d58 <MX_SAI2_Init+0x148>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8002d02:	4b15      	ldr	r3, [pc, #84]	@ (8002d58 <MX_SAI2_Init+0x148>)
 8002d04:	2208      	movs	r2, #8
 8002d06:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8002d08:	4b13      	ldr	r3, [pc, #76]	@ (8002d58 <MX_SAI2_Init+0x148>)
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002d0e:	4b12      	ldr	r3, [pc, #72]	@ (8002d58 <MX_SAI2_Init+0x148>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002d14:	4b10      	ldr	r3, [pc, #64]	@ (8002d58 <MX_SAI2_Init+0x148>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8002d58 <MX_SAI2_Init+0x148>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8002d20:	4b0d      	ldr	r3, [pc, #52]	@ (8002d58 <MX_SAI2_Init+0x148>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002d26:	4b0c      	ldr	r3, [pc, #48]	@ (8002d58 <MX_SAI2_Init+0x148>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8002d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d58 <MX_SAI2_Init+0x148>)
 8002d2e:	2201      	movs	r2, #1
 8002d30:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8002d32:	4b09      	ldr	r3, [pc, #36]	@ (8002d58 <MX_SAI2_Init+0x148>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8002d38:	4807      	ldr	r0, [pc, #28]	@ (8002d58 <MX_SAI2_Init+0x148>)
 8002d3a:	f009 fd0b 	bl	800c754 <HAL_SAI_Init>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8002d44:	f001 fa46 	bl	80041d4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8002d48:	bf00      	nop
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	20001c88 	.word	0x20001c88
 8002d50:	40015c04 	.word	0x40015c04
 8002d54:	0002ee00 	.word	0x0002ee00
 8002d58:	20001d0c 	.word	0x20001d0c
 8002d5c:	40015c24 	.word	0x40015c24

08002d60 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002d66:	4b13      	ldr	r3, [pc, #76]	@ (8002db4 <MX_SDMMC1_SD_Init+0x54>)
 8002d68:	4a13      	ldr	r2, [pc, #76]	@ (8002db8 <MX_SDMMC1_SD_Init+0x58>)
 8002d6a:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002d6c:	4b11      	ldr	r3, [pc, #68]	@ (8002db4 <MX_SDMMC1_SD_Init+0x54>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002d72:	4b10      	ldr	r3, [pc, #64]	@ (8002db4 <MX_SDMMC1_SD_Init+0x54>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002d78:	4b0e      	ldr	r3, [pc, #56]	@ (8002db4 <MX_SDMMC1_SD_Init+0x54>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;  // ST 커뮤니티 가이드: 1-bit 모드로 변경
 8002d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002db4 <MX_SDMMC1_SD_Init+0x54>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;  // 하드웨어 플로우 컨트롤 활성화 (안정성 향상)
 8002d84:	4b0b      	ldr	r3, [pc, #44]	@ (8002db4 <MX_SDMMC1_SD_Init+0x54>)
 8002d86:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d8a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 8;  // 클럭 분주비 증가 (2→8, STM32F7 안정화 권장값)
 8002d8c:	4b09      	ldr	r3, [pc, #36]	@ (8002db4 <MX_SDMMC1_SD_Init+0x54>)
 8002d8e:	2208      	movs	r2, #8
 8002d90:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  
  // Initialize SD card with HAL
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8002d92:	4808      	ldr	r0, [pc, #32]	@ (8002db4 <MX_SDMMC1_SD_Init+0x54>)
 8002d94:	f009 fe94 	bl	800cac0 <HAL_SD_Init>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <MX_SDMMC1_SD_Init+0x42>
  {
    Error_Handler();
 8002d9e:	f001 fa19 	bl	80041d4 <Error_Handler>
  }
  
  // BSP 초기화도 호출 (FatFs 호환성을 위해)
  uint8_t bsp_result = BSP_SD_Init();
 8002da2:	f00e ff91 	bl	8011cc8 <BSP_SD_Init>
 8002da6:	4603      	mov	r3, r0
 8002da8:	71fb      	strb	r3, [r7, #7]
    // Error_Handler() 호출하지 않음
  }

  /* USER CODE END SDMMC1_Init 2 */

}
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	20001d90 	.word	0x20001d90
 8002db8:	40012c00 	.word	0x40012c00

08002dbc <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8002dc0:	4b15      	ldr	r3, [pc, #84]	@ (8002e18 <MX_SPDIFRX_Init+0x5c>)
 8002dc2:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002dc6:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8002dc8:	4b13      	ldr	r3, [pc, #76]	@ (8002e18 <MX_SPDIFRX_Init+0x5c>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8002dce:	4b12      	ldr	r3, [pc, #72]	@ (8002e18 <MX_SPDIFRX_Init+0x5c>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8002dd4:	4b10      	ldr	r3, [pc, #64]	@ (8002e18 <MX_SPDIFRX_Init+0x5c>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8002dda:	4b0f      	ldr	r3, [pc, #60]	@ (8002e18 <MX_SPDIFRX_Init+0x5c>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8002de0:	4b0d      	ldr	r3, [pc, #52]	@ (8002e18 <MX_SPDIFRX_Init+0x5c>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8002de6:	4b0c      	ldr	r3, [pc, #48]	@ (8002e18 <MX_SPDIFRX_Init+0x5c>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8002dec:	4b0a      	ldr	r3, [pc, #40]	@ (8002e18 <MX_SPDIFRX_Init+0x5c>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8002df2:	4b09      	ldr	r3, [pc, #36]	@ (8002e18 <MX_SPDIFRX_Init+0x5c>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8002df8:	4b07      	ldr	r3, [pc, #28]	@ (8002e18 <MX_SPDIFRX_Init+0x5c>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8002dfe:	4b06      	ldr	r3, [pc, #24]	@ (8002e18 <MX_SPDIFRX_Init+0x5c>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8002e04:	4804      	ldr	r0, [pc, #16]	@ (8002e18 <MX_SPDIFRX_Init+0x5c>)
 8002e06:	f00b f81b 	bl	800de40 <HAL_SPDIFRX_Init>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8002e10:	f001 f9e0 	bl	80041d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8002e14:	bf00      	nop
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	20001e14 	.word	0x20001e14

08002e1c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002e20:	4b1b      	ldr	r3, [pc, #108]	@ (8002e90 <MX_SPI2_Init+0x74>)
 8002e22:	4a1c      	ldr	r2, [pc, #112]	@ (8002e94 <MX_SPI2_Init+0x78>)
 8002e24:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002e26:	4b1a      	ldr	r3, [pc, #104]	@ (8002e90 <MX_SPI2_Init+0x74>)
 8002e28:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002e2c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002e2e:	4b18      	ldr	r3, [pc, #96]	@ (8002e90 <MX_SPI2_Init+0x74>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002e34:	4b16      	ldr	r3, [pc, #88]	@ (8002e90 <MX_SPI2_Init+0x74>)
 8002e36:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002e3a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e3c:	4b14      	ldr	r3, [pc, #80]	@ (8002e90 <MX_SPI2_Init+0x74>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e42:	4b13      	ldr	r3, [pc, #76]	@ (8002e90 <MX_SPI2_Init+0x74>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002e48:	4b11      	ldr	r3, [pc, #68]	@ (8002e90 <MX_SPI2_Init+0x74>)
 8002e4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e4e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e50:	4b0f      	ldr	r3, [pc, #60]	@ (8002e90 <MX_SPI2_Init+0x74>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e56:	4b0e      	ldr	r3, [pc, #56]	@ (8002e90 <MX_SPI2_Init+0x74>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e90 <MX_SPI2_Init+0x74>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e62:	4b0b      	ldr	r3, [pc, #44]	@ (8002e90 <MX_SPI2_Init+0x74>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002e68:	4b09      	ldr	r3, [pc, #36]	@ (8002e90 <MX_SPI2_Init+0x74>)
 8002e6a:	2207      	movs	r2, #7
 8002e6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002e6e:	4b08      	ldr	r3, [pc, #32]	@ (8002e90 <MX_SPI2_Init+0x74>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002e74:	4b06      	ldr	r3, [pc, #24]	@ (8002e90 <MX_SPI2_Init+0x74>)
 8002e76:	2208      	movs	r2, #8
 8002e78:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002e7a:	4805      	ldr	r0, [pc, #20]	@ (8002e90 <MX_SPI2_Init+0x74>)
 8002e7c:	f00b f83c 	bl	800def8 <HAL_SPI_Init>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002e86:	f001 f9a5 	bl	80041d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002e8a:	bf00      	nop
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	20001e60 	.word	0x20001e60
 8002e94:	40003800 	.word	0x40003800

08002e98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b09a      	sub	sp, #104	@ 0x68
 8002e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e9e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	605a      	str	r2, [r3, #4]
 8002ea8:	609a      	str	r2, [r3, #8]
 8002eaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eac:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	605a      	str	r2, [r3, #4]
 8002eb6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002eb8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	609a      	str	r2, [r3, #8]
 8002ec4:	60da      	str	r2, [r3, #12]
 8002ec6:	611a      	str	r2, [r3, #16]
 8002ec8:	615a      	str	r2, [r3, #20]
 8002eca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ecc:	1d3b      	adds	r3, r7, #4
 8002ece:	222c      	movs	r2, #44	@ 0x2c
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f014 fed6 	bl	8017c84 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ed8:	4b43      	ldr	r3, [pc, #268]	@ (8002fe8 <MX_TIM1_Init+0x150>)
 8002eda:	4a44      	ldr	r2, [pc, #272]	@ (8002fec <MX_TIM1_Init+0x154>)
 8002edc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002ede:	4b42      	ldr	r3, [pc, #264]	@ (8002fe8 <MX_TIM1_Init+0x150>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ee4:	4b40      	ldr	r3, [pc, #256]	@ (8002fe8 <MX_TIM1_Init+0x150>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002eea:	4b3f      	ldr	r3, [pc, #252]	@ (8002fe8 <MX_TIM1_Init+0x150>)
 8002eec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ef0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ef2:	4b3d      	ldr	r3, [pc, #244]	@ (8002fe8 <MX_TIM1_Init+0x150>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ef8:	4b3b      	ldr	r3, [pc, #236]	@ (8002fe8 <MX_TIM1_Init+0x150>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002efe:	4b3a      	ldr	r3, [pc, #232]	@ (8002fe8 <MX_TIM1_Init+0x150>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002f04:	4838      	ldr	r0, [pc, #224]	@ (8002fe8 <MX_TIM1_Init+0x150>)
 8002f06:	f00b f8a2 	bl	800e04e <HAL_TIM_Base_Init>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002f10:	f001 f960 	bl	80041d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f18:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002f1a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4831      	ldr	r0, [pc, #196]	@ (8002fe8 <MX_TIM1_Init+0x150>)
 8002f22:	f00b fbd5 	bl	800e6d0 <HAL_TIM_ConfigClockSource>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002f2c:	f001 f952 	bl	80041d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002f30:	482d      	ldr	r0, [pc, #180]	@ (8002fe8 <MX_TIM1_Init+0x150>)
 8002f32:	f00b f95b 	bl	800e1ec <HAL_TIM_PWM_Init>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002f3c:	f001 f94a 	bl	80041d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f40:	2300      	movs	r3, #0
 8002f42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002f44:	2300      	movs	r3, #0
 8002f46:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f4c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002f50:	4619      	mov	r1, r3
 8002f52:	4825      	ldr	r0, [pc, #148]	@ (8002fe8 <MX_TIM1_Init+0x150>)
 8002f54:	f00c f84c 	bl	800eff0 <HAL_TIMEx_MasterConfigSynchronization>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002f5e:	f001 f939 	bl	80041d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f62:	2360      	movs	r3, #96	@ 0x60
 8002f64:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002f66:	2300      	movs	r3, #0
 8002f68:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f72:	2300      	movs	r3, #0
 8002f74:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002f76:	2300      	movs	r3, #0
 8002f78:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f7e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002f82:	2200      	movs	r2, #0
 8002f84:	4619      	mov	r1, r3
 8002f86:	4818      	ldr	r0, [pc, #96]	@ (8002fe8 <MX_TIM1_Init+0x150>)
 8002f88:	f00b fa8e 	bl	800e4a8 <HAL_TIM_PWM_ConfigChannel>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002f92:	f001 f91f 	bl	80041d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f96:	2300      	movs	r3, #0
 8002f98:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002faa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002fb8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002fc6:	1d3b      	adds	r3, r7, #4
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4807      	ldr	r0, [pc, #28]	@ (8002fe8 <MX_TIM1_Init+0x150>)
 8002fcc:	f00c f89e 	bl	800f10c <HAL_TIMEx_ConfigBreakDeadTime>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002fd6:	f001 f8fd 	bl	80041d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002fda:	4803      	ldr	r0, [pc, #12]	@ (8002fe8 <MX_TIM1_Init+0x150>)
 8002fdc:	f001 ff6e 	bl	8004ebc <HAL_TIM_MspPostInit>

}
 8002fe0:	bf00      	nop
 8002fe2:	3768      	adds	r7, #104	@ 0x68
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	20001ec4 	.word	0x20001ec4
 8002fec:	40010000 	.word	0x40010000

08002ff0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b08e      	sub	sp, #56	@ 0x38
 8002ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ff6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	605a      	str	r2, [r3, #4]
 8003000:	609a      	str	r2, [r3, #8]
 8003002:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003004:	f107 031c 	add.w	r3, r7, #28
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	605a      	str	r2, [r3, #4]
 800300e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003010:	463b      	mov	r3, r7
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	605a      	str	r2, [r3, #4]
 8003018:	609a      	str	r2, [r3, #8]
 800301a:	60da      	str	r2, [r3, #12]
 800301c:	611a      	str	r2, [r3, #16]
 800301e:	615a      	str	r2, [r3, #20]
 8003020:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003022:	4b2d      	ldr	r3, [pc, #180]	@ (80030d8 <MX_TIM2_Init+0xe8>)
 8003024:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003028:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800302a:	4b2b      	ldr	r3, [pc, #172]	@ (80030d8 <MX_TIM2_Init+0xe8>)
 800302c:	2200      	movs	r2, #0
 800302e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003030:	4b29      	ldr	r3, [pc, #164]	@ (80030d8 <MX_TIM2_Init+0xe8>)
 8003032:	2200      	movs	r2, #0
 8003034:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003036:	4b28      	ldr	r3, [pc, #160]	@ (80030d8 <MX_TIM2_Init+0xe8>)
 8003038:	f04f 32ff 	mov.w	r2, #4294967295
 800303c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800303e:	4b26      	ldr	r3, [pc, #152]	@ (80030d8 <MX_TIM2_Init+0xe8>)
 8003040:	2200      	movs	r2, #0
 8003042:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003044:	4b24      	ldr	r3, [pc, #144]	@ (80030d8 <MX_TIM2_Init+0xe8>)
 8003046:	2200      	movs	r2, #0
 8003048:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800304a:	4823      	ldr	r0, [pc, #140]	@ (80030d8 <MX_TIM2_Init+0xe8>)
 800304c:	f00a ffff 	bl	800e04e <HAL_TIM_Base_Init>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003056:	f001 f8bd 	bl	80041d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800305a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800305e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003060:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003064:	4619      	mov	r1, r3
 8003066:	481c      	ldr	r0, [pc, #112]	@ (80030d8 <MX_TIM2_Init+0xe8>)
 8003068:	f00b fb32 	bl	800e6d0 <HAL_TIM_ConfigClockSource>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003072:	f001 f8af 	bl	80041d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003076:	4818      	ldr	r0, [pc, #96]	@ (80030d8 <MX_TIM2_Init+0xe8>)
 8003078:	f00b f8b8 	bl	800e1ec <HAL_TIM_PWM_Init>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003082:	f001 f8a7 	bl	80041d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003086:	2300      	movs	r3, #0
 8003088:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800308a:	2300      	movs	r3, #0
 800308c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800308e:	f107 031c 	add.w	r3, r7, #28
 8003092:	4619      	mov	r1, r3
 8003094:	4810      	ldr	r0, [pc, #64]	@ (80030d8 <MX_TIM2_Init+0xe8>)
 8003096:	f00b ffab 	bl	800eff0 <HAL_TIMEx_MasterConfigSynchronization>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80030a0:	f001 f898 	bl	80041d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030a4:	2360      	movs	r3, #96	@ 0x60
 80030a6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80030a8:	2300      	movs	r3, #0
 80030aa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030ac:	2300      	movs	r3, #0
 80030ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030b0:	2300      	movs	r3, #0
 80030b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030b4:	463b      	mov	r3, r7
 80030b6:	2200      	movs	r2, #0
 80030b8:	4619      	mov	r1, r3
 80030ba:	4807      	ldr	r0, [pc, #28]	@ (80030d8 <MX_TIM2_Init+0xe8>)
 80030bc:	f00b f9f4 	bl	800e4a8 <HAL_TIM_PWM_ConfigChannel>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80030c6:	f001 f885 	bl	80041d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80030ca:	4803      	ldr	r0, [pc, #12]	@ (80030d8 <MX_TIM2_Init+0xe8>)
 80030cc:	f001 fef6 	bl	8004ebc <HAL_TIM_MspPostInit>

}
 80030d0:	bf00      	nop
 80030d2:	3738      	adds	r7, #56	@ 0x38
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	20001f10 	.word	0x20001f10

080030dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b08e      	sub	sp, #56	@ 0x38
 80030e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80030e6:	2200      	movs	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	605a      	str	r2, [r3, #4]
 80030ec:	609a      	str	r2, [r3, #8]
 80030ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030f0:	f107 031c 	add.w	r3, r7, #28
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	605a      	str	r2, [r3, #4]
 80030fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030fc:	463b      	mov	r3, r7
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	605a      	str	r2, [r3, #4]
 8003104:	609a      	str	r2, [r3, #8]
 8003106:	60da      	str	r2, [r3, #12]
 8003108:	611a      	str	r2, [r3, #16]
 800310a:	615a      	str	r2, [r3, #20]
 800310c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800310e:	4b2d      	ldr	r3, [pc, #180]	@ (80031c4 <MX_TIM3_Init+0xe8>)
 8003110:	4a2d      	ldr	r2, [pc, #180]	@ (80031c8 <MX_TIM3_Init+0xec>)
 8003112:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003114:	4b2b      	ldr	r3, [pc, #172]	@ (80031c4 <MX_TIM3_Init+0xe8>)
 8003116:	2200      	movs	r2, #0
 8003118:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800311a:	4b2a      	ldr	r3, [pc, #168]	@ (80031c4 <MX_TIM3_Init+0xe8>)
 800311c:	2200      	movs	r2, #0
 800311e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003120:	4b28      	ldr	r3, [pc, #160]	@ (80031c4 <MX_TIM3_Init+0xe8>)
 8003122:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003126:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003128:	4b26      	ldr	r3, [pc, #152]	@ (80031c4 <MX_TIM3_Init+0xe8>)
 800312a:	2200      	movs	r2, #0
 800312c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800312e:	4b25      	ldr	r3, [pc, #148]	@ (80031c4 <MX_TIM3_Init+0xe8>)
 8003130:	2200      	movs	r2, #0
 8003132:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003134:	4823      	ldr	r0, [pc, #140]	@ (80031c4 <MX_TIM3_Init+0xe8>)
 8003136:	f00a ff8a 	bl	800e04e <HAL_TIM_Base_Init>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003140:	f001 f848 	bl	80041d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003144:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003148:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800314a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800314e:	4619      	mov	r1, r3
 8003150:	481c      	ldr	r0, [pc, #112]	@ (80031c4 <MX_TIM3_Init+0xe8>)
 8003152:	f00b fabd 	bl	800e6d0 <HAL_TIM_ConfigClockSource>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800315c:	f001 f83a 	bl	80041d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003160:	4818      	ldr	r0, [pc, #96]	@ (80031c4 <MX_TIM3_Init+0xe8>)
 8003162:	f00b f843 	bl	800e1ec <HAL_TIM_PWM_Init>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800316c:	f001 f832 	bl	80041d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003170:	2300      	movs	r3, #0
 8003172:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003174:	2300      	movs	r3, #0
 8003176:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003178:	f107 031c 	add.w	r3, r7, #28
 800317c:	4619      	mov	r1, r3
 800317e:	4811      	ldr	r0, [pc, #68]	@ (80031c4 <MX_TIM3_Init+0xe8>)
 8003180:	f00b ff36 	bl	800eff0 <HAL_TIMEx_MasterConfigSynchronization>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800318a:	f001 f823 	bl	80041d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800318e:	2360      	movs	r3, #96	@ 0x60
 8003190:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003192:	2300      	movs	r3, #0
 8003194:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003196:	2300      	movs	r3, #0
 8003198:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800319a:	2300      	movs	r3, #0
 800319c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800319e:	463b      	mov	r3, r7
 80031a0:	2200      	movs	r2, #0
 80031a2:	4619      	mov	r1, r3
 80031a4:	4807      	ldr	r0, [pc, #28]	@ (80031c4 <MX_TIM3_Init+0xe8>)
 80031a6:	f00b f97f 	bl	800e4a8 <HAL_TIM_PWM_ConfigChannel>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80031b0:	f001 f810 	bl	80041d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80031b4:	4803      	ldr	r0, [pc, #12]	@ (80031c4 <MX_TIM3_Init+0xe8>)
 80031b6:	f001 fe81 	bl	8004ebc <HAL_TIM_MspPostInit>

}
 80031ba:	bf00      	nop
 80031bc:	3738      	adds	r7, #56	@ 0x38
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	20001f5c 	.word	0x20001f5c
 80031c8:	40000400 	.word	0x40000400

080031cc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b08e      	sub	sp, #56	@ 0x38
 80031d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	605a      	str	r2, [r3, #4]
 80031dc:	609a      	str	r2, [r3, #8]
 80031de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031e0:	f107 031c 	add.w	r3, r7, #28
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	605a      	str	r2, [r3, #4]
 80031ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031ec:	463b      	mov	r3, r7
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	605a      	str	r2, [r3, #4]
 80031f4:	609a      	str	r2, [r3, #8]
 80031f6:	60da      	str	r2, [r3, #12]
 80031f8:	611a      	str	r2, [r3, #16]
 80031fa:	615a      	str	r2, [r3, #20]
 80031fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80031fe:	4b2d      	ldr	r3, [pc, #180]	@ (80032b4 <MX_TIM5_Init+0xe8>)
 8003200:	4a2d      	ldr	r2, [pc, #180]	@ (80032b8 <MX_TIM5_Init+0xec>)
 8003202:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003204:	4b2b      	ldr	r3, [pc, #172]	@ (80032b4 <MX_TIM5_Init+0xe8>)
 8003206:	2200      	movs	r2, #0
 8003208:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800320a:	4b2a      	ldr	r3, [pc, #168]	@ (80032b4 <MX_TIM5_Init+0xe8>)
 800320c:	2200      	movs	r2, #0
 800320e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003210:	4b28      	ldr	r3, [pc, #160]	@ (80032b4 <MX_TIM5_Init+0xe8>)
 8003212:	f04f 32ff 	mov.w	r2, #4294967295
 8003216:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003218:	4b26      	ldr	r3, [pc, #152]	@ (80032b4 <MX_TIM5_Init+0xe8>)
 800321a:	2200      	movs	r2, #0
 800321c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800321e:	4b25      	ldr	r3, [pc, #148]	@ (80032b4 <MX_TIM5_Init+0xe8>)
 8003220:	2200      	movs	r2, #0
 8003222:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003224:	4823      	ldr	r0, [pc, #140]	@ (80032b4 <MX_TIM5_Init+0xe8>)
 8003226:	f00a ff12 	bl	800e04e <HAL_TIM_Base_Init>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8003230:	f000 ffd0 	bl	80041d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003234:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003238:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800323a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800323e:	4619      	mov	r1, r3
 8003240:	481c      	ldr	r0, [pc, #112]	@ (80032b4 <MX_TIM5_Init+0xe8>)
 8003242:	f00b fa45 	bl	800e6d0 <HAL_TIM_ConfigClockSource>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 800324c:	f000 ffc2 	bl	80041d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8003250:	4818      	ldr	r0, [pc, #96]	@ (80032b4 <MX_TIM5_Init+0xe8>)
 8003252:	f00a ffcb 	bl	800e1ec <HAL_TIM_PWM_Init>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 800325c:	f000 ffba 	bl	80041d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003260:	2300      	movs	r3, #0
 8003262:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003264:	2300      	movs	r3, #0
 8003266:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003268:	f107 031c 	add.w	r3, r7, #28
 800326c:	4619      	mov	r1, r3
 800326e:	4811      	ldr	r0, [pc, #68]	@ (80032b4 <MX_TIM5_Init+0xe8>)
 8003270:	f00b febe 	bl	800eff0 <HAL_TIMEx_MasterConfigSynchronization>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800327a:	f000 ffab 	bl	80041d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800327e:	2360      	movs	r3, #96	@ 0x60
 8003280:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003282:	2300      	movs	r3, #0
 8003284:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003286:	2300      	movs	r3, #0
 8003288:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800328a:	2300      	movs	r3, #0
 800328c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800328e:	463b      	mov	r3, r7
 8003290:	220c      	movs	r2, #12
 8003292:	4619      	mov	r1, r3
 8003294:	4807      	ldr	r0, [pc, #28]	@ (80032b4 <MX_TIM5_Init+0xe8>)
 8003296:	f00b f907 	bl	800e4a8 <HAL_TIM_PWM_ConfigChannel>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80032a0:	f000 ff98 	bl	80041d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80032a4:	4803      	ldr	r0, [pc, #12]	@ (80032b4 <MX_TIM5_Init+0xe8>)
 80032a6:	f001 fe09 	bl	8004ebc <HAL_TIM_MspPostInit>

}
 80032aa:	bf00      	nop
 80032ac:	3738      	adds	r7, #56	@ 0x38
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20001fa8 	.word	0x20001fa8
 80032b8:	40000c00 	.word	0x40000c00

080032bc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b088      	sub	sp, #32
 80032c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032c2:	f107 0310 	add.w	r3, r7, #16
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	605a      	str	r2, [r3, #4]
 80032cc:	609a      	str	r2, [r3, #8]
 80032ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032d0:	1d3b      	adds	r3, r7, #4
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	605a      	str	r2, [r3, #4]
 80032d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80032da:	4b20      	ldr	r3, [pc, #128]	@ (800335c <MX_TIM8_Init+0xa0>)
 80032dc:	4a20      	ldr	r2, [pc, #128]	@ (8003360 <MX_TIM8_Init+0xa4>)
 80032de:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80032e0:	4b1e      	ldr	r3, [pc, #120]	@ (800335c <MX_TIM8_Init+0xa0>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032e6:	4b1d      	ldr	r3, [pc, #116]	@ (800335c <MX_TIM8_Init+0xa0>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80032ec:	4b1b      	ldr	r3, [pc, #108]	@ (800335c <MX_TIM8_Init+0xa0>)
 80032ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032f2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032f4:	4b19      	ldr	r3, [pc, #100]	@ (800335c <MX_TIM8_Init+0xa0>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80032fa:	4b18      	ldr	r3, [pc, #96]	@ (800335c <MX_TIM8_Init+0xa0>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003300:	4b16      	ldr	r3, [pc, #88]	@ (800335c <MX_TIM8_Init+0xa0>)
 8003302:	2200      	movs	r2, #0
 8003304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003306:	4815      	ldr	r0, [pc, #84]	@ (800335c <MX_TIM8_Init+0xa0>)
 8003308:	f00a fea1 	bl	800e04e <HAL_TIM_Base_Init>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8003312:	f000 ff5f 	bl	80041d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003316:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800331a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800331c:	f107 0310 	add.w	r3, r7, #16
 8003320:	4619      	mov	r1, r3
 8003322:	480e      	ldr	r0, [pc, #56]	@ (800335c <MX_TIM8_Init+0xa0>)
 8003324:	f00b f9d4 	bl	800e6d0 <HAL_TIM_ConfigClockSource>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800332e:	f000 ff51 	bl	80041d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003332:	2300      	movs	r3, #0
 8003334:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003336:	2300      	movs	r3, #0
 8003338:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800333a:	2300      	movs	r3, #0
 800333c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800333e:	1d3b      	adds	r3, r7, #4
 8003340:	4619      	mov	r1, r3
 8003342:	4806      	ldr	r0, [pc, #24]	@ (800335c <MX_TIM8_Init+0xa0>)
 8003344:	f00b fe54 	bl	800eff0 <HAL_TIMEx_MasterConfigSynchronization>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800334e:	f000 ff41 	bl	80041d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003352:	bf00      	nop
 8003354:	3720      	adds	r7, #32
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	20001ff4 	.word	0x20001ff4
 8003360:	40010400 	.word	0x40010400

08003364 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b088      	sub	sp, #32
 8003368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800336a:	1d3b      	adds	r3, r7, #4
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	605a      	str	r2, [r3, #4]
 8003372:	609a      	str	r2, [r3, #8]
 8003374:	60da      	str	r2, [r3, #12]
 8003376:	611a      	str	r2, [r3, #16]
 8003378:	615a      	str	r2, [r3, #20]
 800337a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800337c:	4b1a      	ldr	r3, [pc, #104]	@ (80033e8 <MX_TIM12_Init+0x84>)
 800337e:	4a1b      	ldr	r2, [pc, #108]	@ (80033ec <MX_TIM12_Init+0x88>)
 8003380:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8003382:	4b19      	ldr	r3, [pc, #100]	@ (80033e8 <MX_TIM12_Init+0x84>)
 8003384:	2200      	movs	r2, #0
 8003386:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003388:	4b17      	ldr	r3, [pc, #92]	@ (80033e8 <MX_TIM12_Init+0x84>)
 800338a:	2200      	movs	r2, #0
 800338c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800338e:	4b16      	ldr	r3, [pc, #88]	@ (80033e8 <MX_TIM12_Init+0x84>)
 8003390:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003394:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003396:	4b14      	ldr	r3, [pc, #80]	@ (80033e8 <MX_TIM12_Init+0x84>)
 8003398:	2200      	movs	r2, #0
 800339a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800339c:	4b12      	ldr	r3, [pc, #72]	@ (80033e8 <MX_TIM12_Init+0x84>)
 800339e:	2200      	movs	r2, #0
 80033a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80033a2:	4811      	ldr	r0, [pc, #68]	@ (80033e8 <MX_TIM12_Init+0x84>)
 80033a4:	f00a ff22 	bl	800e1ec <HAL_TIM_PWM_Init>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80033ae:	f000 ff11 	bl	80041d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033b2:	2360      	movs	r3, #96	@ 0x60
 80033b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80033b6:	2300      	movs	r3, #0
 80033b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033ba:	2300      	movs	r3, #0
 80033bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033c2:	1d3b      	adds	r3, r7, #4
 80033c4:	2200      	movs	r2, #0
 80033c6:	4619      	mov	r1, r3
 80033c8:	4807      	ldr	r0, [pc, #28]	@ (80033e8 <MX_TIM12_Init+0x84>)
 80033ca:	f00b f86d 	bl	800e4a8 <HAL_TIM_PWM_ConfigChannel>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80033d4:	f000 fefe 	bl	80041d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80033d8:	4803      	ldr	r0, [pc, #12]	@ (80033e8 <MX_TIM12_Init+0x84>)
 80033da:	f001 fd6f 	bl	8004ebc <HAL_TIM_MspPostInit>

}
 80033de:	bf00      	nop
 80033e0:	3720      	adds	r7, #32
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	20002040 	.word	0x20002040
 80033ec:	40001800 	.word	0x40001800

080033f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80033f4:	4b14      	ldr	r3, [pc, #80]	@ (8003448 <MX_USART1_UART_Init+0x58>)
 80033f6:	4a15      	ldr	r2, [pc, #84]	@ (800344c <MX_USART1_UART_Init+0x5c>)
 80033f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80033fa:	4b13      	ldr	r3, [pc, #76]	@ (8003448 <MX_USART1_UART_Init+0x58>)
 80033fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003400:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003402:	4b11      	ldr	r3, [pc, #68]	@ (8003448 <MX_USART1_UART_Init+0x58>)
 8003404:	2200      	movs	r2, #0
 8003406:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003408:	4b0f      	ldr	r3, [pc, #60]	@ (8003448 <MX_USART1_UART_Init+0x58>)
 800340a:	2200      	movs	r2, #0
 800340c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800340e:	4b0e      	ldr	r3, [pc, #56]	@ (8003448 <MX_USART1_UART_Init+0x58>)
 8003410:	2200      	movs	r2, #0
 8003412:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003414:	4b0c      	ldr	r3, [pc, #48]	@ (8003448 <MX_USART1_UART_Init+0x58>)
 8003416:	220c      	movs	r2, #12
 8003418:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800341a:	4b0b      	ldr	r3, [pc, #44]	@ (8003448 <MX_USART1_UART_Init+0x58>)
 800341c:	2200      	movs	r2, #0
 800341e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003420:	4b09      	ldr	r3, [pc, #36]	@ (8003448 <MX_USART1_UART_Init+0x58>)
 8003422:	2200      	movs	r2, #0
 8003424:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003426:	4b08      	ldr	r3, [pc, #32]	@ (8003448 <MX_USART1_UART_Init+0x58>)
 8003428:	2200      	movs	r2, #0
 800342a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800342c:	4b06      	ldr	r3, [pc, #24]	@ (8003448 <MX_USART1_UART_Init+0x58>)
 800342e:	2200      	movs	r2, #0
 8003430:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003432:	4805      	ldr	r0, [pc, #20]	@ (8003448 <MX_USART1_UART_Init+0x58>)
 8003434:	f00b ff06 	bl	800f244 <HAL_UART_Init>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800343e:	f000 fec9 	bl	80041d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003442:	bf00      	nop
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	2000208c 	.word	0x2000208c
 800344c:	40011000 	.word	0x40011000

08003450 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003454:	4b14      	ldr	r3, [pc, #80]	@ (80034a8 <MX_USART6_UART_Init+0x58>)
 8003456:	4a15      	ldr	r2, [pc, #84]	@ (80034ac <MX_USART6_UART_Init+0x5c>)
 8003458:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800345a:	4b13      	ldr	r3, [pc, #76]	@ (80034a8 <MX_USART6_UART_Init+0x58>)
 800345c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003460:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003462:	4b11      	ldr	r3, [pc, #68]	@ (80034a8 <MX_USART6_UART_Init+0x58>)
 8003464:	2200      	movs	r2, #0
 8003466:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003468:	4b0f      	ldr	r3, [pc, #60]	@ (80034a8 <MX_USART6_UART_Init+0x58>)
 800346a:	2200      	movs	r2, #0
 800346c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800346e:	4b0e      	ldr	r3, [pc, #56]	@ (80034a8 <MX_USART6_UART_Init+0x58>)
 8003470:	2200      	movs	r2, #0
 8003472:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003474:	4b0c      	ldr	r3, [pc, #48]	@ (80034a8 <MX_USART6_UART_Init+0x58>)
 8003476:	220c      	movs	r2, #12
 8003478:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800347a:	4b0b      	ldr	r3, [pc, #44]	@ (80034a8 <MX_USART6_UART_Init+0x58>)
 800347c:	2200      	movs	r2, #0
 800347e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003480:	4b09      	ldr	r3, [pc, #36]	@ (80034a8 <MX_USART6_UART_Init+0x58>)
 8003482:	2200      	movs	r2, #0
 8003484:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003486:	4b08      	ldr	r3, [pc, #32]	@ (80034a8 <MX_USART6_UART_Init+0x58>)
 8003488:	2200      	movs	r2, #0
 800348a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800348c:	4b06      	ldr	r3, [pc, #24]	@ (80034a8 <MX_USART6_UART_Init+0x58>)
 800348e:	2200      	movs	r2, #0
 8003490:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003492:	4805      	ldr	r0, [pc, #20]	@ (80034a8 <MX_USART6_UART_Init+0x58>)
 8003494:	f00b fed6 	bl	800f244 <HAL_UART_Init>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800349e:	f000 fe99 	bl	80041d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80034a2:	bf00      	nop
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20002114 	.word	0x20002114
 80034ac:	40011400 	.word	0x40011400

080034b0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b088      	sub	sp, #32
 80034b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80034b6:	1d3b      	adds	r3, r7, #4
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	605a      	str	r2, [r3, #4]
 80034be:	609a      	str	r2, [r3, #8]
 80034c0:	60da      	str	r2, [r3, #12]
 80034c2:	611a      	str	r2, [r3, #16]
 80034c4:	615a      	str	r2, [r3, #20]
 80034c6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80034c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003548 <MX_FMC_Init+0x98>)
 80034ca:	4a20      	ldr	r2, [pc, #128]	@ (800354c <MX_FMC_Init+0x9c>)
 80034cc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80034ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003548 <MX_FMC_Init+0x98>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80034d4:	4b1c      	ldr	r3, [pc, #112]	@ (8003548 <MX_FMC_Init+0x98>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80034da:	4b1b      	ldr	r3, [pc, #108]	@ (8003548 <MX_FMC_Init+0x98>)
 80034dc:	2204      	movs	r2, #4
 80034de:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80034e0:	4b19      	ldr	r3, [pc, #100]	@ (8003548 <MX_FMC_Init+0x98>)
 80034e2:	2210      	movs	r2, #16
 80034e4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80034e6:	4b18      	ldr	r3, [pc, #96]	@ (8003548 <MX_FMC_Init+0x98>)
 80034e8:	2240      	movs	r2, #64	@ 0x40
 80034ea:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80034ec:	4b16      	ldr	r3, [pc, #88]	@ (8003548 <MX_FMC_Init+0x98>)
 80034ee:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80034f2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80034f4:	4b14      	ldr	r3, [pc, #80]	@ (8003548 <MX_FMC_Init+0x98>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80034fa:	4b13      	ldr	r3, [pc, #76]	@ (8003548 <MX_FMC_Init+0x98>)
 80034fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003500:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8003502:	4b11      	ldr	r3, [pc, #68]	@ (8003548 <MX_FMC_Init+0x98>)
 8003504:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003508:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800350a:	4b0f      	ldr	r3, [pc, #60]	@ (8003548 <MX_FMC_Init+0x98>)
 800350c:	2200      	movs	r2, #0
 800350e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8003510:	2302      	movs	r3, #2
 8003512:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8003514:	2307      	movs	r3, #7
 8003516:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8003518:	2304      	movs	r3, #4
 800351a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800351c:	2307      	movs	r3, #7
 800351e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8003520:	2303      	movs	r3, #3
 8003522:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8003524:	2302      	movs	r3, #2
 8003526:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8003528:	2302      	movs	r3, #2
 800352a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800352c:	1d3b      	adds	r3, r7, #4
 800352e:	4619      	mov	r1, r3
 8003530:	4805      	ldr	r0, [pc, #20]	@ (8003548 <MX_FMC_Init+0x98>)
 8003532:	f00a fc50 	bl	800ddd6 <HAL_SDRAM_Init>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800353c:	f000 fe4a 	bl	80041d4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8003540:	bf00      	nop
 8003542:	3720      	adds	r7, #32
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	2000219c 	.word	0x2000219c
 800354c:	a0000140 	.word	0xa0000140

08003550 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b090      	sub	sp, #64	@ 0x40
 8003554:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003556:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	605a      	str	r2, [r3, #4]
 8003560:	609a      	str	r2, [r3, #8]
 8003562:	60da      	str	r2, [r3, #12]
 8003564:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003566:	4bb0      	ldr	r3, [pc, #704]	@ (8003828 <MX_GPIO_Init+0x2d8>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356a:	4aaf      	ldr	r2, [pc, #700]	@ (8003828 <MX_GPIO_Init+0x2d8>)
 800356c:	f043 0310 	orr.w	r3, r3, #16
 8003570:	6313      	str	r3, [r2, #48]	@ 0x30
 8003572:	4bad      	ldr	r3, [pc, #692]	@ (8003828 <MX_GPIO_Init+0x2d8>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003576:	f003 0310 	and.w	r3, r3, #16
 800357a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800357c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800357e:	4baa      	ldr	r3, [pc, #680]	@ (8003828 <MX_GPIO_Init+0x2d8>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003582:	4aa9      	ldr	r2, [pc, #676]	@ (8003828 <MX_GPIO_Init+0x2d8>)
 8003584:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003588:	6313      	str	r3, [r2, #48]	@ 0x30
 800358a:	4ba7      	ldr	r3, [pc, #668]	@ (8003828 <MX_GPIO_Init+0x2d8>)
 800358c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003592:	627b      	str	r3, [r7, #36]	@ 0x24
 8003594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003596:	4ba4      	ldr	r3, [pc, #656]	@ (8003828 <MX_GPIO_Init+0x2d8>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359a:	4aa3      	ldr	r2, [pc, #652]	@ (8003828 <MX_GPIO_Init+0x2d8>)
 800359c:	f043 0302 	orr.w	r3, r3, #2
 80035a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80035a2:	4ba1      	ldr	r3, [pc, #644]	@ (8003828 <MX_GPIO_Init+0x2d8>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	623b      	str	r3, [r7, #32]
 80035ac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035ae:	4b9e      	ldr	r3, [pc, #632]	@ (8003828 <MX_GPIO_Init+0x2d8>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b2:	4a9d      	ldr	r2, [pc, #628]	@ (8003828 <MX_GPIO_Init+0x2d8>)
 80035b4:	f043 0308 	orr.w	r3, r3, #8
 80035b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80035ba:	4b9b      	ldr	r3, [pc, #620]	@ (8003828 <MX_GPIO_Init+0x2d8>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	61fb      	str	r3, [r7, #28]
 80035c4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035c6:	4b98      	ldr	r3, [pc, #608]	@ (8003828 <MX_GPIO_Init+0x2d8>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ca:	4a97      	ldr	r2, [pc, #604]	@ (8003828 <MX_GPIO_Init+0x2d8>)
 80035cc:	f043 0304 	orr.w	r3, r3, #4
 80035d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80035d2:	4b95      	ldr	r3, [pc, #596]	@ (8003828 <MX_GPIO_Init+0x2d8>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d6:	f003 0304 	and.w	r3, r3, #4
 80035da:	61bb      	str	r3, [r7, #24]
 80035dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035de:	4b92      	ldr	r3, [pc, #584]	@ (8003828 <MX_GPIO_Init+0x2d8>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e2:	4a91      	ldr	r2, [pc, #580]	@ (8003828 <MX_GPIO_Init+0x2d8>)
 80035e4:	f043 0301 	orr.w	r3, r3, #1
 80035e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80035ea:	4b8f      	ldr	r3, [pc, #572]	@ (8003828 <MX_GPIO_Init+0x2d8>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80035f6:	4b8c      	ldr	r3, [pc, #560]	@ (8003828 <MX_GPIO_Init+0x2d8>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fa:	4a8b      	ldr	r2, [pc, #556]	@ (8003828 <MX_GPIO_Init+0x2d8>)
 80035fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003600:	6313      	str	r3, [r2, #48]	@ 0x30
 8003602:	4b89      	ldr	r3, [pc, #548]	@ (8003828 <MX_GPIO_Init+0x2d8>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003606:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800360a:	613b      	str	r3, [r7, #16]
 800360c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800360e:	4b86      	ldr	r3, [pc, #536]	@ (8003828 <MX_GPIO_Init+0x2d8>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003612:	4a85      	ldr	r2, [pc, #532]	@ (8003828 <MX_GPIO_Init+0x2d8>)
 8003614:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003618:	6313      	str	r3, [r2, #48]	@ 0x30
 800361a:	4b83      	ldr	r3, [pc, #524]	@ (8003828 <MX_GPIO_Init+0x2d8>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003626:	4b80      	ldr	r3, [pc, #512]	@ (8003828 <MX_GPIO_Init+0x2d8>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362a:	4a7f      	ldr	r2, [pc, #508]	@ (8003828 <MX_GPIO_Init+0x2d8>)
 800362c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003630:	6313      	str	r3, [r2, #48]	@ 0x30
 8003632:	4b7d      	ldr	r3, [pc, #500]	@ (8003828 <MX_GPIO_Init+0x2d8>)
 8003634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003636:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800363a:	60bb      	str	r3, [r7, #8]
 800363c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800363e:	4b7a      	ldr	r3, [pc, #488]	@ (8003828 <MX_GPIO_Init+0x2d8>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003642:	4a79      	ldr	r2, [pc, #484]	@ (8003828 <MX_GPIO_Init+0x2d8>)
 8003644:	f043 0320 	orr.w	r3, r3, #32
 8003648:	6313      	str	r3, [r2, #48]	@ 0x30
 800364a:	4b77      	ldr	r3, [pc, #476]	@ (8003828 <MX_GPIO_Init+0x2d8>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364e:	f003 0320 	and.w	r3, r3, #32
 8003652:	607b      	str	r3, [r7, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003656:	4b74      	ldr	r3, [pc, #464]	@ (8003828 <MX_GPIO_Init+0x2d8>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365a:	4a73      	ldr	r2, [pc, #460]	@ (8003828 <MX_GPIO_Init+0x2d8>)
 800365c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003660:	6313      	str	r3, [r2, #48]	@ 0x30
 8003662:	4b71      	ldr	r3, [pc, #452]	@ (8003828 <MX_GPIO_Init+0x2d8>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800366e:	2201      	movs	r2, #1
 8003670:	2120      	movs	r1, #32
 8003672:	486e      	ldr	r0, [pc, #440]	@ (800382c <MX_GPIO_Init+0x2dc>)
 8003674:	f004 ff88 	bl	8008588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8003678:	2200      	movs	r2, #0
 800367a:	210c      	movs	r1, #12
 800367c:	486c      	ldr	r0, [pc, #432]	@ (8003830 <MX_GPIO_Init+0x2e0>)
 800367e:	f004 ff83 	bl	8008588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8003682:	2201      	movs	r2, #1
 8003684:	2108      	movs	r1, #8
 8003686:	486b      	ldr	r0, [pc, #428]	@ (8003834 <MX_GPIO_Init+0x2e4>)
 8003688:	f004 ff7e 	bl	8008588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800368c:	2201      	movs	r2, #1
 800368e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003692:	4867      	ldr	r0, [pc, #412]	@ (8003830 <MX_GPIO_Init+0x2e0>)
 8003694:	f004 ff78 	bl	8008588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8003698:	2200      	movs	r2, #0
 800369a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800369e:	4866      	ldr	r0, [pc, #408]	@ (8003838 <MX_GPIO_Init+0x2e8>)
 80036a0:	f004 ff72 	bl	8008588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80036a4:	2200      	movs	r2, #0
 80036a6:	21c8      	movs	r1, #200	@ 0xc8
 80036a8:	4864      	ldr	r0, [pc, #400]	@ (800383c <MX_GPIO_Init+0x2ec>)
 80036aa:	f004 ff6d 	bl	8008588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80036ae:	2308      	movs	r3, #8
 80036b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036b2:	2300      	movs	r3, #0
 80036b4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b6:	2300      	movs	r3, #0
 80036b8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80036ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036be:	4619      	mov	r1, r3
 80036c0:	485f      	ldr	r0, [pc, #380]	@ (8003840 <MX_GPIO_Init+0x2f0>)
 80036c2:	f004 fd9d 	bl	8008200 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80036c6:	f643 4323 	movw	r3, #15395	@ 0x3c23
 80036ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036cc:	2302      	movs	r3, #2
 80036ce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d0:	2300      	movs	r3, #0
 80036d2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036d4:	2303      	movs	r3, #3
 80036d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80036d8:	230a      	movs	r3, #10
 80036da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036e0:	4619      	mov	r1, r3
 80036e2:	4858      	ldr	r0, [pc, #352]	@ (8003844 <MX_GPIO_Init+0x2f4>)
 80036e4:	f004 fd8c 	bl	8008200 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80036e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036ee:	2300      	movs	r3, #0
 80036f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f2:	2300      	movs	r3, #0
 80036f4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80036f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036fa:	4619      	mov	r1, r3
 80036fc:	4852      	ldr	r0, [pc, #328]	@ (8003848 <MX_GPIO_Init+0x2f8>)
 80036fe:	f004 fd7f 	bl	8008200 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8003702:	2340      	movs	r3, #64	@ 0x40
 8003704:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003706:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800370a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370c:	2300      	movs	r3, #0
 800370e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8003710:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003714:	4619      	mov	r1, r3
 8003716:	4845      	ldr	r0, [pc, #276]	@ (800382c <MX_GPIO_Init+0x2dc>)
 8003718:	f004 fd72 	bl	8008200 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800371c:	2320      	movs	r3, #32
 800371e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003720:	2301      	movs	r3, #1
 8003722:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003724:	2300      	movs	r3, #0
 8003726:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003728:	2300      	movs	r3, #0
 800372a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800372c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003730:	4619      	mov	r1, r3
 8003732:	483e      	ldr	r0, [pc, #248]	@ (800382c <MX_GPIO_Init+0x2dc>)
 8003734:	f004 fd64 	bl	8008200 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8003738:	f241 030c 	movw	r3, #4108	@ 0x100c
 800373c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800373e:	2301      	movs	r3, #1
 8003740:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003742:	2300      	movs	r3, #0
 8003744:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003746:	2300      	movs	r3, #0
 8003748:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800374a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800374e:	4619      	mov	r1, r3
 8003750:	4837      	ldr	r0, [pc, #220]	@ (8003830 <MX_GPIO_Init+0x2e0>)
 8003752:	f004 fd55 	bl	8008200 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8003756:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800375a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800375c:	2300      	movs	r3, #0
 800375e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003760:	2300      	movs	r3, #0
 8003762:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8003764:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003768:	4619      	mov	r1, r3
 800376a:	4838      	ldr	r0, [pc, #224]	@ (800384c <MX_GPIO_Init+0x2fc>)
 800376c:	f004 fd48 	bl	8008200 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8003770:	2308      	movs	r3, #8
 8003772:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003774:	2301      	movs	r3, #1
 8003776:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003778:	2300      	movs	r3, #0
 800377a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800377c:	2300      	movs	r3, #0
 800377e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8003780:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003784:	4619      	mov	r1, r3
 8003786:	482b      	ldr	r0, [pc, #172]	@ (8003834 <MX_GPIO_Init+0x2e4>)
 8003788:	f004 fd3a 	bl	8008200 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800378c:	2310      	movs	r3, #16
 800378e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003790:	2300      	movs	r3, #0
 8003792:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003794:	2300      	movs	r3, #0
 8003796:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003798:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800379c:	4619      	mov	r1, r3
 800379e:	4823      	ldr	r0, [pc, #140]	@ (800382c <MX_GPIO_Init+0x2dc>)
 80037a0:	f004 fd2e 	bl	8008200 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80037a4:	f248 0304 	movw	r3, #32772	@ 0x8004
 80037a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037aa:	2300      	movs	r3, #0
 80037ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ae:	2300      	movs	r3, #0
 80037b0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80037b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80037b6:	4619      	mov	r1, r3
 80037b8:	481f      	ldr	r0, [pc, #124]	@ (8003838 <MX_GPIO_Init+0x2e8>)
 80037ba:	f004 fd21 	bl	8008200 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80037be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80037c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037c4:	2301      	movs	r3, #1
 80037c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c8:	2300      	movs	r3, #0
 80037ca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037cc:	2300      	movs	r3, #0
 80037ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80037d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80037d4:	4619      	mov	r1, r3
 80037d6:	4818      	ldr	r0, [pc, #96]	@ (8003838 <MX_GPIO_Init+0x2e8>)
 80037d8:	f004 fd12 	bl	8008200 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80037dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80037e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80037e2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80037e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e8:	2300      	movs	r3, #0
 80037ea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80037ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80037f0:	4619      	mov	r1, r3
 80037f2:	480f      	ldr	r0, [pc, #60]	@ (8003830 <MX_GPIO_Init+0x2e0>)
 80037f4:	f004 fd04 	bl	8008200 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80037f8:	2310      	movs	r3, #16
 80037fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037fc:	2302      	movs	r3, #2
 80037fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003800:	2300      	movs	r3, #0
 8003802:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003804:	2303      	movs	r3, #3
 8003806:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003808:	230a      	movs	r3, #10
 800380a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800380c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003810:	4619      	mov	r1, r3
 8003812:	4809      	ldr	r0, [pc, #36]	@ (8003838 <MX_GPIO_Init+0x2e8>)
 8003814:	f004 fcf4 	bl	8008200 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8003818:	23c8      	movs	r3, #200	@ 0xc8
 800381a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800381c:	2301      	movs	r3, #1
 800381e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003820:	2300      	movs	r3, #0
 8003822:	637b      	str	r3, [r7, #52]	@ 0x34
 8003824:	e014      	b.n	8003850 <MX_GPIO_Init+0x300>
 8003826:	bf00      	nop
 8003828:	40023800 	.word	0x40023800
 800382c:	40020c00 	.word	0x40020c00
 8003830:	40022000 	.word	0x40022000
 8003834:	40022800 	.word	0x40022800
 8003838:	40021c00 	.word	0x40021c00
 800383c:	40021800 	.word	0x40021800
 8003840:	40021000 	.word	0x40021000
 8003844:	40020400 	.word	0x40020400
 8003848:	40022400 	.word	0x40022400
 800384c:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003850:	2300      	movs	r3, #0
 8003852:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003854:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003858:	4619      	mov	r1, r3
 800385a:	4819      	ldr	r0, [pc, #100]	@ (80038c0 <MX_GPIO_Init+0x370>)
 800385c:	f004 fcd0 	bl	8008200 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8003860:	2305      	movs	r3, #5
 8003862:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003864:	2302      	movs	r3, #2
 8003866:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003868:	2300      	movs	r3, #0
 800386a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800386c:	2303      	movs	r3, #3
 800386e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003870:	230a      	movs	r3, #10
 8003872:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003874:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003878:	4619      	mov	r1, r3
 800387a:	4812      	ldr	r0, [pc, #72]	@ (80038c4 <MX_GPIO_Init+0x374>)
 800387c:	f004 fcc0 	bl	8008200 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8003880:	2304      	movs	r3, #4
 8003882:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003884:	2300      	movs	r3, #0
 8003886:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003888:	2300      	movs	r3, #0
 800388a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800388c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003890:	4619      	mov	r1, r3
 8003892:	480b      	ldr	r0, [pc, #44]	@ (80038c0 <MX_GPIO_Init+0x370>)
 8003894:	f004 fcb4 	bl	8008200 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8003898:	2328      	movs	r3, #40	@ 0x28
 800389a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800389c:	2302      	movs	r3, #2
 800389e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a0:	2300      	movs	r3, #0
 80038a2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038a4:	2303      	movs	r3, #3
 80038a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80038a8:	230a      	movs	r3, #10
 80038aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80038b0:	4619      	mov	r1, r3
 80038b2:	4805      	ldr	r0, [pc, #20]	@ (80038c8 <MX_GPIO_Init+0x378>)
 80038b4:	f004 fca4 	bl	8008200 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80038b8:	bf00      	nop
 80038ba:	3740      	adds	r7, #64	@ 0x40
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40021800 	.word	0x40021800
 80038c4:	40020800 	.word	0x40020800
 80038c8:	40020000 	.word	0x40020000

080038cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b096      	sub	sp, #88	@ 0x58
 80038d0:	af02      	add	r7, sp, #8
 80038d2:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST - 임시 비활성화 (SD 카드 테스트용) */
  LOG_WARN("USB Host initialization temporarily disabled to avoid RTOS task conflicts");
 80038d4:	49ba      	ldr	r1, [pc, #744]	@ (8003bc0 <StartDefaultTask+0x2f4>)
 80038d6:	2002      	movs	r0, #2
 80038d8:	f001 ffba 	bl	8005850 <LOGGER_SendFormatted>
  LOG_INFO("This eliminates USBH_Thread vs defaultTask priority conflicts");
 80038dc:	49b9      	ldr	r1, [pc, #740]	@ (8003bc4 <StartDefaultTask+0x2f8>)
 80038de:	2001      	movs	r0, #1
 80038e0:	f001 ffb6 	bl	8005850 <LOGGER_SendFormatted>
  // MX_USB_HOST_Init();  // SD 카드 테스트 완료 후 재활성화 예정
  /* USER CODE BEGIN 5 */
  
  // SD Card 초기화는 이미 main()에서 우선 완료됨
  LOG_INFO("📋 SD card initialization completed in main() - checking status...");
 80038e4:	49b8      	ldr	r1, [pc, #736]	@ (8003bc8 <StartDefaultTask+0x2fc>)
 80038e6:	2001      	movs	r0, #1
 80038e8:	f001 ffb2 	bl	8005850 <LOGGER_SendFormatted>
  
  LOG_INFO("=== STM32F746G-DISCO UART6 Test Started ===");
 80038ec:	49b7      	ldr	r1, [pc, #732]	@ (8003bcc <StartDefaultTask+0x300>)
 80038ee:	2001      	movs	r0, #1
 80038f0:	f001 ffae 	bl	8005850 <LOGGER_SendFormatted>
  LOG_INFO("System Clock: %lu MHz", SystemCoreClock / 1000000);
 80038f4:	4bb6      	ldr	r3, [pc, #728]	@ (8003bd0 <StartDefaultTask+0x304>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4ab6      	ldr	r2, [pc, #728]	@ (8003bd4 <StartDefaultTask+0x308>)
 80038fa:	fba2 2303 	umull	r2, r3, r2, r3
 80038fe:	0c9b      	lsrs	r3, r3, #18
 8003900:	461a      	mov	r2, r3
 8003902:	49b5      	ldr	r1, [pc, #724]	@ (8003bd8 <StartDefaultTask+0x30c>)
 8003904:	2001      	movs	r0, #1
 8003906:	f001 ffa3 	bl	8005850 <LOGGER_SendFormatted>
  LOG_INFO("UART6 Configuration: 115200 baud, 8N1");
 800390a:	49b4      	ldr	r1, [pc, #720]	@ (8003bdc <StartDefaultTask+0x310>)
 800390c:	2001      	movs	r0, #1
 800390e:	f001 ff9f 	bl	8005850 <LOGGER_SendFormatted>
  LOG_INFO("📌 CRITICAL: For loopback test, connect PC6(TX) to PC7(RX) with a wire!");
 8003912:	49b3      	ldr	r1, [pc, #716]	@ (8003be0 <StartDefaultTask+0x314>)
 8003914:	2001      	movs	r0, #1
 8003916:	f001 ff9b 	bl	8005850 <LOGGER_SendFormatted>
  LOG_INFO("📌 UART6 Pins: PC6(TX) = Arduino D1, PC7(RX) = Arduino D0");
 800391a:	49b2      	ldr	r1, [pc, #712]	@ (8003be4 <StartDefaultTask+0x318>)
 800391c:	2001      	movs	r0, #1
 800391e:	f001 ff97 	bl	8005850 <LOGGER_SendFormatted>
  
  // SD 카드 기본 기능 테스트 (Default Task에서 수행)
  LOG_INFO("📤 [TX_TASK] Starting SD card basic functionality test...");
 8003922:	49b1      	ldr	r1, [pc, #708]	@ (8003be8 <StartDefaultTask+0x31c>)
 8003924:	2001      	movs	r0, #1
 8003926:	f001 ff93 	bl	8005850 <LOGGER_SendFormatted>
  
  // SD 초기화 시도
  LOG_INFO("📤 [TX_TASK] Attempting SD card initialization...");
 800392a:	49b0      	ldr	r1, [pc, #704]	@ (8003bec <StartDefaultTask+0x320>)
 800392c:	2001      	movs	r0, #1
 800392e:	f001 ff8f 	bl	8005850 <LOGGER_SendFormatted>
  g_sd_initialization_result = SDStorage_Init();
 8003932:	f7fd fde5 	bl	8001500 <SDStorage_Init>
 8003936:	4603      	mov	r3, r0
 8003938:	4aad      	ldr	r2, [pc, #692]	@ (8003bf0 <StartDefaultTask+0x324>)
 800393a:	6013      	str	r3, [r2, #0]
  
  if (g_sd_initialization_result == SDSTORAGE_OK) {
 800393c:	4bac      	ldr	r3, [pc, #688]	@ (8003bf0 <StartDefaultTask+0x324>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d124      	bne.n	800398e <StartDefaultTask+0xc2>
    LOG_INFO("✅ [TX_TASK] SD card initialization SUCCESS");
 8003944:	49ab      	ldr	r1, [pc, #684]	@ (8003bf4 <StartDefaultTask+0x328>)
 8003946:	2001      	movs	r0, #1
 8003948:	f001 ff82 	bl	8005850 <LOGGER_SendFormatted>
    
    // 기본 쓰기 테스트
    LOG_INFO("📤 [TX_TASK] Testing SD card write operation...");
 800394c:	49aa      	ldr	r1, [pc, #680]	@ (8003bf8 <StartDefaultTask+0x32c>)
 800394e:	2001      	movs	r0, #1
 8003950:	f001 ff7e 	bl	8005850 <LOGGER_SendFormatted>
    const char* test_message = "SD Card Test - Hello World from FreeRTOS!\n";
 8003954:	4ba9      	ldr	r3, [pc, #676]	@ (8003bfc <StartDefaultTask+0x330>)
 8003956:	647b      	str	r3, [r7, #68]	@ 0x44
    int write_result = SDStorage_WriteLog(test_message, strlen(test_message));
 8003958:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800395a:	f7fc fc63 	bl	8000224 <strlen>
 800395e:	4603      	mov	r3, r0
 8003960:	4619      	mov	r1, r3
 8003962:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003964:	f7fd ffea 	bl	800193c <SDStorage_WriteLog>
 8003968:	6438      	str	r0, [r7, #64]	@ 0x40
    
    if (write_result == SDSTORAGE_OK) {
 800396a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800396c:	2b00      	cmp	r3, #0
 800396e:	d108      	bne.n	8003982 <StartDefaultTask+0xb6>
      LOG_INFO("✅ [TX_TASK] SD card write operation SUCCESS");
 8003970:	49a3      	ldr	r1, [pc, #652]	@ (8003c00 <StartDefaultTask+0x334>)
 8003972:	2001      	movs	r0, #1
 8003974:	f001 ff6c 	bl	8005850 <LOGGER_SendFormatted>
      LOG_INFO("🎉 [TX_TASK] SD card functionality confirmed - ready for long-term logging");
 8003978:	49a2      	ldr	r1, [pc, #648]	@ (8003c04 <StartDefaultTask+0x338>)
 800397a:	2001      	movs	r0, #1
 800397c:	f001 ff68 	bl	8005850 <LOGGER_SendFormatted>
 8003980:	e010      	b.n	80039a4 <StartDefaultTask+0xd8>
    } else {
      LOG_ERROR("❌ [TX_TASK] SD card write operation FAILED (code: %d)", write_result);
 8003982:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003984:	49a0      	ldr	r1, [pc, #640]	@ (8003c08 <StartDefaultTask+0x33c>)
 8003986:	2003      	movs	r0, #3
 8003988:	f001 ff62 	bl	8005850 <LOGGER_SendFormatted>
 800398c:	e00a      	b.n	80039a4 <StartDefaultTask+0xd8>
    }
  } else {
    LOG_ERROR("❌ [TX_TASK] SD card initialization FAILED (code: %d)", g_sd_initialization_result);
 800398e:	4b98      	ldr	r3, [pc, #608]	@ (8003bf0 <StartDefaultTask+0x324>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	461a      	mov	r2, r3
 8003994:	499d      	ldr	r1, [pc, #628]	@ (8003c0c <StartDefaultTask+0x340>)
 8003996:	2003      	movs	r0, #3
 8003998:	f001 ff5a 	bl	8005850 <LOGGER_SendFormatted>
    LOG_INFO("📺 [TX_TASK] Continuing with terminal-only logging");
 800399c:	499c      	ldr	r1, [pc, #624]	@ (8003c10 <StartDefaultTask+0x344>)
 800399e:	2001      	movs	r0, #1
 80039a0:	f001 ff56 	bl	8005850 <LOGGER_SendFormatted>
  }

  // SD 테스트 건너뛰고 바로 LoRa 시작
  
  LOG_INFO("📤 [TX_TASK] Starting LoRa initialization and JOIN...");
 80039a4:	499b      	ldr	r1, [pc, #620]	@ (8003c14 <StartDefaultTask+0x348>)
 80039a6:	2001      	movs	r0, #1
 80039a8:	f001 ff52 	bl	8005850 <LOGGER_SendFormatted>
  
  // UART 연결 (LoRa 통신을 위해 필수)
  LOG_INFO("📤 [TX_TASK] Connecting to UART for LoRa communication...");
 80039ac:	499a      	ldr	r1, [pc, #616]	@ (8003c18 <StartDefaultTask+0x34c>)
 80039ae:	2001      	movs	r0, #1
 80039b0:	f001 ff4e 	bl	8005850 <LOGGER_SendFormatted>
  UartStatus uart_status = UART_Connect("UART6");
 80039b4:	4899      	ldr	r0, [pc, #612]	@ (8003c1c <StartDefaultTask+0x350>)
 80039b6:	f002 f877 	bl	8005aa8 <UART_Connect>
 80039ba:	4603      	mov	r3, r0
 80039bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (uart_status == UART_STATUS_OK) {
 80039c0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d104      	bne.n	80039d2 <StartDefaultTask+0x106>
    LOG_INFO("✅ [TX_TASK] UART connection successful");
 80039c8:	4995      	ldr	r1, [pc, #596]	@ (8003c20 <StartDefaultTask+0x354>)
 80039ca:	2001      	movs	r0, #1
 80039cc:	f001 ff40 	bl	8005850 <LOGGER_SendFormatted>
 80039d0:	e006      	b.n	80039e0 <StartDefaultTask+0x114>
  } else {
    LOG_ERROR("❌ [TX_TASK] UART connection failed (status: %d)", uart_status);
 80039d2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80039d6:	461a      	mov	r2, r3
 80039d8:	4992      	ldr	r1, [pc, #584]	@ (8003c24 <StartDefaultTask+0x358>)
 80039da:	2003      	movs	r0, #3
 80039dc:	f001 ff38 	bl	8005850 <LOGGER_SendFormatted>
  }
  
  LOG_INFO("📤 [TX_TASK] Waiting for LoRa module boot-up (5 seconds - optimized for long-term test)...");
 80039e0:	4991      	ldr	r1, [pc, #580]	@ (8003c28 <StartDefaultTask+0x35c>)
 80039e2:	2001      	movs	r0, #1
 80039e4:	f001 ff34 	bl	8005850 <LOGGER_SendFormatted>
  osDelay(5000); // 5초 대기 (장기 테스트를 위해 단축)
 80039e8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80039ec:	f011 fb1e 	bl	801502c <osDelay>
  
  // LoraStarter 컨텍스트 초기화 (TDD 검증된 기본 설정 사용)
  LoraStarterContext lora_ctx;
  LoraStarter_InitWithDefaults(&lora_ctx, "TEST");
 80039f0:	f107 030c 	add.w	r3, r7, #12
 80039f4:	498d      	ldr	r1, [pc, #564]	@ (8003c2c <StartDefaultTask+0x360>)
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fc fee6 	bl	80007c8 <LoraStarter_InitWithDefaults>
  
  LOG_INFO("=== LoRa Initialization ===");
 80039fc:	498c      	ldr	r1, [pc, #560]	@ (8003c30 <StartDefaultTask+0x364>)
 80039fe:	2001      	movs	r0, #1
 8003a00:	f001 ff26 	bl	8005850 <LOGGER_SendFormatted>
  LOG_INFO("📤 Commands: %d, Message: %s, Max retries: %d", 
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4989      	ldr	r1, [pc, #548]	@ (8003c34 <StartDefaultTask+0x368>)
 8003a10:	2001      	movs	r0, #1
 8003a12:	f001 ff1d 	bl	8005850 <LOGGER_SendFormatted>
           lora_ctx.num_commands, lora_ctx.send_message, lora_ctx.max_retry_count);
           
  // SD 카드 로깅 설정 (간단한 방식)
  extern int g_sd_initialization_result; // main()에서 설정된 SD 결과
  if (g_sd_initialization_result == SDSTORAGE_OK) {
 8003a16:	4b76      	ldr	r3, [pc, #472]	@ (8003bf0 <StartDefaultTask+0x324>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d104      	bne.n	8003a28 <StartDefaultTask+0x15c>
    LOG_INFO("🗂️ LoRa logs will be saved to SD card: lora_logs/");
 8003a1e:	4986      	ldr	r1, [pc, #536]	@ (8003c38 <StartDefaultTask+0x36c>)
 8003a20:	2001      	movs	r0, #1
 8003a22:	f001 ff15 	bl	8005850 <LOGGER_SendFormatted>
 8003a26:	e003      	b.n	8003a30 <StartDefaultTask+0x164>
  } else {
    LOG_INFO("📺 LoRa logs will be displayed on terminal only (SD not available)");
 8003a28:	4984      	ldr	r1, [pc, #528]	@ (8003c3c <StartDefaultTask+0x370>)
 8003a2a:	2001      	movs	r0, #1
 8003a2c:	f001 ff10 	bl	8005850 <LOGGER_SendFormatted>
  }
  
  // LoRa 로깅 모드 설정 - 초기화 단계에서는 터미널만 사용
  if (g_sd_initialization_result == SDSTORAGE_OK) {
 8003a30:	4b6f      	ldr	r3, [pc, #444]	@ (8003bf0 <StartDefaultTask+0x324>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d110      	bne.n	8003a5a <StartDefaultTask+0x18e>
    LOGGER_SetMode(LOGGER_MODE_DUAL);  // 터미널 + SD 동시 출력
 8003a38:	2002      	movs	r0, #2
 8003a3a:	f001 fee5 	bl	8005808 <LOGGER_SetMode>
    LOGGER_SetFilterLevel(LOG_LEVEL_INFO);  // 터미널에서 모든 로그 확인 가능
 8003a3e:	2001      	movs	r0, #1
 8003a40:	f001 fea6 	bl	8005790 <LOGGER_SetFilterLevel>
    LOGGER_SetSDFilterLevel(LOG_LEVEL_WARN);  // SD 카드에는 WARN 이상만 저장
 8003a44:	2002      	movs	r0, #2
 8003a46:	f001 feb3 	bl	80057b0 <LOGGER_SetSDFilterLevel>
    LOGGER_EnableSDLogging(false);  // 초기화 완료 전까지 SD 로깅 비활성화
 8003a4a:	2000      	movs	r0, #0
 8003a4c:	f001 fec0 	bl	80057d0 <LOGGER_EnableSDLogging>
    LOG_WARN("✅ LoRa logging mode: DUAL (Terminal + SD), SD logging will start from JOIN attempts");
 8003a50:	497b      	ldr	r1, [pc, #492]	@ (8003c40 <StartDefaultTask+0x374>)
 8003a52:	2002      	movs	r0, #2
 8003a54:	f001 fefc 	bl	8005850 <LOGGER_SendFormatted>
 8003a58:	e009      	b.n	8003a6e <StartDefaultTask+0x1a2>
  } else {
    LOGGER_SetMode(LOGGER_MODE_TERMINAL_ONLY);
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	f001 fed4 	bl	8005808 <LOGGER_SetMode>
    LOGGER_SetFilterLevel(LOG_LEVEL_INFO);
 8003a60:	2001      	movs	r0, #1
 8003a62:	f001 fe95 	bl	8005790 <LOGGER_SetFilterLevel>
    LOG_INFO("📺 LoRa logging mode: Terminal only");
 8003a66:	4977      	ldr	r1, [pc, #476]	@ (8003c44 <StartDefaultTask+0x378>)
 8003a68:	2001      	movs	r0, #1
 8003a6a:	f001 fef1 	bl	8005850 <LOGGER_SendFormatted>
  }
  
  // LoRa 프로세스 루프 (초기화 → JOIN → 주기적 전송)
  LOG_INFO("📤 [TX_TASK] Starting LoRa process loop...");
 8003a6e:	4976      	ldr	r1, [pc, #472]	@ (8003c48 <StartDefaultTask+0x37c>)
 8003a70:	2001      	movs	r0, #1
 8003a72:	f001 feed 	bl	8005850 <LOGGER_SendFormatted>
  
  for(;;)
  {
    // 수신된 응답이 있으면 LoraStarter에 전달
    const char* rx_data = NULL;
 8003a76:	2300      	movs	r3, #0
 8003a78:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (lora_new_response) {
 8003a7a:	4b74      	ldr	r3, [pc, #464]	@ (8003c4c <StartDefaultTask+0x380>)
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d004      	beq.n	8003a8e <StartDefaultTask+0x1c2>
      rx_data = lora_rx_response;
 8003a84:	4b72      	ldr	r3, [pc, #456]	@ (8003c50 <StartDefaultTask+0x384>)
 8003a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
      lora_new_response = false; // 플래그 클리어
 8003a88:	4b70      	ldr	r3, [pc, #448]	@ (8003c4c <StartDefaultTask+0x380>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	701a      	strb	r2, [r3, #0]
      // 응답 처리 - 로그는 ResponseHandler에서 이미 출력됨
    }
    
    // LoraStarter 프로세스 실행
    LoraStarter_Process(&lora_ctx, rx_data);
 8003a8e:	f107 030c 	add.w	r3, r7, #12
 8003a92:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7fc fedf 	bl	8000858 <LoraStarter_Process>
    
    // JOIN 성공 후 시간 조회는 LoRa 상태 머신에서 자동 처리됨 (TIMEREQ → LTIME)
    
    // 상태별 처리 간격 및 디버깅 (중요한 상태만)
    static int last_state = -1;
    if (lora_ctx.state != last_state) {
 8003a9a:	7b3b      	ldrb	r3, [r7, #12]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4b6d      	ldr	r3, [pc, #436]	@ (8003c54 <StartDefaultTask+0x388>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d01a      	beq.n	8003adc <StartDefaultTask+0x210>
      // JOIN, SEND, ERROR 등 중요한 상태 변경만 로그 출력
      if (lora_ctx.state == LORA_STATE_SEND_JOIN || 
 8003aa6:	7b3b      	ldrb	r3, [r7, #12]
 8003aa8:	2b03      	cmp	r3, #3
 8003aaa:	d008      	beq.n	8003abe <StartDefaultTask+0x1f2>
          lora_ctx.state == LORA_STATE_SEND_PERIODIC ||
 8003aac:	7b3b      	ldrb	r3, [r7, #12]
      if (lora_ctx.state == LORA_STATE_SEND_JOIN || 
 8003aae:	2b09      	cmp	r3, #9
 8003ab0:	d005      	beq.n	8003abe <StartDefaultTask+0x1f2>
          lora_ctx.state == LORA_STATE_DONE ||
 8003ab2:	7b3b      	ldrb	r3, [r7, #12]
          lora_ctx.state == LORA_STATE_SEND_PERIODIC ||
 8003ab4:	2b0d      	cmp	r3, #13
 8003ab6:	d002      	beq.n	8003abe <StartDefaultTask+0x1f2>
          lora_ctx.state == LORA_STATE_ERROR) {
 8003ab8:	7b3b      	ldrb	r3, [r7, #12]
          lora_ctx.state == LORA_STATE_DONE ||
 8003aba:	2b0e      	cmp	r3, #14
 8003abc:	d10a      	bne.n	8003ad4 <StartDefaultTask+0x208>
        LOG_INFO("[TX_TASK] ⚙️ LoRa State: %d, cmd_index: %d/%d", 
 8003abe:	7b3b      	ldrb	r3, [r7, #12]
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	460a      	mov	r2, r1
 8003acc:	4962      	ldr	r1, [pc, #392]	@ (8003c58 <StartDefaultTask+0x38c>)
 8003ace:	2001      	movs	r0, #1
 8003ad0:	f001 febe 	bl	8005850 <LOGGER_SendFormatted>
                  lora_ctx.state, lora_ctx.cmd_index, lora_ctx.num_commands);
      }
      last_state = lora_ctx.state;
 8003ad4:	7b3b      	ldrb	r3, [r7, #12]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	4b5e      	ldr	r3, [pc, #376]	@ (8003c54 <StartDefaultTask+0x388>)
 8003ada:	601a      	str	r2, [r3, #0]
    }
    
    switch(lora_ctx.state) {
 8003adc:	7b3b      	ldrb	r3, [r7, #12]
 8003ade:	2b0e      	cmp	r3, #14
 8003ae0:	f200 80d3 	bhi.w	8003c8a <StartDefaultTask+0x3be>
 8003ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8003aec <StartDefaultTask+0x220>)
 8003ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aea:	bf00      	nop
 8003aec:	08003b29 	.word	0x08003b29
 8003af0:	08003b33 	.word	0x08003b33
 8003af4:	08003b4b 	.word	0x08003b4b
 8003af8:	08003b55 	.word	0x08003b55
 8003afc:	08003ba3 	.word	0x08003ba3
 8003b00:	08003b85 	.word	0x08003b85
 8003b04:	08003ba3 	.word	0x08003ba3
 8003b08:	08003b8f 	.word	0x08003b8f
 8003b0c:	08003ba3 	.word	0x08003ba3
 8003b10:	08003b99 	.word	0x08003b99
 8003b14:	08003ba3 	.word	0x08003ba3
 8003b18:	08003bad 	.word	0x08003bad
 8003b1c:	08003bb7 	.word	0x08003bb7
 8003b20:	08003c65 	.word	0x08003c65
 8003b24:	08003c65 	.word	0x08003c65
      case LORA_STATE_INIT:
        osDelay(500); // 초기화 상태는 빠르게
 8003b28:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003b2c:	f011 fa7e 	bl	801502c <osDelay>
        break;
 8003b30:	e0b0      	b.n	8003c94 <StartDefaultTask+0x3c8>
      case LORA_STATE_SEND_CMD:
        LOG_INFO("[TX_TASK] 📤 Sending command %d/%d", 
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1c5a      	adds	r2, r3, #1
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	4948      	ldr	r1, [pc, #288]	@ (8003c5c <StartDefaultTask+0x390>)
 8003b3a:	2001      	movs	r0, #1
 8003b3c:	f001 fe88 	bl	8005850 <LOGGER_SendFormatted>
                lora_ctx.cmd_index + 1, lora_ctx.num_commands);
        osDelay(1000); // 명령어 전송 후 1초 대기
 8003b40:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003b44:	f011 fa72 	bl	801502c <osDelay>
        break;
 8003b48:	e0a4      	b.n	8003c94 <StartDefaultTask+0x3c8>
      case LORA_STATE_WAIT_OK:
        // OK 응답 대기 중 - 조용히 대기
        osDelay(2000); // OK 응답 대기 중 2초 간격
 8003b4a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003b4e:	f011 fa6d 	bl	801502c <osDelay>
        break;
 8003b52:	e09f      	b.n	8003c94 <StartDefaultTask+0x3c8>
      case LORA_STATE_SEND_JOIN:
        // JOIN 시도 시작 - SD 로깅 활성화
        if (g_sd_initialization_result == SDSTORAGE_OK && !LOGGER_IsSDLoggingEnabled()) {
 8003b54:	4b26      	ldr	r3, [pc, #152]	@ (8003bf0 <StartDefaultTask+0x324>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10e      	bne.n	8003b7a <StartDefaultTask+0x2ae>
 8003b5c:	f001 fe48 	bl	80057f0 <LOGGER_IsSDLoggingEnabled>
 8003b60:	4603      	mov	r3, r0
 8003b62:	f083 0301 	eor.w	r3, r3, #1
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d006      	beq.n	8003b7a <StartDefaultTask+0x2ae>
          LOGGER_EnableSDLogging(true);
 8003b6c:	2001      	movs	r0, #1
 8003b6e:	f001 fe2f 	bl	80057d0 <LOGGER_EnableSDLogging>
          LOG_WARN("🗂️ SD logging enabled from JOIN attempts (WARN+ levels only)");
 8003b72:	493b      	ldr	r1, [pc, #236]	@ (8003c60 <StartDefaultTask+0x394>)
 8003b74:	2002      	movs	r0, #2
 8003b76:	f001 fe6b 	bl	8005850 <LOGGER_SendFormatted>
        }
        osDelay(2000); // JOIN 명령어 전송 후 2초 대기
 8003b7a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003b7e:	f011 fa55 	bl	801502c <osDelay>
        break;
 8003b82:	e087      	b.n	8003c94 <StartDefaultTask+0x3c8>
      case LORA_STATE_SEND_TIMEREQ:
        osDelay(1000); // TIMEREQ 명령어 전송 후 1초 대기
 8003b84:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003b88:	f011 fa50 	bl	801502c <osDelay>
        break;
 8003b8c:	e082      	b.n	8003c94 <StartDefaultTask+0x3c8>
      case LORA_STATE_SEND_LTIME:
        osDelay(1000); // LTIME 명령어 전송 후 1초 대기
 8003b8e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003b92:	f011 fa4b 	bl	801502c <osDelay>
        break;
 8003b96:	e07d      	b.n	8003c94 <StartDefaultTask+0x3c8>
      case LORA_STATE_SEND_PERIODIC:
        osDelay(2000); // SEND 명령어 전송 후 2초 대기
 8003b98:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003b9c:	f011 fa46 	bl	801502c <osDelay>
        break;
 8003ba0:	e078      	b.n	8003c94 <StartDefaultTask+0x3c8>
      case LORA_STATE_WAIT_JOIN_OK:
      case LORA_STATE_WAIT_TIMEREQ_OK:
      case LORA_STATE_WAIT_LTIME_RESPONSE:
      case LORA_STATE_WAIT_SEND_RESPONSE:
        osDelay(3000); // 응답 대기 중 3초 간격
 8003ba2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003ba6:	f011 fa41 	bl	801502c <osDelay>
        break;
 8003baa:	e073      	b.n	8003c94 <StartDefaultTask+0x3c8>
      case LORA_STATE_WAIT_SEND_INTERVAL:
        // 주기적 전송 대기 중 - 로그 출력 없이 조용히 대기
        osDelay(5000); // 주기적 전송 대기 중 5초 간격으로 체크
 8003bac:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003bb0:	f011 fa3c 	bl	801502c <osDelay>
        break;
 8003bb4:	e06e      	b.n	8003c94 <StartDefaultTask+0x3c8>
      case LORA_STATE_JOIN_RETRY:
        osDelay(5000); // 재시도 대기 5초
 8003bb6:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003bba:	f011 fa37 	bl	801502c <osDelay>
        break;
 8003bbe:	e069      	b.n	8003c94 <StartDefaultTask+0x3c8>
 8003bc0:	0801b5cc 	.word	0x0801b5cc
 8003bc4:	0801b618 	.word	0x0801b618
 8003bc8:	0801b658 	.word	0x0801b658
 8003bcc:	0801b6a0 	.word	0x0801b6a0
 8003bd0:	2000001c 	.word	0x2000001c
 8003bd4:	431bde83 	.word	0x431bde83
 8003bd8:	0801b6cc 	.word	0x0801b6cc
 8003bdc:	0801b6e4 	.word	0x0801b6e4
 8003be0:	0801b70c 	.word	0x0801b70c
 8003be4:	0801b758 	.word	0x0801b758
 8003be8:	0801b794 	.word	0x0801b794
 8003bec:	0801b7d0 	.word	0x0801b7d0
 8003bf0:	20000014 	.word	0x20000014
 8003bf4:	0801b804 	.word	0x0801b804
 8003bf8:	0801b834 	.word	0x0801b834
 8003bfc:	0801b868 	.word	0x0801b868
 8003c00:	0801b894 	.word	0x0801b894
 8003c04:	0801b8c4 	.word	0x0801b8c4
 8003c08:	0801b914 	.word	0x0801b914
 8003c0c:	0801b94c 	.word	0x0801b94c
 8003c10:	0801b984 	.word	0x0801b984
 8003c14:	0801b9bc 	.word	0x0801b9bc
 8003c18:	0801b9f4 	.word	0x0801b9f4
 8003c1c:	0801ba30 	.word	0x0801ba30
 8003c20:	0801ba38 	.word	0x0801ba38
 8003c24:	0801ba64 	.word	0x0801ba64
 8003c28:	0801ba98 	.word	0x0801ba98
 8003c2c:	0801baf8 	.word	0x0801baf8
 8003c30:	0801bb00 	.word	0x0801bb00
 8003c34:	0801bb1c 	.word	0x0801bb1c
 8003c38:	0801bb4c 	.word	0x0801bb4c
 8003c3c:	0801bb84 	.word	0x0801bb84
 8003c40:	0801bbcc 	.word	0x0801bbcc
 8003c44:	0801bc24 	.word	0x0801bc24
 8003c48:	0801bc4c 	.word	0x0801bc4c
 8003c4c:	200023e8 	.word	0x200023e8
 8003c50:	200021e8 	.word	0x200021e8
 8003c54:	20000018 	.word	0x20000018
 8003c58:	0801bc7c 	.word	0x0801bc7c
 8003c5c:	0801bcb0 	.word	0x0801bcb0
 8003c60:	0801bcd8 	.word	0x0801bcd8
      case LORA_STATE_DONE:
      case LORA_STATE_ERROR:
        LOG_INFO("📤 [TX_TASK] LoRa process completed with state: %s", 
 8003c64:	7b3b      	ldrb	r3, [r7, #12]
 8003c66:	2b0d      	cmp	r3, #13
 8003c68:	d101      	bne.n	8003c6e <StartDefaultTask+0x3a2>
 8003c6a:	4b13      	ldr	r3, [pc, #76]	@ (8003cb8 <StartDefaultTask+0x3ec>)
 8003c6c:	e000      	b.n	8003c70 <StartDefaultTask+0x3a4>
 8003c6e:	4b13      	ldr	r3, [pc, #76]	@ (8003cbc <StartDefaultTask+0x3f0>)
 8003c70:	461a      	mov	r2, r3
 8003c72:	4913      	ldr	r1, [pc, #76]	@ (8003cc0 <StartDefaultTask+0x3f4>)
 8003c74:	2001      	movs	r0, #1
 8003c76:	f001 fdeb 	bl	8005850 <LOGGER_SendFormatted>
                lora_ctx.state == LORA_STATE_DONE ? "DONE" : "ERROR");
        goto idle_loop;
 8003c7a:	bf00      	nop
    }
  }

idle_loop:
  /* Infinite idle loop */
  LOG_INFO("📤 [TX_TASK] Entering idle mode...");
 8003c7c:	4911      	ldr	r1, [pc, #68]	@ (8003cc4 <StartDefaultTask+0x3f8>)
 8003c7e:	2001      	movs	r0, #1
 8003c80:	f001 fde6 	bl	8005850 <LOGGER_SendFormatted>
  uint32_t idle_counter = 0;
 8003c84:	2300      	movs	r3, #0
 8003c86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c88:	e005      	b.n	8003c96 <StartDefaultTask+0x3ca>
        osDelay(1000);
 8003c8a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003c8e:	f011 f9cd 	bl	801502c <osDelay>
        break;
 8003c92:	bf00      	nop
  {
 8003c94:	e6ef      	b.n	8003a76 <StartDefaultTask+0x1aa>
  
  for(;;)
  {
    // 30초마다 idle 상태 표시
    osDelay(30000);
 8003c96:	f247 5030 	movw	r0, #30000	@ 0x7530
 8003c9a:	f011 f9c7 	bl	801502c <osDelay>
    idle_counter++;
 8003c9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	64bb      	str	r3, [r7, #72]	@ 0x48
    LOG_INFO("📤 [TX_TASK] Idle mode: %lu minutes elapsed", idle_counter / 2);
 8003ca4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ca6:	085b      	lsrs	r3, r3, #1
 8003ca8:	461a      	mov	r2, r3
 8003caa:	4907      	ldr	r1, [pc, #28]	@ (8003cc8 <StartDefaultTask+0x3fc>)
 8003cac:	2001      	movs	r0, #1
 8003cae:	f001 fdcf 	bl	8005850 <LOGGER_SendFormatted>
    osDelay(30000);
 8003cb2:	bf00      	nop
 8003cb4:	e7ef      	b.n	8003c96 <StartDefaultTask+0x3ca>
 8003cb6:	bf00      	nop
 8003cb8:	0801bd1c 	.word	0x0801bd1c
 8003cbc:	0801bd24 	.word	0x0801bd24
 8003cc0:	0801bd2c 	.word	0x0801bd2c
 8003cc4:	0801bd64 	.word	0x0801bd64
 8003cc8:	0801bd8c 	.word	0x0801bd8c

08003ccc <StartSDLoggingTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSDLoggingTask */
void StartSDLoggingTask(void const * argument)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b0b2      	sub	sp, #200	@ 0xc8
 8003cd0:	af02      	add	r7, sp, #8
 8003cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSDLoggingTask */
  LOG_INFO("=== SD Logging Task Started ===");
 8003cd4:	4971      	ldr	r1, [pc, #452]	@ (8003e9c <StartSDLoggingTask+0x1d0>)
 8003cd6:	2001      	movs	r0, #1
 8003cd8:	f001 fdba 	bl	8005850 <LOGGER_SendFormatted>
  
  // 시스템 안정화 대기 (다른 태스크들 먼저 시작)
  osDelay(3000);
 8003cdc:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003ce0:	f011 f9a4 	bl	801502c <osDelay>
  
  // SD 초기화 시도 (타임아웃 있는 안전한 방식)
  LOG_INFO("[SD_TASK] 🔄 Attempting SD card initialization...");
 8003ce4:	496e      	ldr	r1, [pc, #440]	@ (8003ea0 <StartSDLoggingTask+0x1d4>)
 8003ce6:	2001      	movs	r0, #1
 8003ce8:	f001 fdb2 	bl	8005850 <LOGGER_SendFormatted>
  
  // 단계별 안전한 SD 초기화
  int init_attempts = 0;
 8003cec:	2300      	movs	r3, #0
 8003cee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  const int MAX_INIT_ATTEMPTS = 3;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  
  for (init_attempts = 0; init_attempts < MAX_INIT_ATTEMPTS; init_attempts++) {
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003cfe:	e054      	b.n	8003daa <StartSDLoggingTask+0xde>
    LOG_INFO("[SD_TASK] Initialization attempt %d/%d", init_attempts + 1, MAX_INIT_ATTEMPTS);
 8003d00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003d04:	1c5a      	adds	r2, r3, #1
 8003d06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003d0a:	4966      	ldr	r1, [pc, #408]	@ (8003ea4 <StartSDLoggingTask+0x1d8>)
 8003d0c:	2001      	movs	r0, #1
 8003d0e:	f001 fd9f 	bl	8005850 <LOGGER_SendFormatted>
    
    // SDStorage_Init을 타임아웃과 함께 호출
    uint32_t init_start_time = HAL_GetTick();
 8003d12:	f002 fbb1 	bl	8006478 <HAL_GetTick>
 8003d16:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
    const uint32_t INIT_TIMEOUT_MS = 10000;  // 10초 타임아웃
 8003d1a:	f242 7310 	movw	r3, #10000	@ 0x2710
 8003d1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    
    // TODO: 실제로는 별도 태스크에서 SDStorage_Init 호출하고 여기서는 폴링
    // 현재는 간단히 직접 호출하되 타임아웃 체크
    int init_result = SDStorage_Init();
 8003d22:	f7fd fbed 	bl	8001500 <SDStorage_Init>
 8003d26:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    uint32_t init_duration = HAL_GetTick() - init_start_time;
 8003d2a:	f002 fba5 	bl	8006478 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    
    LOG_INFO("[SD_TASK] Init attempt %d took %lu ms, result: %d", 
 8003d3a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003d3e:	1c5a      	adds	r2, r3, #1
 8003d40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d4a:	4957      	ldr	r1, [pc, #348]	@ (8003ea8 <StartSDLoggingTask+0x1dc>)
 8003d4c:	2001      	movs	r0, #1
 8003d4e:	f001 fd7f 	bl	8005850 <LOGGER_SendFormatted>
             init_attempts + 1, init_duration, init_result);
    
    if (init_result == SDSTORAGE_OK) {
 8003d52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10a      	bne.n	8003d70 <StartSDLoggingTask+0xa4>
      LOG_INFO("[SD_TASK] ✅ SD initialization successful!");
 8003d5a:	4954      	ldr	r1, [pc, #336]	@ (8003eac <StartSDLoggingTask+0x1e0>)
 8003d5c:	2001      	movs	r0, #1
 8003d5e:	f001 fd77 	bl	8005850 <LOGGER_SendFormatted>
      g_sd_initialization_result = SDSTORAGE_OK;
 8003d62:	4b53      	ldr	r3, [pc, #332]	@ (8003eb0 <StartSDLoggingTask+0x1e4>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]
      g_sd_logging_active = true;
 8003d68:	4b52      	ldr	r3, [pc, #328]	@ (8003eb4 <StartSDLoggingTask+0x1e8>)
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	701a      	strb	r2, [r3, #0]
      break;
 8003d6e:	e022      	b.n	8003db6 <StartSDLoggingTask+0xea>
    } else {
      LOG_WARN("[SD_TASK] ⚠️ SD init attempt %d failed (code: %d)", 
 8003d70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d7a:	494f      	ldr	r1, [pc, #316]	@ (8003eb8 <StartSDLoggingTask+0x1ec>)
 8003d7c:	2002      	movs	r0, #2
 8003d7e:	f001 fd67 	bl	8005850 <LOGGER_SendFormatted>
               init_attempts + 1, init_result);
      
      if (init_attempts < MAX_INIT_ATTEMPTS - 1) {
 8003d82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003d86:	3b01      	subs	r3, #1
 8003d88:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	da07      	bge.n	8003da0 <StartSDLoggingTask+0xd4>
        LOG_INFO("[SD_TASK] Waiting 5 seconds before retry...");
 8003d90:	494a      	ldr	r1, [pc, #296]	@ (8003ebc <StartSDLoggingTask+0x1f0>)
 8003d92:	2001      	movs	r0, #1
 8003d94:	f001 fd5c 	bl	8005850 <LOGGER_SendFormatted>
        osDelay(5000);
 8003d98:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003d9c:	f011 f946 	bl	801502c <osDelay>
  for (init_attempts = 0; init_attempts < MAX_INIT_ATTEMPTS; init_attempts++) {
 8003da0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003da4:	3301      	adds	r3, #1
 8003da6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003daa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8003dae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003db2:	429a      	cmp	r2, r3
 8003db4:	dba4      	blt.n	8003d00 <StartSDLoggingTask+0x34>
      }
    }
  }
  
  if (!g_sd_logging_active) {
 8003db6:	4b3f      	ldr	r3, [pc, #252]	@ (8003eb4 <StartSDLoggingTask+0x1e8>)
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	f083 0301 	eor.w	r3, r3, #1
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00c      	beq.n	8003dde <StartSDLoggingTask+0x112>
    LOG_ERROR("[SD_TASK] ❌ All SD initialization attempts failed");
 8003dc4:	493e      	ldr	r1, [pc, #248]	@ (8003ec0 <StartSDLoggingTask+0x1f4>)
 8003dc6:	2003      	movs	r0, #3
 8003dc8:	f001 fd42 	bl	8005850 <LOGGER_SendFormatted>
    LOG_INFO("[SD_TASK] Continuing with terminal-only logging");
 8003dcc:	493d      	ldr	r1, [pc, #244]	@ (8003ec4 <StartSDLoggingTask+0x1f8>)
 8003dce:	2001      	movs	r0, #1
 8003dd0:	f001 fd3e 	bl	8005850 <LOGGER_SendFormatted>
    
    // SD 실패해도 태스크는 계속 실행 (나중에 재시도 가능)
    for(;;) {
      osDelay(60000);  // 1분마다 재시도 체크 (향후 확장)
 8003dd4:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8003dd8:	f011 f928 	bl	801502c <osDelay>
 8003ddc:	e7fa      	b.n	8003dd4 <StartSDLoggingTask+0x108>
    }
  }
  
  LOG_INFO("[SD_TASK] 🗂️ SD logging queue processing started");
 8003dde:	493a      	ldr	r1, [pc, #232]	@ (8003ec8 <StartSDLoggingTask+0x1fc>)
 8003de0:	2001      	movs	r0, #1
 8003de2:	f001 fd35 	bl	8005850 <LOGGER_SendFormatted>
  
  // SD 로그 큐 처리 메인 루프
  for(;;)
  {
    SDLogEntry_t log_entry;
    osEvent event = osMessageGet(sdLogQueueHandle, 1000);  // 1초 타임아웃
 8003de6:	4b39      	ldr	r3, [pc, #228]	@ (8003ecc <StartSDLoggingTask+0x200>)
 8003de8:	6819      	ldr	r1, [r3, #0]
 8003dea:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8003dee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003df2:	4618      	mov	r0, r3
 8003df4:	f011 f996 	bl	8015124 <osMessageGet>
    
    if (event.status == osEventMessage) {
 8003df8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003dfc:	2b10      	cmp	r3, #16
 8003dfe:	d12d      	bne.n	8003e5c <StartSDLoggingTask+0x190>
      // 큐에서 로그 엔트리 수신
      log_entry = *((SDLogEntry_t*)event.value.p);
 8003e00:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003e04:	f107 0308 	add.w	r3, r7, #8
 8003e08:	4611      	mov	r1, r2
 8003e0a:	2288      	movs	r2, #136	@ 0x88
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f013 fffa 	bl	8017e06 <memcpy>
      
      // SD에 안전하게 쓰기 (타임아웃 포함)
      uint32_t write_start = HAL_GetTick();
 8003e12:	f002 fb31 	bl	8006478 <HAL_GetTick>
 8003e16:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
      int write_result = SDStorage_WriteLog(log_entry.message, log_entry.length);
 8003e1a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003e1e:	f107 0308 	add.w	r3, r7, #8
 8003e22:	4611      	mov	r1, r2
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7fd fd89 	bl	800193c <SDStorage_WriteLog>
 8003e2a:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
      uint32_t write_duration = HAL_GetTick() - write_start;
 8003e2e:	f002 fb23 	bl	8006478 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
      
      if (write_result != SDSTORAGE_OK) {
 8003e3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00a      	beq.n	8003e5c <StartSDLoggingTask+0x190>
        // SD 쓰기 실패 - 터미널에만 에러 출력 (무한루프 방지)
        printf("[SD_TASK] Write failed (duration: %lu ms, result: %d)\n", 
 8003e46:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8003e4a:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003e4e:	4820      	ldr	r0, [pc, #128]	@ (8003ed0 <StartSDLoggingTask+0x204>)
 8003e50:	f013 fe00 	bl	8017a54 <iprintf>
               write_duration, write_result);
        
        // SD 쓰기 실패 시 잠시 대기 후 재시도 여부 결정
        osDelay(1000);
 8003e54:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003e58:	f011 f8e8 	bl	801502c <osDelay>
      }
    }
    
    // 주기적으로 SD 상태 체크 (1분마다)
    static uint32_t status_check_counter = 0;
    status_check_counter++;
 8003e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ed4 <StartSDLoggingTask+0x208>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	3301      	adds	r3, #1
 8003e62:	4a1c      	ldr	r2, [pc, #112]	@ (8003ed4 <StartSDLoggingTask+0x208>)
 8003e64:	6013      	str	r3, [r2, #0]
    if (status_check_counter % 60 == 0) {  // 60초마다
 8003e66:	4b1b      	ldr	r3, [pc, #108]	@ (8003ed4 <StartSDLoggingTask+0x208>)
 8003e68:	6819      	ldr	r1, [r3, #0]
 8003e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ed8 <StartSDLoggingTask+0x20c>)
 8003e6c:	fba3 2301 	umull	r2, r3, r3, r1
 8003e70:	095a      	lsrs	r2, r3, #5
 8003e72:	4613      	mov	r3, r2
 8003e74:	011b      	lsls	r3, r3, #4
 8003e76:	1a9b      	subs	r3, r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	1aca      	subs	r2, r1, r3
 8003e7c:	2a00      	cmp	r2, #0
 8003e7e:	d108      	bne.n	8003e92 <StartSDLoggingTask+0x1c6>
      if (SDStorage_IsReady()) {
 8003e80:	f7fd ffc4 	bl	8001e0c <SDStorage_IsReady>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d103      	bne.n	8003e92 <StartSDLoggingTask+0x1c6>
        // SD 상태 정상
      } else {
        // SD 상태 이상 - 재초기화 시도 (향후 확장)
        LOG_WARN("[SD_TASK] SD card appears disconnected - monitoring");
 8003e8a:	4914      	ldr	r1, [pc, #80]	@ (8003edc <StartSDLoggingTask+0x210>)
 8003e8c:	2002      	movs	r0, #2
 8003e8e:	f001 fcdf 	bl	8005850 <LOGGER_SendFormatted>
      }
    }
    
    osDelay(50);  // CPU 부하 방지
 8003e92:	2032      	movs	r0, #50	@ 0x32
 8003e94:	f011 f8ca 	bl	801502c <osDelay>
  {
 8003e98:	e7a5      	b.n	8003de6 <StartSDLoggingTask+0x11a>
 8003e9a:	bf00      	nop
 8003e9c:	0801bdbc 	.word	0x0801bdbc
 8003ea0:	0801bddc 	.word	0x0801bddc
 8003ea4:	0801be10 	.word	0x0801be10
 8003ea8:	0801be38 	.word	0x0801be38
 8003eac:	0801be6c 	.word	0x0801be6c
 8003eb0:	20000014 	.word	0x20000014
 8003eb4:	200021e0 	.word	0x200021e0
 8003eb8:	0801be98 	.word	0x0801be98
 8003ebc:	0801bed0 	.word	0x0801bed0
 8003ec0:	0801befc 	.word	0x0801befc
 8003ec4:	0801bf30 	.word	0x0801bf30
 8003ec8:	0801bf60 	.word	0x0801bf60
 8003ecc:	200021dc 	.word	0x200021dc
 8003ed0:	0801bf98 	.word	0x0801bf98
 8003ed4:	2000245c 	.word	0x2000245c
 8003ed8:	88888889 	.word	0x88888889
 8003edc:	0801bfd0 	.word	0x0801bfd0

08003ee0 <StartReceiveTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReceiveTask */
void StartReceiveTask(void const * argument)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8003ee6:	af02      	add	r7, sp, #8
 8003ee8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003eec:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003ef0:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartReceiveTask */
  LOG_INFO("=== DMA-based Receive Task Started ===");
 8003ef2:	499b      	ldr	r1, [pc, #620]	@ (8004160 <StartReceiveTask+0x280>)
 8003ef4:	2001      	movs	r0, #1
 8003ef6:	f001 fcab 	bl	8005850 <LOGGER_SendFormatted>
  
  // UART 초기화 대기
  osDelay(2000);
 8003efa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003efe:	f011 f895 	bl	801502c <osDelay>
  
  // TDD 모듈들을 사용한 DMA 기반 수신 태스크
  char local_buffer[512];
  int local_bytes_received = 0;
 8003f02:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003f06:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]
  
  for(;;)
  {
    // TDD UART 모듈을 통한 DMA 기반 수신 체크
    UartStatus status = UART_Receive(local_buffer, sizeof(local_buffer), &local_bytes_received);
 8003f0e:	f107 0208 	add.w	r2, r7, #8
 8003f12:	f107 030c 	add.w	r3, r7, #12
 8003f16:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f001 fe40 	bl	8005ba0 <UART_Receive>
 8003f20:	4603      	mov	r3, r0
 8003f22:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    
    // 디버깅용: 수신 상태 체크 (에러 상태일 때만)
    static uint32_t debug_counter = 0;
    debug_counter++;
 8003f26:	4b8f      	ldr	r3, [pc, #572]	@ (8004164 <StartReceiveTask+0x284>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	4a8d      	ldr	r2, [pc, #564]	@ (8004164 <StartReceiveTask+0x284>)
 8003f2e:	6013      	str	r3, [r2, #0]
    if (debug_counter % 1200 == 0 && status != UART_STATUS_TIMEOUT) {  // 1분마다, 타임아웃 제외
 8003f30:	4b8c      	ldr	r3, [pc, #560]	@ (8004164 <StartReceiveTask+0x284>)
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	4b8c      	ldr	r3, [pc, #560]	@ (8004168 <StartReceiveTask+0x288>)
 8003f36:	fba3 1302 	umull	r1, r3, r3, r2
 8003f3a:	09db      	lsrs	r3, r3, #7
 8003f3c:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8003f40:	fb01 f303 	mul.w	r3, r1, r3
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d116      	bne.n	8003f78 <StartReceiveTask+0x98>
 8003f4a:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d012      	beq.n	8003f78 <StartReceiveTask+0x98>
      LOG_DEBUG("[RX_TASK] Status check #%lu: status=%d, bytes=%d", 
 8003f52:	4b84      	ldr	r3, [pc, #528]	@ (8004164 <StartReceiveTask+0x284>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a84      	ldr	r2, [pc, #528]	@ (8004168 <StartReceiveTask+0x288>)
 8003f58:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5c:	09da      	lsrs	r2, r3, #7
 8003f5e:	f897 120e 	ldrb.w	r1, [r7, #526]	@ 0x20e
 8003f62:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003f66:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	460b      	mov	r3, r1
 8003f70:	497e      	ldr	r1, [pc, #504]	@ (800416c <StartReceiveTask+0x28c>)
 8003f72:	2000      	movs	r0, #0
 8003f74:	f001 fc6c 	bl	8005850 <LOGGER_SendFormatted>
               debug_counter / 1200, status, local_bytes_received);
    }
    
    if (status == UART_STATUS_OK && local_bytes_received > 0) {
 8003f78:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f040 80eb 	bne.w	8004158 <StartReceiveTask+0x278>
 8003f82:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003f86:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f340 80e3 	ble.w	8004158 <StartReceiveTask+0x278>
      // 수신 완료 - 간단한 수신 로그 + ResponseHandler 분석
      LOG_INFO("📥 RECV: '%.30s%s' (%d bytes)", 
 8003f92:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003f96:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b1e      	cmp	r3, #30
 8003f9e:	dd01      	ble.n	8003fa4 <StartReceiveTask+0xc4>
 8003fa0:	4973      	ldr	r1, [pc, #460]	@ (8004170 <StartReceiveTask+0x290>)
 8003fa2:	e000      	b.n	8003fa6 <StartReceiveTask+0xc6>
 8003fa4:	4973      	ldr	r1, [pc, #460]	@ (8004174 <StartReceiveTask+0x294>)
 8003fa6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003faa:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f107 020c 	add.w	r2, r7, #12
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	496f      	ldr	r1, [pc, #444]	@ (8004178 <StartReceiveTask+0x298>)
 8003fba:	2001      	movs	r0, #1
 8003fbc:	f001 fc48 	bl	8005850 <LOGGER_SendFormatted>
               local_buffer, 
               (local_bytes_received > 30) ? "..." : "", 
               local_bytes_received);
      
      // 기본적인 응답 타입 체크 (ResponseHandler에서 상세 로그 출력)
      if (strstr(local_buffer, "+EVT:JOINED") != NULL) {
 8003fc0:	f107 030c 	add.w	r3, r7, #12
 8003fc4:	496d      	ldr	r1, [pc, #436]	@ (800417c <StartReceiveTask+0x29c>)
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f013 fe84 	bl	8017cd4 <strstr>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d009      	beq.n	8003fe6 <StartReceiveTask+0x106>
        LOG_WARN("✅ JOIN CONFIRMED - Network joined successfully");
 8003fd2:	496b      	ldr	r1, [pc, #428]	@ (8004180 <StartReceiveTask+0x2a0>)
 8003fd4:	2002      	movs	r0, #2
 8003fd6:	f001 fc3b 	bl	8005850 <LOGGER_SendFormatted>
        g_join_success_time = HAL_GetTick();  // JOIN 성공 시간 기록
 8003fda:	f002 fa4d 	bl	8006478 <HAL_GetTick>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	4a68      	ldr	r2, [pc, #416]	@ (8004184 <StartReceiveTask+0x2a4>)
 8003fe2:	6013      	str	r3, [r2, #0]
 8003fe4:	e01a      	b.n	800401c <StartReceiveTask+0x13c>
      } else if (strstr(local_buffer, "RAKwireless") != NULL) {
 8003fe6:	f107 030c 	add.w	r3, r7, #12
 8003fea:	4967      	ldr	r1, [pc, #412]	@ (8004188 <StartReceiveTask+0x2a8>)
 8003fec:	4618      	mov	r0, r3
 8003fee:	f013 fe71 	bl	8017cd4 <strstr>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d004      	beq.n	8004002 <StartReceiveTask+0x122>
        LOG_DEBUG("📡 LoRa module boot message (ignored)");
 8003ff8:	4964      	ldr	r1, [pc, #400]	@ (800418c <StartReceiveTask+0x2ac>)
 8003ffa:	2000      	movs	r0, #0
 8003ffc:	f001 fc28 	bl	8005850 <LOGGER_SendFormatted>
 8004000:	e00c      	b.n	800401c <StartReceiveTask+0x13c>
      } else if (ResponseHandler_IsTimeResponse(local_buffer)) {
 8004002:	f107 030c 	add.w	r3, r7, #12
 8004006:	4618      	mov	r0, r3
 8004008:	f7fd f8a8 	bl	800115c <ResponseHandler_IsTimeResponse>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d004      	beq.n	800401c <StartReceiveTask+0x13c>
        // 시간 응답 처리
        ResponseHandler_ParseTimeResponse(local_buffer);
 8004012:	f107 030c 	add.w	r3, r7, #12
 8004016:	4618      	mov	r0, r3
 8004018:	f7fd f950 	bl	80012bc <ResponseHandler_ParseTimeResponse>
      }
      // 나머지 응답 분석은 아래 필터링 로직에서 한 번만 처리
      
      // 전역 변수에 복사 (다른 태스크에서 사용 가능)
      memcpy(rx_buffer, local_buffer, local_bytes_received);
 800401c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004020:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	461a      	mov	r2, r3
 8004028:	f107 030c 	add.w	r3, r7, #12
 800402c:	4619      	mov	r1, r3
 800402e:	4858      	ldr	r0, [pc, #352]	@ (8004190 <StartReceiveTask+0x2b0>)
 8004030:	f013 fee9 	bl	8017e06 <memcpy>
      rx_bytes_received = local_bytes_received;
 8004034:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004038:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a55      	ldr	r2, [pc, #340]	@ (8004194 <StartReceiveTask+0x2b4>)
 8004040:	6013      	str	r3, [r2, #0]
      
      // LoRa 상태 머신에 전달할 응답만 필터링
      bool is_lora_command_response = false;
 8004042:	2300      	movs	r3, #0
 8004044:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
      
      if (is_response_ok(local_buffer)) {
 8004048:	f107 030c 	add.w	r3, r7, #12
 800404c:	4618      	mov	r0, r3
 800404e:	f7fc ff37 	bl	8000ec0 <is_response_ok>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d003      	beq.n	8004060 <StartReceiveTask+0x180>
        // OK 응답 - LoRa 명령에 대한 응답
        is_lora_command_response = true;
 8004058:	2301      	movs	r3, #1
 800405a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 800405e:	e04b      	b.n	80040f8 <StartReceiveTask+0x218>
      } else if (strstr(local_buffer, "+EVT:JOINED") != NULL) {
 8004060:	f107 030c 	add.w	r3, r7, #12
 8004064:	4945      	ldr	r1, [pc, #276]	@ (800417c <StartReceiveTask+0x29c>)
 8004066:	4618      	mov	r0, r3
 8004068:	f013 fe34 	bl	8017cd4 <strstr>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <StartReceiveTask+0x19a>
        // JOIN 성공 응답
        is_lora_command_response = true;
 8004072:	2301      	movs	r3, #1
 8004074:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8004078:	e03e      	b.n	80040f8 <StartReceiveTask+0x218>
      } else if (ResponseHandler_IsTimeResponse(local_buffer)) {
 800407a:	f107 030c 	add.w	r3, r7, #12
 800407e:	4618      	mov	r0, r3
 8004080:	f7fd f86c 	bl	800115c <ResponseHandler_IsTimeResponse>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <StartReceiveTask+0x1b2>
        // 시간 응답 - LoRa 상태 머신에도 전달해야 함 (상태 전환을 위해)
        is_lora_command_response = true;
 800408a:	2301      	movs	r3, #1
 800408c:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8004090:	e032      	b.n	80040f8 <StartReceiveTask+0x218>
      } else if (strstr(local_buffer, "+EVT:") != NULL) {
 8004092:	f107 030c 	add.w	r3, r7, #12
 8004096:	4940      	ldr	r1, [pc, #256]	@ (8004198 <StartReceiveTask+0x2b8>)
 8004098:	4618      	mov	r0, r3
 800409a:	f013 fe1b 	bl	8017cd4 <strstr>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <StartReceiveTask+0x1cc>
        // 기타 LoRa 이벤트 응답들
        is_lora_command_response = true;
 80040a4:	2301      	movs	r3, #1
 80040a6:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 80040aa:	e025      	b.n	80040f8 <StartReceiveTask+0x218>
      } else if (strstr(local_buffer, "RAKwireless") != NULL || strstr(local_buffer, "ORAKwireless") != NULL) {
 80040ac:	f107 030c 	add.w	r3, r7, #12
 80040b0:	4935      	ldr	r1, [pc, #212]	@ (8004188 <StartReceiveTask+0x2a8>)
 80040b2:	4618      	mov	r0, r3
 80040b4:	f013 fe0e 	bl	8017cd4 <strstr>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d108      	bne.n	80040d0 <StartReceiveTask+0x1f0>
 80040be:	f107 030c 	add.w	r3, r7, #12
 80040c2:	4936      	ldr	r1, [pc, #216]	@ (800419c <StartReceiveTask+0x2bc>)
 80040c4:	4618      	mov	r0, r3
 80040c6:	f013 fe05 	bl	8017cd4 <strstr>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d004      	beq.n	80040da <StartReceiveTask+0x1fa>
        // 부트 메시지 - LoRa 상태 머신에 전달하지 않음
        LOG_DEBUG("[RX_TASK] Boot message filtered out from LoRa state machine");
 80040d0:	4933      	ldr	r1, [pc, #204]	@ (80041a0 <StartReceiveTask+0x2c0>)
 80040d2:	2000      	movs	r0, #0
 80040d4:	f001 fbbc 	bl	8005850 <LOGGER_SendFormatted>
 80040d8:	e00e      	b.n	80040f8 <StartReceiveTask+0x218>
      } else {
        // 기타 응답들 (ERROR, TIMEOUT 등)
        ResponseType response_type = ResponseHandler_ParseSendResponse(local_buffer);
 80040da:	f107 030c 	add.w	r3, r7, #12
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fc ffe6 	bl	80010b0 <ResponseHandler_ParseSendResponse>
 80040e4:	4603      	mov	r3, r0
 80040e6:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
        if (response_type != RESPONSE_UNKNOWN) {
 80040ea:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
 80040ee:	2b03      	cmp	r3, #3
 80040f0:	d002      	beq.n	80040f8 <StartReceiveTask+0x218>
          is_lora_command_response = true;
 80040f2:	2301      	movs	r3, #1
 80040f4:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
        }
      }
      
      // LoRa 명령 응답만 전역 변수에 복사
      if (is_lora_command_response) {
 80040f8:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d01d      	beq.n	800413c <StartReceiveTask+0x25c>
        memcpy(lora_rx_response, local_buffer, local_bytes_received);
 8004100:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004104:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	461a      	mov	r2, r3
 800410c:	f107 030c 	add.w	r3, r7, #12
 8004110:	4619      	mov	r1, r3
 8004112:	4824      	ldr	r0, [pc, #144]	@ (80041a4 <StartReceiveTask+0x2c4>)
 8004114:	f013 fe77 	bl	8017e06 <memcpy>
        lora_rx_response[local_bytes_received] = '\0';
 8004118:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800411c:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a20      	ldr	r2, [pc, #128]	@ (80041a4 <StartReceiveTask+0x2c4>)
 8004124:	2100      	movs	r1, #0
 8004126:	54d1      	strb	r1, [r2, r3]
        lora_new_response = true;
 8004128:	4b1f      	ldr	r3, [pc, #124]	@ (80041a8 <StartReceiveTask+0x2c8>)
 800412a:	2201      	movs	r2, #1
 800412c:	701a      	strb	r2, [r3, #0]
        LOG_DEBUG("[RX_TASK] LoRa response forwarded to state machine: %.20s...", local_buffer);
 800412e:	f107 030c 	add.w	r3, r7, #12
 8004132:	461a      	mov	r2, r3
 8004134:	491d      	ldr	r1, [pc, #116]	@ (80041ac <StartReceiveTask+0x2cc>)
 8004136:	2000      	movs	r0, #0
 8004138:	f001 fb8a 	bl	8005850 <LOGGER_SendFormatted>
      }
      
      // 버퍼 클리어
      memset(local_buffer, 0, sizeof(local_buffer));
 800413c:	f107 030c 	add.w	r3, r7, #12
 8004140:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004144:	2100      	movs	r1, #0
 8004146:	4618      	mov	r0, r3
 8004148:	f013 fd9c 	bl	8017c84 <memset>
      local_bytes_received = 0;
 800414c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004150:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]
    }
    
    // DMA 기반이므로 긴 지연으로 CPU 사용률 감소
    osDelay(50);  // 50ms 지연 (DMA가 백그라운드에서 처리하므로 빠른 폴링 불필요)
 8004158:	2032      	movs	r0, #50	@ 0x32
 800415a:	f010 ff67 	bl	801502c <osDelay>
  {
 800415e:	e6d6      	b.n	8003f0e <StartReceiveTask+0x2e>
 8004160:	0801c004 	.word	0x0801c004
 8004164:	20002460 	.word	0x20002460
 8004168:	1b4e81b5 	.word	0x1b4e81b5
 800416c:	0801c02c 	.word	0x0801c02c
 8004170:	0801c060 	.word	0x0801c060
 8004174:	0801c064 	.word	0x0801c064
 8004178:	0801c068 	.word	0x0801c068
 800417c:	0801c088 	.word	0x0801c088
 8004180:	0801c094 	.word	0x0801c094
 8004184:	2000244c 	.word	0x2000244c
 8004188:	0801c0c8 	.word	0x0801c0c8
 800418c:	0801c0d4 	.word	0x0801c0d4
 8004190:	200024c8 	.word	0x200024c8
 8004194:	200021e4 	.word	0x200021e4
 8004198:	0801c0fc 	.word	0x0801c0fc
 800419c:	0801c104 	.word	0x0801c104
 80041a0:	0801c114 	.word	0x0801c114
 80041a4:	200021e8 	.word	0x200021e8
 80041a8:	200023e8 	.word	0x200023e8
 80041ac:	0801c150 	.word	0x0801c150

080041b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a04      	ldr	r2, [pc, #16]	@ (80041d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d101      	bne.n	80041c6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80041c2:	f002 f945 	bl	8006450 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80041c6:	bf00      	nop
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	40001000 	.word	0x40001000

080041d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80041d8:	b672      	cpsid	i
}
 80041da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80041dc:	bf00      	nop
 80041de:	e7fd      	b.n	80041dc <Error_Handler+0x8>

080041e0 <MX_DMA_Init>:
  * @brief DMA Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA_Init(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80041e6:	4b10      	ldr	r3, [pc, #64]	@ (8004228 <MX_DMA_Init+0x48>)
 80041e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ea:	4a0f      	ldr	r2, [pc, #60]	@ (8004228 <MX_DMA_Init+0x48>)
 80041ec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80041f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80041f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004228 <MX_DMA_Init+0x48>)
 80041f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041fa:	607b      	str	r3, [r7, #4]
 80041fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration - USART6_RX */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80041fe:	2200      	movs	r2, #0
 8004200:	2105      	movs	r1, #5
 8004202:	2039      	movs	r0, #57	@ 0x39
 8004204:	f002 fcb8 	bl	8006b78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8004208:	2039      	movs	r0, #57	@ 0x39
 800420a:	f002 fcd1 	bl	8006bb0 <HAL_NVIC_EnableIRQ>
  
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800420e:	2200      	movs	r2, #0
 8004210:	2105      	movs	r1, #5
 8004212:	2047      	movs	r0, #71	@ 0x47
 8004214:	f002 fcb0 	bl	8006b78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004218:	2047      	movs	r0, #71	@ 0x47
 800421a:	f002 fcc9 	bl	8006bb0 <HAL_NVIC_EnableIRQ>
}
 800421e:	bf00      	nop
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	40023800 	.word	0x40023800

0800422c <MX_USART6_DMA_Init>:
  * @brief DMA2 Stream1 DMA configuration for USART6 RX
  * @param None
  * @retval None
  */
void MX_USART6_DMA_Init(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
  // DMA 이미 초기화되었는지 체크
  if (hdma_usart6_rx.Instance != NULL) {
 8004232:	4b1e      	ldr	r3, [pc, #120]	@ (80042ac <MX_USART6_DMA_Init+0x80>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d133      	bne.n	80042a2 <MX_USART6_DMA_Init+0x76>
    return; // 이미 초기화됨
  }
  
  /* Configure DMA for USART6 RX */
  hdma_usart6_rx.Instance = DMA2_Stream1;
 800423a:	4b1c      	ldr	r3, [pc, #112]	@ (80042ac <MX_USART6_DMA_Init+0x80>)
 800423c:	4a1c      	ldr	r2, [pc, #112]	@ (80042b0 <MX_USART6_DMA_Init+0x84>)
 800423e:	601a      	str	r2, [r3, #0]
  hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004240:	4b1a      	ldr	r3, [pc, #104]	@ (80042ac <MX_USART6_DMA_Init+0x80>)
 8004242:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8004246:	605a      	str	r2, [r3, #4]
  hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004248:	4b18      	ldr	r3, [pc, #96]	@ (80042ac <MX_USART6_DMA_Init+0x80>)
 800424a:	2200      	movs	r2, #0
 800424c:	609a      	str	r2, [r3, #8]
  hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800424e:	4b17      	ldr	r3, [pc, #92]	@ (80042ac <MX_USART6_DMA_Init+0x80>)
 8004250:	2200      	movs	r2, #0
 8004252:	60da      	str	r2, [r3, #12]
  hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004254:	4b15      	ldr	r3, [pc, #84]	@ (80042ac <MX_USART6_DMA_Init+0x80>)
 8004256:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800425a:	611a      	str	r2, [r3, #16]
  hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800425c:	4b13      	ldr	r3, [pc, #76]	@ (80042ac <MX_USART6_DMA_Init+0x80>)
 800425e:	2200      	movs	r2, #0
 8004260:	615a      	str	r2, [r3, #20]
  hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004262:	4b12      	ldr	r3, [pc, #72]	@ (80042ac <MX_USART6_DMA_Init+0x80>)
 8004264:	2200      	movs	r2, #0
 8004266:	619a      	str	r2, [r3, #24]
  hdma_usart6_rx.Init.Mode = DMA_NORMAL;    // 일반 모드로 변경
 8004268:	4b10      	ldr	r3, [pc, #64]	@ (80042ac <MX_USART6_DMA_Init+0x80>)
 800426a:	2200      	movs	r2, #0
 800426c:	61da      	str	r2, [r3, #28]
  hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800426e:	4b0f      	ldr	r3, [pc, #60]	@ (80042ac <MX_USART6_DMA_Init+0x80>)
 8004270:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004274:	621a      	str	r2, [r3, #32]
  hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004276:	4b0d      	ldr	r3, [pc, #52]	@ (80042ac <MX_USART6_DMA_Init+0x80>)
 8004278:	2200      	movs	r2, #0
 800427a:	625a      	str	r2, [r3, #36]	@ 0x24
  
  HAL_StatusTypeDef dma_result = HAL_DMA_Init(&hdma_usart6_rx);
 800427c:	480b      	ldr	r0, [pc, #44]	@ (80042ac <MX_USART6_DMA_Init+0x80>)
 800427e:	f002 fe11 	bl	8006ea4 <HAL_DMA_Init>
 8004282:	4603      	mov	r3, r0
 8004284:	71fb      	strb	r3, [r7, #7]
  if (dma_result != HAL_OK)
 8004286:	79fb      	ldrb	r3, [r7, #7]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <MX_USART6_DMA_Init+0x68>
  {
    // 에러 처리하되 Error_Handler() 호출하지 않음 (시스템 중단 방지)
    hdma_usart6_rx.Instance = NULL; // 실패 표시
 800428c:	4b07      	ldr	r3, [pc, #28]	@ (80042ac <MX_USART6_DMA_Init+0x80>)
 800428e:	2200      	movs	r2, #0
 8004290:	601a      	str	r2, [r3, #0]
    return;
 8004292:	e007      	b.n	80042a4 <MX_USART6_DMA_Init+0x78>
  }

  /* Associate the initialized DMA handle to the UART handle */
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8004294:	4b07      	ldr	r3, [pc, #28]	@ (80042b4 <MX_USART6_DMA_Init+0x88>)
 8004296:	4a05      	ldr	r2, [pc, #20]	@ (80042ac <MX_USART6_DMA_Init+0x80>)
 8004298:	675a      	str	r2, [r3, #116]	@ 0x74
 800429a:	4b04      	ldr	r3, [pc, #16]	@ (80042ac <MX_USART6_DMA_Init+0x80>)
 800429c:	4a05      	ldr	r2, [pc, #20]	@ (80042b4 <MX_USART6_DMA_Init+0x88>)
 800429e:	639a      	str	r2, [r3, #56]	@ 0x38
 80042a0:	e000      	b.n	80042a4 <MX_USART6_DMA_Init+0x78>
    return; // 이미 초기화됨
 80042a2:	bf00      	nop
}
 80042a4:	3708      	adds	r7, #8
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	200023ec 	.word	0x200023ec
 80042b0:	40026428 	.word	0x40026428
 80042b4:	20002114 	.word	0x20002114

080042b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80042be:	4b11      	ldr	r3, [pc, #68]	@ (8004304 <HAL_MspInit+0x4c>)
 80042c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c2:	4a10      	ldr	r2, [pc, #64]	@ (8004304 <HAL_MspInit+0x4c>)
 80042c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80042ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004304 <HAL_MspInit+0x4c>)
 80042cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042d2:	607b      	str	r3, [r7, #4]
 80042d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004304 <HAL_MspInit+0x4c>)
 80042d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042da:	4a0a      	ldr	r2, [pc, #40]	@ (8004304 <HAL_MspInit+0x4c>)
 80042dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80042e2:	4b08      	ldr	r3, [pc, #32]	@ (8004304 <HAL_MspInit+0x4c>)
 80042e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042ea:	603b      	str	r3, [r7, #0]
 80042ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80042ee:	2200      	movs	r2, #0
 80042f0:	210f      	movs	r1, #15
 80042f2:	f06f 0001 	mvn.w	r0, #1
 80042f6:	f002 fc3f 	bl	8006b78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042fa:	bf00      	nop
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	40023800 	.word	0x40023800

08004308 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b08a      	sub	sp, #40	@ 0x28
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004310:	f107 0314 	add.w	r3, r7, #20
 8004314:	2200      	movs	r2, #0
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	605a      	str	r2, [r3, #4]
 800431a:	609a      	str	r2, [r3, #8]
 800431c:	60da      	str	r2, [r3, #12]
 800431e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a21      	ldr	r2, [pc, #132]	@ (80043ac <HAL_ADC_MspInit+0xa4>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d13c      	bne.n	80043a4 <HAL_ADC_MspInit+0x9c>
  {
    /* USER CODE BEGIN ADC3_MspInit 0 */

    /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800432a:	4b21      	ldr	r3, [pc, #132]	@ (80043b0 <HAL_ADC_MspInit+0xa8>)
 800432c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800432e:	4a20      	ldr	r2, [pc, #128]	@ (80043b0 <HAL_ADC_MspInit+0xa8>)
 8004330:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004334:	6453      	str	r3, [r2, #68]	@ 0x44
 8004336:	4b1e      	ldr	r3, [pc, #120]	@ (80043b0 <HAL_ADC_MspInit+0xa8>)
 8004338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800433a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800433e:	613b      	str	r3, [r7, #16]
 8004340:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004342:	4b1b      	ldr	r3, [pc, #108]	@ (80043b0 <HAL_ADC_MspInit+0xa8>)
 8004344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004346:	4a1a      	ldr	r2, [pc, #104]	@ (80043b0 <HAL_ADC_MspInit+0xa8>)
 8004348:	f043 0320 	orr.w	r3, r3, #32
 800434c:	6313      	str	r3, [r2, #48]	@ 0x30
 800434e:	4b18      	ldr	r3, [pc, #96]	@ (80043b0 <HAL_ADC_MspInit+0xa8>)
 8004350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004352:	f003 0320 	and.w	r3, r3, #32
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800435a:	4b15      	ldr	r3, [pc, #84]	@ (80043b0 <HAL_ADC_MspInit+0xa8>)
 800435c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800435e:	4a14      	ldr	r2, [pc, #80]	@ (80043b0 <HAL_ADC_MspInit+0xa8>)
 8004360:	f043 0301 	orr.w	r3, r3, #1
 8004364:	6313      	str	r3, [r2, #48]	@ 0x30
 8004366:	4b12      	ldr	r3, [pc, #72]	@ (80043b0 <HAL_ADC_MspInit+0xa8>)
 8004368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	60bb      	str	r3, [r7, #8]
 8004370:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8004372:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8004376:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004378:	2303      	movs	r3, #3
 800437a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800437c:	2300      	movs	r3, #0
 800437e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004380:	f107 0314 	add.w	r3, r7, #20
 8004384:	4619      	mov	r1, r3
 8004386:	480b      	ldr	r0, [pc, #44]	@ (80043b4 <HAL_ADC_MspInit+0xac>)
 8004388:	f003 ff3a 	bl	8008200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800438c:	2301      	movs	r3, #1
 800438e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004390:	2303      	movs	r3, #3
 8004392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004394:	2300      	movs	r3, #0
 8004396:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8004398:	f107 0314 	add.w	r3, r7, #20
 800439c:	4619      	mov	r1, r3
 800439e:	4806      	ldr	r0, [pc, #24]	@ (80043b8 <HAL_ADC_MspInit+0xb0>)
 80043a0:	f003 ff2e 	bl	8008200 <HAL_GPIO_Init>

    /* USER CODE END ADC3_MspInit 1 */

  }

}
 80043a4:	bf00      	nop
 80043a6:	3728      	adds	r7, #40	@ 0x28
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40012200 	.word	0x40012200
 80043b0:	40023800 	.word	0x40023800
 80043b4:	40021400 	.word	0x40021400
 80043b8:	40020000 	.word	0x40020000

080043bc <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a0a      	ldr	r2, [pc, #40]	@ (80043f4 <HAL_CRC_MspInit+0x38>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d10b      	bne.n	80043e6 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80043ce:	4b0a      	ldr	r3, [pc, #40]	@ (80043f8 <HAL_CRC_MspInit+0x3c>)
 80043d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d2:	4a09      	ldr	r2, [pc, #36]	@ (80043f8 <HAL_CRC_MspInit+0x3c>)
 80043d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80043d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80043da:	4b07      	ldr	r3, [pc, #28]	@ (80043f8 <HAL_CRC_MspInit+0x3c>)
 80043dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80043e6:	bf00      	nop
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	40023000 	.word	0x40023000
 80043f8:	40023800 	.word	0x40023800

080043fc <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b08e      	sub	sp, #56	@ 0x38
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004404:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]
 800440c:	605a      	str	r2, [r3, #4]
 800440e:	609a      	str	r2, [r3, #8]
 8004410:	60da      	str	r2, [r3, #12]
 8004412:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a50      	ldr	r2, [pc, #320]	@ (800455c <HAL_DCMI_MspInit+0x160>)
 800441a:	4293      	cmp	r3, r2
 800441c:	f040 809a 	bne.w	8004554 <HAL_DCMI_MspInit+0x158>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8004420:	4b4f      	ldr	r3, [pc, #316]	@ (8004560 <HAL_DCMI_MspInit+0x164>)
 8004422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004424:	4a4e      	ldr	r2, [pc, #312]	@ (8004560 <HAL_DCMI_MspInit+0x164>)
 8004426:	f043 0301 	orr.w	r3, r3, #1
 800442a:	6353      	str	r3, [r2, #52]	@ 0x34
 800442c:	4b4c      	ldr	r3, [pc, #304]	@ (8004560 <HAL_DCMI_MspInit+0x164>)
 800442e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	623b      	str	r3, [r7, #32]
 8004436:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004438:	4b49      	ldr	r3, [pc, #292]	@ (8004560 <HAL_DCMI_MspInit+0x164>)
 800443a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800443c:	4a48      	ldr	r2, [pc, #288]	@ (8004560 <HAL_DCMI_MspInit+0x164>)
 800443e:	f043 0310 	orr.w	r3, r3, #16
 8004442:	6313      	str	r3, [r2, #48]	@ 0x30
 8004444:	4b46      	ldr	r3, [pc, #280]	@ (8004560 <HAL_DCMI_MspInit+0x164>)
 8004446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004448:	f003 0310 	and.w	r3, r3, #16
 800444c:	61fb      	str	r3, [r7, #28]
 800444e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004450:	4b43      	ldr	r3, [pc, #268]	@ (8004560 <HAL_DCMI_MspInit+0x164>)
 8004452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004454:	4a42      	ldr	r2, [pc, #264]	@ (8004560 <HAL_DCMI_MspInit+0x164>)
 8004456:	f043 0308 	orr.w	r3, r3, #8
 800445a:	6313      	str	r3, [r2, #48]	@ 0x30
 800445c:	4b40      	ldr	r3, [pc, #256]	@ (8004560 <HAL_DCMI_MspInit+0x164>)
 800445e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004460:	f003 0308 	and.w	r3, r3, #8
 8004464:	61bb      	str	r3, [r7, #24]
 8004466:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004468:	4b3d      	ldr	r3, [pc, #244]	@ (8004560 <HAL_DCMI_MspInit+0x164>)
 800446a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800446c:	4a3c      	ldr	r2, [pc, #240]	@ (8004560 <HAL_DCMI_MspInit+0x164>)
 800446e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004472:	6313      	str	r3, [r2, #48]	@ 0x30
 8004474:	4b3a      	ldr	r3, [pc, #232]	@ (8004560 <HAL_DCMI_MspInit+0x164>)
 8004476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800447c:	617b      	str	r3, [r7, #20]
 800447e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004480:	4b37      	ldr	r3, [pc, #220]	@ (8004560 <HAL_DCMI_MspInit+0x164>)
 8004482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004484:	4a36      	ldr	r2, [pc, #216]	@ (8004560 <HAL_DCMI_MspInit+0x164>)
 8004486:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800448a:	6313      	str	r3, [r2, #48]	@ 0x30
 800448c:	4b34      	ldr	r3, [pc, #208]	@ (8004560 <HAL_DCMI_MspInit+0x164>)
 800448e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004494:	613b      	str	r3, [r7, #16]
 8004496:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004498:	4b31      	ldr	r3, [pc, #196]	@ (8004560 <HAL_DCMI_MspInit+0x164>)
 800449a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800449c:	4a30      	ldr	r2, [pc, #192]	@ (8004560 <HAL_DCMI_MspInit+0x164>)
 800449e:	f043 0301 	orr.w	r3, r3, #1
 80044a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80044a4:	4b2e      	ldr	r3, [pc, #184]	@ (8004560 <HAL_DCMI_MspInit+0x164>)
 80044a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	60fb      	str	r3, [r7, #12]
 80044ae:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80044b0:	2360      	movs	r3, #96	@ 0x60
 80044b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044b4:	2302      	movs	r3, #2
 80044b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b8:	2300      	movs	r3, #0
 80044ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044bc:	2300      	movs	r3, #0
 80044be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80044c0:	230d      	movs	r3, #13
 80044c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80044c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044c8:	4619      	mov	r1, r3
 80044ca:	4826      	ldr	r0, [pc, #152]	@ (8004564 <HAL_DCMI_MspInit+0x168>)
 80044cc:	f003 fe98 	bl	8008200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80044d0:	2308      	movs	r3, #8
 80044d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044d4:	2302      	movs	r3, #2
 80044d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d8:	2300      	movs	r3, #0
 80044da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044dc:	2300      	movs	r3, #0
 80044de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80044e0:	230d      	movs	r3, #13
 80044e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80044e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044e8:	4619      	mov	r1, r3
 80044ea:	481f      	ldr	r0, [pc, #124]	@ (8004568 <HAL_DCMI_MspInit+0x16c>)
 80044ec:	f003 fe88 	bl	8008200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80044f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80044f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f6:	2302      	movs	r3, #2
 80044f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044fe:	2300      	movs	r3, #0
 8004500:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004502:	230d      	movs	r3, #13
 8004504:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8004506:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800450a:	4619      	mov	r1, r3
 800450c:	4817      	ldr	r0, [pc, #92]	@ (800456c <HAL_DCMI_MspInit+0x170>)
 800450e:	f003 fe77 	bl	8008200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8004512:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8004516:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004518:	2302      	movs	r3, #2
 800451a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800451c:	2300      	movs	r3, #0
 800451e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004520:	2300      	movs	r3, #0
 8004522:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004524:	230d      	movs	r3, #13
 8004526:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004528:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800452c:	4619      	mov	r1, r3
 800452e:	4810      	ldr	r0, [pc, #64]	@ (8004570 <HAL_DCMI_MspInit+0x174>)
 8004530:	f003 fe66 	bl	8008200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8004534:	2350      	movs	r3, #80	@ 0x50
 8004536:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004538:	2302      	movs	r3, #2
 800453a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800453c:	2300      	movs	r3, #0
 800453e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004540:	2300      	movs	r3, #0
 8004542:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004544:	230d      	movs	r3, #13
 8004546:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004548:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800454c:	4619      	mov	r1, r3
 800454e:	4809      	ldr	r0, [pc, #36]	@ (8004574 <HAL_DCMI_MspInit+0x178>)
 8004550:	f003 fe56 	bl	8008200 <HAL_GPIO_Init>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 8004554:	bf00      	nop
 8004556:	3738      	adds	r7, #56	@ 0x38
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	50050000 	.word	0x50050000
 8004560:	40023800 	.word	0x40023800
 8004564:	40021000 	.word	0x40021000
 8004568:	40020c00 	.word	0x40020c00
 800456c:	40021800 	.word	0x40021800
 8004570:	40021c00 	.word	0x40021c00
 8004574:	40020000 	.word	0x40020000

08004578 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a0d      	ldr	r2, [pc, #52]	@ (80045bc <HAL_DMA2D_MspInit+0x44>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d113      	bne.n	80045b2 <HAL_DMA2D_MspInit+0x3a>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800458a:	4b0d      	ldr	r3, [pc, #52]	@ (80045c0 <HAL_DMA2D_MspInit+0x48>)
 800458c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800458e:	4a0c      	ldr	r2, [pc, #48]	@ (80045c0 <HAL_DMA2D_MspInit+0x48>)
 8004590:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004594:	6313      	str	r3, [r2, #48]	@ 0x30
 8004596:	4b0a      	ldr	r3, [pc, #40]	@ (80045c0 <HAL_DMA2D_MspInit+0x48>)
 8004598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800459e:	60fb      	str	r3, [r7, #12]
 80045a0:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80045a2:	2200      	movs	r2, #0
 80045a4:	2105      	movs	r1, #5
 80045a6:	205a      	movs	r0, #90	@ 0x5a
 80045a8:	f002 fae6 	bl	8006b78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80045ac:	205a      	movs	r0, #90	@ 0x5a
 80045ae:	f002 faff 	bl	8006bb0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 80045b2:	bf00      	nop
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	4002b000 	.word	0x4002b000
 80045c0:	40023800 	.word	0x40023800

080045c4 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b08e      	sub	sp, #56	@ 0x38
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	605a      	str	r2, [r3, #4]
 80045d6:	609a      	str	r2, [r3, #8]
 80045d8:	60da      	str	r2, [r3, #12]
 80045da:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a3f      	ldr	r2, [pc, #252]	@ (80046e0 <HAL_ETH_MspInit+0x11c>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d178      	bne.n	80046d8 <HAL_ETH_MspInit+0x114>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80045e6:	4b3f      	ldr	r3, [pc, #252]	@ (80046e4 <HAL_ETH_MspInit+0x120>)
 80045e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ea:	4a3e      	ldr	r2, [pc, #248]	@ (80046e4 <HAL_ETH_MspInit+0x120>)
 80045ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80045f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80045f2:	4b3c      	ldr	r3, [pc, #240]	@ (80046e4 <HAL_ETH_MspInit+0x120>)
 80045f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045fa:	623b      	str	r3, [r7, #32]
 80045fc:	6a3b      	ldr	r3, [r7, #32]
 80045fe:	4b39      	ldr	r3, [pc, #228]	@ (80046e4 <HAL_ETH_MspInit+0x120>)
 8004600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004602:	4a38      	ldr	r2, [pc, #224]	@ (80046e4 <HAL_ETH_MspInit+0x120>)
 8004604:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004608:	6313      	str	r3, [r2, #48]	@ 0x30
 800460a:	4b36      	ldr	r3, [pc, #216]	@ (80046e4 <HAL_ETH_MspInit+0x120>)
 800460c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800460e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004612:	61fb      	str	r3, [r7, #28]
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	4b33      	ldr	r3, [pc, #204]	@ (80046e4 <HAL_ETH_MspInit+0x120>)
 8004618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800461a:	4a32      	ldr	r2, [pc, #200]	@ (80046e4 <HAL_ETH_MspInit+0x120>)
 800461c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004620:	6313      	str	r3, [r2, #48]	@ 0x30
 8004622:	4b30      	ldr	r3, [pc, #192]	@ (80046e4 <HAL_ETH_MspInit+0x120>)
 8004624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004626:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800462a:	61bb      	str	r3, [r7, #24]
 800462c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800462e:	4b2d      	ldr	r3, [pc, #180]	@ (80046e4 <HAL_ETH_MspInit+0x120>)
 8004630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004632:	4a2c      	ldr	r2, [pc, #176]	@ (80046e4 <HAL_ETH_MspInit+0x120>)
 8004634:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004638:	6313      	str	r3, [r2, #48]	@ 0x30
 800463a:	4b2a      	ldr	r3, [pc, #168]	@ (80046e4 <HAL_ETH_MspInit+0x120>)
 800463c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800463e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004642:	617b      	str	r3, [r7, #20]
 8004644:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004646:	4b27      	ldr	r3, [pc, #156]	@ (80046e4 <HAL_ETH_MspInit+0x120>)
 8004648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800464a:	4a26      	ldr	r2, [pc, #152]	@ (80046e4 <HAL_ETH_MspInit+0x120>)
 800464c:	f043 0304 	orr.w	r3, r3, #4
 8004650:	6313      	str	r3, [r2, #48]	@ 0x30
 8004652:	4b24      	ldr	r3, [pc, #144]	@ (80046e4 <HAL_ETH_MspInit+0x120>)
 8004654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004656:	f003 0304 	and.w	r3, r3, #4
 800465a:	613b      	str	r3, [r7, #16]
 800465c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800465e:	4b21      	ldr	r3, [pc, #132]	@ (80046e4 <HAL_ETH_MspInit+0x120>)
 8004660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004662:	4a20      	ldr	r2, [pc, #128]	@ (80046e4 <HAL_ETH_MspInit+0x120>)
 8004664:	f043 0301 	orr.w	r3, r3, #1
 8004668:	6313      	str	r3, [r2, #48]	@ 0x30
 800466a:	4b1e      	ldr	r3, [pc, #120]	@ (80046e4 <HAL_ETH_MspInit+0x120>)
 800466c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8004676:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 800467a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800467c:	2302      	movs	r3, #2
 800467e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004680:	2300      	movs	r3, #0
 8004682:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004684:	2303      	movs	r3, #3
 8004686:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004688:	230b      	movs	r3, #11
 800468a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800468c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004690:	4619      	mov	r1, r3
 8004692:	4815      	ldr	r0, [pc, #84]	@ (80046e8 <HAL_ETH_MspInit+0x124>)
 8004694:	f003 fdb4 	bl	8008200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004698:	2332      	movs	r3, #50	@ 0x32
 800469a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800469c:	2302      	movs	r3, #2
 800469e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a0:	2300      	movs	r3, #0
 80046a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046a4:	2303      	movs	r3, #3
 80046a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80046a8:	230b      	movs	r3, #11
 80046aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046b0:	4619      	mov	r1, r3
 80046b2:	480e      	ldr	r0, [pc, #56]	@ (80046ec <HAL_ETH_MspInit+0x128>)
 80046b4:	f003 fda4 	bl	8008200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80046b8:	2386      	movs	r3, #134	@ 0x86
 80046ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046bc:	2302      	movs	r3, #2
 80046be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c0:	2300      	movs	r3, #0
 80046c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046c4:	2303      	movs	r3, #3
 80046c6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80046c8:	230b      	movs	r3, #11
 80046ca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046d0:	4619      	mov	r1, r3
 80046d2:	4807      	ldr	r0, [pc, #28]	@ (80046f0 <HAL_ETH_MspInit+0x12c>)
 80046d4:	f003 fd94 	bl	8008200 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 80046d8:	bf00      	nop
 80046da:	3738      	adds	r7, #56	@ 0x38
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	40028000 	.word	0x40028000
 80046e4:	40023800 	.word	0x40023800
 80046e8:	40021800 	.word	0x40021800
 80046ec:	40020800 	.word	0x40020800
 80046f0:	40020000 	.word	0x40020000

080046f4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b0ac      	sub	sp, #176	@ 0xb0
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	605a      	str	r2, [r3, #4]
 8004706:	609a      	str	r2, [r3, #8]
 8004708:	60da      	str	r2, [r3, #12]
 800470a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800470c:	f107 0318 	add.w	r3, r7, #24
 8004710:	2284      	movs	r2, #132	@ 0x84
 8004712:	2100      	movs	r1, #0
 8004714:	4618      	mov	r0, r3
 8004716:	f013 fab5 	bl	8017c84 <memset>
  if(hi2c->Instance==I2C1)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a44      	ldr	r2, [pc, #272]	@ (8004830 <HAL_I2C_MspInit+0x13c>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d13d      	bne.n	80047a0 <HAL_I2C_MspInit+0xac>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004724:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004728:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800472a:	2300      	movs	r3, #0
 800472c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800472e:	f107 0318 	add.w	r3, r7, #24
 8004732:	4618      	mov	r0, r3
 8004734:	f006 ff0c 	bl	800b550 <HAL_RCCEx_PeriphCLKConfig>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800473e:	f7ff fd49 	bl	80041d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004742:	4b3c      	ldr	r3, [pc, #240]	@ (8004834 <HAL_I2C_MspInit+0x140>)
 8004744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004746:	4a3b      	ldr	r2, [pc, #236]	@ (8004834 <HAL_I2C_MspInit+0x140>)
 8004748:	f043 0302 	orr.w	r3, r3, #2
 800474c:	6313      	str	r3, [r2, #48]	@ 0x30
 800474e:	4b39      	ldr	r3, [pc, #228]	@ (8004834 <HAL_I2C_MspInit+0x140>)
 8004750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800475a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800475e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004762:	2312      	movs	r3, #18
 8004764:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004768:	2301      	movs	r3, #1
 800476a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800476e:	2300      	movs	r3, #0
 8004770:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004774:	2304      	movs	r3, #4
 8004776:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800477a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800477e:	4619      	mov	r1, r3
 8004780:	482d      	ldr	r0, [pc, #180]	@ (8004838 <HAL_I2C_MspInit+0x144>)
 8004782:	f003 fd3d 	bl	8008200 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004786:	4b2b      	ldr	r3, [pc, #172]	@ (8004834 <HAL_I2C_MspInit+0x140>)
 8004788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478a:	4a2a      	ldr	r2, [pc, #168]	@ (8004834 <HAL_I2C_MspInit+0x140>)
 800478c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004790:	6413      	str	r3, [r2, #64]	@ 0x40
 8004792:	4b28      	ldr	r3, [pc, #160]	@ (8004834 <HAL_I2C_MspInit+0x140>)
 8004794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004796:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800479a:	613b      	str	r3, [r7, #16]
 800479c:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 800479e:	e042      	b.n	8004826 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a25      	ldr	r2, [pc, #148]	@ (800483c <HAL_I2C_MspInit+0x148>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d13d      	bne.n	8004826 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80047aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80047ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80047b0:	2300      	movs	r3, #0
 80047b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80047b6:	f107 0318 	add.w	r3, r7, #24
 80047ba:	4618      	mov	r0, r3
 80047bc:	f006 fec8 	bl	800b550 <HAL_RCCEx_PeriphCLKConfig>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 80047c6:	f7ff fd05 	bl	80041d4 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80047ca:	4b1a      	ldr	r3, [pc, #104]	@ (8004834 <HAL_I2C_MspInit+0x140>)
 80047cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ce:	4a19      	ldr	r2, [pc, #100]	@ (8004834 <HAL_I2C_MspInit+0x140>)
 80047d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80047d6:	4b17      	ldr	r3, [pc, #92]	@ (8004834 <HAL_I2C_MspInit+0x140>)
 80047d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80047e2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80047e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047ea:	2312      	movs	r3, #18
 80047ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047f0:	2301      	movs	r3, #1
 80047f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047f6:	2303      	movs	r3, #3
 80047f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80047fc:	2304      	movs	r3, #4
 80047fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004802:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004806:	4619      	mov	r1, r3
 8004808:	480d      	ldr	r0, [pc, #52]	@ (8004840 <HAL_I2C_MspInit+0x14c>)
 800480a:	f003 fcf9 	bl	8008200 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800480e:	4b09      	ldr	r3, [pc, #36]	@ (8004834 <HAL_I2C_MspInit+0x140>)
 8004810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004812:	4a08      	ldr	r2, [pc, #32]	@ (8004834 <HAL_I2C_MspInit+0x140>)
 8004814:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004818:	6413      	str	r3, [r2, #64]	@ 0x40
 800481a:	4b06      	ldr	r3, [pc, #24]	@ (8004834 <HAL_I2C_MspInit+0x140>)
 800481c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004822:	60bb      	str	r3, [r7, #8]
 8004824:	68bb      	ldr	r3, [r7, #8]
}
 8004826:	bf00      	nop
 8004828:	37b0      	adds	r7, #176	@ 0xb0
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	40005400 	.word	0x40005400
 8004834:	40023800 	.word	0x40023800
 8004838:	40020400 	.word	0x40020400
 800483c:	40005c00 	.word	0x40005c00
 8004840:	40021c00 	.word	0x40021c00

08004844 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b08e      	sub	sp, #56	@ 0x38
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800484c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]
 8004854:	605a      	str	r2, [r3, #4]
 8004856:	609a      	str	r2, [r3, #8]
 8004858:	60da      	str	r2, [r3, #12]
 800485a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a55      	ldr	r2, [pc, #340]	@ (80049b8 <HAL_LTDC_MspInit+0x174>)
 8004862:	4293      	cmp	r3, r2
 8004864:	f040 80a3 	bne.w	80049ae <HAL_LTDC_MspInit+0x16a>
  {
    /* USER CODE BEGIN LTDC_MspInit 0 */

    /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004868:	4b54      	ldr	r3, [pc, #336]	@ (80049bc <HAL_LTDC_MspInit+0x178>)
 800486a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800486c:	4a53      	ldr	r2, [pc, #332]	@ (80049bc <HAL_LTDC_MspInit+0x178>)
 800486e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004872:	6453      	str	r3, [r2, #68]	@ 0x44
 8004874:	4b51      	ldr	r3, [pc, #324]	@ (80049bc <HAL_LTDC_MspInit+0x178>)
 8004876:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004878:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800487c:	623b      	str	r3, [r7, #32]
 800487e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004880:	4b4e      	ldr	r3, [pc, #312]	@ (80049bc <HAL_LTDC_MspInit+0x178>)
 8004882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004884:	4a4d      	ldr	r2, [pc, #308]	@ (80049bc <HAL_LTDC_MspInit+0x178>)
 8004886:	f043 0310 	orr.w	r3, r3, #16
 800488a:	6313      	str	r3, [r2, #48]	@ 0x30
 800488c:	4b4b      	ldr	r3, [pc, #300]	@ (80049bc <HAL_LTDC_MspInit+0x178>)
 800488e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004890:	f003 0310 	and.w	r3, r3, #16
 8004894:	61fb      	str	r3, [r7, #28]
 8004896:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004898:	4b48      	ldr	r3, [pc, #288]	@ (80049bc <HAL_LTDC_MspInit+0x178>)
 800489a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800489c:	4a47      	ldr	r2, [pc, #284]	@ (80049bc <HAL_LTDC_MspInit+0x178>)
 800489e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80048a4:	4b45      	ldr	r3, [pc, #276]	@ (80049bc <HAL_LTDC_MspInit+0x178>)
 80048a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048ac:	61bb      	str	r3, [r7, #24]
 80048ae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80048b0:	4b42      	ldr	r3, [pc, #264]	@ (80049bc <HAL_LTDC_MspInit+0x178>)
 80048b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b4:	4a41      	ldr	r2, [pc, #260]	@ (80049bc <HAL_LTDC_MspInit+0x178>)
 80048b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80048ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80048bc:	4b3f      	ldr	r3, [pc, #252]	@ (80049bc <HAL_LTDC_MspInit+0x178>)
 80048be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048c4:	617b      	str	r3, [r7, #20]
 80048c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80048c8:	4b3c      	ldr	r3, [pc, #240]	@ (80049bc <HAL_LTDC_MspInit+0x178>)
 80048ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048cc:	4a3b      	ldr	r2, [pc, #236]	@ (80049bc <HAL_LTDC_MspInit+0x178>)
 80048ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80048d4:	4b39      	ldr	r3, [pc, #228]	@ (80049bc <HAL_LTDC_MspInit+0x178>)
 80048d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048dc:	613b      	str	r3, [r7, #16]
 80048de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80048e0:	4b36      	ldr	r3, [pc, #216]	@ (80049bc <HAL_LTDC_MspInit+0x178>)
 80048e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e4:	4a35      	ldr	r2, [pc, #212]	@ (80049bc <HAL_LTDC_MspInit+0x178>)
 80048e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80048ec:	4b33      	ldr	r3, [pc, #204]	@ (80049bc <HAL_LTDC_MspInit+0x178>)
 80048ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f4:	60fb      	str	r3, [r7, #12]
 80048f6:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80048f8:	2310      	movs	r3, #16
 80048fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048fc:	2302      	movs	r3, #2
 80048fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004900:	2300      	movs	r3, #0
 8004902:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004904:	2300      	movs	r3, #0
 8004906:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004908:	230e      	movs	r3, #14
 800490a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800490c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004910:	4619      	mov	r1, r3
 8004912:	482b      	ldr	r0, [pc, #172]	@ (80049c0 <HAL_LTDC_MspInit+0x17c>)
 8004914:	f003 fc74 	bl	8008200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8004918:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 800491c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800491e:	2302      	movs	r3, #2
 8004920:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004922:	2300      	movs	r3, #0
 8004924:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004926:	2300      	movs	r3, #0
 8004928:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800492a:	230e      	movs	r3, #14
 800492c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800492e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004932:	4619      	mov	r1, r3
 8004934:	4823      	ldr	r0, [pc, #140]	@ (80049c4 <HAL_LTDC_MspInit+0x180>)
 8004936:	f003 fc63 	bl	8008200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800493a:	23f7      	movs	r3, #247	@ 0xf7
 800493c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800493e:	2302      	movs	r3, #2
 8004940:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004942:	2300      	movs	r3, #0
 8004944:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004946:	2300      	movs	r3, #0
 8004948:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800494a:	230e      	movs	r3, #14
 800494c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800494e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004952:	4619      	mov	r1, r3
 8004954:	481c      	ldr	r0, [pc, #112]	@ (80049c8 <HAL_LTDC_MspInit+0x184>)
 8004956:	f003 fc53 	bl	8008200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800495a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800495e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004960:	2302      	movs	r3, #2
 8004962:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004964:	2300      	movs	r3, #0
 8004966:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004968:	2300      	movs	r3, #0
 800496a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800496c:	2309      	movs	r3, #9
 800496e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8004970:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004974:	4619      	mov	r1, r3
 8004976:	4815      	ldr	r0, [pc, #84]	@ (80049cc <HAL_LTDC_MspInit+0x188>)
 8004978:	f003 fc42 	bl	8008200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800497c:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8004980:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004982:	2302      	movs	r3, #2
 8004984:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004986:	2300      	movs	r3, #0
 8004988:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800498a:	2300      	movs	r3, #0
 800498c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800498e:	230e      	movs	r3, #14
 8004990:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004992:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004996:	4619      	mov	r1, r3
 8004998:	480d      	ldr	r0, [pc, #52]	@ (80049d0 <HAL_LTDC_MspInit+0x18c>)
 800499a:	f003 fc31 	bl	8008200 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800499e:	2200      	movs	r2, #0
 80049a0:	2105      	movs	r1, #5
 80049a2:	2058      	movs	r0, #88	@ 0x58
 80049a4:	f002 f8e8 	bl	8006b78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80049a8:	2058      	movs	r0, #88	@ 0x58
 80049aa:	f002 f901 	bl	8006bb0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 80049ae:	bf00      	nop
 80049b0:	3738      	adds	r7, #56	@ 0x38
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	40016800 	.word	0x40016800
 80049bc:	40023800 	.word	0x40023800
 80049c0:	40021000 	.word	0x40021000
 80049c4:	40022400 	.word	0x40022400
 80049c8:	40022800 	.word	0x40022800
 80049cc:	40021800 	.word	0x40021800
 80049d0:	40022000 	.word	0x40022000

080049d4 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b08c      	sub	sp, #48	@ 0x30
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049dc:	f107 031c 	add.w	r3, r7, #28
 80049e0:	2200      	movs	r2, #0
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	605a      	str	r2, [r3, #4]
 80049e6:	609a      	str	r2, [r3, #8]
 80049e8:	60da      	str	r2, [r3, #12]
 80049ea:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a3b      	ldr	r2, [pc, #236]	@ (8004ae0 <HAL_QSPI_MspInit+0x10c>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d170      	bne.n	8004ad8 <HAL_QSPI_MspInit+0x104>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80049f6:	4b3b      	ldr	r3, [pc, #236]	@ (8004ae4 <HAL_QSPI_MspInit+0x110>)
 80049f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049fa:	4a3a      	ldr	r2, [pc, #232]	@ (8004ae4 <HAL_QSPI_MspInit+0x110>)
 80049fc:	f043 0302 	orr.w	r3, r3, #2
 8004a00:	6393      	str	r3, [r2, #56]	@ 0x38
 8004a02:	4b38      	ldr	r3, [pc, #224]	@ (8004ae4 <HAL_QSPI_MspInit+0x110>)
 8004a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	61bb      	str	r3, [r7, #24]
 8004a0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004a0e:	4b35      	ldr	r3, [pc, #212]	@ (8004ae4 <HAL_QSPI_MspInit+0x110>)
 8004a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a12:	4a34      	ldr	r2, [pc, #208]	@ (8004ae4 <HAL_QSPI_MspInit+0x110>)
 8004a14:	f043 0310 	orr.w	r3, r3, #16
 8004a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a1a:	4b32      	ldr	r3, [pc, #200]	@ (8004ae4 <HAL_QSPI_MspInit+0x110>)
 8004a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1e:	f003 0310 	and.w	r3, r3, #16
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a26:	4b2f      	ldr	r3, [pc, #188]	@ (8004ae4 <HAL_QSPI_MspInit+0x110>)
 8004a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a2a:	4a2e      	ldr	r2, [pc, #184]	@ (8004ae4 <HAL_QSPI_MspInit+0x110>)
 8004a2c:	f043 0302 	orr.w	r3, r3, #2
 8004a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a32:	4b2c      	ldr	r3, [pc, #176]	@ (8004ae4 <HAL_QSPI_MspInit+0x110>)
 8004a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	613b      	str	r3, [r7, #16]
 8004a3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a3e:	4b29      	ldr	r3, [pc, #164]	@ (8004ae4 <HAL_QSPI_MspInit+0x110>)
 8004a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a42:	4a28      	ldr	r2, [pc, #160]	@ (8004ae4 <HAL_QSPI_MspInit+0x110>)
 8004a44:	f043 0308 	orr.w	r3, r3, #8
 8004a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a4a:	4b26      	ldr	r3, [pc, #152]	@ (8004ae4 <HAL_QSPI_MspInit+0x110>)
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a4e:	f003 0308 	and.w	r3, r3, #8
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8004a56:	2304      	movs	r3, #4
 8004a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a62:	2303      	movs	r3, #3
 8004a64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004a66:	2309      	movs	r3, #9
 8004a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8004a6a:	f107 031c 	add.w	r3, r7, #28
 8004a6e:	4619      	mov	r1, r3
 8004a70:	481d      	ldr	r0, [pc, #116]	@ (8004ae8 <HAL_QSPI_MspInit+0x114>)
 8004a72:	f003 fbc5 	bl	8008200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8004a76:	2340      	movs	r3, #64	@ 0x40
 8004a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a82:	2303      	movs	r3, #3
 8004a84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8004a86:	230a      	movs	r3, #10
 8004a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8004a8a:	f107 031c 	add.w	r3, r7, #28
 8004a8e:	4619      	mov	r1, r3
 8004a90:	4816      	ldr	r0, [pc, #88]	@ (8004aec <HAL_QSPI_MspInit+0x118>)
 8004a92:	f003 fbb5 	bl	8008200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004a96:	2304      	movs	r3, #4
 8004a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004aa6:	2309      	movs	r3, #9
 8004aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aaa:	f107 031c 	add.w	r3, r7, #28
 8004aae:	4619      	mov	r1, r3
 8004ab0:	480e      	ldr	r0, [pc, #56]	@ (8004aec <HAL_QSPI_MspInit+0x118>)
 8004ab2:	f003 fba5 	bl	8008200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8004ab6:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8004aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004abc:	2302      	movs	r3, #2
 8004abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004ac8:	2309      	movs	r3, #9
 8004aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004acc:	f107 031c 	add.w	r3, r7, #28
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	4807      	ldr	r0, [pc, #28]	@ (8004af0 <HAL_QSPI_MspInit+0x11c>)
 8004ad4:	f003 fb94 	bl	8008200 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8004ad8:	bf00      	nop
 8004ada:	3730      	adds	r7, #48	@ 0x30
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	a0001000 	.word	0xa0001000
 8004ae4:	40023800 	.word	0x40023800
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	40020400 	.word	0x40020400
 8004af0:	40020c00 	.word	0x40020c00

08004af4 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b0a4      	sub	sp, #144	@ 0x90
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004afc:	f107 030c 	add.w	r3, r7, #12
 8004b00:	2284      	movs	r2, #132	@ 0x84
 8004b02:	2100      	movs	r1, #0
 8004b04:	4618      	mov	r0, r3
 8004b06:	f013 f8bd 	bl	8017c84 <memset>
  if(hrtc->Instance==RTC)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a0e      	ldr	r2, [pc, #56]	@ (8004b48 <HAL_RTC_MspInit+0x54>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d114      	bne.n	8004b3e <HAL_RTC_MspInit+0x4a>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004b14:	2320      	movs	r3, #32
 8004b16:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004b18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b1e:	f107 030c 	add.w	r3, r7, #12
 8004b22:	4618      	mov	r0, r3
 8004b24:	f006 fd14 	bl	800b550 <HAL_RCCEx_PeriphCLKConfig>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8004b2e:	f7ff fb51 	bl	80041d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004b32:	4b06      	ldr	r3, [pc, #24]	@ (8004b4c <HAL_RTC_MspInit+0x58>)
 8004b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b36:	4a05      	ldr	r2, [pc, #20]	@ (8004b4c <HAL_RTC_MspInit+0x58>)
 8004b38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b3c:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8004b3e:	bf00      	nop
 8004b40:	3790      	adds	r7, #144	@ 0x90
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	40002800 	.word	0x40002800
 8004b4c:	40023800 	.word	0x40023800

08004b50 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b08a      	sub	sp, #40	@ 0x28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b58:	f107 0314 	add.w	r3, r7, #20
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	605a      	str	r2, [r3, #4]
 8004b62:	609a      	str	r2, [r3, #8]
 8004b64:	60da      	str	r2, [r3, #12]
 8004b66:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a25      	ldr	r2, [pc, #148]	@ (8004c04 <HAL_SD_MspInit+0xb4>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d144      	bne.n	8004bfc <HAL_SD_MspInit+0xac>
  {
    /* USER CODE BEGIN SDMMC1_MspInit 0 */

    /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004b72:	4b25      	ldr	r3, [pc, #148]	@ (8004c08 <HAL_SD_MspInit+0xb8>)
 8004b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b76:	4a24      	ldr	r2, [pc, #144]	@ (8004c08 <HAL_SD_MspInit+0xb8>)
 8004b78:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004b7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b7e:	4b22      	ldr	r3, [pc, #136]	@ (8004c08 <HAL_SD_MspInit+0xb8>)
 8004b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b86:	613b      	str	r3, [r7, #16]
 8004b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b8a:	4b1f      	ldr	r3, [pc, #124]	@ (8004c08 <HAL_SD_MspInit+0xb8>)
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b8e:	4a1e      	ldr	r2, [pc, #120]	@ (8004c08 <HAL_SD_MspInit+0xb8>)
 8004b90:	f043 0304 	orr.w	r3, r3, #4
 8004b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b96:	4b1c      	ldr	r3, [pc, #112]	@ (8004c08 <HAL_SD_MspInit+0xb8>)
 8004b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b9a:	f003 0304 	and.w	r3, r3, #4
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ba2:	4b19      	ldr	r3, [pc, #100]	@ (8004c08 <HAL_SD_MspInit+0xb8>)
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba6:	4a18      	ldr	r2, [pc, #96]	@ (8004c08 <HAL_SD_MspInit+0xb8>)
 8004ba8:	f043 0308 	orr.w	r3, r3, #8
 8004bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bae:	4b16      	ldr	r3, [pc, #88]	@ (8004c08 <HAL_SD_MspInit+0xb8>)
 8004bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb2:	f003 0308 	and.w	r3, r3, #8
 8004bb6:	60bb      	str	r3, [r7, #8]
 8004bb8:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8004bba:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8004bbe:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004bcc:	230c      	movs	r3, #12
 8004bce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bd0:	f107 0314 	add.w	r3, r7, #20
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	480d      	ldr	r0, [pc, #52]	@ (8004c0c <HAL_SD_MspInit+0xbc>)
 8004bd8:	f003 fb12 	bl	8008200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8004bdc:	2304      	movs	r3, #4
 8004bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004be0:	2302      	movs	r3, #2
 8004be2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be4:	2300      	movs	r3, #0
 8004be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004be8:	2303      	movs	r3, #3
 8004bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004bec:	230c      	movs	r3, #12
 8004bee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8004bf0:	f107 0314 	add.w	r3, r7, #20
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4806      	ldr	r0, [pc, #24]	@ (8004c10 <HAL_SD_MspInit+0xc0>)
 8004bf8:	f003 fb02 	bl	8008200 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8004bfc:	bf00      	nop
 8004bfe:	3728      	adds	r7, #40	@ 0x28
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	40012c00 	.word	0x40012c00
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	40020800 	.word	0x40020800
 8004c10:	40020c00 	.word	0x40020c00

08004c14 <HAL_SPDIFRX_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspdifrx: SPDIFRX handle pointer
  * @retval None
  */
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b0aa      	sub	sp, #168	@ 0xa8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c1c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004c20:	2200      	movs	r2, #0
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	605a      	str	r2, [r3, #4]
 8004c26:	609a      	str	r2, [r3, #8]
 8004c28:	60da      	str	r2, [r3, #12]
 8004c2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004c2c:	f107 0310 	add.w	r3, r7, #16
 8004c30:	2284      	movs	r2, #132	@ 0x84
 8004c32:	2100      	movs	r1, #0
 8004c34:	4618      	mov	r0, r3
 8004c36:	f013 f825 	bl	8017c84 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8004c42:	d143      	bne.n	8004ccc <HAL_SPDIFRX_MspInit+0xb8>

    /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8004c44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c48:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8004c4a:	2364      	movs	r3, #100	@ 0x64
 8004c4c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8004c4e:	2302      	movs	r3, #2
 8004c50:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8004c52:	2302      	movs	r3, #2
 8004c54:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8004c56:	2302      	movs	r3, #2
 8004c58:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c5e:	f107 0310 	add.w	r3, r7, #16
 8004c62:	4618      	mov	r0, r3
 8004c64:	f006 fc74 	bl	800b550 <HAL_RCCEx_PeriphCLKConfig>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8004c6e:	f7ff fab1 	bl	80041d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8004c72:	4b18      	ldr	r3, [pc, #96]	@ (8004cd4 <HAL_SPDIFRX_MspInit+0xc0>)
 8004c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c76:	4a17      	ldr	r2, [pc, #92]	@ (8004cd4 <HAL_SPDIFRX_MspInit+0xc0>)
 8004c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c7e:	4b15      	ldr	r3, [pc, #84]	@ (8004cd4 <HAL_SPDIFRX_MspInit+0xc0>)
 8004c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c8a:	4b12      	ldr	r3, [pc, #72]	@ (8004cd4 <HAL_SPDIFRX_MspInit+0xc0>)
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c8e:	4a11      	ldr	r2, [pc, #68]	@ (8004cd4 <HAL_SPDIFRX_MspInit+0xc0>)
 8004c90:	f043 0308 	orr.w	r3, r3, #8
 8004c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c96:	4b0f      	ldr	r3, [pc, #60]	@ (8004cd4 <HAL_SPDIFRX_MspInit+0xc0>)
 8004c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9a:	f003 0308 	and.w	r3, r3, #8
 8004c9e:	60bb      	str	r3, [r7, #8]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8004ca2:	2380      	movs	r3, #128	@ 0x80
 8004ca4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ca8:	2302      	movs	r3, #2
 8004caa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8004cba:	2308      	movs	r3, #8
 8004cbc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8004cc0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4804      	ldr	r0, [pc, #16]	@ (8004cd8 <HAL_SPDIFRX_MspInit+0xc4>)
 8004cc8:	f003 fa9a 	bl	8008200 <HAL_GPIO_Init>

    /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 8004ccc:	bf00      	nop
 8004cce:	37a8      	adds	r7, #168	@ 0xa8
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	40020c00 	.word	0x40020c00

08004cdc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b08a      	sub	sp, #40	@ 0x28
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ce4:	f107 0314 	add.w	r3, r7, #20
 8004ce8:	2200      	movs	r2, #0
 8004cea:	601a      	str	r2, [r3, #0]
 8004cec:	605a      	str	r2, [r3, #4]
 8004cee:	609a      	str	r2, [r3, #8]
 8004cf0:	60da      	str	r2, [r3, #12]
 8004cf2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a25      	ldr	r2, [pc, #148]	@ (8004d90 <HAL_SPI_MspInit+0xb4>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d144      	bne.n	8004d88 <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004cfe:	4b25      	ldr	r3, [pc, #148]	@ (8004d94 <HAL_SPI_MspInit+0xb8>)
 8004d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d02:	4a24      	ldr	r2, [pc, #144]	@ (8004d94 <HAL_SPI_MspInit+0xb8>)
 8004d04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d08:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d0a:	4b22      	ldr	r3, [pc, #136]	@ (8004d94 <HAL_SPI_MspInit+0xb8>)
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d12:	613b      	str	r3, [r7, #16]
 8004d14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004d16:	4b1f      	ldr	r3, [pc, #124]	@ (8004d94 <HAL_SPI_MspInit+0xb8>)
 8004d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d1a:	4a1e      	ldr	r2, [pc, #120]	@ (8004d94 <HAL_SPI_MspInit+0xb8>)
 8004d1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d22:	4b1c      	ldr	r3, [pc, #112]	@ (8004d94 <HAL_SPI_MspInit+0xb8>)
 8004d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d2a:	60fb      	str	r3, [r7, #12]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d2e:	4b19      	ldr	r3, [pc, #100]	@ (8004d94 <HAL_SPI_MspInit+0xb8>)
 8004d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d32:	4a18      	ldr	r2, [pc, #96]	@ (8004d94 <HAL_SPI_MspInit+0xb8>)
 8004d34:	f043 0302 	orr.w	r3, r3, #2
 8004d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d3a:	4b16      	ldr	r3, [pc, #88]	@ (8004d94 <HAL_SPI_MspInit+0xb8>)
 8004d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	60bb      	str	r3, [r7, #8]
 8004d44:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8004d46:	2302      	movs	r3, #2
 8004d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d52:	2300      	movs	r3, #0
 8004d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004d56:	2305      	movs	r3, #5
 8004d58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8004d5a:	f107 0314 	add.w	r3, r7, #20
 8004d5e:	4619      	mov	r1, r3
 8004d60:	480d      	ldr	r0, [pc, #52]	@ (8004d98 <HAL_SPI_MspInit+0xbc>)
 8004d62:	f003 fa4d 	bl	8008200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8004d66:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8004d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d70:	2300      	movs	r3, #0
 8004d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d74:	2300      	movs	r3, #0
 8004d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004d78:	2305      	movs	r3, #5
 8004d7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d7c:	f107 0314 	add.w	r3, r7, #20
 8004d80:	4619      	mov	r1, r3
 8004d82:	4806      	ldr	r0, [pc, #24]	@ (8004d9c <HAL_SPI_MspInit+0xc0>)
 8004d84:	f003 fa3c 	bl	8008200 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8004d88:	bf00      	nop
 8004d8a:	3728      	adds	r7, #40	@ 0x28
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	40003800 	.word	0x40003800
 8004d94:	40023800 	.word	0x40023800
 8004d98:	40022000 	.word	0x40022000
 8004d9c:	40020400 	.word	0x40020400

08004da0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b089      	sub	sp, #36	@ 0x24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a2e      	ldr	r2, [pc, #184]	@ (8004e68 <HAL_TIM_Base_MspInit+0xc8>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d10c      	bne.n	8004dcc <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004db2:	4b2e      	ldr	r3, [pc, #184]	@ (8004e6c <HAL_TIM_Base_MspInit+0xcc>)
 8004db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004db6:	4a2d      	ldr	r2, [pc, #180]	@ (8004e6c <HAL_TIM_Base_MspInit+0xcc>)
 8004db8:	f043 0301 	orr.w	r3, r3, #1
 8004dbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8004dbe:	4b2b      	ldr	r3, [pc, #172]	@ (8004e6c <HAL_TIM_Base_MspInit+0xcc>)
 8004dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	61fb      	str	r3, [r7, #28]
 8004dc8:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004dca:	e046      	b.n	8004e5a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dd4:	d10c      	bne.n	8004df0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004dd6:	4b25      	ldr	r3, [pc, #148]	@ (8004e6c <HAL_TIM_Base_MspInit+0xcc>)
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dda:	4a24      	ldr	r2, [pc, #144]	@ (8004e6c <HAL_TIM_Base_MspInit+0xcc>)
 8004ddc:	f043 0301 	orr.w	r3, r3, #1
 8004de0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004de2:	4b22      	ldr	r3, [pc, #136]	@ (8004e6c <HAL_TIM_Base_MspInit+0xcc>)
 8004de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	61bb      	str	r3, [r7, #24]
 8004dec:	69bb      	ldr	r3, [r7, #24]
}
 8004dee:	e034      	b.n	8004e5a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a1e      	ldr	r2, [pc, #120]	@ (8004e70 <HAL_TIM_Base_MspInit+0xd0>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d10c      	bne.n	8004e14 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004dfa:	4b1c      	ldr	r3, [pc, #112]	@ (8004e6c <HAL_TIM_Base_MspInit+0xcc>)
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfe:	4a1b      	ldr	r2, [pc, #108]	@ (8004e6c <HAL_TIM_Base_MspInit+0xcc>)
 8004e00:	f043 0302 	orr.w	r3, r3, #2
 8004e04:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e06:	4b19      	ldr	r3, [pc, #100]	@ (8004e6c <HAL_TIM_Base_MspInit+0xcc>)
 8004e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0a:	f003 0302 	and.w	r3, r3, #2
 8004e0e:	617b      	str	r3, [r7, #20]
 8004e10:	697b      	ldr	r3, [r7, #20]
}
 8004e12:	e022      	b.n	8004e5a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a16      	ldr	r2, [pc, #88]	@ (8004e74 <HAL_TIM_Base_MspInit+0xd4>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d10c      	bne.n	8004e38 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004e1e:	4b13      	ldr	r3, [pc, #76]	@ (8004e6c <HAL_TIM_Base_MspInit+0xcc>)
 8004e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e22:	4a12      	ldr	r2, [pc, #72]	@ (8004e6c <HAL_TIM_Base_MspInit+0xcc>)
 8004e24:	f043 0308 	orr.w	r3, r3, #8
 8004e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e2a:	4b10      	ldr	r3, [pc, #64]	@ (8004e6c <HAL_TIM_Base_MspInit+0xcc>)
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e2e:	f003 0308 	and.w	r3, r3, #8
 8004e32:	613b      	str	r3, [r7, #16]
 8004e34:	693b      	ldr	r3, [r7, #16]
}
 8004e36:	e010      	b.n	8004e5a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a0e      	ldr	r2, [pc, #56]	@ (8004e78 <HAL_TIM_Base_MspInit+0xd8>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d10b      	bne.n	8004e5a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004e42:	4b0a      	ldr	r3, [pc, #40]	@ (8004e6c <HAL_TIM_Base_MspInit+0xcc>)
 8004e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e46:	4a09      	ldr	r2, [pc, #36]	@ (8004e6c <HAL_TIM_Base_MspInit+0xcc>)
 8004e48:	f043 0302 	orr.w	r3, r3, #2
 8004e4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e4e:	4b07      	ldr	r3, [pc, #28]	@ (8004e6c <HAL_TIM_Base_MspInit+0xcc>)
 8004e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	60fb      	str	r3, [r7, #12]
 8004e58:	68fb      	ldr	r3, [r7, #12]
}
 8004e5a:	bf00      	nop
 8004e5c:	3724      	adds	r7, #36	@ 0x24
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	40010000 	.word	0x40010000
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	40000400 	.word	0x40000400
 8004e74:	40000c00 	.word	0x40000c00
 8004e78:	40010400 	.word	0x40010400

08004e7c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a0a      	ldr	r2, [pc, #40]	@ (8004eb4 <HAL_TIM_PWM_MspInit+0x38>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d10b      	bne.n	8004ea6 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM12_MspInit 0 */

    /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8004eb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8004e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e92:	4a09      	ldr	r2, [pc, #36]	@ (8004eb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8004e94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e98:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e9a:	4b07      	ldr	r3, [pc, #28]	@ (8004eb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM12_MspInit 1 */

  }

}
 8004ea6:	bf00      	nop
 8004ea8:	3714      	adds	r7, #20
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	40001800 	.word	0x40001800
 8004eb8:	40023800 	.word	0x40023800

08004ebc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b08c      	sub	sp, #48	@ 0x30
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ec4:	f107 031c 	add.w	r3, r7, #28
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	605a      	str	r2, [r3, #4]
 8004ece:	609a      	str	r2, [r3, #8]
 8004ed0:	60da      	str	r2, [r3, #12]
 8004ed2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a56      	ldr	r2, [pc, #344]	@ (8005034 <HAL_TIM_MspPostInit+0x178>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d11d      	bne.n	8004f1a <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ede:	4b56      	ldr	r3, [pc, #344]	@ (8005038 <HAL_TIM_MspPostInit+0x17c>)
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee2:	4a55      	ldr	r2, [pc, #340]	@ (8005038 <HAL_TIM_MspPostInit+0x17c>)
 8004ee4:	f043 0301 	orr.w	r3, r3, #1
 8004ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004eea:	4b53      	ldr	r3, [pc, #332]	@ (8005038 <HAL_TIM_MspPostInit+0x17c>)
 8004eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	61bb      	str	r3, [r7, #24]
 8004ef4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8004ef6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004efc:	2302      	movs	r3, #2
 8004efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f00:	2300      	movs	r3, #0
 8004f02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f04:	2300      	movs	r3, #0
 8004f06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8004f0c:	f107 031c 	add.w	r3, r7, #28
 8004f10:	4619      	mov	r1, r3
 8004f12:	484a      	ldr	r0, [pc, #296]	@ (800503c <HAL_TIM_MspPostInit+0x180>)
 8004f14:	f003 f974 	bl	8008200 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8004f18:	e087      	b.n	800502a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f22:	d11d      	bne.n	8004f60 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f24:	4b44      	ldr	r3, [pc, #272]	@ (8005038 <HAL_TIM_MspPostInit+0x17c>)
 8004f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f28:	4a43      	ldr	r2, [pc, #268]	@ (8005038 <HAL_TIM_MspPostInit+0x17c>)
 8004f2a:	f043 0301 	orr.w	r3, r3, #1
 8004f2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f30:	4b41      	ldr	r3, [pc, #260]	@ (8005038 <HAL_TIM_MspPostInit+0x17c>)
 8004f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	617b      	str	r3, [r7, #20]
 8004f3a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8004f3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f42:	2302      	movs	r3, #2
 8004f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f46:	2300      	movs	r3, #0
 8004f48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8004f52:	f107 031c 	add.w	r3, r7, #28
 8004f56:	4619      	mov	r1, r3
 8004f58:	4838      	ldr	r0, [pc, #224]	@ (800503c <HAL_TIM_MspPostInit+0x180>)
 8004f5a:	f003 f951 	bl	8008200 <HAL_GPIO_Init>
}
 8004f5e:	e064      	b.n	800502a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a36      	ldr	r2, [pc, #216]	@ (8005040 <HAL_TIM_MspPostInit+0x184>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d11c      	bne.n	8004fa4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f6a:	4b33      	ldr	r3, [pc, #204]	@ (8005038 <HAL_TIM_MspPostInit+0x17c>)
 8004f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f6e:	4a32      	ldr	r2, [pc, #200]	@ (8005038 <HAL_TIM_MspPostInit+0x17c>)
 8004f70:	f043 0302 	orr.w	r3, r3, #2
 8004f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f76:	4b30      	ldr	r3, [pc, #192]	@ (8005038 <HAL_TIM_MspPostInit+0x17c>)
 8004f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	613b      	str	r3, [r7, #16]
 8004f80:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8004f82:	2310      	movs	r3, #16
 8004f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f86:	2302      	movs	r3, #2
 8004f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004f92:	2302      	movs	r3, #2
 8004f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8004f96:	f107 031c 	add.w	r3, r7, #28
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	4829      	ldr	r0, [pc, #164]	@ (8005044 <HAL_TIM_MspPostInit+0x188>)
 8004f9e:	f003 f92f 	bl	8008200 <HAL_GPIO_Init>
}
 8004fa2:	e042      	b.n	800502a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a27      	ldr	r2, [pc, #156]	@ (8005048 <HAL_TIM_MspPostInit+0x18c>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d11c      	bne.n	8004fe8 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004fae:	4b22      	ldr	r3, [pc, #136]	@ (8005038 <HAL_TIM_MspPostInit+0x17c>)
 8004fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb2:	4a21      	ldr	r2, [pc, #132]	@ (8005038 <HAL_TIM_MspPostInit+0x17c>)
 8004fb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fba:	4b1f      	ldr	r3, [pc, #124]	@ (8005038 <HAL_TIM_MspPostInit+0x17c>)
 8004fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fca:	2302      	movs	r3, #2
 8004fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8004fda:	f107 031c 	add.w	r3, r7, #28
 8004fde:	4619      	mov	r1, r3
 8004fe0:	481a      	ldr	r0, [pc, #104]	@ (800504c <HAL_TIM_MspPostInit+0x190>)
 8004fe2:	f003 f90d 	bl	8008200 <HAL_GPIO_Init>
}
 8004fe6:	e020      	b.n	800502a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a18      	ldr	r2, [pc, #96]	@ (8005050 <HAL_TIM_MspPostInit+0x194>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d11b      	bne.n	800502a <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004ff2:	4b11      	ldr	r3, [pc, #68]	@ (8005038 <HAL_TIM_MspPostInit+0x17c>)
 8004ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff6:	4a10      	ldr	r2, [pc, #64]	@ (8005038 <HAL_TIM_MspPostInit+0x17c>)
 8004ff8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8005038 <HAL_TIM_MspPostInit+0x17c>)
 8005000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005006:	60bb      	str	r3, [r7, #8]
 8005008:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800500a:	2340      	movs	r3, #64	@ 0x40
 800500c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800500e:	2302      	movs	r3, #2
 8005010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005012:	2300      	movs	r3, #0
 8005014:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005016:	2300      	movs	r3, #0
 8005018:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800501a:	2309      	movs	r3, #9
 800501c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800501e:	f107 031c 	add.w	r3, r7, #28
 8005022:	4619      	mov	r1, r3
 8005024:	480b      	ldr	r0, [pc, #44]	@ (8005054 <HAL_TIM_MspPostInit+0x198>)
 8005026:	f003 f8eb 	bl	8008200 <HAL_GPIO_Init>
}
 800502a:	bf00      	nop
 800502c:	3730      	adds	r7, #48	@ 0x30
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	40010000 	.word	0x40010000
 8005038:	40023800 	.word	0x40023800
 800503c:	40020000 	.word	0x40020000
 8005040:	40000400 	.word	0x40000400
 8005044:	40020400 	.word	0x40020400
 8005048:	40000c00 	.word	0x40000c00
 800504c:	40022000 	.word	0x40022000
 8005050:	40001800 	.word	0x40001800
 8005054:	40021c00 	.word	0x40021c00

08005058 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b0ae      	sub	sp, #184	@ 0xb8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005060:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	605a      	str	r2, [r3, #4]
 800506a:	609a      	str	r2, [r3, #8]
 800506c:	60da      	str	r2, [r3, #12]
 800506e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005070:	f107 0320 	add.w	r3, r7, #32
 8005074:	2284      	movs	r2, #132	@ 0x84
 8005076:	2100      	movs	r1, #0
 8005078:	4618      	mov	r0, r3
 800507a:	f012 fe03 	bl	8017c84 <memset>
  if(huart->Instance==USART1)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a53      	ldr	r2, [pc, #332]	@ (80051d0 <HAL_UART_MspInit+0x178>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d15d      	bne.n	8005144 <HAL_UART_MspInit+0xec>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005088:	2340      	movs	r3, #64	@ 0x40
 800508a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800508c:	2300      	movs	r3, #0
 800508e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005090:	f107 0320 	add.w	r3, r7, #32
 8005094:	4618      	mov	r0, r3
 8005096:	f006 fa5b 	bl	800b550 <HAL_RCCEx_PeriphCLKConfig>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80050a0:	f7ff f898 	bl	80041d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80050a4:	4b4b      	ldr	r3, [pc, #300]	@ (80051d4 <HAL_UART_MspInit+0x17c>)
 80050a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050a8:	4a4a      	ldr	r2, [pc, #296]	@ (80051d4 <HAL_UART_MspInit+0x17c>)
 80050aa:	f043 0310 	orr.w	r3, r3, #16
 80050ae:	6453      	str	r3, [r2, #68]	@ 0x44
 80050b0:	4b48      	ldr	r3, [pc, #288]	@ (80051d4 <HAL_UART_MspInit+0x17c>)
 80050b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050b4:	f003 0310 	and.w	r3, r3, #16
 80050b8:	61fb      	str	r3, [r7, #28]
 80050ba:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050bc:	4b45      	ldr	r3, [pc, #276]	@ (80051d4 <HAL_UART_MspInit+0x17c>)
 80050be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c0:	4a44      	ldr	r2, [pc, #272]	@ (80051d4 <HAL_UART_MspInit+0x17c>)
 80050c2:	f043 0302 	orr.w	r3, r3, #2
 80050c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80050c8:	4b42      	ldr	r3, [pc, #264]	@ (80051d4 <HAL_UART_MspInit+0x17c>)
 80050ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	61bb      	str	r3, [r7, #24]
 80050d2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050d4:	4b3f      	ldr	r3, [pc, #252]	@ (80051d4 <HAL_UART_MspInit+0x17c>)
 80050d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d8:	4a3e      	ldr	r2, [pc, #248]	@ (80051d4 <HAL_UART_MspInit+0x17c>)
 80050da:	f043 0301 	orr.w	r3, r3, #1
 80050de:	6313      	str	r3, [r2, #48]	@ 0x30
 80050e0:	4b3c      	ldr	r3, [pc, #240]	@ (80051d4 <HAL_UART_MspInit+0x17c>)
 80050e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	617b      	str	r3, [r7, #20]
 80050ea:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80050ec:	2380      	movs	r3, #128	@ 0x80
 80050ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050f2:	2302      	movs	r3, #2
 80050f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050f8:	2300      	movs	r3, #0
 80050fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050fe:	2300      	movs	r3, #0
 8005100:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005104:	2307      	movs	r3, #7
 8005106:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800510a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800510e:	4619      	mov	r1, r3
 8005110:	4831      	ldr	r0, [pc, #196]	@ (80051d8 <HAL_UART_MspInit+0x180>)
 8005112:	f003 f875 	bl	8008200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8005116:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800511a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800511e:	2302      	movs	r3, #2
 8005120:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005124:	2300      	movs	r3, #0
 8005126:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800512a:	2300      	movs	r3, #0
 800512c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005130:	2307      	movs	r3, #7
 8005132:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8005136:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800513a:	4619      	mov	r1, r3
 800513c:	4827      	ldr	r0, [pc, #156]	@ (80051dc <HAL_UART_MspInit+0x184>)
 800513e:	f003 f85f 	bl	8008200 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8005142:	e040      	b.n	80051c6 <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a25      	ldr	r2, [pc, #148]	@ (80051e0 <HAL_UART_MspInit+0x188>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d13b      	bne.n	80051c6 <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800514e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005152:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8005154:	2300      	movs	r3, #0
 8005156:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005158:	f107 0320 	add.w	r3, r7, #32
 800515c:	4618      	mov	r0, r3
 800515e:	f006 f9f7 	bl	800b550 <HAL_RCCEx_PeriphCLKConfig>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <HAL_UART_MspInit+0x114>
      Error_Handler();
 8005168:	f7ff f834 	bl	80041d4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800516c:	4b19      	ldr	r3, [pc, #100]	@ (80051d4 <HAL_UART_MspInit+0x17c>)
 800516e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005170:	4a18      	ldr	r2, [pc, #96]	@ (80051d4 <HAL_UART_MspInit+0x17c>)
 8005172:	f043 0320 	orr.w	r3, r3, #32
 8005176:	6453      	str	r3, [r2, #68]	@ 0x44
 8005178:	4b16      	ldr	r3, [pc, #88]	@ (80051d4 <HAL_UART_MspInit+0x17c>)
 800517a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800517c:	f003 0320 	and.w	r3, r3, #32
 8005180:	613b      	str	r3, [r7, #16]
 8005182:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005184:	4b13      	ldr	r3, [pc, #76]	@ (80051d4 <HAL_UART_MspInit+0x17c>)
 8005186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005188:	4a12      	ldr	r2, [pc, #72]	@ (80051d4 <HAL_UART_MspInit+0x17c>)
 800518a:	f043 0304 	orr.w	r3, r3, #4
 800518e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005190:	4b10      	ldr	r3, [pc, #64]	@ (80051d4 <HAL_UART_MspInit+0x17c>)
 8005192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005194:	f003 0304 	and.w	r3, r3, #4
 8005198:	60fb      	str	r3, [r7, #12]
 800519a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800519c:	23c0      	movs	r3, #192	@ 0xc0
 800519e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051a2:	2302      	movs	r3, #2
 80051a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a8:	2300      	movs	r3, #0
 80051aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051ae:	2303      	movs	r3, #3
 80051b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80051b4:	2308      	movs	r3, #8
 80051b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051ba:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80051be:	4619      	mov	r1, r3
 80051c0:	4808      	ldr	r0, [pc, #32]	@ (80051e4 <HAL_UART_MspInit+0x18c>)
 80051c2:	f003 f81d 	bl	8008200 <HAL_GPIO_Init>
}
 80051c6:	bf00      	nop
 80051c8:	37b8      	adds	r7, #184	@ 0xb8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	40011000 	.word	0x40011000
 80051d4:	40023800 	.word	0x40023800
 80051d8:	40020400 	.word	0x40020400
 80051dc:	40020000 	.word	0x40020000
 80051e0:	40011400 	.word	0x40011400
 80051e4:	40020800 	.word	0x40020800

080051e8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80051ee:	1d3b      	adds	r3, r7, #4
 80051f0:	2200      	movs	r2, #0
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	605a      	str	r2, [r3, #4]
 80051f6:	609a      	str	r2, [r3, #8]
 80051f8:	60da      	str	r2, [r3, #12]
 80051fa:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80051fc:	4b3a      	ldr	r3, [pc, #232]	@ (80052e8 <HAL_FMC_MspInit+0x100>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d16d      	bne.n	80052e0 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8005204:	4b38      	ldr	r3, [pc, #224]	@ (80052e8 <HAL_FMC_MspInit+0x100>)
 8005206:	2201      	movs	r2, #1
 8005208:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800520a:	4b38      	ldr	r3, [pc, #224]	@ (80052ec <HAL_FMC_MspInit+0x104>)
 800520c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800520e:	4a37      	ldr	r2, [pc, #220]	@ (80052ec <HAL_FMC_MspInit+0x104>)
 8005210:	f043 0301 	orr.w	r3, r3, #1
 8005214:	6393      	str	r3, [r2, #56]	@ 0x38
 8005216:	4b35      	ldr	r3, [pc, #212]	@ (80052ec <HAL_FMC_MspInit+0x104>)
 8005218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	603b      	str	r3, [r7, #0]
 8005220:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8005222:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8005226:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005228:	2302      	movs	r3, #2
 800522a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800522c:	2300      	movs	r3, #0
 800522e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005230:	2303      	movs	r3, #3
 8005232:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005234:	230c      	movs	r3, #12
 8005236:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005238:	1d3b      	adds	r3, r7, #4
 800523a:	4619      	mov	r1, r3
 800523c:	482c      	ldr	r0, [pc, #176]	@ (80052f0 <HAL_FMC_MspInit+0x108>)
 800523e:	f002 ffdf 	bl	8008200 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8005242:	f248 1333 	movw	r3, #33075	@ 0x8133
 8005246:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005248:	2302      	movs	r3, #2
 800524a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800524c:	2300      	movs	r3, #0
 800524e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005250:	2303      	movs	r3, #3
 8005252:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005254:	230c      	movs	r3, #12
 8005256:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005258:	1d3b      	adds	r3, r7, #4
 800525a:	4619      	mov	r1, r3
 800525c:	4825      	ldr	r0, [pc, #148]	@ (80052f4 <HAL_FMC_MspInit+0x10c>)
 800525e:	f002 ffcf 	bl	8008200 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8005262:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8005266:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005268:	2302      	movs	r3, #2
 800526a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800526c:	2300      	movs	r3, #0
 800526e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005270:	2303      	movs	r3, #3
 8005272:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005274:	230c      	movs	r3, #12
 8005276:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005278:	1d3b      	adds	r3, r7, #4
 800527a:	4619      	mov	r1, r3
 800527c:	481e      	ldr	r0, [pc, #120]	@ (80052f8 <HAL_FMC_MspInit+0x110>)
 800527e:	f002 ffbf 	bl	8008200 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8005282:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8005286:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005288:	2302      	movs	r3, #2
 800528a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800528c:	2300      	movs	r3, #0
 800528e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005290:	2303      	movs	r3, #3
 8005292:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005294:	230c      	movs	r3, #12
 8005296:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005298:	1d3b      	adds	r3, r7, #4
 800529a:	4619      	mov	r1, r3
 800529c:	4817      	ldr	r0, [pc, #92]	@ (80052fc <HAL_FMC_MspInit+0x114>)
 800529e:	f002 ffaf 	bl	8008200 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80052a2:	2328      	movs	r3, #40	@ 0x28
 80052a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052a6:	2302      	movs	r3, #2
 80052a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052aa:	2300      	movs	r3, #0
 80052ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052ae:	2303      	movs	r3, #3
 80052b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80052b2:	230c      	movs	r3, #12
 80052b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80052b6:	1d3b      	adds	r3, r7, #4
 80052b8:	4619      	mov	r1, r3
 80052ba:	4811      	ldr	r0, [pc, #68]	@ (8005300 <HAL_FMC_MspInit+0x118>)
 80052bc:	f002 ffa0 	bl	8008200 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80052c0:	2308      	movs	r3, #8
 80052c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052c4:	2302      	movs	r3, #2
 80052c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052c8:	2300      	movs	r3, #0
 80052ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052cc:	2303      	movs	r3, #3
 80052ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80052d0:	230c      	movs	r3, #12
 80052d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80052d4:	1d3b      	adds	r3, r7, #4
 80052d6:	4619      	mov	r1, r3
 80052d8:	480a      	ldr	r0, [pc, #40]	@ (8005304 <HAL_FMC_MspInit+0x11c>)
 80052da:	f002 ff91 	bl	8008200 <HAL_GPIO_Init>
 80052de:	e000      	b.n	80052e2 <HAL_FMC_MspInit+0xfa>
    return;
 80052e0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80052e2:	3718      	adds	r7, #24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	20002464 	.word	0x20002464
 80052ec:	40023800 	.word	0x40023800
 80052f0:	40021000 	.word	0x40021000
 80052f4:	40021800 	.word	0x40021800
 80052f8:	40020c00 	.word	0x40020c00
 80052fc:	40021400 	.word	0x40021400
 8005300:	40021c00 	.word	0x40021c00
 8005304:	40020800 	.word	0x40020800

08005308 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8005310:	f7ff ff6a 	bl	80051e8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8005314:	bf00      	nop
 8005316:	3708      	adds	r7, #8
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b08a      	sub	sp, #40	@ 0x28
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a2b      	ldr	r2, [pc, #172]	@ (80053d8 <HAL_SAI_MspInit+0xbc>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d124      	bne.n	8005378 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800532e:	4b2b      	ldr	r3, [pc, #172]	@ (80053dc <HAL_SAI_MspInit+0xc0>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d10b      	bne.n	800534e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8005336:	4b2a      	ldr	r3, [pc, #168]	@ (80053e0 <HAL_SAI_MspInit+0xc4>)
 8005338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800533a:	4a29      	ldr	r2, [pc, #164]	@ (80053e0 <HAL_SAI_MspInit+0xc4>)
 800533c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005340:	6453      	str	r3, [r2, #68]	@ 0x44
 8005342:	4b27      	ldr	r3, [pc, #156]	@ (80053e0 <HAL_SAI_MspInit+0xc4>)
 8005344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005346:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800534a:	613b      	str	r3, [r7, #16]
 800534c:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800534e:	4b23      	ldr	r3, [pc, #140]	@ (80053dc <HAL_SAI_MspInit+0xc0>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	3301      	adds	r3, #1
 8005354:	4a21      	ldr	r2, [pc, #132]	@ (80053dc <HAL_SAI_MspInit+0xc0>)
 8005356:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8005358:	23f0      	movs	r3, #240	@ 0xf0
 800535a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800535c:	2302      	movs	r3, #2
 800535e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005360:	2300      	movs	r3, #0
 8005362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005364:	2300      	movs	r3, #0
 8005366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8005368:	230a      	movs	r3, #10
 800536a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800536c:	f107 0314 	add.w	r3, r7, #20
 8005370:	4619      	mov	r1, r3
 8005372:	481c      	ldr	r0, [pc, #112]	@ (80053e4 <HAL_SAI_MspInit+0xc8>)
 8005374:	f002 ff44 	bl	8008200 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a1a      	ldr	r2, [pc, #104]	@ (80053e8 <HAL_SAI_MspInit+0xcc>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d125      	bne.n	80053ce <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8005382:	4b16      	ldr	r3, [pc, #88]	@ (80053dc <HAL_SAI_MspInit+0xc0>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10b      	bne.n	80053a2 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800538a:	4b15      	ldr	r3, [pc, #84]	@ (80053e0 <HAL_SAI_MspInit+0xc4>)
 800538c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800538e:	4a14      	ldr	r2, [pc, #80]	@ (80053e0 <HAL_SAI_MspInit+0xc4>)
 8005390:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005394:	6453      	str	r3, [r2, #68]	@ 0x44
 8005396:	4b12      	ldr	r3, [pc, #72]	@ (80053e0 <HAL_SAI_MspInit+0xc4>)
 8005398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800539a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80053a2:	4b0e      	ldr	r3, [pc, #56]	@ (80053dc <HAL_SAI_MspInit+0xc0>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	3301      	adds	r3, #1
 80053a8:	4a0c      	ldr	r2, [pc, #48]	@ (80053dc <HAL_SAI_MspInit+0xc0>)
 80053aa:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80053ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80053b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053b2:	2302      	movs	r3, #2
 80053b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053b6:	2300      	movs	r3, #0
 80053b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053ba:	2300      	movs	r3, #0
 80053bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80053be:	230a      	movs	r3, #10
 80053c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80053c2:	f107 0314 	add.w	r3, r7, #20
 80053c6:	4619      	mov	r1, r3
 80053c8:	4808      	ldr	r0, [pc, #32]	@ (80053ec <HAL_SAI_MspInit+0xd0>)
 80053ca:	f002 ff19 	bl	8008200 <HAL_GPIO_Init>

    }
}
 80053ce:	bf00      	nop
 80053d0:	3728      	adds	r7, #40	@ 0x28
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	40015c04 	.word	0x40015c04
 80053dc:	20002468 	.word	0x20002468
 80053e0:	40023800 	.word	0x40023800
 80053e4:	40022000 	.word	0x40022000
 80053e8:	40015c24 	.word	0x40015c24
 80053ec:	40021800 	.word	0x40021800

080053f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b08e      	sub	sp, #56	@ 0x38
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80053f8:	2300      	movs	r3, #0
 80053fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80053fc:	2300      	movs	r3, #0
 80053fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005400:	4b33      	ldr	r3, [pc, #204]	@ (80054d0 <HAL_InitTick+0xe0>)
 8005402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005404:	4a32      	ldr	r2, [pc, #200]	@ (80054d0 <HAL_InitTick+0xe0>)
 8005406:	f043 0310 	orr.w	r3, r3, #16
 800540a:	6413      	str	r3, [r2, #64]	@ 0x40
 800540c:	4b30      	ldr	r3, [pc, #192]	@ (80054d0 <HAL_InitTick+0xe0>)
 800540e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005410:	f003 0310 	and.w	r3, r3, #16
 8005414:	60fb      	str	r3, [r7, #12]
 8005416:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005418:	f107 0210 	add.w	r2, r7, #16
 800541c:	f107 0314 	add.w	r3, r7, #20
 8005420:	4611      	mov	r1, r2
 8005422:	4618      	mov	r0, r3
 8005424:	f006 f862 	bl	800b4ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005428:	6a3b      	ldr	r3, [r7, #32]
 800542a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800542c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800542e:	2b00      	cmp	r3, #0
 8005430:	d103      	bne.n	800543a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005432:	f006 f833 	bl	800b49c <HAL_RCC_GetPCLK1Freq>
 8005436:	6378      	str	r0, [r7, #52]	@ 0x34
 8005438:	e004      	b.n	8005444 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800543a:	f006 f82f 	bl	800b49c <HAL_RCC_GetPCLK1Freq>
 800543e:	4603      	mov	r3, r0
 8005440:	005b      	lsls	r3, r3, #1
 8005442:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005446:	4a23      	ldr	r2, [pc, #140]	@ (80054d4 <HAL_InitTick+0xe4>)
 8005448:	fba2 2303 	umull	r2, r3, r2, r3
 800544c:	0c9b      	lsrs	r3, r3, #18
 800544e:	3b01      	subs	r3, #1
 8005450:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005452:	4b21      	ldr	r3, [pc, #132]	@ (80054d8 <HAL_InitTick+0xe8>)
 8005454:	4a21      	ldr	r2, [pc, #132]	@ (80054dc <HAL_InitTick+0xec>)
 8005456:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005458:	4b1f      	ldr	r3, [pc, #124]	@ (80054d8 <HAL_InitTick+0xe8>)
 800545a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800545e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005460:	4a1d      	ldr	r2, [pc, #116]	@ (80054d8 <HAL_InitTick+0xe8>)
 8005462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005464:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005466:	4b1c      	ldr	r3, [pc, #112]	@ (80054d8 <HAL_InitTick+0xe8>)
 8005468:	2200      	movs	r2, #0
 800546a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800546c:	4b1a      	ldr	r3, [pc, #104]	@ (80054d8 <HAL_InitTick+0xe8>)
 800546e:	2200      	movs	r2, #0
 8005470:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005472:	4b19      	ldr	r3, [pc, #100]	@ (80054d8 <HAL_InitTick+0xe8>)
 8005474:	2200      	movs	r2, #0
 8005476:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8005478:	4817      	ldr	r0, [pc, #92]	@ (80054d8 <HAL_InitTick+0xe8>)
 800547a:	f008 fde8 	bl	800e04e <HAL_TIM_Base_Init>
 800547e:	4603      	mov	r3, r0
 8005480:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8005484:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005488:	2b00      	cmp	r3, #0
 800548a:	d11b      	bne.n	80054c4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800548c:	4812      	ldr	r0, [pc, #72]	@ (80054d8 <HAL_InitTick+0xe8>)
 800548e:	f008 fe35 	bl	800e0fc <HAL_TIM_Base_Start_IT>
 8005492:	4603      	mov	r3, r0
 8005494:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8005498:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800549c:	2b00      	cmp	r3, #0
 800549e:	d111      	bne.n	80054c4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80054a0:	2036      	movs	r0, #54	@ 0x36
 80054a2:	f001 fb85 	bl	8006bb0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b0f      	cmp	r3, #15
 80054aa:	d808      	bhi.n	80054be <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80054ac:	2200      	movs	r2, #0
 80054ae:	6879      	ldr	r1, [r7, #4]
 80054b0:	2036      	movs	r0, #54	@ 0x36
 80054b2:	f001 fb61 	bl	8006b78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80054b6:	4a0a      	ldr	r2, [pc, #40]	@ (80054e0 <HAL_InitTick+0xf0>)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6013      	str	r3, [r2, #0]
 80054bc:	e002      	b.n	80054c4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80054c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3738      	adds	r7, #56	@ 0x38
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	40023800 	.word	0x40023800
 80054d4:	431bde83 	.word	0x431bde83
 80054d8:	2000246c 	.word	0x2000246c
 80054dc:	40001000 	.word	0x40001000
 80054e0:	2000006c 	.word	0x2000006c

080054e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80054e4:	b480      	push	{r7}
 80054e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80054e8:	bf00      	nop
 80054ea:	e7fd      	b.n	80054e8 <NMI_Handler+0x4>

080054ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80054ec:	b480      	push	{r7}
 80054ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80054f0:	bf00      	nop
 80054f2:	e7fd      	b.n	80054f0 <HardFault_Handler+0x4>

080054f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80054f4:	b480      	push	{r7}
 80054f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80054f8:	bf00      	nop
 80054fa:	e7fd      	b.n	80054f8 <MemManage_Handler+0x4>

080054fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80054fc:	b480      	push	{r7}
 80054fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005500:	bf00      	nop
 8005502:	e7fd      	b.n	8005500 <BusFault_Handler+0x4>

08005504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005504:	b480      	push	{r7}
 8005506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005508:	bf00      	nop
 800550a:	e7fd      	b.n	8005508 <UsageFault_Handler+0x4>

0800550c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800550c:	b480      	push	{r7}
 800550e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005510:	bf00      	nop
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
	...

0800551c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005520:	4802      	ldr	r0, [pc, #8]	@ (800552c <TIM6_DAC_IRQHandler+0x10>)
 8005522:	f008 feba 	bl	800e29a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005526:	bf00      	nop
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	2000246c 	.word	0x2000246c

08005530 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8005534:	4802      	ldr	r0, [pc, #8]	@ (8005540 <OTG_FS_IRQHandler+0x10>)
 8005536:	f003 f840 	bl	80085ba <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800553a:	bf00      	nop
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	20012c84 	.word	0x20012c84

08005544 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8005548:	4802      	ldr	r0, [pc, #8]	@ (8005554 <LTDC_IRQHandler+0x10>)
 800554a:	f004 ffad 	bl	800a4a8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800554e:	bf00      	nop
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	20001b74 	.word	0x20001b74

08005558 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800555c:	4802      	ldr	r0, [pc, #8]	@ (8005568 <DMA2D_IRQHandler+0x10>)
 800555e:	f002 f95f 	bl	8007820 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8005562:	bf00      	nop
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	200019dc 	.word	0x200019dc

0800556c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt (USART6_RX).
  */
void DMA2_Stream1_IRQHandler(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8005570:	4802      	ldr	r0, [pc, #8]	@ (800557c <DMA2_Stream1_IRQHandler+0x10>)
 8005572:	f001 fe95 	bl	80072a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8005576:	bf00      	nop
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	200023ec 	.word	0x200023ec

08005580 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  
  // IDLE 인터럽트 체크 (메시지 끝 감지)
  if (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE)) {
 8005584:	4b09      	ldr	r3, [pc, #36]	@ (80055ac <USART6_IRQHandler+0x2c>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	f003 0310 	and.w	r3, r3, #16
 800558e:	2b10      	cmp	r3, #16
 8005590:	d106      	bne.n	80055a0 <USART6_IRQHandler+0x20>
    __HAL_UART_CLEAR_IDLEFLAG(&huart6);  // IDLE 플래그 클리어
 8005592:	4b06      	ldr	r3, [pc, #24]	@ (80055ac <USART6_IRQHandler+0x2c>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2210      	movs	r2, #16
 8005598:	621a      	str	r2, [r3, #32]
    
    // 외부 함수 호출
    extern void USER_UART_IDLECallback(UART_HandleTypeDef *huart);
    USER_UART_IDLECallback(&huart6);
 800559a:	4804      	ldr	r0, [pc, #16]	@ (80055ac <USART6_IRQHandler+0x2c>)
 800559c:	f000 fe8e 	bl	80062bc <USER_UART_IDLECallback>
  }

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80055a0:	4802      	ldr	r0, [pc, #8]	@ (80055ac <USART6_IRQHandler+0x2c>)
 80055a2:	f00a f8c5 	bl	800f730 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80055a6:	bf00      	nop
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	20002114 	.word	0x20002114

080055b0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055bc:	2300      	movs	r3, #0
 80055be:	617b      	str	r3, [r7, #20]
 80055c0:	e00a      	b.n	80055d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80055c2:	f3af 8000 	nop.w
 80055c6:	4601      	mov	r1, r0
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	1c5a      	adds	r2, r3, #1
 80055cc:	60ba      	str	r2, [r7, #8]
 80055ce:	b2ca      	uxtb	r2, r1
 80055d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	3301      	adds	r3, #1
 80055d6:	617b      	str	r3, [r7, #20]
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	429a      	cmp	r2, r3
 80055de:	dbf0      	blt.n	80055c2 <_read+0x12>
  }

  return len;
 80055e0:	687b      	ldr	r3, [r7, #4]
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3718      	adds	r7, #24
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b086      	sub	sp, #24
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	60f8      	str	r0, [r7, #12]
 80055f2:	60b9      	str	r1, [r7, #8]
 80055f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055f6:	2300      	movs	r3, #0
 80055f8:	617b      	str	r3, [r7, #20]
 80055fa:	e009      	b.n	8005610 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	1c5a      	adds	r2, r3, #1
 8005600:	60ba      	str	r2, [r7, #8]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	4618      	mov	r0, r3
 8005606:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	3301      	adds	r3, #1
 800560e:	617b      	str	r3, [r7, #20]
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	429a      	cmp	r2, r3
 8005616:	dbf1      	blt.n	80055fc <_write+0x12>
  }
  return len;
 8005618:	687b      	ldr	r3, [r7, #4]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3718      	adds	r7, #24
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <_close>:

int _close(int file)
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800562a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800562e:	4618      	mov	r0, r3
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800563a:	b480      	push	{r7}
 800563c:	b083      	sub	sp, #12
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
 8005642:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800564a:	605a      	str	r2, [r3, #4]
  return 0;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <_isatty>:

int _isatty(int file)
{
 800565a:	b480      	push	{r7}
 800565c:	b083      	sub	sp, #12
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005662:	2301      	movs	r3, #1
}
 8005664:	4618      	mov	r0, r3
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
	...

0800568c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005694:	4a14      	ldr	r2, [pc, #80]	@ (80056e8 <_sbrk+0x5c>)
 8005696:	4b15      	ldr	r3, [pc, #84]	@ (80056ec <_sbrk+0x60>)
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80056a0:	4b13      	ldr	r3, [pc, #76]	@ (80056f0 <_sbrk+0x64>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d102      	bne.n	80056ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80056a8:	4b11      	ldr	r3, [pc, #68]	@ (80056f0 <_sbrk+0x64>)
 80056aa:	4a12      	ldr	r2, [pc, #72]	@ (80056f4 <_sbrk+0x68>)
 80056ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80056ae:	4b10      	ldr	r3, [pc, #64]	@ (80056f0 <_sbrk+0x64>)
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4413      	add	r3, r2
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d207      	bcs.n	80056cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80056bc:	f012 fb76 	bl	8017dac <__errno>
 80056c0:	4603      	mov	r3, r0
 80056c2:	220c      	movs	r2, #12
 80056c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80056c6:	f04f 33ff 	mov.w	r3, #4294967295
 80056ca:	e009      	b.n	80056e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80056cc:	4b08      	ldr	r3, [pc, #32]	@ (80056f0 <_sbrk+0x64>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80056d2:	4b07      	ldr	r3, [pc, #28]	@ (80056f0 <_sbrk+0x64>)
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4413      	add	r3, r2
 80056da:	4a05      	ldr	r2, [pc, #20]	@ (80056f0 <_sbrk+0x64>)
 80056dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80056de:	68fb      	ldr	r3, [r7, #12]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3718      	adds	r7, #24
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	20050000 	.word	0x20050000
 80056ec:	00000400 	.word	0x00000400
 80056f0:	200024b8 	.word	0x200024b8
 80056f4:	200131b0 	.word	0x200131b0

080056f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80056f8:	b480      	push	{r7}
 80056fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80056fc:	4b06      	ldr	r3, [pc, #24]	@ (8005718 <SystemInit+0x20>)
 80056fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005702:	4a05      	ldr	r2, [pc, #20]	@ (8005718 <SystemInit+0x20>)
 8005704:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005708:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800570c:	bf00      	nop
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	e000ed00 	.word	0xe000ed00

0800571c <TIME_GetCurrentMs>:
// ============================================================================
// 기본 시간 함수
// ============================================================================

uint32_t TIME_GetCurrentMs(void)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	af00      	add	r7, sp, #0
    return TIME_Platform_GetCurrentMs();
 8005720:	f000 f803 	bl	800572a <TIME_Platform_GetCurrentMs>
 8005724:	4603      	mov	r3, r0
}
 8005726:	4618      	mov	r0, r3
 8005728:	bd80      	pop	{r7, pc}

0800572a <TIME_Platform_GetCurrentMs>:
#include "time.h"
#include "stm32f7xx_hal.h"

// STM32용 플랫폼 함수들
uint32_t TIME_Platform_GetCurrentMs(void)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	af00      	add	r7, sp, #0
    return HAL_GetTick();  // HAL_GetTick()은 1ms 단위로 시간을 반환
 800572e:	f000 fea3 	bl	8006478 <HAL_GetTick>
 8005732:	4603      	mov	r3, r0
}
 8005734:	4618      	mov	r0, r3
 8005736:	bd80      	pop	{r7, pc}

08005738 <LOGGER_Connect>:
    .enable_network = true,
    .server_ip = "",
    .server_port = 0
};

LoggerStatus LOGGER_Connect(const char* server_ip, int port) {
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
    if (server_ip == NULL) return LOGGER_STATUS_ERROR;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d102      	bne.n	800574e <LOGGER_Connect+0x16>
 8005748:	f04f 33ff 	mov.w	r3, #4294967295
 800574c:	e016      	b.n	800577c <LOGGER_Connect+0x44>
    strncpy(current_config.server_ip, server_ip, sizeof(current_config.server_ip) - 1);
 800574e:	223f      	movs	r2, #63	@ 0x3f
 8005750:	6879      	ldr	r1, [r7, #4]
 8005752:	480c      	ldr	r0, [pc, #48]	@ (8005784 <LOGGER_Connect+0x4c>)
 8005754:	f012 faab 	bl	8017cae <strncpy>
    current_config.server_port = port;
 8005758:	4a0b      	ldr	r2, [pc, #44]	@ (8005788 <LOGGER_Connect+0x50>)
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	6453      	str	r3, [r2, #68]	@ 0x44
    LoggerStatus status = LOGGER_Platform_Connect(server_ip, port);
 800575e:	6839      	ldr	r1, [r7, #0]
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 f965 	bl	8005a30 <LOGGER_Platform_Connect>
 8005766:	4603      	mov	r3, r0
 8005768:	73fb      	strb	r3, [r7, #15]
    if (status == LOGGER_STATUS_OK) {
 800576a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d102      	bne.n	8005778 <LOGGER_Connect+0x40>
        logger_connected = true;
 8005772:	4b06      	ldr	r3, [pc, #24]	@ (800578c <LOGGER_Connect+0x54>)
 8005774:	2201      	movs	r2, #1
 8005776:	701a      	strb	r2, [r3, #0]
    }
    return status;
 8005778:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	20000027 	.word	0x20000027
 8005788:	20000024 	.word	0x20000024
 800578c:	200024bc 	.word	0x200024bc

08005790 <LOGGER_SetFilterLevel>:
bool LOGGER_IsConnected(void) {
    return logger_connected;
}

// Logger 제어 함수들
void LOGGER_SetFilterLevel(LogLevel min_level) {
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	4603      	mov	r3, r0
 8005798:	71fb      	strb	r3, [r7, #7]
    filter_level = min_level;
 800579a:	4a04      	ldr	r2, [pc, #16]	@ (80057ac <LOGGER_SetFilterLevel+0x1c>)
 800579c:	79fb      	ldrb	r3, [r7, #7]
 800579e:	7013      	strb	r3, [r2, #0]
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr
 80057ac:	200024be 	.word	0x200024be

080057b0 <LOGGER_SetSDFilterLevel>:

void LOGGER_SetSDFilterLevel(LogLevel min_level) {
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	4603      	mov	r3, r0
 80057b8:	71fb      	strb	r3, [r7, #7]
    sd_filter_level = min_level;
 80057ba:	4a04      	ldr	r2, [pc, #16]	@ (80057cc <LOGGER_SetSDFilterLevel+0x1c>)
 80057bc:	79fb      	ldrb	r3, [r7, #7]
 80057be:	7013      	strb	r3, [r2, #0]
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	20000020 	.word	0x20000020

080057d0 <LOGGER_EnableSDLogging>:

void LOGGER_EnableSDLogging(bool enable) {
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	4603      	mov	r3, r0
 80057d8:	71fb      	strb	r3, [r7, #7]
    sd_logging_enabled = enable;
 80057da:	4a04      	ldr	r2, [pc, #16]	@ (80057ec <LOGGER_EnableSDLogging+0x1c>)
 80057dc:	79fb      	ldrb	r3, [r7, #7]
 80057de:	7013      	strb	r3, [r2, #0]
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr
 80057ec:	200024bf 	.word	0x200024bf

080057f0 <LOGGER_IsSDLoggingEnabled>:

bool LOGGER_IsSDLoggingEnabled(void) {
 80057f0:	b480      	push	{r7}
 80057f2:	af00      	add	r7, sp, #0
    return sd_logging_enabled;
 80057f4:	4b03      	ldr	r3, [pc, #12]	@ (8005804 <LOGGER_IsSDLoggingEnabled+0x14>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	200024bf 	.word	0x200024bf

08005808 <LOGGER_SetMode>:

void LOGGER_SetMode(LoggerMode_t mode) {
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	4603      	mov	r3, r0
 8005810:	71fb      	strb	r3, [r7, #7]
    current_mode = mode;
 8005812:	4a0d      	ldr	r2, [pc, #52]	@ (8005848 <LOGGER_SetMode+0x40>)
 8005814:	79fb      	ldrb	r3, [r7, #7]
 8005816:	7013      	strb	r3, [r2, #0]
    
    // 모드에 따른 연결 상태 설정
    if (mode == LOGGER_MODE_TERMINAL_ONLY) {
 8005818:	79fb      	ldrb	r3, [r7, #7]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d103      	bne.n	8005826 <LOGGER_SetMode+0x1e>
        logger_connected = true;  // 터미널은 항상 연결됨
 800581e:	4b0b      	ldr	r3, [pc, #44]	@ (800584c <LOGGER_SetMode+0x44>)
 8005820:	2201      	movs	r2, #1
 8005822:	701a      	strb	r2, [r3, #0]
    } else if (mode == LOGGER_MODE_SD_ONLY || mode == LOGGER_MODE_DUAL) {
        // SD 백엔드 사용 시 SDStorage 연결 상태에 따라 결정
        logger_connected = SDStorage_IsReady();
    }
}
 8005824:	e00b      	b.n	800583e <LOGGER_SetMode+0x36>
    } else if (mode == LOGGER_MODE_SD_ONLY || mode == LOGGER_MODE_DUAL) {
 8005826:	79fb      	ldrb	r3, [r7, #7]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d002      	beq.n	8005832 <LOGGER_SetMode+0x2a>
 800582c:	79fb      	ldrb	r3, [r7, #7]
 800582e:	2b02      	cmp	r3, #2
 8005830:	d105      	bne.n	800583e <LOGGER_SetMode+0x36>
        logger_connected = SDStorage_IsReady();
 8005832:	f7fc faeb 	bl	8001e0c <SDStorage_IsReady>
 8005836:	4603      	mov	r3, r0
 8005838:	461a      	mov	r2, r3
 800583a:	4b04      	ldr	r3, [pc, #16]	@ (800584c <LOGGER_SetMode+0x44>)
 800583c:	701a      	strb	r2, [r3, #0]
}
 800583e:	bf00      	nop
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	200024bd 	.word	0x200024bd
 800584c:	200024bc 	.word	0x200024bc

08005850 <LOGGER_SendFormatted>:

LoggerMode_t LOGGER_GetMode(void) {
    return current_mode;
}

void LOGGER_SendFormatted(LogLevel level, const char* format, ...) {
 8005850:	b40e      	push	{r1, r2, r3}
 8005852:	b590      	push	{r4, r7, lr}
 8005854:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 8005858:	af02      	add	r7, sp, #8
 800585a:	4602      	mov	r2, r0
 800585c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8005860:	f2a3 2321 	subw	r3, r3, #545	@ 0x221
 8005864:	701a      	strb	r2, [r3, #0]
    // 필터 레벨 체크
    if (level < filter_level) return;
 8005866:	4b6a      	ldr	r3, [pc, #424]	@ (8005a10 <LOGGER_SendFormatted+0x1c0>)
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 800586e:	f2a2 2221 	subw	r2, r2, #545	@ 0x221
 8005872:	7812      	ldrb	r2, [r2, #0]
 8005874:	429a      	cmp	r2, r3
 8005876:	f0c0 80bd 	bcc.w	80059f4 <LOGGER_SendFormatted+0x1a4>
    if (level < current_config.level) return;
 800587a:	4b66      	ldr	r3, [pc, #408]	@ (8005a14 <LOGGER_SendFormatted+0x1c4>)
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 8005882:	f2a2 2221 	subw	r2, r2, #545	@ 0x221
 8005886:	7812      	ldrb	r2, [r2, #0]
 8005888:	429a      	cmp	r2, r3
 800588a:	f0c0 80b5 	bcc.w	80059f8 <LOGGER_SendFormatted+0x1a8>
    
    char buffer[512];
    const char* level_str[] = {"[DEBUG]", "[INFO]", "[WARN]", "[ERROR]"};
 800588e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8005892:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005896:	4a60      	ldr	r2, [pc, #384]	@ (8005a18 <LOGGER_SendFormatted+0x1c8>)
 8005898:	461c      	mov	r4, r3
 800589a:	4613      	mov	r3, r2
 800589c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800589e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    // 타임스탬프 + 레벨 문자열 추가
    int offset = 0;
 80058a2:	2300      	movs	r3, #0
 80058a4:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
    const char* network_time = ResponseHandler_GetNetworkTime();
 80058a8:	f7fb fd82 	bl	80013b0 <ResponseHandler_GetNetworkTime>
 80058ac:	f8c7 0220 	str.w	r0, [r7, #544]	@ 0x220
    if (network_time != NULL && ResponseHandler_IsTimeSynchronized()) {
 80058b0:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d01c      	beq.n	80058f2 <LOGGER_SendFormatted+0xa2>
 80058b8:	f7fb fd8c 	bl	80013d4 <ResponseHandler_IsTimeSynchronized>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d017      	beq.n	80058f2 <LOGGER_SendFormatted+0xa2>
        // 네트워크 시간이 있으면 타임스탬프 추가
        offset = snprintf(buffer, sizeof(buffer), "[%s] %s ", network_time, level_str[level]);
 80058c2:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80058c6:	f2a3 2321 	subw	r3, r3, #545	@ 0x221
 80058ca:	781a      	ldrb	r2, [r3, #0]
 80058cc:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80058d0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80058d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058d8:	f107 0020 	add.w	r0, r7, #32
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 80058e2:	4a4e      	ldr	r2, [pc, #312]	@ (8005a1c <LOGGER_SendFormatted+0x1cc>)
 80058e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80058e8:	f012 f8c6 	bl	8017a78 <sniprintf>
 80058ec:	f8c7 0224 	str.w	r0, [r7, #548]	@ 0x224
 80058f0:	e013      	b.n	800591a <LOGGER_SendFormatted+0xca>
    } else {
        // 네트워크 시간이 없으면 기본 형식
        offset = snprintf(buffer, sizeof(buffer), "%s ", level_str[level]);
 80058f2:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80058f6:	f2a3 2321 	subw	r3, r3, #545	@ 0x221
 80058fa:	781a      	ldrb	r2, [r3, #0]
 80058fc:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8005900:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005908:	f107 0020 	add.w	r0, r7, #32
 800590c:	4a44      	ldr	r2, [pc, #272]	@ (8005a20 <LOGGER_SendFormatted+0x1d0>)
 800590e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005912:	f012 f8b1 	bl	8017a78 <sniprintf>
 8005916:	f8c7 0224 	str.w	r0, [r7, #548]	@ 0x224
    }
    
    // 가변 인수 처리
    va_list args;
    va_start(args, format);
 800591a:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 800591e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8005922:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005926:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer + offset, sizeof(buffer) - offset, format, args);
 8005928:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 800592c:	f107 0220 	add.w	r2, r7, #32
 8005930:	18d0      	adds	r0, r2, r3
 8005932:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8005936:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 800593a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800593e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8005948:	f012 f98e 	bl	8017c68 <vsniprintf>
    va_end(args);
    
    // 모드에 따른 출력 처리
    switch (current_mode) {
 800594c:	4b35      	ldr	r3, [pc, #212]	@ (8005a24 <LOGGER_SendFormatted+0x1d4>)
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b02      	cmp	r3, #2
 8005952:	d02b      	beq.n	80059ac <LOGGER_SendFormatted+0x15c>
 8005954:	2b02      	cmp	r3, #2
 8005956:	dc54      	bgt.n	8005a02 <LOGGER_SendFormatted+0x1b2>
 8005958:	2b00      	cmp	r3, #0
 800595a:	d002      	beq.n	8005962 <LOGGER_SendFormatted+0x112>
 800595c:	2b01      	cmp	r3, #1
 800595e:	d006      	beq.n	800596e <LOGGER_SendFormatted+0x11e>
 8005960:	e04f      	b.n	8005a02 <LOGGER_SendFormatted+0x1b2>
        case LOGGER_MODE_TERMINAL_ONLY:
            LOGGER_Platform_Send(buffer);
 8005962:	f107 0320 	add.w	r3, r7, #32
 8005966:	4618      	mov	r0, r3
 8005968:	f000 f86e 	bl	8005a48 <LOGGER_Platform_Send>
            break;
 800596c:	e049      	b.n	8005a02 <LOGGER_SendFormatted+0x1b2>
            
        case LOGGER_MODE_SD_ONLY:
            // SD 로깅 활성화 + SD 필터 레벨 체크
            if (sd_logging_enabled && level >= sd_filter_level && SDStorage_IsReady()) {
 800596e:	4b2e      	ldr	r3, [pc, #184]	@ (8005a28 <LOGGER_SendFormatted+0x1d8>)
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d042      	beq.n	80059fc <LOGGER_SendFormatted+0x1ac>
 8005976:	4b2d      	ldr	r3, [pc, #180]	@ (8005a2c <LOGGER_SendFormatted+0x1dc>)
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 800597e:	f2a2 2221 	subw	r2, r2, #545	@ 0x221
 8005982:	7812      	ldrb	r2, [r2, #0]
 8005984:	429a      	cmp	r2, r3
 8005986:	d339      	bcc.n	80059fc <LOGGER_SendFormatted+0x1ac>
 8005988:	f7fc fa40 	bl	8001e0c <SDStorage_IsReady>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d034      	beq.n	80059fc <LOGGER_SendFormatted+0x1ac>
                SDStorage_WriteLog(buffer, strlen(buffer));
 8005992:	f107 0320 	add.w	r3, r7, #32
 8005996:	4618      	mov	r0, r3
 8005998:	f7fa fc44 	bl	8000224 <strlen>
 800599c:	4602      	mov	r2, r0
 800599e:	f107 0320 	add.w	r3, r7, #32
 80059a2:	4611      	mov	r1, r2
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7fb ffc9 	bl	800193c <SDStorage_WriteLog>
            }
            break;
 80059aa:	e027      	b.n	80059fc <LOGGER_SendFormatted+0x1ac>
            
        case LOGGER_MODE_DUAL:
            // 터미널 출력 (실시간)
            LOGGER_Platform_Send(buffer);
 80059ac:	f107 0320 	add.w	r3, r7, #32
 80059b0:	4618      	mov	r0, r3
 80059b2:	f000 f849 	bl	8005a48 <LOGGER_Platform_Send>
            // SD 출력 (SD 로깅 활성화 + SD 필터 레벨 체크 + 에러 무시)
            if (sd_logging_enabled && level >= sd_filter_level && SDStorage_IsReady()) {
 80059b6:	4b1c      	ldr	r3, [pc, #112]	@ (8005a28 <LOGGER_SendFormatted+0x1d8>)
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d020      	beq.n	8005a00 <LOGGER_SendFormatted+0x1b0>
 80059be:	4b1b      	ldr	r3, [pc, #108]	@ (8005a2c <LOGGER_SendFormatted+0x1dc>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 80059c6:	f2a2 2221 	subw	r2, r2, #545	@ 0x221
 80059ca:	7812      	ldrb	r2, [r2, #0]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d317      	bcc.n	8005a00 <LOGGER_SendFormatted+0x1b0>
 80059d0:	f7fc fa1c 	bl	8001e0c <SDStorage_IsReady>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d012      	beq.n	8005a00 <LOGGER_SendFormatted+0x1b0>
                SDStorage_WriteLog(buffer, strlen(buffer));
 80059da:	f107 0320 	add.w	r3, r7, #32
 80059de:	4618      	mov	r0, r3
 80059e0:	f7fa fc20 	bl	8000224 <strlen>
 80059e4:	4602      	mov	r2, r0
 80059e6:	f107 0320 	add.w	r3, r7, #32
 80059ea:	4611      	mov	r1, r2
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7fb ffa5 	bl	800193c <SDStorage_WriteLog>
            }
            break;
 80059f2:	e005      	b.n	8005a00 <LOGGER_SendFormatted+0x1b0>
    if (level < filter_level) return;
 80059f4:	bf00      	nop
 80059f6:	e004      	b.n	8005a02 <LOGGER_SendFormatted+0x1b2>
    if (level < current_config.level) return;
 80059f8:	bf00      	nop
 80059fa:	e002      	b.n	8005a02 <LOGGER_SendFormatted+0x1b2>
            break;
 80059fc:	bf00      	nop
 80059fe:	e000      	b.n	8005a02 <LOGGER_SendFormatted+0x1b2>
            break;
 8005a00:	bf00      	nop
    }
}
 8005a02:	f507 770a 	add.w	r7, r7, #552	@ 0x228
 8005a06:	46bd      	mov	sp, r7
 8005a08:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005a0c:	b003      	add	sp, #12
 8005a0e:	4770      	bx	lr
 8005a10:	200024be 	.word	0x200024be
 8005a14:	20000024 	.word	0x20000024
 8005a18:	0801c1bc 	.word	0x0801c1bc
 8005a1c:	0801c1cc 	.word	0x0801c1cc
 8005a20:	0801c1d8 	.word	0x0801c1d8
 8005a24:	200024bd 	.word	0x200024bd
 8005a28:	200024bf 	.word	0x200024bf
 8005a2c:	20000020 	.word	0x20000020

08005a30 <LOGGER_Platform_Connect>:
#include "stm32f7xx_hal.h"
#include <string.h>

extern UART_HandleTypeDef huart1; // CubeMX가 생성한 UART1 (Virtual COM Port)

LoggerStatus LOGGER_Platform_Connect(const char* server_ip, int port) {
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
    (void)server_ip; (void)port;
    // STM32에서는 UART1이 이미 초기화되어 있으므로 추가 설정 불필요
    return LOGGER_STATUS_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <LOGGER_Platform_Send>:

LoggerStatus LOGGER_Platform_Disconnect(void) {
    return LOGGER_STATUS_OK;
}

LoggerStatus LOGGER_Platform_Send(const char* message) {
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
    if (message == NULL) return LOGGER_STATUS_ERROR;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d102      	bne.n	8005a5c <LOGGER_Platform_Send+0x14>
 8005a56:	f04f 33ff 	mov.w	r3, #4294967295
 8005a5a:	e01c      	b.n	8005a96 <LOGGER_Platform_Send+0x4e>
    
    // UART1을 통해 메시지 전송 (Virtual COM Port)
    int len = strlen(message);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f7fa fbe1 	bl	8000224 <strlen>
 8005a62:	4603      	mov	r3, r0
 8005a64:	60fb      	str	r3, [r7, #12]
    if (len > 0) {
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	dd12      	ble.n	8005a92 <LOGGER_Platform_Send+0x4a>
        if (HAL_UART_Transmit(&huart1, (uint8_t*)message, len, 1000) == HAL_OK) {
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005a74:	6879      	ldr	r1, [r7, #4]
 8005a76:	480a      	ldr	r0, [pc, #40]	@ (8005aa0 <LOGGER_Platform_Send+0x58>)
 8005a78:	f009 fc32 	bl	800f2e0 <HAL_UART_Transmit>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d107      	bne.n	8005a92 <LOGGER_Platform_Send+0x4a>
            // 줄바꿈 추가
            HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 100);
 8005a82:	2364      	movs	r3, #100	@ 0x64
 8005a84:	2202      	movs	r2, #2
 8005a86:	4907      	ldr	r1, [pc, #28]	@ (8005aa4 <LOGGER_Platform_Send+0x5c>)
 8005a88:	4805      	ldr	r0, [pc, #20]	@ (8005aa0 <LOGGER_Platform_Send+0x58>)
 8005a8a:	f009 fc29 	bl	800f2e0 <HAL_UART_Transmit>
            return LOGGER_STATUS_OK;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	e001      	b.n	8005a96 <LOGGER_Platform_Send+0x4e>
        }
    }
    return LOGGER_STATUS_ERROR;
 8005a92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	2000208c 	.word	0x2000208c
 8005aa4:	0801c1dc 	.word	0x0801c1dc

08005aa8 <UART_Connect>:
    .timeout_ms = UART_DEFAULT_TIMEOUT_MS
};

// 공통 함수들 (테스트와 실제 빌드 모두에서 사용)
UartStatus UART_Connect(const char* port)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
    if (port == NULL) {
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d105      	bne.n	8005ac2 <UART_Connect+0x1a>
        LOG_ERROR("[UART] Connect failed: NULL port");
 8005ab6:	4913      	ldr	r1, [pc, #76]	@ (8005b04 <UART_Connect+0x5c>)
 8005ab8:	2003      	movs	r0, #3
 8005aba:	f7ff fec9 	bl	8005850 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e01c      	b.n	8005afc <UART_Connect+0x54>
    }

    LOG_INFO("[UART] Connecting to %s", port);
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	4910      	ldr	r1, [pc, #64]	@ (8005b08 <UART_Connect+0x60>)
 8005ac6:	2001      	movs	r0, #1
 8005ac8:	f7ff fec2 	bl	8005850 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Connect(port);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 f8ef 	bl	8005cb0 <UART_Platform_Connect>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 8005ad6:	7bfb      	ldrb	r3, [r7, #15]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d108      	bne.n	8005aee <UART_Connect+0x46>
        uart_connected = true;
 8005adc:	4b0b      	ldr	r3, [pc, #44]	@ (8005b0c <UART_Connect+0x64>)
 8005ade:	2201      	movs	r2, #1
 8005ae0:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART] Successfully connected to %s", port);
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	490a      	ldr	r1, [pc, #40]	@ (8005b10 <UART_Connect+0x68>)
 8005ae6:	2001      	movs	r0, #1
 8005ae8:	f7ff feb2 	bl	8005850 <LOGGER_SendFormatted>
 8005aec:	e005      	b.n	8005afa <UART_Connect+0x52>
    } else {
        LOG_ERROR("[UART] Failed to connect to %s (status: %d)", port, status);
 8005aee:	7bfb      	ldrb	r3, [r7, #15]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	4908      	ldr	r1, [pc, #32]	@ (8005b14 <UART_Connect+0x6c>)
 8005af4:	2003      	movs	r0, #3
 8005af6:	f7ff feab 	bl	8005850 <LOGGER_SendFormatted>
    }

    return status;
 8005afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	0801c1e0 	.word	0x0801c1e0
 8005b08:	0801c204 	.word	0x0801c204
 8005b0c:	200024c0 	.word	0x200024c0
 8005b10:	0801c21c 	.word	0x0801c21c
 8005b14:	0801c240 	.word	0x0801c240

08005b18 <UART_Send>:

    return status;
}

UartStatus UART_Send(const char* data)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
    if (!uart_connected) {
 8005b20:	4b19      	ldr	r3, [pc, #100]	@ (8005b88 <UART_Send+0x70>)
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	f083 0301 	eor.w	r3, r3, #1
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d005      	beq.n	8005b3a <UART_Send+0x22>
        LOG_ERROR("[UART] Send failed: not connected");
 8005b2e:	4917      	ldr	r1, [pc, #92]	@ (8005b8c <UART_Send+0x74>)
 8005b30:	2003      	movs	r0, #3
 8005b32:	f7ff fe8d 	bl	8005850 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e022      	b.n	8005b80 <UART_Send+0x68>
    }

    if (data == NULL) {
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d105      	bne.n	8005b4c <UART_Send+0x34>
        LOG_ERROR("[UART] Send failed: NULL data");
 8005b40:	4913      	ldr	r1, [pc, #76]	@ (8005b90 <UART_Send+0x78>)
 8005b42:	2003      	movs	r0, #3
 8005b44:	f7ff fe84 	bl	8005850 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e019      	b.n	8005b80 <UART_Send+0x68>
    }

    LOG_DEBUG("[UART] Sending data: %s", data);
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	4911      	ldr	r1, [pc, #68]	@ (8005b94 <UART_Send+0x7c>)
 8005b50:	2000      	movs	r0, #0
 8005b52:	f7ff fe7d 	bl	8005850 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Send(data);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f992 	bl	8005e80 <UART_Platform_Send>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 8005b60:	7bfb      	ldrb	r3, [r7, #15]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d105      	bne.n	8005b72 <UART_Send+0x5a>
        LOG_DEBUG("[UART] Send successful: %s", data);
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	490b      	ldr	r1, [pc, #44]	@ (8005b98 <UART_Send+0x80>)
 8005b6a:	2000      	movs	r0, #0
 8005b6c:	f7ff fe70 	bl	8005850 <LOGGER_SendFormatted>
 8005b70:	e005      	b.n	8005b7e <UART_Send+0x66>
    } else {
        LOG_ERROR("[UART] Send failed: %s (status: %d)", data, status);
 8005b72:	7bfb      	ldrb	r3, [r7, #15]
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	4909      	ldr	r1, [pc, #36]	@ (8005b9c <UART_Send+0x84>)
 8005b78:	2003      	movs	r0, #3
 8005b7a:	f7ff fe69 	bl	8005850 <LOGGER_SendFormatted>
    }

    return status;
 8005b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	200024c0 	.word	0x200024c0
 8005b8c:	0801c26c 	.word	0x0801c26c
 8005b90:	0801c290 	.word	0x0801c290
 8005b94:	0801c2b0 	.word	0x0801c2b0
 8005b98:	0801c2c8 	.word	0x0801c2c8
 8005b9c:	0801c2e4 	.word	0x0801c2e4

08005ba0 <UART_Receive>:

UartStatus UART_Receive(char* buffer, int buffer_size, int* bytes_received)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
    if (!uart_connected) {
 8005bac:	4b22      	ldr	r3, [pc, #136]	@ (8005c38 <UART_Receive+0x98>)
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	f083 0301 	eor.w	r3, r3, #1
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d005      	beq.n	8005bc6 <UART_Receive+0x26>
        LOG_ERROR("[UART] Receive failed: not connected");
 8005bba:	4920      	ldr	r1, [pc, #128]	@ (8005c3c <UART_Receive+0x9c>)
 8005bbc:	2003      	movs	r0, #3
 8005bbe:	f7ff fe47 	bl	8005850 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e034      	b.n	8005c30 <UART_Receive+0x90>
    }

    if (buffer == NULL || buffer_size <= 0 || bytes_received == NULL) {
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d005      	beq.n	8005bd8 <UART_Receive+0x38>
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	dd02      	ble.n	8005bd8 <UART_Receive+0x38>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d105      	bne.n	8005be4 <UART_Receive+0x44>
        LOG_ERROR("[UART] Receive failed: invalid parameters");
 8005bd8:	4919      	ldr	r1, [pc, #100]	@ (8005c40 <UART_Receive+0xa0>)
 8005bda:	2003      	movs	r0, #3
 8005bdc:	f7ff fe38 	bl	8005850 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e025      	b.n	8005c30 <UART_Receive+0x90>
    }

    LOG_DEBUG("[UART] Receiving data (buffer_size: %d)", buffer_size);
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	4917      	ldr	r1, [pc, #92]	@ (8005c44 <UART_Receive+0xa4>)
 8005be8:	2000      	movs	r0, #0
 8005bea:	f7ff fe31 	bl	8005850 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Receive(buffer, buffer_size, bytes_received);
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	68b9      	ldr	r1, [r7, #8]
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f000 f980 	bl	8005ef8 <UART_Platform_Receive>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	75fb      	strb	r3, [r7, #23]

    if (status == UART_STATUS_OK) {
 8005bfc:	7dfb      	ldrb	r3, [r7, #23]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d107      	bne.n	8005c12 <UART_Receive+0x72>
        LOG_DEBUG("[UART] Received %d bytes: %s", *bytes_received, buffer);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	490f      	ldr	r1, [pc, #60]	@ (8005c48 <UART_Receive+0xa8>)
 8005c0a:	2000      	movs	r0, #0
 8005c0c:	f7ff fe20 	bl	8005850 <LOGGER_SendFormatted>
 8005c10:	e00d      	b.n	8005c2e <UART_Receive+0x8e>
    } else if (status == UART_STATUS_TIMEOUT) {
 8005c12:	7dfb      	ldrb	r3, [r7, #23]
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d104      	bne.n	8005c22 <UART_Receive+0x82>
        LOG_DEBUG("[UART] Receive timeout");
 8005c18:	490c      	ldr	r1, [pc, #48]	@ (8005c4c <UART_Receive+0xac>)
 8005c1a:	2000      	movs	r0, #0
 8005c1c:	f7ff fe18 	bl	8005850 <LOGGER_SendFormatted>
 8005c20:	e005      	b.n	8005c2e <UART_Receive+0x8e>
    } else {
        LOG_ERROR("[UART] Receive failed (status: %d)", status);
 8005c22:	7dfb      	ldrb	r3, [r7, #23]
 8005c24:	461a      	mov	r2, r3
 8005c26:	490a      	ldr	r1, [pc, #40]	@ (8005c50 <UART_Receive+0xb0>)
 8005c28:	2003      	movs	r0, #3
 8005c2a:	f7ff fe11 	bl	8005850 <LOGGER_SendFormatted>
    }

    return status;
 8005c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3718      	adds	r7, #24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	200024c0 	.word	0x200024c0
 8005c3c:	0801c308 	.word	0x0801c308
 8005c40:	0801c330 	.word	0x0801c330
 8005c44:	0801c35c 	.word	0x0801c35c
 8005c48:	0801c384 	.word	0x0801c384
 8005c4c:	0801c3a4 	.word	0x0801c3a4
 8005c50:	0801c3bc 	.word	0x0801c3bc

08005c54 <flush_rx_buffer>:
// 내부 상태 변수들
static bool uart_initialized = false;
static bool dma_receiving = false;

// 수신 버퍼 플러시 함수
static void flush_rx_buffer(void) {
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
    uint8_t dummy;
    int flush_count = 0;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	607b      	str	r3, [r7, #4]
    
    // 방법 1: 직접 레지스터 체크로 기존 데이터 클리어
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 8005c5e:	e007      	b.n	8005c70 <flush_rx_buffer+0x1c>
        dummy = (uint8_t)(huart6.Instance->RDR & 0xFF);
 8005c60:	4b12      	ldr	r3, [pc, #72]	@ (8005cac <flush_rx_buffer+0x58>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	70fb      	strb	r3, [r7, #3]
        flush_count++;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	607b      	str	r3, [r7, #4]
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 8005c70:	4b0e      	ldr	r3, [pc, #56]	@ (8005cac <flush_rx_buffer+0x58>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	69db      	ldr	r3, [r3, #28]
 8005c76:	f003 0320 	and.w	r3, r3, #32
 8005c7a:	2b20      	cmp	r3, #32
 8005c7c:	d106      	bne.n	8005c8c <flush_rx_buffer+0x38>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b63      	cmp	r3, #99	@ 0x63
 8005c82:	dded      	ble.n	8005c60 <flush_rx_buffer+0xc>
    }
    
    // 방법 2: HAL로 남은 데이터 클리어 (타임아웃 1ms)
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 8005c84:	e002      	b.n	8005c8c <flush_rx_buffer+0x38>
        flush_count++;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	607b      	str	r3, [r7, #4]
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 8005c8c:	1cf9      	adds	r1, r7, #3
 8005c8e:	2301      	movs	r3, #1
 8005c90:	2201      	movs	r2, #1
 8005c92:	4806      	ldr	r0, [pc, #24]	@ (8005cac <flush_rx_buffer+0x58>)
 8005c94:	f009 fbad 	bl	800f3f2 <HAL_UART_Receive>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d102      	bne.n	8005ca4 <flush_rx_buffer+0x50>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b63      	cmp	r3, #99	@ 0x63
 8005ca2:	ddf0      	ble.n	8005c86 <flush_rx_buffer+0x32>
    }
}
 8005ca4:	bf00      	nop
 8005ca6:	3708      	adds	r7, #8
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	20002114 	.word	0x20002114

08005cb0 <UART_Platform_Connect>:

UartStatus UART_Platform_Connect(const char* port) {
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
    // STM32에서는 이미 HAL_UART_Init()이 실행됨
    uart_initialized = true;
 8005cb8:	4b5b      	ldr	r3, [pc, #364]	@ (8005e28 <UART_Platform_Connect+0x178>)
 8005cba:	2201      	movs	r2, #1
 8005cbc:	701a      	strb	r2, [r3, #0]
    
    // UART 상태 체크 및 리셋
    LOG_INFO("[UART_STM32] UART gState: %d, RxState: %d", 
 8005cbe:	4b5b      	ldr	r3, [pc, #364]	@ (8005e2c <UART_Platform_Connect+0x17c>)
 8005cc0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005cc2:	4b5a      	ldr	r3, [pc, #360]	@ (8005e2c <UART_Platform_Connect+0x17c>)
 8005cc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cc8:	4959      	ldr	r1, [pc, #356]	@ (8005e30 <UART_Platform_Connect+0x180>)
 8005cca:	2001      	movs	r0, #1
 8005ccc:	f7ff fdc0 	bl	8005850 <LOGGER_SendFormatted>
             huart6.gState, huart6.RxState);
    
    // DMA 핸들 연결 상태 확인
    if (huart6.hdmarx != NULL) {
 8005cd0:	4b56      	ldr	r3, [pc, #344]	@ (8005e2c <UART_Platform_Connect+0x17c>)
 8005cd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00e      	beq.n	8005cf6 <UART_Platform_Connect+0x46>
        LOG_INFO("[UART_STM32] DMA RX handle is connected");
 8005cd8:	4956      	ldr	r1, [pc, #344]	@ (8005e34 <UART_Platform_Connect+0x184>)
 8005cda:	2001      	movs	r0, #1
 8005cdc:	f7ff fdb8 	bl	8005850 <LOGGER_SendFormatted>
        LOG_INFO("[UART_STM32] DMA State: %d", huart6.hdmarx->State);
 8005ce0:	4b52      	ldr	r3, [pc, #328]	@ (8005e2c <UART_Platform_Connect+0x17c>)
 8005ce2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ce4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	461a      	mov	r2, r3
 8005cec:	4952      	ldr	r1, [pc, #328]	@ (8005e38 <UART_Platform_Connect+0x188>)
 8005cee:	2001      	movs	r0, #1
 8005cf0:	f7ff fdae 	bl	8005850 <LOGGER_SendFormatted>
 8005cf4:	e018      	b.n	8005d28 <UART_Platform_Connect+0x78>
    } else {
        LOG_ERROR("[UART_STM32] DMA RX handle is NULL - DMA not initialized!");
 8005cf6:	4951      	ldr	r1, [pc, #324]	@ (8005e3c <UART_Platform_Connect+0x18c>)
 8005cf8:	2003      	movs	r0, #3
 8005cfa:	f7ff fda9 	bl	8005850 <LOGGER_SendFormatted>
        
        // DMA 핸들 강제 연결 시도
        extern DMA_HandleTypeDef hdma_usart6_rx;
        __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8005cfe:	4b4b      	ldr	r3, [pc, #300]	@ (8005e2c <UART_Platform_Connect+0x17c>)
 8005d00:	4a4f      	ldr	r2, [pc, #316]	@ (8005e40 <UART_Platform_Connect+0x190>)
 8005d02:	675a      	str	r2, [r3, #116]	@ 0x74
 8005d04:	4b4e      	ldr	r3, [pc, #312]	@ (8005e40 <UART_Platform_Connect+0x190>)
 8005d06:	4a49      	ldr	r2, [pc, #292]	@ (8005e2c <UART_Platform_Connect+0x17c>)
 8005d08:	639a      	str	r2, [r3, #56]	@ 0x38
        
        if (huart6.hdmarx != NULL) {
 8005d0a:	4b48      	ldr	r3, [pc, #288]	@ (8005e2c <UART_Platform_Connect+0x17c>)
 8005d0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d004      	beq.n	8005d1c <UART_Platform_Connect+0x6c>
            LOG_INFO("[UART_STM32] DMA RX handle manually linked");
 8005d12:	494c      	ldr	r1, [pc, #304]	@ (8005e44 <UART_Platform_Connect+0x194>)
 8005d14:	2001      	movs	r0, #1
 8005d16:	f7ff fd9b 	bl	8005850 <LOGGER_SendFormatted>
 8005d1a:	e005      	b.n	8005d28 <UART_Platform_Connect+0x78>
        } else {
            LOG_ERROR("[UART_STM32] Failed to link DMA RX handle");
 8005d1c:	494a      	ldr	r1, [pc, #296]	@ (8005e48 <UART_Platform_Connect+0x198>)
 8005d1e:	2003      	movs	r0, #3
 8005d20:	f7ff fd96 	bl	8005850 <LOGGER_SendFormatted>
            return UART_STATUS_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e07a      	b.n	8005e1e <UART_Platform_Connect+0x16e>
        }
    }
    
    // 이전에 시작된 DMA 작업이 있으면 중지
    if (dma_receiving) {
 8005d28:	4b48      	ldr	r3, [pc, #288]	@ (8005e4c <UART_Platform_Connect+0x19c>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d009      	beq.n	8005d44 <UART_Platform_Connect+0x94>
        HAL_UART_DMAStop(&huart6);
 8005d30:	483e      	ldr	r0, [pc, #248]	@ (8005e2c <UART_Platform_Connect+0x17c>)
 8005d32:	f009 fc6a 	bl	800f60a <HAL_UART_DMAStop>
        dma_receiving = false;
 8005d36:	4b45      	ldr	r3, [pc, #276]	@ (8005e4c <UART_Platform_Connect+0x19c>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] Previous DMA reception stopped");
 8005d3c:	4944      	ldr	r1, [pc, #272]	@ (8005e50 <UART_Platform_Connect+0x1a0>)
 8005d3e:	2001      	movs	r0, #1
 8005d40:	f7ff fd86 	bl	8005850 <LOGGER_SendFormatted>
    }
    
    // UART 상태를 READY로 강제 설정
    huart6.gState = HAL_UART_STATE_READY;
 8005d44:	4b39      	ldr	r3, [pc, #228]	@ (8005e2c <UART_Platform_Connect+0x17c>)
 8005d46:	2220      	movs	r2, #32
 8005d48:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart6.RxState = HAL_UART_STATE_READY;
 8005d4a:	4b38      	ldr	r3, [pc, #224]	@ (8005e2c <UART_Platform_Connect+0x17c>)
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    
    // DMA 상태도 READY로 설정
    if (huart6.hdmarx != NULL) {
 8005d52:	4b36      	ldr	r3, [pc, #216]	@ (8005e2c <UART_Platform_Connect+0x17c>)
 8005d54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d026      	beq.n	8005da8 <UART_Platform_Connect+0xf8>
        // DMA 재초기화 (기존 상태 문제 해결)
        if (huart6.hdmarx->State != HAL_DMA_STATE_READY) {
 8005d5a:	4b34      	ldr	r3, [pc, #208]	@ (8005e2c <UART_Platform_Connect+0x17c>)
 8005d5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d5e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d01a      	beq.n	8005d9e <UART_Platform_Connect+0xee>
            LOG_INFO("[UART_STM32] DMA not ready, reinitializing...");
 8005d68:	493a      	ldr	r1, [pc, #232]	@ (8005e54 <UART_Platform_Connect+0x1a4>)
 8005d6a:	2001      	movs	r0, #1
 8005d6c:	f7ff fd70 	bl	8005850 <LOGGER_SendFormatted>
            HAL_DMA_DeInit(huart6.hdmarx);
 8005d70:	4b2e      	ldr	r3, [pc, #184]	@ (8005e2c <UART_Platform_Connect+0x17c>)
 8005d72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d74:	4618      	mov	r0, r3
 8005d76:	f001 f943 	bl	8007000 <HAL_DMA_DeInit>
            if (HAL_DMA_Init(huart6.hdmarx) != HAL_OK) {
 8005d7a:	4b2c      	ldr	r3, [pc, #176]	@ (8005e2c <UART_Platform_Connect+0x17c>)
 8005d7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f001 f890 	bl	8006ea4 <HAL_DMA_Init>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d005      	beq.n	8005d96 <UART_Platform_Connect+0xe6>
                LOG_ERROR("[UART_STM32] DMA reinitialization failed");
 8005d8a:	4933      	ldr	r1, [pc, #204]	@ (8005e58 <UART_Platform_Connect+0x1a8>)
 8005d8c:	2003      	movs	r0, #3
 8005d8e:	f7ff fd5f 	bl	8005850 <LOGGER_SendFormatted>
                return UART_STATUS_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e043      	b.n	8005e1e <UART_Platform_Connect+0x16e>
            }
            LOG_INFO("[UART_STM32] DMA reinitialized successfully");
 8005d96:	4931      	ldr	r1, [pc, #196]	@ (8005e5c <UART_Platform_Connect+0x1ac>)
 8005d98:	2001      	movs	r0, #1
 8005d9a:	f7ff fd59 	bl	8005850 <LOGGER_SendFormatted>
        }
        huart6.hdmarx->State = HAL_DMA_STATE_READY;
 8005d9e:	4b23      	ldr	r3, [pc, #140]	@ (8005e2c <UART_Platform_Connect+0x17c>)
 8005da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 초기 버퍼 플러시
    flush_rx_buffer();
 8005da8:	f7ff ff54 	bl	8005c54 <flush_rx_buffer>
    
    // DMA 기반 연속 수신 시작
    uart_rx_complete_flag = 0;
 8005dac:	4b2c      	ldr	r3, [pc, #176]	@ (8005e60 <UART_Platform_Connect+0x1b0>)
 8005dae:	2200      	movs	r2, #0
 8005db0:	701a      	strb	r2, [r3, #0]
    uart_rx_error_flag = 0;
 8005db2:	4b2c      	ldr	r3, [pc, #176]	@ (8005e64 <UART_Platform_Connect+0x1b4>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	701a      	strb	r2, [r3, #0]
    uart_rx_length = 0;
 8005db8:	4b2b      	ldr	r3, [pc, #172]	@ (8005e68 <UART_Platform_Connect+0x1b8>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	801a      	strh	r2, [r3, #0]
    
    // DMA 수신 버퍼 클리어
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8005dbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	4829      	ldr	r0, [pc, #164]	@ (8005e6c <UART_Platform_Connect+0x1bc>)
 8005dc6:	f011 ff5d 	bl	8017c84 <memset>
    
    LOG_INFO("[UART_STM32] Starting DMA reception...");
 8005dca:	4929      	ldr	r1, [pc, #164]	@ (8005e70 <UART_Platform_Connect+0x1c0>)
 8005dcc:	2001      	movs	r0, #1
 8005dce:	f7ff fd3f 	bl	8005850 <LOGGER_SendFormatted>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(&huart6, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8005dd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dd6:	4925      	ldr	r1, [pc, #148]	@ (8005e6c <UART_Platform_Connect+0x1bc>)
 8005dd8:	4814      	ldr	r0, [pc, #80]	@ (8005e2c <UART_Platform_Connect+0x17c>)
 8005dda:	f009 fbd2 	bl	800f582 <HAL_UART_Receive_DMA>
 8005dde:	4603      	mov	r3, r0
 8005de0:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8005de2:	7bfb      	ldrb	r3, [r7, #15]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10a      	bne.n	8005dfe <UART_Platform_Connect+0x14e>
        dma_receiving = true;
 8005de8:	4b18      	ldr	r3, [pc, #96]	@ (8005e4c <UART_Platform_Connect+0x19c>)
 8005dea:	2201      	movs	r2, #1
 8005dec:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] ✓ DMA continuous reception started (buffer size: %d)", sizeof(rx_buffer));
 8005dee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005df2:	4920      	ldr	r1, [pc, #128]	@ (8005e74 <UART_Platform_Connect+0x1c4>)
 8005df4:	2001      	movs	r0, #1
 8005df6:	f7ff fd2b 	bl	8005850 <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
                  huart6.gState, huart6.RxState);
        return UART_STATUS_ERROR;
    }
    
    return UART_STATUS_OK;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	e00f      	b.n	8005e1e <UART_Platform_Connect+0x16e>
        LOG_ERROR("[UART_STM32] ✗ Failed to start DMA reception (status: %d)", status);
 8005dfe:	7bfb      	ldrb	r3, [r7, #15]
 8005e00:	461a      	mov	r2, r3
 8005e02:	491d      	ldr	r1, [pc, #116]	@ (8005e78 <UART_Platform_Connect+0x1c8>)
 8005e04:	2003      	movs	r0, #3
 8005e06:	f7ff fd23 	bl	8005850 <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
 8005e0a:	4b08      	ldr	r3, [pc, #32]	@ (8005e2c <UART_Platform_Connect+0x17c>)
 8005e0c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005e0e:	4b07      	ldr	r3, [pc, #28]	@ (8005e2c <UART_Platform_Connect+0x17c>)
 8005e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e14:	4919      	ldr	r1, [pc, #100]	@ (8005e7c <UART_Platform_Connect+0x1cc>)
 8005e16:	2003      	movs	r0, #3
 8005e18:	f7ff fd1a 	bl	8005850 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005e1c:	2301      	movs	r3, #1
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	200026c8 	.word	0x200026c8
 8005e2c:	20002114 	.word	0x20002114
 8005e30:	0801c5b8 	.word	0x0801c5b8
 8005e34:	0801c5e4 	.word	0x0801c5e4
 8005e38:	0801c60c 	.word	0x0801c60c
 8005e3c:	0801c628 	.word	0x0801c628
 8005e40:	200023ec 	.word	0x200023ec
 8005e44:	0801c664 	.word	0x0801c664
 8005e48:	0801c690 	.word	0x0801c690
 8005e4c:	200026c9 	.word	0x200026c9
 8005e50:	0801c6bc 	.word	0x0801c6bc
 8005e54:	0801c6e8 	.word	0x0801c6e8
 8005e58:	0801c718 	.word	0x0801c718
 8005e5c:	0801c744 	.word	0x0801c744
 8005e60:	200024c1 	.word	0x200024c1
 8005e64:	200024c2 	.word	0x200024c2
 8005e68:	200024c4 	.word	0x200024c4
 8005e6c:	200024c8 	.word	0x200024c8
 8005e70:	0801c770 	.word	0x0801c770
 8005e74:	0801c798 	.word	0x0801c798
 8005e78:	0801c7dc 	.word	0x0801c7dc
 8005e7c:	0801c818 	.word	0x0801c818

08005e80 <UART_Platform_Send>:
    uart_initialized = false;
    
    return UART_STATUS_OK;
}

UartStatus UART_Platform_Send(const char* data) {
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
    if (data == NULL || !uart_initialized) return UART_STATUS_ERROR;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d006      	beq.n	8005e9c <UART_Platform_Send+0x1c>
 8005e8e:	4b17      	ldr	r3, [pc, #92]	@ (8005eec <UART_Platform_Send+0x6c>)
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	f083 0301 	eor.w	r3, r3, #1
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d001      	beq.n	8005ea0 <UART_Platform_Send+0x20>
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e021      	b.n	8005ee4 <UART_Platform_Send+0x64>
    
    int len = strlen(data);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f7fa f9bf 	bl	8000224 <strlen>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	60fb      	str	r3, [r7, #12]
    if (len == 0) return UART_STATUS_OK;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d101      	bne.n	8005eb4 <UART_Platform_Send+0x34>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	e017      	b.n	8005ee4 <UART_Platform_Send+0x64>
    
    // 송신 전 수신 버퍼 플러시 (깨끗한 상태에서 시작)
    flush_rx_buffer();
 8005eb4:	f7ff fece 	bl	8005c54 <flush_rx_buffer>
    
    // 단순한 송신
    HAL_StatusTypeDef tx_status = HAL_UART_Transmit(&huart6, (uint8_t*)data, len, 1000);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005ec0:	6879      	ldr	r1, [r7, #4]
 8005ec2:	480b      	ldr	r0, [pc, #44]	@ (8005ef0 <UART_Platform_Send+0x70>)
 8005ec4:	f009 fa0c 	bl	800f2e0 <HAL_UART_Transmit>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	72fb      	strb	r3, [r7, #11]
    
    if (tx_status == HAL_OK) {
 8005ecc:	7afb      	ldrb	r3, [r7, #11]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d101      	bne.n	8005ed6 <UART_Platform_Send+0x56>
        return UART_STATUS_OK;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	e006      	b.n	8005ee4 <UART_Platform_Send+0x64>
    } else {
        LOG_ERROR("[UART_STM32] ✗ Transmission failed (HAL status: %d)", tx_status);
 8005ed6:	7afb      	ldrb	r3, [r7, #11]
 8005ed8:	461a      	mov	r2, r3
 8005eda:	4906      	ldr	r1, [pc, #24]	@ (8005ef4 <UART_Platform_Send+0x74>)
 8005edc:	2003      	movs	r0, #3
 8005ede:	f7ff fcb7 	bl	8005850 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005ee2:	2301      	movs	r3, #1
    }
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	200026c8 	.word	0x200026c8
 8005ef0:	20002114 	.word	0x20002114
 8005ef4:	0801c878 	.word	0x0801c878

08005ef8 <UART_Platform_Receive>:

UartStatus UART_Platform_Receive(char* buffer, int buffer_size, int* bytes_received) {
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b08a      	sub	sp, #40	@ 0x28
 8005efc:	af02      	add	r7, sp, #8
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
    if (buffer == NULL || bytes_received == NULL || !uart_initialized) {
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d009      	beq.n	8005f1e <UART_Platform_Receive+0x26>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d006      	beq.n	8005f1e <UART_Platform_Receive+0x26>
 8005f10:	4b74      	ldr	r3, [pc, #464]	@ (80060e4 <UART_Platform_Receive+0x1ec>)
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	f083 0301 	eor.w	r3, r3, #1
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <UART_Platform_Receive+0x2a>
        return UART_STATUS_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e0dc      	b.n	80060dc <UART_Platform_Receive+0x1e4>
    }
    
    if (buffer_size <= 0) {
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	dc04      	bgt.n	8005f32 <UART_Platform_Receive+0x3a>
        *bytes_received = 0;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	601a      	str	r2, [r3, #0]
        return UART_STATUS_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e0d4      	b.n	80060dc <UART_Platform_Receive+0x1e4>
    }
    
    *bytes_received = 0;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	601a      	str	r2, [r3, #0]
    
    // DMA 수신이 시작되지 않았으면 에러
    if (!dma_receiving) {
 8005f38:	4b6b      	ldr	r3, [pc, #428]	@ (80060e8 <UART_Platform_Receive+0x1f0>)
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	f083 0301 	eor.w	r3, r3, #1
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <UART_Platform_Receive+0x52>
        return UART_STATUS_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e0c8      	b.n	80060dc <UART_Platform_Receive+0x1e4>
    }
    
    // 에러 체크
    if (uart_rx_error_flag) {
 8005f4a:	4b68      	ldr	r3, [pc, #416]	@ (80060ec <UART_Platform_Receive+0x1f4>)
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d008      	beq.n	8005f66 <UART_Platform_Receive+0x6e>
        uart_rx_error_flag = 0;  // 플래그 클리어
 8005f54:	4b65      	ldr	r3, [pc, #404]	@ (80060ec <UART_Platform_Receive+0x1f4>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	701a      	strb	r2, [r3, #0]
        LOG_WARN("[UART_STM32] ⚠ DMA reception error occurred");
 8005f5a:	4965      	ldr	r1, [pc, #404]	@ (80060f0 <UART_Platform_Receive+0x1f8>)
 8005f5c:	2002      	movs	r0, #2
 8005f5e:	f7ff fc77 	bl	8005850 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e0ba      	b.n	80060dc <UART_Platform_Receive+0x1e4>
    }
    
    // DMA 수신 완료 체크
    if (uart_rx_complete_flag) {
 8005f66:	4b63      	ldr	r3, [pc, #396]	@ (80060f4 <UART_Platform_Receive+0x1fc>)
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 80b4 	beq.w	80060da <UART_Platform_Receive+0x1e2>
        uart_rx_complete_flag = 0;  // 플래그 클리어
 8005f72:	4b60      	ldr	r3, [pc, #384]	@ (80060f4 <UART_Platform_Receive+0x1fc>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	701a      	strb	r2, [r3, #0]
        
        // 실제 수신된 바이트 수 확인
        uint16_t received_length = uart_rx_length;
 8005f78:	4b5f      	ldr	r3, [pc, #380]	@ (80060f8 <UART_Platform_Receive+0x200>)
 8005f7a:	881b      	ldrh	r3, [r3, #0]
 8005f7c:	837b      	strh	r3, [r7, #26]
        LOG_DEBUG("[UART_STM32] DMA received %d bytes", received_length);
 8005f7e:	8b7b      	ldrh	r3, [r7, #26]
 8005f80:	461a      	mov	r2, r3
 8005f82:	495e      	ldr	r1, [pc, #376]	@ (80060fc <UART_Platform_Receive+0x204>)
 8005f84:	2000      	movs	r0, #0
 8005f86:	f7ff fc63 	bl	8005850 <LOGGER_SendFormatted>
        
        if (received_length > 0 && received_length <= buffer_size - 1) {
 8005f8a:	8b7b      	ldrh	r3, [r7, #26]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f000 809e 	beq.w	80060ce <UART_Platform_Receive+0x1d6>
 8005f92:	8b7b      	ldrh	r3, [r7, #26]
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	f340 8099 	ble.w	80060ce <UART_Platform_Receive+0x1d6>
            // 데이터 복사
            memcpy(buffer, rx_buffer, received_length);
 8005f9c:	8b7b      	ldrh	r3, [r7, #26]
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	4957      	ldr	r1, [pc, #348]	@ (8006100 <UART_Platform_Receive+0x208>)
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f011 ff2f 	bl	8017e06 <memcpy>
            buffer[received_length] = '\0';  // null terminate
 8005fa8:	8b7b      	ldrh	r3, [r7, #26]
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	4413      	add	r3, r2
 8005fae:	2200      	movs	r2, #0
 8005fb0:	701a      	strb	r2, [r3, #0]
            *bytes_received = received_length;
 8005fb2:	8b7a      	ldrh	r2, [r7, #26]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	601a      	str	r2, [r3, #0]
            
            // 수신된 데이터 로그 (간단하게)
            LOG_DEBUG("[UART_STM32] Received data (%d bytes): '%s'", received_length, buffer);
 8005fb8:	8b7a      	ldrh	r2, [r7, #26]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	4951      	ldr	r1, [pc, #324]	@ (8006104 <UART_Platform_Receive+0x20c>)
 8005fbe:	2000      	movs	r0, #0
 8005fc0:	f7ff fc46 	bl	8005850 <LOGGER_SendFormatted>
            
            // 새로운 수신을 위해 DMA 완전 리셋 후 재시작
            memset(rx_buffer, 0, sizeof(rx_buffer));
 8005fc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fc8:	2100      	movs	r1, #0
 8005fca:	484d      	ldr	r0, [pc, #308]	@ (8006100 <UART_Platform_Receive+0x208>)
 8005fcc:	f011 fe5a 	bl	8017c84 <memset>
            
            // 1. DMA 완전 정지
            HAL_UART_DMAStop(&huart6);
 8005fd0:	484d      	ldr	r0, [pc, #308]	@ (8006108 <UART_Platform_Receive+0x210>)
 8005fd2:	f009 fb1a 	bl	800f60a <HAL_UART_DMAStop>
            
            // 2. 모든 UART 에러 플래그 클리어
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_PEF);
 8005fd6:	4b4c      	ldr	r3, [pc, #304]	@ (8006108 <UART_Platform_Receive+0x210>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_FEF);
 8005fde:	4b4a      	ldr	r3, [pc, #296]	@ (8006108 <UART_Platform_Receive+0x210>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_NEF);
 8005fe6:	4b48      	ldr	r3, [pc, #288]	@ (8006108 <UART_Platform_Receive+0x210>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2204      	movs	r2, #4
 8005fec:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_OREF);
 8005fee:	4b46      	ldr	r3, [pc, #280]	@ (8006108 <UART_Platform_Receive+0x210>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2208      	movs	r2, #8
 8005ff4:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_IDLEF);
 8005ff6:	4b44      	ldr	r3, [pc, #272]	@ (8006108 <UART_Platform_Receive+0x210>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2210      	movs	r2, #16
 8005ffc:	621a      	str	r2, [r3, #32]
            
            // 3. DMA 스트림이 완전히 정지될 때까지 대기
            if (huart6.hdmarx != NULL) {
 8005ffe:	4b42      	ldr	r3, [pc, #264]	@ (8006108 <UART_Platform_Receive+0x210>)
 8006000:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006002:	2b00      	cmp	r3, #0
 8006004:	d025      	beq.n	8006052 <UART_Platform_Receive+0x15a>
                int timeout = 1000;
 8006006:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800600a:	61fb      	str	r3, [r7, #28]
                while (huart6.hdmarx->State != HAL_DMA_STATE_READY && timeout > 0) {
 800600c:	e00b      	b.n	8006026 <UART_Platform_Receive+0x12e>
                    timeout--;
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	3b01      	subs	r3, #1
 8006012:	61fb      	str	r3, [r7, #28]
                    for(volatile int i = 0; i < 100; i++); // 짧은 지연
 8006014:	2300      	movs	r3, #0
 8006016:	617b      	str	r3, [r7, #20]
 8006018:	e002      	b.n	8006020 <UART_Platform_Receive+0x128>
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	3301      	adds	r3, #1
 800601e:	617b      	str	r3, [r7, #20]
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	2b63      	cmp	r3, #99	@ 0x63
 8006024:	ddf9      	ble.n	800601a <UART_Platform_Receive+0x122>
                while (huart6.hdmarx->State != HAL_DMA_STATE_READY && timeout > 0) {
 8006026:	4b38      	ldr	r3, [pc, #224]	@ (8006108 <UART_Platform_Receive+0x210>)
 8006028:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800602a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800602e:	b2db      	uxtb	r3, r3
 8006030:	2b01      	cmp	r3, #1
 8006032:	d002      	beq.n	800603a <UART_Platform_Receive+0x142>
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	2b00      	cmp	r3, #0
 8006038:	dce9      	bgt.n	800600e <UART_Platform_Receive+0x116>
                }
                
                if (timeout == 0) {
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d108      	bne.n	8006052 <UART_Platform_Receive+0x15a>
                    LOG_WARN("[UART_STM32] DMA did not reach READY state, forcing reset");
 8006040:	4932      	ldr	r1, [pc, #200]	@ (800610c <UART_Platform_Receive+0x214>)
 8006042:	2002      	movs	r0, #2
 8006044:	f7ff fc04 	bl	8005850 <LOGGER_SendFormatted>
                    huart6.hdmarx->State = HAL_DMA_STATE_READY;
 8006048:	4b2f      	ldr	r3, [pc, #188]	@ (8006108 <UART_Platform_Receive+0x210>)
 800604a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800604c:	2201      	movs	r2, #1
 800604e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                }
            }
            
            // 4. UART 상태 리셋 (DMA 완전 정지 후)
            huart6.RxState = HAL_UART_STATE_READY;
 8006052:	4b2d      	ldr	r3, [pc, #180]	@ (8006108 <UART_Platform_Receive+0x210>)
 8006054:	2220      	movs	r2, #32
 8006056:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
            huart6.gState = HAL_UART_STATE_READY;
 800605a:	4b2b      	ldr	r3, [pc, #172]	@ (8006108 <UART_Platform_Receive+0x210>)
 800605c:	2220      	movs	r2, #32
 800605e:	67da      	str	r2, [r3, #124]	@ 0x7c
            
            // 5. 충분한 지연 후 재시작
            for(volatile int i = 0; i < 10000; i++); // 더 긴 지연
 8006060:	2300      	movs	r3, #0
 8006062:	613b      	str	r3, [r7, #16]
 8006064:	e002      	b.n	800606c <UART_Platform_Receive+0x174>
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	3301      	adds	r3, #1
 800606a:	613b      	str	r3, [r7, #16]
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8006072:	4293      	cmp	r3, r2
 8006074:	ddf7      	ble.n	8006066 <UART_Platform_Receive+0x16e>
            
            // 6. DMA 재시작
            HAL_StatusTypeDef restart_status = HAL_UART_Receive_DMA(&huart6, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8006076:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800607a:	4921      	ldr	r1, [pc, #132]	@ (8006100 <UART_Platform_Receive+0x208>)
 800607c:	4822      	ldr	r0, [pc, #136]	@ (8006108 <UART_Platform_Receive+0x210>)
 800607e:	f009 fa80 	bl	800f582 <HAL_UART_Receive_DMA>
 8006082:	4603      	mov	r3, r0
 8006084:	767b      	strb	r3, [r7, #25]
            if (restart_status == HAL_OK) {
 8006086:	7e7b      	ldrb	r3, [r7, #25]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d104      	bne.n	8006096 <UART_Platform_Receive+0x19e>
                LOG_DEBUG("[UART_STM32] DMA restarted for next reception");
 800608c:	4920      	ldr	r1, [pc, #128]	@ (8006110 <UART_Platform_Receive+0x218>)
 800608e:	2000      	movs	r0, #0
 8006090:	f7ff fbde 	bl	8005850 <LOGGER_SendFormatted>
 8006094:	e019      	b.n	80060ca <UART_Platform_Receive+0x1d2>
            } else {
                LOG_WARN("[UART_STM32] DMA restart failed (status: %d), UART state: g=%d rx=%d", 
 8006096:	7e7a      	ldrb	r2, [r7, #25]
 8006098:	4b1b      	ldr	r3, [pc, #108]	@ (8006108 <UART_Platform_Receive+0x210>)
 800609a:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 800609c:	4b1a      	ldr	r3, [pc, #104]	@ (8006108 <UART_Platform_Receive+0x210>)
 800609e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	460b      	mov	r3, r1
 80060a6:	491b      	ldr	r1, [pc, #108]	@ (8006114 <UART_Platform_Receive+0x21c>)
 80060a8:	2002      	movs	r0, #2
 80060aa:	f7ff fbd1 	bl	8005850 <LOGGER_SendFormatted>
                        restart_status, huart6.gState, huart6.RxState);
                if (huart6.hdmarx != NULL) {
 80060ae:	4b16      	ldr	r3, [pc, #88]	@ (8006108 <UART_Platform_Receive+0x210>)
 80060b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d009      	beq.n	80060ca <UART_Platform_Receive+0x1d2>
                    LOG_WARN("[UART_STM32] DMA state: %d", huart6.hdmarx->State);
 80060b6:	4b14      	ldr	r3, [pc, #80]	@ (8006108 <UART_Platform_Receive+0x210>)
 80060b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	461a      	mov	r2, r3
 80060c2:	4915      	ldr	r1, [pc, #84]	@ (8006118 <UART_Platform_Receive+0x220>)
 80060c4:	2002      	movs	r0, #2
 80060c6:	f7ff fbc3 	bl	8005850 <LOGGER_SendFormatted>
                }
            }
            
            return UART_STATUS_OK;
 80060ca:	2300      	movs	r3, #0
 80060cc:	e006      	b.n	80060dc <UART_Platform_Receive+0x1e4>
        } else {
            LOG_WARN("[UART_STM32] Invalid received length: %d (buffer size: %d)", received_length, buffer_size);
 80060ce:	8b7a      	ldrh	r2, [r7, #26]
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	4912      	ldr	r1, [pc, #72]	@ (800611c <UART_Platform_Receive+0x224>)
 80060d4:	2002      	movs	r0, #2
 80060d6:	f7ff fbbb 	bl	8005850 <LOGGER_SendFormatted>
        }
    }
    
    // 수신된 데이터 없음
    return UART_STATUS_TIMEOUT;
 80060da:	2302      	movs	r3, #2
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3720      	adds	r7, #32
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	200026c8 	.word	0x200026c8
 80060e8:	200026c9 	.word	0x200026c9
 80060ec:	200024c2 	.word	0x200024c2
 80060f0:	0801c8b0 	.word	0x0801c8b0
 80060f4:	200024c1 	.word	0x200024c1
 80060f8:	200024c4 	.word	0x200024c4
 80060fc:	0801c8e0 	.word	0x0801c8e0
 8006100:	200024c8 	.word	0x200024c8
 8006104:	0801c904 	.word	0x0801c904
 8006108:	20002114 	.word	0x20002114
 800610c:	0801c930 	.word	0x0801c930
 8006110:	0801c96c 	.word	0x0801c96c
 8006114:	0801c99c 	.word	0x0801c99c
 8006118:	0801c9e4 	.word	0x0801c9e4
 800611c:	0801ca00 	.word	0x0801ca00

08006120 <HAL_UART_RxCpltCallback>:
// ============================================================================
// HAL UART 콜백 함수들 - main.c에서 이동됨
// ============================================================================

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a0a      	ldr	r2, [pc, #40]	@ (8006158 <HAL_UART_RxCpltCallback+0x38>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d10e      	bne.n	8006150 <HAL_UART_RxCpltCallback+0x30>
  {
    // DMA 수신 완료 (전체 버퍼) - 거의 발생하지 않음
    uart_rx_complete_flag = 1;
 8006132:	4b0a      	ldr	r3, [pc, #40]	@ (800615c <HAL_UART_RxCpltCallback+0x3c>)
 8006134:	2201      	movs	r2, #1
 8006136:	701a      	strb	r2, [r3, #0]
    uart_rx_length = sizeof(rx_buffer);
 8006138:	4b09      	ldr	r3, [pc, #36]	@ (8006160 <HAL_UART_RxCpltCallback+0x40>)
 800613a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800613e:	801a      	strh	r2, [r3, #0]
    LOG_DEBUG("[DMA] RxCpltCallback: Full buffer received (%d bytes)", uart_rx_length);
 8006140:	4b07      	ldr	r3, [pc, #28]	@ (8006160 <HAL_UART_RxCpltCallback+0x40>)
 8006142:	881b      	ldrh	r3, [r3, #0]
 8006144:	b29b      	uxth	r3, r3
 8006146:	461a      	mov	r2, r3
 8006148:	4906      	ldr	r1, [pc, #24]	@ (8006164 <HAL_UART_RxCpltCallback+0x44>)
 800614a:	2000      	movs	r0, #0
 800614c:	f7ff fb80 	bl	8005850 <LOGGER_SendFormatted>
  }
}
 8006150:	bf00      	nop
 8006152:	3708      	adds	r7, #8
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	40011400 	.word	0x40011400
 800615c:	200024c1 	.word	0x200024c1
 8006160:	200024c4 	.word	0x200024c4
 8006164:	0801ca3c 	.word	0x0801ca3c

08006168 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a05      	ldr	r2, [pc, #20]	@ (800618c <HAL_UART_RxHalfCpltCallback+0x24>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d103      	bne.n	8006182 <HAL_UART_RxHalfCpltCallback+0x1a>
  {
    // DMA 수신 절반 완료 - NORMAL 모드에서는 처리하지 않음 (IDLE 인터럽트가 처리)
    LOG_WARN("[DMA] RxHalfCpltCallback: Half buffer reached but ignoring in NORMAL mode");
 800617a:	4905      	ldr	r1, [pc, #20]	@ (8006190 <HAL_UART_RxHalfCpltCallback+0x28>)
 800617c:	2002      	movs	r0, #2
 800617e:	f7ff fb67 	bl	8005850 <LOGGER_SendFormatted>
    // uart_rx_complete_flag는 설정하지 않음 - IDLE 인터럽트에서만 설정
  }
}
 8006182:	bf00      	nop
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	40011400 	.word	0x40011400
 8006190:	0801ca74 	.word	0x0801ca74

08006194 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a3c      	ldr	r2, [pc, #240]	@ (8006294 <HAL_UART_ErrorCallback+0x100>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d171      	bne.n	800628a <HAL_UART_ErrorCallback+0xf6>
  {
    // UART 에러 발생
    uart_rx_error_flag = 1;
 80061a6:	4b3c      	ldr	r3, [pc, #240]	@ (8006298 <HAL_UART_ErrorCallback+0x104>)
 80061a8:	2201      	movs	r2, #1
 80061aa:	701a      	strb	r2, [r3, #0]
    LOG_WARN("[DMA] ErrorCallback: UART error occurred");
 80061ac:	493b      	ldr	r1, [pc, #236]	@ (800629c <HAL_UART_ErrorCallback+0x108>)
 80061ae:	2002      	movs	r0, #2
 80061b0:	f7ff fb4e 	bl	8005850 <LOGGER_SendFormatted>
    
    // 모든 에러 플래그 클리어
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) {
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	f003 0308 	and.w	r3, r3, #8
 80061be:	2b08      	cmp	r3, #8
 80061c0:	d107      	bne.n	80061d2 <HAL_UART_ErrorCallback+0x3e>
      __HAL_UART_CLEAR_OREFLAG(huart);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2208      	movs	r2, #8
 80061c8:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Overrun error cleared");
 80061ca:	4935      	ldr	r1, [pc, #212]	@ (80062a0 <HAL_UART_ErrorCallback+0x10c>)
 80061cc:	2002      	movs	r0, #2
 80061ce:	f7ff fb3f 	bl	8005850 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) {
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	69db      	ldr	r3, [r3, #28]
 80061d8:	f003 0304 	and.w	r3, r3, #4
 80061dc:	2b04      	cmp	r3, #4
 80061de:	d107      	bne.n	80061f0 <HAL_UART_ErrorCallback+0x5c>
      __HAL_UART_CLEAR_NEFLAG(huart);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2204      	movs	r2, #4
 80061e6:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Noise error cleared");
 80061e8:	492e      	ldr	r1, [pc, #184]	@ (80062a4 <HAL_UART_ErrorCallback+0x110>)
 80061ea:	2002      	movs	r0, #2
 80061ec:	f7ff fb30 	bl	8005850 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) {
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	69db      	ldr	r3, [r3, #28]
 80061f6:	f003 0302 	and.w	r3, r3, #2
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d107      	bne.n	800620e <HAL_UART_ErrorCallback+0x7a>
      __HAL_UART_CLEAR_FEFLAG(huart);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2202      	movs	r2, #2
 8006204:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Frame error cleared");
 8006206:	4928      	ldr	r1, [pc, #160]	@ (80062a8 <HAL_UART_ErrorCallback+0x114>)
 8006208:	2002      	movs	r0, #2
 800620a:	f7ff fb21 	bl	8005850 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) {
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	69db      	ldr	r3, [r3, #28]
 8006214:	f003 0301 	and.w	r3, r3, #1
 8006218:	2b01      	cmp	r3, #1
 800621a:	d107      	bne.n	800622c <HAL_UART_ErrorCallback+0x98>
      __HAL_UART_CLEAR_PEFLAG(huart);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2201      	movs	r2, #1
 8006222:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Parity error cleared");
 8006224:	4921      	ldr	r1, [pc, #132]	@ (80062ac <HAL_UART_ErrorCallback+0x118>)
 8006226:	2002      	movs	r0, #2
 8006228:	f7ff fb12 	bl	8005850 <LOGGER_SendFormatted>
    }
    
    // UART와 DMA 상태 강제 리셋
    HAL_UART_DMAStop(huart);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f009 f9ec 	bl	800f60a <HAL_UART_DMAStop>
    huart->gState = HAL_UART_STATE_READY;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2220      	movs	r2, #32
 8006236:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->RxState = HAL_UART_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2220      	movs	r2, #32
 800623c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (huart->hdmarx != NULL) {
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006244:	2b00      	cmp	r3, #0
 8006246:	d004      	beq.n	8006252 <HAL_UART_ErrorCallback+0xbe>
      huart->hdmarx->State = HAL_DMA_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800624c:	2201      	movs	r2, #1
 800624e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 버퍼 클리어 후 DMA 재시작 (일반 모드)
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8006252:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006256:	2100      	movs	r1, #0
 8006258:	4815      	ldr	r0, [pc, #84]	@ (80062b0 <HAL_UART_ErrorCallback+0x11c>)
 800625a:	f011 fd13 	bl	8017c84 <memset>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(huart, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 800625e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006262:	4913      	ldr	r1, [pc, #76]	@ (80062b0 <HAL_UART_ErrorCallback+0x11c>)
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f009 f98c 	bl	800f582 <HAL_UART_Receive_DMA>
 800626a:	4603      	mov	r3, r0
 800626c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 800626e:	7bfb      	ldrb	r3, [r7, #15]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d104      	bne.n	800627e <HAL_UART_ErrorCallback+0xea>
      LOG_INFO("[DMA] Error recovery: DMA restarted successfully");
 8006274:	490f      	ldr	r1, [pc, #60]	@ (80062b4 <HAL_UART_ErrorCallback+0x120>)
 8006276:	2001      	movs	r0, #1
 8006278:	f7ff faea 	bl	8005850 <LOGGER_SendFormatted>
    } else {
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
    }
  }
}
 800627c:	e005      	b.n	800628a <HAL_UART_ErrorCallback+0xf6>
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
 800627e:	7bfb      	ldrb	r3, [r7, #15]
 8006280:	461a      	mov	r2, r3
 8006282:	490d      	ldr	r1, [pc, #52]	@ (80062b8 <HAL_UART_ErrorCallback+0x124>)
 8006284:	2003      	movs	r0, #3
 8006286:	f7ff fae3 	bl	8005850 <LOGGER_SendFormatted>
}
 800628a:	bf00      	nop
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	40011400 	.word	0x40011400
 8006298:	200024c2 	.word	0x200024c2
 800629c:	0801cac0 	.word	0x0801cac0
 80062a0:	0801caec 	.word	0x0801caec
 80062a4:	0801cb08 	.word	0x0801cb08
 80062a8:	0801cb24 	.word	0x0801cb24
 80062ac:	0801cb40 	.word	0x0801cb40
 80062b0:	200024c8 	.word	0x200024c8
 80062b4:	0801cb5c 	.word	0x0801cb5c
 80062b8:	0801cb90 	.word	0x0801cb90

080062bc <USER_UART_IDLECallback>:

// UART IDLE 인터럽트 콜백 (메시지 끝 감지)
void USER_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af02      	add	r7, sp, #8
 80062c2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a3e      	ldr	r2, [pc, #248]	@ (80063c4 <USER_UART_IDLECallback+0x108>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d175      	bne.n	80063ba <USER_UART_IDLECallback+0xfe>
  {
    // UART 에러 상태 체크
    uint32_t error_flags = 0;
 80062ce:	2300      	movs	r3, #0
 80062d0:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) error_flags |= 0x01;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	69db      	ldr	r3, [r3, #28]
 80062d8:	f003 0308 	and.w	r3, r3, #8
 80062dc:	2b08      	cmp	r3, #8
 80062de:	d103      	bne.n	80062e8 <USER_UART_IDLECallback+0x2c>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f043 0301 	orr.w	r3, r3, #1
 80062e6:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) error_flags |= 0x02;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	69db      	ldr	r3, [r3, #28]
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d103      	bne.n	80062fe <USER_UART_IDLECallback+0x42>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f043 0302 	orr.w	r3, r3, #2
 80062fc:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) error_flags |= 0x04;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	69db      	ldr	r3, [r3, #28]
 8006304:	f003 0304 	and.w	r3, r3, #4
 8006308:	2b04      	cmp	r3, #4
 800630a:	d103      	bne.n	8006314 <USER_UART_IDLECallback+0x58>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f043 0304 	orr.w	r3, r3, #4
 8006312:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) error_flags |= 0x08;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	69db      	ldr	r3, [r3, #28]
 800631a:	f003 0301 	and.w	r3, r3, #1
 800631e:	2b01      	cmp	r3, #1
 8006320:	d103      	bne.n	800632a <USER_UART_IDLECallback+0x6e>
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f043 0308 	orr.w	r3, r3, #8
 8006328:	60fb      	str	r3, [r7, #12]
    
    // IDLE 감지 - 메시지 끝
    uint16_t remaining = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	817b      	strh	r3, [r7, #10]
    uart_rx_length = sizeof(rx_buffer) - remaining;
 8006334:	897b      	ldrh	r3, [r7, #10]
 8006336:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800633a:	b29a      	uxth	r2, r3
 800633c:	4b22      	ldr	r3, [pc, #136]	@ (80063c8 <USER_UART_IDLECallback+0x10c>)
 800633e:	801a      	strh	r2, [r3, #0]
    
    if (uart_rx_length > 0) {
 8006340:	4b21      	ldr	r3, [pc, #132]	@ (80063c8 <USER_UART_IDLECallback+0x10c>)
 8006342:	881b      	ldrh	r3, [r3, #0]
 8006344:	b29b      	uxth	r3, r3
 8006346:	2b00      	cmp	r3, #0
 8006348:	d033      	beq.n	80063b2 <USER_UART_IDLECallback+0xf6>
      uart_rx_complete_flag = 1;
 800634a:	4b20      	ldr	r3, [pc, #128]	@ (80063cc <USER_UART_IDLECallback+0x110>)
 800634c:	2201      	movs	r2, #1
 800634e:	701a      	strb	r2, [r3, #0]
      if (error_flags != 0) {
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d009      	beq.n	800636a <USER_UART_IDLECallback+0xae>
        LOG_WARN("[DMA] IDLE detected: %d bytes received (UART errors: 0x%02lX)", uart_rx_length, error_flags);
 8006356:	4b1c      	ldr	r3, [pc, #112]	@ (80063c8 <USER_UART_IDLECallback+0x10c>)
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	b29b      	uxth	r3, r3
 800635c:	461a      	mov	r2, r3
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	491b      	ldr	r1, [pc, #108]	@ (80063d0 <USER_UART_IDLECallback+0x114>)
 8006362:	2002      	movs	r0, #2
 8006364:	f7ff fa74 	bl	8005850 <LOGGER_SendFormatted>
 8006368:	e007      	b.n	800637a <USER_UART_IDLECallback+0xbe>
      } else {
        LOG_DEBUG("[DMA] IDLE detected: %d bytes received", uart_rx_length);
 800636a:	4b17      	ldr	r3, [pc, #92]	@ (80063c8 <USER_UART_IDLECallback+0x10c>)
 800636c:	881b      	ldrh	r3, [r3, #0]
 800636e:	b29b      	uxth	r3, r3
 8006370:	461a      	mov	r2, r3
 8006372:	4918      	ldr	r1, [pc, #96]	@ (80063d4 <USER_UART_IDLECallback+0x118>)
 8006374:	2000      	movs	r0, #0
 8006376:	f7ff fa6b 	bl	8005850 <LOGGER_SendFormatted>
      }
      
      // 첫 몇 바이트 확인 (디버깅용)
      if (uart_rx_length >= 4) {
 800637a:	4b13      	ldr	r3, [pc, #76]	@ (80063c8 <USER_UART_IDLECallback+0x10c>)
 800637c:	881b      	ldrh	r3, [r3, #0]
 800637e:	b29b      	uxth	r3, r3
 8006380:	2b03      	cmp	r3, #3
 8006382:	d912      	bls.n	80063aa <USER_UART_IDLECallback+0xee>
        LOG_DEBUG("[DMA] First 4 bytes: %02X %02X %02X %02X", 
 8006384:	4b14      	ldr	r3, [pc, #80]	@ (80063d8 <USER_UART_IDLECallback+0x11c>)
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	4619      	mov	r1, r3
 800638a:	4b13      	ldr	r3, [pc, #76]	@ (80063d8 <USER_UART_IDLECallback+0x11c>)
 800638c:	785b      	ldrb	r3, [r3, #1]
 800638e:	4618      	mov	r0, r3
 8006390:	4b11      	ldr	r3, [pc, #68]	@ (80063d8 <USER_UART_IDLECallback+0x11c>)
 8006392:	789b      	ldrb	r3, [r3, #2]
 8006394:	461a      	mov	r2, r3
 8006396:	4b10      	ldr	r3, [pc, #64]	@ (80063d8 <USER_UART_IDLECallback+0x11c>)
 8006398:	78db      	ldrb	r3, [r3, #3]
 800639a:	9301      	str	r3, [sp, #4]
 800639c:	9200      	str	r2, [sp, #0]
 800639e:	4603      	mov	r3, r0
 80063a0:	460a      	mov	r2, r1
 80063a2:	490e      	ldr	r1, [pc, #56]	@ (80063dc <USER_UART_IDLECallback+0x120>)
 80063a4:	2000      	movs	r0, #0
 80063a6:	f7ff fa53 	bl	8005850 <LOGGER_SendFormatted>
                  rx_buffer[0], rx_buffer[1], rx_buffer[2], rx_buffer[3]);
      }
      
      // DMA 중지 (일반 모드에서는 자동으로 완료됨)
      HAL_UART_DMAStop(huart);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f009 f92d 	bl	800f60a <HAL_UART_DMAStop>
      // 다음 수신을 위해 즉시 재시작하지 않음 - uart_stm32.c에서 처리
    } else {
      LOG_DEBUG("[DMA] IDLE detected but no data");
    }
  }
}
 80063b0:	e003      	b.n	80063ba <USER_UART_IDLECallback+0xfe>
      LOG_DEBUG("[DMA] IDLE detected but no data");
 80063b2:	490b      	ldr	r1, [pc, #44]	@ (80063e0 <USER_UART_IDLECallback+0x124>)
 80063b4:	2000      	movs	r0, #0
 80063b6:	f7ff fa4b 	bl	8005850 <LOGGER_SendFormatted>
}
 80063ba:	bf00      	nop
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	40011400 	.word	0x40011400
 80063c8:	200024c4 	.word	0x200024c4
 80063cc:	200024c1 	.word	0x200024c1
 80063d0:	0801cbc8 	.word	0x0801cbc8
 80063d4:	0801cc08 	.word	0x0801cc08
 80063d8:	200024c8 	.word	0x200024c8
 80063dc:	0801cc30 	.word	0x0801cc30
 80063e0:	0801cc5c 	.word	0x0801cc5c

080063e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80063e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800641c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80063e8:	f7ff f986 	bl	80056f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80063ec:	480c      	ldr	r0, [pc, #48]	@ (8006420 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80063ee:	490d      	ldr	r1, [pc, #52]	@ (8006424 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80063f0:	4a0d      	ldr	r2, [pc, #52]	@ (8006428 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80063f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80063f4:	e002      	b.n	80063fc <LoopCopyDataInit>

080063f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80063f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80063f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80063fa:	3304      	adds	r3, #4

080063fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80063fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80063fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006400:	d3f9      	bcc.n	80063f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006402:	4a0a      	ldr	r2, [pc, #40]	@ (800642c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006404:	4c0a      	ldr	r4, [pc, #40]	@ (8006430 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006406:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006408:	e001      	b.n	800640e <LoopFillZerobss>

0800640a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800640a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800640c:	3204      	adds	r2, #4

0800640e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800640e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006410:	d3fb      	bcc.n	800640a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8006412:	f011 fcd1 	bl	8017db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006416:	f7fb feeb 	bl	80021f0 <main>
  bx  lr    
 800641a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800641c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8006420:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006424:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8006428:	0801cf18 	.word	0x0801cf18
  ldr r2, =_sbss
 800642c:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8006430:	200131b0 	.word	0x200131b0

08006434 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006434:	e7fe      	b.n	8006434 <ADC_IRQHandler>

08006436 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800643a:	2003      	movs	r0, #3
 800643c:	f000 fb91 	bl	8006b62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006440:	2000      	movs	r0, #0
 8006442:	f7fe ffd5 	bl	80053f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006446:	f7fd ff37 	bl	80042b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	bd80      	pop	{r7, pc}

08006450 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006450:	b480      	push	{r7}
 8006452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006454:	4b06      	ldr	r3, [pc, #24]	@ (8006470 <HAL_IncTick+0x20>)
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	461a      	mov	r2, r3
 800645a:	4b06      	ldr	r3, [pc, #24]	@ (8006474 <HAL_IncTick+0x24>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4413      	add	r3, r2
 8006460:	4a04      	ldr	r2, [pc, #16]	@ (8006474 <HAL_IncTick+0x24>)
 8006462:	6013      	str	r3, [r2, #0]
}
 8006464:	bf00      	nop
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	20000070 	.word	0x20000070
 8006474:	200026cc 	.word	0x200026cc

08006478 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006478:	b480      	push	{r7}
 800647a:	af00      	add	r7, sp, #0
  return uwTick;
 800647c:	4b03      	ldr	r3, [pc, #12]	@ (800648c <HAL_GetTick+0x14>)
 800647e:	681b      	ldr	r3, [r3, #0]
}
 8006480:	4618      	mov	r0, r3
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	200026cc 	.word	0x200026cc

08006490 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006498:	f7ff ffee 	bl	8006478 <HAL_GetTick>
 800649c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a8:	d005      	beq.n	80064b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80064aa:	4b0a      	ldr	r3, [pc, #40]	@ (80064d4 <HAL_Delay+0x44>)
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	461a      	mov	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	4413      	add	r3, r2
 80064b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80064b6:	bf00      	nop
 80064b8:	f7ff ffde 	bl	8006478 <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d8f7      	bhi.n	80064b8 <HAL_Delay+0x28>
  {
  }
}
 80064c8:	bf00      	nop
 80064ca:	bf00      	nop
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	20000070 	.word	0x20000070

080064d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80064e0:	2300      	movs	r3, #0
 80064e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d101      	bne.n	80064ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e031      	b.n	8006552 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d109      	bne.n	800650a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7fd ff06 	bl	8004308 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800650e:	f003 0310 	and.w	r3, r3, #16
 8006512:	2b00      	cmp	r3, #0
 8006514:	d116      	bne.n	8006544 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800651a:	4b10      	ldr	r3, [pc, #64]	@ (800655c <HAL_ADC_Init+0x84>)
 800651c:	4013      	ands	r3, r2
 800651e:	f043 0202 	orr.w	r2, r3, #2
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f974 	bl	8006814 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006536:	f023 0303 	bic.w	r3, r3, #3
 800653a:	f043 0201 	orr.w	r2, r3, #1
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	641a      	str	r2, [r3, #64]	@ 0x40
 8006542:	e001      	b.n	8006548 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006550:	7bfb      	ldrb	r3, [r7, #15]
}
 8006552:	4618      	mov	r0, r3
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	ffffeefd 	.word	0xffffeefd

08006560 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800656a:	2300      	movs	r3, #0
 800656c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006574:	2b01      	cmp	r3, #1
 8006576:	d101      	bne.n	800657c <HAL_ADC_ConfigChannel+0x1c>
 8006578:	2302      	movs	r3, #2
 800657a:	e13a      	b.n	80067f2 <HAL_ADC_ConfigChannel+0x292>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2b09      	cmp	r3, #9
 800658a:	d93a      	bls.n	8006602 <HAL_ADC_ConfigChannel+0xa2>
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006594:	d035      	beq.n	8006602 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68d9      	ldr	r1, [r3, #12]
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	461a      	mov	r2, r3
 80065a4:	4613      	mov	r3, r2
 80065a6:	005b      	lsls	r3, r3, #1
 80065a8:	4413      	add	r3, r2
 80065aa:	3b1e      	subs	r3, #30
 80065ac:	2207      	movs	r2, #7
 80065ae:	fa02 f303 	lsl.w	r3, r2, r3
 80065b2:	43da      	mvns	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	400a      	ands	r2, r1
 80065ba:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a8f      	ldr	r2, [pc, #572]	@ (8006800 <HAL_ADC_ConfigChannel+0x2a0>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d10a      	bne.n	80065dc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68d9      	ldr	r1, [r3, #12]
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	061a      	lsls	r2, r3, #24
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	430a      	orrs	r2, r1
 80065d8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80065da:	e039      	b.n	8006650 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68d9      	ldr	r1, [r3, #12]
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	689a      	ldr	r2, [r3, #8]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	4618      	mov	r0, r3
 80065ee:	4603      	mov	r3, r0
 80065f0:	005b      	lsls	r3, r3, #1
 80065f2:	4403      	add	r3, r0
 80065f4:	3b1e      	subs	r3, #30
 80065f6:	409a      	lsls	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	430a      	orrs	r2, r1
 80065fe:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006600:	e026      	b.n	8006650 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	6919      	ldr	r1, [r3, #16]
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	b29b      	uxth	r3, r3
 800660e:	461a      	mov	r2, r3
 8006610:	4613      	mov	r3, r2
 8006612:	005b      	lsls	r3, r3, #1
 8006614:	4413      	add	r3, r2
 8006616:	f003 031f 	and.w	r3, r3, #31
 800661a:	2207      	movs	r2, #7
 800661c:	fa02 f303 	lsl.w	r3, r2, r3
 8006620:	43da      	mvns	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	400a      	ands	r2, r1
 8006628:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	6919      	ldr	r1, [r3, #16]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	689a      	ldr	r2, [r3, #8]
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	b29b      	uxth	r3, r3
 800663a:	4618      	mov	r0, r3
 800663c:	4603      	mov	r3, r0
 800663e:	005b      	lsls	r3, r3, #1
 8006640:	4403      	add	r3, r0
 8006642:	f003 031f 	and.w	r3, r3, #31
 8006646:	409a      	lsls	r2, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	430a      	orrs	r2, r1
 800664e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	2b06      	cmp	r3, #6
 8006656:	d824      	bhi.n	80066a2 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	685a      	ldr	r2, [r3, #4]
 8006662:	4613      	mov	r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4413      	add	r3, r2
 8006668:	3b05      	subs	r3, #5
 800666a:	221f      	movs	r2, #31
 800666c:	fa02 f303 	lsl.w	r3, r2, r3
 8006670:	43da      	mvns	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	400a      	ands	r2, r1
 8006678:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	b29b      	uxth	r3, r3
 8006686:	4618      	mov	r0, r3
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	4613      	mov	r3, r2
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4413      	add	r3, r2
 8006692:	3b05      	subs	r3, #5
 8006694:	fa00 f203 	lsl.w	r2, r0, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	430a      	orrs	r2, r1
 800669e:	635a      	str	r2, [r3, #52]	@ 0x34
 80066a0:	e04c      	b.n	800673c <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	2b0c      	cmp	r3, #12
 80066a8:	d824      	bhi.n	80066f4 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	685a      	ldr	r2, [r3, #4]
 80066b4:	4613      	mov	r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	3b23      	subs	r3, #35	@ 0x23
 80066bc:	221f      	movs	r2, #31
 80066be:	fa02 f303 	lsl.w	r3, r2, r3
 80066c2:	43da      	mvns	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	400a      	ands	r2, r1
 80066ca:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	4618      	mov	r0, r3
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	685a      	ldr	r2, [r3, #4]
 80066de:	4613      	mov	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4413      	add	r3, r2
 80066e4:	3b23      	subs	r3, #35	@ 0x23
 80066e6:	fa00 f203 	lsl.w	r2, r0, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	430a      	orrs	r2, r1
 80066f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80066f2:	e023      	b.n	800673c <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	4613      	mov	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	3b41      	subs	r3, #65	@ 0x41
 8006706:	221f      	movs	r2, #31
 8006708:	fa02 f303 	lsl.w	r3, r2, r3
 800670c:	43da      	mvns	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	400a      	ands	r2, r1
 8006714:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	b29b      	uxth	r3, r3
 8006722:	4618      	mov	r0, r3
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	685a      	ldr	r2, [r3, #4]
 8006728:	4613      	mov	r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4413      	add	r3, r2
 800672e:	3b41      	subs	r3, #65	@ 0x41
 8006730:	fa00 f203 	lsl.w	r2, r0, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	430a      	orrs	r2, r1
 800673a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a30      	ldr	r2, [pc, #192]	@ (8006804 <HAL_ADC_ConfigChannel+0x2a4>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d10a      	bne.n	800675c <HAL_ADC_ConfigChannel+0x1fc>
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800674e:	d105      	bne.n	800675c <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8006750:	4b2d      	ldr	r3, [pc, #180]	@ (8006808 <HAL_ADC_ConfigChannel+0x2a8>)
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	4a2c      	ldr	r2, [pc, #176]	@ (8006808 <HAL_ADC_ConfigChannel+0x2a8>)
 8006756:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800675a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a28      	ldr	r2, [pc, #160]	@ (8006804 <HAL_ADC_ConfigChannel+0x2a4>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d10f      	bne.n	8006786 <HAL_ADC_ConfigChannel+0x226>
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b12      	cmp	r3, #18
 800676c:	d10b      	bne.n	8006786 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800676e:	4b26      	ldr	r3, [pc, #152]	@ (8006808 <HAL_ADC_ConfigChannel+0x2a8>)
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	4a25      	ldr	r2, [pc, #148]	@ (8006808 <HAL_ADC_ConfigChannel+0x2a8>)
 8006774:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006778:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800677a:	4b23      	ldr	r3, [pc, #140]	@ (8006808 <HAL_ADC_ConfigChannel+0x2a8>)
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	4a22      	ldr	r2, [pc, #136]	@ (8006808 <HAL_ADC_ConfigChannel+0x2a8>)
 8006780:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006784:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a1e      	ldr	r2, [pc, #120]	@ (8006804 <HAL_ADC_ConfigChannel+0x2a4>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d12b      	bne.n	80067e8 <HAL_ADC_ConfigChannel+0x288>
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a1a      	ldr	r2, [pc, #104]	@ (8006800 <HAL_ADC_ConfigChannel+0x2a0>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d003      	beq.n	80067a2 <HAL_ADC_ConfigChannel+0x242>
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2b11      	cmp	r3, #17
 80067a0:	d122      	bne.n	80067e8 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80067a2:	4b19      	ldr	r3, [pc, #100]	@ (8006808 <HAL_ADC_ConfigChannel+0x2a8>)
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	4a18      	ldr	r2, [pc, #96]	@ (8006808 <HAL_ADC_ConfigChannel+0x2a8>)
 80067a8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80067ac:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80067ae:	4b16      	ldr	r3, [pc, #88]	@ (8006808 <HAL_ADC_ConfigChannel+0x2a8>)
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	4a15      	ldr	r2, [pc, #84]	@ (8006808 <HAL_ADC_ConfigChannel+0x2a8>)
 80067b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80067b8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a10      	ldr	r2, [pc, #64]	@ (8006800 <HAL_ADC_ConfigChannel+0x2a0>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d111      	bne.n	80067e8 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80067c4:	4b11      	ldr	r3, [pc, #68]	@ (800680c <HAL_ADC_ConfigChannel+0x2ac>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a11      	ldr	r2, [pc, #68]	@ (8006810 <HAL_ADC_ConfigChannel+0x2b0>)
 80067ca:	fba2 2303 	umull	r2, r3, r2, r3
 80067ce:	0c9a      	lsrs	r2, r3, #18
 80067d0:	4613      	mov	r3, r2
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	4413      	add	r3, r2
 80067d6:	005b      	lsls	r3, r3, #1
 80067d8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80067da:	e002      	b.n	80067e2 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	3b01      	subs	r3, #1
 80067e0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1f9      	bne.n	80067dc <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3714      	adds	r7, #20
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	10000012 	.word	0x10000012
 8006804:	40012000 	.word	0x40012000
 8006808:	40012300 	.word	0x40012300
 800680c:	2000001c 	.word	0x2000001c
 8006810:	431bde83 	.word	0x431bde83

08006814 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800681c:	4b78      	ldr	r3, [pc, #480]	@ (8006a00 <ADC_Init+0x1ec>)
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	4a77      	ldr	r2, [pc, #476]	@ (8006a00 <ADC_Init+0x1ec>)
 8006822:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8006826:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006828:	4b75      	ldr	r3, [pc, #468]	@ (8006a00 <ADC_Init+0x1ec>)
 800682a:	685a      	ldr	r2, [r3, #4]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	4973      	ldr	r1, [pc, #460]	@ (8006a00 <ADC_Init+0x1ec>)
 8006832:	4313      	orrs	r3, r2
 8006834:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006844:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6859      	ldr	r1, [r3, #4]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	021a      	lsls	r2, r3, #8
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	430a      	orrs	r2, r1
 8006858:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	685a      	ldr	r2, [r3, #4]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006868:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	6859      	ldr	r1, [r3, #4]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	689a      	ldr	r2, [r3, #8]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	430a      	orrs	r2, r1
 800687a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689a      	ldr	r2, [r3, #8]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800688a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6899      	ldr	r1, [r3, #8]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	68da      	ldr	r2, [r3, #12]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	430a      	orrs	r2, r1
 800689c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a2:	4a58      	ldr	r2, [pc, #352]	@ (8006a04 <ADC_Init+0x1f0>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d022      	beq.n	80068ee <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	689a      	ldr	r2, [r3, #8]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80068b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	6899      	ldr	r1, [r3, #8]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	430a      	orrs	r2, r1
 80068c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	689a      	ldr	r2, [r3, #8]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80068d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	6899      	ldr	r1, [r3, #8]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	430a      	orrs	r2, r1
 80068ea:	609a      	str	r2, [r3, #8]
 80068ec:	e00f      	b.n	800690e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	689a      	ldr	r2, [r3, #8]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80068fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	689a      	ldr	r2, [r3, #8]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800690c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	689a      	ldr	r2, [r3, #8]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f022 0202 	bic.w	r2, r2, #2
 800691c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	6899      	ldr	r1, [r3, #8]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	005a      	lsls	r2, r3, #1
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	430a      	orrs	r2, r1
 8006930:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d01b      	beq.n	8006974 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	685a      	ldr	r2, [r3, #4]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800694a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800695a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	6859      	ldr	r1, [r3, #4]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006966:	3b01      	subs	r3, #1
 8006968:	035a      	lsls	r2, r3, #13
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	430a      	orrs	r2, r1
 8006970:	605a      	str	r2, [r3, #4]
 8006972:	e007      	b.n	8006984 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	685a      	ldr	r2, [r3, #4]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006982:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006992:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	69db      	ldr	r3, [r3, #28]
 800699e:	3b01      	subs	r3, #1
 80069a0:	051a      	lsls	r2, r3, #20
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	430a      	orrs	r2, r1
 80069a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	689a      	ldr	r2, [r3, #8]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80069b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6899      	ldr	r1, [r3, #8]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80069c6:	025a      	lsls	r2, r3, #9
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	430a      	orrs	r2, r1
 80069ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	689a      	ldr	r2, [r3, #8]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6899      	ldr	r1, [r3, #8]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	695b      	ldr	r3, [r3, #20]
 80069ea:	029a      	lsls	r2, r3, #10
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	430a      	orrs	r2, r1
 80069f2:	609a      	str	r2, [r3, #8]
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr
 8006a00:	40012300 	.word	0x40012300
 8006a04:	0f000001 	.word	0x0f000001

08006a08 <__NVIC_SetPriorityGrouping>:
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f003 0307 	and.w	r3, r3, #7
 8006a16:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a18:	4b0b      	ldr	r3, [pc, #44]	@ (8006a48 <__NVIC_SetPriorityGrouping+0x40>)
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006a24:	4013      	ands	r3, r2
 8006a26:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006a30:	4b06      	ldr	r3, [pc, #24]	@ (8006a4c <__NVIC_SetPriorityGrouping+0x44>)
 8006a32:	4313      	orrs	r3, r2
 8006a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a36:	4a04      	ldr	r2, [pc, #16]	@ (8006a48 <__NVIC_SetPriorityGrouping+0x40>)
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	60d3      	str	r3, [r2, #12]
}
 8006a3c:	bf00      	nop
 8006a3e:	3714      	adds	r7, #20
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr
 8006a48:	e000ed00 	.word	0xe000ed00
 8006a4c:	05fa0000 	.word	0x05fa0000

08006a50 <__NVIC_GetPriorityGrouping>:
{
 8006a50:	b480      	push	{r7}
 8006a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a54:	4b04      	ldr	r3, [pc, #16]	@ (8006a68 <__NVIC_GetPriorityGrouping+0x18>)
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	0a1b      	lsrs	r3, r3, #8
 8006a5a:	f003 0307 	and.w	r3, r3, #7
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr
 8006a68:	e000ed00 	.word	0xe000ed00

08006a6c <__NVIC_EnableIRQ>:
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	4603      	mov	r3, r0
 8006a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	db0b      	blt.n	8006a96 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a7e:	79fb      	ldrb	r3, [r7, #7]
 8006a80:	f003 021f 	and.w	r2, r3, #31
 8006a84:	4907      	ldr	r1, [pc, #28]	@ (8006aa4 <__NVIC_EnableIRQ+0x38>)
 8006a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a8a:	095b      	lsrs	r3, r3, #5
 8006a8c:	2001      	movs	r0, #1
 8006a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8006a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006a96:	bf00      	nop
 8006a98:	370c      	adds	r7, #12
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	e000e100 	.word	0xe000e100

08006aa8 <__NVIC_SetPriority>:
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	4603      	mov	r3, r0
 8006ab0:	6039      	str	r1, [r7, #0]
 8006ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	db0a      	blt.n	8006ad2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	490c      	ldr	r1, [pc, #48]	@ (8006af4 <__NVIC_SetPriority+0x4c>)
 8006ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ac6:	0112      	lsls	r2, r2, #4
 8006ac8:	b2d2      	uxtb	r2, r2
 8006aca:	440b      	add	r3, r1
 8006acc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006ad0:	e00a      	b.n	8006ae8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	b2da      	uxtb	r2, r3
 8006ad6:	4908      	ldr	r1, [pc, #32]	@ (8006af8 <__NVIC_SetPriority+0x50>)
 8006ad8:	79fb      	ldrb	r3, [r7, #7]
 8006ada:	f003 030f 	and.w	r3, r3, #15
 8006ade:	3b04      	subs	r3, #4
 8006ae0:	0112      	lsls	r2, r2, #4
 8006ae2:	b2d2      	uxtb	r2, r2
 8006ae4:	440b      	add	r3, r1
 8006ae6:	761a      	strb	r2, [r3, #24]
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr
 8006af4:	e000e100 	.word	0xe000e100
 8006af8:	e000ed00 	.word	0xe000ed00

08006afc <NVIC_EncodePriority>:
{
 8006afc:	b480      	push	{r7}
 8006afe:	b089      	sub	sp, #36	@ 0x24
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f003 0307 	and.w	r3, r3, #7
 8006b0e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	f1c3 0307 	rsb	r3, r3, #7
 8006b16:	2b04      	cmp	r3, #4
 8006b18:	bf28      	it	cs
 8006b1a:	2304      	movcs	r3, #4
 8006b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	3304      	adds	r3, #4
 8006b22:	2b06      	cmp	r3, #6
 8006b24:	d902      	bls.n	8006b2c <NVIC_EncodePriority+0x30>
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	3b03      	subs	r3, #3
 8006b2a:	e000      	b.n	8006b2e <NVIC_EncodePriority+0x32>
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b30:	f04f 32ff 	mov.w	r2, #4294967295
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	fa02 f303 	lsl.w	r3, r2, r3
 8006b3a:	43da      	mvns	r2, r3
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	401a      	ands	r2, r3
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b44:	f04f 31ff 	mov.w	r1, #4294967295
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b4e:	43d9      	mvns	r1, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b54:	4313      	orrs	r3, r2
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3724      	adds	r7, #36	@ 0x24
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b082      	sub	sp, #8
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7ff ff4c 	bl	8006a08 <__NVIC_SetPriorityGrouping>
}
 8006b70:	bf00      	nop
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	4603      	mov	r3, r0
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
 8006b84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006b86:	2300      	movs	r3, #0
 8006b88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006b8a:	f7ff ff61 	bl	8006a50 <__NVIC_GetPriorityGrouping>
 8006b8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	68b9      	ldr	r1, [r7, #8]
 8006b94:	6978      	ldr	r0, [r7, #20]
 8006b96:	f7ff ffb1 	bl	8006afc <NVIC_EncodePriority>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ba0:	4611      	mov	r1, r2
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7ff ff80 	bl	8006aa8 <__NVIC_SetPriority>
}
 8006ba8:	bf00      	nop
 8006baa:	3718      	adds	r7, #24
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f7ff ff54 	bl	8006a6c <__NVIC_EnableIRQ>
}
 8006bc4:	bf00      	nop
 8006bc6:	3708      	adds	r7, #8
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d101      	bne.n	8006bde <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e054      	b.n	8006c88 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	7f5b      	ldrb	r3, [r3, #29]
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d105      	bne.n	8006bf4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f7fd fbe4 	bl	80043bc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	791b      	ldrb	r3, [r3, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10c      	bne.n	8006c1c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a22      	ldr	r2, [pc, #136]	@ (8006c90 <HAL_CRC_Init+0xc4>)
 8006c08:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	689a      	ldr	r2, [r3, #8]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f022 0218 	bic.w	r2, r2, #24
 8006c18:	609a      	str	r2, [r3, #8]
 8006c1a:	e00c      	b.n	8006c36 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6899      	ldr	r1, [r3, #8]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	461a      	mov	r2, r3
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 f834 	bl	8006c94 <HAL_CRCEx_Polynomial_Set>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d001      	beq.n	8006c36 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e028      	b.n	8006c88 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	795b      	ldrb	r3, [r3, #5]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d105      	bne.n	8006c4a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f04f 32ff 	mov.w	r2, #4294967295
 8006c46:	611a      	str	r2, [r3, #16]
 8006c48:	e004      	b.n	8006c54 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	6912      	ldr	r2, [r2, #16]
 8006c52:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	695a      	ldr	r2, [r3, #20]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	430a      	orrs	r2, r1
 8006c68:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	699a      	ldr	r2, [r3, #24]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	430a      	orrs	r2, r1
 8006c7e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3708      	adds	r7, #8
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	04c11db7 	.word	0x04c11db7

08006c94 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b087      	sub	sp, #28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006ca4:	231f      	movs	r3, #31
 8006ca6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d102      	bne.n	8006cb8 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	75fb      	strb	r3, [r7, #23]
 8006cb6:	e063      	b.n	8006d80 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006cb8:	bf00      	nop
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	1e5a      	subs	r2, r3, #1
 8006cbe:	613a      	str	r2, [r7, #16]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d009      	beq.n	8006cd8 <HAL_CRCEx_Polynomial_Set+0x44>
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	f003 031f 	and.w	r3, r3, #31
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8006cd0:	f003 0301 	and.w	r3, r3, #1
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d0f0      	beq.n	8006cba <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2b18      	cmp	r3, #24
 8006cdc:	d846      	bhi.n	8006d6c <HAL_CRCEx_Polynomial_Set+0xd8>
 8006cde:	a201      	add	r2, pc, #4	@ (adr r2, 8006ce4 <HAL_CRCEx_Polynomial_Set+0x50>)
 8006ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce4:	08006d73 	.word	0x08006d73
 8006ce8:	08006d6d 	.word	0x08006d6d
 8006cec:	08006d6d 	.word	0x08006d6d
 8006cf0:	08006d6d 	.word	0x08006d6d
 8006cf4:	08006d6d 	.word	0x08006d6d
 8006cf8:	08006d6d 	.word	0x08006d6d
 8006cfc:	08006d6d 	.word	0x08006d6d
 8006d00:	08006d6d 	.word	0x08006d6d
 8006d04:	08006d61 	.word	0x08006d61
 8006d08:	08006d6d 	.word	0x08006d6d
 8006d0c:	08006d6d 	.word	0x08006d6d
 8006d10:	08006d6d 	.word	0x08006d6d
 8006d14:	08006d6d 	.word	0x08006d6d
 8006d18:	08006d6d 	.word	0x08006d6d
 8006d1c:	08006d6d 	.word	0x08006d6d
 8006d20:	08006d6d 	.word	0x08006d6d
 8006d24:	08006d55 	.word	0x08006d55
 8006d28:	08006d6d 	.word	0x08006d6d
 8006d2c:	08006d6d 	.word	0x08006d6d
 8006d30:	08006d6d 	.word	0x08006d6d
 8006d34:	08006d6d 	.word	0x08006d6d
 8006d38:	08006d6d 	.word	0x08006d6d
 8006d3c:	08006d6d 	.word	0x08006d6d
 8006d40:	08006d6d 	.word	0x08006d6d
 8006d44:	08006d49 	.word	0x08006d49
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	2b06      	cmp	r3, #6
 8006d4c:	d913      	bls.n	8006d76 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006d52:	e010      	b.n	8006d76 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	2b07      	cmp	r3, #7
 8006d58:	d90f      	bls.n	8006d7a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006d5e:	e00c      	b.n	8006d7a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	2b0f      	cmp	r3, #15
 8006d64:	d90b      	bls.n	8006d7e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006d6a:	e008      	b.n	8006d7e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	75fb      	strb	r3, [r7, #23]
        break;
 8006d70:	e006      	b.n	8006d80 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006d72:	bf00      	nop
 8006d74:	e004      	b.n	8006d80 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006d76:	bf00      	nop
 8006d78:	e002      	b.n	8006d80 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006d7a:	bf00      	nop
 8006d7c:	e000      	b.n	8006d80 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006d7e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8006d80:	7dfb      	ldrb	r3, [r7, #23]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10d      	bne.n	8006da2 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f023 0118 	bic.w	r1, r3, #24
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	371c      	adds	r7, #28
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d101      	bne.n	8006dc2 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e069      	b.n	8006e96 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d102      	bne.n	8006dd4 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7fd fb14 	bl	80043fc <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d002      	beq.n	8006dea <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	6819      	ldr	r1, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	4b2a      	ldr	r3, [pc, #168]	@ (8006ea0 <HAL_DCMI_Init+0xf0>)
 8006df6:	400b      	ands	r3, r1
 8006df8:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6819      	ldr	r1, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685a      	ldr	r2, [r3, #4]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	695b      	ldr	r3, [r3, #20]
 8006e08:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006e0e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006e1a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	699b      	ldr	r3, [r3, #24]
 8006e20:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006e26:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e2c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006e32:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e38:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006e3e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	430a      	orrs	r2, r1
 8006e46:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	2b10      	cmp	r3, #16
 8006e4e:	d112      	bne.n	8006e76 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	7f1b      	ldrb	r3, [r3, #28]
 8006e54:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	7f5b      	ldrb	r3, [r3, #29]
 8006e5a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006e5c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	7f9b      	ldrb	r3, [r3, #30]
 8006e62:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8006e64:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	7fdb      	ldrb	r3, [r3, #31]
 8006e6c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006e72:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006e74:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68da      	ldr	r2, [r3, #12]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f042 021e 	orr.w	r2, r2, #30
 8006e84:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3708      	adds	r7, #8
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	ffe0f007 	.word	0xffe0f007

08006ea4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b086      	sub	sp, #24
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006eac:	2300      	movs	r3, #0
 8006eae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006eb0:	f7ff fae2 	bl	8006478 <HAL_GetTick>
 8006eb4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d101      	bne.n	8006ec0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e099      	b.n	8006ff4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f022 0201 	bic.w	r2, r2, #1
 8006ede:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006ee0:	e00f      	b.n	8006f02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006ee2:	f7ff fac9 	bl	8006478 <HAL_GetTick>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	1ad3      	subs	r3, r2, r3
 8006eec:	2b05      	cmp	r3, #5
 8006eee:	d908      	bls.n	8006f02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2220      	movs	r2, #32
 8006ef4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2203      	movs	r2, #3
 8006efa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e078      	b.n	8006ff4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0301 	and.w	r3, r3, #1
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1e8      	bne.n	8006ee2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	4b38      	ldr	r3, [pc, #224]	@ (8006ffc <HAL_DMA_Init+0x158>)
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	685a      	ldr	r2, [r3, #4]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006f2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a1b      	ldr	r3, [r3, #32]
 8006f4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f58:	2b04      	cmp	r3, #4
 8006f5a:	d107      	bne.n	8006f6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f64:	4313      	orrs	r3, r2
 8006f66:	697a      	ldr	r2, [r7, #20]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	f023 0307 	bic.w	r3, r3, #7
 8006f82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f88:	697a      	ldr	r2, [r7, #20]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f92:	2b04      	cmp	r3, #4
 8006f94:	d117      	bne.n	8006fc6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f9a:	697a      	ldr	r2, [r7, #20]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00e      	beq.n	8006fc6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fb73 	bl	8007694 <DMA_CheckFifoParam>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d008      	beq.n	8006fc6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2240      	movs	r2, #64	@ 0x40
 8006fb8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e016      	b.n	8006ff4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fb2a 	bl	8007628 <DMA_CalcBaseAndBitshift>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fdc:	223f      	movs	r2, #63	@ 0x3f
 8006fde:	409a      	lsls	r2, r3
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2201      	movs	r2, #1
 8006fee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3718      	adds	r7, #24
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	f010803f 	.word	0xf010803f

08007000 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d101      	bne.n	8007012 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e050      	b.n	80070b4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007018:	b2db      	uxtb	r3, r3
 800701a:	2b02      	cmp	r3, #2
 800701c:	d101      	bne.n	8007022 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800701e:	2302      	movs	r3, #2
 8007020:	e048      	b.n	80070b4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f022 0201 	bic.w	r2, r2, #1
 8007030:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2200      	movs	r2, #0
 8007038:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2200      	movs	r2, #0
 8007040:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2200      	movs	r2, #0
 8007048:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2200      	movs	r2, #0
 8007050:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2200      	movs	r2, #0
 8007058:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2221      	movs	r2, #33	@ 0x21
 8007060:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fae0 	bl	8007628 <DMA_CalcBaseAndBitshift>
 8007068:	4603      	mov	r3, r0
 800706a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007070:	223f      	movs	r2, #63	@ 0x3f
 8007072:	409a      	lsls	r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b086      	sub	sp, #24
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	607a      	str	r2, [r7, #4]
 80070c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070ca:	2300      	movs	r3, #0
 80070cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d101      	bne.n	80070e2 <HAL_DMA_Start_IT+0x26>
 80070de:	2302      	movs	r3, #2
 80070e0:	e048      	b.n	8007174 <HAL_DMA_Start_IT+0xb8>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d137      	bne.n	8007166 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2202      	movs	r2, #2
 80070fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	68b9      	ldr	r1, [r7, #8]
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f000 fa5e 	bl	80075cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007114:	223f      	movs	r2, #63	@ 0x3f
 8007116:	409a      	lsls	r2, r3
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f042 0216 	orr.w	r2, r2, #22
 800712a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	695a      	ldr	r2, [r3, #20]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800713a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007140:	2b00      	cmp	r3, #0
 8007142:	d007      	beq.n	8007154 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f042 0208 	orr.w	r2, r2, #8
 8007152:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f042 0201 	orr.w	r2, r2, #1
 8007162:	601a      	str	r2, [r3, #0]
 8007164:	e005      	b.n	8007172 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800716e:	2302      	movs	r3, #2
 8007170:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007172:	7dfb      	ldrb	r3, [r7, #23]
}
 8007174:	4618      	mov	r0, r3
 8007176:	3718      	adds	r7, #24
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007188:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800718a:	f7ff f975 	bl	8006478 <HAL_GetTick>
 800718e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007196:	b2db      	uxtb	r3, r3
 8007198:	2b02      	cmp	r3, #2
 800719a:	d008      	beq.n	80071ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2280      	movs	r2, #128	@ 0x80
 80071a0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e052      	b.n	8007254 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f022 0216 	bic.w	r2, r2, #22
 80071bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	695a      	ldr	r2, [r3, #20]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80071cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d103      	bne.n	80071de <HAL_DMA_Abort+0x62>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d007      	beq.n	80071ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f022 0208 	bic.w	r2, r2, #8
 80071ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f022 0201 	bic.w	r2, r2, #1
 80071fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80071fe:	e013      	b.n	8007228 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007200:	f7ff f93a 	bl	8006478 <HAL_GetTick>
 8007204:	4602      	mov	r2, r0
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	2b05      	cmp	r3, #5
 800720c:	d90c      	bls.n	8007228 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2220      	movs	r2, #32
 8007212:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2203      	movs	r2, #3
 8007218:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	e015      	b.n	8007254 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 0301 	and.w	r3, r3, #1
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1e4      	bne.n	8007200 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800723a:	223f      	movs	r2, #63	@ 0x3f
 800723c:	409a      	lsls	r2, r3
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b02      	cmp	r3, #2
 800726e:	d004      	beq.n	800727a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2280      	movs	r2, #128	@ 0x80
 8007274:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e00c      	b.n	8007294 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2205      	movs	r2, #5
 800727e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f022 0201 	bic.w	r2, r2, #1
 8007290:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	370c      	adds	r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80072a8:	2300      	movs	r3, #0
 80072aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80072ac:	4b8e      	ldr	r3, [pc, #568]	@ (80074e8 <HAL_DMA_IRQHandler+0x248>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a8e      	ldr	r2, [pc, #568]	@ (80074ec <HAL_DMA_IRQHandler+0x24c>)
 80072b2:	fba2 2303 	umull	r2, r3, r2, r3
 80072b6:	0a9b      	lsrs	r3, r3, #10
 80072b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072ca:	2208      	movs	r2, #8
 80072cc:	409a      	lsls	r2, r3
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	4013      	ands	r3, r2
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d01a      	beq.n	800730c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 0304 	and.w	r3, r3, #4
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d013      	beq.n	800730c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f022 0204 	bic.w	r2, r2, #4
 80072f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072f8:	2208      	movs	r2, #8
 80072fa:	409a      	lsls	r2, r3
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007304:	f043 0201 	orr.w	r2, r3, #1
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007310:	2201      	movs	r2, #1
 8007312:	409a      	lsls	r2, r3
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	4013      	ands	r3, r2
 8007318:	2b00      	cmp	r3, #0
 800731a:	d012      	beq.n	8007342 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00b      	beq.n	8007342 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800732e:	2201      	movs	r2, #1
 8007330:	409a      	lsls	r2, r3
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800733a:	f043 0202 	orr.w	r2, r3, #2
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007346:	2204      	movs	r2, #4
 8007348:	409a      	lsls	r2, r3
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	4013      	ands	r3, r2
 800734e:	2b00      	cmp	r3, #0
 8007350:	d012      	beq.n	8007378 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0302 	and.w	r3, r3, #2
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00b      	beq.n	8007378 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007364:	2204      	movs	r2, #4
 8007366:	409a      	lsls	r2, r3
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007370:	f043 0204 	orr.w	r2, r3, #4
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800737c:	2210      	movs	r2, #16
 800737e:	409a      	lsls	r2, r3
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	4013      	ands	r3, r2
 8007384:	2b00      	cmp	r3, #0
 8007386:	d043      	beq.n	8007410 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 0308 	and.w	r3, r3, #8
 8007392:	2b00      	cmp	r3, #0
 8007394:	d03c      	beq.n	8007410 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800739a:	2210      	movs	r2, #16
 800739c:	409a      	lsls	r2, r3
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d018      	beq.n	80073e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d108      	bne.n	80073d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d024      	beq.n	8007410 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	4798      	blx	r3
 80073ce:	e01f      	b.n	8007410 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d01b      	beq.n	8007410 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	4798      	blx	r3
 80073e0:	e016      	b.n	8007410 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d107      	bne.n	8007400 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f022 0208 	bic.w	r2, r2, #8
 80073fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007404:	2b00      	cmp	r3, #0
 8007406:	d003      	beq.n	8007410 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007414:	2220      	movs	r2, #32
 8007416:	409a      	lsls	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	4013      	ands	r3, r2
 800741c:	2b00      	cmp	r3, #0
 800741e:	f000 808f 	beq.w	8007540 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0310 	and.w	r3, r3, #16
 800742c:	2b00      	cmp	r3, #0
 800742e:	f000 8087 	beq.w	8007540 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007436:	2220      	movs	r2, #32
 8007438:	409a      	lsls	r2, r3
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b05      	cmp	r3, #5
 8007448:	d136      	bne.n	80074b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f022 0216 	bic.w	r2, r2, #22
 8007458:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	695a      	ldr	r2, [r3, #20]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007468:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800746e:	2b00      	cmp	r3, #0
 8007470:	d103      	bne.n	800747a <HAL_DMA_IRQHandler+0x1da>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007476:	2b00      	cmp	r3, #0
 8007478:	d007      	beq.n	800748a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f022 0208 	bic.w	r2, r2, #8
 8007488:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800748e:	223f      	movs	r2, #63	@ 0x3f
 8007490:	409a      	lsls	r2, r3
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d07e      	beq.n	80075ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	4798      	blx	r3
        }
        return;
 80074b6:	e079      	b.n	80075ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d01d      	beq.n	8007502 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d10d      	bne.n	80074f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d031      	beq.n	8007540 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	4798      	blx	r3
 80074e4:	e02c      	b.n	8007540 <HAL_DMA_IRQHandler+0x2a0>
 80074e6:	bf00      	nop
 80074e8:	2000001c 	.word	0x2000001c
 80074ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d023      	beq.n	8007540 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	4798      	blx	r3
 8007500:	e01e      	b.n	8007540 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800750c:	2b00      	cmp	r3, #0
 800750e:	d10f      	bne.n	8007530 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f022 0210 	bic.w	r2, r2, #16
 800751e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007534:	2b00      	cmp	r3, #0
 8007536:	d003      	beq.n	8007540 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007544:	2b00      	cmp	r3, #0
 8007546:	d032      	beq.n	80075ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800754c:	f003 0301 	and.w	r3, r3, #1
 8007550:	2b00      	cmp	r3, #0
 8007552:	d022      	beq.n	800759a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2205      	movs	r2, #5
 8007558:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f022 0201 	bic.w	r2, r2, #1
 800756a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	3301      	adds	r3, #1
 8007570:	60bb      	str	r3, [r7, #8]
 8007572:	697a      	ldr	r2, [r7, #20]
 8007574:	429a      	cmp	r2, r3
 8007576:	d307      	bcc.n	8007588 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 0301 	and.w	r3, r3, #1
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1f2      	bne.n	800756c <HAL_DMA_IRQHandler+0x2cc>
 8007586:	e000      	b.n	800758a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007588:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d005      	beq.n	80075ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	4798      	blx	r3
 80075aa:	e000      	b.n	80075ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80075ac:	bf00      	nop
    }
  }
}
 80075ae:	3718      	adds	r7, #24
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	607a      	str	r2, [r7, #4]
 80075d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80075e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	683a      	ldr	r2, [r7, #0]
 80075f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	2b40      	cmp	r3, #64	@ 0x40
 80075f8:	d108      	bne.n	800760c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800760a:	e007      	b.n	800761c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68ba      	ldr	r2, [r7, #8]
 8007612:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	60da      	str	r2, [r3, #12]
}
 800761c:	bf00      	nop
 800761e:	3714      	adds	r7, #20
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	b2db      	uxtb	r3, r3
 8007636:	3b10      	subs	r3, #16
 8007638:	4a13      	ldr	r2, [pc, #76]	@ (8007688 <DMA_CalcBaseAndBitshift+0x60>)
 800763a:	fba2 2303 	umull	r2, r3, r2, r3
 800763e:	091b      	lsrs	r3, r3, #4
 8007640:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007642:	4a12      	ldr	r2, [pc, #72]	@ (800768c <DMA_CalcBaseAndBitshift+0x64>)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	4413      	add	r3, r2
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	461a      	mov	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2b03      	cmp	r3, #3
 8007654:	d908      	bls.n	8007668 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	461a      	mov	r2, r3
 800765c:	4b0c      	ldr	r3, [pc, #48]	@ (8007690 <DMA_CalcBaseAndBitshift+0x68>)
 800765e:	4013      	ands	r3, r2
 8007660:	1d1a      	adds	r2, r3, #4
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	659a      	str	r2, [r3, #88]	@ 0x58
 8007666:	e006      	b.n	8007676 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	461a      	mov	r2, r3
 800766e:	4b08      	ldr	r3, [pc, #32]	@ (8007690 <DMA_CalcBaseAndBitshift+0x68>)
 8007670:	4013      	ands	r3, r2
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800767a:	4618      	mov	r0, r3
 800767c:	3714      	adds	r7, #20
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	aaaaaaab 	.word	0xaaaaaaab
 800768c:	0801ccfc 	.word	0x0801ccfc
 8007690:	fffffc00 	.word	0xfffffc00

08007694 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800769c:	2300      	movs	r3, #0
 800769e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d11f      	bne.n	80076ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	2b03      	cmp	r3, #3
 80076b2:	d856      	bhi.n	8007762 <DMA_CheckFifoParam+0xce>
 80076b4:	a201      	add	r2, pc, #4	@ (adr r2, 80076bc <DMA_CheckFifoParam+0x28>)
 80076b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ba:	bf00      	nop
 80076bc:	080076cd 	.word	0x080076cd
 80076c0:	080076df 	.word	0x080076df
 80076c4:	080076cd 	.word	0x080076cd
 80076c8:	08007763 	.word	0x08007763
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d046      	beq.n	8007766 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076dc:	e043      	b.n	8007766 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80076e6:	d140      	bne.n	800776a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076ec:	e03d      	b.n	800776a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	699b      	ldr	r3, [r3, #24]
 80076f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076f6:	d121      	bne.n	800773c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	2b03      	cmp	r3, #3
 80076fc:	d837      	bhi.n	800776e <DMA_CheckFifoParam+0xda>
 80076fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007704 <DMA_CheckFifoParam+0x70>)
 8007700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007704:	08007715 	.word	0x08007715
 8007708:	0800771b 	.word	0x0800771b
 800770c:	08007715 	.word	0x08007715
 8007710:	0800772d 	.word	0x0800772d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	73fb      	strb	r3, [r7, #15]
      break;
 8007718:	e030      	b.n	800777c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800771e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007722:	2b00      	cmp	r3, #0
 8007724:	d025      	beq.n	8007772 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800772a:	e022      	b.n	8007772 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007730:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007734:	d11f      	bne.n	8007776 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800773a:	e01c      	b.n	8007776 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	2b02      	cmp	r3, #2
 8007740:	d903      	bls.n	800774a <DMA_CheckFifoParam+0xb6>
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	2b03      	cmp	r3, #3
 8007746:	d003      	beq.n	8007750 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007748:	e018      	b.n	800777c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	73fb      	strb	r3, [r7, #15]
      break;
 800774e:	e015      	b.n	800777c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007754:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00e      	beq.n	800777a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	73fb      	strb	r3, [r7, #15]
      break;
 8007760:	e00b      	b.n	800777a <DMA_CheckFifoParam+0xe6>
      break;
 8007762:	bf00      	nop
 8007764:	e00a      	b.n	800777c <DMA_CheckFifoParam+0xe8>
      break;
 8007766:	bf00      	nop
 8007768:	e008      	b.n	800777c <DMA_CheckFifoParam+0xe8>
      break;
 800776a:	bf00      	nop
 800776c:	e006      	b.n	800777c <DMA_CheckFifoParam+0xe8>
      break;
 800776e:	bf00      	nop
 8007770:	e004      	b.n	800777c <DMA_CheckFifoParam+0xe8>
      break;
 8007772:	bf00      	nop
 8007774:	e002      	b.n	800777c <DMA_CheckFifoParam+0xe8>
      break;   
 8007776:	bf00      	nop
 8007778:	e000      	b.n	800777c <DMA_CheckFifoParam+0xe8>
      break;
 800777a:	bf00      	nop
    }
  } 
  
  return status; 
 800777c:	7bfb      	ldrb	r3, [r7, #15]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3714      	adds	r7, #20
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop

0800778c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d101      	bne.n	800779e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e039      	b.n	8007812 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d106      	bne.n	80077b8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f7fc fee0 	bl	8004578 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2202      	movs	r2, #2
 80077bc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	685a      	ldr	r2, [r3, #4]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	430a      	orrs	r2, r1
 80077d4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077dc:	f023 0107 	bic.w	r1, r3, #7
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	689a      	ldr	r2, [r3, #8]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	430a      	orrs	r2, r1
 80077ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80077f2:	4b0a      	ldr	r3, [pc, #40]	@ (800781c <HAL_DMA2D_Init+0x90>)
 80077f4:	4013      	ands	r3, r2
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	68d1      	ldr	r1, [r2, #12]
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	6812      	ldr	r2, [r2, #0]
 80077fe:	430b      	orrs	r3, r1
 8007800:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3708      	adds	r7, #8
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	ffffc000 	.word	0xffffc000

08007820 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f003 0301 	and.w	r3, r3, #1
 800783e:	2b00      	cmp	r3, #0
 8007840:	d026      	beq.n	8007890 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007848:	2b00      	cmp	r3, #0
 800784a:	d021      	beq.n	8007890 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800785a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007860:	f043 0201 	orr.w	r2, r3, #1
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2201      	movs	r2, #1
 800786e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2204      	movs	r2, #4
 8007874:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	695b      	ldr	r3, [r3, #20]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d003      	beq.n	8007890 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	695b      	ldr	r3, [r3, #20]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f003 0320 	and.w	r3, r3, #32
 8007896:	2b00      	cmp	r3, #0
 8007898:	d026      	beq.n	80078e8 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d021      	beq.n	80078e8 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80078b2:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2220      	movs	r2, #32
 80078ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078c0:	f043 0202 	orr.w	r2, r3, #2
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2204      	movs	r2, #4
 80078cc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	695b      	ldr	r3, [r3, #20]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d003      	beq.n	80078e8 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	695b      	ldr	r3, [r3, #20]
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f003 0308 	and.w	r3, r3, #8
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d026      	beq.n	8007940 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d021      	beq.n	8007940 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800790a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2208      	movs	r2, #8
 8007912:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007918:	f043 0204 	orr.w	r2, r3, #4
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2204      	movs	r2, #4
 8007924:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	695b      	ldr	r3, [r3, #20]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d003      	beq.n	8007940 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f003 0304 	and.w	r3, r3, #4
 8007946:	2b00      	cmp	r3, #0
 8007948:	d013      	beq.n	8007972 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00e      	beq.n	8007972 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007962:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2204      	movs	r2, #4
 800796a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 f853 	bl	8007a18 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f003 0302 	and.w	r3, r3, #2
 8007978:	2b00      	cmp	r3, #0
 800797a:	d024      	beq.n	80079c6 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007982:	2b00      	cmp	r3, #0
 8007984:	d01f      	beq.n	80079c6 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007994:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2202      	movs	r2, #2
 800799c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2201      	movs	r2, #1
 80079aa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d003      	beq.n	80079c6 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f003 0310 	and.w	r3, r3, #16
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d01f      	beq.n	8007a10 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d01a      	beq.n	8007a10 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80079e8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2210      	movs	r2, #16
 80079f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2201      	movs	r2, #1
 80079fe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 f80e 	bl	8007a2c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8007a10:	bf00      	nop
 8007a12:	3710      	adds	r7, #16
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8007a20:	bf00      	nop
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8007a34:	bf00      	nop
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b087      	sub	sp, #28
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d101      	bne.n	8007a60 <HAL_DMA2D_ConfigLayer+0x20>
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	e079      	b.n	8007b54 <HAL_DMA2D_ConfigLayer+0x114>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2202      	movs	r2, #2
 8007a6c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	011b      	lsls	r3, r3, #4
 8007a74:	3318      	adds	r3, #24
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	4413      	add	r3, r2
 8007a7a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	685a      	ldr	r2, [r3, #4]
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	041b      	lsls	r3, r3, #16
 8007a86:	4313      	orrs	r3, r2
 8007a88:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8007a8a:	4b35      	ldr	r3, [pc, #212]	@ (8007b60 <HAL_DMA2D_ConfigLayer+0x120>)
 8007a8c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	2b0a      	cmp	r3, #10
 8007a94:	d003      	beq.n	8007a9e <HAL_DMA2D_ConfigLayer+0x5e>
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	2b09      	cmp	r3, #9
 8007a9c:	d107      	bne.n	8007aae <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8007aa6:	697a      	ldr	r2, [r7, #20]
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	617b      	str	r3, [r7, #20]
 8007aac:	e005      	b.n	8007aba <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	061b      	lsls	r3, r3, #24
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d120      	bne.n	8007b02 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	43db      	mvns	r3, r3
 8007aca:	ea02 0103 	and.w	r1, r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	697a      	ldr	r2, [r7, #20]
 8007ad4:	430a      	orrs	r2, r1
 8007ad6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	693a      	ldr	r2, [r7, #16]
 8007ade:	6812      	ldr	r2, [r2, #0]
 8007ae0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	2b0a      	cmp	r3, #10
 8007ae8:	d003      	beq.n	8007af2 <HAL_DMA2D_ConfigLayer+0xb2>
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	2b09      	cmp	r3, #9
 8007af0:	d127      	bne.n	8007b42 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	68da      	ldr	r2, [r3, #12]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8007afe:	629a      	str	r2, [r3, #40]	@ 0x28
 8007b00:	e01f      	b.n	8007b42 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	69da      	ldr	r2, [r3, #28]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	43db      	mvns	r3, r3
 8007b0c:	ea02 0103 	and.w	r1, r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	697a      	ldr	r2, [r7, #20]
 8007b16:	430a      	orrs	r2, r1
 8007b18:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	693a      	ldr	r2, [r7, #16]
 8007b20:	6812      	ldr	r2, [r2, #0]
 8007b22:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	2b0a      	cmp	r3, #10
 8007b2a:	d003      	beq.n	8007b34 <HAL_DMA2D_ConfigLayer+0xf4>
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	2b09      	cmp	r3, #9
 8007b32:	d106      	bne.n	8007b42 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	68da      	ldr	r2, [r3, #12]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8007b40:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2201      	movs	r2, #1
 8007b46:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	371c      	adds	r7, #28
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr
 8007b60:	ff03000f 	.word	0xff03000f

08007b64 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d101      	bne.n	8007b76 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e086      	b.n	8007c84 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d106      	bne.n	8007b8e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2220      	movs	r2, #32
 8007b84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f7fc fd1b 	bl	80045c4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b8e:	4b3f      	ldr	r3, [pc, #252]	@ (8007c8c <HAL_ETH_Init+0x128>)
 8007b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b92:	4a3e      	ldr	r2, [pc, #248]	@ (8007c8c <HAL_ETH_Init+0x128>)
 8007b94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007b98:	6453      	str	r3, [r2, #68]	@ 0x44
 8007b9a:	4b3c      	ldr	r3, [pc, #240]	@ (8007c8c <HAL_ETH_Init+0x128>)
 8007b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ba2:	60bb      	str	r3, [r7, #8]
 8007ba4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8007ba6:	4b3a      	ldr	r3, [pc, #232]	@ (8007c90 <HAL_ETH_Init+0x12c>)
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	4a39      	ldr	r2, [pc, #228]	@ (8007c90 <HAL_ETH_Init+0x12c>)
 8007bac:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007bb0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8007bb2:	4b37      	ldr	r3, [pc, #220]	@ (8007c90 <HAL_ETH_Init+0x12c>)
 8007bb4:	685a      	ldr	r2, [r3, #4]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	4935      	ldr	r1, [pc, #212]	@ (8007c90 <HAL_ETH_Init+0x12c>)
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8007bc0:	4b33      	ldr	r3, [pc, #204]	@ (8007c90 <HAL_ETH_Init+0x12c>)
 8007bc2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	6812      	ldr	r2, [r2, #0]
 8007bd2:	f043 0301 	orr.w	r3, r3, #1
 8007bd6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007bda:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007bdc:	f7fe fc4c 	bl	8006478 <HAL_GetTick>
 8007be0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8007be2:	e011      	b.n	8007c08 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8007be4:	f7fe fc48 	bl	8006478 <HAL_GetTick>
 8007be8:	4602      	mov	r2, r0
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007bf2:	d909      	bls.n	8007c08 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2204      	movs	r2, #4
 8007bf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	22e0      	movs	r2, #224	@ 0xe0
 8007c00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	e03d      	b.n	8007c84 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 0301 	and.w	r3, r3, #1
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1e4      	bne.n	8007be4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f97a 	bl	8007f14 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 fa25 	bl	8008070 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fa7b 	bl	8008122 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	461a      	mov	r2, r3
 8007c32:	2100      	movs	r1, #0
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 f9e3 	bl	8008000 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8007c48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	4b0f      	ldr	r3, [pc, #60]	@ (8007c94 <HAL_ETH_Init+0x130>)
 8007c58:	430b      	orrs	r3, r1
 8007c5a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8007c6e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2210      	movs	r2, #16
 8007c7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	40023800 	.word	0x40023800
 8007c90:	40013800 	.word	0x40013800
 8007c94:	00020060 	.word	0x00020060

08007c98 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	4b53      	ldr	r3, [pc, #332]	@ (8007dfc <ETH_SetMACConfig+0x164>)
 8007cae:	4013      	ands	r3, r2
 8007cb0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	7b9b      	ldrb	r3, [r3, #14]
 8007cb6:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8007cb8:	683a      	ldr	r2, [r7, #0]
 8007cba:	7c12      	ldrb	r2, [r2, #16]
 8007cbc:	2a00      	cmp	r2, #0
 8007cbe:	d102      	bne.n	8007cc6 <ETH_SetMACConfig+0x2e>
 8007cc0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007cc4:	e000      	b.n	8007cc8 <ETH_SetMACConfig+0x30>
 8007cc6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8007cc8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8007cca:	683a      	ldr	r2, [r7, #0]
 8007ccc:	7c52      	ldrb	r2, [r2, #17]
 8007cce:	2a00      	cmp	r2, #0
 8007cd0:	d102      	bne.n	8007cd8 <ETH_SetMACConfig+0x40>
 8007cd2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007cd6:	e000      	b.n	8007cda <ETH_SetMACConfig+0x42>
 8007cd8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8007cda:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8007ce0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	7fdb      	ldrb	r3, [r3, #31]
 8007ce6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8007ce8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8007cee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8007cf0:	683a      	ldr	r2, [r7, #0]
 8007cf2:	7f92      	ldrb	r2, [r2, #30]
 8007cf4:	2a00      	cmp	r2, #0
 8007cf6:	d102      	bne.n	8007cfe <ETH_SetMACConfig+0x66>
 8007cf8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007cfc:	e000      	b.n	8007d00 <ETH_SetMACConfig+0x68>
 8007cfe:	2200      	movs	r2, #0
                        macconf->Speed |
 8007d00:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	7f1b      	ldrb	r3, [r3, #28]
 8007d06:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8007d08:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8007d0e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	791b      	ldrb	r3, [r3, #4]
 8007d14:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8007d16:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8007d18:	683a      	ldr	r2, [r7, #0]
 8007d1a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007d1e:	2a00      	cmp	r2, #0
 8007d20:	d102      	bne.n	8007d28 <ETH_SetMACConfig+0x90>
 8007d22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d26:	e000      	b.n	8007d2a <ETH_SetMACConfig+0x92>
 8007d28:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8007d2a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	7bdb      	ldrb	r3, [r3, #15]
 8007d30:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8007d32:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8007d38:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d40:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8007d42:	4313      	orrs	r3, r2
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007d5a:	2001      	movs	r0, #1
 8007d5c:	f7fe fb98 	bl	8006490 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	699b      	ldr	r3, [r3, #24]
 8007d6e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8007d76:	4013      	ands	r3, r2
 8007d78:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d7e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8007d80:	683a      	ldr	r2, [r7, #0]
 8007d82:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8007d86:	2a00      	cmp	r2, #0
 8007d88:	d101      	bne.n	8007d8e <ETH_SetMACConfig+0xf6>
 8007d8a:	2280      	movs	r2, #128	@ 0x80
 8007d8c:	e000      	b.n	8007d90 <ETH_SetMACConfig+0xf8>
 8007d8e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007d90:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8007d96:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8007d98:	683a      	ldr	r2, [r7, #0]
 8007d9a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8007d9e:	2a01      	cmp	r2, #1
 8007da0:	d101      	bne.n	8007da6 <ETH_SetMACConfig+0x10e>
 8007da2:	2208      	movs	r2, #8
 8007da4:	e000      	b.n	8007da8 <ETH_SetMACConfig+0x110>
 8007da6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8007da8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8007daa:	683a      	ldr	r2, [r7, #0]
 8007dac:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8007db0:	2a01      	cmp	r2, #1
 8007db2:	d101      	bne.n	8007db8 <ETH_SetMACConfig+0x120>
 8007db4:	2204      	movs	r2, #4
 8007db6:	e000      	b.n	8007dba <ETH_SetMACConfig+0x122>
 8007db8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8007dba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8007dbc:	683a      	ldr	r2, [r7, #0]
 8007dbe:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8007dc2:	2a01      	cmp	r2, #1
 8007dc4:	d101      	bne.n	8007dca <ETH_SetMACConfig+0x132>
 8007dc6:	2202      	movs	r2, #2
 8007dc8:	e000      	b.n	8007dcc <ETH_SetMACConfig+0x134>
 8007dca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	699b      	ldr	r3, [r3, #24]
 8007de2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007de4:	2001      	movs	r0, #1
 8007de6:	f7fe fb53 	bl	8006490 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	619a      	str	r2, [r3, #24]
}
 8007df2:	bf00      	nop
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	fd20810f 	.word	0xfd20810f

08007e00 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e12:	699b      	ldr	r3, [r3, #24]
 8007e14:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	4b3d      	ldr	r3, [pc, #244]	@ (8007f10 <ETH_SetDMAConfig+0x110>)
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	7b1b      	ldrb	r3, [r3, #12]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d102      	bne.n	8007e2c <ETH_SetDMAConfig+0x2c>
 8007e26:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007e2a:	e000      	b.n	8007e2e <ETH_SetDMAConfig+0x2e>
 8007e2c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	7b5b      	ldrb	r3, [r3, #13]
 8007e32:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007e34:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8007e36:	683a      	ldr	r2, [r7, #0]
 8007e38:	7f52      	ldrb	r2, [r2, #29]
 8007e3a:	2a00      	cmp	r2, #0
 8007e3c:	d102      	bne.n	8007e44 <ETH_SetDMAConfig+0x44>
 8007e3e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007e42:	e000      	b.n	8007e46 <ETH_SetDMAConfig+0x46>
 8007e44:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8007e46:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	7b9b      	ldrb	r3, [r3, #14]
 8007e4c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8007e4e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8007e54:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	7f1b      	ldrb	r3, [r3, #28]
 8007e5a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8007e5c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	7f9b      	ldrb	r3, [r3, #30]
 8007e62:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8007e64:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8007e6a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007e72:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007e74:	4313      	orrs	r3, r2
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e84:	461a      	mov	r2, r3
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e92:	699b      	ldr	r3, [r3, #24]
 8007e94:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007e96:	2001      	movs	r0, #1
 8007e98:	f7fe fafa 	bl	8006490 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	791b      	ldrb	r3, [r3, #4]
 8007eae:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007eb4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8007eba:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8007ec0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007ec8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8007eca:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ed0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8007ed2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8007ed8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	6812      	ldr	r2, [r2, #0]
 8007ede:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007ee2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007ee6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007ef4:	2001      	movs	r0, #1
 8007ef6:	f7fe facb 	bl	8006490 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f02:	461a      	mov	r2, r3
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6013      	str	r3, [r2, #0]
}
 8007f08:	bf00      	nop
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	f8de3f23 	.word	0xf8de3f23

08007f14 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b0a6      	sub	sp, #152	@ 0x98
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8007f22:	2301      	movs	r3, #1
 8007f24:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8007f32:	2301      	movs	r3, #1
 8007f34:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8007f44:	2301      	movs	r3, #1
 8007f46:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8007f50:	2300      	movs	r3, #0
 8007f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8007f56:	2300      	movs	r3, #0
 8007f58:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8007f60:	2300      	movs	r3, #0
 8007f62:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8007f64:	2300      	movs	r3, #0
 8007f66:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8007f70:	2300      	movs	r3, #0
 8007f72:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8007f76:	2300      	movs	r3, #0
 8007f78:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8007f7c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007f80:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8007f82:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8007f8e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007f92:	4619      	mov	r1, r3
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f7ff fe7f 	bl	8007c98 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8007fac:	2300      	movs	r3, #0
 8007fae:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8007fca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007fce:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8007fd0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007fd4:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8007fd6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007fda:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8007fea:	f107 0308 	add.w	r3, r7, #8
 8007fee:	4619      	mov	r1, r3
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f7ff ff05 	bl	8007e00 <ETH_SetDMAConfig>
}
 8007ff6:	bf00      	nop
 8007ff8:	3798      	adds	r7, #152	@ 0x98
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
	...

08008000 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8008000:	b480      	push	{r7}
 8008002:	b087      	sub	sp, #28
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	3305      	adds	r3, #5
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	021b      	lsls	r3, r3, #8
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	3204      	adds	r2, #4
 8008018:	7812      	ldrb	r2, [r2, #0]
 800801a:	4313      	orrs	r3, r2
 800801c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800801e:	68ba      	ldr	r2, [r7, #8]
 8008020:	4b11      	ldr	r3, [pc, #68]	@ (8008068 <ETH_MACAddressConfig+0x68>)
 8008022:	4413      	add	r3, r2
 8008024:	461a      	mov	r2, r3
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	3303      	adds	r3, #3
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	061a      	lsls	r2, r3, #24
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	3302      	adds	r3, #2
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	041b      	lsls	r3, r3, #16
 800803a:	431a      	orrs	r2, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	3301      	adds	r3, #1
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	021b      	lsls	r3, r3, #8
 8008044:	4313      	orrs	r3, r2
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	7812      	ldrb	r2, [r2, #0]
 800804a:	4313      	orrs	r3, r2
 800804c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800804e:	68ba      	ldr	r2, [r7, #8]
 8008050:	4b06      	ldr	r3, [pc, #24]	@ (800806c <ETH_MACAddressConfig+0x6c>)
 8008052:	4413      	add	r3, r2
 8008054:	461a      	mov	r2, r3
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	6013      	str	r3, [r2, #0]
}
 800805a:	bf00      	nop
 800805c:	371c      	adds	r7, #28
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	40028040 	.word	0x40028040
 800806c:	40028044 	.word	0x40028044

08008070 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8008070:	b480      	push	{r7}
 8008072:	b085      	sub	sp, #20
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8008078:	2300      	movs	r3, #0
 800807a:	60fb      	str	r3, [r7, #12]
 800807c:	e03e      	b.n	80080fc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	68d9      	ldr	r1, [r3, #12]
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	4613      	mov	r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	4413      	add	r3, r2
 800808a:	00db      	lsls	r3, r3, #3
 800808c:	440b      	add	r3, r1
 800808e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	2200      	movs	r2, #0
 8008094:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	2200      	movs	r2, #0
 800809a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	2200      	movs	r2, #0
 80080a0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	2200      	movs	r2, #0
 80080a6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80080a8:	68b9      	ldr	r1, [r7, #8]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	3206      	adds	r2, #6
 80080b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2b02      	cmp	r3, #2
 80080c4:	d80c      	bhi.n	80080e0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	68d9      	ldr	r1, [r3, #12]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	1c5a      	adds	r2, r3, #1
 80080ce:	4613      	mov	r3, r2
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	4413      	add	r3, r2
 80080d4:	00db      	lsls	r3, r3, #3
 80080d6:	440b      	add	r3, r1
 80080d8:	461a      	mov	r2, r3
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	60da      	str	r2, [r3, #12]
 80080de:	e004      	b.n	80080ea <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	461a      	mov	r2, r3
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	3301      	adds	r3, #1
 80080fa:	60fb      	str	r3, [r7, #12]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2b03      	cmp	r3, #3
 8008100:	d9bd      	bls.n	800807e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	68da      	ldr	r2, [r3, #12]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008114:	611a      	str	r2, [r3, #16]
}
 8008116:	bf00      	nop
 8008118:	3714      	adds	r7, #20
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr

08008122 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8008122:	b480      	push	{r7}
 8008124:	b085      	sub	sp, #20
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800812a:	2300      	movs	r3, #0
 800812c:	60fb      	str	r3, [r7, #12]
 800812e:	e048      	b.n	80081c2 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6919      	ldr	r1, [r3, #16]
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	4613      	mov	r3, r2
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	4413      	add	r3, r2
 800813c:	00db      	lsls	r3, r3, #3
 800813e:	440b      	add	r3, r1
 8008140:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	2200      	movs	r2, #0
 8008146:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	2200      	movs	r2, #0
 800814c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	2200      	movs	r2, #0
 8008152:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	2200      	movs	r2, #0
 8008158:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	2200      	movs	r2, #0
 800815e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	2200      	movs	r2, #0
 8008164:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800816c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	695b      	ldr	r3, [r3, #20]
 8008172:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8008186:	68b9      	ldr	r1, [r7, #8]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	68fa      	ldr	r2, [r7, #12]
 800818c:	3212      	adds	r2, #18
 800818e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2b02      	cmp	r3, #2
 8008196:	d80c      	bhi.n	80081b2 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6919      	ldr	r1, [r3, #16]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	1c5a      	adds	r2, r3, #1
 80081a0:	4613      	mov	r3, r2
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	4413      	add	r3, r2
 80081a6:	00db      	lsls	r3, r3, #3
 80081a8:	440b      	add	r3, r1
 80081aa:	461a      	mov	r2, r3
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	60da      	str	r2, [r3, #12]
 80081b0:	e004      	b.n	80081bc <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	691b      	ldr	r3, [r3, #16]
 80081b6:	461a      	mov	r2, r3
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	3301      	adds	r3, #1
 80081c0:	60fb      	str	r3, [r7, #12]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2b03      	cmp	r3, #3
 80081c6:	d9b3      	bls.n	8008130 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	691a      	ldr	r2, [r3, #16]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081f2:	60da      	str	r2, [r3, #12]
}
 80081f4:	bf00      	nop
 80081f6:	3714      	adds	r7, #20
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008200:	b480      	push	{r7}
 8008202:	b089      	sub	sp, #36	@ 0x24
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800820a:	2300      	movs	r3, #0
 800820c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800820e:	2300      	movs	r3, #0
 8008210:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8008212:	2300      	movs	r3, #0
 8008214:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8008216:	2300      	movs	r3, #0
 8008218:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800821a:	2300      	movs	r3, #0
 800821c:	61fb      	str	r3, [r7, #28]
 800821e:	e175      	b.n	800850c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008220:	2201      	movs	r2, #1
 8008222:	69fb      	ldr	r3, [r7, #28]
 8008224:	fa02 f303 	lsl.w	r3, r2, r3
 8008228:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	697a      	ldr	r2, [r7, #20]
 8008230:	4013      	ands	r3, r2
 8008232:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8008234:	693a      	ldr	r2, [r7, #16]
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	429a      	cmp	r2, r3
 800823a:	f040 8164 	bne.w	8008506 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	f003 0303 	and.w	r3, r3, #3
 8008246:	2b01      	cmp	r3, #1
 8008248:	d005      	beq.n	8008256 <HAL_GPIO_Init+0x56>
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	f003 0303 	and.w	r3, r3, #3
 8008252:	2b02      	cmp	r3, #2
 8008254:	d130      	bne.n	80082b8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	005b      	lsls	r3, r3, #1
 8008260:	2203      	movs	r2, #3
 8008262:	fa02 f303 	lsl.w	r3, r2, r3
 8008266:	43db      	mvns	r3, r3
 8008268:	69ba      	ldr	r2, [r7, #24]
 800826a:	4013      	ands	r3, r2
 800826c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	68da      	ldr	r2, [r3, #12]
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	005b      	lsls	r3, r3, #1
 8008276:	fa02 f303 	lsl.w	r3, r2, r3
 800827a:	69ba      	ldr	r2, [r7, #24]
 800827c:	4313      	orrs	r3, r2
 800827e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	69ba      	ldr	r2, [r7, #24]
 8008284:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800828c:	2201      	movs	r2, #1
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	fa02 f303 	lsl.w	r3, r2, r3
 8008294:	43db      	mvns	r3, r3
 8008296:	69ba      	ldr	r2, [r7, #24]
 8008298:	4013      	ands	r3, r2
 800829a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	091b      	lsrs	r3, r3, #4
 80082a2:	f003 0201 	and.w	r2, r3, #1
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	fa02 f303 	lsl.w	r3, r2, r3
 80082ac:	69ba      	ldr	r2, [r7, #24]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	69ba      	ldr	r2, [r7, #24]
 80082b6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	f003 0303 	and.w	r3, r3, #3
 80082c0:	2b03      	cmp	r3, #3
 80082c2:	d017      	beq.n	80082f4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	005b      	lsls	r3, r3, #1
 80082ce:	2203      	movs	r2, #3
 80082d0:	fa02 f303 	lsl.w	r3, r2, r3
 80082d4:	43db      	mvns	r3, r3
 80082d6:	69ba      	ldr	r2, [r7, #24]
 80082d8:	4013      	ands	r3, r2
 80082da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	689a      	ldr	r2, [r3, #8]
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	005b      	lsls	r3, r3, #1
 80082e4:	fa02 f303 	lsl.w	r3, r2, r3
 80082e8:	69ba      	ldr	r2, [r7, #24]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	69ba      	ldr	r2, [r7, #24]
 80082f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	f003 0303 	and.w	r3, r3, #3
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	d123      	bne.n	8008348 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	08da      	lsrs	r2, r3, #3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	3208      	adds	r2, #8
 8008308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800830c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	f003 0307 	and.w	r3, r3, #7
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	220f      	movs	r2, #15
 8008318:	fa02 f303 	lsl.w	r3, r2, r3
 800831c:	43db      	mvns	r3, r3
 800831e:	69ba      	ldr	r2, [r7, #24]
 8008320:	4013      	ands	r3, r2
 8008322:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	691a      	ldr	r2, [r3, #16]
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	f003 0307 	and.w	r3, r3, #7
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	fa02 f303 	lsl.w	r3, r2, r3
 8008334:	69ba      	ldr	r2, [r7, #24]
 8008336:	4313      	orrs	r3, r2
 8008338:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800833a:	69fb      	ldr	r3, [r7, #28]
 800833c:	08da      	lsrs	r2, r3, #3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	3208      	adds	r2, #8
 8008342:	69b9      	ldr	r1, [r7, #24]
 8008344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	005b      	lsls	r3, r3, #1
 8008352:	2203      	movs	r2, #3
 8008354:	fa02 f303 	lsl.w	r3, r2, r3
 8008358:	43db      	mvns	r3, r3
 800835a:	69ba      	ldr	r2, [r7, #24]
 800835c:	4013      	ands	r3, r2
 800835e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	f003 0203 	and.w	r2, r3, #3
 8008368:	69fb      	ldr	r3, [r7, #28]
 800836a:	005b      	lsls	r3, r3, #1
 800836c:	fa02 f303 	lsl.w	r3, r2, r3
 8008370:	69ba      	ldr	r2, [r7, #24]
 8008372:	4313      	orrs	r3, r2
 8008374:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	69ba      	ldr	r2, [r7, #24]
 800837a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008384:	2b00      	cmp	r3, #0
 8008386:	f000 80be 	beq.w	8008506 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800838a:	4b66      	ldr	r3, [pc, #408]	@ (8008524 <HAL_GPIO_Init+0x324>)
 800838c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800838e:	4a65      	ldr	r2, [pc, #404]	@ (8008524 <HAL_GPIO_Init+0x324>)
 8008390:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008394:	6453      	str	r3, [r2, #68]	@ 0x44
 8008396:	4b63      	ldr	r3, [pc, #396]	@ (8008524 <HAL_GPIO_Init+0x324>)
 8008398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800839a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800839e:	60fb      	str	r3, [r7, #12]
 80083a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80083a2:	4a61      	ldr	r2, [pc, #388]	@ (8008528 <HAL_GPIO_Init+0x328>)
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	089b      	lsrs	r3, r3, #2
 80083a8:	3302      	adds	r3, #2
 80083aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	f003 0303 	and.w	r3, r3, #3
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	220f      	movs	r2, #15
 80083ba:	fa02 f303 	lsl.w	r3, r2, r3
 80083be:	43db      	mvns	r3, r3
 80083c0:	69ba      	ldr	r2, [r7, #24]
 80083c2:	4013      	ands	r3, r2
 80083c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4a58      	ldr	r2, [pc, #352]	@ (800852c <HAL_GPIO_Init+0x32c>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d037      	beq.n	800843e <HAL_GPIO_Init+0x23e>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a57      	ldr	r2, [pc, #348]	@ (8008530 <HAL_GPIO_Init+0x330>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d031      	beq.n	800843a <HAL_GPIO_Init+0x23a>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4a56      	ldr	r2, [pc, #344]	@ (8008534 <HAL_GPIO_Init+0x334>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d02b      	beq.n	8008436 <HAL_GPIO_Init+0x236>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a55      	ldr	r2, [pc, #340]	@ (8008538 <HAL_GPIO_Init+0x338>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d025      	beq.n	8008432 <HAL_GPIO_Init+0x232>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	4a54      	ldr	r2, [pc, #336]	@ (800853c <HAL_GPIO_Init+0x33c>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d01f      	beq.n	800842e <HAL_GPIO_Init+0x22e>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4a53      	ldr	r2, [pc, #332]	@ (8008540 <HAL_GPIO_Init+0x340>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d019      	beq.n	800842a <HAL_GPIO_Init+0x22a>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4a52      	ldr	r2, [pc, #328]	@ (8008544 <HAL_GPIO_Init+0x344>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d013      	beq.n	8008426 <HAL_GPIO_Init+0x226>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4a51      	ldr	r2, [pc, #324]	@ (8008548 <HAL_GPIO_Init+0x348>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d00d      	beq.n	8008422 <HAL_GPIO_Init+0x222>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4a50      	ldr	r2, [pc, #320]	@ (800854c <HAL_GPIO_Init+0x34c>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d007      	beq.n	800841e <HAL_GPIO_Init+0x21e>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a4f      	ldr	r2, [pc, #316]	@ (8008550 <HAL_GPIO_Init+0x350>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d101      	bne.n	800841a <HAL_GPIO_Init+0x21a>
 8008416:	2309      	movs	r3, #9
 8008418:	e012      	b.n	8008440 <HAL_GPIO_Init+0x240>
 800841a:	230a      	movs	r3, #10
 800841c:	e010      	b.n	8008440 <HAL_GPIO_Init+0x240>
 800841e:	2308      	movs	r3, #8
 8008420:	e00e      	b.n	8008440 <HAL_GPIO_Init+0x240>
 8008422:	2307      	movs	r3, #7
 8008424:	e00c      	b.n	8008440 <HAL_GPIO_Init+0x240>
 8008426:	2306      	movs	r3, #6
 8008428:	e00a      	b.n	8008440 <HAL_GPIO_Init+0x240>
 800842a:	2305      	movs	r3, #5
 800842c:	e008      	b.n	8008440 <HAL_GPIO_Init+0x240>
 800842e:	2304      	movs	r3, #4
 8008430:	e006      	b.n	8008440 <HAL_GPIO_Init+0x240>
 8008432:	2303      	movs	r3, #3
 8008434:	e004      	b.n	8008440 <HAL_GPIO_Init+0x240>
 8008436:	2302      	movs	r3, #2
 8008438:	e002      	b.n	8008440 <HAL_GPIO_Init+0x240>
 800843a:	2301      	movs	r3, #1
 800843c:	e000      	b.n	8008440 <HAL_GPIO_Init+0x240>
 800843e:	2300      	movs	r3, #0
 8008440:	69fa      	ldr	r2, [r7, #28]
 8008442:	f002 0203 	and.w	r2, r2, #3
 8008446:	0092      	lsls	r2, r2, #2
 8008448:	4093      	lsls	r3, r2
 800844a:	69ba      	ldr	r2, [r7, #24]
 800844c:	4313      	orrs	r3, r2
 800844e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008450:	4935      	ldr	r1, [pc, #212]	@ (8008528 <HAL_GPIO_Init+0x328>)
 8008452:	69fb      	ldr	r3, [r7, #28]
 8008454:	089b      	lsrs	r3, r3, #2
 8008456:	3302      	adds	r3, #2
 8008458:	69ba      	ldr	r2, [r7, #24]
 800845a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800845e:	4b3d      	ldr	r3, [pc, #244]	@ (8008554 <HAL_GPIO_Init+0x354>)
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	43db      	mvns	r3, r3
 8008468:	69ba      	ldr	r2, [r7, #24]
 800846a:	4013      	ands	r3, r2
 800846c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008476:	2b00      	cmp	r3, #0
 8008478:	d003      	beq.n	8008482 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800847a:	69ba      	ldr	r2, [r7, #24]
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	4313      	orrs	r3, r2
 8008480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008482:	4a34      	ldr	r2, [pc, #208]	@ (8008554 <HAL_GPIO_Init+0x354>)
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008488:	4b32      	ldr	r3, [pc, #200]	@ (8008554 <HAL_GPIO_Init+0x354>)
 800848a:	68db      	ldr	r3, [r3, #12]
 800848c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	43db      	mvns	r3, r3
 8008492:	69ba      	ldr	r2, [r7, #24]
 8008494:	4013      	ands	r3, r2
 8008496:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d003      	beq.n	80084ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80084a4:	69ba      	ldr	r2, [r7, #24]
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	4313      	orrs	r3, r2
 80084aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80084ac:	4a29      	ldr	r2, [pc, #164]	@ (8008554 <HAL_GPIO_Init+0x354>)
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80084b2:	4b28      	ldr	r3, [pc, #160]	@ (8008554 <HAL_GPIO_Init+0x354>)
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	43db      	mvns	r3, r3
 80084bc:	69ba      	ldr	r2, [r7, #24]
 80084be:	4013      	ands	r3, r2
 80084c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d003      	beq.n	80084d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80084ce:	69ba      	ldr	r2, [r7, #24]
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80084d6:	4a1f      	ldr	r2, [pc, #124]	@ (8008554 <HAL_GPIO_Init+0x354>)
 80084d8:	69bb      	ldr	r3, [r7, #24]
 80084da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80084dc:	4b1d      	ldr	r3, [pc, #116]	@ (8008554 <HAL_GPIO_Init+0x354>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	43db      	mvns	r3, r3
 80084e6:	69ba      	ldr	r2, [r7, #24]
 80084e8:	4013      	ands	r3, r2
 80084ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d003      	beq.n	8008500 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80084f8:	69ba      	ldr	r2, [r7, #24]
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	4313      	orrs	r3, r2
 80084fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008500:	4a14      	ldr	r2, [pc, #80]	@ (8008554 <HAL_GPIO_Init+0x354>)
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	3301      	adds	r3, #1
 800850a:	61fb      	str	r3, [r7, #28]
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	2b0f      	cmp	r3, #15
 8008510:	f67f ae86 	bls.w	8008220 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008514:	bf00      	nop
 8008516:	bf00      	nop
 8008518:	3724      	adds	r7, #36	@ 0x24
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop
 8008524:	40023800 	.word	0x40023800
 8008528:	40013800 	.word	0x40013800
 800852c:	40020000 	.word	0x40020000
 8008530:	40020400 	.word	0x40020400
 8008534:	40020800 	.word	0x40020800
 8008538:	40020c00 	.word	0x40020c00
 800853c:	40021000 	.word	0x40021000
 8008540:	40021400 	.word	0x40021400
 8008544:	40021800 	.word	0x40021800
 8008548:	40021c00 	.word	0x40021c00
 800854c:	40022000 	.word	0x40022000
 8008550:	40022400 	.word	0x40022400
 8008554:	40013c00 	.word	0x40013c00

08008558 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	460b      	mov	r3, r1
 8008562:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	691a      	ldr	r2, [r3, #16]
 8008568:	887b      	ldrh	r3, [r7, #2]
 800856a:	4013      	ands	r3, r2
 800856c:	2b00      	cmp	r3, #0
 800856e:	d002      	beq.n	8008576 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008570:	2301      	movs	r3, #1
 8008572:	73fb      	strb	r3, [r7, #15]
 8008574:	e001      	b.n	800857a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008576:	2300      	movs	r3, #0
 8008578:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800857a:	7bfb      	ldrb	r3, [r7, #15]
}
 800857c:	4618      	mov	r0, r3
 800857e:	3714      	adds	r7, #20
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	460b      	mov	r3, r1
 8008592:	807b      	strh	r3, [r7, #2]
 8008594:	4613      	mov	r3, r2
 8008596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008598:	787b      	ldrb	r3, [r7, #1]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d003      	beq.n	80085a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800859e:	887a      	ldrh	r2, [r7, #2]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80085a4:	e003      	b.n	80085ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80085a6:	887b      	ldrh	r3, [r7, #2]
 80085a8:	041a      	lsls	r2, r3, #16
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	619a      	str	r2, [r3, #24]
}
 80085ae:	bf00      	nop
 80085b0:	370c      	adds	r7, #12
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b086      	sub	sp, #24
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4618      	mov	r0, r3
 80085d2:	f009 f951 	bl	8011878 <USB_GetMode>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b01      	cmp	r3, #1
 80085da:	f040 80fb 	bne.w	80087d4 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4618      	mov	r0, r3
 80085e4:	f009 f914 	bl	8011810 <USB_ReadInterrupts>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	f000 80f1 	beq.w	80087d2 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4618      	mov	r0, r3
 80085f6:	f009 f90b 	bl	8011810 <USB_ReadInterrupts>
 80085fa:	4603      	mov	r3, r0
 80085fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008600:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008604:	d104      	bne.n	8008610 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800860e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4618      	mov	r0, r3
 8008616:	f009 f8fb 	bl	8011810 <USB_ReadInterrupts>
 800861a:	4603      	mov	r3, r0
 800861c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008620:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008624:	d104      	bne.n	8008630 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800862e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4618      	mov	r0, r3
 8008636:	f009 f8eb 	bl	8011810 <USB_ReadInterrupts>
 800863a:	4603      	mov	r3, r0
 800863c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008640:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008644:	d104      	bne.n	8008650 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800864e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4618      	mov	r0, r3
 8008656:	f009 f8db 	bl	8011810 <USB_ReadInterrupts>
 800865a:	4603      	mov	r3, r0
 800865c:	f003 0302 	and.w	r3, r3, #2
 8008660:	2b02      	cmp	r3, #2
 8008662:	d103      	bne.n	800866c <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2202      	movs	r2, #2
 800866a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4618      	mov	r0, r3
 8008672:	f009 f8cd 	bl	8011810 <USB_ReadInterrupts>
 8008676:	4603      	mov	r3, r0
 8008678:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800867c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008680:	d120      	bne.n	80086c4 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800868a:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 0301 	and.w	r3, r3, #1
 8008698:	2b00      	cmp	r3, #0
 800869a:	d113      	bne.n	80086c4 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800869c:	2110      	movs	r1, #16
 800869e:	6938      	ldr	r0, [r7, #16]
 80086a0:	f008 fffe 	bl	80116a0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80086a4:	6938      	ldr	r0, [r7, #16]
 80086a6:	f009 f82d 	bl	8011704 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	7a5b      	ldrb	r3, [r3, #9]
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d105      	bne.n	80086be <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2101      	movs	r1, #1
 80086b8:	4618      	mov	r0, r3
 80086ba:	f009 f8eb 	bl	8011894 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f00e ffd4 	bl	801766c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4618      	mov	r0, r3
 80086ca:	f009 f8a1 	bl	8011810 <USB_ReadInterrupts>
 80086ce:	4603      	mov	r3, r0
 80086d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80086d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086d8:	d102      	bne.n	80086e0 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f001 fca1 	bl	800a022 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4618      	mov	r0, r3
 80086e6:	f009 f893 	bl	8011810 <USB_ReadInterrupts>
 80086ea:	4603      	mov	r3, r0
 80086ec:	f003 0308 	and.w	r3, r3, #8
 80086f0:	2b08      	cmp	r3, #8
 80086f2:	d106      	bne.n	8008702 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f00e ff9d 	bl	8017634 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2208      	movs	r2, #8
 8008700:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4618      	mov	r0, r3
 8008708:	f009 f882 	bl	8011810 <USB_ReadInterrupts>
 800870c:	4603      	mov	r3, r0
 800870e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008712:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008716:	d139      	bne.n	800878c <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4618      	mov	r0, r3
 800871e:	f009 f8f6 	bl	801190e <USB_HC_ReadInterrupt>
 8008722:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8008724:	2300      	movs	r3, #0
 8008726:	617b      	str	r3, [r7, #20]
 8008728:	e025      	b.n	8008776 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	f003 030f 	and.w	r3, r3, #15
 8008730:	68ba      	ldr	r2, [r7, #8]
 8008732:	fa22 f303 	lsr.w	r3, r2, r3
 8008736:	f003 0301 	and.w	r3, r3, #1
 800873a:	2b00      	cmp	r3, #0
 800873c:	d018      	beq.n	8008770 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	015a      	lsls	r2, r3, #5
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	4413      	add	r3, r2
 8008746:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008750:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008754:	d106      	bne.n	8008764 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	b2db      	uxtb	r3, r3
 800875a:	4619      	mov	r1, r3
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 f859 	bl	8008814 <HCD_HC_IN_IRQHandler>
 8008762:	e005      	b.n	8008770 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	b2db      	uxtb	r3, r3
 8008768:	4619      	mov	r1, r3
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 febb 	bl	80094e6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	3301      	adds	r3, #1
 8008774:	617b      	str	r3, [r7, #20]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	795b      	ldrb	r3, [r3, #5]
 800877a:	461a      	mov	r2, r3
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	4293      	cmp	r3, r2
 8008780:	d3d3      	bcc.n	800872a <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800878a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4618      	mov	r0, r3
 8008792:	f009 f83d 	bl	8011810 <USB_ReadInterrupts>
 8008796:	4603      	mov	r3, r0
 8008798:	f003 0310 	and.w	r3, r3, #16
 800879c:	2b10      	cmp	r3, #16
 800879e:	d101      	bne.n	80087a4 <HAL_HCD_IRQHandler+0x1ea>
 80087a0:	2301      	movs	r3, #1
 80087a2:	e000      	b.n	80087a6 <HAL_HCD_IRQHandler+0x1ec>
 80087a4:	2300      	movs	r3, #0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d014      	beq.n	80087d4 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	699a      	ldr	r2, [r3, #24]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f022 0210 	bic.w	r2, r2, #16
 80087b8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f001 fb52 	bl	8009e64 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	699a      	ldr	r2, [r3, #24]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f042 0210 	orr.w	r2, r2, #16
 80087ce:	619a      	str	r2, [r3, #24]
 80087d0:	e000      	b.n	80087d4 <HAL_HCD_IRQHandler+0x21a>
      return;
 80087d2:	bf00      	nop
    }
  }
}
 80087d4:	3718      	adds	r7, #24
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b082      	sub	sp, #8
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d101      	bne.n	80087f0 <HAL_HCD_Stop+0x16>
 80087ec:	2302      	movs	r3, #2
 80087ee:	e00d      	b.n	800880c <HAL_HCD_Stop+0x32>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4618      	mov	r0, r3
 80087fe:	f009 f9b7 	bl	8011b70 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	3708      	adds	r7, #8
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b086      	sub	sp, #24
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	460b      	mov	r3, r1
 800881e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	78fa      	ldrb	r2, [r7, #3]
 8008830:	4611      	mov	r1, r2
 8008832:	4618      	mov	r0, r3
 8008834:	f008 ffff 	bl	8011836 <USB_ReadChInterrupts>
 8008838:	4603      	mov	r3, r0
 800883a:	f003 0304 	and.w	r3, r3, #4
 800883e:	2b04      	cmp	r3, #4
 8008840:	d11a      	bne.n	8008878 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8008842:	78fb      	ldrb	r3, [r7, #3]
 8008844:	015a      	lsls	r2, r3, #5
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	4413      	add	r3, r2
 800884a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800884e:	461a      	mov	r2, r3
 8008850:	2304      	movs	r3, #4
 8008852:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8008854:	78fa      	ldrb	r2, [r7, #3]
 8008856:	6879      	ldr	r1, [r7, #4]
 8008858:	4613      	mov	r3, r2
 800885a:	011b      	lsls	r3, r3, #4
 800885c:	1a9b      	subs	r3, r3, r2
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	440b      	add	r3, r1
 8008862:	334d      	adds	r3, #77	@ 0x4d
 8008864:	2207      	movs	r2, #7
 8008866:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	78fa      	ldrb	r2, [r7, #3]
 800886e:	4611      	mov	r1, r2
 8008870:	4618      	mov	r0, r3
 8008872:	f009 f85d 	bl	8011930 <USB_HC_Halt>
 8008876:	e09e      	b.n	80089b6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	78fa      	ldrb	r2, [r7, #3]
 800887e:	4611      	mov	r1, r2
 8008880:	4618      	mov	r0, r3
 8008882:	f008 ffd8 	bl	8011836 <USB_ReadChInterrupts>
 8008886:	4603      	mov	r3, r0
 8008888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800888c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008890:	d11b      	bne.n	80088ca <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8008892:	78fb      	ldrb	r3, [r7, #3]
 8008894:	015a      	lsls	r2, r3, #5
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	4413      	add	r3, r2
 800889a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800889e:	461a      	mov	r2, r3
 80088a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80088a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80088a6:	78fa      	ldrb	r2, [r7, #3]
 80088a8:	6879      	ldr	r1, [r7, #4]
 80088aa:	4613      	mov	r3, r2
 80088ac:	011b      	lsls	r3, r3, #4
 80088ae:	1a9b      	subs	r3, r3, r2
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	440b      	add	r3, r1
 80088b4:	334d      	adds	r3, #77	@ 0x4d
 80088b6:	2208      	movs	r2, #8
 80088b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	78fa      	ldrb	r2, [r7, #3]
 80088c0:	4611      	mov	r1, r2
 80088c2:	4618      	mov	r0, r3
 80088c4:	f009 f834 	bl	8011930 <USB_HC_Halt>
 80088c8:	e075      	b.n	80089b6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	78fa      	ldrb	r2, [r7, #3]
 80088d0:	4611      	mov	r1, r2
 80088d2:	4618      	mov	r0, r3
 80088d4:	f008 ffaf 	bl	8011836 <USB_ReadChInterrupts>
 80088d8:	4603      	mov	r3, r0
 80088da:	f003 0308 	and.w	r3, r3, #8
 80088de:	2b08      	cmp	r3, #8
 80088e0:	d11a      	bne.n	8008918 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80088e2:	78fb      	ldrb	r3, [r7, #3]
 80088e4:	015a      	lsls	r2, r3, #5
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	4413      	add	r3, r2
 80088ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088ee:	461a      	mov	r2, r3
 80088f0:	2308      	movs	r3, #8
 80088f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80088f4:	78fa      	ldrb	r2, [r7, #3]
 80088f6:	6879      	ldr	r1, [r7, #4]
 80088f8:	4613      	mov	r3, r2
 80088fa:	011b      	lsls	r3, r3, #4
 80088fc:	1a9b      	subs	r3, r3, r2
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	440b      	add	r3, r1
 8008902:	334d      	adds	r3, #77	@ 0x4d
 8008904:	2206      	movs	r2, #6
 8008906:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	78fa      	ldrb	r2, [r7, #3]
 800890e:	4611      	mov	r1, r2
 8008910:	4618      	mov	r0, r3
 8008912:	f009 f80d 	bl	8011930 <USB_HC_Halt>
 8008916:	e04e      	b.n	80089b6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	78fa      	ldrb	r2, [r7, #3]
 800891e:	4611      	mov	r1, r2
 8008920:	4618      	mov	r0, r3
 8008922:	f008 ff88 	bl	8011836 <USB_ReadChInterrupts>
 8008926:	4603      	mov	r3, r0
 8008928:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800892c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008930:	d11b      	bne.n	800896a <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8008932:	78fb      	ldrb	r3, [r7, #3]
 8008934:	015a      	lsls	r2, r3, #5
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	4413      	add	r3, r2
 800893a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800893e:	461a      	mov	r2, r3
 8008940:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008944:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8008946:	78fa      	ldrb	r2, [r7, #3]
 8008948:	6879      	ldr	r1, [r7, #4]
 800894a:	4613      	mov	r3, r2
 800894c:	011b      	lsls	r3, r3, #4
 800894e:	1a9b      	subs	r3, r3, r2
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	440b      	add	r3, r1
 8008954:	334d      	adds	r3, #77	@ 0x4d
 8008956:	2209      	movs	r2, #9
 8008958:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	78fa      	ldrb	r2, [r7, #3]
 8008960:	4611      	mov	r1, r2
 8008962:	4618      	mov	r0, r3
 8008964:	f008 ffe4 	bl	8011930 <USB_HC_Halt>
 8008968:	e025      	b.n	80089b6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	78fa      	ldrb	r2, [r7, #3]
 8008970:	4611      	mov	r1, r2
 8008972:	4618      	mov	r0, r3
 8008974:	f008 ff5f 	bl	8011836 <USB_ReadChInterrupts>
 8008978:	4603      	mov	r3, r0
 800897a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800897e:	2b80      	cmp	r3, #128	@ 0x80
 8008980:	d119      	bne.n	80089b6 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8008982:	78fb      	ldrb	r3, [r7, #3]
 8008984:	015a      	lsls	r2, r3, #5
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	4413      	add	r3, r2
 800898a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800898e:	461a      	mov	r2, r3
 8008990:	2380      	movs	r3, #128	@ 0x80
 8008992:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8008994:	78fa      	ldrb	r2, [r7, #3]
 8008996:	6879      	ldr	r1, [r7, #4]
 8008998:	4613      	mov	r3, r2
 800899a:	011b      	lsls	r3, r3, #4
 800899c:	1a9b      	subs	r3, r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	440b      	add	r3, r1
 80089a2:	334d      	adds	r3, #77	@ 0x4d
 80089a4:	2207      	movs	r2, #7
 80089a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	78fa      	ldrb	r2, [r7, #3]
 80089ae:	4611      	mov	r1, r2
 80089b0:	4618      	mov	r0, r3
 80089b2:	f008 ffbd 	bl	8011930 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	78fa      	ldrb	r2, [r7, #3]
 80089bc:	4611      	mov	r1, r2
 80089be:	4618      	mov	r0, r3
 80089c0:	f008 ff39 	bl	8011836 <USB_ReadChInterrupts>
 80089c4:	4603      	mov	r3, r0
 80089c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80089ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089ce:	d112      	bne.n	80089f6 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	78fa      	ldrb	r2, [r7, #3]
 80089d6:	4611      	mov	r1, r2
 80089d8:	4618      	mov	r0, r3
 80089da:	f008 ffa9 	bl	8011930 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80089de:	78fb      	ldrb	r3, [r7, #3]
 80089e0:	015a      	lsls	r2, r3, #5
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	4413      	add	r3, r2
 80089e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089ea:	461a      	mov	r2, r3
 80089ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80089f0:	6093      	str	r3, [r2, #8]
 80089f2:	f000 bd75 	b.w	80094e0 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	78fa      	ldrb	r2, [r7, #3]
 80089fc:	4611      	mov	r1, r2
 80089fe:	4618      	mov	r0, r3
 8008a00:	f008 ff19 	bl	8011836 <USB_ReadChInterrupts>
 8008a04:	4603      	mov	r3, r0
 8008a06:	f003 0301 	and.w	r3, r3, #1
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	f040 8128 	bne.w	8008c60 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8008a10:	78fb      	ldrb	r3, [r7, #3]
 8008a12:	015a      	lsls	r2, r3, #5
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	4413      	add	r3, r2
 8008a18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	2320      	movs	r3, #32
 8008a20:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8008a22:	78fa      	ldrb	r2, [r7, #3]
 8008a24:	6879      	ldr	r1, [r7, #4]
 8008a26:	4613      	mov	r3, r2
 8008a28:	011b      	lsls	r3, r3, #4
 8008a2a:	1a9b      	subs	r3, r3, r2
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	440b      	add	r3, r1
 8008a30:	331b      	adds	r3, #27
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d119      	bne.n	8008a6c <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8008a38:	78fa      	ldrb	r2, [r7, #3]
 8008a3a:	6879      	ldr	r1, [r7, #4]
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	011b      	lsls	r3, r3, #4
 8008a40:	1a9b      	subs	r3, r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	440b      	add	r3, r1
 8008a46:	331b      	adds	r3, #27
 8008a48:	2200      	movs	r2, #0
 8008a4a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008a4c:	78fb      	ldrb	r3, [r7, #3]
 8008a4e:	015a      	lsls	r2, r3, #5
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	4413      	add	r3, r2
 8008a54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	78fa      	ldrb	r2, [r7, #3]
 8008a5c:	0151      	lsls	r1, r2, #5
 8008a5e:	693a      	ldr	r2, [r7, #16]
 8008a60:	440a      	add	r2, r1
 8008a62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a6a:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	799b      	ldrb	r3, [r3, #6]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d01b      	beq.n	8008aac <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8008a74:	78fa      	ldrb	r2, [r7, #3]
 8008a76:	6879      	ldr	r1, [r7, #4]
 8008a78:	4613      	mov	r3, r2
 8008a7a:	011b      	lsls	r3, r3, #4
 8008a7c:	1a9b      	subs	r3, r3, r2
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	440b      	add	r3, r1
 8008a82:	3330      	adds	r3, #48	@ 0x30
 8008a84:	6819      	ldr	r1, [r3, #0]
 8008a86:	78fb      	ldrb	r3, [r7, #3]
 8008a88:	015a      	lsls	r2, r3, #5
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	4413      	add	r3, r2
 8008a8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a92:	691b      	ldr	r3, [r3, #16]
 8008a94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a98:	78fa      	ldrb	r2, [r7, #3]
 8008a9a:	1ac9      	subs	r1, r1, r3
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	011b      	lsls	r3, r3, #4
 8008aa2:	1a9b      	subs	r3, r3, r2
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	4403      	add	r3, r0
 8008aa8:	3338      	adds	r3, #56	@ 0x38
 8008aaa:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8008aac:	78fa      	ldrb	r2, [r7, #3]
 8008aae:	6879      	ldr	r1, [r7, #4]
 8008ab0:	4613      	mov	r3, r2
 8008ab2:	011b      	lsls	r3, r3, #4
 8008ab4:	1a9b      	subs	r3, r3, r2
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	440b      	add	r3, r1
 8008aba:	334d      	adds	r3, #77	@ 0x4d
 8008abc:	2201      	movs	r2, #1
 8008abe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8008ac0:	78fa      	ldrb	r2, [r7, #3]
 8008ac2:	6879      	ldr	r1, [r7, #4]
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	011b      	lsls	r3, r3, #4
 8008ac8:	1a9b      	subs	r3, r3, r2
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	440b      	add	r3, r1
 8008ace:	3344      	adds	r3, #68	@ 0x44
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8008ad4:	78fb      	ldrb	r3, [r7, #3]
 8008ad6:	015a      	lsls	r2, r3, #5
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	4413      	add	r3, r2
 8008adc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008ae6:	78fa      	ldrb	r2, [r7, #3]
 8008ae8:	6879      	ldr	r1, [r7, #4]
 8008aea:	4613      	mov	r3, r2
 8008aec:	011b      	lsls	r3, r3, #4
 8008aee:	1a9b      	subs	r3, r3, r2
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	440b      	add	r3, r1
 8008af4:	3326      	adds	r3, #38	@ 0x26
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d00a      	beq.n	8008b12 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008afc:	78fa      	ldrb	r2, [r7, #3]
 8008afe:	6879      	ldr	r1, [r7, #4]
 8008b00:	4613      	mov	r3, r2
 8008b02:	011b      	lsls	r3, r3, #4
 8008b04:	1a9b      	subs	r3, r3, r2
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	440b      	add	r3, r1
 8008b0a:	3326      	adds	r3, #38	@ 0x26
 8008b0c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d110      	bne.n	8008b34 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	78fa      	ldrb	r2, [r7, #3]
 8008b18:	4611      	mov	r1, r2
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f008 ff08 	bl	8011930 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8008b20:	78fb      	ldrb	r3, [r7, #3]
 8008b22:	015a      	lsls	r2, r3, #5
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	4413      	add	r3, r2
 8008b28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	2310      	movs	r3, #16
 8008b30:	6093      	str	r3, [r2, #8]
 8008b32:	e03d      	b.n	8008bb0 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8008b34:	78fa      	ldrb	r2, [r7, #3]
 8008b36:	6879      	ldr	r1, [r7, #4]
 8008b38:	4613      	mov	r3, r2
 8008b3a:	011b      	lsls	r3, r3, #4
 8008b3c:	1a9b      	subs	r3, r3, r2
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	440b      	add	r3, r1
 8008b42:	3326      	adds	r3, #38	@ 0x26
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	2b03      	cmp	r3, #3
 8008b48:	d00a      	beq.n	8008b60 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8008b4a:	78fa      	ldrb	r2, [r7, #3]
 8008b4c:	6879      	ldr	r1, [r7, #4]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	011b      	lsls	r3, r3, #4
 8008b52:	1a9b      	subs	r3, r3, r2
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	440b      	add	r3, r1
 8008b58:	3326      	adds	r3, #38	@ 0x26
 8008b5a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d127      	bne.n	8008bb0 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008b60:	78fb      	ldrb	r3, [r7, #3]
 8008b62:	015a      	lsls	r2, r3, #5
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	4413      	add	r3, r2
 8008b68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	78fa      	ldrb	r2, [r7, #3]
 8008b70:	0151      	lsls	r1, r2, #5
 8008b72:	693a      	ldr	r2, [r7, #16]
 8008b74:	440a      	add	r2, r1
 8008b76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b7a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008b7e:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8008b80:	78fa      	ldrb	r2, [r7, #3]
 8008b82:	6879      	ldr	r1, [r7, #4]
 8008b84:	4613      	mov	r3, r2
 8008b86:	011b      	lsls	r3, r3, #4
 8008b88:	1a9b      	subs	r3, r3, r2
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	440b      	add	r3, r1
 8008b8e:	334c      	adds	r3, #76	@ 0x4c
 8008b90:	2201      	movs	r2, #1
 8008b92:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8008b94:	78fa      	ldrb	r2, [r7, #3]
 8008b96:	6879      	ldr	r1, [r7, #4]
 8008b98:	4613      	mov	r3, r2
 8008b9a:	011b      	lsls	r3, r3, #4
 8008b9c:	1a9b      	subs	r3, r3, r2
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	440b      	add	r3, r1
 8008ba2:	334c      	adds	r3, #76	@ 0x4c
 8008ba4:	781a      	ldrb	r2, [r3, #0]
 8008ba6:	78fb      	ldrb	r3, [r7, #3]
 8008ba8:	4619      	mov	r1, r3
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f00e fd6c 	bl	8017688 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	799b      	ldrb	r3, [r3, #6]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d13b      	bne.n	8008c30 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8008bb8:	78fa      	ldrb	r2, [r7, #3]
 8008bba:	6879      	ldr	r1, [r7, #4]
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	011b      	lsls	r3, r3, #4
 8008bc0:	1a9b      	subs	r3, r3, r2
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	440b      	add	r3, r1
 8008bc6:	3338      	adds	r3, #56	@ 0x38
 8008bc8:	6819      	ldr	r1, [r3, #0]
 8008bca:	78fa      	ldrb	r2, [r7, #3]
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	4613      	mov	r3, r2
 8008bd0:	011b      	lsls	r3, r3, #4
 8008bd2:	1a9b      	subs	r3, r3, r2
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	4403      	add	r3, r0
 8008bd8:	3328      	adds	r3, #40	@ 0x28
 8008bda:	881b      	ldrh	r3, [r3, #0]
 8008bdc:	440b      	add	r3, r1
 8008bde:	1e59      	subs	r1, r3, #1
 8008be0:	78fa      	ldrb	r2, [r7, #3]
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	4613      	mov	r3, r2
 8008be6:	011b      	lsls	r3, r3, #4
 8008be8:	1a9b      	subs	r3, r3, r2
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	4403      	add	r3, r0
 8008bee:	3328      	adds	r3, #40	@ 0x28
 8008bf0:	881b      	ldrh	r3, [r3, #0]
 8008bf2:	fbb1 f3f3 	udiv	r3, r1, r3
 8008bf6:	f003 0301 	and.w	r3, r3, #1
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	f000 8470 	beq.w	80094e0 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8008c00:	78fa      	ldrb	r2, [r7, #3]
 8008c02:	6879      	ldr	r1, [r7, #4]
 8008c04:	4613      	mov	r3, r2
 8008c06:	011b      	lsls	r3, r3, #4
 8008c08:	1a9b      	subs	r3, r3, r2
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	440b      	add	r3, r1
 8008c0e:	333c      	adds	r3, #60	@ 0x3c
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	78fa      	ldrb	r2, [r7, #3]
 8008c14:	f083 0301 	eor.w	r3, r3, #1
 8008c18:	b2d8      	uxtb	r0, r3
 8008c1a:	6879      	ldr	r1, [r7, #4]
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	011b      	lsls	r3, r3, #4
 8008c20:	1a9b      	subs	r3, r3, r2
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	440b      	add	r3, r1
 8008c26:	333c      	adds	r3, #60	@ 0x3c
 8008c28:	4602      	mov	r2, r0
 8008c2a:	701a      	strb	r2, [r3, #0]
 8008c2c:	f000 bc58 	b.w	80094e0 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8008c30:	78fa      	ldrb	r2, [r7, #3]
 8008c32:	6879      	ldr	r1, [r7, #4]
 8008c34:	4613      	mov	r3, r2
 8008c36:	011b      	lsls	r3, r3, #4
 8008c38:	1a9b      	subs	r3, r3, r2
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	440b      	add	r3, r1
 8008c3e:	333c      	adds	r3, #60	@ 0x3c
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	78fa      	ldrb	r2, [r7, #3]
 8008c44:	f083 0301 	eor.w	r3, r3, #1
 8008c48:	b2d8      	uxtb	r0, r3
 8008c4a:	6879      	ldr	r1, [r7, #4]
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	011b      	lsls	r3, r3, #4
 8008c50:	1a9b      	subs	r3, r3, r2
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	440b      	add	r3, r1
 8008c56:	333c      	adds	r3, #60	@ 0x3c
 8008c58:	4602      	mov	r2, r0
 8008c5a:	701a      	strb	r2, [r3, #0]
 8008c5c:	f000 bc40 	b.w	80094e0 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	78fa      	ldrb	r2, [r7, #3]
 8008c66:	4611      	mov	r1, r2
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f008 fde4 	bl	8011836 <USB_ReadChInterrupts>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	f003 0320 	and.w	r3, r3, #32
 8008c74:	2b20      	cmp	r3, #32
 8008c76:	d131      	bne.n	8008cdc <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8008c78:	78fb      	ldrb	r3, [r7, #3]
 8008c7a:	015a      	lsls	r2, r3, #5
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	4413      	add	r3, r2
 8008c80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c84:	461a      	mov	r2, r3
 8008c86:	2320      	movs	r3, #32
 8008c88:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8008c8a:	78fa      	ldrb	r2, [r7, #3]
 8008c8c:	6879      	ldr	r1, [r7, #4]
 8008c8e:	4613      	mov	r3, r2
 8008c90:	011b      	lsls	r3, r3, #4
 8008c92:	1a9b      	subs	r3, r3, r2
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	440b      	add	r3, r1
 8008c98:	331a      	adds	r3, #26
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	f040 841f 	bne.w	80094e0 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8008ca2:	78fa      	ldrb	r2, [r7, #3]
 8008ca4:	6879      	ldr	r1, [r7, #4]
 8008ca6:	4613      	mov	r3, r2
 8008ca8:	011b      	lsls	r3, r3, #4
 8008caa:	1a9b      	subs	r3, r3, r2
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	440b      	add	r3, r1
 8008cb0:	331b      	adds	r3, #27
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8008cb6:	78fa      	ldrb	r2, [r7, #3]
 8008cb8:	6879      	ldr	r1, [r7, #4]
 8008cba:	4613      	mov	r3, r2
 8008cbc:	011b      	lsls	r3, r3, #4
 8008cbe:	1a9b      	subs	r3, r3, r2
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	440b      	add	r3, r1
 8008cc4:	334d      	adds	r3, #77	@ 0x4d
 8008cc6:	2203      	movs	r2, #3
 8008cc8:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	78fa      	ldrb	r2, [r7, #3]
 8008cd0:	4611      	mov	r1, r2
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f008 fe2c 	bl	8011930 <USB_HC_Halt>
 8008cd8:	f000 bc02 	b.w	80094e0 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	78fa      	ldrb	r2, [r7, #3]
 8008ce2:	4611      	mov	r1, r2
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f008 fda6 	bl	8011836 <USB_ReadChInterrupts>
 8008cea:	4603      	mov	r3, r0
 8008cec:	f003 0302 	and.w	r3, r3, #2
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	f040 8305 	bne.w	8009300 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8008cf6:	78fb      	ldrb	r3, [r7, #3]
 8008cf8:	015a      	lsls	r2, r3, #5
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	4413      	add	r3, r2
 8008cfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d02:	461a      	mov	r2, r3
 8008d04:	2302      	movs	r3, #2
 8008d06:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8008d08:	78fa      	ldrb	r2, [r7, #3]
 8008d0a:	6879      	ldr	r1, [r7, #4]
 8008d0c:	4613      	mov	r3, r2
 8008d0e:	011b      	lsls	r3, r3, #4
 8008d10:	1a9b      	subs	r3, r3, r2
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	440b      	add	r3, r1
 8008d16:	334d      	adds	r3, #77	@ 0x4d
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d114      	bne.n	8008d48 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008d1e:	78fa      	ldrb	r2, [r7, #3]
 8008d20:	6879      	ldr	r1, [r7, #4]
 8008d22:	4613      	mov	r3, r2
 8008d24:	011b      	lsls	r3, r3, #4
 8008d26:	1a9b      	subs	r3, r3, r2
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	440b      	add	r3, r1
 8008d2c:	334d      	adds	r3, #77	@ 0x4d
 8008d2e:	2202      	movs	r2, #2
 8008d30:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8008d32:	78fa      	ldrb	r2, [r7, #3]
 8008d34:	6879      	ldr	r1, [r7, #4]
 8008d36:	4613      	mov	r3, r2
 8008d38:	011b      	lsls	r3, r3, #4
 8008d3a:	1a9b      	subs	r3, r3, r2
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	440b      	add	r3, r1
 8008d40:	334c      	adds	r3, #76	@ 0x4c
 8008d42:	2201      	movs	r2, #1
 8008d44:	701a      	strb	r2, [r3, #0]
 8008d46:	e2cc      	b.n	80092e2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8008d48:	78fa      	ldrb	r2, [r7, #3]
 8008d4a:	6879      	ldr	r1, [r7, #4]
 8008d4c:	4613      	mov	r3, r2
 8008d4e:	011b      	lsls	r3, r3, #4
 8008d50:	1a9b      	subs	r3, r3, r2
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	440b      	add	r3, r1
 8008d56:	334d      	adds	r3, #77	@ 0x4d
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	2b06      	cmp	r3, #6
 8008d5c:	d114      	bne.n	8008d88 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008d5e:	78fa      	ldrb	r2, [r7, #3]
 8008d60:	6879      	ldr	r1, [r7, #4]
 8008d62:	4613      	mov	r3, r2
 8008d64:	011b      	lsls	r3, r3, #4
 8008d66:	1a9b      	subs	r3, r3, r2
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	440b      	add	r3, r1
 8008d6c:	334d      	adds	r3, #77	@ 0x4d
 8008d6e:	2202      	movs	r2, #2
 8008d70:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8008d72:	78fa      	ldrb	r2, [r7, #3]
 8008d74:	6879      	ldr	r1, [r7, #4]
 8008d76:	4613      	mov	r3, r2
 8008d78:	011b      	lsls	r3, r3, #4
 8008d7a:	1a9b      	subs	r3, r3, r2
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	440b      	add	r3, r1
 8008d80:	334c      	adds	r3, #76	@ 0x4c
 8008d82:	2205      	movs	r2, #5
 8008d84:	701a      	strb	r2, [r3, #0]
 8008d86:	e2ac      	b.n	80092e2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8008d88:	78fa      	ldrb	r2, [r7, #3]
 8008d8a:	6879      	ldr	r1, [r7, #4]
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	011b      	lsls	r3, r3, #4
 8008d90:	1a9b      	subs	r3, r3, r2
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	440b      	add	r3, r1
 8008d96:	334d      	adds	r3, #77	@ 0x4d
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	2b07      	cmp	r3, #7
 8008d9c:	d00b      	beq.n	8008db6 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8008d9e:	78fa      	ldrb	r2, [r7, #3]
 8008da0:	6879      	ldr	r1, [r7, #4]
 8008da2:	4613      	mov	r3, r2
 8008da4:	011b      	lsls	r3, r3, #4
 8008da6:	1a9b      	subs	r3, r3, r2
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	440b      	add	r3, r1
 8008dac:	334d      	adds	r3, #77	@ 0x4d
 8008dae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8008db0:	2b09      	cmp	r3, #9
 8008db2:	f040 80a6 	bne.w	8008f02 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008db6:	78fa      	ldrb	r2, [r7, #3]
 8008db8:	6879      	ldr	r1, [r7, #4]
 8008dba:	4613      	mov	r3, r2
 8008dbc:	011b      	lsls	r3, r3, #4
 8008dbe:	1a9b      	subs	r3, r3, r2
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	440b      	add	r3, r1
 8008dc4:	334d      	adds	r3, #77	@ 0x4d
 8008dc6:	2202      	movs	r2, #2
 8008dc8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8008dca:	78fa      	ldrb	r2, [r7, #3]
 8008dcc:	6879      	ldr	r1, [r7, #4]
 8008dce:	4613      	mov	r3, r2
 8008dd0:	011b      	lsls	r3, r3, #4
 8008dd2:	1a9b      	subs	r3, r3, r2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	440b      	add	r3, r1
 8008dd8:	3344      	adds	r3, #68	@ 0x44
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	1c59      	adds	r1, r3, #1
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	4613      	mov	r3, r2
 8008de2:	011b      	lsls	r3, r3, #4
 8008de4:	1a9b      	subs	r3, r3, r2
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	4403      	add	r3, r0
 8008dea:	3344      	adds	r3, #68	@ 0x44
 8008dec:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008dee:	78fa      	ldrb	r2, [r7, #3]
 8008df0:	6879      	ldr	r1, [r7, #4]
 8008df2:	4613      	mov	r3, r2
 8008df4:	011b      	lsls	r3, r3, #4
 8008df6:	1a9b      	subs	r3, r3, r2
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	440b      	add	r3, r1
 8008dfc:	3344      	adds	r3, #68	@ 0x44
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2b02      	cmp	r3, #2
 8008e02:	d943      	bls.n	8008e8c <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8008e04:	78fa      	ldrb	r2, [r7, #3]
 8008e06:	6879      	ldr	r1, [r7, #4]
 8008e08:	4613      	mov	r3, r2
 8008e0a:	011b      	lsls	r3, r3, #4
 8008e0c:	1a9b      	subs	r3, r3, r2
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	440b      	add	r3, r1
 8008e12:	3344      	adds	r3, #68	@ 0x44
 8008e14:	2200      	movs	r2, #0
 8008e16:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8008e18:	78fa      	ldrb	r2, [r7, #3]
 8008e1a:	6879      	ldr	r1, [r7, #4]
 8008e1c:	4613      	mov	r3, r2
 8008e1e:	011b      	lsls	r3, r3, #4
 8008e20:	1a9b      	subs	r3, r3, r2
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	440b      	add	r3, r1
 8008e26:	331a      	adds	r3, #26
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d123      	bne.n	8008e76 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8008e2e:	78fa      	ldrb	r2, [r7, #3]
 8008e30:	6879      	ldr	r1, [r7, #4]
 8008e32:	4613      	mov	r3, r2
 8008e34:	011b      	lsls	r3, r3, #4
 8008e36:	1a9b      	subs	r3, r3, r2
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	440b      	add	r3, r1
 8008e3c:	331b      	adds	r3, #27
 8008e3e:	2200      	movs	r2, #0
 8008e40:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8008e42:	78fa      	ldrb	r2, [r7, #3]
 8008e44:	6879      	ldr	r1, [r7, #4]
 8008e46:	4613      	mov	r3, r2
 8008e48:	011b      	lsls	r3, r3, #4
 8008e4a:	1a9b      	subs	r3, r3, r2
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	440b      	add	r3, r1
 8008e50:	331c      	adds	r3, #28
 8008e52:	2200      	movs	r2, #0
 8008e54:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008e56:	78fb      	ldrb	r3, [r7, #3]
 8008e58:	015a      	lsls	r2, r3, #5
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	78fa      	ldrb	r2, [r7, #3]
 8008e66:	0151      	lsls	r1, r2, #5
 8008e68:	693a      	ldr	r2, [r7, #16]
 8008e6a:	440a      	add	r2, r1
 8008e6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e74:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8008e76:	78fa      	ldrb	r2, [r7, #3]
 8008e78:	6879      	ldr	r1, [r7, #4]
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	011b      	lsls	r3, r3, #4
 8008e7e:	1a9b      	subs	r3, r3, r2
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	440b      	add	r3, r1
 8008e84:	334c      	adds	r3, #76	@ 0x4c
 8008e86:	2204      	movs	r2, #4
 8008e88:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008e8a:	e229      	b.n	80092e0 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008e8c:	78fa      	ldrb	r2, [r7, #3]
 8008e8e:	6879      	ldr	r1, [r7, #4]
 8008e90:	4613      	mov	r3, r2
 8008e92:	011b      	lsls	r3, r3, #4
 8008e94:	1a9b      	subs	r3, r3, r2
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	440b      	add	r3, r1
 8008e9a:	334c      	adds	r3, #76	@ 0x4c
 8008e9c:	2202      	movs	r2, #2
 8008e9e:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008ea0:	78fa      	ldrb	r2, [r7, #3]
 8008ea2:	6879      	ldr	r1, [r7, #4]
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	011b      	lsls	r3, r3, #4
 8008ea8:	1a9b      	subs	r3, r3, r2
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	440b      	add	r3, r1
 8008eae:	3326      	adds	r3, #38	@ 0x26
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d00b      	beq.n	8008ece <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008eb6:	78fa      	ldrb	r2, [r7, #3]
 8008eb8:	6879      	ldr	r1, [r7, #4]
 8008eba:	4613      	mov	r3, r2
 8008ebc:	011b      	lsls	r3, r3, #4
 8008ebe:	1a9b      	subs	r3, r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	440b      	add	r3, r1
 8008ec4:	3326      	adds	r3, #38	@ 0x26
 8008ec6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008ec8:	2b02      	cmp	r3, #2
 8008eca:	f040 8209 	bne.w	80092e0 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8008ece:	78fb      	ldrb	r3, [r7, #3]
 8008ed0:	015a      	lsls	r2, r3, #5
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	4413      	add	r3, r2
 8008ed6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008ee4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008eec:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8008eee:	78fb      	ldrb	r3, [r7, #3]
 8008ef0:	015a      	lsls	r2, r3, #5
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008efa:	461a      	mov	r2, r3
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008f00:	e1ee      	b.n	80092e0 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8008f02:	78fa      	ldrb	r2, [r7, #3]
 8008f04:	6879      	ldr	r1, [r7, #4]
 8008f06:	4613      	mov	r3, r2
 8008f08:	011b      	lsls	r3, r3, #4
 8008f0a:	1a9b      	subs	r3, r3, r2
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	440b      	add	r3, r1
 8008f10:	334d      	adds	r3, #77	@ 0x4d
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	2b05      	cmp	r3, #5
 8008f16:	f040 80c8 	bne.w	80090aa <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008f1a:	78fa      	ldrb	r2, [r7, #3]
 8008f1c:	6879      	ldr	r1, [r7, #4]
 8008f1e:	4613      	mov	r3, r2
 8008f20:	011b      	lsls	r3, r3, #4
 8008f22:	1a9b      	subs	r3, r3, r2
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	440b      	add	r3, r1
 8008f28:	334d      	adds	r3, #77	@ 0x4d
 8008f2a:	2202      	movs	r2, #2
 8008f2c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008f2e:	78fa      	ldrb	r2, [r7, #3]
 8008f30:	6879      	ldr	r1, [r7, #4]
 8008f32:	4613      	mov	r3, r2
 8008f34:	011b      	lsls	r3, r3, #4
 8008f36:	1a9b      	subs	r3, r3, r2
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	440b      	add	r3, r1
 8008f3c:	331b      	adds	r3, #27
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	f040 81ce 	bne.w	80092e2 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8008f46:	78fa      	ldrb	r2, [r7, #3]
 8008f48:	6879      	ldr	r1, [r7, #4]
 8008f4a:	4613      	mov	r3, r2
 8008f4c:	011b      	lsls	r3, r3, #4
 8008f4e:	1a9b      	subs	r3, r3, r2
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	440b      	add	r3, r1
 8008f54:	3326      	adds	r3, #38	@ 0x26
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	2b03      	cmp	r3, #3
 8008f5a:	d16b      	bne.n	8009034 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8008f5c:	78fa      	ldrb	r2, [r7, #3]
 8008f5e:	6879      	ldr	r1, [r7, #4]
 8008f60:	4613      	mov	r3, r2
 8008f62:	011b      	lsls	r3, r3, #4
 8008f64:	1a9b      	subs	r3, r3, r2
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	440b      	add	r3, r1
 8008f6a:	3348      	adds	r3, #72	@ 0x48
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	1c59      	adds	r1, r3, #1
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	4613      	mov	r3, r2
 8008f74:	011b      	lsls	r3, r3, #4
 8008f76:	1a9b      	subs	r3, r3, r2
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	4403      	add	r3, r0
 8008f7c:	3348      	adds	r3, #72	@ 0x48
 8008f7e:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8008f80:	78fa      	ldrb	r2, [r7, #3]
 8008f82:	6879      	ldr	r1, [r7, #4]
 8008f84:	4613      	mov	r3, r2
 8008f86:	011b      	lsls	r3, r3, #4
 8008f88:	1a9b      	subs	r3, r3, r2
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	440b      	add	r3, r1
 8008f8e:	3348      	adds	r3, #72	@ 0x48
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2b02      	cmp	r3, #2
 8008f94:	d943      	bls.n	800901e <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8008f96:	78fa      	ldrb	r2, [r7, #3]
 8008f98:	6879      	ldr	r1, [r7, #4]
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	011b      	lsls	r3, r3, #4
 8008f9e:	1a9b      	subs	r3, r3, r2
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	440b      	add	r3, r1
 8008fa4:	3348      	adds	r3, #72	@ 0x48
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8008faa:	78fa      	ldrb	r2, [r7, #3]
 8008fac:	6879      	ldr	r1, [r7, #4]
 8008fae:	4613      	mov	r3, r2
 8008fb0:	011b      	lsls	r3, r3, #4
 8008fb2:	1a9b      	subs	r3, r3, r2
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	440b      	add	r3, r1
 8008fb8:	331b      	adds	r3, #27
 8008fba:	2200      	movs	r2, #0
 8008fbc:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8008fbe:	78fa      	ldrb	r2, [r7, #3]
 8008fc0:	6879      	ldr	r1, [r7, #4]
 8008fc2:	4613      	mov	r3, r2
 8008fc4:	011b      	lsls	r3, r3, #4
 8008fc6:	1a9b      	subs	r3, r3, r2
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	440b      	add	r3, r1
 8008fcc:	3344      	adds	r3, #68	@ 0x44
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2b02      	cmp	r3, #2
 8008fd2:	d809      	bhi.n	8008fe8 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8008fd4:	78fa      	ldrb	r2, [r7, #3]
 8008fd6:	6879      	ldr	r1, [r7, #4]
 8008fd8:	4613      	mov	r3, r2
 8008fda:	011b      	lsls	r3, r3, #4
 8008fdc:	1a9b      	subs	r3, r3, r2
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	440b      	add	r3, r1
 8008fe2:	331c      	adds	r3, #28
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008fe8:	78fb      	ldrb	r3, [r7, #3]
 8008fea:	015a      	lsls	r2, r3, #5
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	4413      	add	r3, r2
 8008ff0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	78fa      	ldrb	r2, [r7, #3]
 8008ff8:	0151      	lsls	r1, r2, #5
 8008ffa:	693a      	ldr	r2, [r7, #16]
 8008ffc:	440a      	add	r2, r1
 8008ffe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009002:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009006:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8009008:	78fa      	ldrb	r2, [r7, #3]
 800900a:	6879      	ldr	r1, [r7, #4]
 800900c:	4613      	mov	r3, r2
 800900e:	011b      	lsls	r3, r3, #4
 8009010:	1a9b      	subs	r3, r3, r2
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	440b      	add	r3, r1
 8009016:	334c      	adds	r3, #76	@ 0x4c
 8009018:	2204      	movs	r2, #4
 800901a:	701a      	strb	r2, [r3, #0]
 800901c:	e014      	b.n	8009048 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800901e:	78fa      	ldrb	r2, [r7, #3]
 8009020:	6879      	ldr	r1, [r7, #4]
 8009022:	4613      	mov	r3, r2
 8009024:	011b      	lsls	r3, r3, #4
 8009026:	1a9b      	subs	r3, r3, r2
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	440b      	add	r3, r1
 800902c:	334c      	adds	r3, #76	@ 0x4c
 800902e:	2202      	movs	r2, #2
 8009030:	701a      	strb	r2, [r3, #0]
 8009032:	e009      	b.n	8009048 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009034:	78fa      	ldrb	r2, [r7, #3]
 8009036:	6879      	ldr	r1, [r7, #4]
 8009038:	4613      	mov	r3, r2
 800903a:	011b      	lsls	r3, r3, #4
 800903c:	1a9b      	subs	r3, r3, r2
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	440b      	add	r3, r1
 8009042:	334c      	adds	r3, #76	@ 0x4c
 8009044:	2202      	movs	r2, #2
 8009046:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009048:	78fa      	ldrb	r2, [r7, #3]
 800904a:	6879      	ldr	r1, [r7, #4]
 800904c:	4613      	mov	r3, r2
 800904e:	011b      	lsls	r3, r3, #4
 8009050:	1a9b      	subs	r3, r3, r2
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	440b      	add	r3, r1
 8009056:	3326      	adds	r3, #38	@ 0x26
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d00b      	beq.n	8009076 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800905e:	78fa      	ldrb	r2, [r7, #3]
 8009060:	6879      	ldr	r1, [r7, #4]
 8009062:	4613      	mov	r3, r2
 8009064:	011b      	lsls	r3, r3, #4
 8009066:	1a9b      	subs	r3, r3, r2
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	440b      	add	r3, r1
 800906c:	3326      	adds	r3, #38	@ 0x26
 800906e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009070:	2b02      	cmp	r3, #2
 8009072:	f040 8136 	bne.w	80092e2 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8009076:	78fb      	ldrb	r3, [r7, #3]
 8009078:	015a      	lsls	r2, r3, #5
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	4413      	add	r3, r2
 800907e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800908c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009094:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8009096:	78fb      	ldrb	r3, [r7, #3]
 8009098:	015a      	lsls	r2, r3, #5
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	4413      	add	r3, r2
 800909e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090a2:	461a      	mov	r2, r3
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	6013      	str	r3, [r2, #0]
 80090a8:	e11b      	b.n	80092e2 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80090aa:	78fa      	ldrb	r2, [r7, #3]
 80090ac:	6879      	ldr	r1, [r7, #4]
 80090ae:	4613      	mov	r3, r2
 80090b0:	011b      	lsls	r3, r3, #4
 80090b2:	1a9b      	subs	r3, r3, r2
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	440b      	add	r3, r1
 80090b8:	334d      	adds	r3, #77	@ 0x4d
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	2b03      	cmp	r3, #3
 80090be:	f040 8081 	bne.w	80091c4 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80090c2:	78fa      	ldrb	r2, [r7, #3]
 80090c4:	6879      	ldr	r1, [r7, #4]
 80090c6:	4613      	mov	r3, r2
 80090c8:	011b      	lsls	r3, r3, #4
 80090ca:	1a9b      	subs	r3, r3, r2
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	440b      	add	r3, r1
 80090d0:	334d      	adds	r3, #77	@ 0x4d
 80090d2:	2202      	movs	r2, #2
 80090d4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80090d6:	78fa      	ldrb	r2, [r7, #3]
 80090d8:	6879      	ldr	r1, [r7, #4]
 80090da:	4613      	mov	r3, r2
 80090dc:	011b      	lsls	r3, r3, #4
 80090de:	1a9b      	subs	r3, r3, r2
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	440b      	add	r3, r1
 80090e4:	331b      	adds	r3, #27
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	f040 80fa 	bne.w	80092e2 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80090ee:	78fa      	ldrb	r2, [r7, #3]
 80090f0:	6879      	ldr	r1, [r7, #4]
 80090f2:	4613      	mov	r3, r2
 80090f4:	011b      	lsls	r3, r3, #4
 80090f6:	1a9b      	subs	r3, r3, r2
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	440b      	add	r3, r1
 80090fc:	334c      	adds	r3, #76	@ 0x4c
 80090fe:	2202      	movs	r2, #2
 8009100:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009102:	78fb      	ldrb	r3, [r7, #3]
 8009104:	015a      	lsls	r2, r3, #5
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	4413      	add	r3, r2
 800910a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	78fa      	ldrb	r2, [r7, #3]
 8009112:	0151      	lsls	r1, r2, #5
 8009114:	693a      	ldr	r2, [r7, #16]
 8009116:	440a      	add	r2, r1
 8009118:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800911c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009120:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8009122:	78fb      	ldrb	r3, [r7, #3]
 8009124:	015a      	lsls	r2, r3, #5
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	4413      	add	r3, r2
 800912a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	78fa      	ldrb	r2, [r7, #3]
 8009132:	0151      	lsls	r1, r2, #5
 8009134:	693a      	ldr	r2, [r7, #16]
 8009136:	440a      	add	r2, r1
 8009138:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800913c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009140:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8009142:	78fb      	ldrb	r3, [r7, #3]
 8009144:	015a      	lsls	r2, r3, #5
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	4413      	add	r3, r2
 800914a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	78fa      	ldrb	r2, [r7, #3]
 8009152:	0151      	lsls	r1, r2, #5
 8009154:	693a      	ldr	r2, [r7, #16]
 8009156:	440a      	add	r2, r1
 8009158:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800915c:	f023 0320 	bic.w	r3, r3, #32
 8009160:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009162:	78fa      	ldrb	r2, [r7, #3]
 8009164:	6879      	ldr	r1, [r7, #4]
 8009166:	4613      	mov	r3, r2
 8009168:	011b      	lsls	r3, r3, #4
 800916a:	1a9b      	subs	r3, r3, r2
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	440b      	add	r3, r1
 8009170:	3326      	adds	r3, #38	@ 0x26
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d00b      	beq.n	8009190 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8009178:	78fa      	ldrb	r2, [r7, #3]
 800917a:	6879      	ldr	r1, [r7, #4]
 800917c:	4613      	mov	r3, r2
 800917e:	011b      	lsls	r3, r3, #4
 8009180:	1a9b      	subs	r3, r3, r2
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	440b      	add	r3, r1
 8009186:	3326      	adds	r3, #38	@ 0x26
 8009188:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800918a:	2b02      	cmp	r3, #2
 800918c:	f040 80a9 	bne.w	80092e2 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8009190:	78fb      	ldrb	r3, [r7, #3]
 8009192:	015a      	lsls	r2, r3, #5
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	4413      	add	r3, r2
 8009198:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80091a6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80091ae:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80091b0:	78fb      	ldrb	r3, [r7, #3]
 80091b2:	015a      	lsls	r2, r3, #5
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	4413      	add	r3, r2
 80091b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091bc:	461a      	mov	r2, r3
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	6013      	str	r3, [r2, #0]
 80091c2:	e08e      	b.n	80092e2 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80091c4:	78fa      	ldrb	r2, [r7, #3]
 80091c6:	6879      	ldr	r1, [r7, #4]
 80091c8:	4613      	mov	r3, r2
 80091ca:	011b      	lsls	r3, r3, #4
 80091cc:	1a9b      	subs	r3, r3, r2
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	440b      	add	r3, r1
 80091d2:	334d      	adds	r3, #77	@ 0x4d
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	2b04      	cmp	r3, #4
 80091d8:	d143      	bne.n	8009262 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80091da:	78fa      	ldrb	r2, [r7, #3]
 80091dc:	6879      	ldr	r1, [r7, #4]
 80091de:	4613      	mov	r3, r2
 80091e0:	011b      	lsls	r3, r3, #4
 80091e2:	1a9b      	subs	r3, r3, r2
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	440b      	add	r3, r1
 80091e8:	334d      	adds	r3, #77	@ 0x4d
 80091ea:	2202      	movs	r2, #2
 80091ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80091ee:	78fa      	ldrb	r2, [r7, #3]
 80091f0:	6879      	ldr	r1, [r7, #4]
 80091f2:	4613      	mov	r3, r2
 80091f4:	011b      	lsls	r3, r3, #4
 80091f6:	1a9b      	subs	r3, r3, r2
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	440b      	add	r3, r1
 80091fc:	334c      	adds	r3, #76	@ 0x4c
 80091fe:	2202      	movs	r2, #2
 8009200:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009202:	78fa      	ldrb	r2, [r7, #3]
 8009204:	6879      	ldr	r1, [r7, #4]
 8009206:	4613      	mov	r3, r2
 8009208:	011b      	lsls	r3, r3, #4
 800920a:	1a9b      	subs	r3, r3, r2
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	440b      	add	r3, r1
 8009210:	3326      	adds	r3, #38	@ 0x26
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00a      	beq.n	800922e <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8009218:	78fa      	ldrb	r2, [r7, #3]
 800921a:	6879      	ldr	r1, [r7, #4]
 800921c:	4613      	mov	r3, r2
 800921e:	011b      	lsls	r3, r3, #4
 8009220:	1a9b      	subs	r3, r3, r2
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	440b      	add	r3, r1
 8009226:	3326      	adds	r3, #38	@ 0x26
 8009228:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800922a:	2b02      	cmp	r3, #2
 800922c:	d159      	bne.n	80092e2 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800922e:	78fb      	ldrb	r3, [r7, #3]
 8009230:	015a      	lsls	r2, r3, #5
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	4413      	add	r3, r2
 8009236:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009244:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800924c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800924e:	78fb      	ldrb	r3, [r7, #3]
 8009250:	015a      	lsls	r2, r3, #5
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	4413      	add	r3, r2
 8009256:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800925a:	461a      	mov	r2, r3
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	6013      	str	r3, [r2, #0]
 8009260:	e03f      	b.n	80092e2 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8009262:	78fa      	ldrb	r2, [r7, #3]
 8009264:	6879      	ldr	r1, [r7, #4]
 8009266:	4613      	mov	r3, r2
 8009268:	011b      	lsls	r3, r3, #4
 800926a:	1a9b      	subs	r3, r3, r2
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	440b      	add	r3, r1
 8009270:	334d      	adds	r3, #77	@ 0x4d
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	2b08      	cmp	r3, #8
 8009276:	d126      	bne.n	80092c6 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009278:	78fa      	ldrb	r2, [r7, #3]
 800927a:	6879      	ldr	r1, [r7, #4]
 800927c:	4613      	mov	r3, r2
 800927e:	011b      	lsls	r3, r3, #4
 8009280:	1a9b      	subs	r3, r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	440b      	add	r3, r1
 8009286:	334d      	adds	r3, #77	@ 0x4d
 8009288:	2202      	movs	r2, #2
 800928a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800928c:	78fa      	ldrb	r2, [r7, #3]
 800928e:	6879      	ldr	r1, [r7, #4]
 8009290:	4613      	mov	r3, r2
 8009292:	011b      	lsls	r3, r3, #4
 8009294:	1a9b      	subs	r3, r3, r2
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	440b      	add	r3, r1
 800929a:	3344      	adds	r3, #68	@ 0x44
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	1c59      	adds	r1, r3, #1
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	4613      	mov	r3, r2
 80092a4:	011b      	lsls	r3, r3, #4
 80092a6:	1a9b      	subs	r3, r3, r2
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	4403      	add	r3, r0
 80092ac:	3344      	adds	r3, #68	@ 0x44
 80092ae:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80092b0:	78fa      	ldrb	r2, [r7, #3]
 80092b2:	6879      	ldr	r1, [r7, #4]
 80092b4:	4613      	mov	r3, r2
 80092b6:	011b      	lsls	r3, r3, #4
 80092b8:	1a9b      	subs	r3, r3, r2
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	440b      	add	r3, r1
 80092be:	334c      	adds	r3, #76	@ 0x4c
 80092c0:	2204      	movs	r2, #4
 80092c2:	701a      	strb	r2, [r3, #0]
 80092c4:	e00d      	b.n	80092e2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80092c6:	78fa      	ldrb	r2, [r7, #3]
 80092c8:	6879      	ldr	r1, [r7, #4]
 80092ca:	4613      	mov	r3, r2
 80092cc:	011b      	lsls	r3, r3, #4
 80092ce:	1a9b      	subs	r3, r3, r2
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	440b      	add	r3, r1
 80092d4:	334d      	adds	r3, #77	@ 0x4d
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	2b02      	cmp	r3, #2
 80092da:	f000 8100 	beq.w	80094de <HCD_HC_IN_IRQHandler+0xcca>
 80092de:	e000      	b.n	80092e2 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80092e0:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80092e2:	78fa      	ldrb	r2, [r7, #3]
 80092e4:	6879      	ldr	r1, [r7, #4]
 80092e6:	4613      	mov	r3, r2
 80092e8:	011b      	lsls	r3, r3, #4
 80092ea:	1a9b      	subs	r3, r3, r2
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	440b      	add	r3, r1
 80092f0:	334c      	adds	r3, #76	@ 0x4c
 80092f2:	781a      	ldrb	r2, [r3, #0]
 80092f4:	78fb      	ldrb	r3, [r7, #3]
 80092f6:	4619      	mov	r1, r3
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f00e f9c5 	bl	8017688 <HAL_HCD_HC_NotifyURBChange_Callback>
 80092fe:	e0ef      	b.n	80094e0 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	78fa      	ldrb	r2, [r7, #3]
 8009306:	4611      	mov	r1, r2
 8009308:	4618      	mov	r0, r3
 800930a:	f008 fa94 	bl	8011836 <USB_ReadChInterrupts>
 800930e:	4603      	mov	r3, r0
 8009310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009314:	2b40      	cmp	r3, #64	@ 0x40
 8009316:	d12f      	bne.n	8009378 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8009318:	78fb      	ldrb	r3, [r7, #3]
 800931a:	015a      	lsls	r2, r3, #5
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	4413      	add	r3, r2
 8009320:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009324:	461a      	mov	r2, r3
 8009326:	2340      	movs	r3, #64	@ 0x40
 8009328:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800932a:	78fa      	ldrb	r2, [r7, #3]
 800932c:	6879      	ldr	r1, [r7, #4]
 800932e:	4613      	mov	r3, r2
 8009330:	011b      	lsls	r3, r3, #4
 8009332:	1a9b      	subs	r3, r3, r2
 8009334:	009b      	lsls	r3, r3, #2
 8009336:	440b      	add	r3, r1
 8009338:	334d      	adds	r3, #77	@ 0x4d
 800933a:	2205      	movs	r2, #5
 800933c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800933e:	78fa      	ldrb	r2, [r7, #3]
 8009340:	6879      	ldr	r1, [r7, #4]
 8009342:	4613      	mov	r3, r2
 8009344:	011b      	lsls	r3, r3, #4
 8009346:	1a9b      	subs	r3, r3, r2
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	440b      	add	r3, r1
 800934c:	331a      	adds	r3, #26
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d109      	bne.n	8009368 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8009354:	78fa      	ldrb	r2, [r7, #3]
 8009356:	6879      	ldr	r1, [r7, #4]
 8009358:	4613      	mov	r3, r2
 800935a:	011b      	lsls	r3, r3, #4
 800935c:	1a9b      	subs	r3, r3, r2
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	440b      	add	r3, r1
 8009362:	3344      	adds	r3, #68	@ 0x44
 8009364:	2200      	movs	r2, #0
 8009366:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	78fa      	ldrb	r2, [r7, #3]
 800936e:	4611      	mov	r1, r2
 8009370:	4618      	mov	r0, r3
 8009372:	f008 fadd 	bl	8011930 <USB_HC_Halt>
 8009376:	e0b3      	b.n	80094e0 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	78fa      	ldrb	r2, [r7, #3]
 800937e:	4611      	mov	r1, r2
 8009380:	4618      	mov	r0, r3
 8009382:	f008 fa58 	bl	8011836 <USB_ReadChInterrupts>
 8009386:	4603      	mov	r3, r0
 8009388:	f003 0310 	and.w	r3, r3, #16
 800938c:	2b10      	cmp	r3, #16
 800938e:	f040 80a7 	bne.w	80094e0 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8009392:	78fa      	ldrb	r2, [r7, #3]
 8009394:	6879      	ldr	r1, [r7, #4]
 8009396:	4613      	mov	r3, r2
 8009398:	011b      	lsls	r3, r3, #4
 800939a:	1a9b      	subs	r3, r3, r2
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	440b      	add	r3, r1
 80093a0:	3326      	adds	r3, #38	@ 0x26
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	2b03      	cmp	r3, #3
 80093a6:	d11b      	bne.n	80093e0 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80093a8:	78fa      	ldrb	r2, [r7, #3]
 80093aa:	6879      	ldr	r1, [r7, #4]
 80093ac:	4613      	mov	r3, r2
 80093ae:	011b      	lsls	r3, r3, #4
 80093b0:	1a9b      	subs	r3, r3, r2
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	440b      	add	r3, r1
 80093b6:	3344      	adds	r3, #68	@ 0x44
 80093b8:	2200      	movs	r2, #0
 80093ba:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80093bc:	78fa      	ldrb	r2, [r7, #3]
 80093be:	6879      	ldr	r1, [r7, #4]
 80093c0:	4613      	mov	r3, r2
 80093c2:	011b      	lsls	r3, r3, #4
 80093c4:	1a9b      	subs	r3, r3, r2
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	440b      	add	r3, r1
 80093ca:	334d      	adds	r3, #77	@ 0x4d
 80093cc:	2204      	movs	r2, #4
 80093ce:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	78fa      	ldrb	r2, [r7, #3]
 80093d6:	4611      	mov	r1, r2
 80093d8:	4618      	mov	r0, r3
 80093da:	f008 faa9 	bl	8011930 <USB_HC_Halt>
 80093de:	e03f      	b.n	8009460 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80093e0:	78fa      	ldrb	r2, [r7, #3]
 80093e2:	6879      	ldr	r1, [r7, #4]
 80093e4:	4613      	mov	r3, r2
 80093e6:	011b      	lsls	r3, r3, #4
 80093e8:	1a9b      	subs	r3, r3, r2
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	440b      	add	r3, r1
 80093ee:	3326      	adds	r3, #38	@ 0x26
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d00a      	beq.n	800940c <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80093f6:	78fa      	ldrb	r2, [r7, #3]
 80093f8:	6879      	ldr	r1, [r7, #4]
 80093fa:	4613      	mov	r3, r2
 80093fc:	011b      	lsls	r3, r3, #4
 80093fe:	1a9b      	subs	r3, r3, r2
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	440b      	add	r3, r1
 8009404:	3326      	adds	r3, #38	@ 0x26
 8009406:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009408:	2b02      	cmp	r3, #2
 800940a:	d129      	bne.n	8009460 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800940c:	78fa      	ldrb	r2, [r7, #3]
 800940e:	6879      	ldr	r1, [r7, #4]
 8009410:	4613      	mov	r3, r2
 8009412:	011b      	lsls	r3, r3, #4
 8009414:	1a9b      	subs	r3, r3, r2
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	440b      	add	r3, r1
 800941a:	3344      	adds	r3, #68	@ 0x44
 800941c:	2200      	movs	r2, #0
 800941e:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	799b      	ldrb	r3, [r3, #6]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d00a      	beq.n	800943e <HCD_HC_IN_IRQHandler+0xc2a>
 8009428:	78fa      	ldrb	r2, [r7, #3]
 800942a:	6879      	ldr	r1, [r7, #4]
 800942c:	4613      	mov	r3, r2
 800942e:	011b      	lsls	r3, r3, #4
 8009430:	1a9b      	subs	r3, r3, r2
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	440b      	add	r3, r1
 8009436:	331b      	adds	r3, #27
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	2b01      	cmp	r3, #1
 800943c:	d110      	bne.n	8009460 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800943e:	78fa      	ldrb	r2, [r7, #3]
 8009440:	6879      	ldr	r1, [r7, #4]
 8009442:	4613      	mov	r3, r2
 8009444:	011b      	lsls	r3, r3, #4
 8009446:	1a9b      	subs	r3, r3, r2
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	440b      	add	r3, r1
 800944c:	334d      	adds	r3, #77	@ 0x4d
 800944e:	2204      	movs	r2, #4
 8009450:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	78fa      	ldrb	r2, [r7, #3]
 8009458:	4611      	mov	r1, r2
 800945a:	4618      	mov	r0, r3
 800945c:	f008 fa68 	bl	8011930 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8009460:	78fa      	ldrb	r2, [r7, #3]
 8009462:	6879      	ldr	r1, [r7, #4]
 8009464:	4613      	mov	r3, r2
 8009466:	011b      	lsls	r3, r3, #4
 8009468:	1a9b      	subs	r3, r3, r2
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	440b      	add	r3, r1
 800946e:	331b      	adds	r3, #27
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	2b01      	cmp	r3, #1
 8009474:	d129      	bne.n	80094ca <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8009476:	78fa      	ldrb	r2, [r7, #3]
 8009478:	6879      	ldr	r1, [r7, #4]
 800947a:	4613      	mov	r3, r2
 800947c:	011b      	lsls	r3, r3, #4
 800947e:	1a9b      	subs	r3, r3, r2
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	440b      	add	r3, r1
 8009484:	331b      	adds	r3, #27
 8009486:	2200      	movs	r2, #0
 8009488:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800948a:	78fb      	ldrb	r3, [r7, #3]
 800948c:	015a      	lsls	r2, r3, #5
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	4413      	add	r3, r2
 8009492:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	78fa      	ldrb	r2, [r7, #3]
 800949a:	0151      	lsls	r1, r2, #5
 800949c:	693a      	ldr	r2, [r7, #16]
 800949e:	440a      	add	r2, r1
 80094a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80094a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80094a8:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80094aa:	78fb      	ldrb	r3, [r7, #3]
 80094ac:	015a      	lsls	r2, r3, #5
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	4413      	add	r3, r2
 80094b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	78fa      	ldrb	r2, [r7, #3]
 80094ba:	0151      	lsls	r1, r2, #5
 80094bc:	693a      	ldr	r2, [r7, #16]
 80094be:	440a      	add	r2, r1
 80094c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80094c4:	f043 0320 	orr.w	r3, r3, #32
 80094c8:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80094ca:	78fb      	ldrb	r3, [r7, #3]
 80094cc:	015a      	lsls	r2, r3, #5
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	4413      	add	r3, r2
 80094d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094d6:	461a      	mov	r2, r3
 80094d8:	2310      	movs	r3, #16
 80094da:	6093      	str	r3, [r2, #8]
 80094dc:	e000      	b.n	80094e0 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80094de:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80094e0:	3718      	adds	r7, #24
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}

080094e6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80094e6:	b580      	push	{r7, lr}
 80094e8:	b086      	sub	sp, #24
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
 80094ee:	460b      	mov	r3, r1
 80094f0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	78fa      	ldrb	r2, [r7, #3]
 8009502:	4611      	mov	r1, r2
 8009504:	4618      	mov	r0, r3
 8009506:	f008 f996 	bl	8011836 <USB_ReadChInterrupts>
 800950a:	4603      	mov	r3, r0
 800950c:	f003 0304 	and.w	r3, r3, #4
 8009510:	2b04      	cmp	r3, #4
 8009512:	d11b      	bne.n	800954c <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8009514:	78fb      	ldrb	r3, [r7, #3]
 8009516:	015a      	lsls	r2, r3, #5
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	4413      	add	r3, r2
 800951c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009520:	461a      	mov	r2, r3
 8009522:	2304      	movs	r3, #4
 8009524:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8009526:	78fa      	ldrb	r2, [r7, #3]
 8009528:	6879      	ldr	r1, [r7, #4]
 800952a:	4613      	mov	r3, r2
 800952c:	011b      	lsls	r3, r3, #4
 800952e:	1a9b      	subs	r3, r3, r2
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	440b      	add	r3, r1
 8009534:	334d      	adds	r3, #77	@ 0x4d
 8009536:	2207      	movs	r2, #7
 8009538:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	78fa      	ldrb	r2, [r7, #3]
 8009540:	4611      	mov	r1, r2
 8009542:	4618      	mov	r0, r3
 8009544:	f008 f9f4 	bl	8011930 <USB_HC_Halt>
 8009548:	f000 bc89 	b.w	8009e5e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	78fa      	ldrb	r2, [r7, #3]
 8009552:	4611      	mov	r1, r2
 8009554:	4618      	mov	r0, r3
 8009556:	f008 f96e 	bl	8011836 <USB_ReadChInterrupts>
 800955a:	4603      	mov	r3, r0
 800955c:	f003 0320 	and.w	r3, r3, #32
 8009560:	2b20      	cmp	r3, #32
 8009562:	f040 8082 	bne.w	800966a <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8009566:	78fb      	ldrb	r3, [r7, #3]
 8009568:	015a      	lsls	r2, r3, #5
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	4413      	add	r3, r2
 800956e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009572:	461a      	mov	r2, r3
 8009574:	2320      	movs	r3, #32
 8009576:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8009578:	78fa      	ldrb	r2, [r7, #3]
 800957a:	6879      	ldr	r1, [r7, #4]
 800957c:	4613      	mov	r3, r2
 800957e:	011b      	lsls	r3, r3, #4
 8009580:	1a9b      	subs	r3, r3, r2
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	440b      	add	r3, r1
 8009586:	3319      	adds	r3, #25
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	2b01      	cmp	r3, #1
 800958c:	d124      	bne.n	80095d8 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800958e:	78fa      	ldrb	r2, [r7, #3]
 8009590:	6879      	ldr	r1, [r7, #4]
 8009592:	4613      	mov	r3, r2
 8009594:	011b      	lsls	r3, r3, #4
 8009596:	1a9b      	subs	r3, r3, r2
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	440b      	add	r3, r1
 800959c:	3319      	adds	r3, #25
 800959e:	2200      	movs	r2, #0
 80095a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80095a2:	78fa      	ldrb	r2, [r7, #3]
 80095a4:	6879      	ldr	r1, [r7, #4]
 80095a6:	4613      	mov	r3, r2
 80095a8:	011b      	lsls	r3, r3, #4
 80095aa:	1a9b      	subs	r3, r3, r2
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	440b      	add	r3, r1
 80095b0:	334c      	adds	r3, #76	@ 0x4c
 80095b2:	2202      	movs	r2, #2
 80095b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80095b6:	78fa      	ldrb	r2, [r7, #3]
 80095b8:	6879      	ldr	r1, [r7, #4]
 80095ba:	4613      	mov	r3, r2
 80095bc:	011b      	lsls	r3, r3, #4
 80095be:	1a9b      	subs	r3, r3, r2
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	440b      	add	r3, r1
 80095c4:	334d      	adds	r3, #77	@ 0x4d
 80095c6:	2203      	movs	r2, #3
 80095c8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	78fa      	ldrb	r2, [r7, #3]
 80095d0:	4611      	mov	r1, r2
 80095d2:	4618      	mov	r0, r3
 80095d4:	f008 f9ac 	bl	8011930 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80095d8:	78fa      	ldrb	r2, [r7, #3]
 80095da:	6879      	ldr	r1, [r7, #4]
 80095dc:	4613      	mov	r3, r2
 80095de:	011b      	lsls	r3, r3, #4
 80095e0:	1a9b      	subs	r3, r3, r2
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	440b      	add	r3, r1
 80095e6:	331a      	adds	r3, #26
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	f040 8437 	bne.w	8009e5e <HCD_HC_OUT_IRQHandler+0x978>
 80095f0:	78fa      	ldrb	r2, [r7, #3]
 80095f2:	6879      	ldr	r1, [r7, #4]
 80095f4:	4613      	mov	r3, r2
 80095f6:	011b      	lsls	r3, r3, #4
 80095f8:	1a9b      	subs	r3, r3, r2
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	440b      	add	r3, r1
 80095fe:	331b      	adds	r3, #27
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	f040 842b 	bne.w	8009e5e <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8009608:	78fa      	ldrb	r2, [r7, #3]
 800960a:	6879      	ldr	r1, [r7, #4]
 800960c:	4613      	mov	r3, r2
 800960e:	011b      	lsls	r3, r3, #4
 8009610:	1a9b      	subs	r3, r3, r2
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	440b      	add	r3, r1
 8009616:	3326      	adds	r3, #38	@ 0x26
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	2b01      	cmp	r3, #1
 800961c:	d009      	beq.n	8009632 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800961e:	78fa      	ldrb	r2, [r7, #3]
 8009620:	6879      	ldr	r1, [r7, #4]
 8009622:	4613      	mov	r3, r2
 8009624:	011b      	lsls	r3, r3, #4
 8009626:	1a9b      	subs	r3, r3, r2
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	440b      	add	r3, r1
 800962c:	331b      	adds	r3, #27
 800962e:	2201      	movs	r2, #1
 8009630:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8009632:	78fa      	ldrb	r2, [r7, #3]
 8009634:	6879      	ldr	r1, [r7, #4]
 8009636:	4613      	mov	r3, r2
 8009638:	011b      	lsls	r3, r3, #4
 800963a:	1a9b      	subs	r3, r3, r2
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	440b      	add	r3, r1
 8009640:	334d      	adds	r3, #77	@ 0x4d
 8009642:	2203      	movs	r2, #3
 8009644:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	78fa      	ldrb	r2, [r7, #3]
 800964c:	4611      	mov	r1, r2
 800964e:	4618      	mov	r0, r3
 8009650:	f008 f96e 	bl	8011930 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8009654:	78fa      	ldrb	r2, [r7, #3]
 8009656:	6879      	ldr	r1, [r7, #4]
 8009658:	4613      	mov	r3, r2
 800965a:	011b      	lsls	r3, r3, #4
 800965c:	1a9b      	subs	r3, r3, r2
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	440b      	add	r3, r1
 8009662:	3344      	adds	r3, #68	@ 0x44
 8009664:	2200      	movs	r2, #0
 8009666:	601a      	str	r2, [r3, #0]
 8009668:	e3f9      	b.n	8009e5e <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	78fa      	ldrb	r2, [r7, #3]
 8009670:	4611      	mov	r1, r2
 8009672:	4618      	mov	r0, r3
 8009674:	f008 f8df 	bl	8011836 <USB_ReadChInterrupts>
 8009678:	4603      	mov	r3, r0
 800967a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800967e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009682:	d111      	bne.n	80096a8 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8009684:	78fb      	ldrb	r3, [r7, #3]
 8009686:	015a      	lsls	r2, r3, #5
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	4413      	add	r3, r2
 800968c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009690:	461a      	mov	r2, r3
 8009692:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009696:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	78fa      	ldrb	r2, [r7, #3]
 800969e:	4611      	mov	r1, r2
 80096a0:	4618      	mov	r0, r3
 80096a2:	f008 f945 	bl	8011930 <USB_HC_Halt>
 80096a6:	e3da      	b.n	8009e5e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	78fa      	ldrb	r2, [r7, #3]
 80096ae:	4611      	mov	r1, r2
 80096b0:	4618      	mov	r0, r3
 80096b2:	f008 f8c0 	bl	8011836 <USB_ReadChInterrupts>
 80096b6:	4603      	mov	r3, r0
 80096b8:	f003 0301 	and.w	r3, r3, #1
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d168      	bne.n	8009792 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80096c0:	78fa      	ldrb	r2, [r7, #3]
 80096c2:	6879      	ldr	r1, [r7, #4]
 80096c4:	4613      	mov	r3, r2
 80096c6:	011b      	lsls	r3, r3, #4
 80096c8:	1a9b      	subs	r3, r3, r2
 80096ca:	009b      	lsls	r3, r3, #2
 80096cc:	440b      	add	r3, r1
 80096ce:	3344      	adds	r3, #68	@ 0x44
 80096d0:	2200      	movs	r2, #0
 80096d2:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	78fa      	ldrb	r2, [r7, #3]
 80096da:	4611      	mov	r1, r2
 80096dc:	4618      	mov	r0, r3
 80096de:	f008 f8aa 	bl	8011836 <USB_ReadChInterrupts>
 80096e2:	4603      	mov	r3, r0
 80096e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096e8:	2b40      	cmp	r3, #64	@ 0x40
 80096ea:	d112      	bne.n	8009712 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80096ec:	78fa      	ldrb	r2, [r7, #3]
 80096ee:	6879      	ldr	r1, [r7, #4]
 80096f0:	4613      	mov	r3, r2
 80096f2:	011b      	lsls	r3, r3, #4
 80096f4:	1a9b      	subs	r3, r3, r2
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	440b      	add	r3, r1
 80096fa:	3319      	adds	r3, #25
 80096fc:	2201      	movs	r2, #1
 80096fe:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8009700:	78fb      	ldrb	r3, [r7, #3]
 8009702:	015a      	lsls	r2, r3, #5
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	4413      	add	r3, r2
 8009708:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800970c:	461a      	mov	r2, r3
 800970e:	2340      	movs	r3, #64	@ 0x40
 8009710:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8009712:	78fa      	ldrb	r2, [r7, #3]
 8009714:	6879      	ldr	r1, [r7, #4]
 8009716:	4613      	mov	r3, r2
 8009718:	011b      	lsls	r3, r3, #4
 800971a:	1a9b      	subs	r3, r3, r2
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	440b      	add	r3, r1
 8009720:	331b      	adds	r3, #27
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d019      	beq.n	800975c <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8009728:	78fa      	ldrb	r2, [r7, #3]
 800972a:	6879      	ldr	r1, [r7, #4]
 800972c:	4613      	mov	r3, r2
 800972e:	011b      	lsls	r3, r3, #4
 8009730:	1a9b      	subs	r3, r3, r2
 8009732:	009b      	lsls	r3, r3, #2
 8009734:	440b      	add	r3, r1
 8009736:	331b      	adds	r3, #27
 8009738:	2200      	movs	r2, #0
 800973a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800973c:	78fb      	ldrb	r3, [r7, #3]
 800973e:	015a      	lsls	r2, r3, #5
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	4413      	add	r3, r2
 8009744:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	78fa      	ldrb	r2, [r7, #3]
 800974c:	0151      	lsls	r1, r2, #5
 800974e:	693a      	ldr	r2, [r7, #16]
 8009750:	440a      	add	r2, r1
 8009752:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009756:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800975a:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800975c:	78fb      	ldrb	r3, [r7, #3]
 800975e:	015a      	lsls	r2, r3, #5
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	4413      	add	r3, r2
 8009764:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009768:	461a      	mov	r2, r3
 800976a:	2301      	movs	r3, #1
 800976c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800976e:	78fa      	ldrb	r2, [r7, #3]
 8009770:	6879      	ldr	r1, [r7, #4]
 8009772:	4613      	mov	r3, r2
 8009774:	011b      	lsls	r3, r3, #4
 8009776:	1a9b      	subs	r3, r3, r2
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	440b      	add	r3, r1
 800977c:	334d      	adds	r3, #77	@ 0x4d
 800977e:	2201      	movs	r2, #1
 8009780:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	78fa      	ldrb	r2, [r7, #3]
 8009788:	4611      	mov	r1, r2
 800978a:	4618      	mov	r0, r3
 800978c:	f008 f8d0 	bl	8011930 <USB_HC_Halt>
 8009790:	e365      	b.n	8009e5e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	78fa      	ldrb	r2, [r7, #3]
 8009798:	4611      	mov	r1, r2
 800979a:	4618      	mov	r0, r3
 800979c:	f008 f84b 	bl	8011836 <USB_ReadChInterrupts>
 80097a0:	4603      	mov	r3, r0
 80097a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097a6:	2b40      	cmp	r3, #64	@ 0x40
 80097a8:	d139      	bne.n	800981e <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80097aa:	78fa      	ldrb	r2, [r7, #3]
 80097ac:	6879      	ldr	r1, [r7, #4]
 80097ae:	4613      	mov	r3, r2
 80097b0:	011b      	lsls	r3, r3, #4
 80097b2:	1a9b      	subs	r3, r3, r2
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	440b      	add	r3, r1
 80097b8:	334d      	adds	r3, #77	@ 0x4d
 80097ba:	2205      	movs	r2, #5
 80097bc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80097be:	78fa      	ldrb	r2, [r7, #3]
 80097c0:	6879      	ldr	r1, [r7, #4]
 80097c2:	4613      	mov	r3, r2
 80097c4:	011b      	lsls	r3, r3, #4
 80097c6:	1a9b      	subs	r3, r3, r2
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	440b      	add	r3, r1
 80097cc:	331a      	adds	r3, #26
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d109      	bne.n	80097e8 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80097d4:	78fa      	ldrb	r2, [r7, #3]
 80097d6:	6879      	ldr	r1, [r7, #4]
 80097d8:	4613      	mov	r3, r2
 80097da:	011b      	lsls	r3, r3, #4
 80097dc:	1a9b      	subs	r3, r3, r2
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	440b      	add	r3, r1
 80097e2:	3319      	adds	r3, #25
 80097e4:	2201      	movs	r2, #1
 80097e6:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80097e8:	78fa      	ldrb	r2, [r7, #3]
 80097ea:	6879      	ldr	r1, [r7, #4]
 80097ec:	4613      	mov	r3, r2
 80097ee:	011b      	lsls	r3, r3, #4
 80097f0:	1a9b      	subs	r3, r3, r2
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	440b      	add	r3, r1
 80097f6:	3344      	adds	r3, #68	@ 0x44
 80097f8:	2200      	movs	r2, #0
 80097fa:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	78fa      	ldrb	r2, [r7, #3]
 8009802:	4611      	mov	r1, r2
 8009804:	4618      	mov	r0, r3
 8009806:	f008 f893 	bl	8011930 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800980a:	78fb      	ldrb	r3, [r7, #3]
 800980c:	015a      	lsls	r2, r3, #5
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	4413      	add	r3, r2
 8009812:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009816:	461a      	mov	r2, r3
 8009818:	2340      	movs	r3, #64	@ 0x40
 800981a:	6093      	str	r3, [r2, #8]
 800981c:	e31f      	b.n	8009e5e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	78fa      	ldrb	r2, [r7, #3]
 8009824:	4611      	mov	r1, r2
 8009826:	4618      	mov	r0, r3
 8009828:	f008 f805 	bl	8011836 <USB_ReadChInterrupts>
 800982c:	4603      	mov	r3, r0
 800982e:	f003 0308 	and.w	r3, r3, #8
 8009832:	2b08      	cmp	r3, #8
 8009834:	d11a      	bne.n	800986c <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8009836:	78fb      	ldrb	r3, [r7, #3]
 8009838:	015a      	lsls	r2, r3, #5
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	4413      	add	r3, r2
 800983e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009842:	461a      	mov	r2, r3
 8009844:	2308      	movs	r3, #8
 8009846:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8009848:	78fa      	ldrb	r2, [r7, #3]
 800984a:	6879      	ldr	r1, [r7, #4]
 800984c:	4613      	mov	r3, r2
 800984e:	011b      	lsls	r3, r3, #4
 8009850:	1a9b      	subs	r3, r3, r2
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	440b      	add	r3, r1
 8009856:	334d      	adds	r3, #77	@ 0x4d
 8009858:	2206      	movs	r2, #6
 800985a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	78fa      	ldrb	r2, [r7, #3]
 8009862:	4611      	mov	r1, r2
 8009864:	4618      	mov	r0, r3
 8009866:	f008 f863 	bl	8011930 <USB_HC_Halt>
 800986a:	e2f8      	b.n	8009e5e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	78fa      	ldrb	r2, [r7, #3]
 8009872:	4611      	mov	r1, r2
 8009874:	4618      	mov	r0, r3
 8009876:	f007 ffde 	bl	8011836 <USB_ReadChInterrupts>
 800987a:	4603      	mov	r3, r0
 800987c:	f003 0310 	and.w	r3, r3, #16
 8009880:	2b10      	cmp	r3, #16
 8009882:	d144      	bne.n	800990e <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8009884:	78fa      	ldrb	r2, [r7, #3]
 8009886:	6879      	ldr	r1, [r7, #4]
 8009888:	4613      	mov	r3, r2
 800988a:	011b      	lsls	r3, r3, #4
 800988c:	1a9b      	subs	r3, r3, r2
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	440b      	add	r3, r1
 8009892:	3344      	adds	r3, #68	@ 0x44
 8009894:	2200      	movs	r2, #0
 8009896:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8009898:	78fa      	ldrb	r2, [r7, #3]
 800989a:	6879      	ldr	r1, [r7, #4]
 800989c:	4613      	mov	r3, r2
 800989e:	011b      	lsls	r3, r3, #4
 80098a0:	1a9b      	subs	r3, r3, r2
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	440b      	add	r3, r1
 80098a6:	334d      	adds	r3, #77	@ 0x4d
 80098a8:	2204      	movs	r2, #4
 80098aa:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80098ac:	78fa      	ldrb	r2, [r7, #3]
 80098ae:	6879      	ldr	r1, [r7, #4]
 80098b0:	4613      	mov	r3, r2
 80098b2:	011b      	lsls	r3, r3, #4
 80098b4:	1a9b      	subs	r3, r3, r2
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	440b      	add	r3, r1
 80098ba:	3319      	adds	r3, #25
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d114      	bne.n	80098ec <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80098c2:	78fa      	ldrb	r2, [r7, #3]
 80098c4:	6879      	ldr	r1, [r7, #4]
 80098c6:	4613      	mov	r3, r2
 80098c8:	011b      	lsls	r3, r3, #4
 80098ca:	1a9b      	subs	r3, r3, r2
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	440b      	add	r3, r1
 80098d0:	3318      	adds	r3, #24
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d109      	bne.n	80098ec <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80098d8:	78fa      	ldrb	r2, [r7, #3]
 80098da:	6879      	ldr	r1, [r7, #4]
 80098dc:	4613      	mov	r3, r2
 80098de:	011b      	lsls	r3, r3, #4
 80098e0:	1a9b      	subs	r3, r3, r2
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	440b      	add	r3, r1
 80098e6:	3319      	adds	r3, #25
 80098e8:	2201      	movs	r2, #1
 80098ea:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	78fa      	ldrb	r2, [r7, #3]
 80098f2:	4611      	mov	r1, r2
 80098f4:	4618      	mov	r0, r3
 80098f6:	f008 f81b 	bl	8011930 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80098fa:	78fb      	ldrb	r3, [r7, #3]
 80098fc:	015a      	lsls	r2, r3, #5
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	4413      	add	r3, r2
 8009902:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009906:	461a      	mov	r2, r3
 8009908:	2310      	movs	r3, #16
 800990a:	6093      	str	r3, [r2, #8]
 800990c:	e2a7      	b.n	8009e5e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	78fa      	ldrb	r2, [r7, #3]
 8009914:	4611      	mov	r1, r2
 8009916:	4618      	mov	r0, r3
 8009918:	f007 ff8d 	bl	8011836 <USB_ReadChInterrupts>
 800991c:	4603      	mov	r3, r0
 800991e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009922:	2b80      	cmp	r3, #128	@ 0x80
 8009924:	f040 8083 	bne.w	8009a2e <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	799b      	ldrb	r3, [r3, #6]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d111      	bne.n	8009954 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8009930:	78fa      	ldrb	r2, [r7, #3]
 8009932:	6879      	ldr	r1, [r7, #4]
 8009934:	4613      	mov	r3, r2
 8009936:	011b      	lsls	r3, r3, #4
 8009938:	1a9b      	subs	r3, r3, r2
 800993a:	009b      	lsls	r3, r3, #2
 800993c:	440b      	add	r3, r1
 800993e:	334d      	adds	r3, #77	@ 0x4d
 8009940:	2207      	movs	r2, #7
 8009942:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	78fa      	ldrb	r2, [r7, #3]
 800994a:	4611      	mov	r1, r2
 800994c:	4618      	mov	r0, r3
 800994e:	f007 ffef 	bl	8011930 <USB_HC_Halt>
 8009952:	e062      	b.n	8009a1a <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8009954:	78fa      	ldrb	r2, [r7, #3]
 8009956:	6879      	ldr	r1, [r7, #4]
 8009958:	4613      	mov	r3, r2
 800995a:	011b      	lsls	r3, r3, #4
 800995c:	1a9b      	subs	r3, r3, r2
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	440b      	add	r3, r1
 8009962:	3344      	adds	r3, #68	@ 0x44
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	1c59      	adds	r1, r3, #1
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	4613      	mov	r3, r2
 800996c:	011b      	lsls	r3, r3, #4
 800996e:	1a9b      	subs	r3, r3, r2
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	4403      	add	r3, r0
 8009974:	3344      	adds	r3, #68	@ 0x44
 8009976:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009978:	78fa      	ldrb	r2, [r7, #3]
 800997a:	6879      	ldr	r1, [r7, #4]
 800997c:	4613      	mov	r3, r2
 800997e:	011b      	lsls	r3, r3, #4
 8009980:	1a9b      	subs	r3, r3, r2
 8009982:	009b      	lsls	r3, r3, #2
 8009984:	440b      	add	r3, r1
 8009986:	3344      	adds	r3, #68	@ 0x44
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	2b02      	cmp	r3, #2
 800998c:	d922      	bls.n	80099d4 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800998e:	78fa      	ldrb	r2, [r7, #3]
 8009990:	6879      	ldr	r1, [r7, #4]
 8009992:	4613      	mov	r3, r2
 8009994:	011b      	lsls	r3, r3, #4
 8009996:	1a9b      	subs	r3, r3, r2
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	440b      	add	r3, r1
 800999c:	3344      	adds	r3, #68	@ 0x44
 800999e:	2200      	movs	r2, #0
 80099a0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80099a2:	78fa      	ldrb	r2, [r7, #3]
 80099a4:	6879      	ldr	r1, [r7, #4]
 80099a6:	4613      	mov	r3, r2
 80099a8:	011b      	lsls	r3, r3, #4
 80099aa:	1a9b      	subs	r3, r3, r2
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	440b      	add	r3, r1
 80099b0:	334c      	adds	r3, #76	@ 0x4c
 80099b2:	2204      	movs	r2, #4
 80099b4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80099b6:	78fa      	ldrb	r2, [r7, #3]
 80099b8:	6879      	ldr	r1, [r7, #4]
 80099ba:	4613      	mov	r3, r2
 80099bc:	011b      	lsls	r3, r3, #4
 80099be:	1a9b      	subs	r3, r3, r2
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	440b      	add	r3, r1
 80099c4:	334c      	adds	r3, #76	@ 0x4c
 80099c6:	781a      	ldrb	r2, [r3, #0]
 80099c8:	78fb      	ldrb	r3, [r7, #3]
 80099ca:	4619      	mov	r1, r3
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f00d fe5b 	bl	8017688 <HAL_HCD_HC_NotifyURBChange_Callback>
 80099d2:	e022      	b.n	8009a1a <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80099d4:	78fa      	ldrb	r2, [r7, #3]
 80099d6:	6879      	ldr	r1, [r7, #4]
 80099d8:	4613      	mov	r3, r2
 80099da:	011b      	lsls	r3, r3, #4
 80099dc:	1a9b      	subs	r3, r3, r2
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	440b      	add	r3, r1
 80099e2:	334c      	adds	r3, #76	@ 0x4c
 80099e4:	2202      	movs	r2, #2
 80099e6:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80099e8:	78fb      	ldrb	r3, [r7, #3]
 80099ea:	015a      	lsls	r2, r3, #5
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	4413      	add	r3, r2
 80099f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80099fe:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009a06:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8009a08:	78fb      	ldrb	r3, [r7, #3]
 8009a0a:	015a      	lsls	r2, r3, #5
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	4413      	add	r3, r2
 8009a10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a14:	461a      	mov	r2, r3
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8009a1a:	78fb      	ldrb	r3, [r7, #3]
 8009a1c:	015a      	lsls	r2, r3, #5
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	4413      	add	r3, r2
 8009a22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a26:	461a      	mov	r2, r3
 8009a28:	2380      	movs	r3, #128	@ 0x80
 8009a2a:	6093      	str	r3, [r2, #8]
 8009a2c:	e217      	b.n	8009e5e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	78fa      	ldrb	r2, [r7, #3]
 8009a34:	4611      	mov	r1, r2
 8009a36:	4618      	mov	r0, r3
 8009a38:	f007 fefd 	bl	8011836 <USB_ReadChInterrupts>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a46:	d11b      	bne.n	8009a80 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8009a48:	78fa      	ldrb	r2, [r7, #3]
 8009a4a:	6879      	ldr	r1, [r7, #4]
 8009a4c:	4613      	mov	r3, r2
 8009a4e:	011b      	lsls	r3, r3, #4
 8009a50:	1a9b      	subs	r3, r3, r2
 8009a52:	009b      	lsls	r3, r3, #2
 8009a54:	440b      	add	r3, r1
 8009a56:	334d      	adds	r3, #77	@ 0x4d
 8009a58:	2209      	movs	r2, #9
 8009a5a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	78fa      	ldrb	r2, [r7, #3]
 8009a62:	4611      	mov	r1, r2
 8009a64:	4618      	mov	r0, r3
 8009a66:	f007 ff63 	bl	8011930 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8009a6a:	78fb      	ldrb	r3, [r7, #3]
 8009a6c:	015a      	lsls	r2, r3, #5
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	4413      	add	r3, r2
 8009a72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a76:	461a      	mov	r2, r3
 8009a78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a7c:	6093      	str	r3, [r2, #8]
 8009a7e:	e1ee      	b.n	8009e5e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	78fa      	ldrb	r2, [r7, #3]
 8009a86:	4611      	mov	r1, r2
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f007 fed4 	bl	8011836 <USB_ReadChInterrupts>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	f003 0302 	and.w	r3, r3, #2
 8009a94:	2b02      	cmp	r3, #2
 8009a96:	f040 81df 	bne.w	8009e58 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8009a9a:	78fb      	ldrb	r3, [r7, #3]
 8009a9c:	015a      	lsls	r2, r3, #5
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	4413      	add	r3, r2
 8009aa2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	2302      	movs	r3, #2
 8009aaa:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8009aac:	78fa      	ldrb	r2, [r7, #3]
 8009aae:	6879      	ldr	r1, [r7, #4]
 8009ab0:	4613      	mov	r3, r2
 8009ab2:	011b      	lsls	r3, r3, #4
 8009ab4:	1a9b      	subs	r3, r3, r2
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	440b      	add	r3, r1
 8009aba:	334d      	adds	r3, #77	@ 0x4d
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	2b01      	cmp	r3, #1
 8009ac0:	f040 8093 	bne.w	8009bea <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009ac4:	78fa      	ldrb	r2, [r7, #3]
 8009ac6:	6879      	ldr	r1, [r7, #4]
 8009ac8:	4613      	mov	r3, r2
 8009aca:	011b      	lsls	r3, r3, #4
 8009acc:	1a9b      	subs	r3, r3, r2
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	440b      	add	r3, r1
 8009ad2:	334d      	adds	r3, #77	@ 0x4d
 8009ad4:	2202      	movs	r2, #2
 8009ad6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8009ad8:	78fa      	ldrb	r2, [r7, #3]
 8009ada:	6879      	ldr	r1, [r7, #4]
 8009adc:	4613      	mov	r3, r2
 8009ade:	011b      	lsls	r3, r3, #4
 8009ae0:	1a9b      	subs	r3, r3, r2
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	440b      	add	r3, r1
 8009ae6:	334c      	adds	r3, #76	@ 0x4c
 8009ae8:	2201      	movs	r2, #1
 8009aea:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8009aec:	78fa      	ldrb	r2, [r7, #3]
 8009aee:	6879      	ldr	r1, [r7, #4]
 8009af0:	4613      	mov	r3, r2
 8009af2:	011b      	lsls	r3, r3, #4
 8009af4:	1a9b      	subs	r3, r3, r2
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	440b      	add	r3, r1
 8009afa:	3326      	adds	r3, #38	@ 0x26
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	2b02      	cmp	r3, #2
 8009b00:	d00b      	beq.n	8009b1a <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8009b02:	78fa      	ldrb	r2, [r7, #3]
 8009b04:	6879      	ldr	r1, [r7, #4]
 8009b06:	4613      	mov	r3, r2
 8009b08:	011b      	lsls	r3, r3, #4
 8009b0a:	1a9b      	subs	r3, r3, r2
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	440b      	add	r3, r1
 8009b10:	3326      	adds	r3, #38	@ 0x26
 8009b12:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8009b14:	2b03      	cmp	r3, #3
 8009b16:	f040 8190 	bne.w	8009e3a <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	799b      	ldrb	r3, [r3, #6]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d115      	bne.n	8009b4e <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8009b22:	78fa      	ldrb	r2, [r7, #3]
 8009b24:	6879      	ldr	r1, [r7, #4]
 8009b26:	4613      	mov	r3, r2
 8009b28:	011b      	lsls	r3, r3, #4
 8009b2a:	1a9b      	subs	r3, r3, r2
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	440b      	add	r3, r1
 8009b30:	333d      	adds	r3, #61	@ 0x3d
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	78fa      	ldrb	r2, [r7, #3]
 8009b36:	f083 0301 	eor.w	r3, r3, #1
 8009b3a:	b2d8      	uxtb	r0, r3
 8009b3c:	6879      	ldr	r1, [r7, #4]
 8009b3e:	4613      	mov	r3, r2
 8009b40:	011b      	lsls	r3, r3, #4
 8009b42:	1a9b      	subs	r3, r3, r2
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	440b      	add	r3, r1
 8009b48:	333d      	adds	r3, #61	@ 0x3d
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	799b      	ldrb	r3, [r3, #6]
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	f040 8171 	bne.w	8009e3a <HCD_HC_OUT_IRQHandler+0x954>
 8009b58:	78fa      	ldrb	r2, [r7, #3]
 8009b5a:	6879      	ldr	r1, [r7, #4]
 8009b5c:	4613      	mov	r3, r2
 8009b5e:	011b      	lsls	r3, r3, #4
 8009b60:	1a9b      	subs	r3, r3, r2
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	440b      	add	r3, r1
 8009b66:	3334      	adds	r3, #52	@ 0x34
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	f000 8165 	beq.w	8009e3a <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8009b70:	78fa      	ldrb	r2, [r7, #3]
 8009b72:	6879      	ldr	r1, [r7, #4]
 8009b74:	4613      	mov	r3, r2
 8009b76:	011b      	lsls	r3, r3, #4
 8009b78:	1a9b      	subs	r3, r3, r2
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	440b      	add	r3, r1
 8009b7e:	3334      	adds	r3, #52	@ 0x34
 8009b80:	6819      	ldr	r1, [r3, #0]
 8009b82:	78fa      	ldrb	r2, [r7, #3]
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	4613      	mov	r3, r2
 8009b88:	011b      	lsls	r3, r3, #4
 8009b8a:	1a9b      	subs	r3, r3, r2
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	4403      	add	r3, r0
 8009b90:	3328      	adds	r3, #40	@ 0x28
 8009b92:	881b      	ldrh	r3, [r3, #0]
 8009b94:	440b      	add	r3, r1
 8009b96:	1e59      	subs	r1, r3, #1
 8009b98:	78fa      	ldrb	r2, [r7, #3]
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	4613      	mov	r3, r2
 8009b9e:	011b      	lsls	r3, r3, #4
 8009ba0:	1a9b      	subs	r3, r3, r2
 8009ba2:	009b      	lsls	r3, r3, #2
 8009ba4:	4403      	add	r3, r0
 8009ba6:	3328      	adds	r3, #40	@ 0x28
 8009ba8:	881b      	ldrh	r3, [r3, #0]
 8009baa:	fbb1 f3f3 	udiv	r3, r1, r3
 8009bae:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	f003 0301 	and.w	r3, r3, #1
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	f000 813f 	beq.w	8009e3a <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8009bbc:	78fa      	ldrb	r2, [r7, #3]
 8009bbe:	6879      	ldr	r1, [r7, #4]
 8009bc0:	4613      	mov	r3, r2
 8009bc2:	011b      	lsls	r3, r3, #4
 8009bc4:	1a9b      	subs	r3, r3, r2
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	440b      	add	r3, r1
 8009bca:	333d      	adds	r3, #61	@ 0x3d
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	78fa      	ldrb	r2, [r7, #3]
 8009bd0:	f083 0301 	eor.w	r3, r3, #1
 8009bd4:	b2d8      	uxtb	r0, r3
 8009bd6:	6879      	ldr	r1, [r7, #4]
 8009bd8:	4613      	mov	r3, r2
 8009bda:	011b      	lsls	r3, r3, #4
 8009bdc:	1a9b      	subs	r3, r3, r2
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	440b      	add	r3, r1
 8009be2:	333d      	adds	r3, #61	@ 0x3d
 8009be4:	4602      	mov	r2, r0
 8009be6:	701a      	strb	r2, [r3, #0]
 8009be8:	e127      	b.n	8009e3a <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8009bea:	78fa      	ldrb	r2, [r7, #3]
 8009bec:	6879      	ldr	r1, [r7, #4]
 8009bee:	4613      	mov	r3, r2
 8009bf0:	011b      	lsls	r3, r3, #4
 8009bf2:	1a9b      	subs	r3, r3, r2
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	440b      	add	r3, r1
 8009bf8:	334d      	adds	r3, #77	@ 0x4d
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	2b03      	cmp	r3, #3
 8009bfe:	d120      	bne.n	8009c42 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009c00:	78fa      	ldrb	r2, [r7, #3]
 8009c02:	6879      	ldr	r1, [r7, #4]
 8009c04:	4613      	mov	r3, r2
 8009c06:	011b      	lsls	r3, r3, #4
 8009c08:	1a9b      	subs	r3, r3, r2
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	440b      	add	r3, r1
 8009c0e:	334d      	adds	r3, #77	@ 0x4d
 8009c10:	2202      	movs	r2, #2
 8009c12:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8009c14:	78fa      	ldrb	r2, [r7, #3]
 8009c16:	6879      	ldr	r1, [r7, #4]
 8009c18:	4613      	mov	r3, r2
 8009c1a:	011b      	lsls	r3, r3, #4
 8009c1c:	1a9b      	subs	r3, r3, r2
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	440b      	add	r3, r1
 8009c22:	331b      	adds	r3, #27
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	f040 8107 	bne.w	8009e3a <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009c2c:	78fa      	ldrb	r2, [r7, #3]
 8009c2e:	6879      	ldr	r1, [r7, #4]
 8009c30:	4613      	mov	r3, r2
 8009c32:	011b      	lsls	r3, r3, #4
 8009c34:	1a9b      	subs	r3, r3, r2
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	440b      	add	r3, r1
 8009c3a:	334c      	adds	r3, #76	@ 0x4c
 8009c3c:	2202      	movs	r2, #2
 8009c3e:	701a      	strb	r2, [r3, #0]
 8009c40:	e0fb      	b.n	8009e3a <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8009c42:	78fa      	ldrb	r2, [r7, #3]
 8009c44:	6879      	ldr	r1, [r7, #4]
 8009c46:	4613      	mov	r3, r2
 8009c48:	011b      	lsls	r3, r3, #4
 8009c4a:	1a9b      	subs	r3, r3, r2
 8009c4c:	009b      	lsls	r3, r3, #2
 8009c4e:	440b      	add	r3, r1
 8009c50:	334d      	adds	r3, #77	@ 0x4d
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	2b04      	cmp	r3, #4
 8009c56:	d13a      	bne.n	8009cce <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009c58:	78fa      	ldrb	r2, [r7, #3]
 8009c5a:	6879      	ldr	r1, [r7, #4]
 8009c5c:	4613      	mov	r3, r2
 8009c5e:	011b      	lsls	r3, r3, #4
 8009c60:	1a9b      	subs	r3, r3, r2
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	440b      	add	r3, r1
 8009c66:	334d      	adds	r3, #77	@ 0x4d
 8009c68:	2202      	movs	r2, #2
 8009c6a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009c6c:	78fa      	ldrb	r2, [r7, #3]
 8009c6e:	6879      	ldr	r1, [r7, #4]
 8009c70:	4613      	mov	r3, r2
 8009c72:	011b      	lsls	r3, r3, #4
 8009c74:	1a9b      	subs	r3, r3, r2
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	440b      	add	r3, r1
 8009c7a:	334c      	adds	r3, #76	@ 0x4c
 8009c7c:	2202      	movs	r2, #2
 8009c7e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8009c80:	78fa      	ldrb	r2, [r7, #3]
 8009c82:	6879      	ldr	r1, [r7, #4]
 8009c84:	4613      	mov	r3, r2
 8009c86:	011b      	lsls	r3, r3, #4
 8009c88:	1a9b      	subs	r3, r3, r2
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	440b      	add	r3, r1
 8009c8e:	331b      	adds	r3, #27
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	2b01      	cmp	r3, #1
 8009c94:	f040 80d1 	bne.w	8009e3a <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8009c98:	78fa      	ldrb	r2, [r7, #3]
 8009c9a:	6879      	ldr	r1, [r7, #4]
 8009c9c:	4613      	mov	r3, r2
 8009c9e:	011b      	lsls	r3, r3, #4
 8009ca0:	1a9b      	subs	r3, r3, r2
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	440b      	add	r3, r1
 8009ca6:	331b      	adds	r3, #27
 8009ca8:	2200      	movs	r2, #0
 8009caa:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8009cac:	78fb      	ldrb	r3, [r7, #3]
 8009cae:	015a      	lsls	r2, r3, #5
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	78fa      	ldrb	r2, [r7, #3]
 8009cbc:	0151      	lsls	r1, r2, #5
 8009cbe:	693a      	ldr	r2, [r7, #16]
 8009cc0:	440a      	add	r2, r1
 8009cc2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009cc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009cca:	6053      	str	r3, [r2, #4]
 8009ccc:	e0b5      	b.n	8009e3a <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8009cce:	78fa      	ldrb	r2, [r7, #3]
 8009cd0:	6879      	ldr	r1, [r7, #4]
 8009cd2:	4613      	mov	r3, r2
 8009cd4:	011b      	lsls	r3, r3, #4
 8009cd6:	1a9b      	subs	r3, r3, r2
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	440b      	add	r3, r1
 8009cdc:	334d      	adds	r3, #77	@ 0x4d
 8009cde:	781b      	ldrb	r3, [r3, #0]
 8009ce0:	2b05      	cmp	r3, #5
 8009ce2:	d114      	bne.n	8009d0e <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009ce4:	78fa      	ldrb	r2, [r7, #3]
 8009ce6:	6879      	ldr	r1, [r7, #4]
 8009ce8:	4613      	mov	r3, r2
 8009cea:	011b      	lsls	r3, r3, #4
 8009cec:	1a9b      	subs	r3, r3, r2
 8009cee:	009b      	lsls	r3, r3, #2
 8009cf0:	440b      	add	r3, r1
 8009cf2:	334d      	adds	r3, #77	@ 0x4d
 8009cf4:	2202      	movs	r2, #2
 8009cf6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8009cf8:	78fa      	ldrb	r2, [r7, #3]
 8009cfa:	6879      	ldr	r1, [r7, #4]
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	011b      	lsls	r3, r3, #4
 8009d00:	1a9b      	subs	r3, r3, r2
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	440b      	add	r3, r1
 8009d06:	334c      	adds	r3, #76	@ 0x4c
 8009d08:	2202      	movs	r2, #2
 8009d0a:	701a      	strb	r2, [r3, #0]
 8009d0c:	e095      	b.n	8009e3a <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8009d0e:	78fa      	ldrb	r2, [r7, #3]
 8009d10:	6879      	ldr	r1, [r7, #4]
 8009d12:	4613      	mov	r3, r2
 8009d14:	011b      	lsls	r3, r3, #4
 8009d16:	1a9b      	subs	r3, r3, r2
 8009d18:	009b      	lsls	r3, r3, #2
 8009d1a:	440b      	add	r3, r1
 8009d1c:	334d      	adds	r3, #77	@ 0x4d
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	2b06      	cmp	r3, #6
 8009d22:	d114      	bne.n	8009d4e <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009d24:	78fa      	ldrb	r2, [r7, #3]
 8009d26:	6879      	ldr	r1, [r7, #4]
 8009d28:	4613      	mov	r3, r2
 8009d2a:	011b      	lsls	r3, r3, #4
 8009d2c:	1a9b      	subs	r3, r3, r2
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	440b      	add	r3, r1
 8009d32:	334d      	adds	r3, #77	@ 0x4d
 8009d34:	2202      	movs	r2, #2
 8009d36:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8009d38:	78fa      	ldrb	r2, [r7, #3]
 8009d3a:	6879      	ldr	r1, [r7, #4]
 8009d3c:	4613      	mov	r3, r2
 8009d3e:	011b      	lsls	r3, r3, #4
 8009d40:	1a9b      	subs	r3, r3, r2
 8009d42:	009b      	lsls	r3, r3, #2
 8009d44:	440b      	add	r3, r1
 8009d46:	334c      	adds	r3, #76	@ 0x4c
 8009d48:	2205      	movs	r2, #5
 8009d4a:	701a      	strb	r2, [r3, #0]
 8009d4c:	e075      	b.n	8009e3a <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8009d4e:	78fa      	ldrb	r2, [r7, #3]
 8009d50:	6879      	ldr	r1, [r7, #4]
 8009d52:	4613      	mov	r3, r2
 8009d54:	011b      	lsls	r3, r3, #4
 8009d56:	1a9b      	subs	r3, r3, r2
 8009d58:	009b      	lsls	r3, r3, #2
 8009d5a:	440b      	add	r3, r1
 8009d5c:	334d      	adds	r3, #77	@ 0x4d
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	2b07      	cmp	r3, #7
 8009d62:	d00a      	beq.n	8009d7a <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8009d64:	78fa      	ldrb	r2, [r7, #3]
 8009d66:	6879      	ldr	r1, [r7, #4]
 8009d68:	4613      	mov	r3, r2
 8009d6a:	011b      	lsls	r3, r3, #4
 8009d6c:	1a9b      	subs	r3, r3, r2
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	440b      	add	r3, r1
 8009d72:	334d      	adds	r3, #77	@ 0x4d
 8009d74:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8009d76:	2b09      	cmp	r3, #9
 8009d78:	d170      	bne.n	8009e5c <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009d7a:	78fa      	ldrb	r2, [r7, #3]
 8009d7c:	6879      	ldr	r1, [r7, #4]
 8009d7e:	4613      	mov	r3, r2
 8009d80:	011b      	lsls	r3, r3, #4
 8009d82:	1a9b      	subs	r3, r3, r2
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	440b      	add	r3, r1
 8009d88:	334d      	adds	r3, #77	@ 0x4d
 8009d8a:	2202      	movs	r2, #2
 8009d8c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8009d8e:	78fa      	ldrb	r2, [r7, #3]
 8009d90:	6879      	ldr	r1, [r7, #4]
 8009d92:	4613      	mov	r3, r2
 8009d94:	011b      	lsls	r3, r3, #4
 8009d96:	1a9b      	subs	r3, r3, r2
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	440b      	add	r3, r1
 8009d9c:	3344      	adds	r3, #68	@ 0x44
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	1c59      	adds	r1, r3, #1
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	4613      	mov	r3, r2
 8009da6:	011b      	lsls	r3, r3, #4
 8009da8:	1a9b      	subs	r3, r3, r2
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	4403      	add	r3, r0
 8009dae:	3344      	adds	r3, #68	@ 0x44
 8009db0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009db2:	78fa      	ldrb	r2, [r7, #3]
 8009db4:	6879      	ldr	r1, [r7, #4]
 8009db6:	4613      	mov	r3, r2
 8009db8:	011b      	lsls	r3, r3, #4
 8009dba:	1a9b      	subs	r3, r3, r2
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	440b      	add	r3, r1
 8009dc0:	3344      	adds	r3, #68	@ 0x44
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	2b02      	cmp	r3, #2
 8009dc6:	d914      	bls.n	8009df2 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8009dc8:	78fa      	ldrb	r2, [r7, #3]
 8009dca:	6879      	ldr	r1, [r7, #4]
 8009dcc:	4613      	mov	r3, r2
 8009dce:	011b      	lsls	r3, r3, #4
 8009dd0:	1a9b      	subs	r3, r3, r2
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	440b      	add	r3, r1
 8009dd6:	3344      	adds	r3, #68	@ 0x44
 8009dd8:	2200      	movs	r2, #0
 8009dda:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8009ddc:	78fa      	ldrb	r2, [r7, #3]
 8009dde:	6879      	ldr	r1, [r7, #4]
 8009de0:	4613      	mov	r3, r2
 8009de2:	011b      	lsls	r3, r3, #4
 8009de4:	1a9b      	subs	r3, r3, r2
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	440b      	add	r3, r1
 8009dea:	334c      	adds	r3, #76	@ 0x4c
 8009dec:	2204      	movs	r2, #4
 8009dee:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009df0:	e022      	b.n	8009e38 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009df2:	78fa      	ldrb	r2, [r7, #3]
 8009df4:	6879      	ldr	r1, [r7, #4]
 8009df6:	4613      	mov	r3, r2
 8009df8:	011b      	lsls	r3, r3, #4
 8009dfa:	1a9b      	subs	r3, r3, r2
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	440b      	add	r3, r1
 8009e00:	334c      	adds	r3, #76	@ 0x4c
 8009e02:	2202      	movs	r2, #2
 8009e04:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8009e06:	78fb      	ldrb	r3, [r7, #3]
 8009e08:	015a      	lsls	r2, r3, #5
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009e1c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009e24:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8009e26:	78fb      	ldrb	r3, [r7, #3]
 8009e28:	015a      	lsls	r2, r3, #5
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	4413      	add	r3, r2
 8009e2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e32:	461a      	mov	r2, r3
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009e38:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8009e3a:	78fa      	ldrb	r2, [r7, #3]
 8009e3c:	6879      	ldr	r1, [r7, #4]
 8009e3e:	4613      	mov	r3, r2
 8009e40:	011b      	lsls	r3, r3, #4
 8009e42:	1a9b      	subs	r3, r3, r2
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	440b      	add	r3, r1
 8009e48:	334c      	adds	r3, #76	@ 0x4c
 8009e4a:	781a      	ldrb	r2, [r3, #0]
 8009e4c:	78fb      	ldrb	r3, [r7, #3]
 8009e4e:	4619      	mov	r1, r3
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f00d fc19 	bl	8017688 <HAL_HCD_HC_NotifyURBChange_Callback>
 8009e56:	e002      	b.n	8009e5e <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8009e58:	bf00      	nop
 8009e5a:	e000      	b.n	8009e5e <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8009e5c:	bf00      	nop
  }
}
 8009e5e:	3718      	adds	r7, #24
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b08a      	sub	sp, #40	@ 0x28
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e74:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	6a1b      	ldr	r3, [r3, #32]
 8009e7c:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8009e7e:	69fb      	ldr	r3, [r7, #28]
 8009e80:	f003 030f 	and.w	r3, r3, #15
 8009e84:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	0c5b      	lsrs	r3, r3, #17
 8009e8a:	f003 030f 	and.w	r3, r3, #15
 8009e8e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009e90:	69fb      	ldr	r3, [r7, #28]
 8009e92:	091b      	lsrs	r3, r3, #4
 8009e94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009e98:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	2b02      	cmp	r3, #2
 8009e9e:	d004      	beq.n	8009eaa <HCD_RXQLVL_IRQHandler+0x46>
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	2b05      	cmp	r3, #5
 8009ea4:	f000 80b6 	beq.w	800a014 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8009ea8:	e0b7      	b.n	800a01a <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	f000 80b3 	beq.w	800a018 <HCD_RXQLVL_IRQHandler+0x1b4>
 8009eb2:	6879      	ldr	r1, [r7, #4]
 8009eb4:	69ba      	ldr	r2, [r7, #24]
 8009eb6:	4613      	mov	r3, r2
 8009eb8:	011b      	lsls	r3, r3, #4
 8009eba:	1a9b      	subs	r3, r3, r2
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	440b      	add	r3, r1
 8009ec0:	332c      	adds	r3, #44	@ 0x2c
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	f000 80a7 	beq.w	800a018 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8009eca:	6879      	ldr	r1, [r7, #4]
 8009ecc:	69ba      	ldr	r2, [r7, #24]
 8009ece:	4613      	mov	r3, r2
 8009ed0:	011b      	lsls	r3, r3, #4
 8009ed2:	1a9b      	subs	r3, r3, r2
 8009ed4:	009b      	lsls	r3, r3, #2
 8009ed6:	440b      	add	r3, r1
 8009ed8:	3338      	adds	r3, #56	@ 0x38
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	18d1      	adds	r1, r2, r3
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	69ba      	ldr	r2, [r7, #24]
 8009ee4:	4613      	mov	r3, r2
 8009ee6:	011b      	lsls	r3, r3, #4
 8009ee8:	1a9b      	subs	r3, r3, r2
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	4403      	add	r3, r0
 8009eee:	3334      	adds	r3, #52	@ 0x34
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4299      	cmp	r1, r3
 8009ef4:	f200 8083 	bhi.w	8009ffe <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6818      	ldr	r0, [r3, #0]
 8009efc:	6879      	ldr	r1, [r7, #4]
 8009efe:	69ba      	ldr	r2, [r7, #24]
 8009f00:	4613      	mov	r3, r2
 8009f02:	011b      	lsls	r3, r3, #4
 8009f04:	1a9b      	subs	r3, r3, r2
 8009f06:	009b      	lsls	r3, r3, #2
 8009f08:	440b      	add	r3, r1
 8009f0a:	332c      	adds	r3, #44	@ 0x2c
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	693a      	ldr	r2, [r7, #16]
 8009f10:	b292      	uxth	r2, r2
 8009f12:	4619      	mov	r1, r3
 8009f14:	f007 fc24 	bl	8011760 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8009f18:	6879      	ldr	r1, [r7, #4]
 8009f1a:	69ba      	ldr	r2, [r7, #24]
 8009f1c:	4613      	mov	r3, r2
 8009f1e:	011b      	lsls	r3, r3, #4
 8009f20:	1a9b      	subs	r3, r3, r2
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	440b      	add	r3, r1
 8009f26:	332c      	adds	r3, #44	@ 0x2c
 8009f28:	681a      	ldr	r2, [r3, #0]
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	18d1      	adds	r1, r2, r3
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	69ba      	ldr	r2, [r7, #24]
 8009f32:	4613      	mov	r3, r2
 8009f34:	011b      	lsls	r3, r3, #4
 8009f36:	1a9b      	subs	r3, r3, r2
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	4403      	add	r3, r0
 8009f3c:	332c      	adds	r3, #44	@ 0x2c
 8009f3e:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8009f40:	6879      	ldr	r1, [r7, #4]
 8009f42:	69ba      	ldr	r2, [r7, #24]
 8009f44:	4613      	mov	r3, r2
 8009f46:	011b      	lsls	r3, r3, #4
 8009f48:	1a9b      	subs	r3, r3, r2
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	440b      	add	r3, r1
 8009f4e:	3338      	adds	r3, #56	@ 0x38
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	18d1      	adds	r1, r2, r3
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	69ba      	ldr	r2, [r7, #24]
 8009f5a:	4613      	mov	r3, r2
 8009f5c:	011b      	lsls	r3, r3, #4
 8009f5e:	1a9b      	subs	r3, r3, r2
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	4403      	add	r3, r0
 8009f64:	3338      	adds	r3, #56	@ 0x38
 8009f66:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8009f68:	69bb      	ldr	r3, [r7, #24]
 8009f6a:	015a      	lsls	r2, r3, #5
 8009f6c:	6a3b      	ldr	r3, [r7, #32]
 8009f6e:	4413      	add	r3, r2
 8009f70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009f74:	691b      	ldr	r3, [r3, #16]
 8009f76:	0cdb      	lsrs	r3, r3, #19
 8009f78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f7c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8009f7e:	6879      	ldr	r1, [r7, #4]
 8009f80:	69ba      	ldr	r2, [r7, #24]
 8009f82:	4613      	mov	r3, r2
 8009f84:	011b      	lsls	r3, r3, #4
 8009f86:	1a9b      	subs	r3, r3, r2
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	440b      	add	r3, r1
 8009f8c:	3328      	adds	r3, #40	@ 0x28
 8009f8e:	881b      	ldrh	r3, [r3, #0]
 8009f90:	461a      	mov	r2, r3
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d13f      	bne.n	800a018 <HCD_RXQLVL_IRQHandler+0x1b4>
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d03c      	beq.n	800a018 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	015a      	lsls	r2, r3, #5
 8009fa2:	6a3b      	ldr	r3, [r7, #32]
 8009fa4:	4413      	add	r3, r2
 8009fa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009fb4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009fbc:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8009fbe:	69bb      	ldr	r3, [r7, #24]
 8009fc0:	015a      	lsls	r2, r3, #5
 8009fc2:	6a3b      	ldr	r3, [r7, #32]
 8009fc4:	4413      	add	r3, r2
 8009fc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009fca:	461a      	mov	r2, r3
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8009fd0:	6879      	ldr	r1, [r7, #4]
 8009fd2:	69ba      	ldr	r2, [r7, #24]
 8009fd4:	4613      	mov	r3, r2
 8009fd6:	011b      	lsls	r3, r3, #4
 8009fd8:	1a9b      	subs	r3, r3, r2
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	440b      	add	r3, r1
 8009fde:	333c      	adds	r3, #60	@ 0x3c
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	f083 0301 	eor.w	r3, r3, #1
 8009fe6:	b2d8      	uxtb	r0, r3
 8009fe8:	6879      	ldr	r1, [r7, #4]
 8009fea:	69ba      	ldr	r2, [r7, #24]
 8009fec:	4613      	mov	r3, r2
 8009fee:	011b      	lsls	r3, r3, #4
 8009ff0:	1a9b      	subs	r3, r3, r2
 8009ff2:	009b      	lsls	r3, r3, #2
 8009ff4:	440b      	add	r3, r1
 8009ff6:	333c      	adds	r3, #60	@ 0x3c
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	701a      	strb	r2, [r3, #0]
      break;
 8009ffc:	e00c      	b.n	800a018 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8009ffe:	6879      	ldr	r1, [r7, #4]
 800a000:	69ba      	ldr	r2, [r7, #24]
 800a002:	4613      	mov	r3, r2
 800a004:	011b      	lsls	r3, r3, #4
 800a006:	1a9b      	subs	r3, r3, r2
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	440b      	add	r3, r1
 800a00c:	334c      	adds	r3, #76	@ 0x4c
 800a00e:	2204      	movs	r2, #4
 800a010:	701a      	strb	r2, [r3, #0]
      break;
 800a012:	e001      	b.n	800a018 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800a014:	bf00      	nop
 800a016:	e000      	b.n	800a01a <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800a018:	bf00      	nop
  }
}
 800a01a:	bf00      	nop
 800a01c:	3728      	adds	r7, #40	@ 0x28
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}

0800a022 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800a022:	b580      	push	{r7, lr}
 800a024:	b086      	sub	sp, #24
 800a026:	af00      	add	r7, sp, #0
 800a028:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800a04e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f003 0302 	and.w	r3, r3, #2
 800a056:	2b02      	cmp	r3, #2
 800a058:	d10b      	bne.n	800a072 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f003 0301 	and.w	r3, r3, #1
 800a060:	2b01      	cmp	r3, #1
 800a062:	d102      	bne.n	800a06a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f00d faf3 	bl	8017650 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	f043 0302 	orr.w	r3, r3, #2
 800a070:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f003 0308 	and.w	r3, r3, #8
 800a078:	2b08      	cmp	r3, #8
 800a07a:	d132      	bne.n	800a0e2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	f043 0308 	orr.w	r3, r3, #8
 800a082:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f003 0304 	and.w	r3, r3, #4
 800a08a:	2b04      	cmp	r3, #4
 800a08c:	d126      	bne.n	800a0dc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	7a5b      	ldrb	r3, [r3, #9]
 800a092:	2b02      	cmp	r3, #2
 800a094:	d113      	bne.n	800a0be <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800a09c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a0a0:	d106      	bne.n	800a0b0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	2102      	movs	r1, #2
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f007 fbf3 	bl	8011894 <USB_InitFSLSPClkSel>
 800a0ae:	e011      	b.n	800a0d4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	2101      	movs	r1, #1
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f007 fbec 	bl	8011894 <USB_InitFSLSPClkSel>
 800a0bc:	e00a      	b.n	800a0d4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	79db      	ldrb	r3, [r3, #7]
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	d106      	bne.n	800a0d4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800a0d2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f00d fae9 	bl	80176ac <HAL_HCD_PortEnabled_Callback>
 800a0da:	e002      	b.n	800a0e2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f00d faf3 	bl	80176c8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f003 0320 	and.w	r3, r3, #32
 800a0e8:	2b20      	cmp	r3, #32
 800a0ea:	d103      	bne.n	800a0f4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	f043 0320 	orr.w	r3, r3, #32
 800a0f2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	6013      	str	r3, [r2, #0]
}
 800a100:	bf00      	nop
 800a102:	3718      	adds	r7, #24
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d101      	bne.n	800a11a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a116:	2301      	movs	r3, #1
 800a118:	e08b      	b.n	800a232 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a120:	b2db      	uxtb	r3, r3
 800a122:	2b00      	cmp	r3, #0
 800a124:	d106      	bne.n	800a134 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2200      	movs	r2, #0
 800a12a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f7fa fae0 	bl	80046f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2224      	movs	r2, #36	@ 0x24
 800a138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	681a      	ldr	r2, [r3, #0]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f022 0201 	bic.w	r2, r2, #1
 800a14a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	685a      	ldr	r2, [r3, #4]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800a158:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	689a      	ldr	r2, [r3, #8]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a168:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	2b01      	cmp	r3, #1
 800a170:	d107      	bne.n	800a182 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	689a      	ldr	r2, [r3, #8]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a17e:	609a      	str	r2, [r3, #8]
 800a180:	e006      	b.n	800a190 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	689a      	ldr	r2, [r3, #8]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800a18e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	2b02      	cmp	r3, #2
 800a196:	d108      	bne.n	800a1aa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	685a      	ldr	r2, [r3, #4]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a1a6:	605a      	str	r2, [r3, #4]
 800a1a8:	e007      	b.n	800a1ba <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	685a      	ldr	r2, [r3, #4]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a1b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	6859      	ldr	r1, [r3, #4]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681a      	ldr	r2, [r3, #0]
 800a1c4:	4b1d      	ldr	r3, [pc, #116]	@ (800a23c <HAL_I2C_Init+0x134>)
 800a1c6:	430b      	orrs	r3, r1
 800a1c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	68da      	ldr	r2, [r3, #12]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a1d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	691a      	ldr	r2, [r3, #16]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	695b      	ldr	r3, [r3, #20]
 800a1e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	699b      	ldr	r3, [r3, #24]
 800a1ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	430a      	orrs	r2, r1
 800a1f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	69d9      	ldr	r1, [r3, #28]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6a1a      	ldr	r2, [r3, #32]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	430a      	orrs	r2, r1
 800a202:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	681a      	ldr	r2, [r3, #0]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f042 0201 	orr.w	r2, r2, #1
 800a212:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2200      	movs	r2, #0
 800a218:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2220      	movs	r2, #32
 800a21e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2200      	movs	r2, #0
 800a226:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800a230:	2300      	movs	r3, #0
}
 800a232:	4618      	mov	r0, r3
 800a234:	3708      	adds	r7, #8
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	02008000 	.word	0x02008000

0800a240 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a240:	b480      	push	{r7}
 800a242:	b083      	sub	sp, #12
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a250:	b2db      	uxtb	r3, r3
 800a252:	2b20      	cmp	r3, #32
 800a254:	d138      	bne.n	800a2c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d101      	bne.n	800a264 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a260:	2302      	movs	r3, #2
 800a262:	e032      	b.n	800a2ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2201      	movs	r2, #1
 800a268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2224      	movs	r2, #36	@ 0x24
 800a270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f022 0201 	bic.w	r2, r2, #1
 800a282:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	681a      	ldr	r2, [r3, #0]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a292:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	6819      	ldr	r1, [r3, #0]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	683a      	ldr	r2, [r7, #0]
 800a2a0:	430a      	orrs	r2, r1
 800a2a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f042 0201 	orr.w	r2, r2, #1
 800a2b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2220      	movs	r2, #32
 800a2b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	e000      	b.n	800a2ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a2c8:	2302      	movs	r3, #2
  }
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	370c      	adds	r7, #12
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr

0800a2d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a2d6:	b480      	push	{r7}
 800a2d8:	b085      	sub	sp, #20
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
 800a2de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	2b20      	cmp	r3, #32
 800a2ea:	d139      	bne.n	800a360 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d101      	bne.n	800a2fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a2f6:	2302      	movs	r3, #2
 800a2f8:	e033      	b.n	800a362 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2224      	movs	r2, #36	@ 0x24
 800a306:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	681a      	ldr	r2, [r3, #0]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f022 0201 	bic.w	r2, r2, #1
 800a318:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a328:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	021b      	lsls	r3, r3, #8
 800a32e:	68fa      	ldr	r2, [r7, #12]
 800a330:	4313      	orrs	r3, r2
 800a332:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	68fa      	ldr	r2, [r7, #12]
 800a33a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f042 0201 	orr.w	r2, r2, #1
 800a34a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2220      	movs	r2, #32
 800a350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2200      	movs	r2, #0
 800a358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a35c:	2300      	movs	r3, #0
 800a35e:	e000      	b.n	800a362 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a360:	2302      	movs	r3, #2
  }
}
 800a362:	4618      	mov	r0, r3
 800a364:	3714      	adds	r7, #20
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr

0800a36e <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800a36e:	b580      	push	{r7, lr}
 800a370:	b084      	sub	sp, #16
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d101      	bne.n	800a380 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800a37c:	2301      	movs	r3, #1
 800a37e:	e08f      	b.n	800a4a0 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800a386:	b2db      	uxtb	r3, r3
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d106      	bne.n	800a39a <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2200      	movs	r2, #0
 800a390:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f7fa fa55 	bl	8004844 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2202      	movs	r2, #2
 800a39e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	699a      	ldr	r2, [r3, #24]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800a3b0:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	6999      	ldr	r1, [r3, #24]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	685a      	ldr	r2, [r3, #4]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	689b      	ldr	r3, [r3, #8]
 800a3c0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a3c6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	691b      	ldr	r3, [r3, #16]
 800a3cc:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	430a      	orrs	r2, r1
 800a3d4:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	695b      	ldr	r3, [r3, #20]
 800a3da:	041b      	lsls	r3, r3, #16
 800a3dc:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6999      	ldr	r1, [r3, #24]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	68fa      	ldr	r2, [r7, #12]
 800a3e8:	430a      	orrs	r2, r1
 800a3ea:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	69db      	ldr	r3, [r3, #28]
 800a3f0:	041b      	lsls	r3, r3, #16
 800a3f2:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6a19      	ldr	r1, [r3, #32]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	68fa      	ldr	r2, [r7, #12]
 800a3fe:	430a      	orrs	r2, r1
 800a400:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a406:	041b      	lsls	r3, r3, #16
 800a408:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	68fa      	ldr	r2, [r7, #12]
 800a414:	430a      	orrs	r2, r1
 800a416:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a41c:	041b      	lsls	r3, r3, #16
 800a41e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	68fa      	ldr	r2, [r7, #12]
 800a42a:	430a      	orrs	r2, r1
 800a42c:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a434:	021b      	lsls	r3, r3, #8
 800a436:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800a43e:	041b      	lsls	r3, r3, #16
 800a440:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800a450:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a458:	68ba      	ldr	r2, [r7, #8]
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	4313      	orrs	r3, r2
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800a464:	431a      	orrs	r2, r3
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	430a      	orrs	r2, r1
 800a46c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f042 0206 	orr.w	r2, r2, #6
 800a47c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	699a      	ldr	r2, [r3, #24]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f042 0201 	orr.w	r2, r2, #1
 800a48c:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2201      	movs	r2, #1
 800a49a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800a49e:	2300      	movs	r3, #0
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3710      	adds	r7, #16
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4b6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4be:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f003 0304 	and.w	r3, r3, #4
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d023      	beq.n	800a512 <HAL_LTDC_IRQHandler+0x6a>
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	f003 0304 	and.w	r3, r3, #4
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d01e      	beq.n	800a512 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f022 0204 	bic.w	r2, r2, #4
 800a4e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	2204      	movs	r2, #4
 800a4ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a4f2:	f043 0201 	orr.w	r2, r3, #1
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2204      	movs	r2, #4
 800a500:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2200      	movs	r2, #0
 800a508:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f000 f86f 	bl	800a5f0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f003 0302 	and.w	r3, r3, #2
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d023      	beq.n	800a564 <HAL_LTDC_IRQHandler+0xbc>
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	f003 0302 	and.w	r3, r3, #2
 800a522:	2b00      	cmp	r3, #0
 800a524:	d01e      	beq.n	800a564 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f022 0202 	bic.w	r2, r2, #2
 800a534:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	2202      	movs	r2, #2
 800a53c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a544:	f043 0202 	orr.w	r2, r3, #2
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2204      	movs	r2, #4
 800a552:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2200      	movs	r2, #0
 800a55a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 f846 	bl	800a5f0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f003 0301 	and.w	r3, r3, #1
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d01b      	beq.n	800a5a6 <HAL_LTDC_IRQHandler+0xfe>
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	f003 0301 	and.w	r3, r3, #1
 800a574:	2b00      	cmp	r3, #0
 800a576:	d016      	beq.n	800a5a6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f022 0201 	bic.w	r2, r2, #1
 800a586:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	2201      	movs	r2, #1
 800a58e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2201      	movs	r2, #1
 800a594:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2200      	movs	r2, #0
 800a59c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f000 f82f 	bl	800a604 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	f003 0308 	and.w	r3, r3, #8
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d01b      	beq.n	800a5e8 <HAL_LTDC_IRQHandler+0x140>
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	f003 0308 	and.w	r3, r3, #8
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d016      	beq.n	800a5e8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f022 0208 	bic.w	r2, r2, #8
 800a5c8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	2208      	movs	r2, #8
 800a5d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 f818 	bl	800a618 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800a5e8:	bf00      	nop
 800a5ea:	3710      	adds	r7, #16
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b083      	sub	sp, #12
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800a5f8:	bf00      	nop
 800a5fa:	370c      	adds	r7, #12
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr

0800a604 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a604:	b480      	push	{r7}
 800a606:	b083      	sub	sp, #12
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800a60c:	bf00      	nop
 800a60e:	370c      	adds	r7, #12
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr

0800a618 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a618:	b480      	push	{r7}
 800a61a:	b083      	sub	sp, #12
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800a620:	bf00      	nop
 800a622:	370c      	adds	r7, #12
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr

0800a62c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a62c:	b5b0      	push	{r4, r5, r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	60b9      	str	r1, [r7, #8]
 800a636:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800a63e:	2b01      	cmp	r3, #1
 800a640:	d101      	bne.n	800a646 <HAL_LTDC_ConfigLayer+0x1a>
 800a642:	2302      	movs	r3, #2
 800a644:	e02c      	b.n	800a6a0 <HAL_LTDC_ConfigLayer+0x74>
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2201      	movs	r2, #1
 800a64a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2202      	movs	r2, #2
 800a652:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a656:	68fa      	ldr	r2, [r7, #12]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2134      	movs	r1, #52	@ 0x34
 800a65c:	fb01 f303 	mul.w	r3, r1, r3
 800a660:	4413      	add	r3, r2
 800a662:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	4614      	mov	r4, r2
 800a66a:	461d      	mov	r5, r3
 800a66c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a66e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a678:	682b      	ldr	r3, [r5, #0]
 800a67a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a67c:	687a      	ldr	r2, [r7, #4]
 800a67e:	68b9      	ldr	r1, [r7, #8]
 800a680:	68f8      	ldr	r0, [r7, #12]
 800a682:	f000 f811 	bl	800a6a8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	2201      	movs	r2, #1
 800a68c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2201      	movs	r2, #1
 800a692:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2200      	movs	r2, #0
 800a69a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800a69e:	2300      	movs	r3, #0
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3710      	adds	r7, #16
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bdb0      	pop	{r4, r5, r7, pc}

0800a6a8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b089      	sub	sp, #36	@ 0x24
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	60f8      	str	r0, [r7, #12]
 800a6b0:	60b9      	str	r1, [r7, #8]
 800a6b2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	685a      	ldr	r2, [r3, #4]
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	68db      	ldr	r3, [r3, #12]
 800a6be:	0c1b      	lsrs	r3, r3, #16
 800a6c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a6c4:	4413      	add	r3, r2
 800a6c6:	041b      	lsls	r3, r3, #16
 800a6c8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	01db      	lsls	r3, r3, #7
 800a6d4:	4413      	add	r3, r2
 800a6d6:	3384      	adds	r3, #132	@ 0x84
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	68fa      	ldr	r2, [r7, #12]
 800a6dc:	6812      	ldr	r2, [r2, #0]
 800a6de:	4611      	mov	r1, r2
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	01d2      	lsls	r2, r2, #7
 800a6e4:	440a      	add	r2, r1
 800a6e6:	3284      	adds	r2, #132	@ 0x84
 800a6e8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a6ec:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	0c1b      	lsrs	r3, r3, #16
 800a6fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a6fe:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a700:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4619      	mov	r1, r3
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	01db      	lsls	r3, r3, #7
 800a70c:	440b      	add	r3, r1
 800a70e:	3384      	adds	r3, #132	@ 0x84
 800a710:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a712:	69fb      	ldr	r3, [r7, #28]
 800a714:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a716:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	68da      	ldr	r2, [r3, #12]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	68db      	ldr	r3, [r3, #12]
 800a722:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a726:	4413      	add	r3, r2
 800a728:	041b      	lsls	r3, r3, #16
 800a72a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	461a      	mov	r2, r3
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	01db      	lsls	r3, r3, #7
 800a736:	4413      	add	r3, r2
 800a738:	3384      	adds	r3, #132	@ 0x84
 800a73a:	689b      	ldr	r3, [r3, #8]
 800a73c:	68fa      	ldr	r2, [r7, #12]
 800a73e:	6812      	ldr	r2, [r2, #0]
 800a740:	4611      	mov	r1, r2
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	01d2      	lsls	r2, r2, #7
 800a746:	440a      	add	r2, r1
 800a748:	3284      	adds	r2, #132	@ 0x84
 800a74a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a74e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	689a      	ldr	r2, [r3, #8]
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	68db      	ldr	r3, [r3, #12]
 800a75a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a75e:	4413      	add	r3, r2
 800a760:	1c5a      	adds	r2, r3, #1
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4619      	mov	r1, r3
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	01db      	lsls	r3, r3, #7
 800a76c:	440b      	add	r3, r1
 800a76e:	3384      	adds	r3, #132	@ 0x84
 800a770:	4619      	mov	r1, r3
 800a772:	69fb      	ldr	r3, [r7, #28]
 800a774:	4313      	orrs	r3, r2
 800a776:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	461a      	mov	r2, r3
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	01db      	lsls	r3, r3, #7
 800a782:	4413      	add	r3, r2
 800a784:	3384      	adds	r3, #132	@ 0x84
 800a786:	691b      	ldr	r3, [r3, #16]
 800a788:	68fa      	ldr	r2, [r7, #12]
 800a78a:	6812      	ldr	r2, [r2, #0]
 800a78c:	4611      	mov	r1, r2
 800a78e:	687a      	ldr	r2, [r7, #4]
 800a790:	01d2      	lsls	r2, r2, #7
 800a792:	440a      	add	r2, r1
 800a794:	3284      	adds	r2, #132	@ 0x84
 800a796:	f023 0307 	bic.w	r3, r3, #7
 800a79a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	01db      	lsls	r3, r3, #7
 800a7a6:	4413      	add	r3, r2
 800a7a8:	3384      	adds	r3, #132	@ 0x84
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	691b      	ldr	r3, [r3, #16]
 800a7b0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a7b8:	021b      	lsls	r3, r3, #8
 800a7ba:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a7c2:	041b      	lsls	r3, r3, #16
 800a7c4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	699b      	ldr	r3, [r3, #24]
 800a7ca:	061b      	lsls	r3, r3, #24
 800a7cc:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	69fb      	ldr	r3, [r7, #28]
 800a7d8:	431a      	orrs	r2, r3
 800a7da:	69bb      	ldr	r3, [r7, #24]
 800a7dc:	431a      	orrs	r2, r3
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	01db      	lsls	r3, r3, #7
 800a7e8:	440b      	add	r3, r1
 800a7ea:	3384      	adds	r3, #132	@ 0x84
 800a7ec:	4619      	mov	r1, r3
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	01db      	lsls	r3, r3, #7
 800a7fe:	4413      	add	r3, r2
 800a800:	3384      	adds	r3, #132	@ 0x84
 800a802:	695b      	ldr	r3, [r3, #20]
 800a804:	68fa      	ldr	r2, [r7, #12]
 800a806:	6812      	ldr	r2, [r2, #0]
 800a808:	4611      	mov	r1, r2
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	01d2      	lsls	r2, r2, #7
 800a80e:	440a      	add	r2, r1
 800a810:	3284      	adds	r2, #132	@ 0x84
 800a812:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a816:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	461a      	mov	r2, r3
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	01db      	lsls	r3, r3, #7
 800a822:	4413      	add	r3, r2
 800a824:	3384      	adds	r3, #132	@ 0x84
 800a826:	461a      	mov	r2, r3
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	695b      	ldr	r3, [r3, #20]
 800a82c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	461a      	mov	r2, r3
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	01db      	lsls	r3, r3, #7
 800a838:	4413      	add	r3, r2
 800a83a:	3384      	adds	r3, #132	@ 0x84
 800a83c:	69da      	ldr	r2, [r3, #28]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	4619      	mov	r1, r3
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	01db      	lsls	r3, r3, #7
 800a848:	440b      	add	r3, r1
 800a84a:	3384      	adds	r3, #132	@ 0x84
 800a84c:	4619      	mov	r1, r3
 800a84e:	4b4f      	ldr	r3, [pc, #316]	@ (800a98c <LTDC_SetConfig+0x2e4>)
 800a850:	4013      	ands	r3, r2
 800a852:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	69da      	ldr	r2, [r3, #28]
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	6a1b      	ldr	r3, [r3, #32]
 800a85c:	68f9      	ldr	r1, [r7, #12]
 800a85e:	6809      	ldr	r1, [r1, #0]
 800a860:	4608      	mov	r0, r1
 800a862:	6879      	ldr	r1, [r7, #4]
 800a864:	01c9      	lsls	r1, r1, #7
 800a866:	4401      	add	r1, r0
 800a868:	3184      	adds	r1, #132	@ 0x84
 800a86a:	4313      	orrs	r3, r2
 800a86c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	461a      	mov	r2, r3
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	01db      	lsls	r3, r3, #7
 800a878:	4413      	add	r3, r2
 800a87a:	3384      	adds	r3, #132	@ 0x84
 800a87c:	461a      	mov	r2, r3
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a882:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	691b      	ldr	r3, [r3, #16]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d102      	bne.n	800a892 <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 800a88c:	2304      	movs	r3, #4
 800a88e:	61fb      	str	r3, [r7, #28]
 800a890:	e01b      	b.n	800a8ca <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	691b      	ldr	r3, [r3, #16]
 800a896:	2b01      	cmp	r3, #1
 800a898:	d102      	bne.n	800a8a0 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 800a89a:	2303      	movs	r3, #3
 800a89c:	61fb      	str	r3, [r7, #28]
 800a89e:	e014      	b.n	800a8ca <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	691b      	ldr	r3, [r3, #16]
 800a8a4:	2b04      	cmp	r3, #4
 800a8a6:	d00b      	beq.n	800a8c0 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a8ac:	2b02      	cmp	r3, #2
 800a8ae:	d007      	beq.n	800a8c0 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a8b4:	2b03      	cmp	r3, #3
 800a8b6:	d003      	beq.n	800a8c0 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a8bc:	2b07      	cmp	r3, #7
 800a8be:	d102      	bne.n	800a8c6 <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 800a8c0:	2302      	movs	r3, #2
 800a8c2:	61fb      	str	r3, [r7, #28]
 800a8c4:	e001      	b.n	800a8ca <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	01db      	lsls	r3, r3, #7
 800a8d4:	4413      	add	r3, r2
 800a8d6:	3384      	adds	r3, #132	@ 0x84
 800a8d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8da:	68fa      	ldr	r2, [r7, #12]
 800a8dc:	6812      	ldr	r2, [r2, #0]
 800a8de:	4611      	mov	r1, r2
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	01d2      	lsls	r2, r2, #7
 800a8e4:	440a      	add	r2, r1
 800a8e6:	3284      	adds	r2, #132	@ 0x84
 800a8e8:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800a8ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8f2:	69fa      	ldr	r2, [r7, #28]
 800a8f4:	fb02 f303 	mul.w	r3, r2, r3
 800a8f8:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	6859      	ldr	r1, [r3, #4]
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	1acb      	subs	r3, r1, r3
 800a904:	69f9      	ldr	r1, [r7, #28]
 800a906:	fb01 f303 	mul.w	r3, r1, r3
 800a90a:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a90c:	68f9      	ldr	r1, [r7, #12]
 800a90e:	6809      	ldr	r1, [r1, #0]
 800a910:	4608      	mov	r0, r1
 800a912:	6879      	ldr	r1, [r7, #4]
 800a914:	01c9      	lsls	r1, r1, #7
 800a916:	4401      	add	r1, r0
 800a918:	3184      	adds	r1, #132	@ 0x84
 800a91a:	4313      	orrs	r3, r2
 800a91c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	461a      	mov	r2, r3
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	01db      	lsls	r3, r3, #7
 800a928:	4413      	add	r3, r2
 800a92a:	3384      	adds	r3, #132	@ 0x84
 800a92c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4619      	mov	r1, r3
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	01db      	lsls	r3, r3, #7
 800a938:	440b      	add	r3, r1
 800a93a:	3384      	adds	r3, #132	@ 0x84
 800a93c:	4619      	mov	r1, r3
 800a93e:	4b14      	ldr	r3, [pc, #80]	@ (800a990 <LTDC_SetConfig+0x2e8>)
 800a940:	4013      	ands	r3, r2
 800a942:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	461a      	mov	r2, r3
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	01db      	lsls	r3, r3, #7
 800a94e:	4413      	add	r3, r2
 800a950:	3384      	adds	r3, #132	@ 0x84
 800a952:	461a      	mov	r2, r3
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a958:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	461a      	mov	r2, r3
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	01db      	lsls	r3, r3, #7
 800a964:	4413      	add	r3, r2
 800a966:	3384      	adds	r3, #132	@ 0x84
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	68fa      	ldr	r2, [r7, #12]
 800a96c:	6812      	ldr	r2, [r2, #0]
 800a96e:	4611      	mov	r1, r2
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	01d2      	lsls	r2, r2, #7
 800a974:	440a      	add	r2, r1
 800a976:	3284      	adds	r2, #132	@ 0x84
 800a978:	f043 0301 	orr.w	r3, r3, #1
 800a97c:	6013      	str	r3, [r2, #0]
}
 800a97e:	bf00      	nop
 800a980:	3724      	adds	r7, #36	@ 0x24
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr
 800a98a:	bf00      	nop
 800a98c:	fffff8f8 	.word	0xfffff8f8
 800a990:	fffff800 	.word	0xfffff800

0800a994 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a994:	b480      	push	{r7}
 800a996:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a998:	4b05      	ldr	r3, [pc, #20]	@ (800a9b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4a04      	ldr	r2, [pc, #16]	@ (800a9b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a99e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a9a2:	6013      	str	r3, [r2, #0]
}
 800a9a4:	bf00      	nop
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ac:	4770      	bx	lr
 800a9ae:	bf00      	nop
 800a9b0:	40007000 	.word	0x40007000

0800a9b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b082      	sub	sp, #8
 800a9b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800a9be:	4b23      	ldr	r3, [pc, #140]	@ (800aa4c <HAL_PWREx_EnableOverDrive+0x98>)
 800a9c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9c2:	4a22      	ldr	r2, [pc, #136]	@ (800aa4c <HAL_PWREx_EnableOverDrive+0x98>)
 800a9c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a9c8:	6413      	str	r3, [r2, #64]	@ 0x40
 800a9ca:	4b20      	ldr	r3, [pc, #128]	@ (800aa4c <HAL_PWREx_EnableOverDrive+0x98>)
 800a9cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a9d2:	603b      	str	r3, [r7, #0]
 800a9d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a9d6:	4b1e      	ldr	r3, [pc, #120]	@ (800aa50 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4a1d      	ldr	r2, [pc, #116]	@ (800aa50 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a9dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a9e0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a9e2:	f7fb fd49 	bl	8006478 <HAL_GetTick>
 800a9e6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a9e8:	e009      	b.n	800a9fe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a9ea:	f7fb fd45 	bl	8006478 <HAL_GetTick>
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	1ad3      	subs	r3, r2, r3
 800a9f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a9f8:	d901      	bls.n	800a9fe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800a9fa:	2303      	movs	r3, #3
 800a9fc:	e022      	b.n	800aa44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a9fe:	4b14      	ldr	r3, [pc, #80]	@ (800aa50 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aa06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa0a:	d1ee      	bne.n	800a9ea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800aa0c:	4b10      	ldr	r3, [pc, #64]	@ (800aa50 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4a0f      	ldr	r2, [pc, #60]	@ (800aa50 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aa12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aa16:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800aa18:	f7fb fd2e 	bl	8006478 <HAL_GetTick>
 800aa1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800aa1e:	e009      	b.n	800aa34 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800aa20:	f7fb fd2a 	bl	8006478 <HAL_GetTick>
 800aa24:	4602      	mov	r2, r0
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	1ad3      	subs	r3, r2, r3
 800aa2a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800aa2e:	d901      	bls.n	800aa34 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800aa30:	2303      	movs	r3, #3
 800aa32:	e007      	b.n	800aa44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800aa34:	4b06      	ldr	r3, [pc, #24]	@ (800aa50 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa40:	d1ee      	bne.n	800aa20 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800aa42:	2300      	movs	r3, #0
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3708      	adds	r7, #8
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}
 800aa4c:	40023800 	.word	0x40023800
 800aa50:	40007000 	.word	0x40007000

0800aa54 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b086      	sub	sp, #24
 800aa58:	af02      	add	r7, sp, #8
 800aa5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800aa5c:	f7fb fd0c 	bl	8006478 <HAL_GetTick>
 800aa60:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d101      	bne.n	800aa6c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	e067      	b.n	800ab3c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d10b      	bne.n	800aa90 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f7f9 ffa7 	bl	80049d4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800aa86:	f241 3188 	movw	r1, #5000	@ 0x1388
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f000 f85e 	bl	800ab4c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	689b      	ldr	r3, [r3, #8]
 800aa9e:	3b01      	subs	r3, #1
 800aaa0:	021a      	lsls	r2, r3, #8
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	430a      	orrs	r2, r1
 800aaa8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aaae:	9300      	str	r3, [sp, #0]
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	2200      	movs	r2, #0
 800aab4:	2120      	movs	r1, #32
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f000 f856 	bl	800ab68 <QSPI_WaitFlagStateUntilTimeout>
 800aabc:	4603      	mov	r3, r0
 800aabe:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800aac0:	7afb      	ldrb	r3, [r7, #11]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d135      	bne.n	800ab32 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	681a      	ldr	r2, [r3, #0]
 800aacc:	4b1d      	ldr	r3, [pc, #116]	@ (800ab44 <HAL_QSPI_Init+0xf0>)
 800aace:	4013      	ands	r3, r2
 800aad0:	687a      	ldr	r2, [r7, #4]
 800aad2:	6852      	ldr	r2, [r2, #4]
 800aad4:	0611      	lsls	r1, r2, #24
 800aad6:	687a      	ldr	r2, [r7, #4]
 800aad8:	68d2      	ldr	r2, [r2, #12]
 800aada:	4311      	orrs	r1, r2
 800aadc:	687a      	ldr	r2, [r7, #4]
 800aade:	69d2      	ldr	r2, [r2, #28]
 800aae0:	4311      	orrs	r1, r2
 800aae2:	687a      	ldr	r2, [r7, #4]
 800aae4:	6a12      	ldr	r2, [r2, #32]
 800aae6:	4311      	orrs	r1, r2
 800aae8:	687a      	ldr	r2, [r7, #4]
 800aaea:	6812      	ldr	r2, [r2, #0]
 800aaec:	430b      	orrs	r3, r1
 800aaee:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	685a      	ldr	r2, [r3, #4]
 800aaf6:	4b14      	ldr	r3, [pc, #80]	@ (800ab48 <HAL_QSPI_Init+0xf4>)
 800aaf8:	4013      	ands	r3, r2
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	6912      	ldr	r2, [r2, #16]
 800aafe:	0411      	lsls	r1, r2, #16
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	6952      	ldr	r2, [r2, #20]
 800ab04:	4311      	orrs	r1, r2
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	6992      	ldr	r2, [r2, #24]
 800ab0a:	4311      	orrs	r1, r2
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	6812      	ldr	r2, [r2, #0]
 800ab10:	430b      	orrs	r3, r1
 800ab12:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f042 0201 	orr.w	r2, r2, #1
 800ab22:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2200      	movs	r2, #0
 800ab28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2200      	movs	r2, #0
 800ab36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800ab3a:	7afb      	ldrb	r3, [r7, #11]
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3710      	adds	r7, #16
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	00ffff2f 	.word	0x00ffff2f
 800ab48:	ffe0f8fe 	.word	0xffe0f8fe

0800ab4c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b083      	sub	sp, #12
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	683a      	ldr	r2, [r7, #0]
 800ab5a:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800ab5c:	bf00      	nop
 800ab5e:	370c      	adds	r7, #12
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr

0800ab68 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b084      	sub	sp, #16
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	60f8      	str	r0, [r7, #12]
 800ab70:	60b9      	str	r1, [r7, #8]
 800ab72:	603b      	str	r3, [r7, #0]
 800ab74:	4613      	mov	r3, r2
 800ab76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800ab78:	e01a      	b.n	800abb0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab7a:	69bb      	ldr	r3, [r7, #24]
 800ab7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab80:	d016      	beq.n	800abb0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab82:	f7fb fc79 	bl	8006478 <HAL_GetTick>
 800ab86:	4602      	mov	r2, r0
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	1ad3      	subs	r3, r2, r3
 800ab8c:	69ba      	ldr	r2, [r7, #24]
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d302      	bcc.n	800ab98 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800ab92:	69bb      	ldr	r3, [r7, #24]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d10b      	bne.n	800abb0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2204      	movs	r2, #4
 800ab9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aba4:	f043 0201 	orr.w	r2, r3, #1
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 800abac:	2301      	movs	r3, #1
 800abae:	e00e      	b.n	800abce <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	689a      	ldr	r2, [r3, #8]
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	4013      	ands	r3, r2
 800abba:	2b00      	cmp	r3, #0
 800abbc:	bf14      	ite	ne
 800abbe:	2301      	movne	r3, #1
 800abc0:	2300      	moveq	r3, #0
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	461a      	mov	r2, r3
 800abc6:	79fb      	ldrb	r3, [r7, #7]
 800abc8:	429a      	cmp	r2, r3
 800abca:	d1d6      	bne.n	800ab7a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800abcc:	2300      	movs	r3, #0
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3710      	adds	r7, #16
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
	...

0800abd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b086      	sub	sp, #24
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800abe0:	2300      	movs	r3, #0
 800abe2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d101      	bne.n	800abee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800abea:	2301      	movs	r3, #1
 800abec:	e291      	b.n	800b112 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f003 0301 	and.w	r3, r3, #1
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	f000 8087 	beq.w	800ad0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800abfc:	4b96      	ldr	r3, [pc, #600]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800abfe:	689b      	ldr	r3, [r3, #8]
 800ac00:	f003 030c 	and.w	r3, r3, #12
 800ac04:	2b04      	cmp	r3, #4
 800ac06:	d00c      	beq.n	800ac22 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ac08:	4b93      	ldr	r3, [pc, #588]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	f003 030c 	and.w	r3, r3, #12
 800ac10:	2b08      	cmp	r3, #8
 800ac12:	d112      	bne.n	800ac3a <HAL_RCC_OscConfig+0x62>
 800ac14:	4b90      	ldr	r3, [pc, #576]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ac1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ac20:	d10b      	bne.n	800ac3a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac22:	4b8d      	ldr	r3, [pc, #564]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d06c      	beq.n	800ad08 <HAL_RCC_OscConfig+0x130>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d168      	bne.n	800ad08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800ac36:	2301      	movs	r3, #1
 800ac38:	e26b      	b.n	800b112 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac42:	d106      	bne.n	800ac52 <HAL_RCC_OscConfig+0x7a>
 800ac44:	4b84      	ldr	r3, [pc, #528]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4a83      	ldr	r2, [pc, #524]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800ac4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ac4e:	6013      	str	r3, [r2, #0]
 800ac50:	e02e      	b.n	800acb0 <HAL_RCC_OscConfig+0xd8>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d10c      	bne.n	800ac74 <HAL_RCC_OscConfig+0x9c>
 800ac5a:	4b7f      	ldr	r3, [pc, #508]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4a7e      	ldr	r2, [pc, #504]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800ac60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ac64:	6013      	str	r3, [r2, #0]
 800ac66:	4b7c      	ldr	r3, [pc, #496]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a7b      	ldr	r2, [pc, #492]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800ac6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ac70:	6013      	str	r3, [r2, #0]
 800ac72:	e01d      	b.n	800acb0 <HAL_RCC_OscConfig+0xd8>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ac7c:	d10c      	bne.n	800ac98 <HAL_RCC_OscConfig+0xc0>
 800ac7e:	4b76      	ldr	r3, [pc, #472]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4a75      	ldr	r2, [pc, #468]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800ac84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ac88:	6013      	str	r3, [r2, #0]
 800ac8a:	4b73      	ldr	r3, [pc, #460]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	4a72      	ldr	r2, [pc, #456]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800ac90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ac94:	6013      	str	r3, [r2, #0]
 800ac96:	e00b      	b.n	800acb0 <HAL_RCC_OscConfig+0xd8>
 800ac98:	4b6f      	ldr	r3, [pc, #444]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4a6e      	ldr	r2, [pc, #440]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800ac9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aca2:	6013      	str	r3, [r2, #0]
 800aca4:	4b6c      	ldr	r3, [pc, #432]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a6b      	ldr	r2, [pc, #428]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800acaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800acae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d013      	beq.n	800ace0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acb8:	f7fb fbde 	bl	8006478 <HAL_GetTick>
 800acbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800acbe:	e008      	b.n	800acd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800acc0:	f7fb fbda 	bl	8006478 <HAL_GetTick>
 800acc4:	4602      	mov	r2, r0
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	1ad3      	subs	r3, r2, r3
 800acca:	2b64      	cmp	r3, #100	@ 0x64
 800accc:	d901      	bls.n	800acd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800acce:	2303      	movs	r3, #3
 800acd0:	e21f      	b.n	800b112 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800acd2:	4b61      	ldr	r3, [pc, #388]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d0f0      	beq.n	800acc0 <HAL_RCC_OscConfig+0xe8>
 800acde:	e014      	b.n	800ad0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ace0:	f7fb fbca 	bl	8006478 <HAL_GetTick>
 800ace4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ace6:	e008      	b.n	800acfa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ace8:	f7fb fbc6 	bl	8006478 <HAL_GetTick>
 800acec:	4602      	mov	r2, r0
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	1ad3      	subs	r3, r2, r3
 800acf2:	2b64      	cmp	r3, #100	@ 0x64
 800acf4:	d901      	bls.n	800acfa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800acf6:	2303      	movs	r3, #3
 800acf8:	e20b      	b.n	800b112 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800acfa:	4b57      	ldr	r3, [pc, #348]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d1f0      	bne.n	800ace8 <HAL_RCC_OscConfig+0x110>
 800ad06:	e000      	b.n	800ad0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f003 0302 	and.w	r3, r3, #2
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d069      	beq.n	800adea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ad16:	4b50      	ldr	r3, [pc, #320]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800ad18:	689b      	ldr	r3, [r3, #8]
 800ad1a:	f003 030c 	and.w	r3, r3, #12
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d00b      	beq.n	800ad3a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ad22:	4b4d      	ldr	r3, [pc, #308]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800ad24:	689b      	ldr	r3, [r3, #8]
 800ad26:	f003 030c 	and.w	r3, r3, #12
 800ad2a:	2b08      	cmp	r3, #8
 800ad2c:	d11c      	bne.n	800ad68 <HAL_RCC_OscConfig+0x190>
 800ad2e:	4b4a      	ldr	r3, [pc, #296]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d116      	bne.n	800ad68 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ad3a:	4b47      	ldr	r3, [pc, #284]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f003 0302 	and.w	r3, r3, #2
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d005      	beq.n	800ad52 <HAL_RCC_OscConfig+0x17a>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	68db      	ldr	r3, [r3, #12]
 800ad4a:	2b01      	cmp	r3, #1
 800ad4c:	d001      	beq.n	800ad52 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	e1df      	b.n	800b112 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad52:	4b41      	ldr	r3, [pc, #260]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	691b      	ldr	r3, [r3, #16]
 800ad5e:	00db      	lsls	r3, r3, #3
 800ad60:	493d      	ldr	r1, [pc, #244]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800ad62:	4313      	orrs	r3, r2
 800ad64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ad66:	e040      	b.n	800adea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	68db      	ldr	r3, [r3, #12]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d023      	beq.n	800adb8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ad70:	4b39      	ldr	r3, [pc, #228]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4a38      	ldr	r2, [pc, #224]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800ad76:	f043 0301 	orr.w	r3, r3, #1
 800ad7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad7c:	f7fb fb7c 	bl	8006478 <HAL_GetTick>
 800ad80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad82:	e008      	b.n	800ad96 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ad84:	f7fb fb78 	bl	8006478 <HAL_GetTick>
 800ad88:	4602      	mov	r2, r0
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	1ad3      	subs	r3, r2, r3
 800ad8e:	2b02      	cmp	r3, #2
 800ad90:	d901      	bls.n	800ad96 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800ad92:	2303      	movs	r3, #3
 800ad94:	e1bd      	b.n	800b112 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad96:	4b30      	ldr	r3, [pc, #192]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f003 0302 	and.w	r3, r3, #2
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d0f0      	beq.n	800ad84 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ada2:	4b2d      	ldr	r3, [pc, #180]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	691b      	ldr	r3, [r3, #16]
 800adae:	00db      	lsls	r3, r3, #3
 800adb0:	4929      	ldr	r1, [pc, #164]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800adb2:	4313      	orrs	r3, r2
 800adb4:	600b      	str	r3, [r1, #0]
 800adb6:	e018      	b.n	800adea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800adb8:	4b27      	ldr	r3, [pc, #156]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a26      	ldr	r2, [pc, #152]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800adbe:	f023 0301 	bic.w	r3, r3, #1
 800adc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adc4:	f7fb fb58 	bl	8006478 <HAL_GetTick>
 800adc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800adca:	e008      	b.n	800adde <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800adcc:	f7fb fb54 	bl	8006478 <HAL_GetTick>
 800add0:	4602      	mov	r2, r0
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	1ad3      	subs	r3, r2, r3
 800add6:	2b02      	cmp	r3, #2
 800add8:	d901      	bls.n	800adde <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800adda:	2303      	movs	r3, #3
 800addc:	e199      	b.n	800b112 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800adde:	4b1e      	ldr	r3, [pc, #120]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f003 0302 	and.w	r3, r3, #2
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d1f0      	bne.n	800adcc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f003 0308 	and.w	r3, r3, #8
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d038      	beq.n	800ae68 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	695b      	ldr	r3, [r3, #20]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d019      	beq.n	800ae32 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800adfe:	4b16      	ldr	r3, [pc, #88]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800ae00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae02:	4a15      	ldr	r2, [pc, #84]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800ae04:	f043 0301 	orr.w	r3, r3, #1
 800ae08:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae0a:	f7fb fb35 	bl	8006478 <HAL_GetTick>
 800ae0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ae10:	e008      	b.n	800ae24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ae12:	f7fb fb31 	bl	8006478 <HAL_GetTick>
 800ae16:	4602      	mov	r2, r0
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	1ad3      	subs	r3, r2, r3
 800ae1c:	2b02      	cmp	r3, #2
 800ae1e:	d901      	bls.n	800ae24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ae20:	2303      	movs	r3, #3
 800ae22:	e176      	b.n	800b112 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ae24:	4b0c      	ldr	r3, [pc, #48]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800ae26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae28:	f003 0302 	and.w	r3, r3, #2
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d0f0      	beq.n	800ae12 <HAL_RCC_OscConfig+0x23a>
 800ae30:	e01a      	b.n	800ae68 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ae32:	4b09      	ldr	r3, [pc, #36]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800ae34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae36:	4a08      	ldr	r2, [pc, #32]	@ (800ae58 <HAL_RCC_OscConfig+0x280>)
 800ae38:	f023 0301 	bic.w	r3, r3, #1
 800ae3c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae3e:	f7fb fb1b 	bl	8006478 <HAL_GetTick>
 800ae42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ae44:	e00a      	b.n	800ae5c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ae46:	f7fb fb17 	bl	8006478 <HAL_GetTick>
 800ae4a:	4602      	mov	r2, r0
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	1ad3      	subs	r3, r2, r3
 800ae50:	2b02      	cmp	r3, #2
 800ae52:	d903      	bls.n	800ae5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800ae54:	2303      	movs	r3, #3
 800ae56:	e15c      	b.n	800b112 <HAL_RCC_OscConfig+0x53a>
 800ae58:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ae5c:	4b91      	ldr	r3, [pc, #580]	@ (800b0a4 <HAL_RCC_OscConfig+0x4cc>)
 800ae5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae60:	f003 0302 	and.w	r3, r3, #2
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d1ee      	bne.n	800ae46 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f003 0304 	and.w	r3, r3, #4
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	f000 80a4 	beq.w	800afbe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ae76:	4b8b      	ldr	r3, [pc, #556]	@ (800b0a4 <HAL_RCC_OscConfig+0x4cc>)
 800ae78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d10d      	bne.n	800ae9e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800ae82:	4b88      	ldr	r3, [pc, #544]	@ (800b0a4 <HAL_RCC_OscConfig+0x4cc>)
 800ae84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae86:	4a87      	ldr	r2, [pc, #540]	@ (800b0a4 <HAL_RCC_OscConfig+0x4cc>)
 800ae88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ae8c:	6413      	str	r3, [r2, #64]	@ 0x40
 800ae8e:	4b85      	ldr	r3, [pc, #532]	@ (800b0a4 <HAL_RCC_OscConfig+0x4cc>)
 800ae90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ae96:	60bb      	str	r3, [r7, #8]
 800ae98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ae9e:	4b82      	ldr	r3, [pc, #520]	@ (800b0a8 <HAL_RCC_OscConfig+0x4d0>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d118      	bne.n	800aedc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800aeaa:	4b7f      	ldr	r3, [pc, #508]	@ (800b0a8 <HAL_RCC_OscConfig+0x4d0>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a7e      	ldr	r2, [pc, #504]	@ (800b0a8 <HAL_RCC_OscConfig+0x4d0>)
 800aeb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aeb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aeb6:	f7fb fadf 	bl	8006478 <HAL_GetTick>
 800aeba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aebc:	e008      	b.n	800aed0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aebe:	f7fb fadb 	bl	8006478 <HAL_GetTick>
 800aec2:	4602      	mov	r2, r0
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	1ad3      	subs	r3, r2, r3
 800aec8:	2b64      	cmp	r3, #100	@ 0x64
 800aeca:	d901      	bls.n	800aed0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800aecc:	2303      	movs	r3, #3
 800aece:	e120      	b.n	800b112 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aed0:	4b75      	ldr	r3, [pc, #468]	@ (800b0a8 <HAL_RCC_OscConfig+0x4d0>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d0f0      	beq.n	800aebe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	689b      	ldr	r3, [r3, #8]
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d106      	bne.n	800aef2 <HAL_RCC_OscConfig+0x31a>
 800aee4:	4b6f      	ldr	r3, [pc, #444]	@ (800b0a4 <HAL_RCC_OscConfig+0x4cc>)
 800aee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aee8:	4a6e      	ldr	r2, [pc, #440]	@ (800b0a4 <HAL_RCC_OscConfig+0x4cc>)
 800aeea:	f043 0301 	orr.w	r3, r3, #1
 800aeee:	6713      	str	r3, [r2, #112]	@ 0x70
 800aef0:	e02d      	b.n	800af4e <HAL_RCC_OscConfig+0x376>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	689b      	ldr	r3, [r3, #8]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d10c      	bne.n	800af14 <HAL_RCC_OscConfig+0x33c>
 800aefa:	4b6a      	ldr	r3, [pc, #424]	@ (800b0a4 <HAL_RCC_OscConfig+0x4cc>)
 800aefc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aefe:	4a69      	ldr	r2, [pc, #420]	@ (800b0a4 <HAL_RCC_OscConfig+0x4cc>)
 800af00:	f023 0301 	bic.w	r3, r3, #1
 800af04:	6713      	str	r3, [r2, #112]	@ 0x70
 800af06:	4b67      	ldr	r3, [pc, #412]	@ (800b0a4 <HAL_RCC_OscConfig+0x4cc>)
 800af08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af0a:	4a66      	ldr	r2, [pc, #408]	@ (800b0a4 <HAL_RCC_OscConfig+0x4cc>)
 800af0c:	f023 0304 	bic.w	r3, r3, #4
 800af10:	6713      	str	r3, [r2, #112]	@ 0x70
 800af12:	e01c      	b.n	800af4e <HAL_RCC_OscConfig+0x376>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	689b      	ldr	r3, [r3, #8]
 800af18:	2b05      	cmp	r3, #5
 800af1a:	d10c      	bne.n	800af36 <HAL_RCC_OscConfig+0x35e>
 800af1c:	4b61      	ldr	r3, [pc, #388]	@ (800b0a4 <HAL_RCC_OscConfig+0x4cc>)
 800af1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af20:	4a60      	ldr	r2, [pc, #384]	@ (800b0a4 <HAL_RCC_OscConfig+0x4cc>)
 800af22:	f043 0304 	orr.w	r3, r3, #4
 800af26:	6713      	str	r3, [r2, #112]	@ 0x70
 800af28:	4b5e      	ldr	r3, [pc, #376]	@ (800b0a4 <HAL_RCC_OscConfig+0x4cc>)
 800af2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af2c:	4a5d      	ldr	r2, [pc, #372]	@ (800b0a4 <HAL_RCC_OscConfig+0x4cc>)
 800af2e:	f043 0301 	orr.w	r3, r3, #1
 800af32:	6713      	str	r3, [r2, #112]	@ 0x70
 800af34:	e00b      	b.n	800af4e <HAL_RCC_OscConfig+0x376>
 800af36:	4b5b      	ldr	r3, [pc, #364]	@ (800b0a4 <HAL_RCC_OscConfig+0x4cc>)
 800af38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af3a:	4a5a      	ldr	r2, [pc, #360]	@ (800b0a4 <HAL_RCC_OscConfig+0x4cc>)
 800af3c:	f023 0301 	bic.w	r3, r3, #1
 800af40:	6713      	str	r3, [r2, #112]	@ 0x70
 800af42:	4b58      	ldr	r3, [pc, #352]	@ (800b0a4 <HAL_RCC_OscConfig+0x4cc>)
 800af44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af46:	4a57      	ldr	r2, [pc, #348]	@ (800b0a4 <HAL_RCC_OscConfig+0x4cc>)
 800af48:	f023 0304 	bic.w	r3, r3, #4
 800af4c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d015      	beq.n	800af82 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af56:	f7fb fa8f 	bl	8006478 <HAL_GetTick>
 800af5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800af5c:	e00a      	b.n	800af74 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af5e:	f7fb fa8b 	bl	8006478 <HAL_GetTick>
 800af62:	4602      	mov	r2, r0
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	1ad3      	subs	r3, r2, r3
 800af68:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d901      	bls.n	800af74 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800af70:	2303      	movs	r3, #3
 800af72:	e0ce      	b.n	800b112 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800af74:	4b4b      	ldr	r3, [pc, #300]	@ (800b0a4 <HAL_RCC_OscConfig+0x4cc>)
 800af76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af78:	f003 0302 	and.w	r3, r3, #2
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d0ee      	beq.n	800af5e <HAL_RCC_OscConfig+0x386>
 800af80:	e014      	b.n	800afac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af82:	f7fb fa79 	bl	8006478 <HAL_GetTick>
 800af86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800af88:	e00a      	b.n	800afa0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af8a:	f7fb fa75 	bl	8006478 <HAL_GetTick>
 800af8e:	4602      	mov	r2, r0
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	1ad3      	subs	r3, r2, r3
 800af94:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af98:	4293      	cmp	r3, r2
 800af9a:	d901      	bls.n	800afa0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800af9c:	2303      	movs	r3, #3
 800af9e:	e0b8      	b.n	800b112 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800afa0:	4b40      	ldr	r3, [pc, #256]	@ (800b0a4 <HAL_RCC_OscConfig+0x4cc>)
 800afa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afa4:	f003 0302 	and.w	r3, r3, #2
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d1ee      	bne.n	800af8a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800afac:	7dfb      	ldrb	r3, [r7, #23]
 800afae:	2b01      	cmp	r3, #1
 800afb0:	d105      	bne.n	800afbe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800afb2:	4b3c      	ldr	r3, [pc, #240]	@ (800b0a4 <HAL_RCC_OscConfig+0x4cc>)
 800afb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afb6:	4a3b      	ldr	r2, [pc, #236]	@ (800b0a4 <HAL_RCC_OscConfig+0x4cc>)
 800afb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800afbc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	699b      	ldr	r3, [r3, #24]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	f000 80a4 	beq.w	800b110 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800afc8:	4b36      	ldr	r3, [pc, #216]	@ (800b0a4 <HAL_RCC_OscConfig+0x4cc>)
 800afca:	689b      	ldr	r3, [r3, #8]
 800afcc:	f003 030c 	and.w	r3, r3, #12
 800afd0:	2b08      	cmp	r3, #8
 800afd2:	d06b      	beq.n	800b0ac <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	699b      	ldr	r3, [r3, #24]
 800afd8:	2b02      	cmp	r3, #2
 800afda:	d149      	bne.n	800b070 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800afdc:	4b31      	ldr	r3, [pc, #196]	@ (800b0a4 <HAL_RCC_OscConfig+0x4cc>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4a30      	ldr	r2, [pc, #192]	@ (800b0a4 <HAL_RCC_OscConfig+0x4cc>)
 800afe2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800afe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afe8:	f7fb fa46 	bl	8006478 <HAL_GetTick>
 800afec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800afee:	e008      	b.n	800b002 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aff0:	f7fb fa42 	bl	8006478 <HAL_GetTick>
 800aff4:	4602      	mov	r2, r0
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	1ad3      	subs	r3, r2, r3
 800affa:	2b02      	cmp	r3, #2
 800affc:	d901      	bls.n	800b002 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800affe:	2303      	movs	r3, #3
 800b000:	e087      	b.n	800b112 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b002:	4b28      	ldr	r3, [pc, #160]	@ (800b0a4 <HAL_RCC_OscConfig+0x4cc>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d1f0      	bne.n	800aff0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	69da      	ldr	r2, [r3, #28]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6a1b      	ldr	r3, [r3, #32]
 800b016:	431a      	orrs	r2, r3
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b01c:	019b      	lsls	r3, r3, #6
 800b01e:	431a      	orrs	r2, r3
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b024:	085b      	lsrs	r3, r3, #1
 800b026:	3b01      	subs	r3, #1
 800b028:	041b      	lsls	r3, r3, #16
 800b02a:	431a      	orrs	r2, r3
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b030:	061b      	lsls	r3, r3, #24
 800b032:	4313      	orrs	r3, r2
 800b034:	4a1b      	ldr	r2, [pc, #108]	@ (800b0a4 <HAL_RCC_OscConfig+0x4cc>)
 800b036:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b03a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b03c:	4b19      	ldr	r3, [pc, #100]	@ (800b0a4 <HAL_RCC_OscConfig+0x4cc>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	4a18      	ldr	r2, [pc, #96]	@ (800b0a4 <HAL_RCC_OscConfig+0x4cc>)
 800b042:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b046:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b048:	f7fb fa16 	bl	8006478 <HAL_GetTick>
 800b04c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b04e:	e008      	b.n	800b062 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b050:	f7fb fa12 	bl	8006478 <HAL_GetTick>
 800b054:	4602      	mov	r2, r0
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	1ad3      	subs	r3, r2, r3
 800b05a:	2b02      	cmp	r3, #2
 800b05c:	d901      	bls.n	800b062 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800b05e:	2303      	movs	r3, #3
 800b060:	e057      	b.n	800b112 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b062:	4b10      	ldr	r3, [pc, #64]	@ (800b0a4 <HAL_RCC_OscConfig+0x4cc>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d0f0      	beq.n	800b050 <HAL_RCC_OscConfig+0x478>
 800b06e:	e04f      	b.n	800b110 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b070:	4b0c      	ldr	r3, [pc, #48]	@ (800b0a4 <HAL_RCC_OscConfig+0x4cc>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	4a0b      	ldr	r2, [pc, #44]	@ (800b0a4 <HAL_RCC_OscConfig+0x4cc>)
 800b076:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b07a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b07c:	f7fb f9fc 	bl	8006478 <HAL_GetTick>
 800b080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b082:	e008      	b.n	800b096 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b084:	f7fb f9f8 	bl	8006478 <HAL_GetTick>
 800b088:	4602      	mov	r2, r0
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	1ad3      	subs	r3, r2, r3
 800b08e:	2b02      	cmp	r3, #2
 800b090:	d901      	bls.n	800b096 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800b092:	2303      	movs	r3, #3
 800b094:	e03d      	b.n	800b112 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b096:	4b03      	ldr	r3, [pc, #12]	@ (800b0a4 <HAL_RCC_OscConfig+0x4cc>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d1f0      	bne.n	800b084 <HAL_RCC_OscConfig+0x4ac>
 800b0a2:	e035      	b.n	800b110 <HAL_RCC_OscConfig+0x538>
 800b0a4:	40023800 	.word	0x40023800
 800b0a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800b0ac:	4b1b      	ldr	r3, [pc, #108]	@ (800b11c <HAL_RCC_OscConfig+0x544>)
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	699b      	ldr	r3, [r3, #24]
 800b0b6:	2b01      	cmp	r3, #1
 800b0b8:	d028      	beq.n	800b10c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	d121      	bne.n	800b10c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	d11a      	bne.n	800b10c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b0d6:	68fa      	ldr	r2, [r7, #12]
 800b0d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800b0dc:	4013      	ands	r3, r2
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b0e2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d111      	bne.n	800b10c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0f2:	085b      	lsrs	r3, r3, #1
 800b0f4:	3b01      	subs	r3, #1
 800b0f6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d107      	bne.n	800b10c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b106:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b108:	429a      	cmp	r2, r3
 800b10a:	d001      	beq.n	800b110 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800b10c:	2301      	movs	r3, #1
 800b10e:	e000      	b.n	800b112 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800b110:	2300      	movs	r3, #0
}
 800b112:	4618      	mov	r0, r3
 800b114:	3718      	adds	r7, #24
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop
 800b11c:	40023800 	.word	0x40023800

0800b120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b084      	sub	sp, #16
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800b12a:	2300      	movs	r3, #0
 800b12c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d101      	bne.n	800b138 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b134:	2301      	movs	r3, #1
 800b136:	e0d0      	b.n	800b2da <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b138:	4b6a      	ldr	r3, [pc, #424]	@ (800b2e4 <HAL_RCC_ClockConfig+0x1c4>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f003 030f 	and.w	r3, r3, #15
 800b140:	683a      	ldr	r2, [r7, #0]
 800b142:	429a      	cmp	r2, r3
 800b144:	d910      	bls.n	800b168 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b146:	4b67      	ldr	r3, [pc, #412]	@ (800b2e4 <HAL_RCC_ClockConfig+0x1c4>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f023 020f 	bic.w	r2, r3, #15
 800b14e:	4965      	ldr	r1, [pc, #404]	@ (800b2e4 <HAL_RCC_ClockConfig+0x1c4>)
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	4313      	orrs	r3, r2
 800b154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b156:	4b63      	ldr	r3, [pc, #396]	@ (800b2e4 <HAL_RCC_ClockConfig+0x1c4>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f003 030f 	and.w	r3, r3, #15
 800b15e:	683a      	ldr	r2, [r7, #0]
 800b160:	429a      	cmp	r2, r3
 800b162:	d001      	beq.n	800b168 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b164:	2301      	movs	r3, #1
 800b166:	e0b8      	b.n	800b2da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f003 0302 	and.w	r3, r3, #2
 800b170:	2b00      	cmp	r3, #0
 800b172:	d020      	beq.n	800b1b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f003 0304 	and.w	r3, r3, #4
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d005      	beq.n	800b18c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b180:	4b59      	ldr	r3, [pc, #356]	@ (800b2e8 <HAL_RCC_ClockConfig+0x1c8>)
 800b182:	689b      	ldr	r3, [r3, #8]
 800b184:	4a58      	ldr	r2, [pc, #352]	@ (800b2e8 <HAL_RCC_ClockConfig+0x1c8>)
 800b186:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800b18a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f003 0308 	and.w	r3, r3, #8
 800b194:	2b00      	cmp	r3, #0
 800b196:	d005      	beq.n	800b1a4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b198:	4b53      	ldr	r3, [pc, #332]	@ (800b2e8 <HAL_RCC_ClockConfig+0x1c8>)
 800b19a:	689b      	ldr	r3, [r3, #8]
 800b19c:	4a52      	ldr	r2, [pc, #328]	@ (800b2e8 <HAL_RCC_ClockConfig+0x1c8>)
 800b19e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800b1a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b1a4:	4b50      	ldr	r3, [pc, #320]	@ (800b2e8 <HAL_RCC_ClockConfig+0x1c8>)
 800b1a6:	689b      	ldr	r3, [r3, #8]
 800b1a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	689b      	ldr	r3, [r3, #8]
 800b1b0:	494d      	ldr	r1, [pc, #308]	@ (800b2e8 <HAL_RCC_ClockConfig+0x1c8>)
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f003 0301 	and.w	r3, r3, #1
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d040      	beq.n	800b244 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	d107      	bne.n	800b1da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b1ca:	4b47      	ldr	r3, [pc, #284]	@ (800b2e8 <HAL_RCC_ClockConfig+0x1c8>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d115      	bne.n	800b202 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	e07f      	b.n	800b2da <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	2b02      	cmp	r3, #2
 800b1e0:	d107      	bne.n	800b1f2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b1e2:	4b41      	ldr	r3, [pc, #260]	@ (800b2e8 <HAL_RCC_ClockConfig+0x1c8>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d109      	bne.n	800b202 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	e073      	b.n	800b2da <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b1f2:	4b3d      	ldr	r3, [pc, #244]	@ (800b2e8 <HAL_RCC_ClockConfig+0x1c8>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f003 0302 	and.w	r3, r3, #2
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d101      	bne.n	800b202 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b1fe:	2301      	movs	r3, #1
 800b200:	e06b      	b.n	800b2da <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b202:	4b39      	ldr	r3, [pc, #228]	@ (800b2e8 <HAL_RCC_ClockConfig+0x1c8>)
 800b204:	689b      	ldr	r3, [r3, #8]
 800b206:	f023 0203 	bic.w	r2, r3, #3
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	685b      	ldr	r3, [r3, #4]
 800b20e:	4936      	ldr	r1, [pc, #216]	@ (800b2e8 <HAL_RCC_ClockConfig+0x1c8>)
 800b210:	4313      	orrs	r3, r2
 800b212:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b214:	f7fb f930 	bl	8006478 <HAL_GetTick>
 800b218:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b21a:	e00a      	b.n	800b232 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b21c:	f7fb f92c 	bl	8006478 <HAL_GetTick>
 800b220:	4602      	mov	r2, r0
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	1ad3      	subs	r3, r2, r3
 800b226:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d901      	bls.n	800b232 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800b22e:	2303      	movs	r3, #3
 800b230:	e053      	b.n	800b2da <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b232:	4b2d      	ldr	r3, [pc, #180]	@ (800b2e8 <HAL_RCC_ClockConfig+0x1c8>)
 800b234:	689b      	ldr	r3, [r3, #8]
 800b236:	f003 020c 	and.w	r2, r3, #12
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	009b      	lsls	r3, r3, #2
 800b240:	429a      	cmp	r2, r3
 800b242:	d1eb      	bne.n	800b21c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b244:	4b27      	ldr	r3, [pc, #156]	@ (800b2e4 <HAL_RCC_ClockConfig+0x1c4>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f003 030f 	and.w	r3, r3, #15
 800b24c:	683a      	ldr	r2, [r7, #0]
 800b24e:	429a      	cmp	r2, r3
 800b250:	d210      	bcs.n	800b274 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b252:	4b24      	ldr	r3, [pc, #144]	@ (800b2e4 <HAL_RCC_ClockConfig+0x1c4>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f023 020f 	bic.w	r2, r3, #15
 800b25a:	4922      	ldr	r1, [pc, #136]	@ (800b2e4 <HAL_RCC_ClockConfig+0x1c4>)
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	4313      	orrs	r3, r2
 800b260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b262:	4b20      	ldr	r3, [pc, #128]	@ (800b2e4 <HAL_RCC_ClockConfig+0x1c4>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f003 030f 	and.w	r3, r3, #15
 800b26a:	683a      	ldr	r2, [r7, #0]
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d001      	beq.n	800b274 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800b270:	2301      	movs	r3, #1
 800b272:	e032      	b.n	800b2da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f003 0304 	and.w	r3, r3, #4
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d008      	beq.n	800b292 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b280:	4b19      	ldr	r3, [pc, #100]	@ (800b2e8 <HAL_RCC_ClockConfig+0x1c8>)
 800b282:	689b      	ldr	r3, [r3, #8]
 800b284:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	68db      	ldr	r3, [r3, #12]
 800b28c:	4916      	ldr	r1, [pc, #88]	@ (800b2e8 <HAL_RCC_ClockConfig+0x1c8>)
 800b28e:	4313      	orrs	r3, r2
 800b290:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f003 0308 	and.w	r3, r3, #8
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d009      	beq.n	800b2b2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b29e:	4b12      	ldr	r3, [pc, #72]	@ (800b2e8 <HAL_RCC_ClockConfig+0x1c8>)
 800b2a0:	689b      	ldr	r3, [r3, #8]
 800b2a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	691b      	ldr	r3, [r3, #16]
 800b2aa:	00db      	lsls	r3, r3, #3
 800b2ac:	490e      	ldr	r1, [pc, #56]	@ (800b2e8 <HAL_RCC_ClockConfig+0x1c8>)
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b2b2:	f000 f821 	bl	800b2f8 <HAL_RCC_GetSysClockFreq>
 800b2b6:	4602      	mov	r2, r0
 800b2b8:	4b0b      	ldr	r3, [pc, #44]	@ (800b2e8 <HAL_RCC_ClockConfig+0x1c8>)
 800b2ba:	689b      	ldr	r3, [r3, #8]
 800b2bc:	091b      	lsrs	r3, r3, #4
 800b2be:	f003 030f 	and.w	r3, r3, #15
 800b2c2:	490a      	ldr	r1, [pc, #40]	@ (800b2ec <HAL_RCC_ClockConfig+0x1cc>)
 800b2c4:	5ccb      	ldrb	r3, [r1, r3]
 800b2c6:	fa22 f303 	lsr.w	r3, r2, r3
 800b2ca:	4a09      	ldr	r2, [pc, #36]	@ (800b2f0 <HAL_RCC_ClockConfig+0x1d0>)
 800b2cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b2ce:	4b09      	ldr	r3, [pc, #36]	@ (800b2f4 <HAL_RCC_ClockConfig+0x1d4>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f7fa f88c 	bl	80053f0 <HAL_InitTick>

  return HAL_OK;
 800b2d8:	2300      	movs	r3, #0
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3710      	adds	r7, #16
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	40023c00 	.word	0x40023c00
 800b2e8:	40023800 	.word	0x40023800
 800b2ec:	0801cce4 	.word	0x0801cce4
 800b2f0:	2000001c 	.word	0x2000001c
 800b2f4:	2000006c 	.word	0x2000006c

0800b2f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b2f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b2fc:	b090      	sub	sp, #64	@ 0x40
 800b2fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800b300:	2300      	movs	r3, #0
 800b302:	637b      	str	r3, [r7, #52]	@ 0x34
 800b304:	2300      	movs	r3, #0
 800b306:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b308:	2300      	movs	r3, #0
 800b30a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800b30c:	2300      	movs	r3, #0
 800b30e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b310:	4b59      	ldr	r3, [pc, #356]	@ (800b478 <HAL_RCC_GetSysClockFreq+0x180>)
 800b312:	689b      	ldr	r3, [r3, #8]
 800b314:	f003 030c 	and.w	r3, r3, #12
 800b318:	2b08      	cmp	r3, #8
 800b31a:	d00d      	beq.n	800b338 <HAL_RCC_GetSysClockFreq+0x40>
 800b31c:	2b08      	cmp	r3, #8
 800b31e:	f200 80a1 	bhi.w	800b464 <HAL_RCC_GetSysClockFreq+0x16c>
 800b322:	2b00      	cmp	r3, #0
 800b324:	d002      	beq.n	800b32c <HAL_RCC_GetSysClockFreq+0x34>
 800b326:	2b04      	cmp	r3, #4
 800b328:	d003      	beq.n	800b332 <HAL_RCC_GetSysClockFreq+0x3a>
 800b32a:	e09b      	b.n	800b464 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b32c:	4b53      	ldr	r3, [pc, #332]	@ (800b47c <HAL_RCC_GetSysClockFreq+0x184>)
 800b32e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b330:	e09b      	b.n	800b46a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b332:	4b53      	ldr	r3, [pc, #332]	@ (800b480 <HAL_RCC_GetSysClockFreq+0x188>)
 800b334:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b336:	e098      	b.n	800b46a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b338:	4b4f      	ldr	r3, [pc, #316]	@ (800b478 <HAL_RCC_GetSysClockFreq+0x180>)
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b340:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800b342:	4b4d      	ldr	r3, [pc, #308]	@ (800b478 <HAL_RCC_GetSysClockFreq+0x180>)
 800b344:	685b      	ldr	r3, [r3, #4]
 800b346:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d028      	beq.n	800b3a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b34e:	4b4a      	ldr	r3, [pc, #296]	@ (800b478 <HAL_RCC_GetSysClockFreq+0x180>)
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	099b      	lsrs	r3, r3, #6
 800b354:	2200      	movs	r2, #0
 800b356:	623b      	str	r3, [r7, #32]
 800b358:	627a      	str	r2, [r7, #36]	@ 0x24
 800b35a:	6a3b      	ldr	r3, [r7, #32]
 800b35c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800b360:	2100      	movs	r1, #0
 800b362:	4b47      	ldr	r3, [pc, #284]	@ (800b480 <HAL_RCC_GetSysClockFreq+0x188>)
 800b364:	fb03 f201 	mul.w	r2, r3, r1
 800b368:	2300      	movs	r3, #0
 800b36a:	fb00 f303 	mul.w	r3, r0, r3
 800b36e:	4413      	add	r3, r2
 800b370:	4a43      	ldr	r2, [pc, #268]	@ (800b480 <HAL_RCC_GetSysClockFreq+0x188>)
 800b372:	fba0 1202 	umull	r1, r2, r0, r2
 800b376:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b378:	460a      	mov	r2, r1
 800b37a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b37c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b37e:	4413      	add	r3, r2
 800b380:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b384:	2200      	movs	r2, #0
 800b386:	61bb      	str	r3, [r7, #24]
 800b388:	61fa      	str	r2, [r7, #28]
 800b38a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b38e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800b392:	f7f4 ffa5 	bl	80002e0 <__aeabi_uldivmod>
 800b396:	4602      	mov	r2, r0
 800b398:	460b      	mov	r3, r1
 800b39a:	4613      	mov	r3, r2
 800b39c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b39e:	e053      	b.n	800b448 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b3a0:	4b35      	ldr	r3, [pc, #212]	@ (800b478 <HAL_RCC_GetSysClockFreq+0x180>)
 800b3a2:	685b      	ldr	r3, [r3, #4]
 800b3a4:	099b      	lsrs	r3, r3, #6
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	613b      	str	r3, [r7, #16]
 800b3aa:	617a      	str	r2, [r7, #20]
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800b3b2:	f04f 0b00 	mov.w	fp, #0
 800b3b6:	4652      	mov	r2, sl
 800b3b8:	465b      	mov	r3, fp
 800b3ba:	f04f 0000 	mov.w	r0, #0
 800b3be:	f04f 0100 	mov.w	r1, #0
 800b3c2:	0159      	lsls	r1, r3, #5
 800b3c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b3c8:	0150      	lsls	r0, r2, #5
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	ebb2 080a 	subs.w	r8, r2, sl
 800b3d2:	eb63 090b 	sbc.w	r9, r3, fp
 800b3d6:	f04f 0200 	mov.w	r2, #0
 800b3da:	f04f 0300 	mov.w	r3, #0
 800b3de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800b3e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800b3e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800b3ea:	ebb2 0408 	subs.w	r4, r2, r8
 800b3ee:	eb63 0509 	sbc.w	r5, r3, r9
 800b3f2:	f04f 0200 	mov.w	r2, #0
 800b3f6:	f04f 0300 	mov.w	r3, #0
 800b3fa:	00eb      	lsls	r3, r5, #3
 800b3fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b400:	00e2      	lsls	r2, r4, #3
 800b402:	4614      	mov	r4, r2
 800b404:	461d      	mov	r5, r3
 800b406:	eb14 030a 	adds.w	r3, r4, sl
 800b40a:	603b      	str	r3, [r7, #0]
 800b40c:	eb45 030b 	adc.w	r3, r5, fp
 800b410:	607b      	str	r3, [r7, #4]
 800b412:	f04f 0200 	mov.w	r2, #0
 800b416:	f04f 0300 	mov.w	r3, #0
 800b41a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b41e:	4629      	mov	r1, r5
 800b420:	028b      	lsls	r3, r1, #10
 800b422:	4621      	mov	r1, r4
 800b424:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b428:	4621      	mov	r1, r4
 800b42a:	028a      	lsls	r2, r1, #10
 800b42c:	4610      	mov	r0, r2
 800b42e:	4619      	mov	r1, r3
 800b430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b432:	2200      	movs	r2, #0
 800b434:	60bb      	str	r3, [r7, #8]
 800b436:	60fa      	str	r2, [r7, #12]
 800b438:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b43c:	f7f4 ff50 	bl	80002e0 <__aeabi_uldivmod>
 800b440:	4602      	mov	r2, r0
 800b442:	460b      	mov	r3, r1
 800b444:	4613      	mov	r3, r2
 800b446:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800b448:	4b0b      	ldr	r3, [pc, #44]	@ (800b478 <HAL_RCC_GetSysClockFreq+0x180>)
 800b44a:	685b      	ldr	r3, [r3, #4]
 800b44c:	0c1b      	lsrs	r3, r3, #16
 800b44e:	f003 0303 	and.w	r3, r3, #3
 800b452:	3301      	adds	r3, #1
 800b454:	005b      	lsls	r3, r3, #1
 800b456:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800b458:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b45a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b45c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b460:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b462:	e002      	b.n	800b46a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b464:	4b05      	ldr	r3, [pc, #20]	@ (800b47c <HAL_RCC_GetSysClockFreq+0x184>)
 800b466:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b468:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b46a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3740      	adds	r7, #64	@ 0x40
 800b470:	46bd      	mov	sp, r7
 800b472:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b476:	bf00      	nop
 800b478:	40023800 	.word	0x40023800
 800b47c:	00f42400 	.word	0x00f42400
 800b480:	017d7840 	.word	0x017d7840

0800b484 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b484:	b480      	push	{r7}
 800b486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b488:	4b03      	ldr	r3, [pc, #12]	@ (800b498 <HAL_RCC_GetHCLKFreq+0x14>)
 800b48a:	681b      	ldr	r3, [r3, #0]
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	46bd      	mov	sp, r7
 800b490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b494:	4770      	bx	lr
 800b496:	bf00      	nop
 800b498:	2000001c 	.word	0x2000001c

0800b49c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b4a0:	f7ff fff0 	bl	800b484 <HAL_RCC_GetHCLKFreq>
 800b4a4:	4602      	mov	r2, r0
 800b4a6:	4b05      	ldr	r3, [pc, #20]	@ (800b4bc <HAL_RCC_GetPCLK1Freq+0x20>)
 800b4a8:	689b      	ldr	r3, [r3, #8]
 800b4aa:	0a9b      	lsrs	r3, r3, #10
 800b4ac:	f003 0307 	and.w	r3, r3, #7
 800b4b0:	4903      	ldr	r1, [pc, #12]	@ (800b4c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b4b2:	5ccb      	ldrb	r3, [r1, r3]
 800b4b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	40023800 	.word	0x40023800
 800b4c0:	0801ccf4 	.word	0x0801ccf4

0800b4c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b4c8:	f7ff ffdc 	bl	800b484 <HAL_RCC_GetHCLKFreq>
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	4b05      	ldr	r3, [pc, #20]	@ (800b4e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	0b5b      	lsrs	r3, r3, #13
 800b4d4:	f003 0307 	and.w	r3, r3, #7
 800b4d8:	4903      	ldr	r1, [pc, #12]	@ (800b4e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b4da:	5ccb      	ldrb	r3, [r1, r3]
 800b4dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	bd80      	pop	{r7, pc}
 800b4e4:	40023800 	.word	0x40023800
 800b4e8:	0801ccf4 	.word	0x0801ccf4

0800b4ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b083      	sub	sp, #12
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	220f      	movs	r2, #15
 800b4fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b4fc:	4b12      	ldr	r3, [pc, #72]	@ (800b548 <HAL_RCC_GetClockConfig+0x5c>)
 800b4fe:	689b      	ldr	r3, [r3, #8]
 800b500:	f003 0203 	and.w	r2, r3, #3
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b508:	4b0f      	ldr	r3, [pc, #60]	@ (800b548 <HAL_RCC_GetClockConfig+0x5c>)
 800b50a:	689b      	ldr	r3, [r3, #8]
 800b50c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b514:	4b0c      	ldr	r3, [pc, #48]	@ (800b548 <HAL_RCC_GetClockConfig+0x5c>)
 800b516:	689b      	ldr	r3, [r3, #8]
 800b518:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800b520:	4b09      	ldr	r3, [pc, #36]	@ (800b548 <HAL_RCC_GetClockConfig+0x5c>)
 800b522:	689b      	ldr	r3, [r3, #8]
 800b524:	08db      	lsrs	r3, r3, #3
 800b526:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b52e:	4b07      	ldr	r3, [pc, #28]	@ (800b54c <HAL_RCC_GetClockConfig+0x60>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f003 020f 	and.w	r2, r3, #15
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	601a      	str	r2, [r3, #0]
}
 800b53a:	bf00      	nop
 800b53c:	370c      	adds	r7, #12
 800b53e:	46bd      	mov	sp, r7
 800b540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b544:	4770      	bx	lr
 800b546:	bf00      	nop
 800b548:	40023800 	.word	0x40023800
 800b54c:	40023c00 	.word	0x40023c00

0800b550 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b088      	sub	sp, #32
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800b558:	2300      	movs	r3, #0
 800b55a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800b55c:	2300      	movs	r3, #0
 800b55e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800b560:	2300      	movs	r3, #0
 800b562:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800b564:	2300      	movs	r3, #0
 800b566:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800b568:	2300      	movs	r3, #0
 800b56a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f003 0301 	and.w	r3, r3, #1
 800b574:	2b00      	cmp	r3, #0
 800b576:	d012      	beq.n	800b59e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b578:	4b69      	ldr	r3, [pc, #420]	@ (800b720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b57a:	689b      	ldr	r3, [r3, #8]
 800b57c:	4a68      	ldr	r2, [pc, #416]	@ (800b720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b57e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b582:	6093      	str	r3, [r2, #8]
 800b584:	4b66      	ldr	r3, [pc, #408]	@ (800b720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b586:	689a      	ldr	r2, [r3, #8]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b58c:	4964      	ldr	r1, [pc, #400]	@ (800b720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b58e:	4313      	orrs	r3, r2
 800b590:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b596:	2b00      	cmp	r3, #0
 800b598:	d101      	bne.n	800b59e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800b59a:	2301      	movs	r3, #1
 800b59c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d017      	beq.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b5aa:	4b5d      	ldr	r3, [pc, #372]	@ (800b720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b5ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b5b0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5b8:	4959      	ldr	r1, [pc, #356]	@ (800b720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b5c8:	d101      	bne.n	800b5ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d101      	bne.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d017      	beq.n	800b616 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b5e6:	4b4e      	ldr	r3, [pc, #312]	@ (800b720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b5e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b5ec:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5f4:	494a      	ldr	r1, [pc, #296]	@ (800b720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b5f6:	4313      	orrs	r3, r2
 800b5f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b600:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b604:	d101      	bne.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800b606:	2301      	movs	r3, #1
 800b608:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d101      	bne.n	800b616 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800b612:	2301      	movs	r3, #1
 800b614:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d001      	beq.n	800b626 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800b622:	2301      	movs	r3, #1
 800b624:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f003 0320 	and.w	r3, r3, #32
 800b62e:	2b00      	cmp	r3, #0
 800b630:	f000 808b 	beq.w	800b74a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b634:	4b3a      	ldr	r3, [pc, #232]	@ (800b720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b638:	4a39      	ldr	r2, [pc, #228]	@ (800b720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b63a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b63e:	6413      	str	r3, [r2, #64]	@ 0x40
 800b640:	4b37      	ldr	r3, [pc, #220]	@ (800b720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b644:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b648:	60bb      	str	r3, [r7, #8]
 800b64a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b64c:	4b35      	ldr	r3, [pc, #212]	@ (800b724 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	4a34      	ldr	r2, [pc, #208]	@ (800b724 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b652:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b656:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b658:	f7fa ff0e 	bl	8006478 <HAL_GetTick>
 800b65c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b65e:	e008      	b.n	800b672 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b660:	f7fa ff0a 	bl	8006478 <HAL_GetTick>
 800b664:	4602      	mov	r2, r0
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	1ad3      	subs	r3, r2, r3
 800b66a:	2b64      	cmp	r3, #100	@ 0x64
 800b66c:	d901      	bls.n	800b672 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800b66e:	2303      	movs	r3, #3
 800b670:	e357      	b.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b672:	4b2c      	ldr	r3, [pc, #176]	@ (800b724 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d0f0      	beq.n	800b660 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b67e:	4b28      	ldr	r3, [pc, #160]	@ (800b720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b682:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b686:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d035      	beq.n	800b6fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b692:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b696:	693a      	ldr	r2, [r7, #16]
 800b698:	429a      	cmp	r2, r3
 800b69a:	d02e      	beq.n	800b6fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b69c:	4b20      	ldr	r3, [pc, #128]	@ (800b720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b69e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b6a4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b6a6:	4b1e      	ldr	r3, [pc, #120]	@ (800b720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b6a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6aa:	4a1d      	ldr	r2, [pc, #116]	@ (800b720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b6ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b6b0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b6b2:	4b1b      	ldr	r3, [pc, #108]	@ (800b720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b6b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6b6:	4a1a      	ldr	r2, [pc, #104]	@ (800b720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b6b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b6bc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800b6be:	4a18      	ldr	r2, [pc, #96]	@ (800b720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b6c4:	4b16      	ldr	r3, [pc, #88]	@ (800b720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b6c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6c8:	f003 0301 	and.w	r3, r3, #1
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	d114      	bne.n	800b6fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6d0:	f7fa fed2 	bl	8006478 <HAL_GetTick>
 800b6d4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b6d6:	e00a      	b.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b6d8:	f7fa fece 	bl	8006478 <HAL_GetTick>
 800b6dc:	4602      	mov	r2, r0
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	1ad3      	subs	r3, r2, r3
 800b6e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d901      	bls.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800b6ea:	2303      	movs	r3, #3
 800b6ec:	e319      	b.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b6ee:	4b0c      	ldr	r3, [pc, #48]	@ (800b720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b6f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6f2:	f003 0302 	and.w	r3, r3, #2
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d0ee      	beq.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b702:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b706:	d111      	bne.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800b708:	4b05      	ldr	r3, [pc, #20]	@ (800b720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b70a:	689b      	ldr	r3, [r3, #8]
 800b70c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800b714:	4b04      	ldr	r3, [pc, #16]	@ (800b728 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800b716:	400b      	ands	r3, r1
 800b718:	4901      	ldr	r1, [pc, #4]	@ (800b720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b71a:	4313      	orrs	r3, r2
 800b71c:	608b      	str	r3, [r1, #8]
 800b71e:	e00b      	b.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800b720:	40023800 	.word	0x40023800
 800b724:	40007000 	.word	0x40007000
 800b728:	0ffffcff 	.word	0x0ffffcff
 800b72c:	4baa      	ldr	r3, [pc, #680]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b72e:	689b      	ldr	r3, [r3, #8]
 800b730:	4aa9      	ldr	r2, [pc, #676]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b732:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800b736:	6093      	str	r3, [r2, #8]
 800b738:	4ba7      	ldr	r3, [pc, #668]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b73a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b744:	49a4      	ldr	r1, [pc, #656]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b746:	4313      	orrs	r3, r2
 800b748:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f003 0310 	and.w	r3, r3, #16
 800b752:	2b00      	cmp	r3, #0
 800b754:	d010      	beq.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b756:	4ba0      	ldr	r3, [pc, #640]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b758:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b75c:	4a9e      	ldr	r2, [pc, #632]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b75e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b762:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800b766:	4b9c      	ldr	r3, [pc, #624]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b768:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b770:	4999      	ldr	r1, [pc, #612]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b772:	4313      	orrs	r3, r2
 800b774:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b780:	2b00      	cmp	r3, #0
 800b782:	d00a      	beq.n	800b79a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b784:	4b94      	ldr	r3, [pc, #592]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b78a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b792:	4991      	ldr	r1, [pc, #580]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b794:	4313      	orrs	r3, r2
 800b796:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d00a      	beq.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b7a6:	4b8c      	ldr	r3, [pc, #560]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b7a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7ac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b7b4:	4988      	ldr	r1, [pc, #544]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d00a      	beq.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b7c8:	4b83      	ldr	r3, [pc, #524]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b7ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7d6:	4980      	ldr	r1, [pc, #512]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b7d8:	4313      	orrs	r3, r2
 800b7da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d00a      	beq.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b7ea:	4b7b      	ldr	r3, [pc, #492]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b7ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7f0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b7f8:	4977      	ldr	r1, [pc, #476]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d00a      	beq.n	800b822 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b80c:	4b72      	ldr	r3, [pc, #456]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b80e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b812:	f023 0203 	bic.w	r2, r3, #3
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b81a:	496f      	ldr	r1, [pc, #444]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b81c:	4313      	orrs	r3, r2
 800b81e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d00a      	beq.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b82e:	4b6a      	ldr	r3, [pc, #424]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b834:	f023 020c 	bic.w	r2, r3, #12
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b83c:	4966      	ldr	r1, [pc, #408]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b83e:	4313      	orrs	r3, r2
 800b840:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d00a      	beq.n	800b866 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b850:	4b61      	ldr	r3, [pc, #388]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b856:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b85e:	495e      	ldr	r1, [pc, #376]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b860:	4313      	orrs	r3, r2
 800b862:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d00a      	beq.n	800b888 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b872:	4b59      	ldr	r3, [pc, #356]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b878:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b880:	4955      	ldr	r1, [pc, #340]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b882:	4313      	orrs	r3, r2
 800b884:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b890:	2b00      	cmp	r3, #0
 800b892:	d00a      	beq.n	800b8aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b894:	4b50      	ldr	r3, [pc, #320]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b89a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8a2:	494d      	ldr	r1, [pc, #308]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d00a      	beq.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800b8b6:	4b48      	ldr	r3, [pc, #288]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b8b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8bc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8c4:	4944      	ldr	r1, [pc, #272]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b8c6:	4313      	orrs	r3, r2
 800b8c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d00a      	beq.n	800b8ee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800b8d8:	4b3f      	ldr	r3, [pc, #252]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b8da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8de:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8e6:	493c      	ldr	r1, [pc, #240]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d00a      	beq.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800b8fa:	4b37      	ldr	r3, [pc, #220]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b8fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b900:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b908:	4933      	ldr	r1, [pc, #204]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b90a:	4313      	orrs	r3, r2
 800b90c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d00a      	beq.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b91c:	4b2e      	ldr	r3, [pc, #184]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b91e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b922:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b92a:	492b      	ldr	r1, [pc, #172]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b92c:	4313      	orrs	r3, r2
 800b92e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d011      	beq.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b93e:	4b26      	ldr	r3, [pc, #152]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b944:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b94c:	4922      	ldr	r1, [pc, #136]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b94e:	4313      	orrs	r3, r2
 800b950:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b958:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b95c:	d101      	bne.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800b95e:	2301      	movs	r3, #1
 800b960:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f003 0308 	and.w	r3, r3, #8
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d001      	beq.n	800b972 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800b96e:	2301      	movs	r3, #1
 800b970:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d00a      	beq.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b97e:	4b16      	ldr	r3, [pc, #88]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b980:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b984:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b98c:	4912      	ldr	r1, [pc, #72]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b98e:	4313      	orrs	r3, r2
 800b990:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d00b      	beq.n	800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b9a0:	4b0d      	ldr	r3, [pc, #52]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b9a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9a6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b9b0:	4909      	ldr	r1, [pc, #36]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b9b2:	4313      	orrs	r3, r2
 800b9b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b9b8:	69fb      	ldr	r3, [r7, #28]
 800b9ba:	2b01      	cmp	r3, #1
 800b9bc:	d006      	beq.n	800b9cc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	f000 80d9 	beq.w	800bb7e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b9cc:	4b02      	ldr	r3, [pc, #8]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4a01      	ldr	r2, [pc, #4]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b9d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b9d6:	e001      	b.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800b9d8:	40023800 	.word	0x40023800
 800b9dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9de:	f7fa fd4b 	bl	8006478 <HAL_GetTick>
 800b9e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b9e4:	e008      	b.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b9e6:	f7fa fd47 	bl	8006478 <HAL_GetTick>
 800b9ea:	4602      	mov	r2, r0
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	1ad3      	subs	r3, r2, r3
 800b9f0:	2b64      	cmp	r3, #100	@ 0x64
 800b9f2:	d901      	bls.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b9f4:	2303      	movs	r3, #3
 800b9f6:	e194      	b.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b9f8:	4b6c      	ldr	r3, [pc, #432]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d1f0      	bne.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	f003 0301 	and.w	r3, r3, #1
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d021      	beq.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d11d      	bne.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800ba18:	4b64      	ldr	r3, [pc, #400]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ba1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba1e:	0c1b      	lsrs	r3, r3, #16
 800ba20:	f003 0303 	and.w	r3, r3, #3
 800ba24:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800ba26:	4b61      	ldr	r3, [pc, #388]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ba28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba2c:	0e1b      	lsrs	r3, r3, #24
 800ba2e:	f003 030f 	and.w	r3, r3, #15
 800ba32:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	019a      	lsls	r2, r3, #6
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	041b      	lsls	r3, r3, #16
 800ba3e:	431a      	orrs	r2, r3
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	061b      	lsls	r3, r3, #24
 800ba44:	431a      	orrs	r2, r3
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	689b      	ldr	r3, [r3, #8]
 800ba4a:	071b      	lsls	r3, r3, #28
 800ba4c:	4957      	ldr	r1, [pc, #348]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ba4e:	4313      	orrs	r3, r2
 800ba50:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d004      	beq.n	800ba6a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ba68:	d00a      	beq.n	800ba80 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d02e      	beq.n	800bad4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ba7e:	d129      	bne.n	800bad4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800ba80:	4b4a      	ldr	r3, [pc, #296]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ba82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba86:	0c1b      	lsrs	r3, r3, #16
 800ba88:	f003 0303 	and.w	r3, r3, #3
 800ba8c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800ba8e:	4b47      	ldr	r3, [pc, #284]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ba90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba94:	0f1b      	lsrs	r3, r3, #28
 800ba96:	f003 0307 	and.w	r3, r3, #7
 800ba9a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	019a      	lsls	r2, r3, #6
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	041b      	lsls	r3, r3, #16
 800baa6:	431a      	orrs	r2, r3
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	68db      	ldr	r3, [r3, #12]
 800baac:	061b      	lsls	r3, r3, #24
 800baae:	431a      	orrs	r2, r3
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	071b      	lsls	r3, r3, #28
 800bab4:	493d      	ldr	r1, [pc, #244]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bab6:	4313      	orrs	r3, r2
 800bab8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800babc:	4b3b      	ldr	r3, [pc, #236]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800babe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bac2:	f023 021f 	bic.w	r2, r3, #31
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baca:	3b01      	subs	r3, #1
 800bacc:	4937      	ldr	r1, [pc, #220]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bace:	4313      	orrs	r3, r2
 800bad0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800badc:	2b00      	cmp	r3, #0
 800bade:	d01d      	beq.n	800bb1c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800bae0:	4b32      	ldr	r3, [pc, #200]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bae6:	0e1b      	lsrs	r3, r3, #24
 800bae8:	f003 030f 	and.w	r3, r3, #15
 800baec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800baee:	4b2f      	ldr	r3, [pc, #188]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800baf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800baf4:	0f1b      	lsrs	r3, r3, #28
 800baf6:	f003 0307 	and.w	r3, r3, #7
 800bafa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	685b      	ldr	r3, [r3, #4]
 800bb00:	019a      	lsls	r2, r3, #6
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	691b      	ldr	r3, [r3, #16]
 800bb06:	041b      	lsls	r3, r3, #16
 800bb08:	431a      	orrs	r2, r3
 800bb0a:	693b      	ldr	r3, [r7, #16]
 800bb0c:	061b      	lsls	r3, r3, #24
 800bb0e:	431a      	orrs	r2, r3
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	071b      	lsls	r3, r3, #28
 800bb14:	4925      	ldr	r1, [pc, #148]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bb16:	4313      	orrs	r3, r2
 800bb18:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d011      	beq.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	685b      	ldr	r3, [r3, #4]
 800bb2c:	019a      	lsls	r2, r3, #6
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	691b      	ldr	r3, [r3, #16]
 800bb32:	041b      	lsls	r3, r3, #16
 800bb34:	431a      	orrs	r2, r3
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	68db      	ldr	r3, [r3, #12]
 800bb3a:	061b      	lsls	r3, r3, #24
 800bb3c:	431a      	orrs	r2, r3
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	689b      	ldr	r3, [r3, #8]
 800bb42:	071b      	lsls	r3, r3, #28
 800bb44:	4919      	ldr	r1, [pc, #100]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bb46:	4313      	orrs	r3, r2
 800bb48:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800bb4c:	4b17      	ldr	r3, [pc, #92]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4a16      	ldr	r2, [pc, #88]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bb52:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bb56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb58:	f7fa fc8e 	bl	8006478 <HAL_GetTick>
 800bb5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bb5e:	e008      	b.n	800bb72 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800bb60:	f7fa fc8a 	bl	8006478 <HAL_GetTick>
 800bb64:	4602      	mov	r2, r0
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	1ad3      	subs	r3, r2, r3
 800bb6a:	2b64      	cmp	r3, #100	@ 0x64
 800bb6c:	d901      	bls.n	800bb72 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bb6e:	2303      	movs	r3, #3
 800bb70:	e0d7      	b.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bb72:	4b0e      	ldr	r3, [pc, #56]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d0f0      	beq.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800bb7e:	69bb      	ldr	r3, [r7, #24]
 800bb80:	2b01      	cmp	r3, #1
 800bb82:	f040 80cd 	bne.w	800bd20 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800bb86:	4b09      	ldr	r3, [pc, #36]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	4a08      	ldr	r2, [pc, #32]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bb8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bb90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb92:	f7fa fc71 	bl	8006478 <HAL_GetTick>
 800bb96:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bb98:	e00a      	b.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800bb9a:	f7fa fc6d 	bl	8006478 <HAL_GetTick>
 800bb9e:	4602      	mov	r2, r0
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	1ad3      	subs	r3, r2, r3
 800bba4:	2b64      	cmp	r3, #100	@ 0x64
 800bba6:	d903      	bls.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bba8:	2303      	movs	r3, #3
 800bbaa:	e0ba      	b.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800bbac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bbb0:	4b5e      	ldr	r3, [pc, #376]	@ (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bbb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bbbc:	d0ed      	beq.n	800bb9a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d003      	beq.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d009      	beq.n	800bbe6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d02e      	beq.n	800bc3c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d12a      	bne.n	800bc3c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800bbe6:	4b51      	ldr	r3, [pc, #324]	@ (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bbe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bbec:	0c1b      	lsrs	r3, r3, #16
 800bbee:	f003 0303 	and.w	r3, r3, #3
 800bbf2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bbf4:	4b4d      	ldr	r3, [pc, #308]	@ (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bbf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bbfa:	0f1b      	lsrs	r3, r3, #28
 800bbfc:	f003 0307 	and.w	r3, r3, #7
 800bc00:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	695b      	ldr	r3, [r3, #20]
 800bc06:	019a      	lsls	r2, r3, #6
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	041b      	lsls	r3, r3, #16
 800bc0c:	431a      	orrs	r2, r3
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	699b      	ldr	r3, [r3, #24]
 800bc12:	061b      	lsls	r3, r3, #24
 800bc14:	431a      	orrs	r2, r3
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	071b      	lsls	r3, r3, #28
 800bc1a:	4944      	ldr	r1, [pc, #272]	@ (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bc1c:	4313      	orrs	r3, r2
 800bc1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800bc22:	4b42      	ldr	r3, [pc, #264]	@ (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bc24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bc28:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc30:	3b01      	subs	r3, #1
 800bc32:	021b      	lsls	r3, r3, #8
 800bc34:	493d      	ldr	r1, [pc, #244]	@ (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bc36:	4313      	orrs	r3, r2
 800bc38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d022      	beq.n	800bc8e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bc4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bc50:	d11d      	bne.n	800bc8e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bc52:	4b36      	ldr	r3, [pc, #216]	@ (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bc54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc58:	0e1b      	lsrs	r3, r3, #24
 800bc5a:	f003 030f 	and.w	r3, r3, #15
 800bc5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bc60:	4b32      	ldr	r3, [pc, #200]	@ (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bc62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc66:	0f1b      	lsrs	r3, r3, #28
 800bc68:	f003 0307 	and.w	r3, r3, #7
 800bc6c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	695b      	ldr	r3, [r3, #20]
 800bc72:	019a      	lsls	r2, r3, #6
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6a1b      	ldr	r3, [r3, #32]
 800bc78:	041b      	lsls	r3, r3, #16
 800bc7a:	431a      	orrs	r2, r3
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	061b      	lsls	r3, r3, #24
 800bc80:	431a      	orrs	r2, r3
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	071b      	lsls	r3, r3, #28
 800bc86:	4929      	ldr	r1, [pc, #164]	@ (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f003 0308 	and.w	r3, r3, #8
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d028      	beq.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bc9a:	4b24      	ldr	r3, [pc, #144]	@ (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bc9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bca0:	0e1b      	lsrs	r3, r3, #24
 800bca2:	f003 030f 	and.w	r3, r3, #15
 800bca6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800bca8:	4b20      	ldr	r3, [pc, #128]	@ (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bcaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bcae:	0c1b      	lsrs	r3, r3, #16
 800bcb0:	f003 0303 	and.w	r3, r3, #3
 800bcb4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	695b      	ldr	r3, [r3, #20]
 800bcba:	019a      	lsls	r2, r3, #6
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	041b      	lsls	r3, r3, #16
 800bcc0:	431a      	orrs	r2, r3
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	061b      	lsls	r3, r3, #24
 800bcc6:	431a      	orrs	r2, r3
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	69db      	ldr	r3, [r3, #28]
 800bccc:	071b      	lsls	r3, r3, #28
 800bcce:	4917      	ldr	r1, [pc, #92]	@ (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bcd0:	4313      	orrs	r3, r2
 800bcd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800bcd6:	4b15      	ldr	r3, [pc, #84]	@ (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bcd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bcdc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bce4:	4911      	ldr	r1, [pc, #68]	@ (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bce6:	4313      	orrs	r3, r2
 800bce8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800bcec:	4b0f      	ldr	r3, [pc, #60]	@ (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4a0e      	ldr	r2, [pc, #56]	@ (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bcf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bcf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bcf8:	f7fa fbbe 	bl	8006478 <HAL_GetTick>
 800bcfc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bcfe:	e008      	b.n	800bd12 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800bd00:	f7fa fbba 	bl	8006478 <HAL_GetTick>
 800bd04:	4602      	mov	r2, r0
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	1ad3      	subs	r3, r2, r3
 800bd0a:	2b64      	cmp	r3, #100	@ 0x64
 800bd0c:	d901      	bls.n	800bd12 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bd0e:	2303      	movs	r3, #3
 800bd10:	e007      	b.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bd12:	4b06      	ldr	r3, [pc, #24]	@ (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bd1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd1e:	d1ef      	bne.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800bd20:	2300      	movs	r3, #0
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3720      	adds	r7, #32
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}
 800bd2a:	bf00      	nop
 800bd2c:	40023800 	.word	0x40023800

0800bd30 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b087      	sub	sp, #28
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800bd40:	2300      	movs	r3, #0
 800bd42:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800bd44:	2300      	movs	r3, #0
 800bd46:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800bd4e:	f040 808d 	bne.w	800be6c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800bd52:	4b93      	ldr	r3, [pc, #588]	@ (800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bd54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bd58:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800bd60:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bd68:	d07c      	beq.n	800be64 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bd70:	d87b      	bhi.n	800be6a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d004      	beq.n	800bd82 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bd7e:	d039      	beq.n	800bdf4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800bd80:	e073      	b.n	800be6a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800bd82:	4b87      	ldr	r3, [pc, #540]	@ (800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d108      	bne.n	800bda0 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800bd8e:	4b84      	ldr	r3, [pc, #528]	@ (800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bd90:	685b      	ldr	r3, [r3, #4]
 800bd92:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bd96:	4a83      	ldr	r2, [pc, #524]	@ (800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800bd98:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd9c:	613b      	str	r3, [r7, #16]
 800bd9e:	e007      	b.n	800bdb0 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800bda0:	4b7f      	ldr	r3, [pc, #508]	@ (800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bda8:	4a7f      	ldr	r2, [pc, #508]	@ (800bfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800bdaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdae:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800bdb0:	4b7b      	ldr	r3, [pc, #492]	@ (800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bdb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bdb6:	0e1b      	lsrs	r3, r3, #24
 800bdb8:	f003 030f 	and.w	r3, r3, #15
 800bdbc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800bdbe:	4b78      	ldr	r3, [pc, #480]	@ (800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bdc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bdc4:	099b      	lsrs	r3, r3, #6
 800bdc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdca:	693a      	ldr	r2, [r7, #16]
 800bdcc:	fb03 f202 	mul.w	r2, r3, r2
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdd6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800bdd8:	4b71      	ldr	r3, [pc, #452]	@ (800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bdda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bdde:	0a1b      	lsrs	r3, r3, #8
 800bde0:	f003 031f 	and.w	r3, r3, #31
 800bde4:	3301      	adds	r3, #1
 800bde6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800bde8:	697a      	ldr	r2, [r7, #20]
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdf0:	617b      	str	r3, [r7, #20]
        break;
 800bdf2:	e03b      	b.n	800be6c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800bdf4:	4b6a      	ldr	r3, [pc, #424]	@ (800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bdf6:	685b      	ldr	r3, [r3, #4]
 800bdf8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d108      	bne.n	800be12 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800be00:	4b67      	ldr	r3, [pc, #412]	@ (800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800be02:	685b      	ldr	r3, [r3, #4]
 800be04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800be08:	4a66      	ldr	r2, [pc, #408]	@ (800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800be0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800be0e:	613b      	str	r3, [r7, #16]
 800be10:	e007      	b.n	800be22 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800be12:	4b63      	ldr	r3, [pc, #396]	@ (800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800be14:	685b      	ldr	r3, [r3, #4]
 800be16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800be1a:	4a63      	ldr	r2, [pc, #396]	@ (800bfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800be1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800be20:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800be22:	4b5f      	ldr	r3, [pc, #380]	@ (800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800be24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be28:	0e1b      	lsrs	r3, r3, #24
 800be2a:	f003 030f 	and.w	r3, r3, #15
 800be2e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800be30:	4b5b      	ldr	r3, [pc, #364]	@ (800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800be32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be36:	099b      	lsrs	r3, r3, #6
 800be38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be3c:	693a      	ldr	r2, [r7, #16]
 800be3e:	fb03 f202 	mul.w	r2, r3, r2
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	fbb2 f3f3 	udiv	r3, r2, r3
 800be48:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800be4a:	4b55      	ldr	r3, [pc, #340]	@ (800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800be4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800be50:	f003 031f 	and.w	r3, r3, #31
 800be54:	3301      	adds	r3, #1
 800be56:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800be58:	697a      	ldr	r2, [r7, #20]
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800be60:	617b      	str	r3, [r7, #20]
        break;
 800be62:	e003      	b.n	800be6c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800be64:	4b51      	ldr	r3, [pc, #324]	@ (800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800be66:	617b      	str	r3, [r7, #20]
        break;
 800be68:	e000      	b.n	800be6c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800be6a:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be72:	f040 808d 	bne.w	800bf90 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800be76:	4b4a      	ldr	r3, [pc, #296]	@ (800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800be78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800be7c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800be84:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800be8c:	d07c      	beq.n	800bf88 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800be94:	d87b      	bhi.n	800bf8e <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d004      	beq.n	800bea6 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bea2:	d039      	beq.n	800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800bea4:	e073      	b.n	800bf8e <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800bea6:	4b3e      	ldr	r3, [pc, #248]	@ (800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bea8:	685b      	ldr	r3, [r3, #4]
 800beaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d108      	bne.n	800bec4 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800beb2:	4b3b      	ldr	r3, [pc, #236]	@ (800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800beba:	4a3a      	ldr	r2, [pc, #232]	@ (800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800bebc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bec0:	613b      	str	r3, [r7, #16]
 800bec2:	e007      	b.n	800bed4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800bec4:	4b36      	ldr	r3, [pc, #216]	@ (800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bec6:	685b      	ldr	r3, [r3, #4]
 800bec8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800becc:	4a36      	ldr	r2, [pc, #216]	@ (800bfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800bece:	fbb2 f3f3 	udiv	r3, r2, r3
 800bed2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800bed4:	4b32      	ldr	r3, [pc, #200]	@ (800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800beda:	0e1b      	lsrs	r3, r3, #24
 800bedc:	f003 030f 	and.w	r3, r3, #15
 800bee0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800bee2:	4b2f      	ldr	r3, [pc, #188]	@ (800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bee8:	099b      	lsrs	r3, r3, #6
 800beea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beee:	693a      	ldr	r2, [r7, #16]
 800bef0:	fb03 f202 	mul.w	r2, r3, r2
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	fbb2 f3f3 	udiv	r3, r2, r3
 800befa:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800befc:	4b28      	ldr	r3, [pc, #160]	@ (800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800befe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bf02:	0a1b      	lsrs	r3, r3, #8
 800bf04:	f003 031f 	and.w	r3, r3, #31
 800bf08:	3301      	adds	r3, #1
 800bf0a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800bf0c:	697a      	ldr	r2, [r7, #20]
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf14:	617b      	str	r3, [r7, #20]
        break;
 800bf16:	e03b      	b.n	800bf90 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800bf18:	4b21      	ldr	r3, [pc, #132]	@ (800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bf1a:	685b      	ldr	r3, [r3, #4]
 800bf1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d108      	bne.n	800bf36 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800bf24:	4b1e      	ldr	r3, [pc, #120]	@ (800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bf26:	685b      	ldr	r3, [r3, #4]
 800bf28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bf2c:	4a1d      	ldr	r2, [pc, #116]	@ (800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800bf2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf32:	613b      	str	r3, [r7, #16]
 800bf34:	e007      	b.n	800bf46 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800bf36:	4b1a      	ldr	r3, [pc, #104]	@ (800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bf38:	685b      	ldr	r3, [r3, #4]
 800bf3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bf3e:	4a1a      	ldr	r2, [pc, #104]	@ (800bfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800bf40:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf44:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800bf46:	4b16      	ldr	r3, [pc, #88]	@ (800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bf48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf4c:	0e1b      	lsrs	r3, r3, #24
 800bf4e:	f003 030f 	and.w	r3, r3, #15
 800bf52:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800bf54:	4b12      	ldr	r3, [pc, #72]	@ (800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bf56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf5a:	099b      	lsrs	r3, r3, #6
 800bf5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf60:	693a      	ldr	r2, [r7, #16]
 800bf62:	fb03 f202 	mul.w	r2, r3, r2
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf6c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800bf6e:	4b0c      	ldr	r3, [pc, #48]	@ (800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bf70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bf74:	f003 031f 	and.w	r3, r3, #31
 800bf78:	3301      	adds	r3, #1
 800bf7a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800bf7c:	697a      	ldr	r2, [r7, #20]
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf84:	617b      	str	r3, [r7, #20]
        break;
 800bf86:	e003      	b.n	800bf90 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 800bf88:	4b08      	ldr	r3, [pc, #32]	@ (800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800bf8a:	617b      	str	r3, [r7, #20]
        break;
 800bf8c:	e000      	b.n	800bf90 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800bf8e:	bf00      	nop
      }
    }
  }

  return frequency;
 800bf90:	697b      	ldr	r3, [r7, #20]
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	371c      	adds	r7, #28
 800bf96:	46bd      	mov	sp, r7
 800bf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9c:	4770      	bx	lr
 800bf9e:	bf00      	nop
 800bfa0:	40023800 	.word	0x40023800
 800bfa4:	00f42400 	.word	0x00f42400
 800bfa8:	017d7840 	.word	0x017d7840
 800bfac:	00bb8000 	.word	0x00bb8000

0800bfb0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b084      	sub	sp, #16
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d101      	bne.n	800bfc2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	e071      	b.n	800c0a6 <HAL_RTC_Init+0xf6>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	7f5b      	ldrb	r3, [r3, #29]
 800bfc6:	b2db      	uxtb	r3, r3
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d105      	bne.n	800bfd8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f7f8 fd8e 	bl	8004af4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2202      	movs	r2, #2
 800bfdc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	68db      	ldr	r3, [r3, #12]
 800bfe4:	f003 0310 	and.w	r3, r3, #16
 800bfe8:	2b10      	cmp	r3, #16
 800bfea:	d053      	beq.n	800c094 <HAL_RTC_Init+0xe4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	22ca      	movs	r2, #202	@ 0xca
 800bff2:	625a      	str	r2, [r3, #36]	@ 0x24
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	2253      	movs	r2, #83	@ 0x53
 800bffa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f000 fac7 	bl	800c590 <RTC_EnterInitMode>
 800c002:	4603      	mov	r3, r0
 800c004:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800c006:	7bfb      	ldrb	r3, [r7, #15]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d12a      	bne.n	800c062 <HAL_RTC_Init+0xb2>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	6899      	ldr	r1, [r3, #8]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681a      	ldr	r2, [r3, #0]
 800c016:	4b26      	ldr	r3, [pc, #152]	@ (800c0b0 <HAL_RTC_Init+0x100>)
 800c018:	400b      	ands	r3, r1
 800c01a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	6899      	ldr	r1, [r3, #8]
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	685a      	ldr	r2, [r3, #4]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	691b      	ldr	r3, [r3, #16]
 800c02a:	431a      	orrs	r2, r3
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	695b      	ldr	r3, [r3, #20]
 800c030:	431a      	orrs	r2, r3
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	430a      	orrs	r2, r1
 800c038:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	687a      	ldr	r2, [r7, #4]
 800c040:	68d2      	ldr	r2, [r2, #12]
 800c042:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	6919      	ldr	r1, [r3, #16]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	689b      	ldr	r3, [r3, #8]
 800c04e:	041a      	lsls	r2, r3, #16
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	430a      	orrs	r2, r1
 800c056:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f000 fad0 	bl	800c5fe <RTC_ExitInitMode>
 800c05e:	4603      	mov	r3, r0
 800c060:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c062:	7bfb      	ldrb	r3, [r7, #15]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d110      	bne.n	800c08a <HAL_RTC_Init+0xda>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f022 0208 	bic.w	r2, r2, #8
 800c076:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	699a      	ldr	r2, [r3, #24]
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	430a      	orrs	r2, r1
 800c088:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	22ff      	movs	r2, #255	@ 0xff
 800c090:	625a      	str	r2, [r3, #36]	@ 0x24
 800c092:	e001      	b.n	800c098 <HAL_RTC_Init+0xe8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800c094:	2300      	movs	r3, #0
 800c096:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800c098:	7bfb      	ldrb	r3, [r7, #15]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d102      	bne.n	800c0a4 <HAL_RTC_Init+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800c0a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3710      	adds	r7, #16
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}
 800c0ae:	bf00      	nop
 800c0b0:	ff8fffbf 	.word	0xff8fffbf

0800c0b4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c0b4:	b590      	push	{r4, r7, lr}
 800c0b6:	b087      	sub	sp, #28
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	60f8      	str	r0, [r7, #12]
 800c0bc:	60b9      	str	r1, [r7, #8]
 800c0be:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	7f1b      	ldrb	r3, [r3, #28]
 800c0c8:	2b01      	cmp	r3, #1
 800c0ca:	d101      	bne.n	800c0d0 <HAL_RTC_SetTime+0x1c>
 800c0cc:	2302      	movs	r3, #2
 800c0ce:	e085      	b.n	800c1dc <HAL_RTC_SetTime+0x128>
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	2202      	movs	r2, #2
 800c0da:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d126      	bne.n	800c130 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	689b      	ldr	r3, [r3, #8]
 800c0e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d102      	bne.n	800c0f6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	781b      	ldrb	r3, [r3, #0]
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f000 faa4 	bl	800c648 <RTC_ByteToBcd2>
 800c100:	4603      	mov	r3, r0
 800c102:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	785b      	ldrb	r3, [r3, #1]
 800c108:	4618      	mov	r0, r3
 800c10a:	f000 fa9d 	bl	800c648 <RTC_ByteToBcd2>
 800c10e:	4603      	mov	r3, r0
 800c110:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c112:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	789b      	ldrb	r3, [r3, #2]
 800c118:	4618      	mov	r0, r3
 800c11a:	f000 fa95 	bl	800c648 <RTC_ByteToBcd2>
 800c11e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c120:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	78db      	ldrb	r3, [r3, #3]
 800c128:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c12a:	4313      	orrs	r3, r2
 800c12c:	617b      	str	r3, [r7, #20]
 800c12e:	e018      	b.n	800c162 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	689b      	ldr	r3, [r3, #8]
 800c136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d102      	bne.n	800c144 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	2200      	movs	r2, #0
 800c142:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	781b      	ldrb	r3, [r3, #0]
 800c148:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	785b      	ldrb	r3, [r3, #1]
 800c14e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800c150:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800c152:	68ba      	ldr	r2, [r7, #8]
 800c154:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800c156:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	78db      	ldrb	r3, [r3, #3]
 800c15c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800c15e:	4313      	orrs	r3, r2
 800c160:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	22ca      	movs	r2, #202	@ 0xca
 800c168:	625a      	str	r2, [r3, #36]	@ 0x24
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	2253      	movs	r2, #83	@ 0x53
 800c170:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c172:	68f8      	ldr	r0, [r7, #12]
 800c174:	f000 fa0c 	bl	800c590 <RTC_EnterInitMode>
 800c178:	4603      	mov	r3, r0
 800c17a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800c17c:	7cfb      	ldrb	r3, [r7, #19]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d11e      	bne.n	800c1c0 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	681a      	ldr	r2, [r3, #0]
 800c186:	6979      	ldr	r1, [r7, #20]
 800c188:	4b16      	ldr	r3, [pc, #88]	@ (800c1e4 <HAL_RTC_SetTime+0x130>)
 800c18a:	400b      	ands	r3, r1
 800c18c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	689a      	ldr	r2, [r3, #8]
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800c19c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	6899      	ldr	r1, [r3, #8]
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	68da      	ldr	r2, [r3, #12]
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	691b      	ldr	r3, [r3, #16]
 800c1ac:	431a      	orrs	r2, r3
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	430a      	orrs	r2, r1
 800c1b4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c1b6:	68f8      	ldr	r0, [r7, #12]
 800c1b8:	f000 fa21 	bl	800c5fe <RTC_ExitInitMode>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800c1c0:	7cfb      	ldrb	r3, [r7, #19]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d102      	bne.n	800c1cc <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2201      	movs	r2, #1
 800c1ca:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	22ff      	movs	r2, #255	@ 0xff
 800c1d2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	771a      	strb	r2, [r3, #28]

  return status;
 800c1da:	7cfb      	ldrb	r3, [r7, #19]
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	371c      	adds	r7, #28
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd90      	pop	{r4, r7, pc}
 800c1e4:	007f7f7f 	.word	0x007f7f7f

0800c1e8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c1e8:	b590      	push	{r4, r7, lr}
 800c1ea:	b087      	sub	sp, #28
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	60f8      	str	r0, [r7, #12]
 800c1f0:	60b9      	str	r1, [r7, #8]
 800c1f2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	7f1b      	ldrb	r3, [r3, #28]
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	d101      	bne.n	800c204 <HAL_RTC_SetDate+0x1c>
 800c200:	2302      	movs	r3, #2
 800c202:	e06f      	b.n	800c2e4 <HAL_RTC_SetDate+0xfc>
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	2201      	movs	r2, #1
 800c208:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2202      	movs	r2, #2
 800c20e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d10e      	bne.n	800c234 <HAL_RTC_SetDate+0x4c>
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	785b      	ldrb	r3, [r3, #1]
 800c21a:	f003 0310 	and.w	r3, r3, #16
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d008      	beq.n	800c234 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	785b      	ldrb	r3, [r3, #1]
 800c226:	f023 0310 	bic.w	r3, r3, #16
 800c22a:	b2db      	uxtb	r3, r3
 800c22c:	330a      	adds	r3, #10
 800c22e:	b2da      	uxtb	r2, r3
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d11c      	bne.n	800c274 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	78db      	ldrb	r3, [r3, #3]
 800c23e:	4618      	mov	r0, r3
 800c240:	f000 fa02 	bl	800c648 <RTC_ByteToBcd2>
 800c244:	4603      	mov	r3, r0
 800c246:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	785b      	ldrb	r3, [r3, #1]
 800c24c:	4618      	mov	r0, r3
 800c24e:	f000 f9fb 	bl	800c648 <RTC_ByteToBcd2>
 800c252:	4603      	mov	r3, r0
 800c254:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c256:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	789b      	ldrb	r3, [r3, #2]
 800c25c:	4618      	mov	r0, r3
 800c25e:	f000 f9f3 	bl	800c648 <RTC_ByteToBcd2>
 800c262:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c264:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	781b      	ldrb	r3, [r3, #0]
 800c26c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c26e:	4313      	orrs	r3, r2
 800c270:	617b      	str	r3, [r7, #20]
 800c272:	e00e      	b.n	800c292 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	78db      	ldrb	r3, [r3, #3]
 800c278:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	785b      	ldrb	r3, [r3, #1]
 800c27e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c280:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800c282:	68ba      	ldr	r2, [r7, #8]
 800c284:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c286:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	781b      	ldrb	r3, [r3, #0]
 800c28c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c28e:	4313      	orrs	r3, r2
 800c290:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	22ca      	movs	r2, #202	@ 0xca
 800c298:	625a      	str	r2, [r3, #36]	@ 0x24
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	2253      	movs	r2, #83	@ 0x53
 800c2a0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c2a2:	68f8      	ldr	r0, [r7, #12]
 800c2a4:	f000 f974 	bl	800c590 <RTC_EnterInitMode>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800c2ac:	7cfb      	ldrb	r3, [r7, #19]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d10a      	bne.n	800c2c8 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	681a      	ldr	r2, [r3, #0]
 800c2b6:	6979      	ldr	r1, [r7, #20]
 800c2b8:	4b0c      	ldr	r3, [pc, #48]	@ (800c2ec <HAL_RTC_SetDate+0x104>)
 800c2ba:	400b      	ands	r3, r1
 800c2bc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c2be:	68f8      	ldr	r0, [r7, #12]
 800c2c0:	f000 f99d 	bl	800c5fe <RTC_ExitInitMode>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800c2c8:	7cfb      	ldrb	r3, [r7, #19]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d102      	bne.n	800c2d4 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	2201      	movs	r2, #1
 800c2d2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	22ff      	movs	r2, #255	@ 0xff
 800c2da:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	771a      	strb	r2, [r3, #28]

  return status;
 800c2e2:	7cfb      	ldrb	r3, [r7, #19]
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	371c      	adds	r7, #28
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd90      	pop	{r4, r7, pc}
 800c2ec:	00ffff3f 	.word	0x00ffff3f

0800c2f0 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800c2f0:	b590      	push	{r4, r7, lr}
 800c2f2:	b089      	sub	sp, #36	@ 0x24
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	60f8      	str	r0, [r7, #12]
 800c2f8:	60b9      	str	r1, [r7, #8]
 800c2fa:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800c300:	2300      	movs	r3, #0
 800c302:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800c304:	2300      	movs	r3, #0
 800c306:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	7f1b      	ldrb	r3, [r3, #28]
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	d101      	bne.n	800c314 <HAL_RTC_SetAlarm+0x24>
 800c310:	2302      	movs	r3, #2
 800c312:	e113      	b.n	800c53c <HAL_RTC_SetAlarm+0x24c>
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	2201      	movs	r2, #1
 800c318:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	2202      	movs	r2, #2
 800c31e:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d137      	bne.n	800c396 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	689b      	ldr	r3, [r3, #8]
 800c32c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c330:	2b00      	cmp	r3, #0
 800c332:	d102      	bne.n	800c33a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	2200      	movs	r2, #0
 800c338:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	781b      	ldrb	r3, [r3, #0]
 800c33e:	4618      	mov	r0, r3
 800c340:	f000 f982 	bl	800c648 <RTC_ByteToBcd2>
 800c344:	4603      	mov	r3, r0
 800c346:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	785b      	ldrb	r3, [r3, #1]
 800c34c:	4618      	mov	r0, r3
 800c34e:	f000 f97b 	bl	800c648 <RTC_ByteToBcd2>
 800c352:	4603      	mov	r3, r0
 800c354:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800c356:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	789b      	ldrb	r3, [r3, #2]
 800c35c:	4618      	mov	r0, r3
 800c35e:	f000 f973 	bl	800c648 <RTC_ByteToBcd2>
 800c362:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800c364:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	78db      	ldrb	r3, [r3, #3]
 800c36c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800c36e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c378:	4618      	mov	r0, r3
 800c37a:	f000 f965 	bl	800c648 <RTC_ByteToBcd2>
 800c37e:	4603      	mov	r3, r0
 800c380:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800c382:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800c38a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800c390:	4313      	orrs	r3, r2
 800c392:	61fb      	str	r3, [r7, #28]
 800c394:	e023      	b.n	800c3de <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	689b      	ldr	r3, [r3, #8]
 800c39c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d102      	bne.n	800c3aa <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	781b      	ldrb	r3, [r3, #0]
 800c3ae:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	785b      	ldrb	r3, [r3, #1]
 800c3b4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800c3b6:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800c3b8:	68ba      	ldr	r2, [r7, #8]
 800c3ba:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800c3bc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	78db      	ldrb	r3, [r3, #3]
 800c3c2:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800c3c4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c3cc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800c3ce:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800c3d4:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800c3da:	4313      	orrs	r3, r2
 800c3dc:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800c3e6:	4313      	orrs	r3, r2
 800c3e8:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	22ca      	movs	r2, #202	@ 0xca
 800c3f0:	625a      	str	r2, [r3, #36]	@ 0x24
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	2253      	movs	r2, #83	@ 0x53
 800c3f8:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c402:	d148      	bne.n	800c496 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	689a      	ldr	r2, [r3, #8]
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c412:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	689a      	ldr	r2, [r3, #8]
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c422:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	68db      	ldr	r3, [r3, #12]
 800c42a:	b2da      	uxtb	r2, r3
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800c434:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c436:	f7fa f81f 	bl	8006478 <HAL_GetTick>
 800c43a:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800c43c:	e013      	b.n	800c466 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c43e:	f7fa f81b 	bl	8006478 <HAL_GetTick>
 800c442:	4602      	mov	r2, r0
 800c444:	69bb      	ldr	r3, [r7, #24]
 800c446:	1ad3      	subs	r3, r2, r3
 800c448:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c44c:	d90b      	bls.n	800c466 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	22ff      	movs	r2, #255	@ 0xff
 800c454:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	2203      	movs	r2, #3
 800c45a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	2200      	movs	r2, #0
 800c460:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800c462:	2303      	movs	r3, #3
 800c464:	e06a      	b.n	800c53c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	68db      	ldr	r3, [r3, #12]
 800c46c:	f003 0301 	and.w	r3, r3, #1
 800c470:	2b00      	cmp	r3, #0
 800c472:	d0e4      	beq.n	800c43e <HAL_RTC_SetAlarm+0x14e>
      }
    }

    /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	69fa      	ldr	r2, [r7, #28]
 800c47a:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	697a      	ldr	r2, [r7, #20]
 800c482:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	689a      	ldr	r2, [r3, #8]
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c492:	609a      	str	r2, [r3, #8]
 800c494:	e047      	b.n	800c526 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	689a      	ldr	r2, [r3, #8]
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800c4a4:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	689a      	ldr	r2, [r3, #8]
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c4b4:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	68db      	ldr	r3, [r3, #12]
 800c4bc:	b2da      	uxtb	r2, r3
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800c4c6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c4c8:	f7f9 ffd6 	bl	8006478 <HAL_GetTick>
 800c4cc:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800c4ce:	e013      	b.n	800c4f8 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c4d0:	f7f9 ffd2 	bl	8006478 <HAL_GetTick>
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	69bb      	ldr	r3, [r7, #24]
 800c4d8:	1ad3      	subs	r3, r2, r3
 800c4da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c4de:	d90b      	bls.n	800c4f8 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	22ff      	movs	r2, #255	@ 0xff
 800c4e6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	2203      	movs	r2, #3
 800c4ec:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800c4f4:	2303      	movs	r3, #3
 800c4f6:	e021      	b.n	800c53c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	68db      	ldr	r3, [r3, #12]
 800c4fe:	f003 0302 	and.w	r3, r3, #2
 800c502:	2b00      	cmp	r3, #0
 800c504:	d0e4      	beq.n	800c4d0 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	69fa      	ldr	r2, [r7, #28]
 800c50c:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	697a      	ldr	r2, [r7, #20]
 800c514:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	689a      	ldr	r2, [r3, #8]
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c524:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	22ff      	movs	r2, #255	@ 0xff
 800c52c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	2201      	movs	r2, #1
 800c532:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	2200      	movs	r2, #0
 800c538:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800c53a:	2300      	movs	r3, #0
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3724      	adds	r7, #36	@ 0x24
 800c540:	46bd      	mov	sp, r7
 800c542:	bd90      	pop	{r4, r7, pc}

0800c544 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b084      	sub	sp, #16
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c54c:	2300      	movs	r3, #0
 800c54e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	4a0d      	ldr	r2, [pc, #52]	@ (800c58c <HAL_RTC_WaitForSynchro+0x48>)
 800c556:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c558:	f7f9 ff8e 	bl	8006478 <HAL_GetTick>
 800c55c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c55e:	e009      	b.n	800c574 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c560:	f7f9 ff8a 	bl	8006478 <HAL_GetTick>
 800c564:	4602      	mov	r2, r0
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	1ad3      	subs	r3, r2, r3
 800c56a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c56e:	d901      	bls.n	800c574 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800c570:	2303      	movs	r3, #3
 800c572:	e007      	b.n	800c584 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	68db      	ldr	r3, [r3, #12]
 800c57a:	f003 0320 	and.w	r3, r3, #32
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d0ee      	beq.n	800c560 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800c582:	2300      	movs	r3, #0
}
 800c584:	4618      	mov	r0, r3
 800c586:	3710      	adds	r7, #16
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}
 800c58c:	0001ff5f 	.word	0x0001ff5f

0800c590 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b084      	sub	sp, #16
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c598:	2300      	movs	r3, #0
 800c59a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800c59c:	2300      	movs	r3, #0
 800c59e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	68db      	ldr	r3, [r3, #12]
 800c5a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d122      	bne.n	800c5f4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	68da      	ldr	r2, [r3, #12]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c5bc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c5be:	f7f9 ff5b 	bl	8006478 <HAL_GetTick>
 800c5c2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800c5c4:	e00c      	b.n	800c5e0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c5c6:	f7f9 ff57 	bl	8006478 <HAL_GetTick>
 800c5ca:	4602      	mov	r2, r0
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	1ad3      	subs	r3, r2, r3
 800c5d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c5d4:	d904      	bls.n	800c5e0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2204      	movs	r2, #4
 800c5da:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800c5dc:	2301      	movs	r3, #1
 800c5de:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	68db      	ldr	r3, [r3, #12]
 800c5e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d102      	bne.n	800c5f4 <RTC_EnterInitMode+0x64>
 800c5ee:	7bfb      	ldrb	r3, [r7, #15]
 800c5f0:	2b01      	cmp	r3, #1
 800c5f2:	d1e8      	bne.n	800c5c6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800c5f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3710      	adds	r7, #16
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}

0800c5fe <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c5fe:	b580      	push	{r7, lr}
 800c600:	b084      	sub	sp, #16
 800c602:	af00      	add	r7, sp, #0
 800c604:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c606:	2300      	movs	r3, #0
 800c608:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	68da      	ldr	r2, [r3, #12]
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c618:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	689b      	ldr	r3, [r3, #8]
 800c620:	f003 0320 	and.w	r3, r3, #32
 800c624:	2b00      	cmp	r3, #0
 800c626:	d10a      	bne.n	800c63e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f7ff ff8b 	bl	800c544 <HAL_RTC_WaitForSynchro>
 800c62e:	4603      	mov	r3, r0
 800c630:	2b00      	cmp	r3, #0
 800c632:	d004      	beq.n	800c63e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2204      	movs	r2, #4
 800c638:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800c63a:	2301      	movs	r3, #1
 800c63c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800c63e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c640:	4618      	mov	r0, r3
 800c642:	3710      	adds	r7, #16
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800c648:	b480      	push	{r7}
 800c64a:	b085      	sub	sp, #20
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	4603      	mov	r3, r0
 800c650:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c652:	2300      	movs	r3, #0
 800c654:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800c656:	e005      	b.n	800c664 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	3301      	adds	r3, #1
 800c65c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800c65e:	79fb      	ldrb	r3, [r7, #7]
 800c660:	3b0a      	subs	r3, #10
 800c662:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800c664:	79fb      	ldrb	r3, [r7, #7]
 800c666:	2b09      	cmp	r3, #9
 800c668:	d8f6      	bhi.n	800c658 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	b2db      	uxtb	r3, r3
 800c66e:	011b      	lsls	r3, r3, #4
 800c670:	b2da      	uxtb	r2, r3
 800c672:	79fb      	ldrb	r3, [r7, #7]
 800c674:	4313      	orrs	r3, r2
 800c676:	b2db      	uxtb	r3, r3
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3714      	adds	r7, #20
 800c67c:	46bd      	mov	sp, r7
 800c67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c682:	4770      	bx	lr

0800c684 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800c684:	b480      	push	{r7}
 800c686:	b087      	sub	sp, #28
 800c688:	af00      	add	r7, sp, #0
 800c68a:	60f8      	str	r0, [r7, #12]
 800c68c:	60b9      	str	r1, [r7, #8]
 800c68e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c690:	2300      	movs	r3, #0
 800c692:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	7f1b      	ldrb	r3, [r3, #28]
 800c698:	2b01      	cmp	r3, #1
 800c69a:	d101      	bne.n	800c6a0 <HAL_RTCEx_SetTimeStamp+0x1c>
 800c69c:	2302      	movs	r3, #2
 800c69e:	e050      	b.n	800c742 <HAL_RTCEx_SetTimeStamp+0xbe>
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	2202      	movs	r2, #2
 800c6aa:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f022 0206 	bic.w	r2, r2, #6
 800c6ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	687a      	ldr	r2, [r7, #4]
 800c6c8:	430a      	orrs	r2, r1
 800c6ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	689a      	ldr	r2, [r3, #8]
 800c6d2:	4b1f      	ldr	r3, [pc, #124]	@ (800c750 <HAL_RTCEx_SetTimeStamp+0xcc>)
 800c6d4:	4013      	ands	r3, r2
 800c6d6:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800c6d8:	697a      	ldr	r2, [r7, #20]
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	4313      	orrs	r3, r2
 800c6de:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	22ca      	movs	r2, #202	@ 0xca
 800c6e6:	625a      	str	r2, [r3, #36]	@ 0x24
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	2253      	movs	r2, #83	@ 0x53
 800c6ee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	697a      	ldr	r2, [r7, #20]
 800c6f6:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	68db      	ldr	r3, [r3, #12]
 800c6fe:	b2da      	uxtb	r2, r3
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 800c708:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	68db      	ldr	r3, [r3, #12]
 800c710:	b2da      	uxtb	r2, r3
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 800c71a:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	689a      	ldr	r2, [r3, #8]
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c72a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	22ff      	movs	r2, #255	@ 0xff
 800c732:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	2201      	movs	r2, #1
 800c738:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	2200      	movs	r2, #0
 800c73e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800c740:	2300      	movs	r3, #0
}
 800c742:	4618      	mov	r0, r3
 800c744:	371c      	adds	r7, #28
 800c746:	46bd      	mov	sp, r7
 800c748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74c:	4770      	bx	lr
 800c74e:	bf00      	nop
 800c750:	fffff7f7 	.word	0xfffff7f7

0800c754 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b088      	sub	sp, #32
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800c75c:	2300      	movs	r3, #0
 800c75e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800c760:	2300      	movs	r3, #0
 800c762:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800c764:	2300      	movs	r3, #0
 800c766:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d101      	bne.n	800c772 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800c76e:	2301      	movs	r3, #1
 800c770:	e156      	b.n	800ca20 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800c778:	b2db      	uxtb	r3, r3
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d106      	bne.n	800c78c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2200      	movs	r2, #0
 800c782:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f7f8 fdc8 	bl	800531c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2202      	movs	r2, #2
 800c790:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f000 f95b 	bl	800ca50 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	68db      	ldr	r3, [r3, #12]
 800c79e:	2b02      	cmp	r3, #2
 800c7a0:	d00c      	beq.n	800c7bc <HAL_SAI_Init+0x68>
 800c7a2:	2b02      	cmp	r3, #2
 800c7a4:	d80d      	bhi.n	800c7c2 <HAL_SAI_Init+0x6e>
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d002      	beq.n	800c7b0 <HAL_SAI_Init+0x5c>
 800c7aa:	2b01      	cmp	r3, #1
 800c7ac:	d003      	beq.n	800c7b6 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800c7ae:	e008      	b.n	800c7c2 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	61fb      	str	r3, [r7, #28]
      break;
 800c7b4:	e006      	b.n	800c7c4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800c7b6:	2310      	movs	r3, #16
 800c7b8:	61fb      	str	r3, [r7, #28]
      break;
 800c7ba:	e003      	b.n	800c7c4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800c7bc:	2320      	movs	r3, #32
 800c7be:	61fb      	str	r3, [r7, #28]
      break;
 800c7c0:	e000      	b.n	800c7c4 <HAL_SAI_Init+0x70>
      break;
 800c7c2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	689b      	ldr	r3, [r3, #8]
 800c7c8:	2b03      	cmp	r3, #3
 800c7ca:	d81e      	bhi.n	800c80a <HAL_SAI_Init+0xb6>
 800c7cc:	a201      	add	r2, pc, #4	@ (adr r2, 800c7d4 <HAL_SAI_Init+0x80>)
 800c7ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7d2:	bf00      	nop
 800c7d4:	0800c7e5 	.word	0x0800c7e5
 800c7d8:	0800c7eb 	.word	0x0800c7eb
 800c7dc:	0800c7f3 	.word	0x0800c7f3
 800c7e0:	0800c7fb 	.word	0x0800c7fb
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	617b      	str	r3, [r7, #20]
    }
    break;
 800c7e8:	e010      	b.n	800c80c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800c7ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c7ee:	617b      	str	r3, [r7, #20]
    }
    break;
 800c7f0:	e00c      	b.n	800c80c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c7f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c7f6:	617b      	str	r3, [r7, #20]
    }
    break;
 800c7f8:	e008      	b.n	800c80c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c7fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c7fe:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800c800:	69fb      	ldr	r3, [r7, #28]
 800c802:	f043 0301 	orr.w	r3, r3, #1
 800c806:	61fb      	str	r3, [r7, #28]
    }
    break;
 800c808:	e000      	b.n	800c80c <HAL_SAI_Init+0xb8>
    default:
      break;
 800c80a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	4a85      	ldr	r2, [pc, #532]	@ (800ca28 <HAL_SAI_Init+0x2d4>)
 800c812:	4293      	cmp	r3, r2
 800c814:	d004      	beq.n	800c820 <HAL_SAI_Init+0xcc>
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	4a84      	ldr	r2, [pc, #528]	@ (800ca2c <HAL_SAI_Init+0x2d8>)
 800c81c:	4293      	cmp	r3, r2
 800c81e:	d103      	bne.n	800c828 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800c820:	4a83      	ldr	r2, [pc, #524]	@ (800ca30 <HAL_SAI_Init+0x2dc>)
 800c822:	69fb      	ldr	r3, [r7, #28]
 800c824:	6013      	str	r3, [r2, #0]
 800c826:	e002      	b.n	800c82e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800c828:	4a82      	ldr	r2, [pc, #520]	@ (800ca34 <HAL_SAI_Init+0x2e0>)
 800c82a:	69fb      	ldr	r3, [r7, #28]
 800c82c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	69db      	ldr	r3, [r3, #28]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d04c      	beq.n	800c8d0 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800c836:	2300      	movs	r3, #0
 800c838:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	4a7a      	ldr	r2, [pc, #488]	@ (800ca28 <HAL_SAI_Init+0x2d4>)
 800c840:	4293      	cmp	r3, r2
 800c842:	d004      	beq.n	800c84e <HAL_SAI_Init+0xfa>
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	4a78      	ldr	r2, [pc, #480]	@ (800ca2c <HAL_SAI_Init+0x2d8>)
 800c84a:	4293      	cmp	r3, r2
 800c84c:	d104      	bne.n	800c858 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800c84e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800c852:	f7ff fa6d 	bl	800bd30 <HAL_RCCEx_GetPeriphCLKFreq>
 800c856:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4a76      	ldr	r2, [pc, #472]	@ (800ca38 <HAL_SAI_Init+0x2e4>)
 800c85e:	4293      	cmp	r3, r2
 800c860:	d004      	beq.n	800c86c <HAL_SAI_Init+0x118>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	4a75      	ldr	r2, [pc, #468]	@ (800ca3c <HAL_SAI_Init+0x2e8>)
 800c868:	4293      	cmp	r3, r2
 800c86a:	d104      	bne.n	800c876 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800c86c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800c870:	f7ff fa5e 	bl	800bd30 <HAL_RCCEx_GetPeriphCLKFreq>
 800c874:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800c876:	693a      	ldr	r2, [r7, #16]
 800c878:	4613      	mov	r3, r2
 800c87a:	009b      	lsls	r3, r3, #2
 800c87c:	4413      	add	r3, r2
 800c87e:	005b      	lsls	r3, r3, #1
 800c880:	461a      	mov	r2, r3
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	69db      	ldr	r3, [r3, #28]
 800c886:	025b      	lsls	r3, r3, #9
 800c888:	fbb2 f3f3 	udiv	r3, r2, r3
 800c88c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	4a6b      	ldr	r2, [pc, #428]	@ (800ca40 <HAL_SAI_Init+0x2ec>)
 800c892:	fba2 2303 	umull	r2, r3, r2, r3
 800c896:	08da      	lsrs	r2, r3, #3
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800c89c:	68f9      	ldr	r1, [r7, #12]
 800c89e:	4b68      	ldr	r3, [pc, #416]	@ (800ca40 <HAL_SAI_Init+0x2ec>)
 800c8a0:	fba3 2301 	umull	r2, r3, r3, r1
 800c8a4:	08da      	lsrs	r2, r3, #3
 800c8a6:	4613      	mov	r3, r2
 800c8a8:	009b      	lsls	r3, r3, #2
 800c8aa:	4413      	add	r3, r2
 800c8ac:	005b      	lsls	r3, r3, #1
 800c8ae:	1aca      	subs	r2, r1, r3
 800c8b0:	2a08      	cmp	r2, #8
 800c8b2:	d904      	bls.n	800c8be <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6a1b      	ldr	r3, [r3, #32]
 800c8b8:	1c5a      	adds	r2, r3, #1
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8c2:	2b04      	cmp	r3, #4
 800c8c4:	d104      	bne.n	800c8d0 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6a1b      	ldr	r3, [r3, #32]
 800c8ca:	085a      	lsrs	r2, r3, #1
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	685b      	ldr	r3, [r3, #4]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d003      	beq.n	800c8e0 <HAL_SAI_Init+0x18c>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	685b      	ldr	r3, [r3, #4]
 800c8dc:	2b02      	cmp	r3, #2
 800c8de:	d109      	bne.n	800c8f4 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8e4:	2b01      	cmp	r3, #1
 800c8e6:	d101      	bne.n	800c8ec <HAL_SAI_Init+0x198>
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	e001      	b.n	800c8f0 <HAL_SAI_Init+0x19c>
 800c8ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c8f0:	61bb      	str	r3, [r7, #24]
 800c8f2:	e008      	b.n	800c906 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8f8:	2b01      	cmp	r3, #1
 800c8fa:	d102      	bne.n	800c902 <HAL_SAI_Init+0x1ae>
 800c8fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c900:	e000      	b.n	800c904 <HAL_SAI_Init+0x1b0>
 800c902:	2300      	movs	r3, #0
 800c904:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	6819      	ldr	r1, [r3, #0]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681a      	ldr	r2, [r3, #0]
 800c910:	4b4c      	ldr	r3, [pc, #304]	@ (800ca44 <HAL_SAI_Init+0x2f0>)
 800c912:	400b      	ands	r3, r1
 800c914:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	6819      	ldr	r1, [r3, #0]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	685a      	ldr	r2, [r3, #4]
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c924:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c92a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c930:	431a      	orrs	r2, r3
 800c932:	69bb      	ldr	r3, [r7, #24]
 800c934:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800c93e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	691b      	ldr	r3, [r3, #16]
 800c944:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c94a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	6a1b      	ldr	r3, [r3, #32]
 800c950:	051b      	lsls	r3, r3, #20
 800c952:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	430a      	orrs	r2, r1
 800c95a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	6859      	ldr	r1, [r3, #4]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681a      	ldr	r2, [r3, #0]
 800c966:	4b38      	ldr	r3, [pc, #224]	@ (800ca48 <HAL_SAI_Init+0x2f4>)
 800c968:	400b      	ands	r3, r1
 800c96a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	6859      	ldr	r1, [r3, #4]
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	699a      	ldr	r2, [r3, #24]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c97a:	431a      	orrs	r2, r3
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c980:	431a      	orrs	r2, r3
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	430a      	orrs	r2, r1
 800c988:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	6899      	ldr	r1, [r3, #8]
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681a      	ldr	r2, [r3, #0]
 800c994:	4b2d      	ldr	r3, [pc, #180]	@ (800ca4c <HAL_SAI_Init+0x2f8>)
 800c996:	400b      	ands	r3, r1
 800c998:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	6899      	ldr	r1, [r3, #8]
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9a4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c9aa:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800c9b0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800c9b6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c9bc:	3b01      	subs	r3, #1
 800c9be:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800c9c0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	430a      	orrs	r2, r1
 800c9c8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	68d9      	ldr	r1, [r3, #12]
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681a      	ldr	r2, [r3, #0]
 800c9d4:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800c9d8:	400b      	ands	r3, r1
 800c9da:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	68d9      	ldr	r1, [r3, #12]
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c9ea:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c9f0:	041b      	lsls	r3, r3, #16
 800c9f2:	431a      	orrs	r2, r3
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c9f8:	3b01      	subs	r3, #1
 800c9fa:	021b      	lsls	r3, r3, #8
 800c9fc:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	430a      	orrs	r2, r1
 800ca04:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2201      	movs	r2, #1
 800ca12:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2200      	movs	r2, #0
 800ca1a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800ca1e:	2300      	movs	r3, #0
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3720      	adds	r7, #32
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}
 800ca28:	40015804 	.word	0x40015804
 800ca2c:	40015824 	.word	0x40015824
 800ca30:	40015800 	.word	0x40015800
 800ca34:	40015c00 	.word	0x40015c00
 800ca38:	40015c04 	.word	0x40015c04
 800ca3c:	40015c24 	.word	0x40015c24
 800ca40:	cccccccd 	.word	0xcccccccd
 800ca44:	ff05c010 	.word	0xff05c010
 800ca48:	ffff1ff0 	.word	0xffff1ff0
 800ca4c:	fff88000 	.word	0xfff88000

0800ca50 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ca50:	b480      	push	{r7}
 800ca52:	b085      	sub	sp, #20
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800ca58:	4b17      	ldr	r3, [pc, #92]	@ (800cab8 <SAI_Disable+0x68>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	4a17      	ldr	r2, [pc, #92]	@ (800cabc <SAI_Disable+0x6c>)
 800ca5e:	fba2 2303 	umull	r2, r3, r2, r3
 800ca62:	0b1b      	lsrs	r3, r3, #12
 800ca64:	009b      	lsls	r3, r3, #2
 800ca66:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	681a      	ldr	r2, [r3, #0]
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800ca7a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	1e5a      	subs	r2, r3, #1
 800ca80:	60fa      	str	r2, [r7, #12]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d10a      	bne.n	800ca9c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca8c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800ca96:	2303      	movs	r3, #3
 800ca98:	72fb      	strb	r3, [r7, #11]
      break;
 800ca9a:	e006      	b.n	800caaa <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d1e8      	bne.n	800ca7c <SAI_Disable+0x2c>

  return status;
 800caaa:	7afb      	ldrb	r3, [r7, #11]
}
 800caac:	4618      	mov	r0, r3
 800caae:	3714      	adds	r7, #20
 800cab0:	46bd      	mov	sp, r7
 800cab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab6:	4770      	bx	lr
 800cab8:	2000001c 	.word	0x2000001c
 800cabc:	95cbec1b 	.word	0x95cbec1b

0800cac0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b082      	sub	sp, #8
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d101      	bne.n	800cad2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cace:	2301      	movs	r3, #1
 800cad0:	e022      	b.n	800cb18 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cad8:	b2db      	uxtb	r3, r3
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d105      	bne.n	800caea <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2200      	movs	r2, #0
 800cae2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f7f8 f833 	bl	8004b50 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2203      	movs	r2, #3
 800caee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f000 f814 	bl	800cb20 <HAL_SD_InitCard>
 800caf8:	4603      	mov	r3, r0
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d001      	beq.n	800cb02 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800cafe:	2301      	movs	r3, #1
 800cb00:	e00a      	b.n	800cb18 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	2200      	movs	r2, #0
 800cb06:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2201      	movs	r2, #1
 800cb12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800cb16:	2300      	movs	r3, #0
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3708      	adds	r7, #8
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}

0800cb20 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cb20:	b5b0      	push	{r4, r5, r7, lr}
 800cb22:	b08e      	sub	sp, #56	@ 0x38
 800cb24:	af04      	add	r7, sp, #16
 800cb26:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800cb30:	2300      	movs	r3, #0
 800cb32:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800cb34:	2300      	movs	r3, #0
 800cb36:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800cb3c:	2376      	movs	r3, #118	@ 0x76
 800cb3e:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681d      	ldr	r5, [r3, #0]
 800cb44:	466c      	mov	r4, sp
 800cb46:	f107 0318 	add.w	r3, r7, #24
 800cb4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cb4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cb52:	f107 030c 	add.w	r3, r7, #12
 800cb56:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cb58:	4628      	mov	r0, r5
 800cb5a:	f004 f809 	bl	8010b70 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	685a      	ldr	r2, [r3, #4]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cb6c:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	4618      	mov	r0, r3
 800cb74:	f004 f846 	bl	8010c04 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	685a      	ldr	r2, [r3, #4]
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cb86:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800cb88:	2002      	movs	r0, #2
 800cb8a:	f7f9 fc81 	bl	8006490 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f000 ff02 	bl	800d998 <SD_PowerON>
 800cb94:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800cb96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d00b      	beq.n	800cbb4 <HAL_SD_InitCard+0x94>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2201      	movs	r2, #1
 800cba0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbaa:	431a      	orrs	r2, r3
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	e02e      	b.n	800cc12 <HAL_SD_InitCard+0xf2>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f000 fe21 	bl	800d7fc <SD_InitCard>
 800cbba:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800cbbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d00b      	beq.n	800cbda <HAL_SD_InitCard+0xba>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2201      	movs	r2, #1
 800cbc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cbce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbd0:	431a      	orrs	r2, r3
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	e01b      	b.n	800cc12 <HAL_SD_InitCard+0xf2>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f004 f8a0 	bl	8010d28 <SDMMC_CmdBlockLength>
 800cbe8:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800cbea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d00f      	beq.n	800cc10 <HAL_SD_InitCard+0xf0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	4a09      	ldr	r2, [pc, #36]	@ (800cc1c <HAL_SD_InitCard+0xfc>)
 800cbf6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cbfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbfe:	431a      	orrs	r2, r3
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2201      	movs	r2, #1
 800cc08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	e000      	b.n	800cc12 <HAL_SD_InitCard+0xf2>
  }

  return HAL_OK;
 800cc10:	2300      	movs	r3, #0
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3728      	adds	r7, #40	@ 0x28
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bdb0      	pop	{r4, r5, r7, pc}
 800cc1a:	bf00      	nop
 800cc1c:	004005ff 	.word	0x004005ff

0800cc20 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b092      	sub	sp, #72	@ 0x48
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	60f8      	str	r0, [r7, #12]
 800cc28:	60b9      	str	r1, [r7, #8]
 800cc2a:	607a      	str	r2, [r7, #4]
 800cc2c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cc2e:	f7f9 fc23 	bl	8006478 <HAL_GetTick>
 800cc32:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d107      	bne.n	800cc52 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc46:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800cc4e:	2301      	movs	r3, #1
 800cc50:	e1bd      	b.n	800cfce <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cc58:	b2db      	uxtb	r3, r3
 800cc5a:	2b01      	cmp	r3, #1
 800cc5c:	f040 81b0 	bne.w	800cfc0 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	2200      	movs	r2, #0
 800cc64:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cc66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	441a      	add	r2, r3
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cc70:	429a      	cmp	r2, r3
 800cc72:	d907      	bls.n	800cc84 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc78:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800cc80:	2301      	movs	r3, #1
 800cc82:	e1a4      	b.n	800cfce <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	2203      	movs	r2, #3
 800cc88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	2200      	movs	r2, #0
 800cc92:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc98:	2b01      	cmp	r3, #1
 800cc9a:	d002      	beq.n	800cca2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800cc9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc9e:	025b      	lsls	r3, r3, #9
 800cca0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cca2:	f04f 33ff 	mov.w	r3, #4294967295
 800cca6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	025b      	lsls	r3, r3, #9
 800ccac:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ccae:	2390      	movs	r3, #144	@ 0x90
 800ccb0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ccb2:	2302      	movs	r3, #2
 800ccb4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800ccba:	2301      	movs	r3, #1
 800ccbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f107 0214 	add.w	r2, r7, #20
 800ccc6:	4611      	mov	r1, r2
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f004 f801 	bl	8010cd0 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	2b01      	cmp	r3, #1
 800ccd2:	d90a      	bls.n	800ccea <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	2202      	movs	r2, #2
 800ccd8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cce0:	4618      	mov	r0, r3
 800cce2:	f004 f865 	bl	8010db0 <SDMMC_CmdReadMultiBlock>
 800cce6:	6478      	str	r0, [r7, #68]	@ 0x44
 800cce8:	e009      	b.n	800ccfe <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	2201      	movs	r2, #1
 800ccee:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f004 f838 	bl	8010d6c <SDMMC_CmdReadSingleBlock>
 800ccfc:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800ccfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d012      	beq.n	800cd2a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	4a7a      	ldr	r2, [pc, #488]	@ (800cef4 <HAL_SD_ReadBlocks+0x2d4>)
 800cd0a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cd10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd12:	431a      	orrs	r2, r3
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	2201      	movs	r2, #1
 800cd1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	2200      	movs	r2, #0
 800cd24:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cd26:	2301      	movs	r3, #1
 800cd28:	e151      	b.n	800cfce <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800cd2a:	69bb      	ldr	r3, [r7, #24]
 800cd2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cd2e:	e061      	b.n	800cdf4 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d03c      	beq.n	800cdb8 <HAL_SD_ReadBlocks+0x198>
 800cd3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d039      	beq.n	800cdb8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800cd44:	2300      	movs	r3, #0
 800cd46:	643b      	str	r3, [r7, #64]	@ 0x40
 800cd48:	e033      	b.n	800cdb2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f003 ff3a 	bl	8010bc8 <SDMMC_ReadFIFO>
 800cd54:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800cd56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd58:	b2da      	uxtb	r2, r3
 800cd5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd5c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cd5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd60:	3301      	adds	r3, #1
 800cd62:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cd64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd66:	3b01      	subs	r3, #1
 800cd68:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800cd6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd6c:	0a1b      	lsrs	r3, r3, #8
 800cd6e:	b2da      	uxtb	r2, r3
 800cd70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd72:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cd74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd76:	3301      	adds	r3, #1
 800cd78:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cd7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd7c:	3b01      	subs	r3, #1
 800cd7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800cd80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd82:	0c1b      	lsrs	r3, r3, #16
 800cd84:	b2da      	uxtb	r2, r3
 800cd86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd88:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cd8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd8c:	3301      	adds	r3, #1
 800cd8e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cd90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd92:	3b01      	subs	r3, #1
 800cd94:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800cd96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd98:	0e1b      	lsrs	r3, r3, #24
 800cd9a:	b2da      	uxtb	r2, r3
 800cd9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd9e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cda0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cda2:	3301      	adds	r3, #1
 800cda4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cda6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cda8:	3b01      	subs	r3, #1
 800cdaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800cdac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cdae:	3301      	adds	r3, #1
 800cdb0:	643b      	str	r3, [r7, #64]	@ 0x40
 800cdb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cdb4:	2b07      	cmp	r3, #7
 800cdb6:	d9c8      	bls.n	800cd4a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800cdb8:	f7f9 fb5e 	bl	8006478 <HAL_GetTick>
 800cdbc:	4602      	mov	r2, r0
 800cdbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdc0:	1ad3      	subs	r3, r2, r3
 800cdc2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d902      	bls.n	800cdce <HAL_SD_ReadBlocks+0x1ae>
 800cdc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d112      	bne.n	800cdf4 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	4a48      	ldr	r2, [pc, #288]	@ (800cef4 <HAL_SD_ReadBlocks+0x2d4>)
 800cdd4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdda:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	2201      	movs	r2, #1
 800cde6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	2200      	movs	r2, #0
 800cdee:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800cdf0:	2303      	movs	r3, #3
 800cdf2:	e0ec      	b.n	800cfce <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cdfa:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d096      	beq.n	800cd30 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d022      	beq.n	800ce56 <HAL_SD_ReadBlocks+0x236>
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	2b01      	cmp	r3, #1
 800ce14:	d91f      	bls.n	800ce56 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce1a:	2b03      	cmp	r3, #3
 800ce1c:	d01b      	beq.n	800ce56 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	4618      	mov	r0, r3
 800ce24:	f004 f82a 	bl	8010e7c <SDMMC_CmdStopTransfer>
 800ce28:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800ce2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d012      	beq.n	800ce56 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	4a2f      	ldr	r2, [pc, #188]	@ (800cef4 <HAL_SD_ReadBlocks+0x2d4>)
 800ce36:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ce3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce3e:	431a      	orrs	r2, r3
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	2201      	movs	r2, #1
 800ce48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800ce52:	2301      	movs	r3, #1
 800ce54:	e0bb      	b.n	800cfce <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce5c:	f003 0308 	and.w	r3, r3, #8
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d012      	beq.n	800ce8a <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	4a22      	ldr	r2, [pc, #136]	@ (800cef4 <HAL_SD_ReadBlocks+0x2d4>)
 800ce6a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce70:	f043 0208 	orr.w	r2, r3, #8
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	2201      	movs	r2, #1
 800ce7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	2200      	movs	r2, #0
 800ce84:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800ce86:	2301      	movs	r3, #1
 800ce88:	e0a1      	b.n	800cfce <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce90:	f003 0302 	and.w	r3, r3, #2
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d012      	beq.n	800cebe <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	4a15      	ldr	r2, [pc, #84]	@ (800cef4 <HAL_SD_ReadBlocks+0x2d4>)
 800ce9e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cea4:	f043 0202 	orr.w	r2, r3, #2
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	2201      	movs	r2, #1
 800ceb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800ceba:	2301      	movs	r3, #1
 800cebc:	e087      	b.n	800cfce <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cec4:	f003 0320 	and.w	r3, r3, #32
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d064      	beq.n	800cf96 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4a08      	ldr	r2, [pc, #32]	@ (800cef4 <HAL_SD_ReadBlocks+0x2d4>)
 800ced2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ced8:	f043 0220 	orr.w	r2, r3, #32
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	2201      	movs	r2, #1
 800cee4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	2200      	movs	r2, #0
 800ceec:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800ceee:	2301      	movs	r3, #1
 800cef0:	e06d      	b.n	800cfce <HAL_SD_ReadBlocks+0x3ae>
 800cef2:	bf00      	nop
 800cef4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	4618      	mov	r0, r3
 800cefe:	f003 fe63 	bl	8010bc8 <SDMMC_ReadFIFO>
 800cf02:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800cf04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf06:	b2da      	uxtb	r2, r3
 800cf08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf0a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800cf0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf0e:	3301      	adds	r3, #1
 800cf10:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800cf12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf14:	3b01      	subs	r3, #1
 800cf16:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800cf18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf1a:	0a1b      	lsrs	r3, r3, #8
 800cf1c:	b2da      	uxtb	r2, r3
 800cf1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf20:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800cf22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf24:	3301      	adds	r3, #1
 800cf26:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800cf28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf2a:	3b01      	subs	r3, #1
 800cf2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800cf2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf30:	0c1b      	lsrs	r3, r3, #16
 800cf32:	b2da      	uxtb	r2, r3
 800cf34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf36:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800cf38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800cf3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf40:	3b01      	subs	r3, #1
 800cf42:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800cf44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf46:	0e1b      	lsrs	r3, r3, #24
 800cf48:	b2da      	uxtb	r2, r3
 800cf4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf4c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800cf4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf50:	3301      	adds	r3, #1
 800cf52:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800cf54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf56:	3b01      	subs	r3, #1
 800cf58:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800cf5a:	f7f9 fa8d 	bl	8006478 <HAL_GetTick>
 800cf5e:	4602      	mov	r2, r0
 800cf60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf62:	1ad3      	subs	r3, r2, r3
 800cf64:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cf66:	429a      	cmp	r2, r3
 800cf68:	d902      	bls.n	800cf70 <HAL_SD_ReadBlocks+0x350>
 800cf6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d112      	bne.n	800cf96 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	4a18      	ldr	r2, [pc, #96]	@ (800cfd8 <HAL_SD_ReadBlocks+0x3b8>)
 800cf76:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf7c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	2201      	movs	r2, #1
 800cf88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	2200      	movs	r2, #0
 800cf90:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800cf92:	2301      	movs	r3, #1
 800cf94:	e01b      	b.n	800cfce <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d002      	beq.n	800cfaa <HAL_SD_ReadBlocks+0x38a>
 800cfa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d1a6      	bne.n	800cef8 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	f240 523a 	movw	r2, #1338	@ 0x53a
 800cfb2:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	2201      	movs	r2, #1
 800cfb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	e006      	b.n	800cfce <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfc4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800cfcc:	2301      	movs	r3, #1
  }
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	3748      	adds	r7, #72	@ 0x48
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}
 800cfd6:	bf00      	nop
 800cfd8:	004005ff 	.word	0x004005ff

0800cfdc <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b092      	sub	sp, #72	@ 0x48
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	60f8      	str	r0, [r7, #12]
 800cfe4:	60b9      	str	r1, [r7, #8]
 800cfe6:	607a      	str	r2, [r7, #4]
 800cfe8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cfea:	f7f9 fa45 	bl	8006478 <HAL_GetTick>
 800cfee:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d107      	bne.n	800d00e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d002:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800d00a:	2301      	movs	r3, #1
 800d00c:	e165      	b.n	800d2da <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d014:	b2db      	uxtb	r3, r3
 800d016:	2b01      	cmp	r3, #1
 800d018:	f040 8158 	bne.w	800d2cc <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	2200      	movs	r2, #0
 800d020:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d022:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	441a      	add	r2, r3
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d907      	bls.n	800d040 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d034:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800d03c:	2301      	movs	r3, #1
 800d03e:	e14c      	b.n	800d2da <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	2203      	movs	r2, #3
 800d044:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	2200      	movs	r2, #0
 800d04e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d054:	2b01      	cmp	r3, #1
 800d056:	d002      	beq.n	800d05e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800d058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d05a:	025b      	lsls	r3, r3, #9
 800d05c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d05e:	f04f 33ff 	mov.w	r3, #4294967295
 800d062:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	025b      	lsls	r3, r3, #9
 800d068:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d06a:	2390      	movs	r3, #144	@ 0x90
 800d06c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d06e:	2300      	movs	r3, #0
 800d070:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d072:	2300      	movs	r3, #0
 800d074:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800d076:	2301      	movs	r3, #1
 800d078:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	f107 0218 	add.w	r2, r7, #24
 800d082:	4611      	mov	r1, r2
 800d084:	4618      	mov	r0, r3
 800d086:	f003 fe23 	bl	8010cd0 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	2b01      	cmp	r3, #1
 800d08e:	d90a      	bls.n	800d0a6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	2220      	movs	r2, #32
 800d094:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d09c:	4618      	mov	r0, r3
 800d09e:	f003 fecb 	bl	8010e38 <SDMMC_CmdWriteMultiBlock>
 800d0a2:	6478      	str	r0, [r7, #68]	@ 0x44
 800d0a4:	e009      	b.n	800d0ba <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	2210      	movs	r2, #16
 800d0aa:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f003 fe9e 	bl	8010df4 <SDMMC_CmdWriteSingleBlock>
 800d0b8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d0ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d012      	beq.n	800d0e6 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	4a87      	ldr	r2, [pc, #540]	@ (800d2e4 <HAL_SD_WriteBlocks+0x308>)
 800d0c6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d0cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0ce:	431a      	orrs	r2, r3
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2201      	movs	r2, #1
 800d0d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	e0f9      	b.n	800d2da <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800d0e6:	69fb      	ldr	r3, [r7, #28]
 800d0e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d0ea:	e065      	b.n	800d1b8 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d040      	beq.n	800d17c <HAL_SD_WriteBlocks+0x1a0>
 800d0fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d03d      	beq.n	800d17c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800d100:	2300      	movs	r3, #0
 800d102:	643b      	str	r3, [r7, #64]	@ 0x40
 800d104:	e037      	b.n	800d176 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800d106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d108:	781b      	ldrb	r3, [r3, #0]
 800d10a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d10c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d10e:	3301      	adds	r3, #1
 800d110:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800d112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d114:	3b01      	subs	r3, #1
 800d116:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800d118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d11a:	781b      	ldrb	r3, [r3, #0]
 800d11c:	021a      	lsls	r2, r3, #8
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	4313      	orrs	r3, r2
 800d122:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d126:	3301      	adds	r3, #1
 800d128:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800d12a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d12c:	3b01      	subs	r3, #1
 800d12e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800d130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d132:	781b      	ldrb	r3, [r3, #0]
 800d134:	041a      	lsls	r2, r3, #16
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	4313      	orrs	r3, r2
 800d13a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d13c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d13e:	3301      	adds	r3, #1
 800d140:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800d142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d144:	3b01      	subs	r3, #1
 800d146:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800d148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d14a:	781b      	ldrb	r3, [r3, #0]
 800d14c:	061a      	lsls	r2, r3, #24
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	4313      	orrs	r3, r2
 800d152:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d156:	3301      	adds	r3, #1
 800d158:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800d15a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d15c:	3b01      	subs	r3, #1
 800d15e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	f107 0214 	add.w	r2, r7, #20
 800d168:	4611      	mov	r1, r2
 800d16a:	4618      	mov	r0, r3
 800d16c:	f003 fd39 	bl	8010be2 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800d170:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d172:	3301      	adds	r3, #1
 800d174:	643b      	str	r3, [r7, #64]	@ 0x40
 800d176:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d178:	2b07      	cmp	r3, #7
 800d17a:	d9c4      	bls.n	800d106 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d17c:	f7f9 f97c 	bl	8006478 <HAL_GetTick>
 800d180:	4602      	mov	r2, r0
 800d182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d184:	1ad3      	subs	r3, r2, r3
 800d186:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d188:	429a      	cmp	r2, r3
 800d18a:	d902      	bls.n	800d192 <HAL_SD_WriteBlocks+0x1b6>
 800d18c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d112      	bne.n	800d1b8 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	4a53      	ldr	r2, [pc, #332]	@ (800d2e4 <HAL_SD_WriteBlocks+0x308>)
 800d198:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d19e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1a0:	431a      	orrs	r2, r3
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	2201      	movs	r2, #1
 800d1aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800d1b4:	2303      	movs	r3, #3
 800d1b6:	e090      	b.n	800d2da <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1be:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d092      	beq.n	800d0ec <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d022      	beq.n	800d21a <HAL_SD_WriteBlocks+0x23e>
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	2b01      	cmp	r3, #1
 800d1d8:	d91f      	bls.n	800d21a <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1de:	2b03      	cmp	r3, #3
 800d1e0:	d01b      	beq.n	800d21a <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	f003 fe48 	bl	8010e7c <SDMMC_CmdStopTransfer>
 800d1ec:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d1ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d012      	beq.n	800d21a <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	4a3a      	ldr	r2, [pc, #232]	@ (800d2e4 <HAL_SD_WriteBlocks+0x308>)
 800d1fa:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d200:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d202:	431a      	orrs	r2, r3
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	2201      	movs	r2, #1
 800d20c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	2200      	movs	r2, #0
 800d214:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800d216:	2301      	movs	r3, #1
 800d218:	e05f      	b.n	800d2da <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d220:	f003 0308 	and.w	r3, r3, #8
 800d224:	2b00      	cmp	r3, #0
 800d226:	d012      	beq.n	800d24e <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	4a2d      	ldr	r2, [pc, #180]	@ (800d2e4 <HAL_SD_WriteBlocks+0x308>)
 800d22e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d234:	f043 0208 	orr.w	r2, r3, #8
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	2201      	movs	r2, #1
 800d240:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	2200      	movs	r2, #0
 800d248:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d24a:	2301      	movs	r3, #1
 800d24c:	e045      	b.n	800d2da <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d254:	f003 0302 	and.w	r3, r3, #2
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d012      	beq.n	800d282 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	4a20      	ldr	r2, [pc, #128]	@ (800d2e4 <HAL_SD_WriteBlocks+0x308>)
 800d262:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d268:	f043 0202 	orr.w	r2, r3, #2
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	2201      	movs	r2, #1
 800d274:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	2200      	movs	r2, #0
 800d27c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d27e:	2301      	movs	r3, #1
 800d280:	e02b      	b.n	800d2da <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d288:	f003 0310 	and.w	r3, r3, #16
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d012      	beq.n	800d2b6 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	4a13      	ldr	r2, [pc, #76]	@ (800d2e4 <HAL_SD_WriteBlocks+0x308>)
 800d296:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d29c:	f043 0210 	orr.w	r2, r3, #16
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	2201      	movs	r2, #1
 800d2a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	e011      	b.n	800d2da <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f240 523a 	movw	r2, #1338	@ 0x53a
 800d2be:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	2201      	movs	r2, #1
 800d2c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	e006      	b.n	800d2da <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2d0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800d2d8:	2301      	movs	r3, #1
  }
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3748      	adds	r7, #72	@ 0x48
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}
 800d2e2:	bf00      	nop
 800d2e4:	004005ff 	.word	0x004005ff

0800d2e8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d2e8:	b480      	push	{r7}
 800d2ea:	b083      	sub	sp, #12
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d2f6:	0f9b      	lsrs	r3, r3, #30
 800d2f8:	b2da      	uxtb	r2, r3
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d302:	0e9b      	lsrs	r3, r3, #26
 800d304:	b2db      	uxtb	r3, r3
 800d306:	f003 030f 	and.w	r3, r3, #15
 800d30a:	b2da      	uxtb	r2, r3
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d314:	0e1b      	lsrs	r3, r3, #24
 800d316:	b2db      	uxtb	r3, r3
 800d318:	f003 0303 	and.w	r3, r3, #3
 800d31c:	b2da      	uxtb	r2, r3
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d326:	0c1b      	lsrs	r3, r3, #16
 800d328:	b2da      	uxtb	r2, r3
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d332:	0a1b      	lsrs	r3, r3, #8
 800d334:	b2da      	uxtb	r2, r3
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d33e:	b2da      	uxtb	r2, r3
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d348:	0d1b      	lsrs	r3, r3, #20
 800d34a:	b29a      	uxth	r2, r3
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d354:	0c1b      	lsrs	r3, r3, #16
 800d356:	b2db      	uxtb	r3, r3
 800d358:	f003 030f 	and.w	r3, r3, #15
 800d35c:	b2da      	uxtb	r2, r3
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d366:	0bdb      	lsrs	r3, r3, #15
 800d368:	b2db      	uxtb	r3, r3
 800d36a:	f003 0301 	and.w	r3, r3, #1
 800d36e:	b2da      	uxtb	r2, r3
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d378:	0b9b      	lsrs	r3, r3, #14
 800d37a:	b2db      	uxtb	r3, r3
 800d37c:	f003 0301 	and.w	r3, r3, #1
 800d380:	b2da      	uxtb	r2, r3
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d38a:	0b5b      	lsrs	r3, r3, #13
 800d38c:	b2db      	uxtb	r3, r3
 800d38e:	f003 0301 	and.w	r3, r3, #1
 800d392:	b2da      	uxtb	r2, r3
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d39c:	0b1b      	lsrs	r3, r3, #12
 800d39e:	b2db      	uxtb	r3, r3
 800d3a0:	f003 0301 	and.w	r3, r3, #1
 800d3a4:	b2da      	uxtb	r2, r3
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d163      	bne.n	800d480 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d3bc:	009a      	lsls	r2, r3, #2
 800d3be:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800d3c2:	4013      	ands	r3, r2
 800d3c4:	687a      	ldr	r2, [r7, #4]
 800d3c6:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800d3c8:	0f92      	lsrs	r2, r2, #30
 800d3ca:	431a      	orrs	r2, r3
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3d4:	0edb      	lsrs	r3, r3, #27
 800d3d6:	b2db      	uxtb	r3, r3
 800d3d8:	f003 0307 	and.w	r3, r3, #7
 800d3dc:	b2da      	uxtb	r2, r3
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3e6:	0e1b      	lsrs	r3, r3, #24
 800d3e8:	b2db      	uxtb	r3, r3
 800d3ea:	f003 0307 	and.w	r3, r3, #7
 800d3ee:	b2da      	uxtb	r2, r3
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3f8:	0d5b      	lsrs	r3, r3, #21
 800d3fa:	b2db      	uxtb	r3, r3
 800d3fc:	f003 0307 	and.w	r3, r3, #7
 800d400:	b2da      	uxtb	r2, r3
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d40a:	0c9b      	lsrs	r3, r3, #18
 800d40c:	b2db      	uxtb	r3, r3
 800d40e:	f003 0307 	and.w	r3, r3, #7
 800d412:	b2da      	uxtb	r2, r3
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d41c:	0bdb      	lsrs	r3, r3, #15
 800d41e:	b2db      	uxtb	r3, r3
 800d420:	f003 0307 	and.w	r3, r3, #7
 800d424:	b2da      	uxtb	r2, r3
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	691b      	ldr	r3, [r3, #16]
 800d42e:	1c5a      	adds	r2, r3, #1
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	7e1b      	ldrb	r3, [r3, #24]
 800d438:	b2db      	uxtb	r3, r3
 800d43a:	f003 0307 	and.w	r3, r3, #7
 800d43e:	3302      	adds	r3, #2
 800d440:	2201      	movs	r2, #1
 800d442:	fa02 f303 	lsl.w	r3, r2, r3
 800d446:	687a      	ldr	r2, [r7, #4]
 800d448:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800d44a:	fb03 f202 	mul.w	r2, r3, r2
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	7a1b      	ldrb	r3, [r3, #8]
 800d456:	b2db      	uxtb	r3, r3
 800d458:	f003 030f 	and.w	r3, r3, #15
 800d45c:	2201      	movs	r2, #1
 800d45e:	409a      	lsls	r2, r3
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d468:	687a      	ldr	r2, [r7, #4]
 800d46a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800d46c:	0a52      	lsrs	r2, r2, #9
 800d46e:	fb03 f202 	mul.w	r2, r3, r2
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d47c:	661a      	str	r2, [r3, #96]	@ 0x60
 800d47e:	e031      	b.n	800d4e4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d484:	2b01      	cmp	r3, #1
 800d486:	d11d      	bne.n	800d4c4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d48c:	041b      	lsls	r3, r3, #16
 800d48e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d496:	0c1b      	lsrs	r3, r3, #16
 800d498:	431a      	orrs	r2, r3
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	691b      	ldr	r3, [r3, #16]
 800d4a2:	3301      	adds	r3, #1
 800d4a4:	029a      	lsls	r2, r3, #10
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d4b8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	661a      	str	r2, [r3, #96]	@ 0x60
 800d4c2:	e00f      	b.n	800d4e4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	4a58      	ldr	r2, [pc, #352]	@ (800d62c <HAL_SD_GetCardCSD+0x344>)
 800d4ca:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4d0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2201      	movs	r2, #1
 800d4dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d4e0:	2301      	movs	r3, #1
 800d4e2:	e09d      	b.n	800d620 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d4e8:	0b9b      	lsrs	r3, r3, #14
 800d4ea:	b2db      	uxtb	r3, r3
 800d4ec:	f003 0301 	and.w	r3, r3, #1
 800d4f0:	b2da      	uxtb	r2, r3
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d4fa:	09db      	lsrs	r3, r3, #7
 800d4fc:	b2db      	uxtb	r3, r3
 800d4fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d502:	b2da      	uxtb	r2, r3
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d50c:	b2db      	uxtb	r3, r3
 800d50e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d512:	b2da      	uxtb	r2, r3
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d51c:	0fdb      	lsrs	r3, r3, #31
 800d51e:	b2da      	uxtb	r2, r3
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d528:	0f5b      	lsrs	r3, r3, #29
 800d52a:	b2db      	uxtb	r3, r3
 800d52c:	f003 0303 	and.w	r3, r3, #3
 800d530:	b2da      	uxtb	r2, r3
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d53a:	0e9b      	lsrs	r3, r3, #26
 800d53c:	b2db      	uxtb	r3, r3
 800d53e:	f003 0307 	and.w	r3, r3, #7
 800d542:	b2da      	uxtb	r2, r3
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d54c:	0d9b      	lsrs	r3, r3, #22
 800d54e:	b2db      	uxtb	r3, r3
 800d550:	f003 030f 	and.w	r3, r3, #15
 800d554:	b2da      	uxtb	r2, r3
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d55e:	0d5b      	lsrs	r3, r3, #21
 800d560:	b2db      	uxtb	r3, r3
 800d562:	f003 0301 	and.w	r3, r3, #1
 800d566:	b2da      	uxtb	r2, r3
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	2200      	movs	r2, #0
 800d572:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d57a:	0c1b      	lsrs	r3, r3, #16
 800d57c:	b2db      	uxtb	r3, r3
 800d57e:	f003 0301 	and.w	r3, r3, #1
 800d582:	b2da      	uxtb	r2, r3
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d58e:	0bdb      	lsrs	r3, r3, #15
 800d590:	b2db      	uxtb	r3, r3
 800d592:	f003 0301 	and.w	r3, r3, #1
 800d596:	b2da      	uxtb	r2, r3
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d5a2:	0b9b      	lsrs	r3, r3, #14
 800d5a4:	b2db      	uxtb	r3, r3
 800d5a6:	f003 0301 	and.w	r3, r3, #1
 800d5aa:	b2da      	uxtb	r2, r3
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d5b6:	0b5b      	lsrs	r3, r3, #13
 800d5b8:	b2db      	uxtb	r3, r3
 800d5ba:	f003 0301 	and.w	r3, r3, #1
 800d5be:	b2da      	uxtb	r2, r3
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d5ca:	0b1b      	lsrs	r3, r3, #12
 800d5cc:	b2db      	uxtb	r3, r3
 800d5ce:	f003 0301 	and.w	r3, r3, #1
 800d5d2:	b2da      	uxtb	r2, r3
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d5de:	0a9b      	lsrs	r3, r3, #10
 800d5e0:	b2db      	uxtb	r3, r3
 800d5e2:	f003 0303 	and.w	r3, r3, #3
 800d5e6:	b2da      	uxtb	r2, r3
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d5f2:	0a1b      	lsrs	r3, r3, #8
 800d5f4:	b2db      	uxtb	r3, r3
 800d5f6:	f003 0303 	and.w	r3, r3, #3
 800d5fa:	b2da      	uxtb	r2, r3
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d606:	085b      	lsrs	r3, r3, #1
 800d608:	b2db      	uxtb	r3, r3
 800d60a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d60e:	b2da      	uxtb	r2, r3
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	2201      	movs	r2, #1
 800d61a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800d61e:	2300      	movs	r3, #0
}
 800d620:	4618      	mov	r0, r3
 800d622:	370c      	adds	r7, #12
 800d624:	46bd      	mov	sp, r7
 800d626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62a:	4770      	bx	lr
 800d62c:	004005ff 	.word	0x004005ff

0800d630 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d630:	b480      	push	{r7}
 800d632:	b083      	sub	sp, #12
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
 800d638:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d67a:	2300      	movs	r3, #0
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	370c      	adds	r7, #12
 800d680:	46bd      	mov	sp, r7
 800d682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d686:	4770      	bx	lr

0800d688 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d688:	b5b0      	push	{r4, r5, r7, lr}
 800d68a:	b08e      	sub	sp, #56	@ 0x38
 800d68c:	af04      	add	r7, sp, #16
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d692:	2300      	movs	r3, #0
 800d694:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2203      	movs	r2, #3
 800d69c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d6a4:	2b03      	cmp	r3, #3
 800d6a6:	d02e      	beq.n	800d706 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d6ae:	d106      	bne.n	800d6be <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6b4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	639a      	str	r2, [r3, #56]	@ 0x38
 800d6bc:	e029      	b.n	800d712 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d6c4:	d10a      	bne.n	800d6dc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f000 fa1c 	bl	800db04 <SD_WideBus_Enable>
 800d6cc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d6d2:	6a3b      	ldr	r3, [r7, #32]
 800d6d4:	431a      	orrs	r2, r3
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	639a      	str	r2, [r3, #56]	@ 0x38
 800d6da:	e01a      	b.n	800d712 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d10a      	bne.n	800d6f8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f000 fa59 	bl	800db9a <SD_WideBus_Disable>
 800d6e8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d6ee:	6a3b      	ldr	r3, [r7, #32]
 800d6f0:	431a      	orrs	r2, r3
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	639a      	str	r2, [r3, #56]	@ 0x38
 800d6f6:	e00c      	b.n	800d712 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6fc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	639a      	str	r2, [r3, #56]	@ 0x38
 800d704:	e005      	b.n	800d712 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d70a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d716:	2b00      	cmp	r3, #0
 800d718:	d00b      	beq.n	800d732 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	4a26      	ldr	r2, [pc, #152]	@ (800d7b8 <HAL_SD_ConfigWideBusOperation+0x130>)
 800d720:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2201      	movs	r2, #1
 800d726:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800d72a:	2301      	movs	r3, #1
 800d72c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d730:	e01f      	b.n	800d772 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	685b      	ldr	r3, [r3, #4]
 800d736:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	689b      	ldr	r3, [r3, #8]
 800d73c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	68db      	ldr	r3, [r3, #12]
 800d742:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	695b      	ldr	r3, [r3, #20]
 800d74c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	699b      	ldr	r3, [r3, #24]
 800d752:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681d      	ldr	r5, [r3, #0]
 800d758:	466c      	mov	r4, sp
 800d75a:	f107 0314 	add.w	r3, r7, #20
 800d75e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d762:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d766:	f107 0308 	add.w	r3, r7, #8
 800d76a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d76c:	4628      	mov	r0, r5
 800d76e:	f003 f9ff 	bl	8010b70 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d77a:	4618      	mov	r0, r3
 800d77c:	f003 fad4 	bl	8010d28 <SDMMC_CmdBlockLength>
 800d780:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d782:	6a3b      	ldr	r3, [r7, #32]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d00c      	beq.n	800d7a2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	4a0a      	ldr	r2, [pc, #40]	@ (800d7b8 <HAL_SD_ConfigWideBusOperation+0x130>)
 800d78e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d794:	6a3b      	ldr	r3, [r7, #32]
 800d796:	431a      	orrs	r2, r3
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800d79c:	2301      	movs	r3, #1
 800d79e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2201      	movs	r2, #1
 800d7a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 800d7aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	3728      	adds	r7, #40	@ 0x28
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bdb0      	pop	{r4, r5, r7, pc}
 800d7b6:	bf00      	nop
 800d7b8:	004005ff 	.word	0x004005ff

0800d7bc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b086      	sub	sp, #24
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d7c8:	f107 030c 	add.w	r3, r7, #12
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	f000 f970 	bl	800dab4 <SD_SendStatus>
 800d7d4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d005      	beq.n	800d7e8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d7e0:	697b      	ldr	r3, [r7, #20]
 800d7e2:	431a      	orrs	r2, r3
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	0a5b      	lsrs	r3, r3, #9
 800d7ec:	f003 030f 	and.w	r3, r3, #15
 800d7f0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d7f2:	693b      	ldr	r3, [r7, #16]
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	3718      	adds	r7, #24
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}

0800d7fc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d7fc:	b5b0      	push	{r4, r5, r7, lr}
 800d7fe:	b094      	sub	sp, #80	@ 0x50
 800d800:	af04      	add	r7, sp, #16
 800d802:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d804:	2301      	movs	r3, #1
 800d806:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	4618      	mov	r0, r3
 800d80e:	f003 fa07 	bl	8010c20 <SDMMC_GetPowerState>
 800d812:	4603      	mov	r3, r0
 800d814:	2b00      	cmp	r3, #0
 800d816:	d102      	bne.n	800d81e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d818:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800d81c:	e0b8      	b.n	800d990 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d822:	2b03      	cmp	r3, #3
 800d824:	d02f      	beq.n	800d886 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	4618      	mov	r0, r3
 800d82c:	f003 fc31 	bl	8011092 <SDMMC_CmdSendCID>
 800d830:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d834:	2b00      	cmp	r3, #0
 800d836:	d001      	beq.n	800d83c <SD_InitCard+0x40>
    {
      return errorstate;
 800d838:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d83a:	e0a9      	b.n	800d990 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	2100      	movs	r1, #0
 800d842:	4618      	mov	r0, r3
 800d844:	f003 fa31 	bl	8010caa <SDMMC_GetResponse>
 800d848:	4602      	mov	r2, r0
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	2104      	movs	r1, #4
 800d854:	4618      	mov	r0, r3
 800d856:	f003 fa28 	bl	8010caa <SDMMC_GetResponse>
 800d85a:	4602      	mov	r2, r0
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	2108      	movs	r1, #8
 800d866:	4618      	mov	r0, r3
 800d868:	f003 fa1f 	bl	8010caa <SDMMC_GetResponse>
 800d86c:	4602      	mov	r2, r0
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	210c      	movs	r1, #12
 800d878:	4618      	mov	r0, r3
 800d87a:	f003 fa16 	bl	8010caa <SDMMC_GetResponse>
 800d87e:	4602      	mov	r2, r0
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d88a:	2b03      	cmp	r3, #3
 800d88c:	d00d      	beq.n	800d8aa <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	f107 020e 	add.w	r2, r7, #14
 800d896:	4611      	mov	r1, r2
 800d898:	4618      	mov	r0, r3
 800d89a:	f003 fc37 	bl	801110c <SDMMC_CmdSetRelAdd>
 800d89e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d8a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d001      	beq.n	800d8aa <SD_InitCard+0xae>
    {
      return errorstate;
 800d8a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8a8:	e072      	b.n	800d990 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d8ae:	2b03      	cmp	r3, #3
 800d8b0:	d036      	beq.n	800d920 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d8b2:	89fb      	ldrh	r3, [r7, #14]
 800d8b4:	461a      	mov	r2, r3
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681a      	ldr	r2, [r3, #0]
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d8c2:	041b      	lsls	r3, r3, #16
 800d8c4:	4619      	mov	r1, r3
 800d8c6:	4610      	mov	r0, r2
 800d8c8:	f003 fc01 	bl	80110ce <SDMMC_CmdSendCSD>
 800d8cc:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d8ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d001      	beq.n	800d8d8 <SD_InitCard+0xdc>
    {
      return errorstate;
 800d8d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8d6:	e05b      	b.n	800d990 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	2100      	movs	r1, #0
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f003 f9e3 	bl	8010caa <SDMMC_GetResponse>
 800d8e4:	4602      	mov	r2, r0
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	2104      	movs	r1, #4
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f003 f9da 	bl	8010caa <SDMMC_GetResponse>
 800d8f6:	4602      	mov	r2, r0
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	2108      	movs	r1, #8
 800d902:	4618      	mov	r0, r3
 800d904:	f003 f9d1 	bl	8010caa <SDMMC_GetResponse>
 800d908:	4602      	mov	r2, r0
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	210c      	movs	r1, #12
 800d914:	4618      	mov	r0, r3
 800d916:	f003 f9c8 	bl	8010caa <SDMMC_GetResponse>
 800d91a:	4602      	mov	r2, r0
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	2104      	movs	r1, #4
 800d926:	4618      	mov	r0, r3
 800d928:	f003 f9bf 	bl	8010caa <SDMMC_GetResponse>
 800d92c:	4603      	mov	r3, r0
 800d92e:	0d1a      	lsrs	r2, r3, #20
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d934:	f107 0310 	add.w	r3, r7, #16
 800d938:	4619      	mov	r1, r3
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f7ff fcd4 	bl	800d2e8 <HAL_SD_GetCardCSD>
 800d940:	4603      	mov	r3, r0
 800d942:	2b00      	cmp	r3, #0
 800d944:	d002      	beq.n	800d94c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d946:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d94a:	e021      	b.n	800d990 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6819      	ldr	r1, [r3, #0]
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d954:	041b      	lsls	r3, r3, #16
 800d956:	2200      	movs	r2, #0
 800d958:	461c      	mov	r4, r3
 800d95a:	4615      	mov	r5, r2
 800d95c:	4622      	mov	r2, r4
 800d95e:	462b      	mov	r3, r5
 800d960:	4608      	mov	r0, r1
 800d962:	f003 faad 	bl	8010ec0 <SDMMC_CmdSelDesel>
 800d966:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d968:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d001      	beq.n	800d972 <SD_InitCard+0x176>
  {
    return errorstate;
 800d96e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d970:	e00e      	b.n	800d990 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681d      	ldr	r5, [r3, #0]
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	466c      	mov	r4, sp
 800d97a:	f103 0210 	add.w	r2, r3, #16
 800d97e:	ca07      	ldmia	r2, {r0, r1, r2}
 800d980:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d984:	3304      	adds	r3, #4
 800d986:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d988:	4628      	mov	r0, r5
 800d98a:	f003 f8f1 	bl	8010b70 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d98e:	2300      	movs	r3, #0
}
 800d990:	4618      	mov	r0, r3
 800d992:	3740      	adds	r7, #64	@ 0x40
 800d994:	46bd      	mov	sp, r7
 800d996:	bdb0      	pop	{r4, r5, r7, pc}

0800d998 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b086      	sub	sp, #24
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	617b      	str	r3, [r7, #20]
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f003 faa8 	bl	8010f06 <SDMMC_CmdGoIdleState>
 800d9b6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d001      	beq.n	800d9c2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	e072      	b.n	800daa8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f003 fabb 	bl	8010f42 <SDMMC_CmdOperCond>
 800d9cc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d00d      	beq.n	800d9f0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f003 fa91 	bl	8010f06 <SDMMC_CmdGoIdleState>
 800d9e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d004      	beq.n	800d9f6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	e05b      	b.n	800daa8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d9fa:	2b01      	cmp	r3, #1
 800d9fc:	d137      	bne.n	800da6e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	2100      	movs	r1, #0
 800da04:	4618      	mov	r0, r3
 800da06:	f003 fabb 	bl	8010f80 <SDMMC_CmdAppCommand>
 800da0a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d02d      	beq.n	800da6e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800da12:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800da16:	e047      	b.n	800daa8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	2100      	movs	r1, #0
 800da1e:	4618      	mov	r0, r3
 800da20:	f003 faae 	bl	8010f80 <SDMMC_CmdAppCommand>
 800da24:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d001      	beq.n	800da30 <SD_PowerON+0x98>
    {
      return errorstate;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	e03b      	b.n	800daa8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	491e      	ldr	r1, [pc, #120]	@ (800dab0 <SD_PowerON+0x118>)
 800da36:	4618      	mov	r0, r3
 800da38:	f003 fac4 	bl	8010fc4 <SDMMC_CmdAppOperCommand>
 800da3c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d002      	beq.n	800da4a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800da44:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800da48:	e02e      	b.n	800daa8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	2100      	movs	r1, #0
 800da50:	4618      	mov	r0, r3
 800da52:	f003 f92a 	bl	8010caa <SDMMC_GetResponse>
 800da56:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800da58:	697b      	ldr	r3, [r7, #20]
 800da5a:	0fdb      	lsrs	r3, r3, #31
 800da5c:	2b01      	cmp	r3, #1
 800da5e:	d101      	bne.n	800da64 <SD_PowerON+0xcc>
 800da60:	2301      	movs	r3, #1
 800da62:	e000      	b.n	800da66 <SD_PowerON+0xce>
 800da64:	2300      	movs	r3, #0
 800da66:	613b      	str	r3, [r7, #16]

    count++;
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	3301      	adds	r3, #1
 800da6c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800da6e:	68bb      	ldr	r3, [r7, #8]
 800da70:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800da74:	4293      	cmp	r3, r2
 800da76:	d802      	bhi.n	800da7e <SD_PowerON+0xe6>
 800da78:	693b      	ldr	r3, [r7, #16]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d0cc      	beq.n	800da18 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800da84:	4293      	cmp	r3, r2
 800da86:	d902      	bls.n	800da8e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800da88:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800da8c:	e00c      	b.n	800daa8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800da94:	2b00      	cmp	r3, #0
 800da96:	d003      	beq.n	800daa0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2201      	movs	r2, #1
 800da9c:	645a      	str	r2, [r3, #68]	@ 0x44
 800da9e:	e002      	b.n	800daa6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2200      	movs	r2, #0
 800daa4:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800daa6:	2300      	movs	r3, #0
}
 800daa8:	4618      	mov	r0, r3
 800daaa:	3718      	adds	r7, #24
 800daac:	46bd      	mov	sp, r7
 800daae:	bd80      	pop	{r7, pc}
 800dab0:	c1100000 	.word	0xc1100000

0800dab4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b084      	sub	sp, #16
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
 800dabc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d102      	bne.n	800daca <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800dac4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dac8:	e018      	b.n	800dafc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681a      	ldr	r2, [r3, #0]
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dad2:	041b      	lsls	r3, r3, #16
 800dad4:	4619      	mov	r1, r3
 800dad6:	4610      	mov	r0, r2
 800dad8:	f003 fb39 	bl	801114e <SDMMC_CmdSendStatus>
 800dadc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d001      	beq.n	800dae8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	e009      	b.n	800dafc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	2100      	movs	r1, #0
 800daee:	4618      	mov	r0, r3
 800daf0:	f003 f8db 	bl	8010caa <SDMMC_GetResponse>
 800daf4:	4602      	mov	r2, r0
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800dafa:	2300      	movs	r3, #0
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3710      	adds	r7, #16
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}

0800db04 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b086      	sub	sp, #24
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800db0c:	2300      	movs	r3, #0
 800db0e:	60fb      	str	r3, [r7, #12]
 800db10:	2300      	movs	r3, #0
 800db12:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	2100      	movs	r1, #0
 800db1a:	4618      	mov	r0, r3
 800db1c:	f003 f8c5 	bl	8010caa <SDMMC_GetResponse>
 800db20:	4603      	mov	r3, r0
 800db22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800db26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800db2a:	d102      	bne.n	800db32 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800db2c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800db30:	e02f      	b.n	800db92 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800db32:	f107 030c 	add.w	r3, r7, #12
 800db36:	4619      	mov	r1, r3
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f000 f879 	bl	800dc30 <SD_FindSCR>
 800db3e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800db40:	697b      	ldr	r3, [r7, #20]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d001      	beq.n	800db4a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800db46:	697b      	ldr	r3, [r7, #20]
 800db48:	e023      	b.n	800db92 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800db50:	2b00      	cmp	r3, #0
 800db52:	d01c      	beq.n	800db8e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681a      	ldr	r2, [r3, #0]
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db5c:	041b      	lsls	r3, r3, #16
 800db5e:	4619      	mov	r1, r3
 800db60:	4610      	mov	r0, r2
 800db62:	f003 fa0d 	bl	8010f80 <SDMMC_CmdAppCommand>
 800db66:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d001      	beq.n	800db72 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800db6e:	697b      	ldr	r3, [r7, #20]
 800db70:	e00f      	b.n	800db92 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	2102      	movs	r1, #2
 800db78:	4618      	mov	r0, r3
 800db7a:	f003 fa47 	bl	801100c <SDMMC_CmdBusWidth>
 800db7e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d001      	beq.n	800db8a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800db86:	697b      	ldr	r3, [r7, #20]
 800db88:	e003      	b.n	800db92 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800db8a:	2300      	movs	r3, #0
 800db8c:	e001      	b.n	800db92 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800db8e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800db92:	4618      	mov	r0, r3
 800db94:	3718      	adds	r7, #24
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}

0800db9a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800db9a:	b580      	push	{r7, lr}
 800db9c:	b086      	sub	sp, #24
 800db9e:	af00      	add	r7, sp, #0
 800dba0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800dba2:	2300      	movs	r3, #0
 800dba4:	60fb      	str	r3, [r7, #12]
 800dba6:	2300      	movs	r3, #0
 800dba8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	2100      	movs	r1, #0
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f003 f87a 	bl	8010caa <SDMMC_GetResponse>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dbbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dbc0:	d102      	bne.n	800dbc8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dbc2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dbc6:	e02f      	b.n	800dc28 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800dbc8:	f107 030c 	add.w	r3, r7, #12
 800dbcc:	4619      	mov	r1, r3
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f000 f82e 	bl	800dc30 <SD_FindSCR>
 800dbd4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d001      	beq.n	800dbe0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	e023      	b.n	800dc28 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dbe0:	693b      	ldr	r3, [r7, #16]
 800dbe2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d01c      	beq.n	800dc24 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681a      	ldr	r2, [r3, #0]
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dbf2:	041b      	lsls	r3, r3, #16
 800dbf4:	4619      	mov	r1, r3
 800dbf6:	4610      	mov	r0, r2
 800dbf8:	f003 f9c2 	bl	8010f80 <SDMMC_CmdAppCommand>
 800dbfc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dbfe:	697b      	ldr	r3, [r7, #20]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d001      	beq.n	800dc08 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	e00f      	b.n	800dc28 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	2100      	movs	r1, #0
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f003 f9fc 	bl	801100c <SDMMC_CmdBusWidth>
 800dc14:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d001      	beq.n	800dc20 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800dc1c:	697b      	ldr	r3, [r7, #20]
 800dc1e:	e003      	b.n	800dc28 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dc20:	2300      	movs	r3, #0
 800dc22:	e001      	b.n	800dc28 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dc24:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	3718      	adds	r7, #24
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}

0800dc30 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800dc30:	b590      	push	{r4, r7, lr}
 800dc32:	b08f      	sub	sp, #60	@ 0x3c
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
 800dc38:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dc3a:	f7f8 fc1d 	bl	8006478 <HAL_GetTick>
 800dc3e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800dc40:	2300      	movs	r3, #0
 800dc42:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800dc44:	2300      	movs	r3, #0
 800dc46:	60bb      	str	r3, [r7, #8]
 800dc48:	2300      	movs	r3, #0
 800dc4a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	2108      	movs	r1, #8
 800dc56:	4618      	mov	r0, r3
 800dc58:	f003 f866 	bl	8010d28 <SDMMC_CmdBlockLength>
 800dc5c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d001      	beq.n	800dc68 <SD_FindSCR+0x38>
  {
    return errorstate;
 800dc64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc66:	e0b2      	b.n	800ddce <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681a      	ldr	r2, [r3, #0]
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc70:	041b      	lsls	r3, r3, #16
 800dc72:	4619      	mov	r1, r3
 800dc74:	4610      	mov	r0, r2
 800dc76:	f003 f983 	bl	8010f80 <SDMMC_CmdAppCommand>
 800dc7a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d001      	beq.n	800dc86 <SD_FindSCR+0x56>
  {
    return errorstate;
 800dc82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc84:	e0a3      	b.n	800ddce <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dc86:	f04f 33ff 	mov.w	r3, #4294967295
 800dc8a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800dc8c:	2308      	movs	r3, #8
 800dc8e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800dc90:	2330      	movs	r3, #48	@ 0x30
 800dc92:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800dc94:	2302      	movs	r3, #2
 800dc96:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800dc98:	2300      	movs	r3, #0
 800dc9a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	f107 0210 	add.w	r2, r7, #16
 800dca8:	4611      	mov	r1, r2
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f003 f810 	bl	8010cd0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f003 f9cb 	bl	8011050 <SDMMC_CmdSendSCR>
 800dcba:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dcbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d02a      	beq.n	800dd18 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800dcc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcc4:	e083      	b.n	800ddce <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dccc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d00f      	beq.n	800dcf4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	6819      	ldr	r1, [r3, #0]
 800dcd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcda:	009b      	lsls	r3, r3, #2
 800dcdc:	f107 0208 	add.w	r2, r7, #8
 800dce0:	18d4      	adds	r4, r2, r3
 800dce2:	4608      	mov	r0, r1
 800dce4:	f002 ff70 	bl	8010bc8 <SDMMC_ReadFIFO>
 800dce8:	4603      	mov	r3, r0
 800dcea:	6023      	str	r3, [r4, #0]
      index++;
 800dcec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcee:	3301      	adds	r3, #1
 800dcf0:	637b      	str	r3, [r7, #52]	@ 0x34
 800dcf2:	e006      	b.n	800dd02 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d012      	beq.n	800dd28 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800dd02:	f7f8 fbb9 	bl	8006478 <HAL_GetTick>
 800dd06:	4602      	mov	r2, r0
 800dd08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd0a:	1ad3      	subs	r3, r2, r3
 800dd0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd10:	d102      	bne.n	800dd18 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800dd12:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dd16:	e05a      	b.n	800ddce <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd1e:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d0cf      	beq.n	800dcc6 <SD_FindSCR+0x96>
 800dd26:	e000      	b.n	800dd2a <SD_FindSCR+0xfa>
      break;
 800dd28:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd30:	f003 0308 	and.w	r3, r3, #8
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d005      	beq.n	800dd44 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	2208      	movs	r2, #8
 800dd3e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800dd40:	2308      	movs	r3, #8
 800dd42:	e044      	b.n	800ddce <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd4a:	f003 0302 	and.w	r3, r3, #2
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d005      	beq.n	800dd5e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	2202      	movs	r2, #2
 800dd58:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800dd5a:	2302      	movs	r3, #2
 800dd5c:	e037      	b.n	800ddce <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd64:	f003 0320 	and.w	r3, r3, #32
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d005      	beq.n	800dd78 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	2220      	movs	r2, #32
 800dd72:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800dd74:	2320      	movs	r3, #32
 800dd76:	e02a      	b.n	800ddce <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f240 523a 	movw	r2, #1338	@ 0x53a
 800dd80:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	061a      	lsls	r2, r3, #24
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	021b      	lsls	r3, r3, #8
 800dd8a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dd8e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	0a1b      	lsrs	r3, r3, #8
 800dd94:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dd98:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	0e1b      	lsrs	r3, r3, #24
 800dd9e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dda0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dda2:	601a      	str	r2, [r3, #0]
    scr++;
 800dda4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dda6:	3304      	adds	r3, #4
 800dda8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	061a      	lsls	r2, r3, #24
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	021b      	lsls	r3, r3, #8
 800ddb2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ddb6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	0a1b      	lsrs	r3, r3, #8
 800ddbc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ddc0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ddc2:	68bb      	ldr	r3, [r7, #8]
 800ddc4:	0e1b      	lsrs	r3, r3, #24
 800ddc6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ddc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddca:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ddcc:	2300      	movs	r3, #0
}
 800ddce:	4618      	mov	r0, r3
 800ddd0:	373c      	adds	r7, #60	@ 0x3c
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd90      	pop	{r4, r7, pc}

0800ddd6 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800ddd6:	b580      	push	{r7, lr}
 800ddd8:	b082      	sub	sp, #8
 800ddda:	af00      	add	r7, sp, #0
 800dddc:	6078      	str	r0, [r7, #4]
 800ddde:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d101      	bne.n	800ddea <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800dde6:	2301      	movs	r3, #1
 800dde8:	e025      	b.n	800de36 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ddf0:	b2db      	uxtb	r3, r3
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d106      	bne.n	800de04 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f7f7 fa82 	bl	8005308 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2202      	movs	r2, #2
 800de08:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681a      	ldr	r2, [r3, #0]
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	3304      	adds	r3, #4
 800de14:	4619      	mov	r1, r3
 800de16:	4610      	mov	r0, r2
 800de18:	f002 fde4 	bl	80109e4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	6818      	ldr	r0, [r3, #0]
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	685b      	ldr	r3, [r3, #4]
 800de24:	461a      	mov	r2, r3
 800de26:	6839      	ldr	r1, [r7, #0]
 800de28:	f002 fe38 	bl	8010a9c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2201      	movs	r2, #1
 800de30:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800de34:	2300      	movs	r3, #0
}
 800de36:	4618      	mov	r0, r3
 800de38:	3708      	adds	r7, #8
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bd80      	pop	{r7, pc}
	...

0800de40 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b084      	sub	sp, #16
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d101      	bne.n	800de52 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800de4e:	2301      	movs	r3, #1
 800de50:	e04c      	b.n	800deec <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800de58:	b2db      	uxtb	r3, r3
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d106      	bne.n	800de6c <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2200      	movs	r2, #0
 800de62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f7f6 fed4 	bl	8004c14 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2202      	movs	r2, #2
 800de70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	681a      	ldr	r2, [r3, #0]
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	f022 0203 	bic.w	r2, r2, #3
 800de82:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800de8c:	68fa      	ldr	r2, [r7, #12]
 800de8e:	4b19      	ldr	r3, [pc, #100]	@ (800def4 <HAL_SPDIFRX_Init+0xb4>)
 800de90:	4013      	ands	r3, r2
 800de92:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800de9c:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800dea2:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800dea8:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800deae:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800deb4:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800deba:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800dec0:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800dec6:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800decc:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800dece:	68fa      	ldr	r2, [r7, #12]
 800ded0:	4313      	orrs	r3, r2
 800ded2:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	68fa      	ldr	r2, [r7, #12]
 800deda:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2200      	movs	r2, #0
 800dee0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2201      	movs	r2, #1
 800dee6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800deea:	2300      	movs	r3, #0
}
 800deec:	4618      	mov	r0, r3
 800deee:	3710      	adds	r7, #16
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}
 800def4:	fff88407 	.word	0xfff88407

0800def8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b084      	sub	sp, #16
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d101      	bne.n	800df0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800df06:	2301      	movs	r3, #1
 800df08:	e09d      	b.n	800e046 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d108      	bne.n	800df24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	685b      	ldr	r3, [r3, #4]
 800df16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800df1a:	d009      	beq.n	800df30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2200      	movs	r2, #0
 800df20:	61da      	str	r2, [r3, #28]
 800df22:	e005      	b.n	800df30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2200      	movs	r2, #0
 800df28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2200      	movs	r2, #0
 800df2e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2200      	movs	r2, #0
 800df34:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800df3c:	b2db      	uxtb	r3, r3
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d106      	bne.n	800df50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2200      	movs	r2, #0
 800df46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	f7f6 fec6 	bl	8004cdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2202      	movs	r2, #2
 800df54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	681a      	ldr	r2, [r3, #0]
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800df66:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	68db      	ldr	r3, [r3, #12]
 800df6c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800df70:	d902      	bls.n	800df78 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800df72:	2300      	movs	r3, #0
 800df74:	60fb      	str	r3, [r7, #12]
 800df76:	e002      	b.n	800df7e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800df78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800df7c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	68db      	ldr	r3, [r3, #12]
 800df82:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800df86:	d007      	beq.n	800df98 <HAL_SPI_Init+0xa0>
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	68db      	ldr	r3, [r3, #12]
 800df8c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800df90:	d002      	beq.n	800df98 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	2200      	movs	r2, #0
 800df96:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	685b      	ldr	r3, [r3, #4]
 800df9c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	689b      	ldr	r3, [r3, #8]
 800dfa4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800dfa8:	431a      	orrs	r2, r3
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	691b      	ldr	r3, [r3, #16]
 800dfae:	f003 0302 	and.w	r3, r3, #2
 800dfb2:	431a      	orrs	r2, r3
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	695b      	ldr	r3, [r3, #20]
 800dfb8:	f003 0301 	and.w	r3, r3, #1
 800dfbc:	431a      	orrs	r2, r3
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	699b      	ldr	r3, [r3, #24]
 800dfc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800dfc6:	431a      	orrs	r2, r3
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	69db      	ldr	r3, [r3, #28]
 800dfcc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dfd0:	431a      	orrs	r2, r3
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6a1b      	ldr	r3, [r3, #32]
 800dfd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dfda:	ea42 0103 	orr.w	r1, r2, r3
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfe2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	430a      	orrs	r2, r1
 800dfec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	699b      	ldr	r3, [r3, #24]
 800dff2:	0c1b      	lsrs	r3, r3, #16
 800dff4:	f003 0204 	and.w	r2, r3, #4
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dffc:	f003 0310 	and.w	r3, r3, #16
 800e000:	431a      	orrs	r2, r3
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e006:	f003 0308 	and.w	r3, r3, #8
 800e00a:	431a      	orrs	r2, r3
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	68db      	ldr	r3, [r3, #12]
 800e010:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800e014:	ea42 0103 	orr.w	r1, r2, r3
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	430a      	orrs	r2, r1
 800e024:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	69da      	ldr	r2, [r3, #28]
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e034:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	2200      	movs	r2, #0
 800e03a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2201      	movs	r2, #1
 800e040:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800e044:	2300      	movs	r3, #0
}
 800e046:	4618      	mov	r0, r3
 800e048:	3710      	adds	r7, #16
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}

0800e04e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e04e:	b580      	push	{r7, lr}
 800e050:	b082      	sub	sp, #8
 800e052:	af00      	add	r7, sp, #0
 800e054:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d101      	bne.n	800e060 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e05c:	2301      	movs	r3, #1
 800e05e:	e049      	b.n	800e0f4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e066:	b2db      	uxtb	r3, r3
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d106      	bne.n	800e07a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2200      	movs	r2, #0
 800e070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f7f6 fe93 	bl	8004da0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2202      	movs	r2, #2
 800e07e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681a      	ldr	r2, [r3, #0]
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	3304      	adds	r3, #4
 800e08a:	4619      	mov	r1, r3
 800e08c:	4610      	mov	r0, r2
 800e08e:	f000 fc11 	bl	800e8b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2201      	movs	r2, #1
 800e096:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2201      	movs	r2, #1
 800e09e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	2201      	movs	r2, #1
 800e0a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	2201      	movs	r2, #1
 800e0ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	2201      	movs	r2, #1
 800e0b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	2201      	movs	r2, #1
 800e0be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	2201      	movs	r2, #1
 800e0c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	2201      	movs	r2, #1
 800e0ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2201      	movs	r2, #1
 800e0d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2201      	movs	r2, #1
 800e0de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2201      	movs	r2, #1
 800e0e6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2201      	movs	r2, #1
 800e0ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e0f2:	2300      	movs	r3, #0
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3708      	adds	r7, #8
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b085      	sub	sp, #20
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e10a:	b2db      	uxtb	r3, r3
 800e10c:	2b01      	cmp	r3, #1
 800e10e:	d001      	beq.n	800e114 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e110:	2301      	movs	r3, #1
 800e112:	e054      	b.n	800e1be <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2202      	movs	r2, #2
 800e118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	68da      	ldr	r2, [r3, #12]
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	f042 0201 	orr.w	r2, r2, #1
 800e12a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	4a26      	ldr	r2, [pc, #152]	@ (800e1cc <HAL_TIM_Base_Start_IT+0xd0>)
 800e132:	4293      	cmp	r3, r2
 800e134:	d022      	beq.n	800e17c <HAL_TIM_Base_Start_IT+0x80>
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e13e:	d01d      	beq.n	800e17c <HAL_TIM_Base_Start_IT+0x80>
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	4a22      	ldr	r2, [pc, #136]	@ (800e1d0 <HAL_TIM_Base_Start_IT+0xd4>)
 800e146:	4293      	cmp	r3, r2
 800e148:	d018      	beq.n	800e17c <HAL_TIM_Base_Start_IT+0x80>
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	4a21      	ldr	r2, [pc, #132]	@ (800e1d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800e150:	4293      	cmp	r3, r2
 800e152:	d013      	beq.n	800e17c <HAL_TIM_Base_Start_IT+0x80>
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	4a1f      	ldr	r2, [pc, #124]	@ (800e1d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800e15a:	4293      	cmp	r3, r2
 800e15c:	d00e      	beq.n	800e17c <HAL_TIM_Base_Start_IT+0x80>
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	4a1e      	ldr	r2, [pc, #120]	@ (800e1dc <HAL_TIM_Base_Start_IT+0xe0>)
 800e164:	4293      	cmp	r3, r2
 800e166:	d009      	beq.n	800e17c <HAL_TIM_Base_Start_IT+0x80>
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	4a1c      	ldr	r2, [pc, #112]	@ (800e1e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800e16e:	4293      	cmp	r3, r2
 800e170:	d004      	beq.n	800e17c <HAL_TIM_Base_Start_IT+0x80>
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	4a1b      	ldr	r2, [pc, #108]	@ (800e1e4 <HAL_TIM_Base_Start_IT+0xe8>)
 800e178:	4293      	cmp	r3, r2
 800e17a:	d115      	bne.n	800e1a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	689a      	ldr	r2, [r3, #8]
 800e182:	4b19      	ldr	r3, [pc, #100]	@ (800e1e8 <HAL_TIM_Base_Start_IT+0xec>)
 800e184:	4013      	ands	r3, r2
 800e186:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	2b06      	cmp	r3, #6
 800e18c:	d015      	beq.n	800e1ba <HAL_TIM_Base_Start_IT+0xbe>
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e194:	d011      	beq.n	800e1ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	681a      	ldr	r2, [r3, #0]
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	f042 0201 	orr.w	r2, r2, #1
 800e1a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1a6:	e008      	b.n	800e1ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	681a      	ldr	r2, [r3, #0]
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	f042 0201 	orr.w	r2, r2, #1
 800e1b6:	601a      	str	r2, [r3, #0]
 800e1b8:	e000      	b.n	800e1bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e1bc:	2300      	movs	r3, #0
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3714      	adds	r7, #20
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c8:	4770      	bx	lr
 800e1ca:	bf00      	nop
 800e1cc:	40010000 	.word	0x40010000
 800e1d0:	40000400 	.word	0x40000400
 800e1d4:	40000800 	.word	0x40000800
 800e1d8:	40000c00 	.word	0x40000c00
 800e1dc:	40010400 	.word	0x40010400
 800e1e0:	40014000 	.word	0x40014000
 800e1e4:	40001800 	.word	0x40001800
 800e1e8:	00010007 	.word	0x00010007

0800e1ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b082      	sub	sp, #8
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d101      	bne.n	800e1fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	e049      	b.n	800e292 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e204:	b2db      	uxtb	r3, r3
 800e206:	2b00      	cmp	r3, #0
 800e208:	d106      	bne.n	800e218 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	2200      	movs	r2, #0
 800e20e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f7f6 fe32 	bl	8004e7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2202      	movs	r2, #2
 800e21c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681a      	ldr	r2, [r3, #0]
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	3304      	adds	r3, #4
 800e228:	4619      	mov	r1, r3
 800e22a:	4610      	mov	r0, r2
 800e22c:	f000 fb42 	bl	800e8b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2201      	movs	r2, #1
 800e234:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2201      	movs	r2, #1
 800e23c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2201      	movs	r2, #1
 800e244:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2201      	movs	r2, #1
 800e24c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2201      	movs	r2, #1
 800e254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2201      	movs	r2, #1
 800e25c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2201      	movs	r2, #1
 800e264:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2201      	movs	r2, #1
 800e26c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2201      	movs	r2, #1
 800e274:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	2201      	movs	r2, #1
 800e27c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	2201      	movs	r2, #1
 800e284:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2201      	movs	r2, #1
 800e28c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e290:	2300      	movs	r3, #0
}
 800e292:	4618      	mov	r0, r3
 800e294:	3708      	adds	r7, #8
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}

0800e29a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e29a:	b580      	push	{r7, lr}
 800e29c:	b084      	sub	sp, #16
 800e29e:	af00      	add	r7, sp, #0
 800e2a0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	68db      	ldr	r3, [r3, #12]
 800e2a8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	691b      	ldr	r3, [r3, #16]
 800e2b0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e2b2:	68bb      	ldr	r3, [r7, #8]
 800e2b4:	f003 0302 	and.w	r3, r3, #2
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d020      	beq.n	800e2fe <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	f003 0302 	and.w	r3, r3, #2
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d01b      	beq.n	800e2fe <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	f06f 0202 	mvn.w	r2, #2
 800e2ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2201      	movs	r2, #1
 800e2d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	699b      	ldr	r3, [r3, #24]
 800e2dc:	f003 0303 	and.w	r3, r3, #3
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d003      	beq.n	800e2ec <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e2e4:	6878      	ldr	r0, [r7, #4]
 800e2e6:	f000 fac7 	bl	800e878 <HAL_TIM_IC_CaptureCallback>
 800e2ea:	e005      	b.n	800e2f8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e2ec:	6878      	ldr	r0, [r7, #4]
 800e2ee:	f000 fab9 	bl	800e864 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e2f2:	6878      	ldr	r0, [r7, #4]
 800e2f4:	f000 faca 	bl	800e88c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	f003 0304 	and.w	r3, r3, #4
 800e304:	2b00      	cmp	r3, #0
 800e306:	d020      	beq.n	800e34a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	f003 0304 	and.w	r3, r3, #4
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d01b      	beq.n	800e34a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	f06f 0204 	mvn.w	r2, #4
 800e31a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2202      	movs	r2, #2
 800e320:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	699b      	ldr	r3, [r3, #24]
 800e328:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d003      	beq.n	800e338 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f000 faa1 	bl	800e878 <HAL_TIM_IC_CaptureCallback>
 800e336:	e005      	b.n	800e344 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e338:	6878      	ldr	r0, [r7, #4]
 800e33a:	f000 fa93 	bl	800e864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f000 faa4 	bl	800e88c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2200      	movs	r2, #0
 800e348:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e34a:	68bb      	ldr	r3, [r7, #8]
 800e34c:	f003 0308 	and.w	r3, r3, #8
 800e350:	2b00      	cmp	r3, #0
 800e352:	d020      	beq.n	800e396 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	f003 0308 	and.w	r3, r3, #8
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d01b      	beq.n	800e396 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	f06f 0208 	mvn.w	r2, #8
 800e366:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2204      	movs	r2, #4
 800e36c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	69db      	ldr	r3, [r3, #28]
 800e374:	f003 0303 	and.w	r3, r3, #3
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d003      	beq.n	800e384 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	f000 fa7b 	bl	800e878 <HAL_TIM_IC_CaptureCallback>
 800e382:	e005      	b.n	800e390 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e384:	6878      	ldr	r0, [r7, #4]
 800e386:	f000 fa6d 	bl	800e864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f000 fa7e 	bl	800e88c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2200      	movs	r2, #0
 800e394:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e396:	68bb      	ldr	r3, [r7, #8]
 800e398:	f003 0310 	and.w	r3, r3, #16
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d020      	beq.n	800e3e2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	f003 0310 	and.w	r3, r3, #16
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d01b      	beq.n	800e3e2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	f06f 0210 	mvn.w	r2, #16
 800e3b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2208      	movs	r2, #8
 800e3b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	69db      	ldr	r3, [r3, #28]
 800e3c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d003      	beq.n	800e3d0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e3c8:	6878      	ldr	r0, [r7, #4]
 800e3ca:	f000 fa55 	bl	800e878 <HAL_TIM_IC_CaptureCallback>
 800e3ce:	e005      	b.n	800e3dc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e3d0:	6878      	ldr	r0, [r7, #4]
 800e3d2:	f000 fa47 	bl	800e864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f000 fa58 	bl	800e88c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	2200      	movs	r2, #0
 800e3e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e3e2:	68bb      	ldr	r3, [r7, #8]
 800e3e4:	f003 0301 	and.w	r3, r3, #1
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d00c      	beq.n	800e406 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	f003 0301 	and.w	r3, r3, #1
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d007      	beq.n	800e406 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	f06f 0201 	mvn.w	r2, #1
 800e3fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f7f5 fed5 	bl	80041b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e406:	68bb      	ldr	r3, [r7, #8]
 800e408:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d104      	bne.n	800e41a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e410:	68bb      	ldr	r3, [r7, #8]
 800e412:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e416:	2b00      	cmp	r3, #0
 800e418:	d00c      	beq.n	800e434 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e420:	2b00      	cmp	r3, #0
 800e422:	d007      	beq.n	800e434 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e42c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	f000 fef4 	bl	800f21c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e434:	68bb      	ldr	r3, [r7, #8]
 800e436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d00c      	beq.n	800e458 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e444:	2b00      	cmp	r3, #0
 800e446:	d007      	beq.n	800e458 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f000 feec 	bl	800f230 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e458:	68bb      	ldr	r3, [r7, #8]
 800e45a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d00c      	beq.n	800e47c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d007      	beq.n	800e47c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f000 fa12 	bl	800e8a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e47c:	68bb      	ldr	r3, [r7, #8]
 800e47e:	f003 0320 	and.w	r3, r3, #32
 800e482:	2b00      	cmp	r3, #0
 800e484:	d00c      	beq.n	800e4a0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	f003 0320 	and.w	r3, r3, #32
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d007      	beq.n	800e4a0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	f06f 0220 	mvn.w	r2, #32
 800e498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e49a:	6878      	ldr	r0, [r7, #4]
 800e49c:	f000 feb4 	bl	800f208 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e4a0:	bf00      	nop
 800e4a2:	3710      	adds	r7, #16
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	bd80      	pop	{r7, pc}

0800e4a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b086      	sub	sp, #24
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	60f8      	str	r0, [r7, #12]
 800e4b0:	60b9      	str	r1, [r7, #8]
 800e4b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e4be:	2b01      	cmp	r3, #1
 800e4c0:	d101      	bne.n	800e4c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e4c2:	2302      	movs	r3, #2
 800e4c4:	e0ff      	b.n	800e6c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	2201      	movs	r2, #1
 800e4ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2b14      	cmp	r3, #20
 800e4d2:	f200 80f0 	bhi.w	800e6b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e4d6:	a201      	add	r2, pc, #4	@ (adr r2, 800e4dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4dc:	0800e531 	.word	0x0800e531
 800e4e0:	0800e6b7 	.word	0x0800e6b7
 800e4e4:	0800e6b7 	.word	0x0800e6b7
 800e4e8:	0800e6b7 	.word	0x0800e6b7
 800e4ec:	0800e571 	.word	0x0800e571
 800e4f0:	0800e6b7 	.word	0x0800e6b7
 800e4f4:	0800e6b7 	.word	0x0800e6b7
 800e4f8:	0800e6b7 	.word	0x0800e6b7
 800e4fc:	0800e5b3 	.word	0x0800e5b3
 800e500:	0800e6b7 	.word	0x0800e6b7
 800e504:	0800e6b7 	.word	0x0800e6b7
 800e508:	0800e6b7 	.word	0x0800e6b7
 800e50c:	0800e5f3 	.word	0x0800e5f3
 800e510:	0800e6b7 	.word	0x0800e6b7
 800e514:	0800e6b7 	.word	0x0800e6b7
 800e518:	0800e6b7 	.word	0x0800e6b7
 800e51c:	0800e635 	.word	0x0800e635
 800e520:	0800e6b7 	.word	0x0800e6b7
 800e524:	0800e6b7 	.word	0x0800e6b7
 800e528:	0800e6b7 	.word	0x0800e6b7
 800e52c:	0800e675 	.word	0x0800e675
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	68b9      	ldr	r1, [r7, #8]
 800e536:	4618      	mov	r0, r3
 800e538:	f000 fa62 	bl	800ea00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	699a      	ldr	r2, [r3, #24]
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	f042 0208 	orr.w	r2, r2, #8
 800e54a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	699a      	ldr	r2, [r3, #24]
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	f022 0204 	bic.w	r2, r2, #4
 800e55a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	6999      	ldr	r1, [r3, #24]
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	691a      	ldr	r2, [r3, #16]
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	430a      	orrs	r2, r1
 800e56c:	619a      	str	r2, [r3, #24]
      break;
 800e56e:	e0a5      	b.n	800e6bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	68b9      	ldr	r1, [r7, #8]
 800e576:	4618      	mov	r0, r3
 800e578:	f000 fab4 	bl	800eae4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	699a      	ldr	r2, [r3, #24]
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e58a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	699a      	ldr	r2, [r3, #24]
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e59a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	6999      	ldr	r1, [r3, #24]
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	691b      	ldr	r3, [r3, #16]
 800e5a6:	021a      	lsls	r2, r3, #8
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	430a      	orrs	r2, r1
 800e5ae:	619a      	str	r2, [r3, #24]
      break;
 800e5b0:	e084      	b.n	800e6bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	68b9      	ldr	r1, [r7, #8]
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f000 fb0b 	bl	800ebd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	69da      	ldr	r2, [r3, #28]
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	f042 0208 	orr.w	r2, r2, #8
 800e5cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	69da      	ldr	r2, [r3, #28]
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	f022 0204 	bic.w	r2, r2, #4
 800e5dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	69d9      	ldr	r1, [r3, #28]
 800e5e4:	68bb      	ldr	r3, [r7, #8]
 800e5e6:	691a      	ldr	r2, [r3, #16]
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	430a      	orrs	r2, r1
 800e5ee:	61da      	str	r2, [r3, #28]
      break;
 800e5f0:	e064      	b.n	800e6bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	68b9      	ldr	r1, [r7, #8]
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	f000 fb61 	bl	800ecc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	69da      	ldr	r2, [r3, #28]
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e60c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	69da      	ldr	r2, [r3, #28]
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e61c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	69d9      	ldr	r1, [r3, #28]
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	691b      	ldr	r3, [r3, #16]
 800e628:	021a      	lsls	r2, r3, #8
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	430a      	orrs	r2, r1
 800e630:	61da      	str	r2, [r3, #28]
      break;
 800e632:	e043      	b.n	800e6bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	68b9      	ldr	r1, [r7, #8]
 800e63a:	4618      	mov	r0, r3
 800e63c:	f000 fb98 	bl	800ed70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	f042 0208 	orr.w	r2, r2, #8
 800e64e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	f022 0204 	bic.w	r2, r2, #4
 800e65e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	691a      	ldr	r2, [r3, #16]
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	430a      	orrs	r2, r1
 800e670:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e672:	e023      	b.n	800e6bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	68b9      	ldr	r1, [r7, #8]
 800e67a:	4618      	mov	r0, r3
 800e67c:	f000 fbca 	bl	800ee14 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e68e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e69e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e6a6:	68bb      	ldr	r3, [r7, #8]
 800e6a8:	691b      	ldr	r3, [r3, #16]
 800e6aa:	021a      	lsls	r2, r3, #8
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	430a      	orrs	r2, r1
 800e6b2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e6b4:	e002      	b.n	800e6bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	75fb      	strb	r3, [r7, #23]
      break;
 800e6ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	2200      	movs	r2, #0
 800e6c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e6c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	3718      	adds	r7, #24
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}
 800e6ce:	bf00      	nop

0800e6d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b084      	sub	sp, #16
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
 800e6d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e6da:	2300      	movs	r3, #0
 800e6dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e6e4:	2b01      	cmp	r3, #1
 800e6e6:	d101      	bne.n	800e6ec <HAL_TIM_ConfigClockSource+0x1c>
 800e6e8:	2302      	movs	r3, #2
 800e6ea:	e0b4      	b.n	800e856 <HAL_TIM_ConfigClockSource+0x186>
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2201      	movs	r2, #1
 800e6f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2202      	movs	r2, #2
 800e6f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	689b      	ldr	r3, [r3, #8]
 800e702:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e704:	68ba      	ldr	r2, [r7, #8]
 800e706:	4b56      	ldr	r3, [pc, #344]	@ (800e860 <HAL_TIM_ConfigClockSource+0x190>)
 800e708:	4013      	ands	r3, r2
 800e70a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e712:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	68ba      	ldr	r2, [r7, #8]
 800e71a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e724:	d03e      	beq.n	800e7a4 <HAL_TIM_ConfigClockSource+0xd4>
 800e726:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e72a:	f200 8087 	bhi.w	800e83c <HAL_TIM_ConfigClockSource+0x16c>
 800e72e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e732:	f000 8086 	beq.w	800e842 <HAL_TIM_ConfigClockSource+0x172>
 800e736:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e73a:	d87f      	bhi.n	800e83c <HAL_TIM_ConfigClockSource+0x16c>
 800e73c:	2b70      	cmp	r3, #112	@ 0x70
 800e73e:	d01a      	beq.n	800e776 <HAL_TIM_ConfigClockSource+0xa6>
 800e740:	2b70      	cmp	r3, #112	@ 0x70
 800e742:	d87b      	bhi.n	800e83c <HAL_TIM_ConfigClockSource+0x16c>
 800e744:	2b60      	cmp	r3, #96	@ 0x60
 800e746:	d050      	beq.n	800e7ea <HAL_TIM_ConfigClockSource+0x11a>
 800e748:	2b60      	cmp	r3, #96	@ 0x60
 800e74a:	d877      	bhi.n	800e83c <HAL_TIM_ConfigClockSource+0x16c>
 800e74c:	2b50      	cmp	r3, #80	@ 0x50
 800e74e:	d03c      	beq.n	800e7ca <HAL_TIM_ConfigClockSource+0xfa>
 800e750:	2b50      	cmp	r3, #80	@ 0x50
 800e752:	d873      	bhi.n	800e83c <HAL_TIM_ConfigClockSource+0x16c>
 800e754:	2b40      	cmp	r3, #64	@ 0x40
 800e756:	d058      	beq.n	800e80a <HAL_TIM_ConfigClockSource+0x13a>
 800e758:	2b40      	cmp	r3, #64	@ 0x40
 800e75a:	d86f      	bhi.n	800e83c <HAL_TIM_ConfigClockSource+0x16c>
 800e75c:	2b30      	cmp	r3, #48	@ 0x30
 800e75e:	d064      	beq.n	800e82a <HAL_TIM_ConfigClockSource+0x15a>
 800e760:	2b30      	cmp	r3, #48	@ 0x30
 800e762:	d86b      	bhi.n	800e83c <HAL_TIM_ConfigClockSource+0x16c>
 800e764:	2b20      	cmp	r3, #32
 800e766:	d060      	beq.n	800e82a <HAL_TIM_ConfigClockSource+0x15a>
 800e768:	2b20      	cmp	r3, #32
 800e76a:	d867      	bhi.n	800e83c <HAL_TIM_ConfigClockSource+0x16c>
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d05c      	beq.n	800e82a <HAL_TIM_ConfigClockSource+0x15a>
 800e770:	2b10      	cmp	r3, #16
 800e772:	d05a      	beq.n	800e82a <HAL_TIM_ConfigClockSource+0x15a>
 800e774:	e062      	b.n	800e83c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e786:	f000 fc13 	bl	800efb0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	689b      	ldr	r3, [r3, #8]
 800e790:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e798:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	68ba      	ldr	r2, [r7, #8]
 800e7a0:	609a      	str	r2, [r3, #8]
      break;
 800e7a2:	e04f      	b.n	800e844 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e7b4:	f000 fbfc 	bl	800efb0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	689a      	ldr	r2, [r3, #8]
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e7c6:	609a      	str	r2, [r3, #8]
      break;
 800e7c8:	e03c      	b.n	800e844 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e7d6:	461a      	mov	r2, r3
 800e7d8:	f000 fb70 	bl	800eebc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	2150      	movs	r1, #80	@ 0x50
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f000 fbc9 	bl	800ef7a <TIM_ITRx_SetConfig>
      break;
 800e7e8:	e02c      	b.n	800e844 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e7f6:	461a      	mov	r2, r3
 800e7f8:	f000 fb8f 	bl	800ef1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	2160      	movs	r1, #96	@ 0x60
 800e802:	4618      	mov	r0, r3
 800e804:	f000 fbb9 	bl	800ef7a <TIM_ITRx_SetConfig>
      break;
 800e808:	e01c      	b.n	800e844 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e812:	683b      	ldr	r3, [r7, #0]
 800e814:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e816:	461a      	mov	r2, r3
 800e818:	f000 fb50 	bl	800eebc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	2140      	movs	r1, #64	@ 0x40
 800e822:	4618      	mov	r0, r3
 800e824:	f000 fba9 	bl	800ef7a <TIM_ITRx_SetConfig>
      break;
 800e828:	e00c      	b.n	800e844 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681a      	ldr	r2, [r3, #0]
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	4619      	mov	r1, r3
 800e834:	4610      	mov	r0, r2
 800e836:	f000 fba0 	bl	800ef7a <TIM_ITRx_SetConfig>
      break;
 800e83a:	e003      	b.n	800e844 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800e83c:	2301      	movs	r3, #1
 800e83e:	73fb      	strb	r3, [r7, #15]
      break;
 800e840:	e000      	b.n	800e844 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800e842:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2201      	movs	r2, #1
 800e848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2200      	movs	r2, #0
 800e850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e854:	7bfb      	ldrb	r3, [r7, #15]
}
 800e856:	4618      	mov	r0, r3
 800e858:	3710      	adds	r7, #16
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}
 800e85e:	bf00      	nop
 800e860:	fffeff88 	.word	0xfffeff88

0800e864 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e864:	b480      	push	{r7}
 800e866:	b083      	sub	sp, #12
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e86c:	bf00      	nop
 800e86e:	370c      	adds	r7, #12
 800e870:	46bd      	mov	sp, r7
 800e872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e876:	4770      	bx	lr

0800e878 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e878:	b480      	push	{r7}
 800e87a:	b083      	sub	sp, #12
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e880:	bf00      	nop
 800e882:	370c      	adds	r7, #12
 800e884:	46bd      	mov	sp, r7
 800e886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88a:	4770      	bx	lr

0800e88c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e88c:	b480      	push	{r7}
 800e88e:	b083      	sub	sp, #12
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e894:	bf00      	nop
 800e896:	370c      	adds	r7, #12
 800e898:	46bd      	mov	sp, r7
 800e89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89e:	4770      	bx	lr

0800e8a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e8a0:	b480      	push	{r7}
 800e8a2:	b083      	sub	sp, #12
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e8a8:	bf00      	nop
 800e8aa:	370c      	adds	r7, #12
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b2:	4770      	bx	lr

0800e8b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e8b4:	b480      	push	{r7}
 800e8b6:	b085      	sub	sp, #20
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
 800e8bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	4a43      	ldr	r2, [pc, #268]	@ (800e9d4 <TIM_Base_SetConfig+0x120>)
 800e8c8:	4293      	cmp	r3, r2
 800e8ca:	d013      	beq.n	800e8f4 <TIM_Base_SetConfig+0x40>
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e8d2:	d00f      	beq.n	800e8f4 <TIM_Base_SetConfig+0x40>
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	4a40      	ldr	r2, [pc, #256]	@ (800e9d8 <TIM_Base_SetConfig+0x124>)
 800e8d8:	4293      	cmp	r3, r2
 800e8da:	d00b      	beq.n	800e8f4 <TIM_Base_SetConfig+0x40>
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	4a3f      	ldr	r2, [pc, #252]	@ (800e9dc <TIM_Base_SetConfig+0x128>)
 800e8e0:	4293      	cmp	r3, r2
 800e8e2:	d007      	beq.n	800e8f4 <TIM_Base_SetConfig+0x40>
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	4a3e      	ldr	r2, [pc, #248]	@ (800e9e0 <TIM_Base_SetConfig+0x12c>)
 800e8e8:	4293      	cmp	r3, r2
 800e8ea:	d003      	beq.n	800e8f4 <TIM_Base_SetConfig+0x40>
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	4a3d      	ldr	r2, [pc, #244]	@ (800e9e4 <TIM_Base_SetConfig+0x130>)
 800e8f0:	4293      	cmp	r3, r2
 800e8f2:	d108      	bne.n	800e906 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e8fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	685b      	ldr	r3, [r3, #4]
 800e900:	68fa      	ldr	r2, [r7, #12]
 800e902:	4313      	orrs	r3, r2
 800e904:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	4a32      	ldr	r2, [pc, #200]	@ (800e9d4 <TIM_Base_SetConfig+0x120>)
 800e90a:	4293      	cmp	r3, r2
 800e90c:	d02b      	beq.n	800e966 <TIM_Base_SetConfig+0xb2>
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e914:	d027      	beq.n	800e966 <TIM_Base_SetConfig+0xb2>
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	4a2f      	ldr	r2, [pc, #188]	@ (800e9d8 <TIM_Base_SetConfig+0x124>)
 800e91a:	4293      	cmp	r3, r2
 800e91c:	d023      	beq.n	800e966 <TIM_Base_SetConfig+0xb2>
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	4a2e      	ldr	r2, [pc, #184]	@ (800e9dc <TIM_Base_SetConfig+0x128>)
 800e922:	4293      	cmp	r3, r2
 800e924:	d01f      	beq.n	800e966 <TIM_Base_SetConfig+0xb2>
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	4a2d      	ldr	r2, [pc, #180]	@ (800e9e0 <TIM_Base_SetConfig+0x12c>)
 800e92a:	4293      	cmp	r3, r2
 800e92c:	d01b      	beq.n	800e966 <TIM_Base_SetConfig+0xb2>
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	4a2c      	ldr	r2, [pc, #176]	@ (800e9e4 <TIM_Base_SetConfig+0x130>)
 800e932:	4293      	cmp	r3, r2
 800e934:	d017      	beq.n	800e966 <TIM_Base_SetConfig+0xb2>
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	4a2b      	ldr	r2, [pc, #172]	@ (800e9e8 <TIM_Base_SetConfig+0x134>)
 800e93a:	4293      	cmp	r3, r2
 800e93c:	d013      	beq.n	800e966 <TIM_Base_SetConfig+0xb2>
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	4a2a      	ldr	r2, [pc, #168]	@ (800e9ec <TIM_Base_SetConfig+0x138>)
 800e942:	4293      	cmp	r3, r2
 800e944:	d00f      	beq.n	800e966 <TIM_Base_SetConfig+0xb2>
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	4a29      	ldr	r2, [pc, #164]	@ (800e9f0 <TIM_Base_SetConfig+0x13c>)
 800e94a:	4293      	cmp	r3, r2
 800e94c:	d00b      	beq.n	800e966 <TIM_Base_SetConfig+0xb2>
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	4a28      	ldr	r2, [pc, #160]	@ (800e9f4 <TIM_Base_SetConfig+0x140>)
 800e952:	4293      	cmp	r3, r2
 800e954:	d007      	beq.n	800e966 <TIM_Base_SetConfig+0xb2>
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	4a27      	ldr	r2, [pc, #156]	@ (800e9f8 <TIM_Base_SetConfig+0x144>)
 800e95a:	4293      	cmp	r3, r2
 800e95c:	d003      	beq.n	800e966 <TIM_Base_SetConfig+0xb2>
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	4a26      	ldr	r2, [pc, #152]	@ (800e9fc <TIM_Base_SetConfig+0x148>)
 800e962:	4293      	cmp	r3, r2
 800e964:	d108      	bne.n	800e978 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e96c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	68db      	ldr	r3, [r3, #12]
 800e972:	68fa      	ldr	r2, [r7, #12]
 800e974:	4313      	orrs	r3, r2
 800e976:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	695b      	ldr	r3, [r3, #20]
 800e982:	4313      	orrs	r3, r2
 800e984:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	689a      	ldr	r2, [r3, #8]
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	681a      	ldr	r2, [r3, #0]
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	4a0e      	ldr	r2, [pc, #56]	@ (800e9d4 <TIM_Base_SetConfig+0x120>)
 800e99a:	4293      	cmp	r3, r2
 800e99c:	d003      	beq.n	800e9a6 <TIM_Base_SetConfig+0xf2>
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	4a10      	ldr	r2, [pc, #64]	@ (800e9e4 <TIM_Base_SetConfig+0x130>)
 800e9a2:	4293      	cmp	r3, r2
 800e9a4:	d103      	bne.n	800e9ae <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	691a      	ldr	r2, [r3, #16]
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	f043 0204 	orr.w	r2, r3, #4
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	2201      	movs	r2, #1
 800e9be:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	68fa      	ldr	r2, [r7, #12]
 800e9c4:	601a      	str	r2, [r3, #0]
}
 800e9c6:	bf00      	nop
 800e9c8:	3714      	adds	r7, #20
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d0:	4770      	bx	lr
 800e9d2:	bf00      	nop
 800e9d4:	40010000 	.word	0x40010000
 800e9d8:	40000400 	.word	0x40000400
 800e9dc:	40000800 	.word	0x40000800
 800e9e0:	40000c00 	.word	0x40000c00
 800e9e4:	40010400 	.word	0x40010400
 800e9e8:	40014000 	.word	0x40014000
 800e9ec:	40014400 	.word	0x40014400
 800e9f0:	40014800 	.word	0x40014800
 800e9f4:	40001800 	.word	0x40001800
 800e9f8:	40001c00 	.word	0x40001c00
 800e9fc:	40002000 	.word	0x40002000

0800ea00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ea00:	b480      	push	{r7}
 800ea02:	b087      	sub	sp, #28
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
 800ea08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	6a1b      	ldr	r3, [r3, #32]
 800ea0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	6a1b      	ldr	r3, [r3, #32]
 800ea14:	f023 0201 	bic.w	r2, r3, #1
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	685b      	ldr	r3, [r3, #4]
 800ea20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	699b      	ldr	r3, [r3, #24]
 800ea26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ea28:	68fa      	ldr	r2, [r7, #12]
 800ea2a:	4b2b      	ldr	r3, [pc, #172]	@ (800ead8 <TIM_OC1_SetConfig+0xd8>)
 800ea2c:	4013      	ands	r3, r2
 800ea2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	f023 0303 	bic.w	r3, r3, #3
 800ea36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	68fa      	ldr	r2, [r7, #12]
 800ea3e:	4313      	orrs	r3, r2
 800ea40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	f023 0302 	bic.w	r3, r3, #2
 800ea48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	689b      	ldr	r3, [r3, #8]
 800ea4e:	697a      	ldr	r2, [r7, #20]
 800ea50:	4313      	orrs	r3, r2
 800ea52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	4a21      	ldr	r2, [pc, #132]	@ (800eadc <TIM_OC1_SetConfig+0xdc>)
 800ea58:	4293      	cmp	r3, r2
 800ea5a:	d003      	beq.n	800ea64 <TIM_OC1_SetConfig+0x64>
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	4a20      	ldr	r2, [pc, #128]	@ (800eae0 <TIM_OC1_SetConfig+0xe0>)
 800ea60:	4293      	cmp	r3, r2
 800ea62:	d10c      	bne.n	800ea7e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	f023 0308 	bic.w	r3, r3, #8
 800ea6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	68db      	ldr	r3, [r3, #12]
 800ea70:	697a      	ldr	r2, [r7, #20]
 800ea72:	4313      	orrs	r3, r2
 800ea74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ea76:	697b      	ldr	r3, [r7, #20]
 800ea78:	f023 0304 	bic.w	r3, r3, #4
 800ea7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	4a16      	ldr	r2, [pc, #88]	@ (800eadc <TIM_OC1_SetConfig+0xdc>)
 800ea82:	4293      	cmp	r3, r2
 800ea84:	d003      	beq.n	800ea8e <TIM_OC1_SetConfig+0x8e>
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	4a15      	ldr	r2, [pc, #84]	@ (800eae0 <TIM_OC1_SetConfig+0xe0>)
 800ea8a:	4293      	cmp	r3, r2
 800ea8c:	d111      	bne.n	800eab2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ea8e:	693b      	ldr	r3, [r7, #16]
 800ea90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ea94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ea96:	693b      	ldr	r3, [r7, #16]
 800ea98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ea9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	695b      	ldr	r3, [r3, #20]
 800eaa2:	693a      	ldr	r2, [r7, #16]
 800eaa4:	4313      	orrs	r3, r2
 800eaa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	699b      	ldr	r3, [r3, #24]
 800eaac:	693a      	ldr	r2, [r7, #16]
 800eaae:	4313      	orrs	r3, r2
 800eab0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	693a      	ldr	r2, [r7, #16]
 800eab6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	68fa      	ldr	r2, [r7, #12]
 800eabc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	685a      	ldr	r2, [r3, #4]
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	697a      	ldr	r2, [r7, #20]
 800eaca:	621a      	str	r2, [r3, #32]
}
 800eacc:	bf00      	nop
 800eace:	371c      	adds	r7, #28
 800ead0:	46bd      	mov	sp, r7
 800ead2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead6:	4770      	bx	lr
 800ead8:	fffeff8f 	.word	0xfffeff8f
 800eadc:	40010000 	.word	0x40010000
 800eae0:	40010400 	.word	0x40010400

0800eae4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eae4:	b480      	push	{r7}
 800eae6:	b087      	sub	sp, #28
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
 800eaec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	6a1b      	ldr	r3, [r3, #32]
 800eaf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	6a1b      	ldr	r3, [r3, #32]
 800eaf8:	f023 0210 	bic.w	r2, r3, #16
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	685b      	ldr	r3, [r3, #4]
 800eb04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	699b      	ldr	r3, [r3, #24]
 800eb0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800eb0c:	68fa      	ldr	r2, [r7, #12]
 800eb0e:	4b2e      	ldr	r3, [pc, #184]	@ (800ebc8 <TIM_OC2_SetConfig+0xe4>)
 800eb10:	4013      	ands	r3, r2
 800eb12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800eb1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	021b      	lsls	r3, r3, #8
 800eb22:	68fa      	ldr	r2, [r7, #12]
 800eb24:	4313      	orrs	r3, r2
 800eb26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800eb28:	697b      	ldr	r3, [r7, #20]
 800eb2a:	f023 0320 	bic.w	r3, r3, #32
 800eb2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	689b      	ldr	r3, [r3, #8]
 800eb34:	011b      	lsls	r3, r3, #4
 800eb36:	697a      	ldr	r2, [r7, #20]
 800eb38:	4313      	orrs	r3, r2
 800eb3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	4a23      	ldr	r2, [pc, #140]	@ (800ebcc <TIM_OC2_SetConfig+0xe8>)
 800eb40:	4293      	cmp	r3, r2
 800eb42:	d003      	beq.n	800eb4c <TIM_OC2_SetConfig+0x68>
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	4a22      	ldr	r2, [pc, #136]	@ (800ebd0 <TIM_OC2_SetConfig+0xec>)
 800eb48:	4293      	cmp	r3, r2
 800eb4a:	d10d      	bne.n	800eb68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800eb4c:	697b      	ldr	r3, [r7, #20]
 800eb4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eb52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	68db      	ldr	r3, [r3, #12]
 800eb58:	011b      	lsls	r3, r3, #4
 800eb5a:	697a      	ldr	r2, [r7, #20]
 800eb5c:	4313      	orrs	r3, r2
 800eb5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800eb60:	697b      	ldr	r3, [r7, #20]
 800eb62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eb66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	4a18      	ldr	r2, [pc, #96]	@ (800ebcc <TIM_OC2_SetConfig+0xe8>)
 800eb6c:	4293      	cmp	r3, r2
 800eb6e:	d003      	beq.n	800eb78 <TIM_OC2_SetConfig+0x94>
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	4a17      	ldr	r2, [pc, #92]	@ (800ebd0 <TIM_OC2_SetConfig+0xec>)
 800eb74:	4293      	cmp	r3, r2
 800eb76:	d113      	bne.n	800eba0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800eb78:	693b      	ldr	r3, [r7, #16]
 800eb7a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800eb7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800eb80:	693b      	ldr	r3, [r7, #16]
 800eb82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800eb86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	695b      	ldr	r3, [r3, #20]
 800eb8c:	009b      	lsls	r3, r3, #2
 800eb8e:	693a      	ldr	r2, [r7, #16]
 800eb90:	4313      	orrs	r3, r2
 800eb92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	699b      	ldr	r3, [r3, #24]
 800eb98:	009b      	lsls	r3, r3, #2
 800eb9a:	693a      	ldr	r2, [r7, #16]
 800eb9c:	4313      	orrs	r3, r2
 800eb9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	693a      	ldr	r2, [r7, #16]
 800eba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	68fa      	ldr	r2, [r7, #12]
 800ebaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	685a      	ldr	r2, [r3, #4]
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	697a      	ldr	r2, [r7, #20]
 800ebb8:	621a      	str	r2, [r3, #32]
}
 800ebba:	bf00      	nop
 800ebbc:	371c      	adds	r7, #28
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc4:	4770      	bx	lr
 800ebc6:	bf00      	nop
 800ebc8:	feff8fff 	.word	0xfeff8fff
 800ebcc:	40010000 	.word	0x40010000
 800ebd0:	40010400 	.word	0x40010400

0800ebd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ebd4:	b480      	push	{r7}
 800ebd6:	b087      	sub	sp, #28
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
 800ebdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6a1b      	ldr	r3, [r3, #32]
 800ebe2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	6a1b      	ldr	r3, [r3, #32]
 800ebe8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	685b      	ldr	r3, [r3, #4]
 800ebf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	69db      	ldr	r3, [r3, #28]
 800ebfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ebfc:	68fa      	ldr	r2, [r7, #12]
 800ebfe:	4b2d      	ldr	r3, [pc, #180]	@ (800ecb4 <TIM_OC3_SetConfig+0xe0>)
 800ec00:	4013      	ands	r3, r2
 800ec02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	f023 0303 	bic.w	r3, r3, #3
 800ec0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	68fa      	ldr	r2, [r7, #12]
 800ec12:	4313      	orrs	r3, r2
 800ec14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ec16:	697b      	ldr	r3, [r7, #20]
 800ec18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ec1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	689b      	ldr	r3, [r3, #8]
 800ec22:	021b      	lsls	r3, r3, #8
 800ec24:	697a      	ldr	r2, [r7, #20]
 800ec26:	4313      	orrs	r3, r2
 800ec28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	4a22      	ldr	r2, [pc, #136]	@ (800ecb8 <TIM_OC3_SetConfig+0xe4>)
 800ec2e:	4293      	cmp	r3, r2
 800ec30:	d003      	beq.n	800ec3a <TIM_OC3_SetConfig+0x66>
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	4a21      	ldr	r2, [pc, #132]	@ (800ecbc <TIM_OC3_SetConfig+0xe8>)
 800ec36:	4293      	cmp	r3, r2
 800ec38:	d10d      	bne.n	800ec56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ec3a:	697b      	ldr	r3, [r7, #20]
 800ec3c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ec40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	68db      	ldr	r3, [r3, #12]
 800ec46:	021b      	lsls	r3, r3, #8
 800ec48:	697a      	ldr	r2, [r7, #20]
 800ec4a:	4313      	orrs	r3, r2
 800ec4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ec4e:	697b      	ldr	r3, [r7, #20]
 800ec50:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ec54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	4a17      	ldr	r2, [pc, #92]	@ (800ecb8 <TIM_OC3_SetConfig+0xe4>)
 800ec5a:	4293      	cmp	r3, r2
 800ec5c:	d003      	beq.n	800ec66 <TIM_OC3_SetConfig+0x92>
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	4a16      	ldr	r2, [pc, #88]	@ (800ecbc <TIM_OC3_SetConfig+0xe8>)
 800ec62:	4293      	cmp	r3, r2
 800ec64:	d113      	bne.n	800ec8e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ec66:	693b      	ldr	r3, [r7, #16]
 800ec68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ec6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ec6e:	693b      	ldr	r3, [r7, #16]
 800ec70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ec74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	695b      	ldr	r3, [r3, #20]
 800ec7a:	011b      	lsls	r3, r3, #4
 800ec7c:	693a      	ldr	r2, [r7, #16]
 800ec7e:	4313      	orrs	r3, r2
 800ec80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	699b      	ldr	r3, [r3, #24]
 800ec86:	011b      	lsls	r3, r3, #4
 800ec88:	693a      	ldr	r2, [r7, #16]
 800ec8a:	4313      	orrs	r3, r2
 800ec8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	693a      	ldr	r2, [r7, #16]
 800ec92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	68fa      	ldr	r2, [r7, #12]
 800ec98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ec9a:	683b      	ldr	r3, [r7, #0]
 800ec9c:	685a      	ldr	r2, [r3, #4]
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	697a      	ldr	r2, [r7, #20]
 800eca6:	621a      	str	r2, [r3, #32]
}
 800eca8:	bf00      	nop
 800ecaa:	371c      	adds	r7, #28
 800ecac:	46bd      	mov	sp, r7
 800ecae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb2:	4770      	bx	lr
 800ecb4:	fffeff8f 	.word	0xfffeff8f
 800ecb8:	40010000 	.word	0x40010000
 800ecbc:	40010400 	.word	0x40010400

0800ecc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ecc0:	b480      	push	{r7}
 800ecc2:	b087      	sub	sp, #28
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
 800ecc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	6a1b      	ldr	r3, [r3, #32]
 800ecce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	6a1b      	ldr	r3, [r3, #32]
 800ecd4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	685b      	ldr	r3, [r3, #4]
 800ece0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	69db      	ldr	r3, [r3, #28]
 800ece6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ece8:	68fa      	ldr	r2, [r7, #12]
 800ecea:	4b1e      	ldr	r3, [pc, #120]	@ (800ed64 <TIM_OC4_SetConfig+0xa4>)
 800ecec:	4013      	ands	r3, r2
 800ecee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ecf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ecf8:	683b      	ldr	r3, [r7, #0]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	021b      	lsls	r3, r3, #8
 800ecfe:	68fa      	ldr	r2, [r7, #12]
 800ed00:	4313      	orrs	r3, r2
 800ed02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ed04:	693b      	ldr	r3, [r7, #16]
 800ed06:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ed0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ed0c:	683b      	ldr	r3, [r7, #0]
 800ed0e:	689b      	ldr	r3, [r3, #8]
 800ed10:	031b      	lsls	r3, r3, #12
 800ed12:	693a      	ldr	r2, [r7, #16]
 800ed14:	4313      	orrs	r3, r2
 800ed16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	4a13      	ldr	r2, [pc, #76]	@ (800ed68 <TIM_OC4_SetConfig+0xa8>)
 800ed1c:	4293      	cmp	r3, r2
 800ed1e:	d003      	beq.n	800ed28 <TIM_OC4_SetConfig+0x68>
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	4a12      	ldr	r2, [pc, #72]	@ (800ed6c <TIM_OC4_SetConfig+0xac>)
 800ed24:	4293      	cmp	r3, r2
 800ed26:	d109      	bne.n	800ed3c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ed28:	697b      	ldr	r3, [r7, #20]
 800ed2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ed2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	695b      	ldr	r3, [r3, #20]
 800ed34:	019b      	lsls	r3, r3, #6
 800ed36:	697a      	ldr	r2, [r7, #20]
 800ed38:	4313      	orrs	r3, r2
 800ed3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	697a      	ldr	r2, [r7, #20]
 800ed40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	68fa      	ldr	r2, [r7, #12]
 800ed46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	685a      	ldr	r2, [r3, #4]
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	693a      	ldr	r2, [r7, #16]
 800ed54:	621a      	str	r2, [r3, #32]
}
 800ed56:	bf00      	nop
 800ed58:	371c      	adds	r7, #28
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed60:	4770      	bx	lr
 800ed62:	bf00      	nop
 800ed64:	feff8fff 	.word	0xfeff8fff
 800ed68:	40010000 	.word	0x40010000
 800ed6c:	40010400 	.word	0x40010400

0800ed70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ed70:	b480      	push	{r7}
 800ed72:	b087      	sub	sp, #28
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
 800ed78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	6a1b      	ldr	r3, [r3, #32]
 800ed7e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	6a1b      	ldr	r3, [r3, #32]
 800ed84:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	685b      	ldr	r3, [r3, #4]
 800ed90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ed98:	68fa      	ldr	r2, [r7, #12]
 800ed9a:	4b1b      	ldr	r3, [pc, #108]	@ (800ee08 <TIM_OC5_SetConfig+0x98>)
 800ed9c:	4013      	ands	r3, r2
 800ed9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	68fa      	ldr	r2, [r7, #12]
 800eda6:	4313      	orrs	r3, r2
 800eda8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800edaa:	693b      	ldr	r3, [r7, #16]
 800edac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800edb0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	689b      	ldr	r3, [r3, #8]
 800edb6:	041b      	lsls	r3, r3, #16
 800edb8:	693a      	ldr	r2, [r7, #16]
 800edba:	4313      	orrs	r3, r2
 800edbc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	4a12      	ldr	r2, [pc, #72]	@ (800ee0c <TIM_OC5_SetConfig+0x9c>)
 800edc2:	4293      	cmp	r3, r2
 800edc4:	d003      	beq.n	800edce <TIM_OC5_SetConfig+0x5e>
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	4a11      	ldr	r2, [pc, #68]	@ (800ee10 <TIM_OC5_SetConfig+0xa0>)
 800edca:	4293      	cmp	r3, r2
 800edcc:	d109      	bne.n	800ede2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800edce:	697b      	ldr	r3, [r7, #20]
 800edd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800edd4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	695b      	ldr	r3, [r3, #20]
 800edda:	021b      	lsls	r3, r3, #8
 800eddc:	697a      	ldr	r2, [r7, #20]
 800edde:	4313      	orrs	r3, r2
 800ede0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	697a      	ldr	r2, [r7, #20]
 800ede6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	68fa      	ldr	r2, [r7, #12]
 800edec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	685a      	ldr	r2, [r3, #4]
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	693a      	ldr	r2, [r7, #16]
 800edfa:	621a      	str	r2, [r3, #32]
}
 800edfc:	bf00      	nop
 800edfe:	371c      	adds	r7, #28
 800ee00:	46bd      	mov	sp, r7
 800ee02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee06:	4770      	bx	lr
 800ee08:	fffeff8f 	.word	0xfffeff8f
 800ee0c:	40010000 	.word	0x40010000
 800ee10:	40010400 	.word	0x40010400

0800ee14 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ee14:	b480      	push	{r7}
 800ee16:	b087      	sub	sp, #28
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
 800ee1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6a1b      	ldr	r3, [r3, #32]
 800ee22:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	6a1b      	ldr	r3, [r3, #32]
 800ee28:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	685b      	ldr	r3, [r3, #4]
 800ee34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ee3c:	68fa      	ldr	r2, [r7, #12]
 800ee3e:	4b1c      	ldr	r3, [pc, #112]	@ (800eeb0 <TIM_OC6_SetConfig+0x9c>)
 800ee40:	4013      	ands	r3, r2
 800ee42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ee44:	683b      	ldr	r3, [r7, #0]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	021b      	lsls	r3, r3, #8
 800ee4a:	68fa      	ldr	r2, [r7, #12]
 800ee4c:	4313      	orrs	r3, r2
 800ee4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ee50:	693b      	ldr	r3, [r7, #16]
 800ee52:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ee56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	689b      	ldr	r3, [r3, #8]
 800ee5c:	051b      	lsls	r3, r3, #20
 800ee5e:	693a      	ldr	r2, [r7, #16]
 800ee60:	4313      	orrs	r3, r2
 800ee62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	4a13      	ldr	r2, [pc, #76]	@ (800eeb4 <TIM_OC6_SetConfig+0xa0>)
 800ee68:	4293      	cmp	r3, r2
 800ee6a:	d003      	beq.n	800ee74 <TIM_OC6_SetConfig+0x60>
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	4a12      	ldr	r2, [pc, #72]	@ (800eeb8 <TIM_OC6_SetConfig+0xa4>)
 800ee70:	4293      	cmp	r3, r2
 800ee72:	d109      	bne.n	800ee88 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ee74:	697b      	ldr	r3, [r7, #20]
 800ee76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ee7a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ee7c:	683b      	ldr	r3, [r7, #0]
 800ee7e:	695b      	ldr	r3, [r3, #20]
 800ee80:	029b      	lsls	r3, r3, #10
 800ee82:	697a      	ldr	r2, [r7, #20]
 800ee84:	4313      	orrs	r3, r2
 800ee86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	697a      	ldr	r2, [r7, #20]
 800ee8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	68fa      	ldr	r2, [r7, #12]
 800ee92:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	685a      	ldr	r2, [r3, #4]
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	693a      	ldr	r2, [r7, #16]
 800eea0:	621a      	str	r2, [r3, #32]
}
 800eea2:	bf00      	nop
 800eea4:	371c      	adds	r7, #28
 800eea6:	46bd      	mov	sp, r7
 800eea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeac:	4770      	bx	lr
 800eeae:	bf00      	nop
 800eeb0:	feff8fff 	.word	0xfeff8fff
 800eeb4:	40010000 	.word	0x40010000
 800eeb8:	40010400 	.word	0x40010400

0800eebc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800eebc:	b480      	push	{r7}
 800eebe:	b087      	sub	sp, #28
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	60f8      	str	r0, [r7, #12]
 800eec4:	60b9      	str	r1, [r7, #8]
 800eec6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	6a1b      	ldr	r3, [r3, #32]
 800eecc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	6a1b      	ldr	r3, [r3, #32]
 800eed2:	f023 0201 	bic.w	r2, r3, #1
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	699b      	ldr	r3, [r3, #24]
 800eede:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800eee0:	693b      	ldr	r3, [r7, #16]
 800eee2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800eee6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	011b      	lsls	r3, r3, #4
 800eeec:	693a      	ldr	r2, [r7, #16]
 800eeee:	4313      	orrs	r3, r2
 800eef0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800eef2:	697b      	ldr	r3, [r7, #20]
 800eef4:	f023 030a 	bic.w	r3, r3, #10
 800eef8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800eefa:	697a      	ldr	r2, [r7, #20]
 800eefc:	68bb      	ldr	r3, [r7, #8]
 800eefe:	4313      	orrs	r3, r2
 800ef00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	693a      	ldr	r2, [r7, #16]
 800ef06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	697a      	ldr	r2, [r7, #20]
 800ef0c:	621a      	str	r2, [r3, #32]
}
 800ef0e:	bf00      	nop
 800ef10:	371c      	adds	r7, #28
 800ef12:	46bd      	mov	sp, r7
 800ef14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef18:	4770      	bx	lr

0800ef1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ef1a:	b480      	push	{r7}
 800ef1c:	b087      	sub	sp, #28
 800ef1e:	af00      	add	r7, sp, #0
 800ef20:	60f8      	str	r0, [r7, #12]
 800ef22:	60b9      	str	r1, [r7, #8]
 800ef24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	6a1b      	ldr	r3, [r3, #32]
 800ef2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	6a1b      	ldr	r3, [r3, #32]
 800ef30:	f023 0210 	bic.w	r2, r3, #16
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	699b      	ldr	r3, [r3, #24]
 800ef3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ef3e:	693b      	ldr	r3, [r7, #16]
 800ef40:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ef44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	031b      	lsls	r3, r3, #12
 800ef4a:	693a      	ldr	r2, [r7, #16]
 800ef4c:	4313      	orrs	r3, r2
 800ef4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ef50:	697b      	ldr	r3, [r7, #20]
 800ef52:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ef56:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ef58:	68bb      	ldr	r3, [r7, #8]
 800ef5a:	011b      	lsls	r3, r3, #4
 800ef5c:	697a      	ldr	r2, [r7, #20]
 800ef5e:	4313      	orrs	r3, r2
 800ef60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	693a      	ldr	r2, [r7, #16]
 800ef66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	697a      	ldr	r2, [r7, #20]
 800ef6c:	621a      	str	r2, [r3, #32]
}
 800ef6e:	bf00      	nop
 800ef70:	371c      	adds	r7, #28
 800ef72:	46bd      	mov	sp, r7
 800ef74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef78:	4770      	bx	lr

0800ef7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ef7a:	b480      	push	{r7}
 800ef7c:	b085      	sub	sp, #20
 800ef7e:	af00      	add	r7, sp, #0
 800ef80:	6078      	str	r0, [r7, #4]
 800ef82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	689b      	ldr	r3, [r3, #8]
 800ef88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ef90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ef92:	683a      	ldr	r2, [r7, #0]
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	4313      	orrs	r3, r2
 800ef98:	f043 0307 	orr.w	r3, r3, #7
 800ef9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	68fa      	ldr	r2, [r7, #12]
 800efa2:	609a      	str	r2, [r3, #8]
}
 800efa4:	bf00      	nop
 800efa6:	3714      	adds	r7, #20
 800efa8:	46bd      	mov	sp, r7
 800efaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efae:	4770      	bx	lr

0800efb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800efb0:	b480      	push	{r7}
 800efb2:	b087      	sub	sp, #28
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	60f8      	str	r0, [r7, #12]
 800efb8:	60b9      	str	r1, [r7, #8]
 800efba:	607a      	str	r2, [r7, #4]
 800efbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	689b      	ldr	r3, [r3, #8]
 800efc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800efc4:	697b      	ldr	r3, [r7, #20]
 800efc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800efca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	021a      	lsls	r2, r3, #8
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	431a      	orrs	r2, r3
 800efd4:	68bb      	ldr	r3, [r7, #8]
 800efd6:	4313      	orrs	r3, r2
 800efd8:	697a      	ldr	r2, [r7, #20]
 800efda:	4313      	orrs	r3, r2
 800efdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	697a      	ldr	r2, [r7, #20]
 800efe2:	609a      	str	r2, [r3, #8]
}
 800efe4:	bf00      	nop
 800efe6:	371c      	adds	r7, #28
 800efe8:	46bd      	mov	sp, r7
 800efea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efee:	4770      	bx	lr

0800eff0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800eff0:	b480      	push	{r7}
 800eff2:	b085      	sub	sp, #20
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
 800eff8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f000:	2b01      	cmp	r3, #1
 800f002:	d101      	bne.n	800f008 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f004:	2302      	movs	r3, #2
 800f006:	e06d      	b.n	800f0e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2201      	movs	r2, #1
 800f00c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	2202      	movs	r2, #2
 800f014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	685b      	ldr	r3, [r3, #4]
 800f01e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	689b      	ldr	r3, [r3, #8]
 800f026:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	4a30      	ldr	r2, [pc, #192]	@ (800f0f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f02e:	4293      	cmp	r3, r2
 800f030:	d004      	beq.n	800f03c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	4a2f      	ldr	r2, [pc, #188]	@ (800f0f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f038:	4293      	cmp	r3, r2
 800f03a:	d108      	bne.n	800f04e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f042:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	685b      	ldr	r3, [r3, #4]
 800f048:	68fa      	ldr	r2, [r7, #12]
 800f04a:	4313      	orrs	r3, r2
 800f04c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f054:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	68fa      	ldr	r2, [r7, #12]
 800f05c:	4313      	orrs	r3, r2
 800f05e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	68fa      	ldr	r2, [r7, #12]
 800f066:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	4a20      	ldr	r2, [pc, #128]	@ (800f0f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f06e:	4293      	cmp	r3, r2
 800f070:	d022      	beq.n	800f0b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f07a:	d01d      	beq.n	800f0b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	4a1d      	ldr	r2, [pc, #116]	@ (800f0f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f082:	4293      	cmp	r3, r2
 800f084:	d018      	beq.n	800f0b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	4a1c      	ldr	r2, [pc, #112]	@ (800f0fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f08c:	4293      	cmp	r3, r2
 800f08e:	d013      	beq.n	800f0b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	4a1a      	ldr	r2, [pc, #104]	@ (800f100 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f096:	4293      	cmp	r3, r2
 800f098:	d00e      	beq.n	800f0b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	4a15      	ldr	r2, [pc, #84]	@ (800f0f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f0a0:	4293      	cmp	r3, r2
 800f0a2:	d009      	beq.n	800f0b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	4a16      	ldr	r2, [pc, #88]	@ (800f104 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f0aa:	4293      	cmp	r3, r2
 800f0ac:	d004      	beq.n	800f0b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	4a15      	ldr	r2, [pc, #84]	@ (800f108 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f0b4:	4293      	cmp	r3, r2
 800f0b6:	d10c      	bne.n	800f0d2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f0be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f0c0:	683b      	ldr	r3, [r7, #0]
 800f0c2:	689b      	ldr	r3, [r3, #8]
 800f0c4:	68ba      	ldr	r2, [r7, #8]
 800f0c6:	4313      	orrs	r3, r2
 800f0c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	68ba      	ldr	r2, [r7, #8]
 800f0d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	2201      	movs	r2, #1
 800f0d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	2200      	movs	r2, #0
 800f0de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f0e2:	2300      	movs	r3, #0
}
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	3714      	adds	r7, #20
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ee:	4770      	bx	lr
 800f0f0:	40010000 	.word	0x40010000
 800f0f4:	40010400 	.word	0x40010400
 800f0f8:	40000400 	.word	0x40000400
 800f0fc:	40000800 	.word	0x40000800
 800f100:	40000c00 	.word	0x40000c00
 800f104:	40014000 	.word	0x40014000
 800f108:	40001800 	.word	0x40001800

0800f10c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f10c:	b480      	push	{r7}
 800f10e:	b085      	sub	sp, #20
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
 800f114:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f116:	2300      	movs	r3, #0
 800f118:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f120:	2b01      	cmp	r3, #1
 800f122:	d101      	bne.n	800f128 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f124:	2302      	movs	r3, #2
 800f126:	e065      	b.n	800f1f4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	2201      	movs	r2, #1
 800f12c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	68db      	ldr	r3, [r3, #12]
 800f13a:	4313      	orrs	r3, r2
 800f13c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	689b      	ldr	r3, [r3, #8]
 800f148:	4313      	orrs	r3, r2
 800f14a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	685b      	ldr	r3, [r3, #4]
 800f156:	4313      	orrs	r3, r2
 800f158:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	4313      	orrs	r3, r2
 800f166:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	691b      	ldr	r3, [r3, #16]
 800f172:	4313      	orrs	r3, r2
 800f174:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800f17c:	683b      	ldr	r3, [r7, #0]
 800f17e:	695b      	ldr	r3, [r3, #20]
 800f180:	4313      	orrs	r3, r2
 800f182:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f18e:	4313      	orrs	r3, r2
 800f190:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	699b      	ldr	r3, [r3, #24]
 800f19c:	041b      	lsls	r3, r3, #16
 800f19e:	4313      	orrs	r3, r2
 800f1a0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	4a16      	ldr	r2, [pc, #88]	@ (800f200 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800f1a8:	4293      	cmp	r3, r2
 800f1aa:	d004      	beq.n	800f1b6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	4a14      	ldr	r2, [pc, #80]	@ (800f204 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800f1b2:	4293      	cmp	r3, r2
 800f1b4:	d115      	bne.n	800f1e2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1c0:	051b      	lsls	r3, r3, #20
 800f1c2:	4313      	orrs	r3, r2
 800f1c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	69db      	ldr	r3, [r3, #28]
 800f1d0:	4313      	orrs	r3, r2
 800f1d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	6a1b      	ldr	r3, [r3, #32]
 800f1de:	4313      	orrs	r3, r2
 800f1e0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	68fa      	ldr	r2, [r7, #12]
 800f1e8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f1f2:	2300      	movs	r3, #0
}
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	3714      	adds	r7, #20
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fe:	4770      	bx	lr
 800f200:	40010000 	.word	0x40010000
 800f204:	40010400 	.word	0x40010400

0800f208 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f208:	b480      	push	{r7}
 800f20a:	b083      	sub	sp, #12
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f210:	bf00      	nop
 800f212:	370c      	adds	r7, #12
 800f214:	46bd      	mov	sp, r7
 800f216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21a:	4770      	bx	lr

0800f21c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f21c:	b480      	push	{r7}
 800f21e:	b083      	sub	sp, #12
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f224:	bf00      	nop
 800f226:	370c      	adds	r7, #12
 800f228:	46bd      	mov	sp, r7
 800f22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22e:	4770      	bx	lr

0800f230 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f230:	b480      	push	{r7}
 800f232:	b083      	sub	sp, #12
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f238:	bf00      	nop
 800f23a:	370c      	adds	r7, #12
 800f23c:	46bd      	mov	sp, r7
 800f23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f242:	4770      	bx	lr

0800f244 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b082      	sub	sp, #8
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d101      	bne.n	800f256 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f252:	2301      	movs	r3, #1
 800f254:	e040      	b.n	800f2d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d106      	bne.n	800f26c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2200      	movs	r2, #0
 800f262:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f266:	6878      	ldr	r0, [r7, #4]
 800f268:	f7f5 fef6 	bl	8005058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	2224      	movs	r2, #36	@ 0x24
 800f270:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	681a      	ldr	r2, [r3, #0]
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	f022 0201 	bic.w	r2, r2, #1
 800f280:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f286:	2b00      	cmp	r3, #0
 800f288:	d002      	beq.n	800f290 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800f28a:	6878      	ldr	r0, [r7, #4]
 800f28c:	f000 ffb6 	bl	80101fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f000 fd4f 	bl	800fd34 <UART_SetConfig>
 800f296:	4603      	mov	r3, r0
 800f298:	2b01      	cmp	r3, #1
 800f29a:	d101      	bne.n	800f2a0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800f29c:	2301      	movs	r3, #1
 800f29e:	e01b      	b.n	800f2d8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	685a      	ldr	r2, [r3, #4]
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f2ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	689a      	ldr	r2, [r3, #8]
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f2be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	681a      	ldr	r2, [r3, #0]
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	f042 0201 	orr.w	r2, r2, #1
 800f2ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f001 f835 	bl	8010340 <UART_CheckIdleState>
 800f2d6:	4603      	mov	r3, r0
}
 800f2d8:	4618      	mov	r0, r3
 800f2da:	3708      	adds	r7, #8
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd80      	pop	{r7, pc}

0800f2e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b08a      	sub	sp, #40	@ 0x28
 800f2e4:	af02      	add	r7, sp, #8
 800f2e6:	60f8      	str	r0, [r7, #12]
 800f2e8:	60b9      	str	r1, [r7, #8]
 800f2ea:	603b      	str	r3, [r7, #0]
 800f2ec:	4613      	mov	r3, r2
 800f2ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f2f4:	2b20      	cmp	r3, #32
 800f2f6:	d177      	bne.n	800f3e8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800f2f8:	68bb      	ldr	r3, [r7, #8]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d002      	beq.n	800f304 <HAL_UART_Transmit+0x24>
 800f2fe:	88fb      	ldrh	r3, [r7, #6]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d101      	bne.n	800f308 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800f304:	2301      	movs	r3, #1
 800f306:	e070      	b.n	800f3ea <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	2200      	movs	r2, #0
 800f30c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	2221      	movs	r2, #33	@ 0x21
 800f314:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f316:	f7f7 f8af 	bl	8006478 <HAL_GetTick>
 800f31a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	88fa      	ldrh	r2, [r7, #6]
 800f320:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	88fa      	ldrh	r2, [r7, #6]
 800f328:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	689b      	ldr	r3, [r3, #8]
 800f330:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f334:	d108      	bne.n	800f348 <HAL_UART_Transmit+0x68>
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	691b      	ldr	r3, [r3, #16]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d104      	bne.n	800f348 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800f33e:	2300      	movs	r3, #0
 800f340:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	61bb      	str	r3, [r7, #24]
 800f346:	e003      	b.n	800f350 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800f348:	68bb      	ldr	r3, [r7, #8]
 800f34a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f34c:	2300      	movs	r3, #0
 800f34e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f350:	e02f      	b.n	800f3b2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	9300      	str	r3, [sp, #0]
 800f356:	697b      	ldr	r3, [r7, #20]
 800f358:	2200      	movs	r2, #0
 800f35a:	2180      	movs	r1, #128	@ 0x80
 800f35c:	68f8      	ldr	r0, [r7, #12]
 800f35e:	f001 f846 	bl	80103ee <UART_WaitOnFlagUntilTimeout>
 800f362:	4603      	mov	r3, r0
 800f364:	2b00      	cmp	r3, #0
 800f366:	d004      	beq.n	800f372 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	2220      	movs	r2, #32
 800f36c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800f36e:	2303      	movs	r3, #3
 800f370:	e03b      	b.n	800f3ea <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800f372:	69fb      	ldr	r3, [r7, #28]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d10b      	bne.n	800f390 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f378:	69bb      	ldr	r3, [r7, #24]
 800f37a:	881b      	ldrh	r3, [r3, #0]
 800f37c:	461a      	mov	r2, r3
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f386:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f388:	69bb      	ldr	r3, [r7, #24]
 800f38a:	3302      	adds	r3, #2
 800f38c:	61bb      	str	r3, [r7, #24]
 800f38e:	e007      	b.n	800f3a0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f390:	69fb      	ldr	r3, [r7, #28]
 800f392:	781a      	ldrb	r2, [r3, #0]
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f39a:	69fb      	ldr	r3, [r7, #28]
 800f39c:	3301      	adds	r3, #1
 800f39e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800f3a6:	b29b      	uxth	r3, r3
 800f3a8:	3b01      	subs	r3, #1
 800f3aa:	b29a      	uxth	r2, r3
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800f3b8:	b29b      	uxth	r3, r3
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d1c9      	bne.n	800f352 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	9300      	str	r3, [sp, #0]
 800f3c2:	697b      	ldr	r3, [r7, #20]
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	2140      	movs	r1, #64	@ 0x40
 800f3c8:	68f8      	ldr	r0, [r7, #12]
 800f3ca:	f001 f810 	bl	80103ee <UART_WaitOnFlagUntilTimeout>
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d004      	beq.n	800f3de <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	2220      	movs	r2, #32
 800f3d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800f3da:	2303      	movs	r3, #3
 800f3dc:	e005      	b.n	800f3ea <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	2220      	movs	r2, #32
 800f3e2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	e000      	b.n	800f3ea <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800f3e8:	2302      	movs	r3, #2
  }
}
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	3720      	adds	r7, #32
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bd80      	pop	{r7, pc}

0800f3f2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f3f2:	b580      	push	{r7, lr}
 800f3f4:	b08a      	sub	sp, #40	@ 0x28
 800f3f6:	af02      	add	r7, sp, #8
 800f3f8:	60f8      	str	r0, [r7, #12]
 800f3fa:	60b9      	str	r1, [r7, #8]
 800f3fc:	603b      	str	r3, [r7, #0]
 800f3fe:	4613      	mov	r3, r2
 800f400:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f408:	2b20      	cmp	r3, #32
 800f40a:	f040 80b5 	bne.w	800f578 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d002      	beq.n	800f41a <HAL_UART_Receive+0x28>
 800f414:	88fb      	ldrh	r3, [r7, #6]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d101      	bne.n	800f41e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800f41a:	2301      	movs	r3, #1
 800f41c:	e0ad      	b.n	800f57a <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	2200      	movs	r2, #0
 800f422:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	2222      	movs	r2, #34	@ 0x22
 800f42a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	2200      	movs	r2, #0
 800f432:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f434:	f7f7 f820 	bl	8006478 <HAL_GetTick>
 800f438:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	88fa      	ldrh	r2, [r7, #6]
 800f43e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	88fa      	ldrh	r2, [r7, #6]
 800f446:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	689b      	ldr	r3, [r3, #8]
 800f44e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f452:	d10e      	bne.n	800f472 <HAL_UART_Receive+0x80>
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	691b      	ldr	r3, [r3, #16]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d105      	bne.n	800f468 <HAL_UART_Receive+0x76>
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800f462:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f466:	e02d      	b.n	800f4c4 <HAL_UART_Receive+0xd2>
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	22ff      	movs	r2, #255	@ 0xff
 800f46c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f470:	e028      	b.n	800f4c4 <HAL_UART_Receive+0xd2>
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	689b      	ldr	r3, [r3, #8]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d10d      	bne.n	800f496 <HAL_UART_Receive+0xa4>
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	691b      	ldr	r3, [r3, #16]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d104      	bne.n	800f48c <HAL_UART_Receive+0x9a>
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	22ff      	movs	r2, #255	@ 0xff
 800f486:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f48a:	e01b      	b.n	800f4c4 <HAL_UART_Receive+0xd2>
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	227f      	movs	r2, #127	@ 0x7f
 800f490:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f494:	e016      	b.n	800f4c4 <HAL_UART_Receive+0xd2>
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	689b      	ldr	r3, [r3, #8]
 800f49a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f49e:	d10d      	bne.n	800f4bc <HAL_UART_Receive+0xca>
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	691b      	ldr	r3, [r3, #16]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d104      	bne.n	800f4b2 <HAL_UART_Receive+0xc0>
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	227f      	movs	r2, #127	@ 0x7f
 800f4ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f4b0:	e008      	b.n	800f4c4 <HAL_UART_Receive+0xd2>
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	223f      	movs	r2, #63	@ 0x3f
 800f4b6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f4ba:	e003      	b.n	800f4c4 <HAL_UART_Receive+0xd2>
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	2200      	movs	r2, #0
 800f4c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f4ca:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	689b      	ldr	r3, [r3, #8]
 800f4d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f4d4:	d108      	bne.n	800f4e8 <HAL_UART_Receive+0xf6>
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	691b      	ldr	r3, [r3, #16]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d104      	bne.n	800f4e8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800f4de:	2300      	movs	r3, #0
 800f4e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f4e2:	68bb      	ldr	r3, [r7, #8]
 800f4e4:	61bb      	str	r3, [r7, #24]
 800f4e6:	e003      	b.n	800f4f0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800f4f0:	e036      	b.n	800f560 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	9300      	str	r3, [sp, #0]
 800f4f6:	697b      	ldr	r3, [r7, #20]
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	2120      	movs	r1, #32
 800f4fc:	68f8      	ldr	r0, [r7, #12]
 800f4fe:	f000 ff76 	bl	80103ee <UART_WaitOnFlagUntilTimeout>
 800f502:	4603      	mov	r3, r0
 800f504:	2b00      	cmp	r3, #0
 800f506:	d005      	beq.n	800f514 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	2220      	movs	r2, #32
 800f50c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800f510:	2303      	movs	r3, #3
 800f512:	e032      	b.n	800f57a <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800f514:	69fb      	ldr	r3, [r7, #28]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d10c      	bne.n	800f534 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f520:	b29a      	uxth	r2, r3
 800f522:	8a7b      	ldrh	r3, [r7, #18]
 800f524:	4013      	ands	r3, r2
 800f526:	b29a      	uxth	r2, r3
 800f528:	69bb      	ldr	r3, [r7, #24]
 800f52a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f52c:	69bb      	ldr	r3, [r7, #24]
 800f52e:	3302      	adds	r3, #2
 800f530:	61bb      	str	r3, [r7, #24]
 800f532:	e00c      	b.n	800f54e <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f53a:	b2da      	uxtb	r2, r3
 800f53c:	8a7b      	ldrh	r3, [r7, #18]
 800f53e:	b2db      	uxtb	r3, r3
 800f540:	4013      	ands	r3, r2
 800f542:	b2da      	uxtb	r2, r3
 800f544:	69fb      	ldr	r3, [r7, #28]
 800f546:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800f548:	69fb      	ldr	r3, [r7, #28]
 800f54a:	3301      	adds	r3, #1
 800f54c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f554:	b29b      	uxth	r3, r3
 800f556:	3b01      	subs	r3, #1
 800f558:	b29a      	uxth	r2, r3
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f566:	b29b      	uxth	r3, r3
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d1c2      	bne.n	800f4f2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	2220      	movs	r2, #32
 800f570:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800f574:	2300      	movs	r3, #0
 800f576:	e000      	b.n	800f57a <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800f578:	2302      	movs	r3, #2
  }
}
 800f57a:	4618      	mov	r0, r3
 800f57c:	3720      	adds	r7, #32
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}

0800f582 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f582:	b580      	push	{r7, lr}
 800f584:	b08a      	sub	sp, #40	@ 0x28
 800f586:	af00      	add	r7, sp, #0
 800f588:	60f8      	str	r0, [r7, #12]
 800f58a:	60b9      	str	r1, [r7, #8]
 800f58c:	4613      	mov	r3, r2
 800f58e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f596:	2b20      	cmp	r3, #32
 800f598:	d132      	bne.n	800f600 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d002      	beq.n	800f5a6 <HAL_UART_Receive_DMA+0x24>
 800f5a0:	88fb      	ldrh	r3, [r7, #6]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d101      	bne.n	800f5aa <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800f5a6:	2301      	movs	r3, #1
 800f5a8:	e02b      	b.n	800f602 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	685b      	ldr	r3, [r3, #4]
 800f5b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d018      	beq.n	800f5f0 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5c4:	697b      	ldr	r3, [r7, #20]
 800f5c6:	e853 3f00 	ldrex	r3, [r3]
 800f5ca:	613b      	str	r3, [r7, #16]
   return(result);
 800f5cc:	693b      	ldr	r3, [r7, #16]
 800f5ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f5d2:	627b      	str	r3, [r7, #36]	@ 0x24
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	461a      	mov	r2, r3
 800f5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5dc:	623b      	str	r3, [r7, #32]
 800f5de:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5e0:	69f9      	ldr	r1, [r7, #28]
 800f5e2:	6a3a      	ldr	r2, [r7, #32]
 800f5e4:	e841 2300 	strex	r3, r2, [r1]
 800f5e8:	61bb      	str	r3, [r7, #24]
   return(result);
 800f5ea:	69bb      	ldr	r3, [r7, #24]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d1e6      	bne.n	800f5be <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f5f0:	88fb      	ldrh	r3, [r7, #6]
 800f5f2:	461a      	mov	r2, r3
 800f5f4:	68b9      	ldr	r1, [r7, #8]
 800f5f6:	68f8      	ldr	r0, [r7, #12]
 800f5f8:	f000 ff66 	bl	80104c8 <UART_Start_Receive_DMA>
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	e000      	b.n	800f602 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800f600:	2302      	movs	r3, #2
  }
}
 800f602:	4618      	mov	r0, r3
 800f604:	3728      	adds	r7, #40	@ 0x28
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}

0800f60a <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800f60a:	b580      	push	{r7, lr}
 800f60c:	b090      	sub	sp, #64	@ 0x40
 800f60e:	af00      	add	r7, sp, #0
 800f610:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f616:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f61e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	689b      	ldr	r3, [r3, #8]
 800f626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f62a:	2b80      	cmp	r3, #128	@ 0x80
 800f62c:	d139      	bne.n	800f6a2 <HAL_UART_DMAStop+0x98>
 800f62e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f630:	2b21      	cmp	r3, #33	@ 0x21
 800f632:	d136      	bne.n	800f6a2 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	3308      	adds	r3, #8
 800f63a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f63c:	6a3b      	ldr	r3, [r7, #32]
 800f63e:	e853 3f00 	ldrex	r3, [r3]
 800f642:	61fb      	str	r3, [r7, #28]
   return(result);
 800f644:	69fb      	ldr	r3, [r7, #28]
 800f646:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f64a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	3308      	adds	r3, #8
 800f652:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f654:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f656:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f658:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f65a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f65c:	e841 2300 	strex	r3, r2, [r1]
 800f660:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f664:	2b00      	cmp	r3, #0
 800f666:	d1e5      	bne.n	800f634 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d015      	beq.n	800f69c <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f674:	4618      	mov	r0, r3
 800f676:	f7f7 fd81 	bl	800717c <HAL_DMA_Abort>
 800f67a:	4603      	mov	r3, r0
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d00d      	beq.n	800f69c <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f684:	4618      	mov	r0, r3
 800f686:	f7f7 ff95 	bl	80075b4 <HAL_DMA_GetError>
 800f68a:	4603      	mov	r3, r0
 800f68c:	2b20      	cmp	r3, #32
 800f68e:	d105      	bne.n	800f69c <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	2210      	movs	r2, #16
 800f694:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f698:	2303      	movs	r3, #3
 800f69a:	e044      	b.n	800f726 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800f69c:	6878      	ldr	r0, [r7, #4]
 800f69e:	f000 ffb3 	bl	8010608 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	689b      	ldr	r3, [r3, #8]
 800f6a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f6ac:	2b40      	cmp	r3, #64	@ 0x40
 800f6ae:	d139      	bne.n	800f724 <HAL_UART_DMAStop+0x11a>
 800f6b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6b2:	2b22      	cmp	r3, #34	@ 0x22
 800f6b4:	d136      	bne.n	800f724 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	3308      	adds	r3, #8
 800f6bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	e853 3f00 	ldrex	r3, [r3]
 800f6c4:	60bb      	str	r3, [r7, #8]
   return(result);
 800f6c6:	68bb      	ldr	r3, [r7, #8]
 800f6c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f6cc:	633b      	str	r3, [r7, #48]	@ 0x30
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	3308      	adds	r3, #8
 800f6d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f6d6:	61ba      	str	r2, [r7, #24]
 800f6d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6da:	6979      	ldr	r1, [r7, #20]
 800f6dc:	69ba      	ldr	r2, [r7, #24]
 800f6de:	e841 2300 	strex	r3, r2, [r1]
 800f6e2:	613b      	str	r3, [r7, #16]
   return(result);
 800f6e4:	693b      	ldr	r3, [r7, #16]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d1e5      	bne.n	800f6b6 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d015      	beq.n	800f71e <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f7f7 fd40 	bl	800717c <HAL_DMA_Abort>
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d00d      	beq.n	800f71e <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f706:	4618      	mov	r0, r3
 800f708:	f7f7 ff54 	bl	80075b4 <HAL_DMA_GetError>
 800f70c:	4603      	mov	r3, r0
 800f70e:	2b20      	cmp	r3, #32
 800f710:	d105      	bne.n	800f71e <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	2210      	movs	r2, #16
 800f716:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f71a:	2303      	movs	r3, #3
 800f71c:	e003      	b.n	800f726 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800f71e:	6878      	ldr	r0, [r7, #4]
 800f720:	f000 ff98 	bl	8010654 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800f724:	2300      	movs	r3, #0
}
 800f726:	4618      	mov	r0, r3
 800f728:	3740      	adds	r7, #64	@ 0x40
 800f72a:	46bd      	mov	sp, r7
 800f72c:	bd80      	pop	{r7, pc}
	...

0800f730 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f730:	b580      	push	{r7, lr}
 800f732:	b0ba      	sub	sp, #232	@ 0xe8
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	69db      	ldr	r3, [r3, #28]
 800f73e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	689b      	ldr	r3, [r3, #8]
 800f752:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f756:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f75a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800f75e:	4013      	ands	r3, r2
 800f760:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800f764:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d115      	bne.n	800f798 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800f76c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f770:	f003 0320 	and.w	r3, r3, #32
 800f774:	2b00      	cmp	r3, #0
 800f776:	d00f      	beq.n	800f798 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f77c:	f003 0320 	and.w	r3, r3, #32
 800f780:	2b00      	cmp	r3, #0
 800f782:	d009      	beq.n	800f798 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f788:	2b00      	cmp	r3, #0
 800f78a:	f000 82b1 	beq.w	800fcf0 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f792:	6878      	ldr	r0, [r7, #4]
 800f794:	4798      	blx	r3
      }
      return;
 800f796:	e2ab      	b.n	800fcf0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f798:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	f000 8117 	beq.w	800f9d0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800f7a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f7a6:	f003 0301 	and.w	r3, r3, #1
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d106      	bne.n	800f7bc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800f7ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f7b2:	4b85      	ldr	r3, [pc, #532]	@ (800f9c8 <HAL_UART_IRQHandler+0x298>)
 800f7b4:	4013      	ands	r3, r2
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	f000 810a 	beq.w	800f9d0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f7bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f7c0:	f003 0301 	and.w	r3, r3, #1
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d011      	beq.n	800f7ec <HAL_UART_IRQHandler+0xbc>
 800f7c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f7cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d00b      	beq.n	800f7ec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	2201      	movs	r2, #1
 800f7da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f7e2:	f043 0201 	orr.w	r2, r3, #1
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f7ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f7f0:	f003 0302 	and.w	r3, r3, #2
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d011      	beq.n	800f81c <HAL_UART_IRQHandler+0xec>
 800f7f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f7fc:	f003 0301 	and.w	r3, r3, #1
 800f800:	2b00      	cmp	r3, #0
 800f802:	d00b      	beq.n	800f81c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	2202      	movs	r2, #2
 800f80a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f812:	f043 0204 	orr.w	r2, r3, #4
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f81c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f820:	f003 0304 	and.w	r3, r3, #4
 800f824:	2b00      	cmp	r3, #0
 800f826:	d011      	beq.n	800f84c <HAL_UART_IRQHandler+0x11c>
 800f828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f82c:	f003 0301 	and.w	r3, r3, #1
 800f830:	2b00      	cmp	r3, #0
 800f832:	d00b      	beq.n	800f84c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	2204      	movs	r2, #4
 800f83a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f842:	f043 0202 	orr.w	r2, r3, #2
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f84c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f850:	f003 0308 	and.w	r3, r3, #8
 800f854:	2b00      	cmp	r3, #0
 800f856:	d017      	beq.n	800f888 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f85c:	f003 0320 	and.w	r3, r3, #32
 800f860:	2b00      	cmp	r3, #0
 800f862:	d105      	bne.n	800f870 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800f864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f868:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d00b      	beq.n	800f888 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	2208      	movs	r2, #8
 800f876:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f87e:	f043 0208 	orr.w	r2, r3, #8
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f88c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f890:	2b00      	cmp	r3, #0
 800f892:	d012      	beq.n	800f8ba <HAL_UART_IRQHandler+0x18a>
 800f894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f898:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d00c      	beq.n	800f8ba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f8a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f8b0:	f043 0220 	orr.w	r2, r3, #32
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	f000 8217 	beq.w	800fcf4 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800f8c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f8ca:	f003 0320 	and.w	r3, r3, #32
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d00d      	beq.n	800f8ee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f8d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f8d6:	f003 0320 	and.w	r3, r3, #32
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d007      	beq.n	800f8ee <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d003      	beq.n	800f8ee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f8ea:	6878      	ldr	r0, [r7, #4]
 800f8ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f8f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	689b      	ldr	r3, [r3, #8]
 800f8fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f902:	2b40      	cmp	r3, #64	@ 0x40
 800f904:	d005      	beq.n	800f912 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f906:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f90a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d04f      	beq.n	800f9b2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f912:	6878      	ldr	r0, [r7, #4]
 800f914:	f000 fe9e 	bl	8010654 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	689b      	ldr	r3, [r3, #8]
 800f91e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f922:	2b40      	cmp	r3, #64	@ 0x40
 800f924:	d141      	bne.n	800f9aa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	3308      	adds	r3, #8
 800f92c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f930:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f934:	e853 3f00 	ldrex	r3, [r3]
 800f938:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f93c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f940:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f944:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	3308      	adds	r3, #8
 800f94e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f952:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f956:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f95a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f95e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f962:	e841 2300 	strex	r3, r2, [r1]
 800f966:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800f96a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d1d9      	bne.n	800f926 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f976:	2b00      	cmp	r3, #0
 800f978:	d013      	beq.n	800f9a2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f97e:	4a13      	ldr	r2, [pc, #76]	@ (800f9cc <HAL_UART_IRQHandler+0x29c>)
 800f980:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f986:	4618      	mov	r0, r3
 800f988:	f7f7 fc68 	bl	800725c <HAL_DMA_Abort_IT>
 800f98c:	4603      	mov	r3, r0
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d017      	beq.n	800f9c2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f998:	687a      	ldr	r2, [r7, #4]
 800f99a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800f99c:	4610      	mov	r0, r2
 800f99e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9a0:	e00f      	b.n	800f9c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f9a2:	6878      	ldr	r0, [r7, #4]
 800f9a4:	f7f6 fbf6 	bl	8006194 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9a8:	e00b      	b.n	800f9c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f9aa:	6878      	ldr	r0, [r7, #4]
 800f9ac:	f7f6 fbf2 	bl	8006194 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9b0:	e007      	b.n	800f9c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f9b2:	6878      	ldr	r0, [r7, #4]
 800f9b4:	f7f6 fbee 	bl	8006194 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800f9c0:	e198      	b.n	800fcf4 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9c2:	bf00      	nop
    return;
 800f9c4:	e196      	b.n	800fcf4 <HAL_UART_IRQHandler+0x5c4>
 800f9c6:	bf00      	nop
 800f9c8:	04000120 	.word	0x04000120
 800f9cc:	0801096b 	.word	0x0801096b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f9d4:	2b01      	cmp	r3, #1
 800f9d6:	f040 8166 	bne.w	800fca6 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f9da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f9de:	f003 0310 	and.w	r3, r3, #16
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	f000 815f 	beq.w	800fca6 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f9e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f9ec:	f003 0310 	and.w	r3, r3, #16
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	f000 8158 	beq.w	800fca6 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	2210      	movs	r2, #16
 800f9fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	689b      	ldr	r3, [r3, #8]
 800fa04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa08:	2b40      	cmp	r3, #64	@ 0x40
 800fa0a:	f040 80d0 	bne.w	800fbae <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	685b      	ldr	r3, [r3, #4]
 800fa16:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fa1a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	f000 80ab 	beq.w	800fb7a <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800fa2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fa2e:	429a      	cmp	r2, r3
 800fa30:	f080 80a3 	bcs.w	800fb7a <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fa3a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa42:	69db      	ldr	r3, [r3, #28]
 800fa44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fa48:	f000 8086 	beq.w	800fb58 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800fa58:	e853 3f00 	ldrex	r3, [r3]
 800fa5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800fa60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fa64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fa68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	461a      	mov	r2, r3
 800fa72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fa76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fa7a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800fa82:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fa86:	e841 2300 	strex	r3, r2, [r1]
 800fa8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800fa8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d1da      	bne.n	800fa4c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	3308      	adds	r3, #8
 800fa9c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800faa0:	e853 3f00 	ldrex	r3, [r3]
 800faa4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800faa6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800faa8:	f023 0301 	bic.w	r3, r3, #1
 800faac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	3308      	adds	r3, #8
 800fab6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800faba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800fabe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fac0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800fac2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800fac6:	e841 2300 	strex	r3, r2, [r1]
 800faca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800facc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800face:	2b00      	cmp	r3, #0
 800fad0:	d1e1      	bne.n	800fa96 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	3308      	adds	r3, #8
 800fad8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fada:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fadc:	e853 3f00 	ldrex	r3, [r3]
 800fae0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800fae2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fae4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fae8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	3308      	adds	r3, #8
 800faf2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800faf6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800faf8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fafa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800fafc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fafe:	e841 2300 	strex	r3, r2, [r1]
 800fb02:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800fb04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d1e3      	bne.n	800fad2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	2220      	movs	r2, #32
 800fb0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	2200      	movs	r2, #0
 800fb16:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fb20:	e853 3f00 	ldrex	r3, [r3]
 800fb24:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fb26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fb28:	f023 0310 	bic.w	r3, r3, #16
 800fb2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	461a      	mov	r2, r3
 800fb36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fb3a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fb3c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb3e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fb40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fb42:	e841 2300 	strex	r3, r2, [r1]
 800fb46:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fb48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d1e4      	bne.n	800fb18 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fb52:	4618      	mov	r0, r3
 800fb54:	f7f7 fb12 	bl	800717c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2202      	movs	r2, #2
 800fb5c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800fb6a:	b29b      	uxth	r3, r3
 800fb6c:	1ad3      	subs	r3, r2, r3
 800fb6e:	b29b      	uxth	r3, r3
 800fb70:	4619      	mov	r1, r3
 800fb72:	6878      	ldr	r0, [r7, #4]
 800fb74:	f000 f8d2 	bl	800fd1c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800fb78:	e0be      	b.n	800fcf8 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800fb80:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fb84:	429a      	cmp	r2, r3
 800fb86:	f040 80b7 	bne.w	800fcf8 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fb8e:	69db      	ldr	r3, [r3, #28]
 800fb90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fb94:	f040 80b0 	bne.w	800fcf8 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	2202      	movs	r2, #2
 800fb9c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800fba4:	4619      	mov	r1, r3
 800fba6:	6878      	ldr	r0, [r7, #4]
 800fba8:	f000 f8b8 	bl	800fd1c <HAL_UARTEx_RxEventCallback>
      return;
 800fbac:	e0a4      	b.n	800fcf8 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800fbba:	b29b      	uxth	r3, r3
 800fbbc:	1ad3      	subs	r3, r2, r3
 800fbbe:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800fbc8:	b29b      	uxth	r3, r3
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	f000 8096 	beq.w	800fcfc <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800fbd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	f000 8091 	beq.w	800fcfc <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbe2:	e853 3f00 	ldrex	r3, [r3]
 800fbe6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fbe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fbea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fbee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	461a      	mov	r2, r3
 800fbf8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800fbfc:	647b      	str	r3, [r7, #68]	@ 0x44
 800fbfe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fc02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fc04:	e841 2300 	strex	r3, r2, [r1]
 800fc08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fc0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d1e4      	bne.n	800fbda <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	3308      	adds	r3, #8
 800fc16:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc1a:	e853 3f00 	ldrex	r3, [r3]
 800fc1e:	623b      	str	r3, [r7, #32]
   return(result);
 800fc20:	6a3b      	ldr	r3, [r7, #32]
 800fc22:	f023 0301 	bic.w	r3, r3, #1
 800fc26:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	3308      	adds	r3, #8
 800fc30:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800fc34:	633a      	str	r2, [r7, #48]	@ 0x30
 800fc36:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fc3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc3c:	e841 2300 	strex	r3, r2, [r1]
 800fc40:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fc42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d1e3      	bne.n	800fc10 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	2220      	movs	r2, #32
 800fc4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	2200      	movs	r2, #0
 800fc54:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	2200      	movs	r2, #0
 800fc5a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc62:	693b      	ldr	r3, [r7, #16]
 800fc64:	e853 3f00 	ldrex	r3, [r3]
 800fc68:	60fb      	str	r3, [r7, #12]
   return(result);
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	f023 0310 	bic.w	r3, r3, #16
 800fc70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	461a      	mov	r2, r3
 800fc7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800fc7e:	61fb      	str	r3, [r7, #28]
 800fc80:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc82:	69b9      	ldr	r1, [r7, #24]
 800fc84:	69fa      	ldr	r2, [r7, #28]
 800fc86:	e841 2300 	strex	r3, r2, [r1]
 800fc8a:	617b      	str	r3, [r7, #20]
   return(result);
 800fc8c:	697b      	ldr	r3, [r7, #20]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d1e4      	bne.n	800fc5c <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	2202      	movs	r2, #2
 800fc96:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fc98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fc9c:	4619      	mov	r1, r3
 800fc9e:	6878      	ldr	r0, [r7, #4]
 800fca0:	f000 f83c 	bl	800fd1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fca4:	e02a      	b.n	800fcfc <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800fca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fcaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d00e      	beq.n	800fcd0 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800fcb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fcb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d008      	beq.n	800fcd0 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d01c      	beq.n	800fd00 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fcca:	6878      	ldr	r0, [r7, #4]
 800fccc:	4798      	blx	r3
    }
    return;
 800fcce:	e017      	b.n	800fd00 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fcd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fcd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d012      	beq.n	800fd02 <HAL_UART_IRQHandler+0x5d2>
 800fcdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d00c      	beq.n	800fd02 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800fce8:	6878      	ldr	r0, [r7, #4]
 800fcea:	f000 fe50 	bl	801098e <UART_EndTransmit_IT>
    return;
 800fcee:	e008      	b.n	800fd02 <HAL_UART_IRQHandler+0x5d2>
      return;
 800fcf0:	bf00      	nop
 800fcf2:	e006      	b.n	800fd02 <HAL_UART_IRQHandler+0x5d2>
    return;
 800fcf4:	bf00      	nop
 800fcf6:	e004      	b.n	800fd02 <HAL_UART_IRQHandler+0x5d2>
      return;
 800fcf8:	bf00      	nop
 800fcfa:	e002      	b.n	800fd02 <HAL_UART_IRQHandler+0x5d2>
      return;
 800fcfc:	bf00      	nop
 800fcfe:	e000      	b.n	800fd02 <HAL_UART_IRQHandler+0x5d2>
    return;
 800fd00:	bf00      	nop
  }

}
 800fd02:	37e8      	adds	r7, #232	@ 0xe8
 800fd04:	46bd      	mov	sp, r7
 800fd06:	bd80      	pop	{r7, pc}

0800fd08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fd08:	b480      	push	{r7}
 800fd0a:	b083      	sub	sp, #12
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fd10:	bf00      	nop
 800fd12:	370c      	adds	r7, #12
 800fd14:	46bd      	mov	sp, r7
 800fd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1a:	4770      	bx	lr

0800fd1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fd1c:	b480      	push	{r7}
 800fd1e:	b083      	sub	sp, #12
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
 800fd24:	460b      	mov	r3, r1
 800fd26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fd28:	bf00      	nop
 800fd2a:	370c      	adds	r7, #12
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd32:	4770      	bx	lr

0800fd34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b088      	sub	sp, #32
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	689a      	ldr	r2, [r3, #8]
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	691b      	ldr	r3, [r3, #16]
 800fd48:	431a      	orrs	r2, r3
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	695b      	ldr	r3, [r3, #20]
 800fd4e:	431a      	orrs	r2, r3
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	69db      	ldr	r3, [r3, #28]
 800fd54:	4313      	orrs	r3, r2
 800fd56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	681a      	ldr	r2, [r3, #0]
 800fd5e:	4ba6      	ldr	r3, [pc, #664]	@ (800fff8 <UART_SetConfig+0x2c4>)
 800fd60:	4013      	ands	r3, r2
 800fd62:	687a      	ldr	r2, [r7, #4]
 800fd64:	6812      	ldr	r2, [r2, #0]
 800fd66:	6979      	ldr	r1, [r7, #20]
 800fd68:	430b      	orrs	r3, r1
 800fd6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	685b      	ldr	r3, [r3, #4]
 800fd72:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	68da      	ldr	r2, [r3, #12]
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	430a      	orrs	r2, r1
 800fd80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	699b      	ldr	r3, [r3, #24]
 800fd86:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	6a1b      	ldr	r3, [r3, #32]
 800fd8c:	697a      	ldr	r2, [r7, #20]
 800fd8e:	4313      	orrs	r3, r2
 800fd90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	689b      	ldr	r3, [r3, #8]
 800fd98:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	697a      	ldr	r2, [r7, #20]
 800fda2:	430a      	orrs	r2, r1
 800fda4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	4a94      	ldr	r2, [pc, #592]	@ (800fffc <UART_SetConfig+0x2c8>)
 800fdac:	4293      	cmp	r3, r2
 800fdae:	d120      	bne.n	800fdf2 <UART_SetConfig+0xbe>
 800fdb0:	4b93      	ldr	r3, [pc, #588]	@ (8010000 <UART_SetConfig+0x2cc>)
 800fdb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fdb6:	f003 0303 	and.w	r3, r3, #3
 800fdba:	2b03      	cmp	r3, #3
 800fdbc:	d816      	bhi.n	800fdec <UART_SetConfig+0xb8>
 800fdbe:	a201      	add	r2, pc, #4	@ (adr r2, 800fdc4 <UART_SetConfig+0x90>)
 800fdc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdc4:	0800fdd5 	.word	0x0800fdd5
 800fdc8:	0800fde1 	.word	0x0800fde1
 800fdcc:	0800fddb 	.word	0x0800fddb
 800fdd0:	0800fde7 	.word	0x0800fde7
 800fdd4:	2301      	movs	r3, #1
 800fdd6:	77fb      	strb	r3, [r7, #31]
 800fdd8:	e150      	b.n	801007c <UART_SetConfig+0x348>
 800fdda:	2302      	movs	r3, #2
 800fddc:	77fb      	strb	r3, [r7, #31]
 800fdde:	e14d      	b.n	801007c <UART_SetConfig+0x348>
 800fde0:	2304      	movs	r3, #4
 800fde2:	77fb      	strb	r3, [r7, #31]
 800fde4:	e14a      	b.n	801007c <UART_SetConfig+0x348>
 800fde6:	2308      	movs	r3, #8
 800fde8:	77fb      	strb	r3, [r7, #31]
 800fdea:	e147      	b.n	801007c <UART_SetConfig+0x348>
 800fdec:	2310      	movs	r3, #16
 800fdee:	77fb      	strb	r3, [r7, #31]
 800fdf0:	e144      	b.n	801007c <UART_SetConfig+0x348>
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	4a83      	ldr	r2, [pc, #524]	@ (8010004 <UART_SetConfig+0x2d0>)
 800fdf8:	4293      	cmp	r3, r2
 800fdfa:	d132      	bne.n	800fe62 <UART_SetConfig+0x12e>
 800fdfc:	4b80      	ldr	r3, [pc, #512]	@ (8010000 <UART_SetConfig+0x2cc>)
 800fdfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fe02:	f003 030c 	and.w	r3, r3, #12
 800fe06:	2b0c      	cmp	r3, #12
 800fe08:	d828      	bhi.n	800fe5c <UART_SetConfig+0x128>
 800fe0a:	a201      	add	r2, pc, #4	@ (adr r2, 800fe10 <UART_SetConfig+0xdc>)
 800fe0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe10:	0800fe45 	.word	0x0800fe45
 800fe14:	0800fe5d 	.word	0x0800fe5d
 800fe18:	0800fe5d 	.word	0x0800fe5d
 800fe1c:	0800fe5d 	.word	0x0800fe5d
 800fe20:	0800fe51 	.word	0x0800fe51
 800fe24:	0800fe5d 	.word	0x0800fe5d
 800fe28:	0800fe5d 	.word	0x0800fe5d
 800fe2c:	0800fe5d 	.word	0x0800fe5d
 800fe30:	0800fe4b 	.word	0x0800fe4b
 800fe34:	0800fe5d 	.word	0x0800fe5d
 800fe38:	0800fe5d 	.word	0x0800fe5d
 800fe3c:	0800fe5d 	.word	0x0800fe5d
 800fe40:	0800fe57 	.word	0x0800fe57
 800fe44:	2300      	movs	r3, #0
 800fe46:	77fb      	strb	r3, [r7, #31]
 800fe48:	e118      	b.n	801007c <UART_SetConfig+0x348>
 800fe4a:	2302      	movs	r3, #2
 800fe4c:	77fb      	strb	r3, [r7, #31]
 800fe4e:	e115      	b.n	801007c <UART_SetConfig+0x348>
 800fe50:	2304      	movs	r3, #4
 800fe52:	77fb      	strb	r3, [r7, #31]
 800fe54:	e112      	b.n	801007c <UART_SetConfig+0x348>
 800fe56:	2308      	movs	r3, #8
 800fe58:	77fb      	strb	r3, [r7, #31]
 800fe5a:	e10f      	b.n	801007c <UART_SetConfig+0x348>
 800fe5c:	2310      	movs	r3, #16
 800fe5e:	77fb      	strb	r3, [r7, #31]
 800fe60:	e10c      	b.n	801007c <UART_SetConfig+0x348>
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	4a68      	ldr	r2, [pc, #416]	@ (8010008 <UART_SetConfig+0x2d4>)
 800fe68:	4293      	cmp	r3, r2
 800fe6a:	d120      	bne.n	800feae <UART_SetConfig+0x17a>
 800fe6c:	4b64      	ldr	r3, [pc, #400]	@ (8010000 <UART_SetConfig+0x2cc>)
 800fe6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fe72:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800fe76:	2b30      	cmp	r3, #48	@ 0x30
 800fe78:	d013      	beq.n	800fea2 <UART_SetConfig+0x16e>
 800fe7a:	2b30      	cmp	r3, #48	@ 0x30
 800fe7c:	d814      	bhi.n	800fea8 <UART_SetConfig+0x174>
 800fe7e:	2b20      	cmp	r3, #32
 800fe80:	d009      	beq.n	800fe96 <UART_SetConfig+0x162>
 800fe82:	2b20      	cmp	r3, #32
 800fe84:	d810      	bhi.n	800fea8 <UART_SetConfig+0x174>
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d002      	beq.n	800fe90 <UART_SetConfig+0x15c>
 800fe8a:	2b10      	cmp	r3, #16
 800fe8c:	d006      	beq.n	800fe9c <UART_SetConfig+0x168>
 800fe8e:	e00b      	b.n	800fea8 <UART_SetConfig+0x174>
 800fe90:	2300      	movs	r3, #0
 800fe92:	77fb      	strb	r3, [r7, #31]
 800fe94:	e0f2      	b.n	801007c <UART_SetConfig+0x348>
 800fe96:	2302      	movs	r3, #2
 800fe98:	77fb      	strb	r3, [r7, #31]
 800fe9a:	e0ef      	b.n	801007c <UART_SetConfig+0x348>
 800fe9c:	2304      	movs	r3, #4
 800fe9e:	77fb      	strb	r3, [r7, #31]
 800fea0:	e0ec      	b.n	801007c <UART_SetConfig+0x348>
 800fea2:	2308      	movs	r3, #8
 800fea4:	77fb      	strb	r3, [r7, #31]
 800fea6:	e0e9      	b.n	801007c <UART_SetConfig+0x348>
 800fea8:	2310      	movs	r3, #16
 800feaa:	77fb      	strb	r3, [r7, #31]
 800feac:	e0e6      	b.n	801007c <UART_SetConfig+0x348>
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	4a56      	ldr	r2, [pc, #344]	@ (801000c <UART_SetConfig+0x2d8>)
 800feb4:	4293      	cmp	r3, r2
 800feb6:	d120      	bne.n	800fefa <UART_SetConfig+0x1c6>
 800feb8:	4b51      	ldr	r3, [pc, #324]	@ (8010000 <UART_SetConfig+0x2cc>)
 800feba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800febe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800fec2:	2bc0      	cmp	r3, #192	@ 0xc0
 800fec4:	d013      	beq.n	800feee <UART_SetConfig+0x1ba>
 800fec6:	2bc0      	cmp	r3, #192	@ 0xc0
 800fec8:	d814      	bhi.n	800fef4 <UART_SetConfig+0x1c0>
 800feca:	2b80      	cmp	r3, #128	@ 0x80
 800fecc:	d009      	beq.n	800fee2 <UART_SetConfig+0x1ae>
 800fece:	2b80      	cmp	r3, #128	@ 0x80
 800fed0:	d810      	bhi.n	800fef4 <UART_SetConfig+0x1c0>
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d002      	beq.n	800fedc <UART_SetConfig+0x1a8>
 800fed6:	2b40      	cmp	r3, #64	@ 0x40
 800fed8:	d006      	beq.n	800fee8 <UART_SetConfig+0x1b4>
 800feda:	e00b      	b.n	800fef4 <UART_SetConfig+0x1c0>
 800fedc:	2300      	movs	r3, #0
 800fede:	77fb      	strb	r3, [r7, #31]
 800fee0:	e0cc      	b.n	801007c <UART_SetConfig+0x348>
 800fee2:	2302      	movs	r3, #2
 800fee4:	77fb      	strb	r3, [r7, #31]
 800fee6:	e0c9      	b.n	801007c <UART_SetConfig+0x348>
 800fee8:	2304      	movs	r3, #4
 800feea:	77fb      	strb	r3, [r7, #31]
 800feec:	e0c6      	b.n	801007c <UART_SetConfig+0x348>
 800feee:	2308      	movs	r3, #8
 800fef0:	77fb      	strb	r3, [r7, #31]
 800fef2:	e0c3      	b.n	801007c <UART_SetConfig+0x348>
 800fef4:	2310      	movs	r3, #16
 800fef6:	77fb      	strb	r3, [r7, #31]
 800fef8:	e0c0      	b.n	801007c <UART_SetConfig+0x348>
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	4a44      	ldr	r2, [pc, #272]	@ (8010010 <UART_SetConfig+0x2dc>)
 800ff00:	4293      	cmp	r3, r2
 800ff02:	d125      	bne.n	800ff50 <UART_SetConfig+0x21c>
 800ff04:	4b3e      	ldr	r3, [pc, #248]	@ (8010000 <UART_SetConfig+0x2cc>)
 800ff06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ff0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ff0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ff12:	d017      	beq.n	800ff44 <UART_SetConfig+0x210>
 800ff14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ff18:	d817      	bhi.n	800ff4a <UART_SetConfig+0x216>
 800ff1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ff1e:	d00b      	beq.n	800ff38 <UART_SetConfig+0x204>
 800ff20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ff24:	d811      	bhi.n	800ff4a <UART_SetConfig+0x216>
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d003      	beq.n	800ff32 <UART_SetConfig+0x1fe>
 800ff2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ff2e:	d006      	beq.n	800ff3e <UART_SetConfig+0x20a>
 800ff30:	e00b      	b.n	800ff4a <UART_SetConfig+0x216>
 800ff32:	2300      	movs	r3, #0
 800ff34:	77fb      	strb	r3, [r7, #31]
 800ff36:	e0a1      	b.n	801007c <UART_SetConfig+0x348>
 800ff38:	2302      	movs	r3, #2
 800ff3a:	77fb      	strb	r3, [r7, #31]
 800ff3c:	e09e      	b.n	801007c <UART_SetConfig+0x348>
 800ff3e:	2304      	movs	r3, #4
 800ff40:	77fb      	strb	r3, [r7, #31]
 800ff42:	e09b      	b.n	801007c <UART_SetConfig+0x348>
 800ff44:	2308      	movs	r3, #8
 800ff46:	77fb      	strb	r3, [r7, #31]
 800ff48:	e098      	b.n	801007c <UART_SetConfig+0x348>
 800ff4a:	2310      	movs	r3, #16
 800ff4c:	77fb      	strb	r3, [r7, #31]
 800ff4e:	e095      	b.n	801007c <UART_SetConfig+0x348>
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	4a2f      	ldr	r2, [pc, #188]	@ (8010014 <UART_SetConfig+0x2e0>)
 800ff56:	4293      	cmp	r3, r2
 800ff58:	d125      	bne.n	800ffa6 <UART_SetConfig+0x272>
 800ff5a:	4b29      	ldr	r3, [pc, #164]	@ (8010000 <UART_SetConfig+0x2cc>)
 800ff5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ff60:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ff64:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ff68:	d017      	beq.n	800ff9a <UART_SetConfig+0x266>
 800ff6a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ff6e:	d817      	bhi.n	800ffa0 <UART_SetConfig+0x26c>
 800ff70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ff74:	d00b      	beq.n	800ff8e <UART_SetConfig+0x25a>
 800ff76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ff7a:	d811      	bhi.n	800ffa0 <UART_SetConfig+0x26c>
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d003      	beq.n	800ff88 <UART_SetConfig+0x254>
 800ff80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ff84:	d006      	beq.n	800ff94 <UART_SetConfig+0x260>
 800ff86:	e00b      	b.n	800ffa0 <UART_SetConfig+0x26c>
 800ff88:	2301      	movs	r3, #1
 800ff8a:	77fb      	strb	r3, [r7, #31]
 800ff8c:	e076      	b.n	801007c <UART_SetConfig+0x348>
 800ff8e:	2302      	movs	r3, #2
 800ff90:	77fb      	strb	r3, [r7, #31]
 800ff92:	e073      	b.n	801007c <UART_SetConfig+0x348>
 800ff94:	2304      	movs	r3, #4
 800ff96:	77fb      	strb	r3, [r7, #31]
 800ff98:	e070      	b.n	801007c <UART_SetConfig+0x348>
 800ff9a:	2308      	movs	r3, #8
 800ff9c:	77fb      	strb	r3, [r7, #31]
 800ff9e:	e06d      	b.n	801007c <UART_SetConfig+0x348>
 800ffa0:	2310      	movs	r3, #16
 800ffa2:	77fb      	strb	r3, [r7, #31]
 800ffa4:	e06a      	b.n	801007c <UART_SetConfig+0x348>
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	4a1b      	ldr	r2, [pc, #108]	@ (8010018 <UART_SetConfig+0x2e4>)
 800ffac:	4293      	cmp	r3, r2
 800ffae:	d138      	bne.n	8010022 <UART_SetConfig+0x2ee>
 800ffb0:	4b13      	ldr	r3, [pc, #76]	@ (8010000 <UART_SetConfig+0x2cc>)
 800ffb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ffb6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800ffba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ffbe:	d017      	beq.n	800fff0 <UART_SetConfig+0x2bc>
 800ffc0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ffc4:	d82a      	bhi.n	801001c <UART_SetConfig+0x2e8>
 800ffc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ffca:	d00b      	beq.n	800ffe4 <UART_SetConfig+0x2b0>
 800ffcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ffd0:	d824      	bhi.n	801001c <UART_SetConfig+0x2e8>
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d003      	beq.n	800ffde <UART_SetConfig+0x2aa>
 800ffd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ffda:	d006      	beq.n	800ffea <UART_SetConfig+0x2b6>
 800ffdc:	e01e      	b.n	801001c <UART_SetConfig+0x2e8>
 800ffde:	2300      	movs	r3, #0
 800ffe0:	77fb      	strb	r3, [r7, #31]
 800ffe2:	e04b      	b.n	801007c <UART_SetConfig+0x348>
 800ffe4:	2302      	movs	r3, #2
 800ffe6:	77fb      	strb	r3, [r7, #31]
 800ffe8:	e048      	b.n	801007c <UART_SetConfig+0x348>
 800ffea:	2304      	movs	r3, #4
 800ffec:	77fb      	strb	r3, [r7, #31]
 800ffee:	e045      	b.n	801007c <UART_SetConfig+0x348>
 800fff0:	2308      	movs	r3, #8
 800fff2:	77fb      	strb	r3, [r7, #31]
 800fff4:	e042      	b.n	801007c <UART_SetConfig+0x348>
 800fff6:	bf00      	nop
 800fff8:	efff69f3 	.word	0xefff69f3
 800fffc:	40011000 	.word	0x40011000
 8010000:	40023800 	.word	0x40023800
 8010004:	40004400 	.word	0x40004400
 8010008:	40004800 	.word	0x40004800
 801000c:	40004c00 	.word	0x40004c00
 8010010:	40005000 	.word	0x40005000
 8010014:	40011400 	.word	0x40011400
 8010018:	40007800 	.word	0x40007800
 801001c:	2310      	movs	r3, #16
 801001e:	77fb      	strb	r3, [r7, #31]
 8010020:	e02c      	b.n	801007c <UART_SetConfig+0x348>
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	4a72      	ldr	r2, [pc, #456]	@ (80101f0 <UART_SetConfig+0x4bc>)
 8010028:	4293      	cmp	r3, r2
 801002a:	d125      	bne.n	8010078 <UART_SetConfig+0x344>
 801002c:	4b71      	ldr	r3, [pc, #452]	@ (80101f4 <UART_SetConfig+0x4c0>)
 801002e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010032:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8010036:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 801003a:	d017      	beq.n	801006c <UART_SetConfig+0x338>
 801003c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8010040:	d817      	bhi.n	8010072 <UART_SetConfig+0x33e>
 8010042:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010046:	d00b      	beq.n	8010060 <UART_SetConfig+0x32c>
 8010048:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801004c:	d811      	bhi.n	8010072 <UART_SetConfig+0x33e>
 801004e:	2b00      	cmp	r3, #0
 8010050:	d003      	beq.n	801005a <UART_SetConfig+0x326>
 8010052:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010056:	d006      	beq.n	8010066 <UART_SetConfig+0x332>
 8010058:	e00b      	b.n	8010072 <UART_SetConfig+0x33e>
 801005a:	2300      	movs	r3, #0
 801005c:	77fb      	strb	r3, [r7, #31]
 801005e:	e00d      	b.n	801007c <UART_SetConfig+0x348>
 8010060:	2302      	movs	r3, #2
 8010062:	77fb      	strb	r3, [r7, #31]
 8010064:	e00a      	b.n	801007c <UART_SetConfig+0x348>
 8010066:	2304      	movs	r3, #4
 8010068:	77fb      	strb	r3, [r7, #31]
 801006a:	e007      	b.n	801007c <UART_SetConfig+0x348>
 801006c:	2308      	movs	r3, #8
 801006e:	77fb      	strb	r3, [r7, #31]
 8010070:	e004      	b.n	801007c <UART_SetConfig+0x348>
 8010072:	2310      	movs	r3, #16
 8010074:	77fb      	strb	r3, [r7, #31]
 8010076:	e001      	b.n	801007c <UART_SetConfig+0x348>
 8010078:	2310      	movs	r3, #16
 801007a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	69db      	ldr	r3, [r3, #28]
 8010080:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010084:	d15b      	bne.n	801013e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8010086:	7ffb      	ldrb	r3, [r7, #31]
 8010088:	2b08      	cmp	r3, #8
 801008a:	d828      	bhi.n	80100de <UART_SetConfig+0x3aa>
 801008c:	a201      	add	r2, pc, #4	@ (adr r2, 8010094 <UART_SetConfig+0x360>)
 801008e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010092:	bf00      	nop
 8010094:	080100b9 	.word	0x080100b9
 8010098:	080100c1 	.word	0x080100c1
 801009c:	080100c9 	.word	0x080100c9
 80100a0:	080100df 	.word	0x080100df
 80100a4:	080100cf 	.word	0x080100cf
 80100a8:	080100df 	.word	0x080100df
 80100ac:	080100df 	.word	0x080100df
 80100b0:	080100df 	.word	0x080100df
 80100b4:	080100d7 	.word	0x080100d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80100b8:	f7fb f9f0 	bl	800b49c <HAL_RCC_GetPCLK1Freq>
 80100bc:	61b8      	str	r0, [r7, #24]
        break;
 80100be:	e013      	b.n	80100e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80100c0:	f7fb fa00 	bl	800b4c4 <HAL_RCC_GetPCLK2Freq>
 80100c4:	61b8      	str	r0, [r7, #24]
        break;
 80100c6:	e00f      	b.n	80100e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80100c8:	4b4b      	ldr	r3, [pc, #300]	@ (80101f8 <UART_SetConfig+0x4c4>)
 80100ca:	61bb      	str	r3, [r7, #24]
        break;
 80100cc:	e00c      	b.n	80100e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80100ce:	f7fb f913 	bl	800b2f8 <HAL_RCC_GetSysClockFreq>
 80100d2:	61b8      	str	r0, [r7, #24]
        break;
 80100d4:	e008      	b.n	80100e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80100d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80100da:	61bb      	str	r3, [r7, #24]
        break;
 80100dc:	e004      	b.n	80100e8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80100de:	2300      	movs	r3, #0
 80100e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80100e2:	2301      	movs	r3, #1
 80100e4:	77bb      	strb	r3, [r7, #30]
        break;
 80100e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80100e8:	69bb      	ldr	r3, [r7, #24]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d074      	beq.n	80101d8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80100ee:	69bb      	ldr	r3, [r7, #24]
 80100f0:	005a      	lsls	r2, r3, #1
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	685b      	ldr	r3, [r3, #4]
 80100f6:	085b      	lsrs	r3, r3, #1
 80100f8:	441a      	add	r2, r3
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	685b      	ldr	r3, [r3, #4]
 80100fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8010102:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010104:	693b      	ldr	r3, [r7, #16]
 8010106:	2b0f      	cmp	r3, #15
 8010108:	d916      	bls.n	8010138 <UART_SetConfig+0x404>
 801010a:	693b      	ldr	r3, [r7, #16]
 801010c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010110:	d212      	bcs.n	8010138 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010112:	693b      	ldr	r3, [r7, #16]
 8010114:	b29b      	uxth	r3, r3
 8010116:	f023 030f 	bic.w	r3, r3, #15
 801011a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801011c:	693b      	ldr	r3, [r7, #16]
 801011e:	085b      	lsrs	r3, r3, #1
 8010120:	b29b      	uxth	r3, r3
 8010122:	f003 0307 	and.w	r3, r3, #7
 8010126:	b29a      	uxth	r2, r3
 8010128:	89fb      	ldrh	r3, [r7, #14]
 801012a:	4313      	orrs	r3, r2
 801012c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	89fa      	ldrh	r2, [r7, #14]
 8010134:	60da      	str	r2, [r3, #12]
 8010136:	e04f      	b.n	80101d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8010138:	2301      	movs	r3, #1
 801013a:	77bb      	strb	r3, [r7, #30]
 801013c:	e04c      	b.n	80101d8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 801013e:	7ffb      	ldrb	r3, [r7, #31]
 8010140:	2b08      	cmp	r3, #8
 8010142:	d828      	bhi.n	8010196 <UART_SetConfig+0x462>
 8010144:	a201      	add	r2, pc, #4	@ (adr r2, 801014c <UART_SetConfig+0x418>)
 8010146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801014a:	bf00      	nop
 801014c:	08010171 	.word	0x08010171
 8010150:	08010179 	.word	0x08010179
 8010154:	08010181 	.word	0x08010181
 8010158:	08010197 	.word	0x08010197
 801015c:	08010187 	.word	0x08010187
 8010160:	08010197 	.word	0x08010197
 8010164:	08010197 	.word	0x08010197
 8010168:	08010197 	.word	0x08010197
 801016c:	0801018f 	.word	0x0801018f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010170:	f7fb f994 	bl	800b49c <HAL_RCC_GetPCLK1Freq>
 8010174:	61b8      	str	r0, [r7, #24]
        break;
 8010176:	e013      	b.n	80101a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010178:	f7fb f9a4 	bl	800b4c4 <HAL_RCC_GetPCLK2Freq>
 801017c:	61b8      	str	r0, [r7, #24]
        break;
 801017e:	e00f      	b.n	80101a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010180:	4b1d      	ldr	r3, [pc, #116]	@ (80101f8 <UART_SetConfig+0x4c4>)
 8010182:	61bb      	str	r3, [r7, #24]
        break;
 8010184:	e00c      	b.n	80101a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010186:	f7fb f8b7 	bl	800b2f8 <HAL_RCC_GetSysClockFreq>
 801018a:	61b8      	str	r0, [r7, #24]
        break;
 801018c:	e008      	b.n	80101a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801018e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010192:	61bb      	str	r3, [r7, #24]
        break;
 8010194:	e004      	b.n	80101a0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8010196:	2300      	movs	r3, #0
 8010198:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801019a:	2301      	movs	r3, #1
 801019c:	77bb      	strb	r3, [r7, #30]
        break;
 801019e:	bf00      	nop
    }

    if (pclk != 0U)
 80101a0:	69bb      	ldr	r3, [r7, #24]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d018      	beq.n	80101d8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	685b      	ldr	r3, [r3, #4]
 80101aa:	085a      	lsrs	r2, r3, #1
 80101ac:	69bb      	ldr	r3, [r7, #24]
 80101ae:	441a      	add	r2, r3
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	685b      	ldr	r3, [r3, #4]
 80101b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80101b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80101ba:	693b      	ldr	r3, [r7, #16]
 80101bc:	2b0f      	cmp	r3, #15
 80101be:	d909      	bls.n	80101d4 <UART_SetConfig+0x4a0>
 80101c0:	693b      	ldr	r3, [r7, #16]
 80101c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80101c6:	d205      	bcs.n	80101d4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80101c8:	693b      	ldr	r3, [r7, #16]
 80101ca:	b29a      	uxth	r2, r3
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	60da      	str	r2, [r3, #12]
 80101d2:	e001      	b.n	80101d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80101d4:	2301      	movs	r3, #1
 80101d6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	2200      	movs	r2, #0
 80101dc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	2200      	movs	r2, #0
 80101e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80101e4:	7fbb      	ldrb	r3, [r7, #30]
}
 80101e6:	4618      	mov	r0, r3
 80101e8:	3720      	adds	r7, #32
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bd80      	pop	{r7, pc}
 80101ee:	bf00      	nop
 80101f0:	40007c00 	.word	0x40007c00
 80101f4:	40023800 	.word	0x40023800
 80101f8:	00f42400 	.word	0x00f42400

080101fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80101fc:	b480      	push	{r7}
 80101fe:	b083      	sub	sp, #12
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010208:	f003 0308 	and.w	r3, r3, #8
 801020c:	2b00      	cmp	r3, #0
 801020e:	d00a      	beq.n	8010226 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	685b      	ldr	r3, [r3, #4]
 8010216:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	430a      	orrs	r2, r1
 8010224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801022a:	f003 0301 	and.w	r3, r3, #1
 801022e:	2b00      	cmp	r3, #0
 8010230:	d00a      	beq.n	8010248 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	685b      	ldr	r3, [r3, #4]
 8010238:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	430a      	orrs	r2, r1
 8010246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801024c:	f003 0302 	and.w	r3, r3, #2
 8010250:	2b00      	cmp	r3, #0
 8010252:	d00a      	beq.n	801026a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	685b      	ldr	r3, [r3, #4]
 801025a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	430a      	orrs	r2, r1
 8010268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801026e:	f003 0304 	and.w	r3, r3, #4
 8010272:	2b00      	cmp	r3, #0
 8010274:	d00a      	beq.n	801028c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	685b      	ldr	r3, [r3, #4]
 801027c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	430a      	orrs	r2, r1
 801028a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010290:	f003 0310 	and.w	r3, r3, #16
 8010294:	2b00      	cmp	r3, #0
 8010296:	d00a      	beq.n	80102ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	689b      	ldr	r3, [r3, #8]
 801029e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	430a      	orrs	r2, r1
 80102ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102b2:	f003 0320 	and.w	r3, r3, #32
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d00a      	beq.n	80102d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	689b      	ldr	r3, [r3, #8]
 80102c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	430a      	orrs	r2, r1
 80102ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d01a      	beq.n	8010312 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	685b      	ldr	r3, [r3, #4]
 80102e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	430a      	orrs	r2, r1
 80102f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80102f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80102fa:	d10a      	bne.n	8010312 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	685b      	ldr	r3, [r3, #4]
 8010302:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	430a      	orrs	r2, r1
 8010310:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801031a:	2b00      	cmp	r3, #0
 801031c:	d00a      	beq.n	8010334 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	685b      	ldr	r3, [r3, #4]
 8010324:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	430a      	orrs	r2, r1
 8010332:	605a      	str	r2, [r3, #4]
  }
}
 8010334:	bf00      	nop
 8010336:	370c      	adds	r7, #12
 8010338:	46bd      	mov	sp, r7
 801033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033e:	4770      	bx	lr

08010340 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b08c      	sub	sp, #48	@ 0x30
 8010344:	af02      	add	r7, sp, #8
 8010346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	2200      	movs	r2, #0
 801034c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010350:	f7f6 f892 	bl	8006478 <HAL_GetTick>
 8010354:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	f003 0308 	and.w	r3, r3, #8
 8010360:	2b08      	cmp	r3, #8
 8010362:	d12e      	bne.n	80103c2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010364:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010368:	9300      	str	r3, [sp, #0]
 801036a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801036c:	2200      	movs	r2, #0
 801036e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010372:	6878      	ldr	r0, [r7, #4]
 8010374:	f000 f83b 	bl	80103ee <UART_WaitOnFlagUntilTimeout>
 8010378:	4603      	mov	r3, r0
 801037a:	2b00      	cmp	r3, #0
 801037c:	d021      	beq.n	80103c2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010384:	693b      	ldr	r3, [r7, #16]
 8010386:	e853 3f00 	ldrex	r3, [r3]
 801038a:	60fb      	str	r3, [r7, #12]
   return(result);
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010392:	623b      	str	r3, [r7, #32]
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	461a      	mov	r2, r3
 801039a:	6a3b      	ldr	r3, [r7, #32]
 801039c:	61fb      	str	r3, [r7, #28]
 801039e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103a0:	69b9      	ldr	r1, [r7, #24]
 80103a2:	69fa      	ldr	r2, [r7, #28]
 80103a4:	e841 2300 	strex	r3, r2, [r1]
 80103a8:	617b      	str	r3, [r7, #20]
   return(result);
 80103aa:	697b      	ldr	r3, [r7, #20]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d1e6      	bne.n	801037e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	2220      	movs	r2, #32
 80103b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	2200      	movs	r2, #0
 80103ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80103be:	2303      	movs	r3, #3
 80103c0:	e011      	b.n	80103e6 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	2220      	movs	r2, #32
 80103c6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	2220      	movs	r2, #32
 80103cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	2200      	movs	r2, #0
 80103d4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	2200      	movs	r2, #0
 80103da:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	2200      	movs	r2, #0
 80103e0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80103e4:	2300      	movs	r3, #0
}
 80103e6:	4618      	mov	r0, r3
 80103e8:	3728      	adds	r7, #40	@ 0x28
 80103ea:	46bd      	mov	sp, r7
 80103ec:	bd80      	pop	{r7, pc}

080103ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80103ee:	b580      	push	{r7, lr}
 80103f0:	b084      	sub	sp, #16
 80103f2:	af00      	add	r7, sp, #0
 80103f4:	60f8      	str	r0, [r7, #12]
 80103f6:	60b9      	str	r1, [r7, #8]
 80103f8:	603b      	str	r3, [r7, #0]
 80103fa:	4613      	mov	r3, r2
 80103fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80103fe:	e04f      	b.n	80104a0 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010400:	69bb      	ldr	r3, [r7, #24]
 8010402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010406:	d04b      	beq.n	80104a0 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010408:	f7f6 f836 	bl	8006478 <HAL_GetTick>
 801040c:	4602      	mov	r2, r0
 801040e:	683b      	ldr	r3, [r7, #0]
 8010410:	1ad3      	subs	r3, r2, r3
 8010412:	69ba      	ldr	r2, [r7, #24]
 8010414:	429a      	cmp	r2, r3
 8010416:	d302      	bcc.n	801041e <UART_WaitOnFlagUntilTimeout+0x30>
 8010418:	69bb      	ldr	r3, [r7, #24]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d101      	bne.n	8010422 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801041e:	2303      	movs	r3, #3
 8010420:	e04e      	b.n	80104c0 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	f003 0304 	and.w	r3, r3, #4
 801042c:	2b00      	cmp	r3, #0
 801042e:	d037      	beq.n	80104a0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010430:	68bb      	ldr	r3, [r7, #8]
 8010432:	2b80      	cmp	r3, #128	@ 0x80
 8010434:	d034      	beq.n	80104a0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010436:	68bb      	ldr	r3, [r7, #8]
 8010438:	2b40      	cmp	r3, #64	@ 0x40
 801043a:	d031      	beq.n	80104a0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	69db      	ldr	r3, [r3, #28]
 8010442:	f003 0308 	and.w	r3, r3, #8
 8010446:	2b08      	cmp	r3, #8
 8010448:	d110      	bne.n	801046c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	2208      	movs	r2, #8
 8010450:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010452:	68f8      	ldr	r0, [r7, #12]
 8010454:	f000 f8fe 	bl	8010654 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	2208      	movs	r2, #8
 801045c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	2200      	movs	r2, #0
 8010464:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8010468:	2301      	movs	r3, #1
 801046a:	e029      	b.n	80104c0 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	69db      	ldr	r3, [r3, #28]
 8010472:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010476:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801047a:	d111      	bne.n	80104a0 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010484:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010486:	68f8      	ldr	r0, [r7, #12]
 8010488:	f000 f8e4 	bl	8010654 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	2220      	movs	r2, #32
 8010490:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	2200      	movs	r2, #0
 8010498:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 801049c:	2303      	movs	r3, #3
 801049e:	e00f      	b.n	80104c0 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	69da      	ldr	r2, [r3, #28]
 80104a6:	68bb      	ldr	r3, [r7, #8]
 80104a8:	4013      	ands	r3, r2
 80104aa:	68ba      	ldr	r2, [r7, #8]
 80104ac:	429a      	cmp	r2, r3
 80104ae:	bf0c      	ite	eq
 80104b0:	2301      	moveq	r3, #1
 80104b2:	2300      	movne	r3, #0
 80104b4:	b2db      	uxtb	r3, r3
 80104b6:	461a      	mov	r2, r3
 80104b8:	79fb      	ldrb	r3, [r7, #7]
 80104ba:	429a      	cmp	r2, r3
 80104bc:	d0a0      	beq.n	8010400 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80104be:	2300      	movs	r3, #0
}
 80104c0:	4618      	mov	r0, r3
 80104c2:	3710      	adds	r7, #16
 80104c4:	46bd      	mov	sp, r7
 80104c6:	bd80      	pop	{r7, pc}

080104c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b096      	sub	sp, #88	@ 0x58
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	60f8      	str	r0, [r7, #12]
 80104d0:	60b9      	str	r1, [r7, #8]
 80104d2:	4613      	mov	r3, r2
 80104d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	68ba      	ldr	r2, [r7, #8]
 80104da:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	88fa      	ldrh	r2, [r7, #6]
 80104e0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	2200      	movs	r2, #0
 80104e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	2222      	movs	r2, #34	@ 0x22
 80104f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d028      	beq.n	801054e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010500:	4a3e      	ldr	r2, [pc, #248]	@ (80105fc <UART_Start_Receive_DMA+0x134>)
 8010502:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010508:	4a3d      	ldr	r2, [pc, #244]	@ (8010600 <UART_Start_Receive_DMA+0x138>)
 801050a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010510:	4a3c      	ldr	r2, [pc, #240]	@ (8010604 <UART_Start_Receive_DMA+0x13c>)
 8010512:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010518:	2200      	movs	r2, #0
 801051a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	3324      	adds	r3, #36	@ 0x24
 8010526:	4619      	mov	r1, r3
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801052c:	461a      	mov	r2, r3
 801052e:	88fb      	ldrh	r3, [r7, #6]
 8010530:	f7f6 fdc4 	bl	80070bc <HAL_DMA_Start_IT>
 8010534:	4603      	mov	r3, r0
 8010536:	2b00      	cmp	r3, #0
 8010538:	d009      	beq.n	801054e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	2210      	movs	r2, #16
 801053e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	2220      	movs	r2, #32
 8010546:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 801054a:	2301      	movs	r3, #1
 801054c:	e051      	b.n	80105f2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	691b      	ldr	r3, [r3, #16]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d018      	beq.n	8010588 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801055c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801055e:	e853 3f00 	ldrex	r3, [r3]
 8010562:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010566:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801056a:	657b      	str	r3, [r7, #84]	@ 0x54
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	461a      	mov	r2, r3
 8010572:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010574:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010576:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010578:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801057a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801057c:	e841 2300 	strex	r3, r2, [r1]
 8010580:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8010582:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010584:	2b00      	cmp	r3, #0
 8010586:	d1e6      	bne.n	8010556 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	3308      	adds	r3, #8
 801058e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010592:	e853 3f00 	ldrex	r3, [r3]
 8010596:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801059a:	f043 0301 	orr.w	r3, r3, #1
 801059e:	653b      	str	r3, [r7, #80]	@ 0x50
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	3308      	adds	r3, #8
 80105a6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80105a8:	637a      	str	r2, [r7, #52]	@ 0x34
 80105aa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105ac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80105ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80105b0:	e841 2300 	strex	r3, r2, [r1]
 80105b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80105b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d1e5      	bne.n	8010588 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	3308      	adds	r3, #8
 80105c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105c4:	697b      	ldr	r3, [r7, #20]
 80105c6:	e853 3f00 	ldrex	r3, [r3]
 80105ca:	613b      	str	r3, [r7, #16]
   return(result);
 80105cc:	693b      	ldr	r3, [r7, #16]
 80105ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80105d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	3308      	adds	r3, #8
 80105da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80105dc:	623a      	str	r2, [r7, #32]
 80105de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105e0:	69f9      	ldr	r1, [r7, #28]
 80105e2:	6a3a      	ldr	r2, [r7, #32]
 80105e4:	e841 2300 	strex	r3, r2, [r1]
 80105e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80105ea:	69bb      	ldr	r3, [r7, #24]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d1e5      	bne.n	80105bc <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80105f0:	2300      	movs	r3, #0
}
 80105f2:	4618      	mov	r0, r3
 80105f4:	3758      	adds	r7, #88	@ 0x58
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bd80      	pop	{r7, pc}
 80105fa:	bf00      	nop
 80105fc:	0801071d 	.word	0x0801071d
 8010600:	0801087b 	.word	0x0801087b
 8010604:	080108ed 	.word	0x080108ed

08010608 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010608:	b480      	push	{r7}
 801060a:	b089      	sub	sp, #36	@ 0x24
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	e853 3f00 	ldrex	r3, [r3]
 801061c:	60bb      	str	r3, [r7, #8]
   return(result);
 801061e:	68bb      	ldr	r3, [r7, #8]
 8010620:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8010624:	61fb      	str	r3, [r7, #28]
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	461a      	mov	r2, r3
 801062c:	69fb      	ldr	r3, [r7, #28]
 801062e:	61bb      	str	r3, [r7, #24]
 8010630:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010632:	6979      	ldr	r1, [r7, #20]
 8010634:	69ba      	ldr	r2, [r7, #24]
 8010636:	e841 2300 	strex	r3, r2, [r1]
 801063a:	613b      	str	r3, [r7, #16]
   return(result);
 801063c:	693b      	ldr	r3, [r7, #16]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d1e6      	bne.n	8010610 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	2220      	movs	r2, #32
 8010646:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8010648:	bf00      	nop
 801064a:	3724      	adds	r7, #36	@ 0x24
 801064c:	46bd      	mov	sp, r7
 801064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010652:	4770      	bx	lr

08010654 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010654:	b480      	push	{r7}
 8010656:	b095      	sub	sp, #84	@ 0x54
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010664:	e853 3f00 	ldrex	r3, [r3]
 8010668:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801066a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801066c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010670:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	461a      	mov	r2, r3
 8010678:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801067a:	643b      	str	r3, [r7, #64]	@ 0x40
 801067c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801067e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010680:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010682:	e841 2300 	strex	r3, r2, [r1]
 8010686:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801068a:	2b00      	cmp	r3, #0
 801068c:	d1e6      	bne.n	801065c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	3308      	adds	r3, #8
 8010694:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010696:	6a3b      	ldr	r3, [r7, #32]
 8010698:	e853 3f00 	ldrex	r3, [r3]
 801069c:	61fb      	str	r3, [r7, #28]
   return(result);
 801069e:	69fb      	ldr	r3, [r7, #28]
 80106a0:	f023 0301 	bic.w	r3, r3, #1
 80106a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	3308      	adds	r3, #8
 80106ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80106ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80106b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80106b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80106b6:	e841 2300 	strex	r3, r2, [r1]
 80106ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80106bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d1e5      	bne.n	801068e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80106c6:	2b01      	cmp	r3, #1
 80106c8:	d118      	bne.n	80106fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	e853 3f00 	ldrex	r3, [r3]
 80106d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80106d8:	68bb      	ldr	r3, [r7, #8]
 80106da:	f023 0310 	bic.w	r3, r3, #16
 80106de:	647b      	str	r3, [r7, #68]	@ 0x44
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	461a      	mov	r2, r3
 80106e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80106e8:	61bb      	str	r3, [r7, #24]
 80106ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106ec:	6979      	ldr	r1, [r7, #20]
 80106ee:	69ba      	ldr	r2, [r7, #24]
 80106f0:	e841 2300 	strex	r3, r2, [r1]
 80106f4:	613b      	str	r3, [r7, #16]
   return(result);
 80106f6:	693b      	ldr	r3, [r7, #16]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d1e6      	bne.n	80106ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	2220      	movs	r2, #32
 8010700:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	2200      	movs	r2, #0
 8010708:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	2200      	movs	r2, #0
 801070e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8010710:	bf00      	nop
 8010712:	3754      	adds	r7, #84	@ 0x54
 8010714:	46bd      	mov	sp, r7
 8010716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071a:	4770      	bx	lr

0801071c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b09c      	sub	sp, #112	@ 0x70
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010728:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	69db      	ldr	r3, [r3, #28]
 801072e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010732:	d071      	beq.n	8010818 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8010734:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010736:	2200      	movs	r2, #0
 8010738:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801073c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010742:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010744:	e853 3f00 	ldrex	r3, [r3]
 8010748:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801074a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801074c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010750:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010752:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	461a      	mov	r2, r3
 8010758:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801075a:	657b      	str	r3, [r7, #84]	@ 0x54
 801075c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801075e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010760:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010762:	e841 2300 	strex	r3, r2, [r1]
 8010766:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8010768:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801076a:	2b00      	cmp	r3, #0
 801076c:	d1e6      	bne.n	801073c <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801076e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	3308      	adds	r3, #8
 8010774:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010778:	e853 3f00 	ldrex	r3, [r3]
 801077c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801077e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010780:	f023 0301 	bic.w	r3, r3, #1
 8010784:	667b      	str	r3, [r7, #100]	@ 0x64
 8010786:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	3308      	adds	r3, #8
 801078c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801078e:	643a      	str	r2, [r7, #64]	@ 0x40
 8010790:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010792:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010794:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010796:	e841 2300 	strex	r3, r2, [r1]
 801079a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801079c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d1e5      	bne.n	801076e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80107a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	3308      	adds	r3, #8
 80107a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107aa:	6a3b      	ldr	r3, [r7, #32]
 80107ac:	e853 3f00 	ldrex	r3, [r3]
 80107b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80107b2:	69fb      	ldr	r3, [r7, #28]
 80107b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80107b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80107ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	3308      	adds	r3, #8
 80107c0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80107c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80107c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80107c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80107ca:	e841 2300 	strex	r3, r2, [r1]
 80107ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80107d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d1e5      	bne.n	80107a2 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80107d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107d8:	2220      	movs	r2, #32
 80107da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80107de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80107e2:	2b01      	cmp	r3, #1
 80107e4:	d118      	bne.n	8010818 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80107e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	e853 3f00 	ldrex	r3, [r3]
 80107f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80107f4:	68bb      	ldr	r3, [r7, #8]
 80107f6:	f023 0310 	bic.w	r3, r3, #16
 80107fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80107fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	461a      	mov	r2, r3
 8010802:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010804:	61bb      	str	r3, [r7, #24]
 8010806:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010808:	6979      	ldr	r1, [r7, #20]
 801080a:	69ba      	ldr	r2, [r7, #24]
 801080c:	e841 2300 	strex	r3, r2, [r1]
 8010810:	613b      	str	r3, [r7, #16]
   return(result);
 8010812:	693b      	ldr	r3, [r7, #16]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d1e6      	bne.n	80107e6 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010818:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801081a:	2200      	movs	r2, #0
 801081c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801081e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010820:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010822:	2b01      	cmp	r3, #1
 8010824:	d122      	bne.n	801086c <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 8010826:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010828:	2200      	movs	r2, #0
 801082a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	685b      	ldr	r3, [r3, #4]
 8010834:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 8010838:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801083a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801083e:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8010842:	429a      	cmp	r2, r3
 8010844:	d204      	bcs.n	8010850 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8010846:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010848:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 801084c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010850:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010852:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8010856:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010858:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801085c:	b29b      	uxth	r3, r3
 801085e:	1ad3      	subs	r3, r2, r3
 8010860:	b29b      	uxth	r3, r3
 8010862:	4619      	mov	r1, r3
 8010864:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010866:	f7ff fa59 	bl	800fd1c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801086a:	e002      	b.n	8010872 <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 801086c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801086e:	f7f5 fc57 	bl	8006120 <HAL_UART_RxCpltCallback>
}
 8010872:	bf00      	nop
 8010874:	3770      	adds	r7, #112	@ 0x70
 8010876:	46bd      	mov	sp, r7
 8010878:	bd80      	pop	{r7, pc}

0801087a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801087a:	b580      	push	{r7, lr}
 801087c:	b084      	sub	sp, #16
 801087e:	af00      	add	r7, sp, #0
 8010880:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010886:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	2201      	movs	r2, #1
 801088c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010892:	2b01      	cmp	r3, #1
 8010894:	d123      	bne.n	80108de <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801089c:	085b      	lsrs	r3, r3, #1
 801089e:	b29a      	uxth	r2, r3
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	685b      	ldr	r3, [r3, #4]
 80108ac:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80108b4:	897a      	ldrh	r2, [r7, #10]
 80108b6:	429a      	cmp	r2, r3
 80108b8:	d803      	bhi.n	80108c2 <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	897a      	ldrh	r2, [r7, #10]
 80108be:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80108ce:	b29b      	uxth	r3, r3
 80108d0:	1ad3      	subs	r3, r2, r3
 80108d2:	b29b      	uxth	r3, r3
 80108d4:	4619      	mov	r1, r3
 80108d6:	68f8      	ldr	r0, [r7, #12]
 80108d8:	f7ff fa20 	bl	800fd1c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80108dc:	e002      	b.n	80108e4 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 80108de:	68f8      	ldr	r0, [r7, #12]
 80108e0:	f7f5 fc42 	bl	8006168 <HAL_UART_RxHalfCpltCallback>
}
 80108e4:	bf00      	nop
 80108e6:	3710      	adds	r7, #16
 80108e8:	46bd      	mov	sp, r7
 80108ea:	bd80      	pop	{r7, pc}

080108ec <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b086      	sub	sp, #24
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108f8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80108fa:	697b      	ldr	r3, [r7, #20]
 80108fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80108fe:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010900:	697b      	ldr	r3, [r7, #20]
 8010902:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010906:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010908:	697b      	ldr	r3, [r7, #20]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	689b      	ldr	r3, [r3, #8]
 801090e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010912:	2b80      	cmp	r3, #128	@ 0x80
 8010914:	d109      	bne.n	801092a <UART_DMAError+0x3e>
 8010916:	693b      	ldr	r3, [r7, #16]
 8010918:	2b21      	cmp	r3, #33	@ 0x21
 801091a:	d106      	bne.n	801092a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801091c:	697b      	ldr	r3, [r7, #20]
 801091e:	2200      	movs	r2, #0
 8010920:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8010924:	6978      	ldr	r0, [r7, #20]
 8010926:	f7ff fe6f 	bl	8010608 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801092a:	697b      	ldr	r3, [r7, #20]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	689b      	ldr	r3, [r3, #8]
 8010930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010934:	2b40      	cmp	r3, #64	@ 0x40
 8010936:	d109      	bne.n	801094c <UART_DMAError+0x60>
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	2b22      	cmp	r3, #34	@ 0x22
 801093c:	d106      	bne.n	801094c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801093e:	697b      	ldr	r3, [r7, #20]
 8010940:	2200      	movs	r2, #0
 8010942:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8010946:	6978      	ldr	r0, [r7, #20]
 8010948:	f7ff fe84 	bl	8010654 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801094c:	697b      	ldr	r3, [r7, #20]
 801094e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010952:	f043 0210 	orr.w	r2, r3, #16
 8010956:	697b      	ldr	r3, [r7, #20]
 8010958:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801095c:	6978      	ldr	r0, [r7, #20]
 801095e:	f7f5 fc19 	bl	8006194 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010962:	bf00      	nop
 8010964:	3718      	adds	r7, #24
 8010966:	46bd      	mov	sp, r7
 8010968:	bd80      	pop	{r7, pc}

0801096a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801096a:	b580      	push	{r7, lr}
 801096c:	b084      	sub	sp, #16
 801096e:	af00      	add	r7, sp, #0
 8010970:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010976:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	2200      	movs	r2, #0
 801097c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010980:	68f8      	ldr	r0, [r7, #12]
 8010982:	f7f5 fc07 	bl	8006194 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010986:	bf00      	nop
 8010988:	3710      	adds	r7, #16
 801098a:	46bd      	mov	sp, r7
 801098c:	bd80      	pop	{r7, pc}

0801098e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801098e:	b580      	push	{r7, lr}
 8010990:	b088      	sub	sp, #32
 8010992:	af00      	add	r7, sp, #0
 8010994:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	e853 3f00 	ldrex	r3, [r3]
 80109a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80109a4:	68bb      	ldr	r3, [r7, #8]
 80109a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80109aa:	61fb      	str	r3, [r7, #28]
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	461a      	mov	r2, r3
 80109b2:	69fb      	ldr	r3, [r7, #28]
 80109b4:	61bb      	str	r3, [r7, #24]
 80109b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109b8:	6979      	ldr	r1, [r7, #20]
 80109ba:	69ba      	ldr	r2, [r7, #24]
 80109bc:	e841 2300 	strex	r3, r2, [r1]
 80109c0:	613b      	str	r3, [r7, #16]
   return(result);
 80109c2:	693b      	ldr	r3, [r7, #16]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d1e6      	bne.n	8010996 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	2220      	movs	r2, #32
 80109cc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	2200      	movs	r2, #0
 80109d2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80109d4:	6878      	ldr	r0, [r7, #4]
 80109d6:	f7ff f997 	bl	800fd08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80109da:	bf00      	nop
 80109dc:	3720      	adds	r7, #32
 80109de:	46bd      	mov	sp, r7
 80109e0:	bd80      	pop	{r7, pc}
	...

080109e4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 80109e4:	b480      	push	{r7}
 80109e6:	b083      	sub	sp, #12
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
 80109ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80109ee:	683b      	ldr	r3, [r7, #0]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d121      	bne.n	8010a3a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681a      	ldr	r2, [r3, #0]
 80109fa:	4b27      	ldr	r3, [pc, #156]	@ (8010a98 <FMC_SDRAM_Init+0xb4>)
 80109fc:	4013      	ands	r3, r2
 80109fe:	683a      	ldr	r2, [r7, #0]
 8010a00:	6851      	ldr	r1, [r2, #4]
 8010a02:	683a      	ldr	r2, [r7, #0]
 8010a04:	6892      	ldr	r2, [r2, #8]
 8010a06:	4311      	orrs	r1, r2
 8010a08:	683a      	ldr	r2, [r7, #0]
 8010a0a:	68d2      	ldr	r2, [r2, #12]
 8010a0c:	4311      	orrs	r1, r2
 8010a0e:	683a      	ldr	r2, [r7, #0]
 8010a10:	6912      	ldr	r2, [r2, #16]
 8010a12:	4311      	orrs	r1, r2
 8010a14:	683a      	ldr	r2, [r7, #0]
 8010a16:	6952      	ldr	r2, [r2, #20]
 8010a18:	4311      	orrs	r1, r2
 8010a1a:	683a      	ldr	r2, [r7, #0]
 8010a1c:	6992      	ldr	r2, [r2, #24]
 8010a1e:	4311      	orrs	r1, r2
 8010a20:	683a      	ldr	r2, [r7, #0]
 8010a22:	69d2      	ldr	r2, [r2, #28]
 8010a24:	4311      	orrs	r1, r2
 8010a26:	683a      	ldr	r2, [r7, #0]
 8010a28:	6a12      	ldr	r2, [r2, #32]
 8010a2a:	4311      	orrs	r1, r2
 8010a2c:	683a      	ldr	r2, [r7, #0]
 8010a2e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8010a30:	430a      	orrs	r2, r1
 8010a32:	431a      	orrs	r2, r3
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	601a      	str	r2, [r3, #0]
 8010a38:	e026      	b.n	8010a88 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8010a42:	683b      	ldr	r3, [r7, #0]
 8010a44:	69d9      	ldr	r1, [r3, #28]
 8010a46:	683b      	ldr	r3, [r7, #0]
 8010a48:	6a1b      	ldr	r3, [r3, #32]
 8010a4a:	4319      	orrs	r1, r3
 8010a4c:	683b      	ldr	r3, [r7, #0]
 8010a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a50:	430b      	orrs	r3, r1
 8010a52:	431a      	orrs	r2, r3
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	685a      	ldr	r2, [r3, #4]
 8010a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8010a98 <FMC_SDRAM_Init+0xb4>)
 8010a5e:	4013      	ands	r3, r2
 8010a60:	683a      	ldr	r2, [r7, #0]
 8010a62:	6851      	ldr	r1, [r2, #4]
 8010a64:	683a      	ldr	r2, [r7, #0]
 8010a66:	6892      	ldr	r2, [r2, #8]
 8010a68:	4311      	orrs	r1, r2
 8010a6a:	683a      	ldr	r2, [r7, #0]
 8010a6c:	68d2      	ldr	r2, [r2, #12]
 8010a6e:	4311      	orrs	r1, r2
 8010a70:	683a      	ldr	r2, [r7, #0]
 8010a72:	6912      	ldr	r2, [r2, #16]
 8010a74:	4311      	orrs	r1, r2
 8010a76:	683a      	ldr	r2, [r7, #0]
 8010a78:	6952      	ldr	r2, [r2, #20]
 8010a7a:	4311      	orrs	r1, r2
 8010a7c:	683a      	ldr	r2, [r7, #0]
 8010a7e:	6992      	ldr	r2, [r2, #24]
 8010a80:	430a      	orrs	r2, r1
 8010a82:	431a      	orrs	r2, r3
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8010a88:	2300      	movs	r3, #0
}
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	370c      	adds	r7, #12
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a94:	4770      	bx	lr
 8010a96:	bf00      	nop
 8010a98:	ffff8000 	.word	0xffff8000

08010a9c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8010a9c:	b480      	push	{r7}
 8010a9e:	b085      	sub	sp, #20
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	60f8      	str	r0, [r7, #12]
 8010aa4:	60b9      	str	r1, [r7, #8]
 8010aa6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d128      	bne.n	8010b00 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	689b      	ldr	r3, [r3, #8]
 8010ab2:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8010ab6:	68bb      	ldr	r3, [r7, #8]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	1e59      	subs	r1, r3, #1
 8010abc:	68bb      	ldr	r3, [r7, #8]
 8010abe:	685b      	ldr	r3, [r3, #4]
 8010ac0:	3b01      	subs	r3, #1
 8010ac2:	011b      	lsls	r3, r3, #4
 8010ac4:	4319      	orrs	r1, r3
 8010ac6:	68bb      	ldr	r3, [r7, #8]
 8010ac8:	689b      	ldr	r3, [r3, #8]
 8010aca:	3b01      	subs	r3, #1
 8010acc:	021b      	lsls	r3, r3, #8
 8010ace:	4319      	orrs	r1, r3
 8010ad0:	68bb      	ldr	r3, [r7, #8]
 8010ad2:	68db      	ldr	r3, [r3, #12]
 8010ad4:	3b01      	subs	r3, #1
 8010ad6:	031b      	lsls	r3, r3, #12
 8010ad8:	4319      	orrs	r1, r3
 8010ada:	68bb      	ldr	r3, [r7, #8]
 8010adc:	691b      	ldr	r3, [r3, #16]
 8010ade:	3b01      	subs	r3, #1
 8010ae0:	041b      	lsls	r3, r3, #16
 8010ae2:	4319      	orrs	r1, r3
 8010ae4:	68bb      	ldr	r3, [r7, #8]
 8010ae6:	695b      	ldr	r3, [r3, #20]
 8010ae8:	3b01      	subs	r3, #1
 8010aea:	051b      	lsls	r3, r3, #20
 8010aec:	4319      	orrs	r1, r3
 8010aee:	68bb      	ldr	r3, [r7, #8]
 8010af0:	699b      	ldr	r3, [r3, #24]
 8010af2:	3b01      	subs	r3, #1
 8010af4:	061b      	lsls	r3, r3, #24
 8010af6:	430b      	orrs	r3, r1
 8010af8:	431a      	orrs	r2, r3
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	609a      	str	r2, [r3, #8]
 8010afe:	e02d      	b.n	8010b5c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	689a      	ldr	r2, [r3, #8]
 8010b04:	4b19      	ldr	r3, [pc, #100]	@ (8010b6c <FMC_SDRAM_Timing_Init+0xd0>)
 8010b06:	4013      	ands	r3, r2
 8010b08:	68ba      	ldr	r2, [r7, #8]
 8010b0a:	68d2      	ldr	r2, [r2, #12]
 8010b0c:	3a01      	subs	r2, #1
 8010b0e:	0311      	lsls	r1, r2, #12
 8010b10:	68ba      	ldr	r2, [r7, #8]
 8010b12:	6952      	ldr	r2, [r2, #20]
 8010b14:	3a01      	subs	r2, #1
 8010b16:	0512      	lsls	r2, r2, #20
 8010b18:	430a      	orrs	r2, r1
 8010b1a:	431a      	orrs	r2, r3
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	68db      	ldr	r3, [r3, #12]
 8010b24:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8010b28:	68bb      	ldr	r3, [r7, #8]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	1e59      	subs	r1, r3, #1
 8010b2e:	68bb      	ldr	r3, [r7, #8]
 8010b30:	685b      	ldr	r3, [r3, #4]
 8010b32:	3b01      	subs	r3, #1
 8010b34:	011b      	lsls	r3, r3, #4
 8010b36:	4319      	orrs	r1, r3
 8010b38:	68bb      	ldr	r3, [r7, #8]
 8010b3a:	689b      	ldr	r3, [r3, #8]
 8010b3c:	3b01      	subs	r3, #1
 8010b3e:	021b      	lsls	r3, r3, #8
 8010b40:	4319      	orrs	r1, r3
 8010b42:	68bb      	ldr	r3, [r7, #8]
 8010b44:	691b      	ldr	r3, [r3, #16]
 8010b46:	3b01      	subs	r3, #1
 8010b48:	041b      	lsls	r3, r3, #16
 8010b4a:	4319      	orrs	r1, r3
 8010b4c:	68bb      	ldr	r3, [r7, #8]
 8010b4e:	699b      	ldr	r3, [r3, #24]
 8010b50:	3b01      	subs	r3, #1
 8010b52:	061b      	lsls	r3, r3, #24
 8010b54:	430b      	orrs	r3, r1
 8010b56:	431a      	orrs	r2, r3
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8010b5c:	2300      	movs	r3, #0
}
 8010b5e:	4618      	mov	r0, r3
 8010b60:	3714      	adds	r7, #20
 8010b62:	46bd      	mov	sp, r7
 8010b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b68:	4770      	bx	lr
 8010b6a:	bf00      	nop
 8010b6c:	ff0f0fff 	.word	0xff0f0fff

08010b70 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010b70:	b084      	sub	sp, #16
 8010b72:	b480      	push	{r7}
 8010b74:	b085      	sub	sp, #20
 8010b76:	af00      	add	r7, sp, #0
 8010b78:	6078      	str	r0, [r7, #4]
 8010b7a:	f107 001c 	add.w	r0, r7, #28
 8010b7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010b82:	2300      	movs	r3, #0
 8010b84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8010b86:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8010b88:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8010b8a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8010b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8010b8e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8010b92:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8010b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8010b96:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8010b9a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8010b9c:	68fa      	ldr	r2, [r7, #12]
 8010b9e:	4313      	orrs	r3, r2
 8010ba0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	685a      	ldr	r2, [r3, #4]
 8010ba6:	4b07      	ldr	r3, [pc, #28]	@ (8010bc4 <SDMMC_Init+0x54>)
 8010ba8:	4013      	ands	r3, r2
 8010baa:	68fa      	ldr	r2, [r7, #12]
 8010bac:	431a      	orrs	r2, r3
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010bb2:	2300      	movs	r3, #0
}
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	3714      	adds	r7, #20
 8010bb8:	46bd      	mov	sp, r7
 8010bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bbe:	b004      	add	sp, #16
 8010bc0:	4770      	bx	lr
 8010bc2:	bf00      	nop
 8010bc4:	ffff8100 	.word	0xffff8100

08010bc8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010bc8:	b480      	push	{r7}
 8010bca:	b083      	sub	sp, #12
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	370c      	adds	r7, #12
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be0:	4770      	bx	lr

08010be2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8010be2:	b480      	push	{r7}
 8010be4:	b083      	sub	sp, #12
 8010be6:	af00      	add	r7, sp, #0
 8010be8:	6078      	str	r0, [r7, #4]
 8010bea:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8010bec:	683b      	ldr	r3, [r7, #0]
 8010bee:	681a      	ldr	r2, [r3, #0]
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8010bf6:	2300      	movs	r3, #0
}
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	370c      	adds	r7, #12
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c02:	4770      	bx	lr

08010c04 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8010c04:	b480      	push	{r7}
 8010c06:	b083      	sub	sp, #12
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	2203      	movs	r2, #3
 8010c10:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8010c12:	2300      	movs	r3, #0
}
 8010c14:	4618      	mov	r0, r3
 8010c16:	370c      	adds	r7, #12
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1e:	4770      	bx	lr

08010c20 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8010c20:	b480      	push	{r7}
 8010c22:	b083      	sub	sp, #12
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	f003 0303 	and.w	r3, r3, #3
}
 8010c30:	4618      	mov	r0, r3
 8010c32:	370c      	adds	r7, #12
 8010c34:	46bd      	mov	sp, r7
 8010c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3a:	4770      	bx	lr

08010c3c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010c3c:	b480      	push	{r7}
 8010c3e:	b085      	sub	sp, #20
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
 8010c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010c46:	2300      	movs	r3, #0
 8010c48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8010c4a:	683b      	ldr	r3, [r7, #0]
 8010c4c:	681a      	ldr	r2, [r3, #0]
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010c52:	683b      	ldr	r3, [r7, #0]
 8010c54:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8010c56:	683b      	ldr	r3, [r7, #0]
 8010c58:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010c5a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010c5c:	683b      	ldr	r3, [r7, #0]
 8010c5e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010c60:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010c62:	683b      	ldr	r3, [r7, #0]
 8010c64:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8010c66:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010c68:	68fa      	ldr	r2, [r7, #12]
 8010c6a:	4313      	orrs	r3, r2
 8010c6c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	68da      	ldr	r2, [r3, #12]
 8010c72:	4b06      	ldr	r3, [pc, #24]	@ (8010c8c <SDMMC_SendCommand+0x50>)
 8010c74:	4013      	ands	r3, r2
 8010c76:	68fa      	ldr	r2, [r7, #12]
 8010c78:	431a      	orrs	r2, r3
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8010c7e:	2300      	movs	r3, #0
}
 8010c80:	4618      	mov	r0, r3
 8010c82:	3714      	adds	r7, #20
 8010c84:	46bd      	mov	sp, r7
 8010c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8a:	4770      	bx	lr
 8010c8c:	fffff000 	.word	0xfffff000

08010c90 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010c90:	b480      	push	{r7}
 8010c92:	b083      	sub	sp, #12
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	691b      	ldr	r3, [r3, #16]
 8010c9c:	b2db      	uxtb	r3, r3
}
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	370c      	adds	r7, #12
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca8:	4770      	bx	lr

08010caa <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8010caa:	b480      	push	{r7}
 8010cac:	b085      	sub	sp, #20
 8010cae:	af00      	add	r7, sp, #0
 8010cb0:	6078      	str	r0, [r7, #4]
 8010cb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	3314      	adds	r3, #20
 8010cb8:	461a      	mov	r2, r3
 8010cba:	683b      	ldr	r3, [r7, #0]
 8010cbc:	4413      	add	r3, r2
 8010cbe:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	681b      	ldr	r3, [r3, #0]
}  
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	3714      	adds	r7, #20
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cce:	4770      	bx	lr

08010cd0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8010cd0:	b480      	push	{r7}
 8010cd2:	b085      	sub	sp, #20
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	6078      	str	r0, [r7, #4]
 8010cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010cda:	2300      	movs	r3, #0
 8010cdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010cde:	683b      	ldr	r3, [r7, #0]
 8010ce0:	681a      	ldr	r2, [r3, #0]
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	685a      	ldr	r2, [r3, #4]
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010cee:	683b      	ldr	r3, [r7, #0]
 8010cf0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010cf2:	683b      	ldr	r3, [r7, #0]
 8010cf4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010cf6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010cf8:	683b      	ldr	r3, [r7, #0]
 8010cfa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010cfc:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010cfe:	683b      	ldr	r3, [r7, #0]
 8010d00:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010d02:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010d04:	68fa      	ldr	r2, [r7, #12]
 8010d06:	4313      	orrs	r3, r2
 8010d08:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d0e:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	431a      	orrs	r2, r3
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8010d1a:	2300      	movs	r3, #0

}
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	3714      	adds	r7, #20
 8010d20:	46bd      	mov	sp, r7
 8010d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d26:	4770      	bx	lr

08010d28 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b088      	sub	sp, #32
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
 8010d30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010d32:	683b      	ldr	r3, [r7, #0]
 8010d34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010d36:	2310      	movs	r3, #16
 8010d38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010d3a:	2340      	movs	r3, #64	@ 0x40
 8010d3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d3e:	2300      	movs	r3, #0
 8010d40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010d42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010d46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010d48:	f107 0308 	add.w	r3, r7, #8
 8010d4c:	4619      	mov	r1, r3
 8010d4e:	6878      	ldr	r0, [r7, #4]
 8010d50:	f7ff ff74 	bl	8010c3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8010d54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010d58:	2110      	movs	r1, #16
 8010d5a:	6878      	ldr	r0, [r7, #4]
 8010d5c:	f000 fa1a 	bl	8011194 <SDMMC_GetCmdResp1>
 8010d60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d62:	69fb      	ldr	r3, [r7, #28]
}
 8010d64:	4618      	mov	r0, r3
 8010d66:	3720      	adds	r7, #32
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	bd80      	pop	{r7, pc}

08010d6c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b088      	sub	sp, #32
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
 8010d74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010d7a:	2311      	movs	r3, #17
 8010d7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010d7e:	2340      	movs	r3, #64	@ 0x40
 8010d80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d82:	2300      	movs	r3, #0
 8010d84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010d86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010d8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010d8c:	f107 0308 	add.w	r3, r7, #8
 8010d90:	4619      	mov	r1, r3
 8010d92:	6878      	ldr	r0, [r7, #4]
 8010d94:	f7ff ff52 	bl	8010c3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010d98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010d9c:	2111      	movs	r1, #17
 8010d9e:	6878      	ldr	r0, [r7, #4]
 8010da0:	f000 f9f8 	bl	8011194 <SDMMC_GetCmdResp1>
 8010da4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010da6:	69fb      	ldr	r3, [r7, #28]
}
 8010da8:	4618      	mov	r0, r3
 8010daa:	3720      	adds	r7, #32
 8010dac:	46bd      	mov	sp, r7
 8010dae:	bd80      	pop	{r7, pc}

08010db0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b088      	sub	sp, #32
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	6078      	str	r0, [r7, #4]
 8010db8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010dba:	683b      	ldr	r3, [r7, #0]
 8010dbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010dbe:	2312      	movs	r3, #18
 8010dc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010dc2:	2340      	movs	r3, #64	@ 0x40
 8010dc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010dca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010dce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010dd0:	f107 0308 	add.w	r3, r7, #8
 8010dd4:	4619      	mov	r1, r3
 8010dd6:	6878      	ldr	r0, [r7, #4]
 8010dd8:	f7ff ff30 	bl	8010c3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010ddc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010de0:	2112      	movs	r1, #18
 8010de2:	6878      	ldr	r0, [r7, #4]
 8010de4:	f000 f9d6 	bl	8011194 <SDMMC_GetCmdResp1>
 8010de8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010dea:	69fb      	ldr	r3, [r7, #28]
}
 8010dec:	4618      	mov	r0, r3
 8010dee:	3720      	adds	r7, #32
 8010df0:	46bd      	mov	sp, r7
 8010df2:	bd80      	pop	{r7, pc}

08010df4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b088      	sub	sp, #32
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
 8010dfc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010dfe:	683b      	ldr	r3, [r7, #0]
 8010e00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010e02:	2318      	movs	r3, #24
 8010e04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010e06:	2340      	movs	r3, #64	@ 0x40
 8010e08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010e0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010e12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010e14:	f107 0308 	add.w	r3, r7, #8
 8010e18:	4619      	mov	r1, r3
 8010e1a:	6878      	ldr	r0, [r7, #4]
 8010e1c:	f7ff ff0e 	bl	8010c3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010e20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010e24:	2118      	movs	r1, #24
 8010e26:	6878      	ldr	r0, [r7, #4]
 8010e28:	f000 f9b4 	bl	8011194 <SDMMC_GetCmdResp1>
 8010e2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e2e:	69fb      	ldr	r3, [r7, #28]
}
 8010e30:	4618      	mov	r0, r3
 8010e32:	3720      	adds	r7, #32
 8010e34:	46bd      	mov	sp, r7
 8010e36:	bd80      	pop	{r7, pc}

08010e38 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010e38:	b580      	push	{r7, lr}
 8010e3a:	b088      	sub	sp, #32
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	6078      	str	r0, [r7, #4]
 8010e40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010e42:	683b      	ldr	r3, [r7, #0]
 8010e44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010e46:	2319      	movs	r3, #25
 8010e48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010e4a:	2340      	movs	r3, #64	@ 0x40
 8010e4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010e4e:	2300      	movs	r3, #0
 8010e50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010e52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010e56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010e58:	f107 0308 	add.w	r3, r7, #8
 8010e5c:	4619      	mov	r1, r3
 8010e5e:	6878      	ldr	r0, [r7, #4]
 8010e60:	f7ff feec 	bl	8010c3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010e64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010e68:	2119      	movs	r1, #25
 8010e6a:	6878      	ldr	r0, [r7, #4]
 8010e6c:	f000 f992 	bl	8011194 <SDMMC_GetCmdResp1>
 8010e70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e72:	69fb      	ldr	r3, [r7, #28]
}
 8010e74:	4618      	mov	r0, r3
 8010e76:	3720      	adds	r7, #32
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	bd80      	pop	{r7, pc}

08010e7c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b088      	sub	sp, #32
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010e84:	2300      	movs	r3, #0
 8010e86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010e88:	230c      	movs	r3, #12
 8010e8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010e8c:	2340      	movs	r3, #64	@ 0x40
 8010e8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010e90:	2300      	movs	r3, #0
 8010e92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010e94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010e98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010e9a:	f107 0308 	add.w	r3, r7, #8
 8010e9e:	4619      	mov	r1, r3
 8010ea0:	6878      	ldr	r0, [r7, #4]
 8010ea2:	f7ff fecb 	bl	8010c3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010ea6:	4a05      	ldr	r2, [pc, #20]	@ (8010ebc <SDMMC_CmdStopTransfer+0x40>)
 8010ea8:	210c      	movs	r1, #12
 8010eaa:	6878      	ldr	r0, [r7, #4]
 8010eac:	f000 f972 	bl	8011194 <SDMMC_GetCmdResp1>
 8010eb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010eb2:	69fb      	ldr	r3, [r7, #28]
}
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	3720      	adds	r7, #32
 8010eb8:	46bd      	mov	sp, r7
 8010eba:	bd80      	pop	{r7, pc}
 8010ebc:	05f5e100 	.word	0x05f5e100

08010ec0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b08a      	sub	sp, #40	@ 0x28
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	60f8      	str	r0, [r7, #12]
 8010ec8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010ecc:	683b      	ldr	r3, [r7, #0]
 8010ece:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010ed0:	2307      	movs	r3, #7
 8010ed2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010ed4:	2340      	movs	r3, #64	@ 0x40
 8010ed6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ed8:	2300      	movs	r3, #0
 8010eda:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010edc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010ee0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010ee2:	f107 0310 	add.w	r3, r7, #16
 8010ee6:	4619      	mov	r1, r3
 8010ee8:	68f8      	ldr	r0, [r7, #12]
 8010eea:	f7ff fea7 	bl	8010c3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8010eee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010ef2:	2107      	movs	r1, #7
 8010ef4:	68f8      	ldr	r0, [r7, #12]
 8010ef6:	f000 f94d 	bl	8011194 <SDMMC_GetCmdResp1>
 8010efa:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8010efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010efe:	4618      	mov	r0, r3
 8010f00:	3728      	adds	r7, #40	@ 0x28
 8010f02:	46bd      	mov	sp, r7
 8010f04:	bd80      	pop	{r7, pc}

08010f06 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8010f06:	b580      	push	{r7, lr}
 8010f08:	b088      	sub	sp, #32
 8010f0a:	af00      	add	r7, sp, #0
 8010f0c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8010f0e:	2300      	movs	r3, #0
 8010f10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010f12:	2300      	movs	r3, #0
 8010f14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010f16:	2300      	movs	r3, #0
 8010f18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010f1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010f22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010f24:	f107 0308 	add.w	r3, r7, #8
 8010f28:	4619      	mov	r1, r3
 8010f2a:	6878      	ldr	r0, [r7, #4]
 8010f2c:	f7ff fe86 	bl	8010c3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010f30:	6878      	ldr	r0, [r7, #4]
 8010f32:	f000 fb67 	bl	8011604 <SDMMC_GetCmdError>
 8010f36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010f38:	69fb      	ldr	r3, [r7, #28]
}
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	3720      	adds	r7, #32
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	bd80      	pop	{r7, pc}

08010f42 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010f42:	b580      	push	{r7, lr}
 8010f44:	b088      	sub	sp, #32
 8010f46:	af00      	add	r7, sp, #0
 8010f48:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010f4a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8010f4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010f50:	2308      	movs	r3, #8
 8010f52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010f54:	2340      	movs	r3, #64	@ 0x40
 8010f56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010f58:	2300      	movs	r3, #0
 8010f5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010f5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010f60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010f62:	f107 0308 	add.w	r3, r7, #8
 8010f66:	4619      	mov	r1, r3
 8010f68:	6878      	ldr	r0, [r7, #4]
 8010f6a:	f7ff fe67 	bl	8010c3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010f6e:	6878      	ldr	r0, [r7, #4]
 8010f70:	f000 fafa 	bl	8011568 <SDMMC_GetCmdResp7>
 8010f74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010f76:	69fb      	ldr	r3, [r7, #28]
}
 8010f78:	4618      	mov	r0, r3
 8010f7a:	3720      	adds	r7, #32
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	bd80      	pop	{r7, pc}

08010f80 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b088      	sub	sp, #32
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
 8010f88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010f8a:	683b      	ldr	r3, [r7, #0]
 8010f8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010f8e:	2337      	movs	r3, #55	@ 0x37
 8010f90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010f92:	2340      	movs	r3, #64	@ 0x40
 8010f94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010f96:	2300      	movs	r3, #0
 8010f98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010f9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010f9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010fa0:	f107 0308 	add.w	r3, r7, #8
 8010fa4:	4619      	mov	r1, r3
 8010fa6:	6878      	ldr	r0, [r7, #4]
 8010fa8:	f7ff fe48 	bl	8010c3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8010fac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010fb0:	2137      	movs	r1, #55	@ 0x37
 8010fb2:	6878      	ldr	r0, [r7, #4]
 8010fb4:	f000 f8ee 	bl	8011194 <SDMMC_GetCmdResp1>
 8010fb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010fba:	69fb      	ldr	r3, [r7, #28]
}
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	3720      	adds	r7, #32
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	bd80      	pop	{r7, pc}

08010fc4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b088      	sub	sp, #32
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	6078      	str	r0, [r7, #4]
 8010fcc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8010fce:	683a      	ldr	r2, [r7, #0]
 8010fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8011008 <SDMMC_CmdAppOperCommand+0x44>)
 8010fd2:	4313      	orrs	r3, r2
 8010fd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010fd6:	2329      	movs	r3, #41	@ 0x29
 8010fd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010fda:	2340      	movs	r3, #64	@ 0x40
 8010fdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010fde:	2300      	movs	r3, #0
 8010fe0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010fe2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010fe6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010fe8:	f107 0308 	add.w	r3, r7, #8
 8010fec:	4619      	mov	r1, r3
 8010fee:	6878      	ldr	r0, [r7, #4]
 8010ff0:	f7ff fe24 	bl	8010c3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8010ff4:	6878      	ldr	r0, [r7, #4]
 8010ff6:	f000 fa03 	bl	8011400 <SDMMC_GetCmdResp3>
 8010ffa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ffc:	69fb      	ldr	r3, [r7, #28]
}
 8010ffe:	4618      	mov	r0, r3
 8011000:	3720      	adds	r7, #32
 8011002:	46bd      	mov	sp, r7
 8011004:	bd80      	pop	{r7, pc}
 8011006:	bf00      	nop
 8011008:	80100000 	.word	0x80100000

0801100c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 801100c:	b580      	push	{r7, lr}
 801100e:	b088      	sub	sp, #32
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
 8011014:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8011016:	683b      	ldr	r3, [r7, #0]
 8011018:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801101a:	2306      	movs	r3, #6
 801101c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801101e:	2340      	movs	r3, #64	@ 0x40
 8011020:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011022:	2300      	movs	r3, #0
 8011024:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011026:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801102a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801102c:	f107 0308 	add.w	r3, r7, #8
 8011030:	4619      	mov	r1, r3
 8011032:	6878      	ldr	r0, [r7, #4]
 8011034:	f7ff fe02 	bl	8010c3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8011038:	f241 3288 	movw	r2, #5000	@ 0x1388
 801103c:	2106      	movs	r1, #6
 801103e:	6878      	ldr	r0, [r7, #4]
 8011040:	f000 f8a8 	bl	8011194 <SDMMC_GetCmdResp1>
 8011044:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011046:	69fb      	ldr	r3, [r7, #28]
}
 8011048:	4618      	mov	r0, r3
 801104a:	3720      	adds	r7, #32
 801104c:	46bd      	mov	sp, r7
 801104e:	bd80      	pop	{r7, pc}

08011050 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b088      	sub	sp, #32
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8011058:	2300      	movs	r3, #0
 801105a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801105c:	2333      	movs	r3, #51	@ 0x33
 801105e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011060:	2340      	movs	r3, #64	@ 0x40
 8011062:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011064:	2300      	movs	r3, #0
 8011066:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011068:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801106c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801106e:	f107 0308 	add.w	r3, r7, #8
 8011072:	4619      	mov	r1, r3
 8011074:	6878      	ldr	r0, [r7, #4]
 8011076:	f7ff fde1 	bl	8010c3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801107a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801107e:	2133      	movs	r1, #51	@ 0x33
 8011080:	6878      	ldr	r0, [r7, #4]
 8011082:	f000 f887 	bl	8011194 <SDMMC_GetCmdResp1>
 8011086:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011088:	69fb      	ldr	r3, [r7, #28]
}
 801108a:	4618      	mov	r0, r3
 801108c:	3720      	adds	r7, #32
 801108e:	46bd      	mov	sp, r7
 8011090:	bd80      	pop	{r7, pc}

08011092 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8011092:	b580      	push	{r7, lr}
 8011094:	b088      	sub	sp, #32
 8011096:	af00      	add	r7, sp, #0
 8011098:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801109a:	2300      	movs	r3, #0
 801109c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801109e:	2302      	movs	r3, #2
 80110a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80110a2:	23c0      	movs	r3, #192	@ 0xc0
 80110a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80110a6:	2300      	movs	r3, #0
 80110a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80110aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80110ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80110b0:	f107 0308 	add.w	r3, r7, #8
 80110b4:	4619      	mov	r1, r3
 80110b6:	6878      	ldr	r0, [r7, #4]
 80110b8:	f7ff fdc0 	bl	8010c3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80110bc:	6878      	ldr	r0, [r7, #4]
 80110be:	f000 f957 	bl	8011370 <SDMMC_GetCmdResp2>
 80110c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80110c4:	69fb      	ldr	r3, [r7, #28]
}
 80110c6:	4618      	mov	r0, r3
 80110c8:	3720      	adds	r7, #32
 80110ca:	46bd      	mov	sp, r7
 80110cc:	bd80      	pop	{r7, pc}

080110ce <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80110ce:	b580      	push	{r7, lr}
 80110d0:	b088      	sub	sp, #32
 80110d2:	af00      	add	r7, sp, #0
 80110d4:	6078      	str	r0, [r7, #4]
 80110d6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80110d8:	683b      	ldr	r3, [r7, #0]
 80110da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80110dc:	2309      	movs	r3, #9
 80110de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80110e0:	23c0      	movs	r3, #192	@ 0xc0
 80110e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80110e4:	2300      	movs	r3, #0
 80110e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80110e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80110ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80110ee:	f107 0308 	add.w	r3, r7, #8
 80110f2:	4619      	mov	r1, r3
 80110f4:	6878      	ldr	r0, [r7, #4]
 80110f6:	f7ff fda1 	bl	8010c3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80110fa:	6878      	ldr	r0, [r7, #4]
 80110fc:	f000 f938 	bl	8011370 <SDMMC_GetCmdResp2>
 8011100:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011102:	69fb      	ldr	r3, [r7, #28]
}
 8011104:	4618      	mov	r0, r3
 8011106:	3720      	adds	r7, #32
 8011108:	46bd      	mov	sp, r7
 801110a:	bd80      	pop	{r7, pc}

0801110c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 801110c:	b580      	push	{r7, lr}
 801110e:	b088      	sub	sp, #32
 8011110:	af00      	add	r7, sp, #0
 8011112:	6078      	str	r0, [r7, #4]
 8011114:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8011116:	2300      	movs	r3, #0
 8011118:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801111a:	2303      	movs	r3, #3
 801111c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801111e:	2340      	movs	r3, #64	@ 0x40
 8011120:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011122:	2300      	movs	r3, #0
 8011124:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011126:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801112a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801112c:	f107 0308 	add.w	r3, r7, #8
 8011130:	4619      	mov	r1, r3
 8011132:	6878      	ldr	r0, [r7, #4]
 8011134:	f7ff fd82 	bl	8010c3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8011138:	683a      	ldr	r2, [r7, #0]
 801113a:	2103      	movs	r1, #3
 801113c:	6878      	ldr	r0, [r7, #4]
 801113e:	f000 f99d 	bl	801147c <SDMMC_GetCmdResp6>
 8011142:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011144:	69fb      	ldr	r3, [r7, #28]
}
 8011146:	4618      	mov	r0, r3
 8011148:	3720      	adds	r7, #32
 801114a:	46bd      	mov	sp, r7
 801114c:	bd80      	pop	{r7, pc}

0801114e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801114e:	b580      	push	{r7, lr}
 8011150:	b088      	sub	sp, #32
 8011152:	af00      	add	r7, sp, #0
 8011154:	6078      	str	r0, [r7, #4]
 8011156:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8011158:	683b      	ldr	r3, [r7, #0]
 801115a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801115c:	230d      	movs	r3, #13
 801115e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011160:	2340      	movs	r3, #64	@ 0x40
 8011162:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011164:	2300      	movs	r3, #0
 8011166:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011168:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801116c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801116e:	f107 0308 	add.w	r3, r7, #8
 8011172:	4619      	mov	r1, r3
 8011174:	6878      	ldr	r0, [r7, #4]
 8011176:	f7ff fd61 	bl	8010c3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801117a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801117e:	210d      	movs	r1, #13
 8011180:	6878      	ldr	r0, [r7, #4]
 8011182:	f000 f807 	bl	8011194 <SDMMC_GetCmdResp1>
 8011186:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011188:	69fb      	ldr	r3, [r7, #28]
}
 801118a:	4618      	mov	r0, r3
 801118c:	3720      	adds	r7, #32
 801118e:	46bd      	mov	sp, r7
 8011190:	bd80      	pop	{r7, pc}
	...

08011194 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8011194:	b580      	push	{r7, lr}
 8011196:	b088      	sub	sp, #32
 8011198:	af00      	add	r7, sp, #0
 801119a:	60f8      	str	r0, [r7, #12]
 801119c:	460b      	mov	r3, r1
 801119e:	607a      	str	r2, [r7, #4]
 80111a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80111a2:	4b70      	ldr	r3, [pc, #448]	@ (8011364 <SDMMC_GetCmdResp1+0x1d0>)
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	4a70      	ldr	r2, [pc, #448]	@ (8011368 <SDMMC_GetCmdResp1+0x1d4>)
 80111a8:	fba2 2303 	umull	r2, r3, r2, r3
 80111ac:	0a5a      	lsrs	r2, r3, #9
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	fb02 f303 	mul.w	r3, r2, r3
 80111b4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80111b6:	69fb      	ldr	r3, [r7, #28]
 80111b8:	1e5a      	subs	r2, r3, #1
 80111ba:	61fa      	str	r2, [r7, #28]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d102      	bne.n	80111c6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80111c0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80111c4:	e0c9      	b.n	801135a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80111ca:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80111cc:	69bb      	ldr	r3, [r7, #24]
 80111ce:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d0ef      	beq.n	80111b6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80111d6:	69bb      	ldr	r3, [r7, #24]
 80111d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d1ea      	bne.n	80111b6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80111e4:	f003 0304 	and.w	r3, r3, #4
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d004      	beq.n	80111f6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	2204      	movs	r2, #4
 80111f0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80111f2:	2304      	movs	r3, #4
 80111f4:	e0b1      	b.n	801135a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80111fa:	f003 0301 	and.w	r3, r3, #1
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d004      	beq.n	801120c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	2201      	movs	r2, #1
 8011206:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011208:	2301      	movs	r3, #1
 801120a:	e0a6      	b.n	801135a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	22c5      	movs	r2, #197	@ 0xc5
 8011210:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011212:	68f8      	ldr	r0, [r7, #12]
 8011214:	f7ff fd3c 	bl	8010c90 <SDMMC_GetCommandResponse>
 8011218:	4603      	mov	r3, r0
 801121a:	461a      	mov	r2, r3
 801121c:	7afb      	ldrb	r3, [r7, #11]
 801121e:	4293      	cmp	r3, r2
 8011220:	d001      	beq.n	8011226 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011222:	2301      	movs	r3, #1
 8011224:	e099      	b.n	801135a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011226:	2100      	movs	r1, #0
 8011228:	68f8      	ldr	r0, [r7, #12]
 801122a:	f7ff fd3e 	bl	8010caa <SDMMC_GetResponse>
 801122e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011230:	697a      	ldr	r2, [r7, #20]
 8011232:	4b4e      	ldr	r3, [pc, #312]	@ (801136c <SDMMC_GetCmdResp1+0x1d8>)
 8011234:	4013      	ands	r3, r2
 8011236:	2b00      	cmp	r3, #0
 8011238:	d101      	bne.n	801123e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801123a:	2300      	movs	r3, #0
 801123c:	e08d      	b.n	801135a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801123e:	697b      	ldr	r3, [r7, #20]
 8011240:	2b00      	cmp	r3, #0
 8011242:	da02      	bge.n	801124a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011244:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8011248:	e087      	b.n	801135a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801124a:	697b      	ldr	r3, [r7, #20]
 801124c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8011250:	2b00      	cmp	r3, #0
 8011252:	d001      	beq.n	8011258 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011254:	2340      	movs	r3, #64	@ 0x40
 8011256:	e080      	b.n	801135a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011258:	697b      	ldr	r3, [r7, #20]
 801125a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801125e:	2b00      	cmp	r3, #0
 8011260:	d001      	beq.n	8011266 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8011262:	2380      	movs	r3, #128	@ 0x80
 8011264:	e079      	b.n	801135a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8011266:	697b      	ldr	r3, [r7, #20]
 8011268:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801126c:	2b00      	cmp	r3, #0
 801126e:	d002      	beq.n	8011276 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011270:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011274:	e071      	b.n	801135a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8011276:	697b      	ldr	r3, [r7, #20]
 8011278:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801127c:	2b00      	cmp	r3, #0
 801127e:	d002      	beq.n	8011286 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011280:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011284:	e069      	b.n	801135a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8011286:	697b      	ldr	r3, [r7, #20]
 8011288:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801128c:	2b00      	cmp	r3, #0
 801128e:	d002      	beq.n	8011296 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011290:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011294:	e061      	b.n	801135a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8011296:	697b      	ldr	r3, [r7, #20]
 8011298:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801129c:	2b00      	cmp	r3, #0
 801129e:	d002      	beq.n	80112a6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80112a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80112a4:	e059      	b.n	801135a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80112a6:	697b      	ldr	r3, [r7, #20]
 80112a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d002      	beq.n	80112b6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80112b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80112b4:	e051      	b.n	801135a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80112b6:	697b      	ldr	r3, [r7, #20]
 80112b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d002      	beq.n	80112c6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80112c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80112c4:	e049      	b.n	801135a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80112c6:	697b      	ldr	r3, [r7, #20]
 80112c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d002      	beq.n	80112d6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80112d0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80112d4:	e041      	b.n	801135a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80112d6:	697b      	ldr	r3, [r7, #20]
 80112d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d002      	beq.n	80112e6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80112e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80112e4:	e039      	b.n	801135a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80112e6:	697b      	ldr	r3, [r7, #20]
 80112e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d002      	beq.n	80112f6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80112f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80112f4:	e031      	b.n	801135a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80112f6:	697b      	ldr	r3, [r7, #20]
 80112f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d002      	beq.n	8011306 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011300:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8011304:	e029      	b.n	801135a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8011306:	697b      	ldr	r3, [r7, #20]
 8011308:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801130c:	2b00      	cmp	r3, #0
 801130e:	d002      	beq.n	8011316 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011310:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011314:	e021      	b.n	801135a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8011316:	697b      	ldr	r3, [r7, #20]
 8011318:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801131c:	2b00      	cmp	r3, #0
 801131e:	d002      	beq.n	8011326 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011320:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8011324:	e019      	b.n	801135a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8011326:	697b      	ldr	r3, [r7, #20]
 8011328:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801132c:	2b00      	cmp	r3, #0
 801132e:	d002      	beq.n	8011336 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011330:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8011334:	e011      	b.n	801135a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8011336:	697b      	ldr	r3, [r7, #20]
 8011338:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801133c:	2b00      	cmp	r3, #0
 801133e:	d002      	beq.n	8011346 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011340:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8011344:	e009      	b.n	801135a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8011346:	697b      	ldr	r3, [r7, #20]
 8011348:	f003 0308 	and.w	r3, r3, #8
 801134c:	2b00      	cmp	r3, #0
 801134e:	d002      	beq.n	8011356 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011350:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8011354:	e001      	b.n	801135a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011356:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801135a:	4618      	mov	r0, r3
 801135c:	3720      	adds	r7, #32
 801135e:	46bd      	mov	sp, r7
 8011360:	bd80      	pop	{r7, pc}
 8011362:	bf00      	nop
 8011364:	2000001c 	.word	0x2000001c
 8011368:	10624dd3 	.word	0x10624dd3
 801136c:	fdffe008 	.word	0xfdffe008

08011370 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8011370:	b480      	push	{r7}
 8011372:	b085      	sub	sp, #20
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011378:	4b1f      	ldr	r3, [pc, #124]	@ (80113f8 <SDMMC_GetCmdResp2+0x88>)
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	4a1f      	ldr	r2, [pc, #124]	@ (80113fc <SDMMC_GetCmdResp2+0x8c>)
 801137e:	fba2 2303 	umull	r2, r3, r2, r3
 8011382:	0a5b      	lsrs	r3, r3, #9
 8011384:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011388:	fb02 f303 	mul.w	r3, r2, r3
 801138c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	1e5a      	subs	r2, r3, #1
 8011392:	60fa      	str	r2, [r7, #12]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d102      	bne.n	801139e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011398:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801139c:	e026      	b.n	80113ec <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80113a2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80113a4:	68bb      	ldr	r3, [r7, #8]
 80113a6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d0ef      	beq.n	801138e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80113ae:	68bb      	ldr	r3, [r7, #8]
 80113b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d1ea      	bne.n	801138e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80113bc:	f003 0304 	and.w	r3, r3, #4
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d004      	beq.n	80113ce <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	2204      	movs	r2, #4
 80113c8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80113ca:	2304      	movs	r3, #4
 80113cc:	e00e      	b.n	80113ec <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80113d2:	f003 0301 	and.w	r3, r3, #1
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d004      	beq.n	80113e4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	2201      	movs	r2, #1
 80113de:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80113e0:	2301      	movs	r3, #1
 80113e2:	e003      	b.n	80113ec <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	22c5      	movs	r2, #197	@ 0xc5
 80113e8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80113ea:	2300      	movs	r3, #0
}
 80113ec:	4618      	mov	r0, r3
 80113ee:	3714      	adds	r7, #20
 80113f0:	46bd      	mov	sp, r7
 80113f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f6:	4770      	bx	lr
 80113f8:	2000001c 	.word	0x2000001c
 80113fc:	10624dd3 	.word	0x10624dd3

08011400 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8011400:	b480      	push	{r7}
 8011402:	b085      	sub	sp, #20
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011408:	4b1a      	ldr	r3, [pc, #104]	@ (8011474 <SDMMC_GetCmdResp3+0x74>)
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	4a1a      	ldr	r2, [pc, #104]	@ (8011478 <SDMMC_GetCmdResp3+0x78>)
 801140e:	fba2 2303 	umull	r2, r3, r2, r3
 8011412:	0a5b      	lsrs	r3, r3, #9
 8011414:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011418:	fb02 f303 	mul.w	r3, r2, r3
 801141c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	1e5a      	subs	r2, r3, #1
 8011422:	60fa      	str	r2, [r7, #12]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d102      	bne.n	801142e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011428:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801142c:	e01b      	b.n	8011466 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011432:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011434:	68bb      	ldr	r3, [r7, #8]
 8011436:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801143a:	2b00      	cmp	r3, #0
 801143c:	d0ef      	beq.n	801141e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801143e:	68bb      	ldr	r3, [r7, #8]
 8011440:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011444:	2b00      	cmp	r3, #0
 8011446:	d1ea      	bne.n	801141e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801144c:	f003 0304 	and.w	r3, r3, #4
 8011450:	2b00      	cmp	r3, #0
 8011452:	d004      	beq.n	801145e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	2204      	movs	r2, #4
 8011458:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801145a:	2304      	movs	r3, #4
 801145c:	e003      	b.n	8011466 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	22c5      	movs	r2, #197	@ 0xc5
 8011462:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011464:	2300      	movs	r3, #0
}
 8011466:	4618      	mov	r0, r3
 8011468:	3714      	adds	r7, #20
 801146a:	46bd      	mov	sp, r7
 801146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011470:	4770      	bx	lr
 8011472:	bf00      	nop
 8011474:	2000001c 	.word	0x2000001c
 8011478:	10624dd3 	.word	0x10624dd3

0801147c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 801147c:	b580      	push	{r7, lr}
 801147e:	b088      	sub	sp, #32
 8011480:	af00      	add	r7, sp, #0
 8011482:	60f8      	str	r0, [r7, #12]
 8011484:	460b      	mov	r3, r1
 8011486:	607a      	str	r2, [r7, #4]
 8011488:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801148a:	4b35      	ldr	r3, [pc, #212]	@ (8011560 <SDMMC_GetCmdResp6+0xe4>)
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	4a35      	ldr	r2, [pc, #212]	@ (8011564 <SDMMC_GetCmdResp6+0xe8>)
 8011490:	fba2 2303 	umull	r2, r3, r2, r3
 8011494:	0a5b      	lsrs	r3, r3, #9
 8011496:	f241 3288 	movw	r2, #5000	@ 0x1388
 801149a:	fb02 f303 	mul.w	r3, r2, r3
 801149e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80114a0:	69fb      	ldr	r3, [r7, #28]
 80114a2:	1e5a      	subs	r2, r3, #1
 80114a4:	61fa      	str	r2, [r7, #28]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d102      	bne.n	80114b0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80114aa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80114ae:	e052      	b.n	8011556 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80114b4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80114b6:	69bb      	ldr	r3, [r7, #24]
 80114b8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d0ef      	beq.n	80114a0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80114c0:	69bb      	ldr	r3, [r7, #24]
 80114c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d1ea      	bne.n	80114a0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80114ce:	f003 0304 	and.w	r3, r3, #4
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d004      	beq.n	80114e0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	2204      	movs	r2, #4
 80114da:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80114dc:	2304      	movs	r3, #4
 80114de:	e03a      	b.n	8011556 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80114e4:	f003 0301 	and.w	r3, r3, #1
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d004      	beq.n	80114f6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	2201      	movs	r2, #1
 80114f0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80114f2:	2301      	movs	r3, #1
 80114f4:	e02f      	b.n	8011556 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80114f6:	68f8      	ldr	r0, [r7, #12]
 80114f8:	f7ff fbca 	bl	8010c90 <SDMMC_GetCommandResponse>
 80114fc:	4603      	mov	r3, r0
 80114fe:	461a      	mov	r2, r3
 8011500:	7afb      	ldrb	r3, [r7, #11]
 8011502:	4293      	cmp	r3, r2
 8011504:	d001      	beq.n	801150a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011506:	2301      	movs	r3, #1
 8011508:	e025      	b.n	8011556 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	22c5      	movs	r2, #197	@ 0xc5
 801150e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011510:	2100      	movs	r1, #0
 8011512:	68f8      	ldr	r0, [r7, #12]
 8011514:	f7ff fbc9 	bl	8010caa <SDMMC_GetResponse>
 8011518:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 801151a:	697b      	ldr	r3, [r7, #20]
 801151c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8011520:	2b00      	cmp	r3, #0
 8011522:	d106      	bne.n	8011532 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8011524:	697b      	ldr	r3, [r7, #20]
 8011526:	0c1b      	lsrs	r3, r3, #16
 8011528:	b29a      	uxth	r2, r3
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 801152e:	2300      	movs	r3, #0
 8011530:	e011      	b.n	8011556 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011532:	697b      	ldr	r3, [r7, #20]
 8011534:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011538:	2b00      	cmp	r3, #0
 801153a:	d002      	beq.n	8011542 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801153c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011540:	e009      	b.n	8011556 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011542:	697b      	ldr	r3, [r7, #20]
 8011544:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011548:	2b00      	cmp	r3, #0
 801154a:	d002      	beq.n	8011552 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801154c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011550:	e001      	b.n	8011556 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011552:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8011556:	4618      	mov	r0, r3
 8011558:	3720      	adds	r7, #32
 801155a:	46bd      	mov	sp, r7
 801155c:	bd80      	pop	{r7, pc}
 801155e:	bf00      	nop
 8011560:	2000001c 	.word	0x2000001c
 8011564:	10624dd3 	.word	0x10624dd3

08011568 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8011568:	b480      	push	{r7}
 801156a:	b085      	sub	sp, #20
 801156c:	af00      	add	r7, sp, #0
 801156e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011570:	4b22      	ldr	r3, [pc, #136]	@ (80115fc <SDMMC_GetCmdResp7+0x94>)
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	4a22      	ldr	r2, [pc, #136]	@ (8011600 <SDMMC_GetCmdResp7+0x98>)
 8011576:	fba2 2303 	umull	r2, r3, r2, r3
 801157a:	0a5b      	lsrs	r3, r3, #9
 801157c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011580:	fb02 f303 	mul.w	r3, r2, r3
 8011584:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	1e5a      	subs	r2, r3, #1
 801158a:	60fa      	str	r2, [r7, #12]
 801158c:	2b00      	cmp	r3, #0
 801158e:	d102      	bne.n	8011596 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011590:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011594:	e02c      	b.n	80115f0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801159a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801159c:	68bb      	ldr	r3, [r7, #8]
 801159e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d0ef      	beq.n	8011586 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80115a6:	68bb      	ldr	r3, [r7, #8]
 80115a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d1ea      	bne.n	8011586 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80115b4:	f003 0304 	and.w	r3, r3, #4
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d004      	beq.n	80115c6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	2204      	movs	r2, #4
 80115c0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80115c2:	2304      	movs	r3, #4
 80115c4:	e014      	b.n	80115f0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80115ca:	f003 0301 	and.w	r3, r3, #1
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d004      	beq.n	80115dc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	2201      	movs	r2, #1
 80115d6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80115d8:	2301      	movs	r3, #1
 80115da:	e009      	b.n	80115f0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80115e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d002      	beq.n	80115ee <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	2240      	movs	r2, #64	@ 0x40
 80115ec:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80115ee:	2300      	movs	r3, #0
  
}
 80115f0:	4618      	mov	r0, r3
 80115f2:	3714      	adds	r7, #20
 80115f4:	46bd      	mov	sp, r7
 80115f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fa:	4770      	bx	lr
 80115fc:	2000001c 	.word	0x2000001c
 8011600:	10624dd3 	.word	0x10624dd3

08011604 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8011604:	b480      	push	{r7}
 8011606:	b085      	sub	sp, #20
 8011608:	af00      	add	r7, sp, #0
 801160a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801160c:	4b11      	ldr	r3, [pc, #68]	@ (8011654 <SDMMC_GetCmdError+0x50>)
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	4a11      	ldr	r2, [pc, #68]	@ (8011658 <SDMMC_GetCmdError+0x54>)
 8011612:	fba2 2303 	umull	r2, r3, r2, r3
 8011616:	0a5b      	lsrs	r3, r3, #9
 8011618:	f241 3288 	movw	r2, #5000	@ 0x1388
 801161c:	fb02 f303 	mul.w	r3, r2, r3
 8011620:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	1e5a      	subs	r2, r3, #1
 8011626:	60fa      	str	r2, [r7, #12]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d102      	bne.n	8011632 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801162c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011630:	e009      	b.n	8011646 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801163a:	2b00      	cmp	r3, #0
 801163c:	d0f1      	beq.n	8011622 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	22c5      	movs	r2, #197	@ 0xc5
 8011642:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8011644:	2300      	movs	r3, #0
}
 8011646:	4618      	mov	r0, r3
 8011648:	3714      	adds	r7, #20
 801164a:	46bd      	mov	sp, r7
 801164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011650:	4770      	bx	lr
 8011652:	bf00      	nop
 8011654:	2000001c 	.word	0x2000001c
 8011658:	10624dd3 	.word	0x10624dd3

0801165c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801165c:	b480      	push	{r7}
 801165e:	b083      	sub	sp, #12
 8011660:	af00      	add	r7, sp, #0
 8011662:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	689b      	ldr	r3, [r3, #8]
 8011668:	f043 0201 	orr.w	r2, r3, #1
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011670:	2300      	movs	r3, #0
}
 8011672:	4618      	mov	r0, r3
 8011674:	370c      	adds	r7, #12
 8011676:	46bd      	mov	sp, r7
 8011678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167c:	4770      	bx	lr

0801167e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801167e:	b480      	push	{r7}
 8011680:	b083      	sub	sp, #12
 8011682:	af00      	add	r7, sp, #0
 8011684:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	689b      	ldr	r3, [r3, #8]
 801168a:	f023 0201 	bic.w	r2, r3, #1
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011692:	2300      	movs	r3, #0
}
 8011694:	4618      	mov	r0, r3
 8011696:	370c      	adds	r7, #12
 8011698:	46bd      	mov	sp, r7
 801169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801169e:	4770      	bx	lr

080116a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80116a0:	b480      	push	{r7}
 80116a2:	b085      	sub	sp, #20
 80116a4:	af00      	add	r7, sp, #0
 80116a6:	6078      	str	r0, [r7, #4]
 80116a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80116aa:	2300      	movs	r3, #0
 80116ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	3301      	adds	r3, #1
 80116b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80116ba:	d901      	bls.n	80116c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80116bc:	2303      	movs	r3, #3
 80116be:	e01b      	b.n	80116f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	691b      	ldr	r3, [r3, #16]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	daf2      	bge.n	80116ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80116c8:	2300      	movs	r3, #0
 80116ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80116cc:	683b      	ldr	r3, [r7, #0]
 80116ce:	019b      	lsls	r3, r3, #6
 80116d0:	f043 0220 	orr.w	r2, r3, #32
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	3301      	adds	r3, #1
 80116dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80116e4:	d901      	bls.n	80116ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80116e6:	2303      	movs	r3, #3
 80116e8:	e006      	b.n	80116f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	691b      	ldr	r3, [r3, #16]
 80116ee:	f003 0320 	and.w	r3, r3, #32
 80116f2:	2b20      	cmp	r3, #32
 80116f4:	d0f0      	beq.n	80116d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80116f6:	2300      	movs	r3, #0
}
 80116f8:	4618      	mov	r0, r3
 80116fa:	3714      	adds	r7, #20
 80116fc:	46bd      	mov	sp, r7
 80116fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011702:	4770      	bx	lr

08011704 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011704:	b480      	push	{r7}
 8011706:	b085      	sub	sp, #20
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801170c:	2300      	movs	r3, #0
 801170e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	3301      	adds	r3, #1
 8011714:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801171c:	d901      	bls.n	8011722 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801171e:	2303      	movs	r3, #3
 8011720:	e018      	b.n	8011754 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	691b      	ldr	r3, [r3, #16]
 8011726:	2b00      	cmp	r3, #0
 8011728:	daf2      	bge.n	8011710 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801172a:	2300      	movs	r3, #0
 801172c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	2210      	movs	r2, #16
 8011732:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	3301      	adds	r3, #1
 8011738:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011740:	d901      	bls.n	8011746 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8011742:	2303      	movs	r3, #3
 8011744:	e006      	b.n	8011754 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	691b      	ldr	r3, [r3, #16]
 801174a:	f003 0310 	and.w	r3, r3, #16
 801174e:	2b10      	cmp	r3, #16
 8011750:	d0f0      	beq.n	8011734 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8011752:	2300      	movs	r3, #0
}
 8011754:	4618      	mov	r0, r3
 8011756:	3714      	adds	r7, #20
 8011758:	46bd      	mov	sp, r7
 801175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175e:	4770      	bx	lr

08011760 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011760:	b480      	push	{r7}
 8011762:	b08b      	sub	sp, #44	@ 0x2c
 8011764:	af00      	add	r7, sp, #0
 8011766:	60f8      	str	r0, [r7, #12]
 8011768:	60b9      	str	r1, [r7, #8]
 801176a:	4613      	mov	r3, r2
 801176c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8011772:	68bb      	ldr	r3, [r7, #8]
 8011774:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8011776:	88fb      	ldrh	r3, [r7, #6]
 8011778:	089b      	lsrs	r3, r3, #2
 801177a:	b29b      	uxth	r3, r3
 801177c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801177e:	88fb      	ldrh	r3, [r7, #6]
 8011780:	f003 0303 	and.w	r3, r3, #3
 8011784:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8011786:	2300      	movs	r3, #0
 8011788:	623b      	str	r3, [r7, #32]
 801178a:	e014      	b.n	80117b6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801178c:	69bb      	ldr	r3, [r7, #24]
 801178e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011792:	681a      	ldr	r2, [r3, #0]
 8011794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011796:	601a      	str	r2, [r3, #0]
    pDest++;
 8011798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801179a:	3301      	adds	r3, #1
 801179c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801179e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117a0:	3301      	adds	r3, #1
 80117a2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80117a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117a6:	3301      	adds	r3, #1
 80117a8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80117aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117ac:	3301      	adds	r3, #1
 80117ae:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80117b0:	6a3b      	ldr	r3, [r7, #32]
 80117b2:	3301      	adds	r3, #1
 80117b4:	623b      	str	r3, [r7, #32]
 80117b6:	6a3a      	ldr	r2, [r7, #32]
 80117b8:	697b      	ldr	r3, [r7, #20]
 80117ba:	429a      	cmp	r2, r3
 80117bc:	d3e6      	bcc.n	801178c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80117be:	8bfb      	ldrh	r3, [r7, #30]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d01e      	beq.n	8011802 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80117c4:	2300      	movs	r3, #0
 80117c6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80117c8:	69bb      	ldr	r3, [r7, #24]
 80117ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80117ce:	461a      	mov	r2, r3
 80117d0:	f107 0310 	add.w	r3, r7, #16
 80117d4:	6812      	ldr	r2, [r2, #0]
 80117d6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80117d8:	693a      	ldr	r2, [r7, #16]
 80117da:	6a3b      	ldr	r3, [r7, #32]
 80117dc:	b2db      	uxtb	r3, r3
 80117de:	00db      	lsls	r3, r3, #3
 80117e0:	fa22 f303 	lsr.w	r3, r2, r3
 80117e4:	b2da      	uxtb	r2, r3
 80117e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117e8:	701a      	strb	r2, [r3, #0]
      i++;
 80117ea:	6a3b      	ldr	r3, [r7, #32]
 80117ec:	3301      	adds	r3, #1
 80117ee:	623b      	str	r3, [r7, #32]
      pDest++;
 80117f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117f2:	3301      	adds	r3, #1
 80117f4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80117f6:	8bfb      	ldrh	r3, [r7, #30]
 80117f8:	3b01      	subs	r3, #1
 80117fa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80117fc:	8bfb      	ldrh	r3, [r7, #30]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d1ea      	bne.n	80117d8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8011802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011804:	4618      	mov	r0, r3
 8011806:	372c      	adds	r7, #44	@ 0x2c
 8011808:	46bd      	mov	sp, r7
 801180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180e:	4770      	bx	lr

08011810 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8011810:	b480      	push	{r7}
 8011812:	b085      	sub	sp, #20
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	695b      	ldr	r3, [r3, #20]
 801181c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	699b      	ldr	r3, [r3, #24]
 8011822:	68fa      	ldr	r2, [r7, #12]
 8011824:	4013      	ands	r3, r2
 8011826:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011828:	68fb      	ldr	r3, [r7, #12]
}
 801182a:	4618      	mov	r0, r3
 801182c:	3714      	adds	r7, #20
 801182e:	46bd      	mov	sp, r7
 8011830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011834:	4770      	bx	lr

08011836 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8011836:	b480      	push	{r7}
 8011838:	b085      	sub	sp, #20
 801183a:	af00      	add	r7, sp, #0
 801183c:	6078      	str	r0, [r7, #4]
 801183e:	460b      	mov	r3, r1
 8011840:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8011846:	78fb      	ldrb	r3, [r7, #3]
 8011848:	015a      	lsls	r2, r3, #5
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	4413      	add	r3, r2
 801184e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011852:	689b      	ldr	r3, [r3, #8]
 8011854:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8011856:	78fb      	ldrb	r3, [r7, #3]
 8011858:	015a      	lsls	r2, r3, #5
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	4413      	add	r3, r2
 801185e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011862:	68db      	ldr	r3, [r3, #12]
 8011864:	68ba      	ldr	r2, [r7, #8]
 8011866:	4013      	ands	r3, r2
 8011868:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801186a:	68bb      	ldr	r3, [r7, #8]
}
 801186c:	4618      	mov	r0, r3
 801186e:	3714      	adds	r7, #20
 8011870:	46bd      	mov	sp, r7
 8011872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011876:	4770      	bx	lr

08011878 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8011878:	b480      	push	{r7}
 801187a:	b083      	sub	sp, #12
 801187c:	af00      	add	r7, sp, #0
 801187e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	695b      	ldr	r3, [r3, #20]
 8011884:	f003 0301 	and.w	r3, r3, #1
}
 8011888:	4618      	mov	r0, r3
 801188a:	370c      	adds	r7, #12
 801188c:	46bd      	mov	sp, r7
 801188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011892:	4770      	bx	lr

08011894 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8011894:	b480      	push	{r7}
 8011896:	b085      	sub	sp, #20
 8011898:	af00      	add	r7, sp, #0
 801189a:	6078      	str	r0, [r7, #4]
 801189c:	460b      	mov	r3, r1
 801189e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	68fa      	ldr	r2, [r7, #12]
 80118ae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80118b2:	f023 0303 	bic.w	r3, r3, #3
 80118b6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80118be:	681a      	ldr	r2, [r3, #0]
 80118c0:	78fb      	ldrb	r3, [r7, #3]
 80118c2:	f003 0303 	and.w	r3, r3, #3
 80118c6:	68f9      	ldr	r1, [r7, #12]
 80118c8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80118cc:	4313      	orrs	r3, r2
 80118ce:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80118d0:	78fb      	ldrb	r3, [r7, #3]
 80118d2:	2b01      	cmp	r3, #1
 80118d4:	d107      	bne.n	80118e6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80118dc:	461a      	mov	r2, r3
 80118de:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80118e2:	6053      	str	r3, [r2, #4]
 80118e4:	e00c      	b.n	8011900 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80118e6:	78fb      	ldrb	r3, [r7, #3]
 80118e8:	2b02      	cmp	r3, #2
 80118ea:	d107      	bne.n	80118fc <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80118f2:	461a      	mov	r2, r3
 80118f4:	f241 7370 	movw	r3, #6000	@ 0x1770
 80118f8:	6053      	str	r3, [r2, #4]
 80118fa:	e001      	b.n	8011900 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80118fc:	2301      	movs	r3, #1
 80118fe:	e000      	b.n	8011902 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8011900:	2300      	movs	r3, #0
}
 8011902:	4618      	mov	r0, r3
 8011904:	3714      	adds	r7, #20
 8011906:	46bd      	mov	sp, r7
 8011908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801190c:	4770      	bx	lr

0801190e <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801190e:	b480      	push	{r7}
 8011910:	b085      	sub	sp, #20
 8011912:	af00      	add	r7, sp, #0
 8011914:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011920:	695b      	ldr	r3, [r3, #20]
 8011922:	b29b      	uxth	r3, r3
}
 8011924:	4618      	mov	r0, r3
 8011926:	3714      	adds	r7, #20
 8011928:	46bd      	mov	sp, r7
 801192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801192e:	4770      	bx	lr

08011930 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8011930:	b480      	push	{r7}
 8011932:	b089      	sub	sp, #36	@ 0x24
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
 8011938:	460b      	mov	r3, r1
 801193a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8011940:	78fb      	ldrb	r3, [r7, #3]
 8011942:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8011944:	2300      	movs	r3, #0
 8011946:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8011948:	69bb      	ldr	r3, [r7, #24]
 801194a:	015a      	lsls	r2, r3, #5
 801194c:	69fb      	ldr	r3, [r7, #28]
 801194e:	4413      	add	r3, r2
 8011950:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	0c9b      	lsrs	r3, r3, #18
 8011958:	f003 0303 	and.w	r3, r3, #3
 801195c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 801195e:	69bb      	ldr	r3, [r7, #24]
 8011960:	015a      	lsls	r2, r3, #5
 8011962:	69fb      	ldr	r3, [r7, #28]
 8011964:	4413      	add	r3, r2
 8011966:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	0fdb      	lsrs	r3, r3, #31
 801196e:	f003 0301 	and.w	r3, r3, #1
 8011972:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8011974:	69bb      	ldr	r3, [r7, #24]
 8011976:	015a      	lsls	r2, r3, #5
 8011978:	69fb      	ldr	r3, [r7, #28]
 801197a:	4413      	add	r3, r2
 801197c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011980:	685b      	ldr	r3, [r3, #4]
 8011982:	0fdb      	lsrs	r3, r3, #31
 8011984:	f003 0301 	and.w	r3, r3, #1
 8011988:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	689b      	ldr	r3, [r3, #8]
 801198e:	f003 0320 	and.w	r3, r3, #32
 8011992:	2b20      	cmp	r3, #32
 8011994:	d10d      	bne.n	80119b2 <USB_HC_Halt+0x82>
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d10a      	bne.n	80119b2 <USB_HC_Halt+0x82>
 801199c:	693b      	ldr	r3, [r7, #16]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d005      	beq.n	80119ae <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80119a2:	697b      	ldr	r3, [r7, #20]
 80119a4:	2b01      	cmp	r3, #1
 80119a6:	d002      	beq.n	80119ae <USB_HC_Halt+0x7e>
 80119a8:	697b      	ldr	r3, [r7, #20]
 80119aa:	2b03      	cmp	r3, #3
 80119ac:	d101      	bne.n	80119b2 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80119ae:	2300      	movs	r3, #0
 80119b0:	e0d8      	b.n	8011b64 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80119b2:	697b      	ldr	r3, [r7, #20]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d002      	beq.n	80119be <USB_HC_Halt+0x8e>
 80119b8:	697b      	ldr	r3, [r7, #20]
 80119ba:	2b02      	cmp	r3, #2
 80119bc:	d173      	bne.n	8011aa6 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80119be:	69bb      	ldr	r3, [r7, #24]
 80119c0:	015a      	lsls	r2, r3, #5
 80119c2:	69fb      	ldr	r3, [r7, #28]
 80119c4:	4413      	add	r3, r2
 80119c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	69ba      	ldr	r2, [r7, #24]
 80119ce:	0151      	lsls	r1, r2, #5
 80119d0:	69fa      	ldr	r2, [r7, #28]
 80119d2:	440a      	add	r2, r1
 80119d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80119d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80119dc:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	689b      	ldr	r3, [r3, #8]
 80119e2:	f003 0320 	and.w	r3, r3, #32
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d14a      	bne.n	8011a80 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119ee:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d133      	bne.n	8011a5e <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80119f6:	69bb      	ldr	r3, [r7, #24]
 80119f8:	015a      	lsls	r2, r3, #5
 80119fa:	69fb      	ldr	r3, [r7, #28]
 80119fc:	4413      	add	r3, r2
 80119fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	69ba      	ldr	r2, [r7, #24]
 8011a06:	0151      	lsls	r1, r2, #5
 8011a08:	69fa      	ldr	r2, [r7, #28]
 8011a0a:	440a      	add	r2, r1
 8011a0c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011a10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011a14:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011a16:	69bb      	ldr	r3, [r7, #24]
 8011a18:	015a      	lsls	r2, r3, #5
 8011a1a:	69fb      	ldr	r3, [r7, #28]
 8011a1c:	4413      	add	r3, r2
 8011a1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	69ba      	ldr	r2, [r7, #24]
 8011a26:	0151      	lsls	r1, r2, #5
 8011a28:	69fa      	ldr	r2, [r7, #28]
 8011a2a:	440a      	add	r2, r1
 8011a2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011a30:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011a34:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8011a36:	68bb      	ldr	r3, [r7, #8]
 8011a38:	3301      	adds	r3, #1
 8011a3a:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8011a3c:	68bb      	ldr	r3, [r7, #8]
 8011a3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011a42:	d82e      	bhi.n	8011aa2 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8011a44:	69bb      	ldr	r3, [r7, #24]
 8011a46:	015a      	lsls	r2, r3, #5
 8011a48:	69fb      	ldr	r3, [r7, #28]
 8011a4a:	4413      	add	r3, r2
 8011a4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011a56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011a5a:	d0ec      	beq.n	8011a36 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011a5c:	e081      	b.n	8011b62 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011a5e:	69bb      	ldr	r3, [r7, #24]
 8011a60:	015a      	lsls	r2, r3, #5
 8011a62:	69fb      	ldr	r3, [r7, #28]
 8011a64:	4413      	add	r3, r2
 8011a66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	69ba      	ldr	r2, [r7, #24]
 8011a6e:	0151      	lsls	r1, r2, #5
 8011a70:	69fa      	ldr	r2, [r7, #28]
 8011a72:	440a      	add	r2, r1
 8011a74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011a78:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011a7c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011a7e:	e070      	b.n	8011b62 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011a80:	69bb      	ldr	r3, [r7, #24]
 8011a82:	015a      	lsls	r2, r3, #5
 8011a84:	69fb      	ldr	r3, [r7, #28]
 8011a86:	4413      	add	r3, r2
 8011a88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	69ba      	ldr	r2, [r7, #24]
 8011a90:	0151      	lsls	r1, r2, #5
 8011a92:	69fa      	ldr	r2, [r7, #28]
 8011a94:	440a      	add	r2, r1
 8011a96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011a9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011a9e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011aa0:	e05f      	b.n	8011b62 <USB_HC_Halt+0x232>
            break;
 8011aa2:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011aa4:	e05d      	b.n	8011b62 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8011aa6:	69bb      	ldr	r3, [r7, #24]
 8011aa8:	015a      	lsls	r2, r3, #5
 8011aaa:	69fb      	ldr	r3, [r7, #28]
 8011aac:	4413      	add	r3, r2
 8011aae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	69ba      	ldr	r2, [r7, #24]
 8011ab6:	0151      	lsls	r1, r2, #5
 8011ab8:	69fa      	ldr	r2, [r7, #28]
 8011aba:	440a      	add	r2, r1
 8011abc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011ac0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011ac4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8011ac6:	69fb      	ldr	r3, [r7, #28]
 8011ac8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011acc:	691b      	ldr	r3, [r3, #16]
 8011ace:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d133      	bne.n	8011b3e <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8011ad6:	69bb      	ldr	r3, [r7, #24]
 8011ad8:	015a      	lsls	r2, r3, #5
 8011ada:	69fb      	ldr	r3, [r7, #28]
 8011adc:	4413      	add	r3, r2
 8011ade:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	69ba      	ldr	r2, [r7, #24]
 8011ae6:	0151      	lsls	r1, r2, #5
 8011ae8:	69fa      	ldr	r2, [r7, #28]
 8011aea:	440a      	add	r2, r1
 8011aec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011af0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011af4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011af6:	69bb      	ldr	r3, [r7, #24]
 8011af8:	015a      	lsls	r2, r3, #5
 8011afa:	69fb      	ldr	r3, [r7, #28]
 8011afc:	4413      	add	r3, r2
 8011afe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	69ba      	ldr	r2, [r7, #24]
 8011b06:	0151      	lsls	r1, r2, #5
 8011b08:	69fa      	ldr	r2, [r7, #28]
 8011b0a:	440a      	add	r2, r1
 8011b0c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011b10:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011b14:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8011b16:	68bb      	ldr	r3, [r7, #8]
 8011b18:	3301      	adds	r3, #1
 8011b1a:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8011b1c:	68bb      	ldr	r3, [r7, #8]
 8011b1e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011b22:	d81d      	bhi.n	8011b60 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8011b24:	69bb      	ldr	r3, [r7, #24]
 8011b26:	015a      	lsls	r2, r3, #5
 8011b28:	69fb      	ldr	r3, [r7, #28]
 8011b2a:	4413      	add	r3, r2
 8011b2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011b36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011b3a:	d0ec      	beq.n	8011b16 <USB_HC_Halt+0x1e6>
 8011b3c:	e011      	b.n	8011b62 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011b3e:	69bb      	ldr	r3, [r7, #24]
 8011b40:	015a      	lsls	r2, r3, #5
 8011b42:	69fb      	ldr	r3, [r7, #28]
 8011b44:	4413      	add	r3, r2
 8011b46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	69ba      	ldr	r2, [r7, #24]
 8011b4e:	0151      	lsls	r1, r2, #5
 8011b50:	69fa      	ldr	r2, [r7, #28]
 8011b52:	440a      	add	r2, r1
 8011b54:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011b58:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011b5c:	6013      	str	r3, [r2, #0]
 8011b5e:	e000      	b.n	8011b62 <USB_HC_Halt+0x232>
          break;
 8011b60:	bf00      	nop
    }
  }

  return HAL_OK;
 8011b62:	2300      	movs	r3, #0
}
 8011b64:	4618      	mov	r0, r3
 8011b66:	3724      	adds	r7, #36	@ 0x24
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6e:	4770      	bx	lr

08011b70 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b088      	sub	sp, #32
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8011b78:	2300      	movs	r3, #0
 8011b7a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8011b80:	2300      	movs	r3, #0
 8011b82:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8011b84:	6878      	ldr	r0, [r7, #4]
 8011b86:	f7ff fd7a 	bl	801167e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011b8a:	2110      	movs	r1, #16
 8011b8c:	6878      	ldr	r0, [r7, #4]
 8011b8e:	f7ff fd87 	bl	80116a0 <USB_FlushTxFifo>
 8011b92:	4603      	mov	r3, r0
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d001      	beq.n	8011b9c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8011b98:	2301      	movs	r3, #1
 8011b9a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011b9c:	6878      	ldr	r0, [r7, #4]
 8011b9e:	f7ff fdb1 	bl	8011704 <USB_FlushRxFifo>
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d001      	beq.n	8011bac <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8011ba8:	2301      	movs	r3, #1
 8011baa:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8011bac:	2300      	movs	r3, #0
 8011bae:	61bb      	str	r3, [r7, #24]
 8011bb0:	e01f      	b.n	8011bf2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8011bb2:	69bb      	ldr	r3, [r7, #24]
 8011bb4:	015a      	lsls	r2, r3, #5
 8011bb6:	697b      	ldr	r3, [r7, #20]
 8011bb8:	4413      	add	r3, r2
 8011bba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8011bc2:	693b      	ldr	r3, [r7, #16]
 8011bc4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011bc8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8011bca:	693b      	ldr	r3, [r7, #16]
 8011bcc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011bd0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8011bd2:	693b      	ldr	r3, [r7, #16]
 8011bd4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8011bd8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8011bda:	69bb      	ldr	r3, [r7, #24]
 8011bdc:	015a      	lsls	r2, r3, #5
 8011bde:	697b      	ldr	r3, [r7, #20]
 8011be0:	4413      	add	r3, r2
 8011be2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011be6:	461a      	mov	r2, r3
 8011be8:	693b      	ldr	r3, [r7, #16]
 8011bea:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8011bec:	69bb      	ldr	r3, [r7, #24]
 8011bee:	3301      	adds	r3, #1
 8011bf0:	61bb      	str	r3, [r7, #24]
 8011bf2:	69bb      	ldr	r3, [r7, #24]
 8011bf4:	2b0f      	cmp	r3, #15
 8011bf6:	d9dc      	bls.n	8011bb2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	61bb      	str	r3, [r7, #24]
 8011bfc:	e034      	b.n	8011c68 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8011bfe:	69bb      	ldr	r3, [r7, #24]
 8011c00:	015a      	lsls	r2, r3, #5
 8011c02:	697b      	ldr	r3, [r7, #20]
 8011c04:	4413      	add	r3, r2
 8011c06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8011c0e:	693b      	ldr	r3, [r7, #16]
 8011c10:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011c14:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011c1c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8011c1e:	693b      	ldr	r3, [r7, #16]
 8011c20:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8011c24:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8011c26:	69bb      	ldr	r3, [r7, #24]
 8011c28:	015a      	lsls	r2, r3, #5
 8011c2a:	697b      	ldr	r3, [r7, #20]
 8011c2c:	4413      	add	r3, r2
 8011c2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011c32:	461a      	mov	r2, r3
 8011c34:	693b      	ldr	r3, [r7, #16]
 8011c36:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	3301      	adds	r3, #1
 8011c3c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011c44:	d80c      	bhi.n	8011c60 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8011c46:	69bb      	ldr	r3, [r7, #24]
 8011c48:	015a      	lsls	r2, r3, #5
 8011c4a:	697b      	ldr	r3, [r7, #20]
 8011c4c:	4413      	add	r3, r2
 8011c4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011c58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011c5c:	d0ec      	beq.n	8011c38 <USB_StopHost+0xc8>
 8011c5e:	e000      	b.n	8011c62 <USB_StopHost+0xf2>
        break;
 8011c60:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8011c62:	69bb      	ldr	r3, [r7, #24]
 8011c64:	3301      	adds	r3, #1
 8011c66:	61bb      	str	r3, [r7, #24]
 8011c68:	69bb      	ldr	r3, [r7, #24]
 8011c6a:	2b0f      	cmp	r3, #15
 8011c6c:	d9c7      	bls.n	8011bfe <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8011c6e:	697b      	ldr	r3, [r7, #20]
 8011c70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011c74:	461a      	mov	r2, r3
 8011c76:	f04f 33ff 	mov.w	r3, #4294967295
 8011c7a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8011c82:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8011c84:	6878      	ldr	r0, [r7, #4]
 8011c86:	f7ff fce9 	bl	801165c <USB_EnableGlobalInt>

  return ret;
 8011c8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	3720      	adds	r7, #32
 8011c90:	46bd      	mov	sp, r7
 8011c92:	bd80      	pop	{r7, pc}

08011c94 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011c94:	b580      	push	{r7, lr}
 8011c96:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011c98:	4904      	ldr	r1, [pc, #16]	@ (8011cac <MX_FATFS_Init+0x18>)
 8011c9a:	4805      	ldr	r0, [pc, #20]	@ (8011cb0 <MX_FATFS_Init+0x1c>)
 8011c9c:	f003 f91e 	bl	8014edc <FATFS_LinkDriver>
 8011ca0:	4603      	mov	r3, r0
 8011ca2:	461a      	mov	r2, r3
 8011ca4:	4b03      	ldr	r3, [pc, #12]	@ (8011cb4 <MX_FATFS_Init+0x20>)
 8011ca6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011ca8:	bf00      	nop
 8011caa:	bd80      	pop	{r7, pc}
 8011cac:	200026d4 	.word	0x200026d4
 8011cb0:	0801cd04 	.word	0x0801cd04
 8011cb4:	200026d0 	.word	0x200026d0

08011cb8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8011cb8:	b480      	push	{r7}
 8011cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8011cbc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc6:	4770      	bx	lr

08011cc8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8011cc8:	b580      	push	{r7, lr}
 8011cca:	b082      	sub	sp, #8
 8011ccc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8011cce:	2300      	movs	r3, #0
 8011cd0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8011cd2:	f000 f879 	bl	8011dc8 <BSP_SD_IsDetected>
 8011cd6:	4603      	mov	r3, r0
 8011cd8:	2b01      	cmp	r3, #1
 8011cda:	d001      	beq.n	8011ce0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8011cdc:	2302      	movs	r3, #2
 8011cde:	e012      	b.n	8011d06 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8011ce0:	480b      	ldr	r0, [pc, #44]	@ (8011d10 <BSP_SD_Init+0x48>)
 8011ce2:	f7fa feed 	bl	800cac0 <HAL_SD_Init>
 8011ce6:	4603      	mov	r3, r0
 8011ce8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8011cea:	79fb      	ldrb	r3, [r7, #7]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d109      	bne.n	8011d04 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8011cf0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8011cf4:	4806      	ldr	r0, [pc, #24]	@ (8011d10 <BSP_SD_Init+0x48>)
 8011cf6:	f7fb fcc7 	bl	800d688 <HAL_SD_ConfigWideBusOperation>
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d001      	beq.n	8011d04 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8011d00:	2301      	movs	r3, #1
 8011d02:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8011d04:	79fb      	ldrb	r3, [r7, #7]
}
 8011d06:	4618      	mov	r0, r3
 8011d08:	3708      	adds	r7, #8
 8011d0a:	46bd      	mov	sp, r7
 8011d0c:	bd80      	pop	{r7, pc}
 8011d0e:	bf00      	nop
 8011d10:	20001d90 	.word	0x20001d90

08011d14 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8011d14:	b580      	push	{r7, lr}
 8011d16:	b088      	sub	sp, #32
 8011d18:	af02      	add	r7, sp, #8
 8011d1a:	60f8      	str	r0, [r7, #12]
 8011d1c:	60b9      	str	r1, [r7, #8]
 8011d1e:	607a      	str	r2, [r7, #4]
 8011d20:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8011d22:	2300      	movs	r3, #0
 8011d24:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8011d26:	683b      	ldr	r3, [r7, #0]
 8011d28:	9300      	str	r3, [sp, #0]
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	68ba      	ldr	r2, [r7, #8]
 8011d2e:	68f9      	ldr	r1, [r7, #12]
 8011d30:	4806      	ldr	r0, [pc, #24]	@ (8011d4c <BSP_SD_ReadBlocks+0x38>)
 8011d32:	f7fa ff75 	bl	800cc20 <HAL_SD_ReadBlocks>
 8011d36:	4603      	mov	r3, r0
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d001      	beq.n	8011d40 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8011d3c:	2301      	movs	r3, #1
 8011d3e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d42:	4618      	mov	r0, r3
 8011d44:	3718      	adds	r7, #24
 8011d46:	46bd      	mov	sp, r7
 8011d48:	bd80      	pop	{r7, pc}
 8011d4a:	bf00      	nop
 8011d4c:	20001d90 	.word	0x20001d90

08011d50 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8011d50:	b580      	push	{r7, lr}
 8011d52:	b088      	sub	sp, #32
 8011d54:	af02      	add	r7, sp, #8
 8011d56:	60f8      	str	r0, [r7, #12]
 8011d58:	60b9      	str	r1, [r7, #8]
 8011d5a:	607a      	str	r2, [r7, #4]
 8011d5c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8011d5e:	2300      	movs	r3, #0
 8011d60:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8011d62:	683b      	ldr	r3, [r7, #0]
 8011d64:	9300      	str	r3, [sp, #0]
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	68ba      	ldr	r2, [r7, #8]
 8011d6a:	68f9      	ldr	r1, [r7, #12]
 8011d6c:	4806      	ldr	r0, [pc, #24]	@ (8011d88 <BSP_SD_WriteBlocks+0x38>)
 8011d6e:	f7fb f935 	bl	800cfdc <HAL_SD_WriteBlocks>
 8011d72:	4603      	mov	r3, r0
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d001      	beq.n	8011d7c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8011d78:	2301      	movs	r3, #1
 8011d7a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d7e:	4618      	mov	r0, r3
 8011d80:	3718      	adds	r7, #24
 8011d82:	46bd      	mov	sp, r7
 8011d84:	bd80      	pop	{r7, pc}
 8011d86:	bf00      	nop
 8011d88:	20001d90 	.word	0x20001d90

08011d8c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011d90:	4805      	ldr	r0, [pc, #20]	@ (8011da8 <BSP_SD_GetCardState+0x1c>)
 8011d92:	f7fb fd13 	bl	800d7bc <HAL_SD_GetCardState>
 8011d96:	4603      	mov	r3, r0
 8011d98:	2b04      	cmp	r3, #4
 8011d9a:	bf14      	ite	ne
 8011d9c:	2301      	movne	r3, #1
 8011d9e:	2300      	moveq	r3, #0
 8011da0:	b2db      	uxtb	r3, r3
}
 8011da2:	4618      	mov	r0, r3
 8011da4:	bd80      	pop	{r7, pc}
 8011da6:	bf00      	nop
 8011da8:	20001d90 	.word	0x20001d90

08011dac <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b082      	sub	sp, #8
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8011db4:	6879      	ldr	r1, [r7, #4]
 8011db6:	4803      	ldr	r0, [pc, #12]	@ (8011dc4 <BSP_SD_GetCardInfo+0x18>)
 8011db8:	f7fb fc3a 	bl	800d630 <HAL_SD_GetCardInfo>
}
 8011dbc:	bf00      	nop
 8011dbe:	3708      	adds	r7, #8
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	bd80      	pop	{r7, pc}
 8011dc4:	20001d90 	.word	0x20001d90

08011dc8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8011dc8:	b580      	push	{r7, lr}
 8011dca:	b082      	sub	sp, #8
 8011dcc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8011dce:	2301      	movs	r3, #1
 8011dd0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8011dd2:	f000 f80b 	bl	8011dec <BSP_PlatformIsDetected>
 8011dd6:	4603      	mov	r3, r0
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d101      	bne.n	8011de0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8011ddc:	2300      	movs	r3, #0
 8011dde:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8011de0:	79fb      	ldrb	r3, [r7, #7]
 8011de2:	b2db      	uxtb	r3, r3
}
 8011de4:	4618      	mov	r0, r3
 8011de6:	3708      	adds	r7, #8
 8011de8:	46bd      	mov	sp, r7
 8011dea:	bd80      	pop	{r7, pc}

08011dec <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b082      	sub	sp, #8
 8011df0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8011df2:	2301      	movs	r3, #1
 8011df4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8011df6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8011dfa:	4806      	ldr	r0, [pc, #24]	@ (8011e14 <BSP_PlatformIsDetected+0x28>)
 8011dfc:	f7f6 fbac 	bl	8008558 <HAL_GPIO_ReadPin>
 8011e00:	4603      	mov	r3, r0
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d001      	beq.n	8011e0a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8011e06:	2300      	movs	r3, #0
 8011e08:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8011e0a:	79fb      	ldrb	r3, [r7, #7]
}
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	3708      	adds	r7, #8
 8011e10:	46bd      	mov	sp, r7
 8011e12:	bd80      	pop	{r7, pc}
 8011e14:	40020800 	.word	0x40020800

08011e18 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8011e18:	b480      	push	{r7}
 8011e1a:	b087      	sub	sp, #28
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	6078      	str	r0, [r7, #4]
 8011e20:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8011e22:	683b      	ldr	r3, [r7, #0]
 8011e24:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8011e2a:	2320      	movs	r3, #32
 8011e2c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8011e2e:	f3bf 8f4f 	dsb	sy
}
 8011e32:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8011e34:	e00b      	b.n	8011e4e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8011e36:	4a0d      	ldr	r2, [pc, #52]	@ (8011e6c <SCB_InvalidateDCache_by_Addr+0x54>)
 8011e38:	693b      	ldr	r3, [r7, #16]
 8011e3a:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	693a      	ldr	r2, [r7, #16]
 8011e42:	4413      	add	r3, r2
 8011e44:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8011e46:	697a      	ldr	r2, [r7, #20]
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	1ad3      	subs	r3, r2, r3
 8011e4c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8011e4e:	697b      	ldr	r3, [r7, #20]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	dcf0      	bgt.n	8011e36 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8011e54:	f3bf 8f4f 	dsb	sy
}
 8011e58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011e5a:	f3bf 8f6f 	isb	sy
}
 8011e5e:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8011e60:	bf00      	nop
 8011e62:	371c      	adds	r7, #28
 8011e64:	46bd      	mov	sp, r7
 8011e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e6a:	4770      	bx	lr
 8011e6c:	e000ed00 	.word	0xe000ed00

08011e70 <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8011e70:	b480      	push	{r7}
 8011e72:	b087      	sub	sp, #28
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	6078      	str	r0, [r7, #4]
 8011e78:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8011e7a:	683b      	ldr	r3, [r7, #0]
 8011e7c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8011e82:	2320      	movs	r3, #32
 8011e84:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8011e86:	f3bf 8f4f 	dsb	sy
}
 8011e8a:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8011e8c:	e00b      	b.n	8011ea6 <SCB_CleanDCache_by_Addr+0x36>
      SCB->DCCMVAC = op_addr;
 8011e8e:	4a0d      	ldr	r2, [pc, #52]	@ (8011ec4 <SCB_CleanDCache_by_Addr+0x54>)
 8011e90:	693b      	ldr	r3, [r7, #16]
 8011e92:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
      op_addr += (uint32_t)linesize;
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	693a      	ldr	r2, [r7, #16]
 8011e9a:	4413      	add	r3, r2
 8011e9c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8011e9e:	697a      	ldr	r2, [r7, #20]
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	1ad3      	subs	r3, r2, r3
 8011ea4:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8011ea6:	697b      	ldr	r3, [r7, #20]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	dcf0      	bgt.n	8011e8e <SCB_CleanDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8011eac:	f3bf 8f4f 	dsb	sy
}
 8011eb0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011eb2:	f3bf 8f6f 	isb	sy
}
 8011eb6:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8011eb8:	bf00      	nop
 8011eba:	371c      	adds	r7, #28
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec2:	4770      	bx	lr
 8011ec4:	e000ed00 	.word	0xe000ed00

08011ec8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011ec8:	b580      	push	{r7, lr}
 8011eca:	b084      	sub	sp, #16
 8011ecc:	af00      	add	r7, sp, #0
 8011ece:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8011ed0:	f003 f850 	bl	8014f74 <osKernelSysTick>
 8011ed4:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8011ed6:	e006      	b.n	8011ee6 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011ed8:	f7ff ff58 	bl	8011d8c <BSP_SD_GetCardState>
 8011edc:	4603      	mov	r3, r0
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d101      	bne.n	8011ee6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	e009      	b.n	8011efa <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8011ee6:	f003 f845 	bl	8014f74 <osKernelSysTick>
 8011eea:	4602      	mov	r2, r0
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	1ad3      	subs	r3, r2, r3
 8011ef0:	687a      	ldr	r2, [r7, #4]
 8011ef2:	429a      	cmp	r2, r3
 8011ef4:	d8f0      	bhi.n	8011ed8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011ef6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011efa:	4618      	mov	r0, r3
 8011efc:	3710      	adds	r7, #16
 8011efe:	46bd      	mov	sp, r7
 8011f00:	bd80      	pop	{r7, pc}
	...

08011f04 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011f04:	b580      	push	{r7, lr}
 8011f06:	b082      	sub	sp, #8
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8011f3c <SD_CheckStatus+0x38>)
 8011f10:	2201      	movs	r2, #1
 8011f12:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011f14:	f7ff ff3a 	bl	8011d8c <BSP_SD_GetCardState>
 8011f18:	4603      	mov	r3, r0
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d107      	bne.n	8011f2e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8011f1e:	4b07      	ldr	r3, [pc, #28]	@ (8011f3c <SD_CheckStatus+0x38>)
 8011f20:	781b      	ldrb	r3, [r3, #0]
 8011f22:	b2db      	uxtb	r3, r3
 8011f24:	f023 0301 	bic.w	r3, r3, #1
 8011f28:	b2da      	uxtb	r2, r3
 8011f2a:	4b04      	ldr	r3, [pc, #16]	@ (8011f3c <SD_CheckStatus+0x38>)
 8011f2c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8011f2e:	4b03      	ldr	r3, [pc, #12]	@ (8011f3c <SD_CheckStatus+0x38>)
 8011f30:	781b      	ldrb	r3, [r3, #0]
 8011f32:	b2db      	uxtb	r3, r3
}
 8011f34:	4618      	mov	r0, r3
 8011f36:	3708      	adds	r7, #8
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	bd80      	pop	{r7, pc}
 8011f3c:	20000071 	.word	0x20000071

08011f40 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011f40:	b590      	push	{r4, r7, lr}
 8011f42:	b087      	sub	sp, #28
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	4603      	mov	r3, r0
 8011f48:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8011f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8011fc0 <SD_initialize+0x80>)
 8011f4c:	2201      	movs	r2, #1
 8011f4e:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8011f50:	f003 f804 	bl	8014f5c <osKernelRunning>
 8011f54:	4603      	mov	r3, r0
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d02b      	beq.n	8011fb2 <SD_initialize+0x72>
    {
      Stat = SD_CheckStatus(lun);
    }

#else
    Stat = SD_CheckStatus(lun);
 8011f5a:	79fb      	ldrb	r3, [r7, #7]
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	f7ff ffd1 	bl	8011f04 <SD_CheckStatus>
 8011f62:	4603      	mov	r3, r0
 8011f64:	461a      	mov	r2, r3
 8011f66:	4b16      	ldr	r3, [pc, #88]	@ (8011fc0 <SD_initialize+0x80>)
 8011f68:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8011f6a:	4b15      	ldr	r3, [pc, #84]	@ (8011fc0 <SD_initialize+0x80>)
 8011f6c:	781b      	ldrb	r3, [r3, #0]
 8011f6e:	b2db      	uxtb	r3, r3
 8011f70:	2b01      	cmp	r3, #1
 8011f72:	d01e      	beq.n	8011fb2 <SD_initialize+0x72>
    {
      if (SDQueueID == NULL)
 8011f74:	4b13      	ldr	r3, [pc, #76]	@ (8011fc4 <SD_initialize+0x84>)
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d10e      	bne.n	8011f9a <SD_initialize+0x5a>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8011f7c:	4b12      	ldr	r3, [pc, #72]	@ (8011fc8 <SD_initialize+0x88>)
 8011f7e:	f107 0408 	add.w	r4, r7, #8
 8011f82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011f84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8011f88:	f107 0308 	add.w	r3, r7, #8
 8011f8c:	2100      	movs	r1, #0
 8011f8e:	4618      	mov	r0, r3
 8011f90:	f003 f860 	bl	8015054 <osMessageCreate>
 8011f94:	4603      	mov	r3, r0
 8011f96:	4a0b      	ldr	r2, [pc, #44]	@ (8011fc4 <SD_initialize+0x84>)
 8011f98:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8011f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8011fc4 <SD_initialize+0x84>)
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d107      	bne.n	8011fb2 <SD_initialize+0x72>
      {
        Stat |= STA_NOINIT;
 8011fa2:	4b07      	ldr	r3, [pc, #28]	@ (8011fc0 <SD_initialize+0x80>)
 8011fa4:	781b      	ldrb	r3, [r3, #0]
 8011fa6:	b2db      	uxtb	r3, r3
 8011fa8:	f043 0301 	orr.w	r3, r3, #1
 8011fac:	b2da      	uxtb	r2, r3
 8011fae:	4b04      	ldr	r3, [pc, #16]	@ (8011fc0 <SD_initialize+0x80>)
 8011fb0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8011fb2:	4b03      	ldr	r3, [pc, #12]	@ (8011fc0 <SD_initialize+0x80>)
 8011fb4:	781b      	ldrb	r3, [r3, #0]
 8011fb6:	b2db      	uxtb	r3, r3
}
 8011fb8:	4618      	mov	r0, r3
 8011fba:	371c      	adds	r7, #28
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	bd90      	pop	{r4, r7, pc}
 8011fc0:	20000071 	.word	0x20000071
 8011fc4:	20002b20 	.word	0x20002b20
 8011fc8:	0801cc7c 	.word	0x0801cc7c

08011fcc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	b082      	sub	sp, #8
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8011fd6:	79fb      	ldrb	r3, [r7, #7]
 8011fd8:	4618      	mov	r0, r3
 8011fda:	f7ff ff93 	bl	8011f04 <SD_CheckStatus>
 8011fde:	4603      	mov	r3, r0
}
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	3708      	adds	r7, #8
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	bd80      	pop	{r7, pc}

08011fe8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b08a      	sub	sp, #40	@ 0x28
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	60b9      	str	r1, [r7, #8]
 8011ff0:	607a      	str	r2, [r7, #4]
 8011ff2:	603b      	str	r3, [r7, #0]
 8011ff4:	4603      	mov	r3, r0
 8011ff6:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8011ff8:	2301      	movs	r3, #1
 8011ffa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011ffe:	f247 5030 	movw	r0, #30000	@ 0x7530
 8012002:	f7ff ff61 	bl	8011ec8 <SD_CheckStatusWithTimeout>
 8012006:	4603      	mov	r3, r0
 8012008:	2b00      	cmp	r3, #0
 801200a:	da02      	bge.n	8012012 <SD_read+0x2a>
  {
    return res;
 801200c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012010:	e051      	b.n	80120b6 <SD_read+0xce>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8012012:	68bb      	ldr	r3, [r7, #8]
 8012014:	f003 0303 	and.w	r3, r3, #3
 8012018:	2b00      	cmp	r3, #0
 801201a:	d111      	bne.n	8012040 <SD_read+0x58>
  {
#endif
    /* Use polling mode instead of DMA to avoid callback issues */
    ret = BSP_SD_ReadBlocks((uint32_t*)buff, (uint32_t)(sector), count, SD_TIMEOUT);
 801201c:	f247 5330 	movw	r3, #30000	@ 0x7530
 8012020:	683a      	ldr	r2, [r7, #0]
 8012022:	6879      	ldr	r1, [r7, #4]
 8012024:	68b8      	ldr	r0, [r7, #8]
 8012026:	f7ff fe75 	bl	8011d14 <BSP_SD_ReadBlocks>
 801202a:	4603      	mov	r3, r0
 801202c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (ret == MSD_OK) {
 8012030:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012034:	2b00      	cmp	r3, #0
 8012036:	d13c      	bne.n	80120b2 <SD_read+0xca>
      /* Polling mode - no need for message queue */
      res = RES_OK;
 8012038:	2300      	movs	r3, #0
 801203a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801203e:	e038      	b.n	80120b2 <SD_read+0xca>
    else
    {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++)
 8012040:	2300      	movs	r3, #0
 8012042:	623b      	str	r3, [r7, #32]
 8012044:	e024      	b.n	8012090 <SD_read+0xa8>
      {
        ret = BSP_SD_ReadBlocks((uint32_t*)scratch, (uint32_t)sector++, 1, SD_TIMEOUT);
 8012046:	6879      	ldr	r1, [r7, #4]
 8012048:	1c4b      	adds	r3, r1, #1
 801204a:	607b      	str	r3, [r7, #4]
 801204c:	f247 5330 	movw	r3, #30000	@ 0x7530
 8012050:	2201      	movs	r2, #1
 8012052:	481b      	ldr	r0, [pc, #108]	@ (80120c0 <SD_read+0xd8>)
 8012054:	f7ff fe5e 	bl	8011d14 <BSP_SD_ReadBlocks>
 8012058:	4603      	mov	r3, r0
 801205a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (ret == MSD_OK )
 801205e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012062:	2b00      	cmp	r3, #0
 8012064:	d119      	bne.n	801209a <SD_read+0xb2>
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
          /*
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
 8012066:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801206a:	4815      	ldr	r0, [pc, #84]	@ (80120c0 <SD_read+0xd8>)
 801206c:	f7ff fed4 	bl	8011e18 <SCB_InvalidateDCache_by_Addr>
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 8012070:	68bb      	ldr	r3, [r7, #8]
 8012072:	4a13      	ldr	r2, [pc, #76]	@ (80120c0 <SD_read+0xd8>)
 8012074:	4618      	mov	r0, r3
 8012076:	4611      	mov	r1, r2
 8012078:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801207c:	461a      	mov	r2, r3
 801207e:	f005 fec2 	bl	8017e06 <memcpy>
          buff += BLOCKSIZE;
 8012082:	68bb      	ldr	r3, [r7, #8]
 8012084:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8012088:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 801208a:	6a3b      	ldr	r3, [r7, #32]
 801208c:	3301      	adds	r3, #1
 801208e:	623b      	str	r3, [r7, #32]
 8012090:	6a3b      	ldr	r3, [r7, #32]
 8012092:	683a      	ldr	r2, [r7, #0]
 8012094:	429a      	cmp	r2, r3
 8012096:	d8d6      	bhi.n	8012046 <SD_read+0x5e>
 8012098:	e000      	b.n	801209c <SD_read+0xb4>
        }
        else
        {
          break;
 801209a:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK ))
 801209c:	6a3b      	ldr	r3, [r7, #32]
 801209e:	683a      	ldr	r2, [r7, #0]
 80120a0:	429a      	cmp	r2, r3
 80120a2:	d106      	bne.n	80120b2 <SD_read+0xca>
 80120a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d102      	bne.n	80120b2 <SD_read+0xca>
        res = RES_OK;
 80120ac:	2300      	movs	r3, #0
 80120ae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    }
#endif
  return res;
 80120b2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
}
 80120b6:	4618      	mov	r0, r3
 80120b8:	3728      	adds	r7, #40	@ 0x28
 80120ba:	46bd      	mov	sp, r7
 80120bc:	bd80      	pop	{r7, pc}
 80120be:	bf00      	nop
 80120c0:	20002920 	.word	0x20002920

080120c4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b08c      	sub	sp, #48	@ 0x30
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	60b9      	str	r1, [r7, #8]
 80120cc:	607a      	str	r2, [r7, #4]
 80120ce:	603b      	str	r3, [r7, #0]
 80120d0:	4603      	mov	r3, r0
 80120d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80120d4:	2301      	movs	r3, #1
 80120d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80120da:	f247 5030 	movw	r0, #30000	@ 0x7530
 80120de:	f7ff fef3 	bl	8011ec8 <SD_CheckStatusWithTimeout>
 80120e2:	4603      	mov	r3, r0
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	da02      	bge.n	80120ee <SD_write+0x2a>
  {
    return res;
 80120e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80120ec:	e082      	b.n	80121f4 <SD_write+0x130>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 80120ee:	68bb      	ldr	r3, [r7, #8]
 80120f0:	f003 0303 	and.w	r3, r3, #3
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d17b      	bne.n	80121f0 <SD_write+0x12c>
  uint32_t alignedAddr;
  /*
    the SCB_CleanDCache_by_Addr() requires a 32-Byte aligned address
    adjust the address and the D-Cache size to clean accordingly.
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
 80120f8:	68bb      	ldr	r3, [r7, #8]
 80120fa:	f023 031f 	bic.w	r3, r3, #31
 80120fe:	623b      	str	r3, [r7, #32]
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
 8012100:	6a38      	ldr	r0, [r7, #32]
 8012102:	683b      	ldr	r3, [r7, #0]
 8012104:	025a      	lsls	r2, r3, #9
 8012106:	68b9      	ldr	r1, [r7, #8]
 8012108:	6a3b      	ldr	r3, [r7, #32]
 801210a:	1acb      	subs	r3, r1, r3
 801210c:	4413      	add	r3, r2
 801210e:	4619      	mov	r1, r3
 8012110:	f7ff feae 	bl	8011e70 <SCB_CleanDCache_by_Addr>
#endif

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8012114:	f247 5330 	movw	r3, #30000	@ 0x7530
 8012118:	683a      	ldr	r2, [r7, #0]
 801211a:	6879      	ldr	r1, [r7, #4]
 801211c:	68b8      	ldr	r0, [r7, #8]
 801211e:	f7ff fe17 	bl	8011d50 <BSP_SD_WriteBlocks>
 8012122:	4603      	mov	r3, r0
 8012124:	2b00      	cmp	r3, #0
 8012126:	d103      	bne.n	8012130 <SD_write+0x6c>
                        (uint32_t) (sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
    /* Polling mode - no need for message queue */
    res = RES_OK;
 8012128:	2300      	movs	r3, #0
 801212a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801212e:	e05f      	b.n	80121f0 <SD_write+0x12c>

#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
    /*
     * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
     */
     SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
 8012130:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8012134:	4831      	ldr	r0, [pc, #196]	@ (80121fc <SD_write+0x138>)
 8012136:	f7ff fe6f 	bl	8011e18 <SCB_InvalidateDCache_by_Addr>
#endif
      for (i = 0; i < count; i++)
 801213a:	2300      	movs	r3, #0
 801213c:	627b      	str	r3, [r7, #36]	@ 0x24
 801213e:	e045      	b.n	80121cc <SD_write+0x108>
      {
        memcpy((void *)scratch, buff, BLOCKSIZE);
 8012140:	4a2e      	ldr	r2, [pc, #184]	@ (80121fc <SD_write+0x138>)
 8012142:	68bb      	ldr	r3, [r7, #8]
 8012144:	4610      	mov	r0, r2
 8012146:	4619      	mov	r1, r3
 8012148:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801214c:	461a      	mov	r2, r3
 801214e:	f005 fe5a 	bl	8017e06 <memcpy>
        buff += BLOCKSIZE;
 8012152:	68bb      	ldr	r3, [r7, #8]
 8012154:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8012158:	60bb      	str	r3, [r7, #8]

        ret = BSP_SD_WriteBlocks((uint32_t*)scratch, (uint32_t)sector++, 1, SD_TIMEOUT);
 801215a:	6879      	ldr	r1, [r7, #4]
 801215c:	1c4b      	adds	r3, r1, #1
 801215e:	607b      	str	r3, [r7, #4]
 8012160:	f247 5330 	movw	r3, #30000	@ 0x7530
 8012164:	2201      	movs	r2, #1
 8012166:	4825      	ldr	r0, [pc, #148]	@ (80121fc <SD_write+0x138>)
 8012168:	f7ff fdf2 	bl	8011d50 <BSP_SD_WriteBlocks>
 801216c:	4603      	mov	r3, r0
 801216e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (ret == MSD_OK )
 8012170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012172:	2b00      	cmp	r3, #0
 8012174:	d12f      	bne.n	80121d6 <SD_write+0x112>
        {
          /* Polling mode - operation already completed */
#if (osCMSIS < 0x20000U)
          /* wait for a message from the queue or a timeout */
          event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8012176:	4b22      	ldr	r3, [pc, #136]	@ (8012200 <SD_write+0x13c>)
 8012178:	6819      	ldr	r1, [r3, #0]
 801217a:	f107 0310 	add.w	r3, r7, #16
 801217e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8012182:	4618      	mov	r0, r3
 8012184:	f002 ffce 	bl	8015124 <osMessageGet>

          if (event.status == osEventMessage)
 8012188:	693b      	ldr	r3, [r7, #16]
 801218a:	2b10      	cmp	r3, #16
 801218c:	d11b      	bne.n	80121c6 <SD_write+0x102>
          {
            if (event.value.v == READ_CPLT_MSG)
 801218e:	697b      	ldr	r3, [r7, #20]
 8012190:	2b01      	cmp	r3, #1
 8012192:	d118      	bne.n	80121c6 <SD_write+0x102>
            {
              timer = osKernelSysTick();
 8012194:	f002 feee 	bl	8014f74 <osKernelSysTick>
 8012198:	61f8      	str	r0, [r7, #28]
              /* block until SDIO IP is ready or a timeout occur */
              while(osKernelSysTick() - timer <SD_TIMEOUT)
 801219a:	e006      	b.n	80121aa <SD_write+0xe6>
                /* block until SDIO IP is ready or a timeout occur */
                ret = MSD_ERROR;
                while(osKernelGetTickCount() - timer < SD_TIMEOUT)
#endif
                {
                  ret = BSP_SD_GetCardState();
 801219c:	f7ff fdf6 	bl	8011d8c <BSP_SD_GetCardState>
 80121a0:	4603      	mov	r3, r0
 80121a2:	62bb      	str	r3, [r7, #40]	@ 0x28

                  if (ret == MSD_OK)
 80121a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d009      	beq.n	80121be <SD_write+0xfa>
              while(osKernelSysTick() - timer <SD_TIMEOUT)
 80121aa:	f002 fee3 	bl	8014f74 <osKernelSysTick>
 80121ae:	4602      	mov	r2, r0
 80121b0:	69fb      	ldr	r3, [r7, #28]
 80121b2:	1ad3      	subs	r3, r2, r3
 80121b4:	f247 522f 	movw	r2, #29999	@ 0x752f
 80121b8:	4293      	cmp	r3, r2
 80121ba:	d9ef      	bls.n	801219c <SD_write+0xd8>
 80121bc:	e000      	b.n	80121c0 <SD_write+0xfc>
                  {
                    break;
 80121be:	bf00      	nop
                  }
                }

                if (ret != MSD_OK)
 80121c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d109      	bne.n	80121da <SD_write+0x116>
      for (i = 0; i < count; i++)
 80121c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121c8:	3301      	adds	r3, #1
 80121ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80121cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121ce:	683a      	ldr	r2, [r7, #0]
 80121d0:	429a      	cmp	r2, r3
 80121d2:	d8b5      	bhi.n	8012140 <SD_write+0x7c>
 80121d4:	e002      	b.n	80121dc <SD_write+0x118>
          }
#endif
        }
        else
        {
          break;
 80121d6:	bf00      	nop
 80121d8:	e000      	b.n	80121dc <SD_write+0x118>
                  break;
 80121da:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK ))
 80121dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121de:	683a      	ldr	r2, [r7, #0]
 80121e0:	429a      	cmp	r2, r3
 80121e2:	d105      	bne.n	80121f0 <SD_write+0x12c>
 80121e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d102      	bne.n	80121f0 <SD_write+0x12c>
        res = RES_OK;
 80121ea:	2300      	movs	r3, #0
 80121ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

  }
#endif

  return res;
 80121f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80121f4:	4618      	mov	r0, r3
 80121f6:	3730      	adds	r7, #48	@ 0x30
 80121f8:	46bd      	mov	sp, r7
 80121fa:	bd80      	pop	{r7, pc}
 80121fc:	20002920 	.word	0x20002920
 8012200:	20002b20 	.word	0x20002b20

08012204 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8012204:	b580      	push	{r7, lr}
 8012206:	b08c      	sub	sp, #48	@ 0x30
 8012208:	af00      	add	r7, sp, #0
 801220a:	4603      	mov	r3, r0
 801220c:	603a      	str	r2, [r7, #0]
 801220e:	71fb      	strb	r3, [r7, #7]
 8012210:	460b      	mov	r3, r1
 8012212:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8012214:	2301      	movs	r3, #1
 8012216:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801221a:	4b25      	ldr	r3, [pc, #148]	@ (80122b0 <SD_ioctl+0xac>)
 801221c:	781b      	ldrb	r3, [r3, #0]
 801221e:	b2db      	uxtb	r3, r3
 8012220:	f003 0301 	and.w	r3, r3, #1
 8012224:	2b00      	cmp	r3, #0
 8012226:	d001      	beq.n	801222c <SD_ioctl+0x28>
 8012228:	2303      	movs	r3, #3
 801222a:	e03c      	b.n	80122a6 <SD_ioctl+0xa2>

  switch (cmd)
 801222c:	79bb      	ldrb	r3, [r7, #6]
 801222e:	2b03      	cmp	r3, #3
 8012230:	d834      	bhi.n	801229c <SD_ioctl+0x98>
 8012232:	a201      	add	r2, pc, #4	@ (adr r2, 8012238 <SD_ioctl+0x34>)
 8012234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012238:	08012249 	.word	0x08012249
 801223c:	08012251 	.word	0x08012251
 8012240:	08012269 	.word	0x08012269
 8012244:	08012283 	.word	0x08012283
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8012248:	2300      	movs	r3, #0
 801224a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801224e:	e028      	b.n	80122a2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8012250:	f107 030c 	add.w	r3, r7, #12
 8012254:	4618      	mov	r0, r3
 8012256:	f7ff fda9 	bl	8011dac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801225a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801225c:	683b      	ldr	r3, [r7, #0]
 801225e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012260:	2300      	movs	r3, #0
 8012262:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8012266:	e01c      	b.n	80122a2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012268:	f107 030c 	add.w	r3, r7, #12
 801226c:	4618      	mov	r0, r3
 801226e:	f7ff fd9d 	bl	8011dac <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8012272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012274:	b29a      	uxth	r2, r3
 8012276:	683b      	ldr	r3, [r7, #0]
 8012278:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801227a:	2300      	movs	r3, #0
 801227c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8012280:	e00f      	b.n	80122a2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012282:	f107 030c 	add.w	r3, r7, #12
 8012286:	4618      	mov	r0, r3
 8012288:	f7ff fd90 	bl	8011dac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801228c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801228e:	0a5a      	lsrs	r2, r3, #9
 8012290:	683b      	ldr	r3, [r7, #0]
 8012292:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012294:	2300      	movs	r3, #0
 8012296:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801229a:	e002      	b.n	80122a2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801229c:	2304      	movs	r3, #4
 801229e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80122a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80122a6:	4618      	mov	r0, r3
 80122a8:	3730      	adds	r7, #48	@ 0x30
 80122aa:	46bd      	mov	sp, r7
 80122ac:	bd80      	pop	{r7, pc}
 80122ae:	bf00      	nop
 80122b0:	20000071 	.word	0x20000071

080122b4 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b082      	sub	sp, #8
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80122c2:	1c5a      	adds	r2, r3, #1
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80122ca:	6878      	ldr	r0, [r7, #4]
 80122cc:	f000 f804 	bl	80122d8 <USBH_HandleSof>
}
 80122d0:	bf00      	nop
 80122d2:	3708      	adds	r7, #8
 80122d4:	46bd      	mov	sp, r7
 80122d6:	bd80      	pop	{r7, pc}

080122d8 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80122d8:	b580      	push	{r7, lr}
 80122da:	b082      	sub	sp, #8
 80122dc:	af00      	add	r7, sp, #0
 80122de:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	781b      	ldrb	r3, [r3, #0]
 80122e4:	b2db      	uxtb	r3, r3
 80122e6:	2b0b      	cmp	r3, #11
 80122e8:	d10a      	bne.n	8012300 <USBH_HandleSof+0x28>
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d005      	beq.n	8012300 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80122fa:	699b      	ldr	r3, [r3, #24]
 80122fc:	6878      	ldr	r0, [r7, #4]
 80122fe:	4798      	blx	r3
  }
}
 8012300:	bf00      	nop
 8012302:	3708      	adds	r7, #8
 8012304:	46bd      	mov	sp, r7
 8012306:	bd80      	pop	{r7, pc}

08012308 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8012308:	b580      	push	{r7, lr}
 801230a:	b082      	sub	sp, #8
 801230c:	af00      	add	r7, sp, #0
 801230e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	2201      	movs	r2, #1
 8012314:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012318:	2300      	movs	r3, #0
 801231a:	2200      	movs	r2, #0
 801231c:	2101      	movs	r1, #1
 801231e:	6878      	ldr	r0, [r7, #4]
 8012320:	f000 f85b 	bl	80123da <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 8012324:	bf00      	nop
}
 8012326:	3708      	adds	r7, #8
 8012328:	46bd      	mov	sp, r7
 801232a:	bd80      	pop	{r7, pc}

0801232c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 801232c:	b480      	push	{r7}
 801232e:	b083      	sub	sp, #12
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	2200      	movs	r2, #0
 8012338:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	2201      	movs	r2, #1
 8012340:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8012344:	bf00      	nop
}
 8012346:	370c      	adds	r7, #12
 8012348:	46bd      	mov	sp, r7
 801234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801234e:	4770      	bx	lr

08012350 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8012350:	b580      	push	{r7, lr}
 8012352:	b082      	sub	sp, #8
 8012354:	af00      	add	r7, sp, #0
 8012356:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	2201      	movs	r2, #1
 801235c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	2200      	movs	r2, #0
 8012364:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	2200      	movs	r2, #0
 801236c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012370:	2300      	movs	r3, #0
 8012372:	2200      	movs	r2, #0
 8012374:	2101      	movs	r1, #1
 8012376:	6878      	ldr	r0, [r7, #4]
 8012378:	f000 f82f 	bl	80123da <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 801237c:	2300      	movs	r3, #0
}
 801237e:	4618      	mov	r0, r3
 8012380:	3708      	adds	r7, #8
 8012382:	46bd      	mov	sp, r7
 8012384:	bd80      	pop	{r7, pc}

08012386 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8012386:	b580      	push	{r7, lr}
 8012388:	b082      	sub	sp, #8
 801238a:	af00      	add	r7, sp, #0
 801238c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	2201      	movs	r2, #1
 8012392:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	2200      	movs	r2, #0
 801239a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	2200      	movs	r2, #0
 80123a2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80123a6:	6878      	ldr	r0, [r7, #4]
 80123a8:	f005 f99c 	bl	80176e4 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	791b      	ldrb	r3, [r3, #4]
 80123b0:	4619      	mov	r1, r3
 80123b2:	6878      	ldr	r0, [r7, #4]
 80123b4:	f000 f847 	bl	8012446 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	795b      	ldrb	r3, [r3, #5]
 80123bc:	4619      	mov	r1, r3
 80123be:	6878      	ldr	r0, [r7, #4]
 80123c0:	f000 f841 	bl	8012446 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80123c4:	2300      	movs	r3, #0
 80123c6:	2200      	movs	r2, #0
 80123c8:	2101      	movs	r1, #1
 80123ca:	6878      	ldr	r0, [r7, #4]
 80123cc:	f000 f805 	bl	80123da <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 80123d0:	2300      	movs	r3, #0
}
 80123d2:	4618      	mov	r0, r3
 80123d4:	3708      	adds	r7, #8
 80123d6:	46bd      	mov	sp, r7
 80123d8:	bd80      	pop	{r7, pc}

080123da <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 80123da:	b580      	push	{r7, lr}
 80123dc:	b086      	sub	sp, #24
 80123de:	af00      	add	r7, sp, #0
 80123e0:	60f8      	str	r0, [r7, #12]
 80123e2:	607a      	str	r2, [r7, #4]
 80123e4:	603b      	str	r3, [r7, #0]
 80123e6:	460b      	mov	r3, r1
 80123e8:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 80123ea:	7afa      	ldrb	r2, [r7, #11]
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  UNUSED(priority);

  /* Calculate the number of available spaces */
  uint32_t available_spaces = MSGQUEUE_OBJECTS - osMessageWaiting(phost->os_event);
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 80123f8:	4618      	mov	r0, r3
 80123fa:	f002 ff07 	bl	801520c <osMessageWaiting>
 80123fe:	4603      	mov	r3, r0
 8012400:	f1c3 0310 	rsb	r3, r3, #16
 8012404:	617b      	str	r3, [r7, #20]

  if (available_spaces != 0U)
 8012406:	697b      	ldr	r3, [r7, #20]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d009      	beq.n	8012420 <USBH_OS_PutMessage+0x46>
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8012418:	687a      	ldr	r2, [r7, #4]
 801241a:	4619      	mov	r1, r3
 801241c:	f002 fe42 	bl	80150a4 <osMessagePut>
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
  }
#endif /* (osCMSIS < 0x20000U) */
}
 8012420:	bf00      	nop
 8012422:	3718      	adds	r7, #24
 8012424:	46bd      	mov	sp, r7
 8012426:	bd80      	pop	{r7, pc}

08012428 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b082      	sub	sp, #8
 801242c:	af00      	add	r7, sp, #0
 801242e:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012430:	2300      	movs	r3, #0
 8012432:	2200      	movs	r2, #0
 8012434:	2101      	movs	r1, #1
 8012436:	6878      	ldr	r0, [r7, #4]
 8012438:	f7ff ffcf 	bl	80123da <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 801243c:	2300      	movs	r3, #0
}
 801243e:	4618      	mov	r0, r3
 8012440:	3708      	adds	r7, #8
 8012442:	46bd      	mov	sp, r7
 8012444:	bd80      	pop	{r7, pc}

08012446 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8012446:	b480      	push	{r7}
 8012448:	b083      	sub	sp, #12
 801244a:	af00      	add	r7, sp, #0
 801244c:	6078      	str	r0, [r7, #4]
 801244e:	460b      	mov	r3, r1
 8012450:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8012452:	78fb      	ldrb	r3, [r7, #3]
 8012454:	2b0f      	cmp	r3, #15
 8012456:	d80d      	bhi.n	8012474 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8012458:	78fb      	ldrb	r3, [r7, #3]
 801245a:	687a      	ldr	r2, [r7, #4]
 801245c:	33e0      	adds	r3, #224	@ 0xe0
 801245e:	009b      	lsls	r3, r3, #2
 8012460:	4413      	add	r3, r2
 8012462:	685a      	ldr	r2, [r3, #4]
 8012464:	78fb      	ldrb	r3, [r7, #3]
 8012466:	f3c2 020e 	ubfx	r2, r2, #0, #15
 801246a:	6879      	ldr	r1, [r7, #4]
 801246c:	33e0      	adds	r3, #224	@ 0xe0
 801246e:	009b      	lsls	r3, r3, #2
 8012470:	440b      	add	r3, r1
 8012472:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8012474:	2300      	movs	r3, #0
}
 8012476:	4618      	mov	r0, r3
 8012478:	370c      	adds	r7, #12
 801247a:	46bd      	mov	sp, r7
 801247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012480:	4770      	bx	lr
	...

08012484 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b084      	sub	sp, #16
 8012488:	af00      	add	r7, sp, #0
 801248a:	4603      	mov	r3, r0
 801248c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801248e:	79fb      	ldrb	r3, [r7, #7]
 8012490:	4a08      	ldr	r2, [pc, #32]	@ (80124b4 <disk_status+0x30>)
 8012492:	009b      	lsls	r3, r3, #2
 8012494:	4413      	add	r3, r2
 8012496:	685b      	ldr	r3, [r3, #4]
 8012498:	685b      	ldr	r3, [r3, #4]
 801249a:	79fa      	ldrb	r2, [r7, #7]
 801249c:	4905      	ldr	r1, [pc, #20]	@ (80124b4 <disk_status+0x30>)
 801249e:	440a      	add	r2, r1
 80124a0:	7a12      	ldrb	r2, [r2, #8]
 80124a2:	4610      	mov	r0, r2
 80124a4:	4798      	blx	r3
 80124a6:	4603      	mov	r3, r0
 80124a8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80124aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80124ac:	4618      	mov	r0, r3
 80124ae:	3710      	adds	r7, #16
 80124b0:	46bd      	mov	sp, r7
 80124b2:	bd80      	pop	{r7, pc}
 80124b4:	20002b2c 	.word	0x20002b2c

080124b8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b084      	sub	sp, #16
 80124bc:	af00      	add	r7, sp, #0
 80124be:	4603      	mov	r3, r0
 80124c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80124c2:	2300      	movs	r3, #0
 80124c4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80124c6:	79fb      	ldrb	r3, [r7, #7]
 80124c8:	4a0d      	ldr	r2, [pc, #52]	@ (8012500 <disk_initialize+0x48>)
 80124ca:	5cd3      	ldrb	r3, [r2, r3]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d111      	bne.n	80124f4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80124d0:	79fb      	ldrb	r3, [r7, #7]
 80124d2:	4a0b      	ldr	r2, [pc, #44]	@ (8012500 <disk_initialize+0x48>)
 80124d4:	2101      	movs	r1, #1
 80124d6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80124d8:	79fb      	ldrb	r3, [r7, #7]
 80124da:	4a09      	ldr	r2, [pc, #36]	@ (8012500 <disk_initialize+0x48>)
 80124dc:	009b      	lsls	r3, r3, #2
 80124de:	4413      	add	r3, r2
 80124e0:	685b      	ldr	r3, [r3, #4]
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	79fa      	ldrb	r2, [r7, #7]
 80124e6:	4906      	ldr	r1, [pc, #24]	@ (8012500 <disk_initialize+0x48>)
 80124e8:	440a      	add	r2, r1
 80124ea:	7a12      	ldrb	r2, [r2, #8]
 80124ec:	4610      	mov	r0, r2
 80124ee:	4798      	blx	r3
 80124f0:	4603      	mov	r3, r0
 80124f2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80124f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80124f6:	4618      	mov	r0, r3
 80124f8:	3710      	adds	r7, #16
 80124fa:	46bd      	mov	sp, r7
 80124fc:	bd80      	pop	{r7, pc}
 80124fe:	bf00      	nop
 8012500:	20002b2c 	.word	0x20002b2c

08012504 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012504:	b590      	push	{r4, r7, lr}
 8012506:	b087      	sub	sp, #28
 8012508:	af00      	add	r7, sp, #0
 801250a:	60b9      	str	r1, [r7, #8]
 801250c:	607a      	str	r2, [r7, #4]
 801250e:	603b      	str	r3, [r7, #0]
 8012510:	4603      	mov	r3, r0
 8012512:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012514:	7bfb      	ldrb	r3, [r7, #15]
 8012516:	4a0a      	ldr	r2, [pc, #40]	@ (8012540 <disk_read+0x3c>)
 8012518:	009b      	lsls	r3, r3, #2
 801251a:	4413      	add	r3, r2
 801251c:	685b      	ldr	r3, [r3, #4]
 801251e:	689c      	ldr	r4, [r3, #8]
 8012520:	7bfb      	ldrb	r3, [r7, #15]
 8012522:	4a07      	ldr	r2, [pc, #28]	@ (8012540 <disk_read+0x3c>)
 8012524:	4413      	add	r3, r2
 8012526:	7a18      	ldrb	r0, [r3, #8]
 8012528:	683b      	ldr	r3, [r7, #0]
 801252a:	687a      	ldr	r2, [r7, #4]
 801252c:	68b9      	ldr	r1, [r7, #8]
 801252e:	47a0      	blx	r4
 8012530:	4603      	mov	r3, r0
 8012532:	75fb      	strb	r3, [r7, #23]
  return res;
 8012534:	7dfb      	ldrb	r3, [r7, #23]
}
 8012536:	4618      	mov	r0, r3
 8012538:	371c      	adds	r7, #28
 801253a:	46bd      	mov	sp, r7
 801253c:	bd90      	pop	{r4, r7, pc}
 801253e:	bf00      	nop
 8012540:	20002b2c 	.word	0x20002b2c

08012544 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012544:	b590      	push	{r4, r7, lr}
 8012546:	b087      	sub	sp, #28
 8012548:	af00      	add	r7, sp, #0
 801254a:	60b9      	str	r1, [r7, #8]
 801254c:	607a      	str	r2, [r7, #4]
 801254e:	603b      	str	r3, [r7, #0]
 8012550:	4603      	mov	r3, r0
 8012552:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012554:	7bfb      	ldrb	r3, [r7, #15]
 8012556:	4a0a      	ldr	r2, [pc, #40]	@ (8012580 <disk_write+0x3c>)
 8012558:	009b      	lsls	r3, r3, #2
 801255a:	4413      	add	r3, r2
 801255c:	685b      	ldr	r3, [r3, #4]
 801255e:	68dc      	ldr	r4, [r3, #12]
 8012560:	7bfb      	ldrb	r3, [r7, #15]
 8012562:	4a07      	ldr	r2, [pc, #28]	@ (8012580 <disk_write+0x3c>)
 8012564:	4413      	add	r3, r2
 8012566:	7a18      	ldrb	r0, [r3, #8]
 8012568:	683b      	ldr	r3, [r7, #0]
 801256a:	687a      	ldr	r2, [r7, #4]
 801256c:	68b9      	ldr	r1, [r7, #8]
 801256e:	47a0      	blx	r4
 8012570:	4603      	mov	r3, r0
 8012572:	75fb      	strb	r3, [r7, #23]
  return res;
 8012574:	7dfb      	ldrb	r3, [r7, #23]
}
 8012576:	4618      	mov	r0, r3
 8012578:	371c      	adds	r7, #28
 801257a:	46bd      	mov	sp, r7
 801257c:	bd90      	pop	{r4, r7, pc}
 801257e:	bf00      	nop
 8012580:	20002b2c 	.word	0x20002b2c

08012584 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012584:	b580      	push	{r7, lr}
 8012586:	b084      	sub	sp, #16
 8012588:	af00      	add	r7, sp, #0
 801258a:	4603      	mov	r3, r0
 801258c:	603a      	str	r2, [r7, #0]
 801258e:	71fb      	strb	r3, [r7, #7]
 8012590:	460b      	mov	r3, r1
 8012592:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012594:	79fb      	ldrb	r3, [r7, #7]
 8012596:	4a09      	ldr	r2, [pc, #36]	@ (80125bc <disk_ioctl+0x38>)
 8012598:	009b      	lsls	r3, r3, #2
 801259a:	4413      	add	r3, r2
 801259c:	685b      	ldr	r3, [r3, #4]
 801259e:	691b      	ldr	r3, [r3, #16]
 80125a0:	79fa      	ldrb	r2, [r7, #7]
 80125a2:	4906      	ldr	r1, [pc, #24]	@ (80125bc <disk_ioctl+0x38>)
 80125a4:	440a      	add	r2, r1
 80125a6:	7a10      	ldrb	r0, [r2, #8]
 80125a8:	79b9      	ldrb	r1, [r7, #6]
 80125aa:	683a      	ldr	r2, [r7, #0]
 80125ac:	4798      	blx	r3
 80125ae:	4603      	mov	r3, r0
 80125b0:	73fb      	strb	r3, [r7, #15]
  return res;
 80125b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80125b4:	4618      	mov	r0, r3
 80125b6:	3710      	adds	r7, #16
 80125b8:	46bd      	mov	sp, r7
 80125ba:	bd80      	pop	{r7, pc}
 80125bc:	20002b2c 	.word	0x20002b2c

080125c0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80125c0:	b480      	push	{r7}
 80125c2:	b085      	sub	sp, #20
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	3301      	adds	r3, #1
 80125cc:	781b      	ldrb	r3, [r3, #0]
 80125ce:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80125d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80125d4:	021b      	lsls	r3, r3, #8
 80125d6:	b21a      	sxth	r2, r3
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	781b      	ldrb	r3, [r3, #0]
 80125dc:	b21b      	sxth	r3, r3
 80125de:	4313      	orrs	r3, r2
 80125e0:	b21b      	sxth	r3, r3
 80125e2:	81fb      	strh	r3, [r7, #14]
	return rv;
 80125e4:	89fb      	ldrh	r3, [r7, #14]
}
 80125e6:	4618      	mov	r0, r3
 80125e8:	3714      	adds	r7, #20
 80125ea:	46bd      	mov	sp, r7
 80125ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f0:	4770      	bx	lr

080125f2 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80125f2:	b480      	push	{r7}
 80125f4:	b085      	sub	sp, #20
 80125f6:	af00      	add	r7, sp, #0
 80125f8:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	3303      	adds	r3, #3
 80125fe:	781b      	ldrb	r3, [r3, #0]
 8012600:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	021b      	lsls	r3, r3, #8
 8012606:	687a      	ldr	r2, [r7, #4]
 8012608:	3202      	adds	r2, #2
 801260a:	7812      	ldrb	r2, [r2, #0]
 801260c:	4313      	orrs	r3, r2
 801260e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	021b      	lsls	r3, r3, #8
 8012614:	687a      	ldr	r2, [r7, #4]
 8012616:	3201      	adds	r2, #1
 8012618:	7812      	ldrb	r2, [r2, #0]
 801261a:	4313      	orrs	r3, r2
 801261c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	021b      	lsls	r3, r3, #8
 8012622:	687a      	ldr	r2, [r7, #4]
 8012624:	7812      	ldrb	r2, [r2, #0]
 8012626:	4313      	orrs	r3, r2
 8012628:	60fb      	str	r3, [r7, #12]
	return rv;
 801262a:	68fb      	ldr	r3, [r7, #12]
}
 801262c:	4618      	mov	r0, r3
 801262e:	3714      	adds	r7, #20
 8012630:	46bd      	mov	sp, r7
 8012632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012636:	4770      	bx	lr

08012638 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8012638:	b480      	push	{r7}
 801263a:	b083      	sub	sp, #12
 801263c:	af00      	add	r7, sp, #0
 801263e:	6078      	str	r0, [r7, #4]
 8012640:	460b      	mov	r3, r1
 8012642:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	1c5a      	adds	r2, r3, #1
 8012648:	607a      	str	r2, [r7, #4]
 801264a:	887a      	ldrh	r2, [r7, #2]
 801264c:	b2d2      	uxtb	r2, r2
 801264e:	701a      	strb	r2, [r3, #0]
 8012650:	887b      	ldrh	r3, [r7, #2]
 8012652:	0a1b      	lsrs	r3, r3, #8
 8012654:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	1c5a      	adds	r2, r3, #1
 801265a:	607a      	str	r2, [r7, #4]
 801265c:	887a      	ldrh	r2, [r7, #2]
 801265e:	b2d2      	uxtb	r2, r2
 8012660:	701a      	strb	r2, [r3, #0]
}
 8012662:	bf00      	nop
 8012664:	370c      	adds	r7, #12
 8012666:	46bd      	mov	sp, r7
 8012668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801266c:	4770      	bx	lr

0801266e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801266e:	b480      	push	{r7}
 8012670:	b083      	sub	sp, #12
 8012672:	af00      	add	r7, sp, #0
 8012674:	6078      	str	r0, [r7, #4]
 8012676:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	1c5a      	adds	r2, r3, #1
 801267c:	607a      	str	r2, [r7, #4]
 801267e:	683a      	ldr	r2, [r7, #0]
 8012680:	b2d2      	uxtb	r2, r2
 8012682:	701a      	strb	r2, [r3, #0]
 8012684:	683b      	ldr	r3, [r7, #0]
 8012686:	0a1b      	lsrs	r3, r3, #8
 8012688:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	1c5a      	adds	r2, r3, #1
 801268e:	607a      	str	r2, [r7, #4]
 8012690:	683a      	ldr	r2, [r7, #0]
 8012692:	b2d2      	uxtb	r2, r2
 8012694:	701a      	strb	r2, [r3, #0]
 8012696:	683b      	ldr	r3, [r7, #0]
 8012698:	0a1b      	lsrs	r3, r3, #8
 801269a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	1c5a      	adds	r2, r3, #1
 80126a0:	607a      	str	r2, [r7, #4]
 80126a2:	683a      	ldr	r2, [r7, #0]
 80126a4:	b2d2      	uxtb	r2, r2
 80126a6:	701a      	strb	r2, [r3, #0]
 80126a8:	683b      	ldr	r3, [r7, #0]
 80126aa:	0a1b      	lsrs	r3, r3, #8
 80126ac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	1c5a      	adds	r2, r3, #1
 80126b2:	607a      	str	r2, [r7, #4]
 80126b4:	683a      	ldr	r2, [r7, #0]
 80126b6:	b2d2      	uxtb	r2, r2
 80126b8:	701a      	strb	r2, [r3, #0]
}
 80126ba:	bf00      	nop
 80126bc:	370c      	adds	r7, #12
 80126be:	46bd      	mov	sp, r7
 80126c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c4:	4770      	bx	lr

080126c6 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80126c6:	b480      	push	{r7}
 80126c8:	b087      	sub	sp, #28
 80126ca:	af00      	add	r7, sp, #0
 80126cc:	60f8      	str	r0, [r7, #12]
 80126ce:	60b9      	str	r1, [r7, #8]
 80126d0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80126d6:	68bb      	ldr	r3, [r7, #8]
 80126d8:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d00d      	beq.n	80126fc <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80126e0:	693a      	ldr	r2, [r7, #16]
 80126e2:	1c53      	adds	r3, r2, #1
 80126e4:	613b      	str	r3, [r7, #16]
 80126e6:	697b      	ldr	r3, [r7, #20]
 80126e8:	1c59      	adds	r1, r3, #1
 80126ea:	6179      	str	r1, [r7, #20]
 80126ec:	7812      	ldrb	r2, [r2, #0]
 80126ee:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	3b01      	subs	r3, #1
 80126f4:	607b      	str	r3, [r7, #4]
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d1f1      	bne.n	80126e0 <mem_cpy+0x1a>
	}
}
 80126fc:	bf00      	nop
 80126fe:	371c      	adds	r7, #28
 8012700:	46bd      	mov	sp, r7
 8012702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012706:	4770      	bx	lr

08012708 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8012708:	b480      	push	{r7}
 801270a:	b087      	sub	sp, #28
 801270c:	af00      	add	r7, sp, #0
 801270e:	60f8      	str	r0, [r7, #12]
 8012710:	60b9      	str	r1, [r7, #8]
 8012712:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8012718:	697b      	ldr	r3, [r7, #20]
 801271a:	1c5a      	adds	r2, r3, #1
 801271c:	617a      	str	r2, [r7, #20]
 801271e:	68ba      	ldr	r2, [r7, #8]
 8012720:	b2d2      	uxtb	r2, r2
 8012722:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	3b01      	subs	r3, #1
 8012728:	607b      	str	r3, [r7, #4]
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d1f3      	bne.n	8012718 <mem_set+0x10>
}
 8012730:	bf00      	nop
 8012732:	bf00      	nop
 8012734:	371c      	adds	r7, #28
 8012736:	46bd      	mov	sp, r7
 8012738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801273c:	4770      	bx	lr

0801273e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801273e:	b480      	push	{r7}
 8012740:	b089      	sub	sp, #36	@ 0x24
 8012742:	af00      	add	r7, sp, #0
 8012744:	60f8      	str	r0, [r7, #12]
 8012746:	60b9      	str	r1, [r7, #8]
 8012748:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	61fb      	str	r3, [r7, #28]
 801274e:	68bb      	ldr	r3, [r7, #8]
 8012750:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8012752:	2300      	movs	r3, #0
 8012754:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8012756:	69fb      	ldr	r3, [r7, #28]
 8012758:	1c5a      	adds	r2, r3, #1
 801275a:	61fa      	str	r2, [r7, #28]
 801275c:	781b      	ldrb	r3, [r3, #0]
 801275e:	4619      	mov	r1, r3
 8012760:	69bb      	ldr	r3, [r7, #24]
 8012762:	1c5a      	adds	r2, r3, #1
 8012764:	61ba      	str	r2, [r7, #24]
 8012766:	781b      	ldrb	r3, [r3, #0]
 8012768:	1acb      	subs	r3, r1, r3
 801276a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	3b01      	subs	r3, #1
 8012770:	607b      	str	r3, [r7, #4]
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d002      	beq.n	801277e <mem_cmp+0x40>
 8012778:	697b      	ldr	r3, [r7, #20]
 801277a:	2b00      	cmp	r3, #0
 801277c:	d0eb      	beq.n	8012756 <mem_cmp+0x18>

	return r;
 801277e:	697b      	ldr	r3, [r7, #20]
}
 8012780:	4618      	mov	r0, r3
 8012782:	3724      	adds	r7, #36	@ 0x24
 8012784:	46bd      	mov	sp, r7
 8012786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278a:	4770      	bx	lr

0801278c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801278c:	b480      	push	{r7}
 801278e:	b083      	sub	sp, #12
 8012790:	af00      	add	r7, sp, #0
 8012792:	6078      	str	r0, [r7, #4]
 8012794:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012796:	e002      	b.n	801279e <chk_chr+0x12>
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	3301      	adds	r3, #1
 801279c:	607b      	str	r3, [r7, #4]
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	781b      	ldrb	r3, [r3, #0]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d005      	beq.n	80127b2 <chk_chr+0x26>
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	781b      	ldrb	r3, [r3, #0]
 80127aa:	461a      	mov	r2, r3
 80127ac:	683b      	ldr	r3, [r7, #0]
 80127ae:	4293      	cmp	r3, r2
 80127b0:	d1f2      	bne.n	8012798 <chk_chr+0xc>
	return *str;
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	781b      	ldrb	r3, [r3, #0]
}
 80127b6:	4618      	mov	r0, r3
 80127b8:	370c      	adds	r7, #12
 80127ba:	46bd      	mov	sp, r7
 80127bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c0:	4770      	bx	lr

080127c2 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80127c2:	b580      	push	{r7, lr}
 80127c4:	b086      	sub	sp, #24
 80127c6:	af00      	add	r7, sp, #0
 80127c8:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80127ca:	2300      	movs	r3, #0
 80127cc:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	78db      	ldrb	r3, [r3, #3]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d034      	beq.n	8012840 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80127da:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	7858      	ldrb	r0, [r3, #1]
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80127e6:	2301      	movs	r3, #1
 80127e8:	697a      	ldr	r2, [r7, #20]
 80127ea:	f7ff feab 	bl	8012544 <disk_write>
 80127ee:	4603      	mov	r3, r0
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d002      	beq.n	80127fa <sync_window+0x38>
			res = FR_DISK_ERR;
 80127f4:	2301      	movs	r3, #1
 80127f6:	73fb      	strb	r3, [r7, #15]
 80127f8:	e022      	b.n	8012840 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	2200      	movs	r2, #0
 80127fe:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	6a1b      	ldr	r3, [r3, #32]
 8012804:	697a      	ldr	r2, [r7, #20]
 8012806:	1ad2      	subs	r2, r2, r3
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	699b      	ldr	r3, [r3, #24]
 801280c:	429a      	cmp	r2, r3
 801280e:	d217      	bcs.n	8012840 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	789b      	ldrb	r3, [r3, #2]
 8012814:	613b      	str	r3, [r7, #16]
 8012816:	e010      	b.n	801283a <sync_window+0x78>
					wsect += fs->fsize;
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	699b      	ldr	r3, [r3, #24]
 801281c:	697a      	ldr	r2, [r7, #20]
 801281e:	4413      	add	r3, r2
 8012820:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	7858      	ldrb	r0, [r3, #1]
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801282c:	2301      	movs	r3, #1
 801282e:	697a      	ldr	r2, [r7, #20]
 8012830:	f7ff fe88 	bl	8012544 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012834:	693b      	ldr	r3, [r7, #16]
 8012836:	3b01      	subs	r3, #1
 8012838:	613b      	str	r3, [r7, #16]
 801283a:	693b      	ldr	r3, [r7, #16]
 801283c:	2b01      	cmp	r3, #1
 801283e:	d8eb      	bhi.n	8012818 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8012840:	7bfb      	ldrb	r3, [r7, #15]
}
 8012842:	4618      	mov	r0, r3
 8012844:	3718      	adds	r7, #24
 8012846:	46bd      	mov	sp, r7
 8012848:	bd80      	pop	{r7, pc}

0801284a <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801284a:	b580      	push	{r7, lr}
 801284c:	b084      	sub	sp, #16
 801284e:	af00      	add	r7, sp, #0
 8012850:	6078      	str	r0, [r7, #4]
 8012852:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8012854:	2300      	movs	r3, #0
 8012856:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801285c:	683a      	ldr	r2, [r7, #0]
 801285e:	429a      	cmp	r2, r3
 8012860:	d01b      	beq.n	801289a <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8012862:	6878      	ldr	r0, [r7, #4]
 8012864:	f7ff ffad 	bl	80127c2 <sync_window>
 8012868:	4603      	mov	r3, r0
 801286a:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801286c:	7bfb      	ldrb	r3, [r7, #15]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d113      	bne.n	801289a <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	7858      	ldrb	r0, [r3, #1]
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801287c:	2301      	movs	r3, #1
 801287e:	683a      	ldr	r2, [r7, #0]
 8012880:	f7ff fe40 	bl	8012504 <disk_read>
 8012884:	4603      	mov	r3, r0
 8012886:	2b00      	cmp	r3, #0
 8012888:	d004      	beq.n	8012894 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801288a:	f04f 33ff 	mov.w	r3, #4294967295
 801288e:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8012890:	2301      	movs	r3, #1
 8012892:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	683a      	ldr	r2, [r7, #0]
 8012898:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 801289a:	7bfb      	ldrb	r3, [r7, #15]
}
 801289c:	4618      	mov	r0, r3
 801289e:	3710      	adds	r7, #16
 80128a0:	46bd      	mov	sp, r7
 80128a2:	bd80      	pop	{r7, pc}

080128a4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80128a4:	b580      	push	{r7, lr}
 80128a6:	b084      	sub	sp, #16
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80128ac:	6878      	ldr	r0, [r7, #4]
 80128ae:	f7ff ff88 	bl	80127c2 <sync_window>
 80128b2:	4603      	mov	r3, r0
 80128b4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80128b6:	7bfb      	ldrb	r3, [r7, #15]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d158      	bne.n	801296e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	781b      	ldrb	r3, [r3, #0]
 80128c0:	2b03      	cmp	r3, #3
 80128c2:	d148      	bne.n	8012956 <sync_fs+0xb2>
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	791b      	ldrb	r3, [r3, #4]
 80128c8:	2b01      	cmp	r3, #1
 80128ca:	d144      	bne.n	8012956 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	3330      	adds	r3, #48	@ 0x30
 80128d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80128d4:	2100      	movs	r1, #0
 80128d6:	4618      	mov	r0, r3
 80128d8:	f7ff ff16 	bl	8012708 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	3330      	adds	r3, #48	@ 0x30
 80128e0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80128e4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80128e8:	4618      	mov	r0, r3
 80128ea:	f7ff fea5 	bl	8012638 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	3330      	adds	r3, #48	@ 0x30
 80128f2:	4921      	ldr	r1, [pc, #132]	@ (8012978 <sync_fs+0xd4>)
 80128f4:	4618      	mov	r0, r3
 80128f6:	f7ff feba 	bl	801266e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	3330      	adds	r3, #48	@ 0x30
 80128fe:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8012902:	491e      	ldr	r1, [pc, #120]	@ (801297c <sync_fs+0xd8>)
 8012904:	4618      	mov	r0, r3
 8012906:	f7ff feb2 	bl	801266e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	3330      	adds	r3, #48	@ 0x30
 801290e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	691b      	ldr	r3, [r3, #16]
 8012916:	4619      	mov	r1, r3
 8012918:	4610      	mov	r0, r2
 801291a:	f7ff fea8 	bl	801266e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	3330      	adds	r3, #48	@ 0x30
 8012922:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	68db      	ldr	r3, [r3, #12]
 801292a:	4619      	mov	r1, r3
 801292c:	4610      	mov	r0, r2
 801292e:	f7ff fe9e 	bl	801266e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	69db      	ldr	r3, [r3, #28]
 8012936:	1c5a      	adds	r2, r3, #1
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	7858      	ldrb	r0, [r3, #1]
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801294a:	2301      	movs	r3, #1
 801294c:	f7ff fdfa 	bl	8012544 <disk_write>
			fs->fsi_flag = 0;
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	2200      	movs	r2, #0
 8012954:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	785b      	ldrb	r3, [r3, #1]
 801295a:	2200      	movs	r2, #0
 801295c:	2100      	movs	r1, #0
 801295e:	4618      	mov	r0, r3
 8012960:	f7ff fe10 	bl	8012584 <disk_ioctl>
 8012964:	4603      	mov	r3, r0
 8012966:	2b00      	cmp	r3, #0
 8012968:	d001      	beq.n	801296e <sync_fs+0xca>
 801296a:	2301      	movs	r3, #1
 801296c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801296e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012970:	4618      	mov	r0, r3
 8012972:	3710      	adds	r7, #16
 8012974:	46bd      	mov	sp, r7
 8012976:	bd80      	pop	{r7, pc}
 8012978:	41615252 	.word	0x41615252
 801297c:	61417272 	.word	0x61417272

08012980 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8012980:	b480      	push	{r7}
 8012982:	b083      	sub	sp, #12
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
 8012988:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801298a:	683b      	ldr	r3, [r7, #0]
 801298c:	3b02      	subs	r3, #2
 801298e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	695b      	ldr	r3, [r3, #20]
 8012994:	3b02      	subs	r3, #2
 8012996:	683a      	ldr	r2, [r7, #0]
 8012998:	429a      	cmp	r2, r3
 801299a:	d301      	bcc.n	80129a0 <clust2sect+0x20>
 801299c:	2300      	movs	r3, #0
 801299e:	e008      	b.n	80129b2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	895b      	ldrh	r3, [r3, #10]
 80129a4:	461a      	mov	r2, r3
 80129a6:	683b      	ldr	r3, [r7, #0]
 80129a8:	fb03 f202 	mul.w	r2, r3, r2
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80129b0:	4413      	add	r3, r2
}
 80129b2:	4618      	mov	r0, r3
 80129b4:	370c      	adds	r7, #12
 80129b6:	46bd      	mov	sp, r7
 80129b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129bc:	4770      	bx	lr

080129be <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80129be:	b580      	push	{r7, lr}
 80129c0:	b086      	sub	sp, #24
 80129c2:	af00      	add	r7, sp, #0
 80129c4:	6078      	str	r0, [r7, #4]
 80129c6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80129ce:	683b      	ldr	r3, [r7, #0]
 80129d0:	2b01      	cmp	r3, #1
 80129d2:	d904      	bls.n	80129de <get_fat+0x20>
 80129d4:	693b      	ldr	r3, [r7, #16]
 80129d6:	695b      	ldr	r3, [r3, #20]
 80129d8:	683a      	ldr	r2, [r7, #0]
 80129da:	429a      	cmp	r2, r3
 80129dc:	d302      	bcc.n	80129e4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80129de:	2301      	movs	r3, #1
 80129e0:	617b      	str	r3, [r7, #20]
 80129e2:	e08e      	b.n	8012b02 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80129e4:	f04f 33ff 	mov.w	r3, #4294967295
 80129e8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80129ea:	693b      	ldr	r3, [r7, #16]
 80129ec:	781b      	ldrb	r3, [r3, #0]
 80129ee:	2b03      	cmp	r3, #3
 80129f0:	d061      	beq.n	8012ab6 <get_fat+0xf8>
 80129f2:	2b03      	cmp	r3, #3
 80129f4:	dc7b      	bgt.n	8012aee <get_fat+0x130>
 80129f6:	2b01      	cmp	r3, #1
 80129f8:	d002      	beq.n	8012a00 <get_fat+0x42>
 80129fa:	2b02      	cmp	r3, #2
 80129fc:	d041      	beq.n	8012a82 <get_fat+0xc4>
 80129fe:	e076      	b.n	8012aee <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012a00:	683b      	ldr	r3, [r7, #0]
 8012a02:	60fb      	str	r3, [r7, #12]
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	085b      	lsrs	r3, r3, #1
 8012a08:	68fa      	ldr	r2, [r7, #12]
 8012a0a:	4413      	add	r3, r2
 8012a0c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012a0e:	693b      	ldr	r3, [r7, #16]
 8012a10:	6a1a      	ldr	r2, [r3, #32]
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	0a5b      	lsrs	r3, r3, #9
 8012a16:	4413      	add	r3, r2
 8012a18:	4619      	mov	r1, r3
 8012a1a:	6938      	ldr	r0, [r7, #16]
 8012a1c:	f7ff ff15 	bl	801284a <move_window>
 8012a20:	4603      	mov	r3, r0
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d166      	bne.n	8012af4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	1c5a      	adds	r2, r3, #1
 8012a2a:	60fa      	str	r2, [r7, #12]
 8012a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a30:	693a      	ldr	r2, [r7, #16]
 8012a32:	4413      	add	r3, r2
 8012a34:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012a38:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012a3a:	693b      	ldr	r3, [r7, #16]
 8012a3c:	6a1a      	ldr	r2, [r3, #32]
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	0a5b      	lsrs	r3, r3, #9
 8012a42:	4413      	add	r3, r2
 8012a44:	4619      	mov	r1, r3
 8012a46:	6938      	ldr	r0, [r7, #16]
 8012a48:	f7ff feff 	bl	801284a <move_window>
 8012a4c:	4603      	mov	r3, r0
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d152      	bne.n	8012af8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a58:	693a      	ldr	r2, [r7, #16]
 8012a5a:	4413      	add	r3, r2
 8012a5c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012a60:	021b      	lsls	r3, r3, #8
 8012a62:	68ba      	ldr	r2, [r7, #8]
 8012a64:	4313      	orrs	r3, r2
 8012a66:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012a68:	683b      	ldr	r3, [r7, #0]
 8012a6a:	f003 0301 	and.w	r3, r3, #1
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d002      	beq.n	8012a78 <get_fat+0xba>
 8012a72:	68bb      	ldr	r3, [r7, #8]
 8012a74:	091b      	lsrs	r3, r3, #4
 8012a76:	e002      	b.n	8012a7e <get_fat+0xc0>
 8012a78:	68bb      	ldr	r3, [r7, #8]
 8012a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012a7e:	617b      	str	r3, [r7, #20]
			break;
 8012a80:	e03f      	b.n	8012b02 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012a82:	693b      	ldr	r3, [r7, #16]
 8012a84:	6a1a      	ldr	r2, [r3, #32]
 8012a86:	683b      	ldr	r3, [r7, #0]
 8012a88:	0a1b      	lsrs	r3, r3, #8
 8012a8a:	4413      	add	r3, r2
 8012a8c:	4619      	mov	r1, r3
 8012a8e:	6938      	ldr	r0, [r7, #16]
 8012a90:	f7ff fedb 	bl	801284a <move_window>
 8012a94:	4603      	mov	r3, r0
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d130      	bne.n	8012afc <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012a9a:	693b      	ldr	r3, [r7, #16]
 8012a9c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012aa0:	683b      	ldr	r3, [r7, #0]
 8012aa2:	005b      	lsls	r3, r3, #1
 8012aa4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8012aa8:	4413      	add	r3, r2
 8012aaa:	4618      	mov	r0, r3
 8012aac:	f7ff fd88 	bl	80125c0 <ld_word>
 8012ab0:	4603      	mov	r3, r0
 8012ab2:	617b      	str	r3, [r7, #20]
			break;
 8012ab4:	e025      	b.n	8012b02 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012ab6:	693b      	ldr	r3, [r7, #16]
 8012ab8:	6a1a      	ldr	r2, [r3, #32]
 8012aba:	683b      	ldr	r3, [r7, #0]
 8012abc:	09db      	lsrs	r3, r3, #7
 8012abe:	4413      	add	r3, r2
 8012ac0:	4619      	mov	r1, r3
 8012ac2:	6938      	ldr	r0, [r7, #16]
 8012ac4:	f7ff fec1 	bl	801284a <move_window>
 8012ac8:	4603      	mov	r3, r0
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d118      	bne.n	8012b00 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012ace:	693b      	ldr	r3, [r7, #16]
 8012ad0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012ad4:	683b      	ldr	r3, [r7, #0]
 8012ad6:	009b      	lsls	r3, r3, #2
 8012ad8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012adc:	4413      	add	r3, r2
 8012ade:	4618      	mov	r0, r3
 8012ae0:	f7ff fd87 	bl	80125f2 <ld_dword>
 8012ae4:	4603      	mov	r3, r0
 8012ae6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8012aea:	617b      	str	r3, [r7, #20]
			break;
 8012aec:	e009      	b.n	8012b02 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8012aee:	2301      	movs	r3, #1
 8012af0:	617b      	str	r3, [r7, #20]
 8012af2:	e006      	b.n	8012b02 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012af4:	bf00      	nop
 8012af6:	e004      	b.n	8012b02 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012af8:	bf00      	nop
 8012afa:	e002      	b.n	8012b02 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012afc:	bf00      	nop
 8012afe:	e000      	b.n	8012b02 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012b00:	bf00      	nop
		}
	}

	return val;
 8012b02:	697b      	ldr	r3, [r7, #20]
}
 8012b04:	4618      	mov	r0, r3
 8012b06:	3718      	adds	r7, #24
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	bd80      	pop	{r7, pc}

08012b0c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8012b0c:	b590      	push	{r4, r7, lr}
 8012b0e:	b089      	sub	sp, #36	@ 0x24
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	60f8      	str	r0, [r7, #12]
 8012b14:	60b9      	str	r1, [r7, #8]
 8012b16:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8012b18:	2302      	movs	r3, #2
 8012b1a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012b1c:	68bb      	ldr	r3, [r7, #8]
 8012b1e:	2b01      	cmp	r3, #1
 8012b20:	f240 80d9 	bls.w	8012cd6 <put_fat+0x1ca>
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	695b      	ldr	r3, [r3, #20]
 8012b28:	68ba      	ldr	r2, [r7, #8]
 8012b2a:	429a      	cmp	r2, r3
 8012b2c:	f080 80d3 	bcs.w	8012cd6 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	781b      	ldrb	r3, [r3, #0]
 8012b34:	2b03      	cmp	r3, #3
 8012b36:	f000 8096 	beq.w	8012c66 <put_fat+0x15a>
 8012b3a:	2b03      	cmp	r3, #3
 8012b3c:	f300 80cb 	bgt.w	8012cd6 <put_fat+0x1ca>
 8012b40:	2b01      	cmp	r3, #1
 8012b42:	d002      	beq.n	8012b4a <put_fat+0x3e>
 8012b44:	2b02      	cmp	r3, #2
 8012b46:	d06e      	beq.n	8012c26 <put_fat+0x11a>
 8012b48:	e0c5      	b.n	8012cd6 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012b4a:	68bb      	ldr	r3, [r7, #8]
 8012b4c:	61bb      	str	r3, [r7, #24]
 8012b4e:	69bb      	ldr	r3, [r7, #24]
 8012b50:	085b      	lsrs	r3, r3, #1
 8012b52:	69ba      	ldr	r2, [r7, #24]
 8012b54:	4413      	add	r3, r2
 8012b56:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	6a1a      	ldr	r2, [r3, #32]
 8012b5c:	69bb      	ldr	r3, [r7, #24]
 8012b5e:	0a5b      	lsrs	r3, r3, #9
 8012b60:	4413      	add	r3, r2
 8012b62:	4619      	mov	r1, r3
 8012b64:	68f8      	ldr	r0, [r7, #12]
 8012b66:	f7ff fe70 	bl	801284a <move_window>
 8012b6a:	4603      	mov	r3, r0
 8012b6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012b6e:	7ffb      	ldrb	r3, [r7, #31]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	f040 80a9 	bne.w	8012cc8 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012b7c:	69bb      	ldr	r3, [r7, #24]
 8012b7e:	1c59      	adds	r1, r3, #1
 8012b80:	61b9      	str	r1, [r7, #24]
 8012b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012b86:	4413      	add	r3, r2
 8012b88:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012b8a:	68bb      	ldr	r3, [r7, #8]
 8012b8c:	f003 0301 	and.w	r3, r3, #1
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d00d      	beq.n	8012bb0 <put_fat+0xa4>
 8012b94:	697b      	ldr	r3, [r7, #20]
 8012b96:	781b      	ldrb	r3, [r3, #0]
 8012b98:	b25b      	sxtb	r3, r3
 8012b9a:	f003 030f 	and.w	r3, r3, #15
 8012b9e:	b25a      	sxtb	r2, r3
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	b25b      	sxtb	r3, r3
 8012ba4:	011b      	lsls	r3, r3, #4
 8012ba6:	b25b      	sxtb	r3, r3
 8012ba8:	4313      	orrs	r3, r2
 8012baa:	b25b      	sxtb	r3, r3
 8012bac:	b2db      	uxtb	r3, r3
 8012bae:	e001      	b.n	8012bb4 <put_fat+0xa8>
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	b2db      	uxtb	r3, r3
 8012bb4:	697a      	ldr	r2, [r7, #20]
 8012bb6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	2201      	movs	r2, #1
 8012bbc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	6a1a      	ldr	r2, [r3, #32]
 8012bc2:	69bb      	ldr	r3, [r7, #24]
 8012bc4:	0a5b      	lsrs	r3, r3, #9
 8012bc6:	4413      	add	r3, r2
 8012bc8:	4619      	mov	r1, r3
 8012bca:	68f8      	ldr	r0, [r7, #12]
 8012bcc:	f7ff fe3d 	bl	801284a <move_window>
 8012bd0:	4603      	mov	r3, r0
 8012bd2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012bd4:	7ffb      	ldrb	r3, [r7, #31]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d178      	bne.n	8012ccc <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012be0:	69bb      	ldr	r3, [r7, #24]
 8012be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012be6:	4413      	add	r3, r2
 8012be8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012bea:	68bb      	ldr	r3, [r7, #8]
 8012bec:	f003 0301 	and.w	r3, r3, #1
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d003      	beq.n	8012bfc <put_fat+0xf0>
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	091b      	lsrs	r3, r3, #4
 8012bf8:	b2db      	uxtb	r3, r3
 8012bfa:	e00e      	b.n	8012c1a <put_fat+0x10e>
 8012bfc:	697b      	ldr	r3, [r7, #20]
 8012bfe:	781b      	ldrb	r3, [r3, #0]
 8012c00:	b25b      	sxtb	r3, r3
 8012c02:	f023 030f 	bic.w	r3, r3, #15
 8012c06:	b25a      	sxtb	r2, r3
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	0a1b      	lsrs	r3, r3, #8
 8012c0c:	b25b      	sxtb	r3, r3
 8012c0e:	f003 030f 	and.w	r3, r3, #15
 8012c12:	b25b      	sxtb	r3, r3
 8012c14:	4313      	orrs	r3, r2
 8012c16:	b25b      	sxtb	r3, r3
 8012c18:	b2db      	uxtb	r3, r3
 8012c1a:	697a      	ldr	r2, [r7, #20]
 8012c1c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	2201      	movs	r2, #1
 8012c22:	70da      	strb	r2, [r3, #3]
			break;
 8012c24:	e057      	b.n	8012cd6 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	6a1a      	ldr	r2, [r3, #32]
 8012c2a:	68bb      	ldr	r3, [r7, #8]
 8012c2c:	0a1b      	lsrs	r3, r3, #8
 8012c2e:	4413      	add	r3, r2
 8012c30:	4619      	mov	r1, r3
 8012c32:	68f8      	ldr	r0, [r7, #12]
 8012c34:	f7ff fe09 	bl	801284a <move_window>
 8012c38:	4603      	mov	r3, r0
 8012c3a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012c3c:	7ffb      	ldrb	r3, [r7, #31]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d146      	bne.n	8012cd0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012c48:	68bb      	ldr	r3, [r7, #8]
 8012c4a:	005b      	lsls	r3, r3, #1
 8012c4c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8012c50:	4413      	add	r3, r2
 8012c52:	687a      	ldr	r2, [r7, #4]
 8012c54:	b292      	uxth	r2, r2
 8012c56:	4611      	mov	r1, r2
 8012c58:	4618      	mov	r0, r3
 8012c5a:	f7ff fced 	bl	8012638 <st_word>
			fs->wflag = 1;
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	2201      	movs	r2, #1
 8012c62:	70da      	strb	r2, [r3, #3]
			break;
 8012c64:	e037      	b.n	8012cd6 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	6a1a      	ldr	r2, [r3, #32]
 8012c6a:	68bb      	ldr	r3, [r7, #8]
 8012c6c:	09db      	lsrs	r3, r3, #7
 8012c6e:	4413      	add	r3, r2
 8012c70:	4619      	mov	r1, r3
 8012c72:	68f8      	ldr	r0, [r7, #12]
 8012c74:	f7ff fde9 	bl	801284a <move_window>
 8012c78:	4603      	mov	r3, r0
 8012c7a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012c7c:	7ffb      	ldrb	r3, [r7, #31]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d128      	bne.n	8012cd4 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012c8e:	68bb      	ldr	r3, [r7, #8]
 8012c90:	009b      	lsls	r3, r3, #2
 8012c92:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012c96:	4413      	add	r3, r2
 8012c98:	4618      	mov	r0, r3
 8012c9a:	f7ff fcaa 	bl	80125f2 <ld_dword>
 8012c9e:	4603      	mov	r3, r0
 8012ca0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8012ca4:	4323      	orrs	r3, r4
 8012ca6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012cae:	68bb      	ldr	r3, [r7, #8]
 8012cb0:	009b      	lsls	r3, r3, #2
 8012cb2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012cb6:	4413      	add	r3, r2
 8012cb8:	6879      	ldr	r1, [r7, #4]
 8012cba:	4618      	mov	r0, r3
 8012cbc:	f7ff fcd7 	bl	801266e <st_dword>
			fs->wflag = 1;
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	2201      	movs	r2, #1
 8012cc4:	70da      	strb	r2, [r3, #3]
			break;
 8012cc6:	e006      	b.n	8012cd6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012cc8:	bf00      	nop
 8012cca:	e004      	b.n	8012cd6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012ccc:	bf00      	nop
 8012cce:	e002      	b.n	8012cd6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012cd0:	bf00      	nop
 8012cd2:	e000      	b.n	8012cd6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012cd4:	bf00      	nop
		}
	}
	return res;
 8012cd6:	7ffb      	ldrb	r3, [r7, #31]
}
 8012cd8:	4618      	mov	r0, r3
 8012cda:	3724      	adds	r7, #36	@ 0x24
 8012cdc:	46bd      	mov	sp, r7
 8012cde:	bd90      	pop	{r4, r7, pc}

08012ce0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	b088      	sub	sp, #32
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	60f8      	str	r0, [r7, #12]
 8012ce8:	60b9      	str	r1, [r7, #8]
 8012cea:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8012cec:	2300      	movs	r3, #0
 8012cee:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012cf6:	68bb      	ldr	r3, [r7, #8]
 8012cf8:	2b01      	cmp	r3, #1
 8012cfa:	d904      	bls.n	8012d06 <remove_chain+0x26>
 8012cfc:	69bb      	ldr	r3, [r7, #24]
 8012cfe:	695b      	ldr	r3, [r3, #20]
 8012d00:	68ba      	ldr	r2, [r7, #8]
 8012d02:	429a      	cmp	r2, r3
 8012d04:	d301      	bcc.n	8012d0a <remove_chain+0x2a>
 8012d06:	2302      	movs	r3, #2
 8012d08:	e04b      	b.n	8012da2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d00c      	beq.n	8012d2a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012d10:	f04f 32ff 	mov.w	r2, #4294967295
 8012d14:	6879      	ldr	r1, [r7, #4]
 8012d16:	69b8      	ldr	r0, [r7, #24]
 8012d18:	f7ff fef8 	bl	8012b0c <put_fat>
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012d20:	7ffb      	ldrb	r3, [r7, #31]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d001      	beq.n	8012d2a <remove_chain+0x4a>
 8012d26:	7ffb      	ldrb	r3, [r7, #31]
 8012d28:	e03b      	b.n	8012da2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8012d2a:	68b9      	ldr	r1, [r7, #8]
 8012d2c:	68f8      	ldr	r0, [r7, #12]
 8012d2e:	f7ff fe46 	bl	80129be <get_fat>
 8012d32:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012d34:	697b      	ldr	r3, [r7, #20]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d031      	beq.n	8012d9e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8012d3a:	697b      	ldr	r3, [r7, #20]
 8012d3c:	2b01      	cmp	r3, #1
 8012d3e:	d101      	bne.n	8012d44 <remove_chain+0x64>
 8012d40:	2302      	movs	r3, #2
 8012d42:	e02e      	b.n	8012da2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012d44:	697b      	ldr	r3, [r7, #20]
 8012d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d4a:	d101      	bne.n	8012d50 <remove_chain+0x70>
 8012d4c:	2301      	movs	r3, #1
 8012d4e:	e028      	b.n	8012da2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012d50:	2200      	movs	r2, #0
 8012d52:	68b9      	ldr	r1, [r7, #8]
 8012d54:	69b8      	ldr	r0, [r7, #24]
 8012d56:	f7ff fed9 	bl	8012b0c <put_fat>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8012d5e:	7ffb      	ldrb	r3, [r7, #31]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d001      	beq.n	8012d68 <remove_chain+0x88>
 8012d64:	7ffb      	ldrb	r3, [r7, #31]
 8012d66:	e01c      	b.n	8012da2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012d68:	69bb      	ldr	r3, [r7, #24]
 8012d6a:	691a      	ldr	r2, [r3, #16]
 8012d6c:	69bb      	ldr	r3, [r7, #24]
 8012d6e:	695b      	ldr	r3, [r3, #20]
 8012d70:	3b02      	subs	r3, #2
 8012d72:	429a      	cmp	r2, r3
 8012d74:	d20b      	bcs.n	8012d8e <remove_chain+0xae>
			fs->free_clst++;
 8012d76:	69bb      	ldr	r3, [r7, #24]
 8012d78:	691b      	ldr	r3, [r3, #16]
 8012d7a:	1c5a      	adds	r2, r3, #1
 8012d7c:	69bb      	ldr	r3, [r7, #24]
 8012d7e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8012d80:	69bb      	ldr	r3, [r7, #24]
 8012d82:	791b      	ldrb	r3, [r3, #4]
 8012d84:	f043 0301 	orr.w	r3, r3, #1
 8012d88:	b2da      	uxtb	r2, r3
 8012d8a:	69bb      	ldr	r3, [r7, #24]
 8012d8c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8012d8e:	697b      	ldr	r3, [r7, #20]
 8012d90:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8012d92:	69bb      	ldr	r3, [r7, #24]
 8012d94:	695b      	ldr	r3, [r3, #20]
 8012d96:	68ba      	ldr	r2, [r7, #8]
 8012d98:	429a      	cmp	r2, r3
 8012d9a:	d3c6      	bcc.n	8012d2a <remove_chain+0x4a>
 8012d9c:	e000      	b.n	8012da0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8012d9e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8012da0:	2300      	movs	r3, #0
}
 8012da2:	4618      	mov	r0, r3
 8012da4:	3720      	adds	r7, #32
 8012da6:	46bd      	mov	sp, r7
 8012da8:	bd80      	pop	{r7, pc}

08012daa <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012daa:	b580      	push	{r7, lr}
 8012dac:	b088      	sub	sp, #32
 8012dae:	af00      	add	r7, sp, #0
 8012db0:	6078      	str	r0, [r7, #4]
 8012db2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012dba:	683b      	ldr	r3, [r7, #0]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d10d      	bne.n	8012ddc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012dc0:	693b      	ldr	r3, [r7, #16]
 8012dc2:	68db      	ldr	r3, [r3, #12]
 8012dc4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012dc6:	69bb      	ldr	r3, [r7, #24]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d004      	beq.n	8012dd6 <create_chain+0x2c>
 8012dcc:	693b      	ldr	r3, [r7, #16]
 8012dce:	695b      	ldr	r3, [r3, #20]
 8012dd0:	69ba      	ldr	r2, [r7, #24]
 8012dd2:	429a      	cmp	r2, r3
 8012dd4:	d31b      	bcc.n	8012e0e <create_chain+0x64>
 8012dd6:	2301      	movs	r3, #1
 8012dd8:	61bb      	str	r3, [r7, #24]
 8012dda:	e018      	b.n	8012e0e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012ddc:	6839      	ldr	r1, [r7, #0]
 8012dde:	6878      	ldr	r0, [r7, #4]
 8012de0:	f7ff fded 	bl	80129be <get_fat>
 8012de4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	2b01      	cmp	r3, #1
 8012dea:	d801      	bhi.n	8012df0 <create_chain+0x46>
 8012dec:	2301      	movs	r3, #1
 8012dee:	e070      	b.n	8012ed2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012df6:	d101      	bne.n	8012dfc <create_chain+0x52>
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	e06a      	b.n	8012ed2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012dfc:	693b      	ldr	r3, [r7, #16]
 8012dfe:	695b      	ldr	r3, [r3, #20]
 8012e00:	68fa      	ldr	r2, [r7, #12]
 8012e02:	429a      	cmp	r2, r3
 8012e04:	d201      	bcs.n	8012e0a <create_chain+0x60>
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	e063      	b.n	8012ed2 <create_chain+0x128>
		scl = clst;
 8012e0a:	683b      	ldr	r3, [r7, #0]
 8012e0c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012e0e:	69bb      	ldr	r3, [r7, #24]
 8012e10:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012e12:	69fb      	ldr	r3, [r7, #28]
 8012e14:	3301      	adds	r3, #1
 8012e16:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012e18:	693b      	ldr	r3, [r7, #16]
 8012e1a:	695b      	ldr	r3, [r3, #20]
 8012e1c:	69fa      	ldr	r2, [r7, #28]
 8012e1e:	429a      	cmp	r2, r3
 8012e20:	d307      	bcc.n	8012e32 <create_chain+0x88>
				ncl = 2;
 8012e22:	2302      	movs	r3, #2
 8012e24:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012e26:	69fa      	ldr	r2, [r7, #28]
 8012e28:	69bb      	ldr	r3, [r7, #24]
 8012e2a:	429a      	cmp	r2, r3
 8012e2c:	d901      	bls.n	8012e32 <create_chain+0x88>
 8012e2e:	2300      	movs	r3, #0
 8012e30:	e04f      	b.n	8012ed2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012e32:	69f9      	ldr	r1, [r7, #28]
 8012e34:	6878      	ldr	r0, [r7, #4]
 8012e36:	f7ff fdc2 	bl	80129be <get_fat>
 8012e3a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d00e      	beq.n	8012e60 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	2b01      	cmp	r3, #1
 8012e46:	d003      	beq.n	8012e50 <create_chain+0xa6>
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e4e:	d101      	bne.n	8012e54 <create_chain+0xaa>
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	e03e      	b.n	8012ed2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012e54:	69fa      	ldr	r2, [r7, #28]
 8012e56:	69bb      	ldr	r3, [r7, #24]
 8012e58:	429a      	cmp	r2, r3
 8012e5a:	d1da      	bne.n	8012e12 <create_chain+0x68>
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	e038      	b.n	8012ed2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012e60:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012e62:	f04f 32ff 	mov.w	r2, #4294967295
 8012e66:	69f9      	ldr	r1, [r7, #28]
 8012e68:	6938      	ldr	r0, [r7, #16]
 8012e6a:	f7ff fe4f 	bl	8012b0c <put_fat>
 8012e6e:	4603      	mov	r3, r0
 8012e70:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012e72:	7dfb      	ldrb	r3, [r7, #23]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d109      	bne.n	8012e8c <create_chain+0xe2>
 8012e78:	683b      	ldr	r3, [r7, #0]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d006      	beq.n	8012e8c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012e7e:	69fa      	ldr	r2, [r7, #28]
 8012e80:	6839      	ldr	r1, [r7, #0]
 8012e82:	6938      	ldr	r0, [r7, #16]
 8012e84:	f7ff fe42 	bl	8012b0c <put_fat>
 8012e88:	4603      	mov	r3, r0
 8012e8a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012e8c:	7dfb      	ldrb	r3, [r7, #23]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d116      	bne.n	8012ec0 <create_chain+0x116>
		fs->last_clst = ncl;
 8012e92:	693b      	ldr	r3, [r7, #16]
 8012e94:	69fa      	ldr	r2, [r7, #28]
 8012e96:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012e98:	693b      	ldr	r3, [r7, #16]
 8012e9a:	691a      	ldr	r2, [r3, #16]
 8012e9c:	693b      	ldr	r3, [r7, #16]
 8012e9e:	695b      	ldr	r3, [r3, #20]
 8012ea0:	3b02      	subs	r3, #2
 8012ea2:	429a      	cmp	r2, r3
 8012ea4:	d804      	bhi.n	8012eb0 <create_chain+0x106>
 8012ea6:	693b      	ldr	r3, [r7, #16]
 8012ea8:	691b      	ldr	r3, [r3, #16]
 8012eaa:	1e5a      	subs	r2, r3, #1
 8012eac:	693b      	ldr	r3, [r7, #16]
 8012eae:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8012eb0:	693b      	ldr	r3, [r7, #16]
 8012eb2:	791b      	ldrb	r3, [r3, #4]
 8012eb4:	f043 0301 	orr.w	r3, r3, #1
 8012eb8:	b2da      	uxtb	r2, r3
 8012eba:	693b      	ldr	r3, [r7, #16]
 8012ebc:	711a      	strb	r2, [r3, #4]
 8012ebe:	e007      	b.n	8012ed0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012ec0:	7dfb      	ldrb	r3, [r7, #23]
 8012ec2:	2b01      	cmp	r3, #1
 8012ec4:	d102      	bne.n	8012ecc <create_chain+0x122>
 8012ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8012eca:	e000      	b.n	8012ece <create_chain+0x124>
 8012ecc:	2301      	movs	r3, #1
 8012ece:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012ed0:	69fb      	ldr	r3, [r7, #28]
}
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	3720      	adds	r7, #32
 8012ed6:	46bd      	mov	sp, r7
 8012ed8:	bd80      	pop	{r7, pc}

08012eda <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012eda:	b480      	push	{r7}
 8012edc:	b087      	sub	sp, #28
 8012ede:	af00      	add	r7, sp, #0
 8012ee0:	6078      	str	r0, [r7, #4]
 8012ee2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012eee:	3304      	adds	r3, #4
 8012ef0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012ef2:	683b      	ldr	r3, [r7, #0]
 8012ef4:	0a5b      	lsrs	r3, r3, #9
 8012ef6:	68fa      	ldr	r2, [r7, #12]
 8012ef8:	8952      	ldrh	r2, [r2, #10]
 8012efa:	fbb3 f3f2 	udiv	r3, r3, r2
 8012efe:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012f00:	693b      	ldr	r3, [r7, #16]
 8012f02:	1d1a      	adds	r2, r3, #4
 8012f04:	613a      	str	r2, [r7, #16]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012f0a:	68bb      	ldr	r3, [r7, #8]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d101      	bne.n	8012f14 <clmt_clust+0x3a>
 8012f10:	2300      	movs	r3, #0
 8012f12:	e010      	b.n	8012f36 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8012f14:	697a      	ldr	r2, [r7, #20]
 8012f16:	68bb      	ldr	r3, [r7, #8]
 8012f18:	429a      	cmp	r2, r3
 8012f1a:	d307      	bcc.n	8012f2c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8012f1c:	697a      	ldr	r2, [r7, #20]
 8012f1e:	68bb      	ldr	r3, [r7, #8]
 8012f20:	1ad3      	subs	r3, r2, r3
 8012f22:	617b      	str	r3, [r7, #20]
 8012f24:	693b      	ldr	r3, [r7, #16]
 8012f26:	3304      	adds	r3, #4
 8012f28:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012f2a:	e7e9      	b.n	8012f00 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8012f2c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012f2e:	693b      	ldr	r3, [r7, #16]
 8012f30:	681a      	ldr	r2, [r3, #0]
 8012f32:	697b      	ldr	r3, [r7, #20]
 8012f34:	4413      	add	r3, r2
}
 8012f36:	4618      	mov	r0, r3
 8012f38:	371c      	adds	r7, #28
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f40:	4770      	bx	lr

08012f42 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8012f42:	b580      	push	{r7, lr}
 8012f44:	b086      	sub	sp, #24
 8012f46:	af00      	add	r7, sp, #0
 8012f48:	6078      	str	r0, [r7, #4]
 8012f4a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8012f52:	683b      	ldr	r3, [r7, #0]
 8012f54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012f58:	d204      	bcs.n	8012f64 <dir_sdi+0x22>
 8012f5a:	683b      	ldr	r3, [r7, #0]
 8012f5c:	f003 031f 	and.w	r3, r3, #31
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d001      	beq.n	8012f68 <dir_sdi+0x26>
		return FR_INT_ERR;
 8012f64:	2302      	movs	r3, #2
 8012f66:	e063      	b.n	8013030 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	683a      	ldr	r2, [r7, #0]
 8012f6c:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	689b      	ldr	r3, [r3, #8]
 8012f72:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012f74:	697b      	ldr	r3, [r7, #20]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d106      	bne.n	8012f88 <dir_sdi+0x46>
 8012f7a:	693b      	ldr	r3, [r7, #16]
 8012f7c:	781b      	ldrb	r3, [r3, #0]
 8012f7e:	2b02      	cmp	r3, #2
 8012f80:	d902      	bls.n	8012f88 <dir_sdi+0x46>
		clst = fs->dirbase;
 8012f82:	693b      	ldr	r3, [r7, #16]
 8012f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f86:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012f88:	697b      	ldr	r3, [r7, #20]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d10c      	bne.n	8012fa8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8012f8e:	683b      	ldr	r3, [r7, #0]
 8012f90:	095b      	lsrs	r3, r3, #5
 8012f92:	693a      	ldr	r2, [r7, #16]
 8012f94:	8912      	ldrh	r2, [r2, #8]
 8012f96:	4293      	cmp	r3, r2
 8012f98:	d301      	bcc.n	8012f9e <dir_sdi+0x5c>
 8012f9a:	2302      	movs	r3, #2
 8012f9c:	e048      	b.n	8013030 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8012f9e:	693b      	ldr	r3, [r7, #16]
 8012fa0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	619a      	str	r2, [r3, #24]
 8012fa6:	e029      	b.n	8012ffc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012fa8:	693b      	ldr	r3, [r7, #16]
 8012faa:	895b      	ldrh	r3, [r3, #10]
 8012fac:	025b      	lsls	r3, r3, #9
 8012fae:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012fb0:	e019      	b.n	8012fe6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	6979      	ldr	r1, [r7, #20]
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	f7ff fd01 	bl	80129be <get_fat>
 8012fbc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012fbe:	697b      	ldr	r3, [r7, #20]
 8012fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fc4:	d101      	bne.n	8012fca <dir_sdi+0x88>
 8012fc6:	2301      	movs	r3, #1
 8012fc8:	e032      	b.n	8013030 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012fca:	697b      	ldr	r3, [r7, #20]
 8012fcc:	2b01      	cmp	r3, #1
 8012fce:	d904      	bls.n	8012fda <dir_sdi+0x98>
 8012fd0:	693b      	ldr	r3, [r7, #16]
 8012fd2:	695b      	ldr	r3, [r3, #20]
 8012fd4:	697a      	ldr	r2, [r7, #20]
 8012fd6:	429a      	cmp	r2, r3
 8012fd8:	d301      	bcc.n	8012fde <dir_sdi+0x9c>
 8012fda:	2302      	movs	r3, #2
 8012fdc:	e028      	b.n	8013030 <dir_sdi+0xee>
			ofs -= csz;
 8012fde:	683a      	ldr	r2, [r7, #0]
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	1ad3      	subs	r3, r2, r3
 8012fe4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012fe6:	683a      	ldr	r2, [r7, #0]
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	429a      	cmp	r2, r3
 8012fec:	d2e1      	bcs.n	8012fb2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8012fee:	6979      	ldr	r1, [r7, #20]
 8012ff0:	6938      	ldr	r0, [r7, #16]
 8012ff2:	f7ff fcc5 	bl	8012980 <clust2sect>
 8012ff6:	4602      	mov	r2, r0
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	697a      	ldr	r2, [r7, #20]
 8013000:	615a      	str	r2, [r3, #20]
	if (!dp->sect) return FR_INT_ERR;
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	699b      	ldr	r3, [r3, #24]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d101      	bne.n	801300e <dir_sdi+0xcc>
 801300a:	2302      	movs	r3, #2
 801300c:	e010      	b.n	8013030 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	699a      	ldr	r2, [r3, #24]
 8013012:	683b      	ldr	r3, [r7, #0]
 8013014:	0a5b      	lsrs	r3, r3, #9
 8013016:	441a      	add	r2, r3
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801301c:	693b      	ldr	r3, [r7, #16]
 801301e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8013022:	683b      	ldr	r3, [r7, #0]
 8013024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013028:	441a      	add	r2, r3
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	61da      	str	r2, [r3, #28]

	return FR_OK;
 801302e:	2300      	movs	r3, #0
}
 8013030:	4618      	mov	r0, r3
 8013032:	3718      	adds	r7, #24
 8013034:	46bd      	mov	sp, r7
 8013036:	bd80      	pop	{r7, pc}

08013038 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b086      	sub	sp, #24
 801303c:	af00      	add	r7, sp, #0
 801303e:	6078      	str	r0, [r7, #4]
 8013040:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	691b      	ldr	r3, [r3, #16]
 801304c:	3320      	adds	r3, #32
 801304e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	699b      	ldr	r3, [r3, #24]
 8013054:	2b00      	cmp	r3, #0
 8013056:	d003      	beq.n	8013060 <dir_next+0x28>
 8013058:	68bb      	ldr	r3, [r7, #8]
 801305a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801305e:	d301      	bcc.n	8013064 <dir_next+0x2c>
 8013060:	2304      	movs	r3, #4
 8013062:	e0aa      	b.n	80131ba <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013064:	68bb      	ldr	r3, [r7, #8]
 8013066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801306a:	2b00      	cmp	r3, #0
 801306c:	f040 8098 	bne.w	80131a0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	699b      	ldr	r3, [r3, #24]
 8013074:	1c5a      	adds	r2, r3, #1
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	619a      	str	r2, [r3, #24]

		if (!dp->clust) {		/* Static table */
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	695b      	ldr	r3, [r3, #20]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d10b      	bne.n	801309a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013082:	68bb      	ldr	r3, [r7, #8]
 8013084:	095b      	lsrs	r3, r3, #5
 8013086:	68fa      	ldr	r2, [r7, #12]
 8013088:	8912      	ldrh	r2, [r2, #8]
 801308a:	4293      	cmp	r3, r2
 801308c:	f0c0 8088 	bcc.w	80131a0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	2200      	movs	r2, #0
 8013094:	619a      	str	r2, [r3, #24]
 8013096:	2304      	movs	r3, #4
 8013098:	e08f      	b.n	80131ba <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801309a:	68bb      	ldr	r3, [r7, #8]
 801309c:	0a5b      	lsrs	r3, r3, #9
 801309e:	68fa      	ldr	r2, [r7, #12]
 80130a0:	8952      	ldrh	r2, [r2, #10]
 80130a2:	3a01      	subs	r2, #1
 80130a4:	4013      	ands	r3, r2
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d17a      	bne.n	80131a0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80130aa:	687a      	ldr	r2, [r7, #4]
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	695b      	ldr	r3, [r3, #20]
 80130b0:	4619      	mov	r1, r3
 80130b2:	4610      	mov	r0, r2
 80130b4:	f7ff fc83 	bl	80129be <get_fat>
 80130b8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80130ba:	697b      	ldr	r3, [r7, #20]
 80130bc:	2b01      	cmp	r3, #1
 80130be:	d801      	bhi.n	80130c4 <dir_next+0x8c>
 80130c0:	2302      	movs	r3, #2
 80130c2:	e07a      	b.n	80131ba <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80130c4:	697b      	ldr	r3, [r7, #20]
 80130c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130ca:	d101      	bne.n	80130d0 <dir_next+0x98>
 80130cc:	2301      	movs	r3, #1
 80130ce:	e074      	b.n	80131ba <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	695b      	ldr	r3, [r3, #20]
 80130d4:	697a      	ldr	r2, [r7, #20]
 80130d6:	429a      	cmp	r2, r3
 80130d8:	d358      	bcc.n	801318c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80130da:	683b      	ldr	r3, [r7, #0]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d104      	bne.n	80130ea <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	2200      	movs	r2, #0
 80130e4:	619a      	str	r2, [r3, #24]
 80130e6:	2304      	movs	r3, #4
 80130e8:	e067      	b.n	80131ba <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80130ea:	687a      	ldr	r2, [r7, #4]
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	695b      	ldr	r3, [r3, #20]
 80130f0:	4619      	mov	r1, r3
 80130f2:	4610      	mov	r0, r2
 80130f4:	f7ff fe59 	bl	8012daa <create_chain>
 80130f8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80130fa:	697b      	ldr	r3, [r7, #20]
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d101      	bne.n	8013104 <dir_next+0xcc>
 8013100:	2307      	movs	r3, #7
 8013102:	e05a      	b.n	80131ba <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8013104:	697b      	ldr	r3, [r7, #20]
 8013106:	2b01      	cmp	r3, #1
 8013108:	d101      	bne.n	801310e <dir_next+0xd6>
 801310a:	2302      	movs	r3, #2
 801310c:	e055      	b.n	80131ba <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801310e:	697b      	ldr	r3, [r7, #20]
 8013110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013114:	d101      	bne.n	801311a <dir_next+0xe2>
 8013116:	2301      	movs	r3, #1
 8013118:	e04f      	b.n	80131ba <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801311a:	68f8      	ldr	r0, [r7, #12]
 801311c:	f7ff fb51 	bl	80127c2 <sync_window>
 8013120:	4603      	mov	r3, r0
 8013122:	2b00      	cmp	r3, #0
 8013124:	d001      	beq.n	801312a <dir_next+0xf2>
 8013126:	2301      	movs	r3, #1
 8013128:	e047      	b.n	80131ba <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	3330      	adds	r3, #48	@ 0x30
 801312e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013132:	2100      	movs	r1, #0
 8013134:	4618      	mov	r0, r3
 8013136:	f7ff fae7 	bl	8012708 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801313a:	2300      	movs	r3, #0
 801313c:	613b      	str	r3, [r7, #16]
 801313e:	6979      	ldr	r1, [r7, #20]
 8013140:	68f8      	ldr	r0, [r7, #12]
 8013142:	f7ff fc1d 	bl	8012980 <clust2sect>
 8013146:	4602      	mov	r2, r0
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	62da      	str	r2, [r3, #44]	@ 0x2c
 801314c:	e012      	b.n	8013174 <dir_next+0x13c>
						fs->wflag = 1;
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	2201      	movs	r2, #1
 8013152:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013154:	68f8      	ldr	r0, [r7, #12]
 8013156:	f7ff fb34 	bl	80127c2 <sync_window>
 801315a:	4603      	mov	r3, r0
 801315c:	2b00      	cmp	r3, #0
 801315e:	d001      	beq.n	8013164 <dir_next+0x12c>
 8013160:	2301      	movs	r3, #1
 8013162:	e02a      	b.n	80131ba <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013164:	693b      	ldr	r3, [r7, #16]
 8013166:	3301      	adds	r3, #1
 8013168:	613b      	str	r3, [r7, #16]
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801316e:	1c5a      	adds	r2, r3, #1
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	895b      	ldrh	r3, [r3, #10]
 8013178:	461a      	mov	r2, r3
 801317a:	693b      	ldr	r3, [r7, #16]
 801317c:	4293      	cmp	r3, r2
 801317e:	d3e6      	bcc.n	801314e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013184:	693b      	ldr	r3, [r7, #16]
 8013186:	1ad2      	subs	r2, r2, r3
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	697a      	ldr	r2, [r7, #20]
 8013190:	615a      	str	r2, [r3, #20]
				dp->sect = clust2sect(fs, clst);
 8013192:	6979      	ldr	r1, [r7, #20]
 8013194:	68f8      	ldr	r0, [r7, #12]
 8013196:	f7ff fbf3 	bl	8012980 <clust2sect>
 801319a:	4602      	mov	r2, r0
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	68ba      	ldr	r2, [r7, #8]
 80131a4:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80131ac:	68bb      	ldr	r3, [r7, #8]
 80131ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80131b2:	441a      	add	r2, r3
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	61da      	str	r2, [r3, #28]

	return FR_OK;
 80131b8:	2300      	movs	r3, #0
}
 80131ba:	4618      	mov	r0, r3
 80131bc:	3718      	adds	r7, #24
 80131be:	46bd      	mov	sp, r7
 80131c0:	bd80      	pop	{r7, pc}

080131c2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80131c2:	b580      	push	{r7, lr}
 80131c4:	b086      	sub	sp, #24
 80131c6:	af00      	add	r7, sp, #0
 80131c8:	6078      	str	r0, [r7, #4]
 80131ca:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80131d2:	2100      	movs	r1, #0
 80131d4:	6878      	ldr	r0, [r7, #4]
 80131d6:	f7ff feb4 	bl	8012f42 <dir_sdi>
 80131da:	4603      	mov	r3, r0
 80131dc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80131de:	7dfb      	ldrb	r3, [r7, #23]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d12b      	bne.n	801323c <dir_alloc+0x7a>
		n = 0;
 80131e4:	2300      	movs	r3, #0
 80131e6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	699b      	ldr	r3, [r3, #24]
 80131ec:	4619      	mov	r1, r3
 80131ee:	68f8      	ldr	r0, [r7, #12]
 80131f0:	f7ff fb2b 	bl	801284a <move_window>
 80131f4:	4603      	mov	r3, r0
 80131f6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80131f8:	7dfb      	ldrb	r3, [r7, #23]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d11d      	bne.n	801323a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	69db      	ldr	r3, [r3, #28]
 8013202:	781b      	ldrb	r3, [r3, #0]
 8013204:	2be5      	cmp	r3, #229	@ 0xe5
 8013206:	d004      	beq.n	8013212 <dir_alloc+0x50>
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	69db      	ldr	r3, [r3, #28]
 801320c:	781b      	ldrb	r3, [r3, #0]
 801320e:	2b00      	cmp	r3, #0
 8013210:	d107      	bne.n	8013222 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013212:	693b      	ldr	r3, [r7, #16]
 8013214:	3301      	adds	r3, #1
 8013216:	613b      	str	r3, [r7, #16]
 8013218:	693a      	ldr	r2, [r7, #16]
 801321a:	683b      	ldr	r3, [r7, #0]
 801321c:	429a      	cmp	r2, r3
 801321e:	d102      	bne.n	8013226 <dir_alloc+0x64>
 8013220:	e00c      	b.n	801323c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013222:	2300      	movs	r3, #0
 8013224:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8013226:	2101      	movs	r1, #1
 8013228:	6878      	ldr	r0, [r7, #4]
 801322a:	f7ff ff05 	bl	8013038 <dir_next>
 801322e:	4603      	mov	r3, r0
 8013230:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8013232:	7dfb      	ldrb	r3, [r7, #23]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d0d7      	beq.n	80131e8 <dir_alloc+0x26>
 8013238:	e000      	b.n	801323c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801323a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801323c:	7dfb      	ldrb	r3, [r7, #23]
 801323e:	2b04      	cmp	r3, #4
 8013240:	d101      	bne.n	8013246 <dir_alloc+0x84>
 8013242:	2307      	movs	r3, #7
 8013244:	75fb      	strb	r3, [r7, #23]
	return res;
 8013246:	7dfb      	ldrb	r3, [r7, #23]
}
 8013248:	4618      	mov	r0, r3
 801324a:	3718      	adds	r7, #24
 801324c:	46bd      	mov	sp, r7
 801324e:	bd80      	pop	{r7, pc}

08013250 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8013250:	b580      	push	{r7, lr}
 8013252:	b084      	sub	sp, #16
 8013254:	af00      	add	r7, sp, #0
 8013256:	6078      	str	r0, [r7, #4]
 8013258:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801325a:	683b      	ldr	r3, [r7, #0]
 801325c:	331a      	adds	r3, #26
 801325e:	4618      	mov	r0, r3
 8013260:	f7ff f9ae 	bl	80125c0 <ld_word>
 8013264:	4603      	mov	r3, r0
 8013266:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	781b      	ldrb	r3, [r3, #0]
 801326c:	2b03      	cmp	r3, #3
 801326e:	d109      	bne.n	8013284 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013270:	683b      	ldr	r3, [r7, #0]
 8013272:	3314      	adds	r3, #20
 8013274:	4618      	mov	r0, r3
 8013276:	f7ff f9a3 	bl	80125c0 <ld_word>
 801327a:	4603      	mov	r3, r0
 801327c:	041b      	lsls	r3, r3, #16
 801327e:	68fa      	ldr	r2, [r7, #12]
 8013280:	4313      	orrs	r3, r2
 8013282:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8013284:	68fb      	ldr	r3, [r7, #12]
}
 8013286:	4618      	mov	r0, r3
 8013288:	3710      	adds	r7, #16
 801328a:	46bd      	mov	sp, r7
 801328c:	bd80      	pop	{r7, pc}

0801328e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801328e:	b580      	push	{r7, lr}
 8013290:	b084      	sub	sp, #16
 8013292:	af00      	add	r7, sp, #0
 8013294:	60f8      	str	r0, [r7, #12]
 8013296:	60b9      	str	r1, [r7, #8]
 8013298:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801329a:	68bb      	ldr	r3, [r7, #8]
 801329c:	331a      	adds	r3, #26
 801329e:	687a      	ldr	r2, [r7, #4]
 80132a0:	b292      	uxth	r2, r2
 80132a2:	4611      	mov	r1, r2
 80132a4:	4618      	mov	r0, r3
 80132a6:	f7ff f9c7 	bl	8012638 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	781b      	ldrb	r3, [r3, #0]
 80132ae:	2b03      	cmp	r3, #3
 80132b0:	d109      	bne.n	80132c6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80132b2:	68bb      	ldr	r3, [r7, #8]
 80132b4:	f103 0214 	add.w	r2, r3, #20
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	0c1b      	lsrs	r3, r3, #16
 80132bc:	b29b      	uxth	r3, r3
 80132be:	4619      	mov	r1, r3
 80132c0:	4610      	mov	r0, r2
 80132c2:	f7ff f9b9 	bl	8012638 <st_word>
	}
}
 80132c6:	bf00      	nop
 80132c8:	3710      	adds	r7, #16
 80132ca:	46bd      	mov	sp, r7
 80132cc:	bd80      	pop	{r7, pc}

080132ce <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80132ce:	b580      	push	{r7, lr}
 80132d0:	b086      	sub	sp, #24
 80132d2:	af00      	add	r7, sp, #0
 80132d4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80132dc:	2100      	movs	r1, #0
 80132de:	6878      	ldr	r0, [r7, #4]
 80132e0:	f7ff fe2f 	bl	8012f42 <dir_sdi>
 80132e4:	4603      	mov	r3, r0
 80132e6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80132e8:	7dfb      	ldrb	r3, [r7, #23]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d001      	beq.n	80132f2 <dir_find+0x24>
 80132ee:	7dfb      	ldrb	r3, [r7, #23]
 80132f0:	e03e      	b.n	8013370 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	699b      	ldr	r3, [r3, #24]
 80132f6:	4619      	mov	r1, r3
 80132f8:	6938      	ldr	r0, [r7, #16]
 80132fa:	f7ff faa6 	bl	801284a <move_window>
 80132fe:	4603      	mov	r3, r0
 8013300:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013302:	7dfb      	ldrb	r3, [r7, #23]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d12f      	bne.n	8013368 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	69db      	ldr	r3, [r3, #28]
 801330c:	781b      	ldrb	r3, [r3, #0]
 801330e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8013310:	7bfb      	ldrb	r3, [r7, #15]
 8013312:	2b00      	cmp	r3, #0
 8013314:	d102      	bne.n	801331c <dir_find+0x4e>
 8013316:	2304      	movs	r3, #4
 8013318:	75fb      	strb	r3, [r7, #23]
 801331a:	e028      	b.n	801336e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	69db      	ldr	r3, [r3, #28]
 8013320:	330b      	adds	r3, #11
 8013322:	781b      	ldrb	r3, [r3, #0]
 8013324:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013328:	b2da      	uxtb	r2, r3
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	69db      	ldr	r3, [r3, #28]
 8013332:	330b      	adds	r3, #11
 8013334:	781b      	ldrb	r3, [r3, #0]
 8013336:	f003 0308 	and.w	r3, r3, #8
 801333a:	2b00      	cmp	r3, #0
 801333c:	d10a      	bne.n	8013354 <dir_find+0x86>
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	69d8      	ldr	r0, [r3, #28]
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	3320      	adds	r3, #32
 8013346:	220b      	movs	r2, #11
 8013348:	4619      	mov	r1, r3
 801334a:	f7ff f9f8 	bl	801273e <mem_cmp>
 801334e:	4603      	mov	r3, r0
 8013350:	2b00      	cmp	r3, #0
 8013352:	d00b      	beq.n	801336c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8013354:	2100      	movs	r1, #0
 8013356:	6878      	ldr	r0, [r7, #4]
 8013358:	f7ff fe6e 	bl	8013038 <dir_next>
 801335c:	4603      	mov	r3, r0
 801335e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8013360:	7dfb      	ldrb	r3, [r7, #23]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d0c5      	beq.n	80132f2 <dir_find+0x24>
 8013366:	e002      	b.n	801336e <dir_find+0xa0>
		if (res != FR_OK) break;
 8013368:	bf00      	nop
 801336a:	e000      	b.n	801336e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801336c:	bf00      	nop

	return res;
 801336e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013370:	4618      	mov	r0, r3
 8013372:	3718      	adds	r7, #24
 8013374:	46bd      	mov	sp, r7
 8013376:	bd80      	pop	{r7, pc}

08013378 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8013378:	b580      	push	{r7, lr}
 801337a:	b084      	sub	sp, #16
 801337c:	af00      	add	r7, sp, #0
 801337e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8013386:	2101      	movs	r1, #1
 8013388:	6878      	ldr	r0, [r7, #4]
 801338a:	f7ff ff1a 	bl	80131c2 <dir_alloc>
 801338e:	4603      	mov	r3, r0
 8013390:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8013392:	7bfb      	ldrb	r3, [r7, #15]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d11c      	bne.n	80133d2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	699b      	ldr	r3, [r3, #24]
 801339c:	4619      	mov	r1, r3
 801339e:	68b8      	ldr	r0, [r7, #8]
 80133a0:	f7ff fa53 	bl	801284a <move_window>
 80133a4:	4603      	mov	r3, r0
 80133a6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80133a8:	7bfb      	ldrb	r3, [r7, #15]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d111      	bne.n	80133d2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	69db      	ldr	r3, [r3, #28]
 80133b2:	2220      	movs	r2, #32
 80133b4:	2100      	movs	r1, #0
 80133b6:	4618      	mov	r0, r3
 80133b8:	f7ff f9a6 	bl	8012708 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	69d8      	ldr	r0, [r3, #28]
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	3320      	adds	r3, #32
 80133c4:	220b      	movs	r2, #11
 80133c6:	4619      	mov	r1, r3
 80133c8:	f7ff f97d 	bl	80126c6 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80133cc:	68bb      	ldr	r3, [r7, #8]
 80133ce:	2201      	movs	r2, #1
 80133d0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80133d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80133d4:	4618      	mov	r0, r3
 80133d6:	3710      	adds	r7, #16
 80133d8:	46bd      	mov	sp, r7
 80133da:	bd80      	pop	{r7, pc}

080133dc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80133dc:	b580      	push	{r7, lr}
 80133de:	b088      	sub	sp, #32
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	6078      	str	r0, [r7, #4]
 80133e4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80133e6:	683b      	ldr	r3, [r7, #0]
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	60fb      	str	r3, [r7, #12]
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	3320      	adds	r3, #32
 80133f0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80133f2:	220b      	movs	r2, #11
 80133f4:	2120      	movs	r1, #32
 80133f6:	68b8      	ldr	r0, [r7, #8]
 80133f8:	f7ff f986 	bl	8012708 <mem_set>
	si = i = 0; ni = 8;
 80133fc:	2300      	movs	r3, #0
 80133fe:	613b      	str	r3, [r7, #16]
 8013400:	693b      	ldr	r3, [r7, #16]
 8013402:	61fb      	str	r3, [r7, #28]
 8013404:	2308      	movs	r3, #8
 8013406:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8013408:	69fb      	ldr	r3, [r7, #28]
 801340a:	1c5a      	adds	r2, r3, #1
 801340c:	61fa      	str	r2, [r7, #28]
 801340e:	68fa      	ldr	r2, [r7, #12]
 8013410:	4413      	add	r3, r2
 8013412:	781b      	ldrb	r3, [r3, #0]
 8013414:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8013416:	7efb      	ldrb	r3, [r7, #27]
 8013418:	2b20      	cmp	r3, #32
 801341a:	d94e      	bls.n	80134ba <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801341c:	7efb      	ldrb	r3, [r7, #27]
 801341e:	2b2f      	cmp	r3, #47	@ 0x2f
 8013420:	d006      	beq.n	8013430 <create_name+0x54>
 8013422:	7efb      	ldrb	r3, [r7, #27]
 8013424:	2b5c      	cmp	r3, #92	@ 0x5c
 8013426:	d110      	bne.n	801344a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8013428:	e002      	b.n	8013430 <create_name+0x54>
 801342a:	69fb      	ldr	r3, [r7, #28]
 801342c:	3301      	adds	r3, #1
 801342e:	61fb      	str	r3, [r7, #28]
 8013430:	68fa      	ldr	r2, [r7, #12]
 8013432:	69fb      	ldr	r3, [r7, #28]
 8013434:	4413      	add	r3, r2
 8013436:	781b      	ldrb	r3, [r3, #0]
 8013438:	2b2f      	cmp	r3, #47	@ 0x2f
 801343a:	d0f6      	beq.n	801342a <create_name+0x4e>
 801343c:	68fa      	ldr	r2, [r7, #12]
 801343e:	69fb      	ldr	r3, [r7, #28]
 8013440:	4413      	add	r3, r2
 8013442:	781b      	ldrb	r3, [r3, #0]
 8013444:	2b5c      	cmp	r3, #92	@ 0x5c
 8013446:	d0f0      	beq.n	801342a <create_name+0x4e>
			break;
 8013448:	e038      	b.n	80134bc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801344a:	7efb      	ldrb	r3, [r7, #27]
 801344c:	2b2e      	cmp	r3, #46	@ 0x2e
 801344e:	d003      	beq.n	8013458 <create_name+0x7c>
 8013450:	693a      	ldr	r2, [r7, #16]
 8013452:	697b      	ldr	r3, [r7, #20]
 8013454:	429a      	cmp	r2, r3
 8013456:	d30c      	bcc.n	8013472 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8013458:	697b      	ldr	r3, [r7, #20]
 801345a:	2b0b      	cmp	r3, #11
 801345c:	d002      	beq.n	8013464 <create_name+0x88>
 801345e:	7efb      	ldrb	r3, [r7, #27]
 8013460:	2b2e      	cmp	r3, #46	@ 0x2e
 8013462:	d001      	beq.n	8013468 <create_name+0x8c>
 8013464:	2306      	movs	r3, #6
 8013466:	e044      	b.n	80134f2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8013468:	2308      	movs	r3, #8
 801346a:	613b      	str	r3, [r7, #16]
 801346c:	230b      	movs	r3, #11
 801346e:	617b      	str	r3, [r7, #20]
			continue;
 8013470:	e022      	b.n	80134b8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8013472:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013476:	2b00      	cmp	r3, #0
 8013478:	da04      	bge.n	8013484 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801347a:	7efb      	ldrb	r3, [r7, #27]
 801347c:	3b80      	subs	r3, #128	@ 0x80
 801347e:	4a1f      	ldr	r2, [pc, #124]	@ (80134fc <create_name+0x120>)
 8013480:	5cd3      	ldrb	r3, [r2, r3]
 8013482:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8013484:	7efb      	ldrb	r3, [r7, #27]
 8013486:	4619      	mov	r1, r3
 8013488:	481d      	ldr	r0, [pc, #116]	@ (8013500 <create_name+0x124>)
 801348a:	f7ff f97f 	bl	801278c <chk_chr>
 801348e:	4603      	mov	r3, r0
 8013490:	2b00      	cmp	r3, #0
 8013492:	d001      	beq.n	8013498 <create_name+0xbc>
 8013494:	2306      	movs	r3, #6
 8013496:	e02c      	b.n	80134f2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8013498:	7efb      	ldrb	r3, [r7, #27]
 801349a:	2b60      	cmp	r3, #96	@ 0x60
 801349c:	d905      	bls.n	80134aa <create_name+0xce>
 801349e:	7efb      	ldrb	r3, [r7, #27]
 80134a0:	2b7a      	cmp	r3, #122	@ 0x7a
 80134a2:	d802      	bhi.n	80134aa <create_name+0xce>
 80134a4:	7efb      	ldrb	r3, [r7, #27]
 80134a6:	3b20      	subs	r3, #32
 80134a8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80134aa:	693b      	ldr	r3, [r7, #16]
 80134ac:	1c5a      	adds	r2, r3, #1
 80134ae:	613a      	str	r2, [r7, #16]
 80134b0:	68ba      	ldr	r2, [r7, #8]
 80134b2:	4413      	add	r3, r2
 80134b4:	7efa      	ldrb	r2, [r7, #27]
 80134b6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80134b8:	e7a6      	b.n	8013408 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80134ba:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80134bc:	68fa      	ldr	r2, [r7, #12]
 80134be:	69fb      	ldr	r3, [r7, #28]
 80134c0:	441a      	add	r2, r3
 80134c2:	683b      	ldr	r3, [r7, #0]
 80134c4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80134c6:	693b      	ldr	r3, [r7, #16]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d101      	bne.n	80134d0 <create_name+0xf4>
 80134cc:	2306      	movs	r3, #6
 80134ce:	e010      	b.n	80134f2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80134d0:	68bb      	ldr	r3, [r7, #8]
 80134d2:	781b      	ldrb	r3, [r3, #0]
 80134d4:	2be5      	cmp	r3, #229	@ 0xe5
 80134d6:	d102      	bne.n	80134de <create_name+0x102>
 80134d8:	68bb      	ldr	r3, [r7, #8]
 80134da:	2205      	movs	r2, #5
 80134dc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80134de:	7efb      	ldrb	r3, [r7, #27]
 80134e0:	2b20      	cmp	r3, #32
 80134e2:	d801      	bhi.n	80134e8 <create_name+0x10c>
 80134e4:	2204      	movs	r2, #4
 80134e6:	e000      	b.n	80134ea <create_name+0x10e>
 80134e8:	2200      	movs	r2, #0
 80134ea:	68bb      	ldr	r3, [r7, #8]
 80134ec:	330b      	adds	r3, #11
 80134ee:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80134f0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80134f2:	4618      	mov	r0, r3
 80134f4:	3720      	adds	r7, #32
 80134f6:	46bd      	mov	sp, r7
 80134f8:	bd80      	pop	{r7, pc}
 80134fa:	bf00      	nop
 80134fc:	0801cd18 	.word	0x0801cd18
 8013500:	0801cc8c 	.word	0x0801cc8c

08013504 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8013504:	b580      	push	{r7, lr}
 8013506:	b086      	sub	sp, #24
 8013508:	af00      	add	r7, sp, #0
 801350a:	6078      	str	r0, [r7, #4]
 801350c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8013512:	693b      	ldr	r3, [r7, #16]
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8013518:	e002      	b.n	8013520 <follow_path+0x1c>
 801351a:	683b      	ldr	r3, [r7, #0]
 801351c:	3301      	adds	r3, #1
 801351e:	603b      	str	r3, [r7, #0]
 8013520:	683b      	ldr	r3, [r7, #0]
 8013522:	781b      	ldrb	r3, [r3, #0]
 8013524:	2b2f      	cmp	r3, #47	@ 0x2f
 8013526:	d0f8      	beq.n	801351a <follow_path+0x16>
 8013528:	683b      	ldr	r3, [r7, #0]
 801352a:	781b      	ldrb	r3, [r3, #0]
 801352c:	2b5c      	cmp	r3, #92	@ 0x5c
 801352e:	d0f4      	beq.n	801351a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8013530:	693b      	ldr	r3, [r7, #16]
 8013532:	2200      	movs	r2, #0
 8013534:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8013536:	683b      	ldr	r3, [r7, #0]
 8013538:	781b      	ldrb	r3, [r3, #0]
 801353a:	2b1f      	cmp	r3, #31
 801353c:	d80a      	bhi.n	8013554 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	2280      	movs	r2, #128	@ 0x80
 8013542:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		res = dir_sdi(dp, 0);
 8013546:	2100      	movs	r1, #0
 8013548:	6878      	ldr	r0, [r7, #4]
 801354a:	f7ff fcfa 	bl	8012f42 <dir_sdi>
 801354e:	4603      	mov	r3, r0
 8013550:	75fb      	strb	r3, [r7, #23]
 8013552:	e043      	b.n	80135dc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013554:	463b      	mov	r3, r7
 8013556:	4619      	mov	r1, r3
 8013558:	6878      	ldr	r0, [r7, #4]
 801355a:	f7ff ff3f 	bl	80133dc <create_name>
 801355e:	4603      	mov	r3, r0
 8013560:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013562:	7dfb      	ldrb	r3, [r7, #23]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d134      	bne.n	80135d2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8013568:	6878      	ldr	r0, [r7, #4]
 801356a:	f7ff feb0 	bl	80132ce <dir_find>
 801356e:	4603      	mov	r3, r0
 8013570:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8013578:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801357a:	7dfb      	ldrb	r3, [r7, #23]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d00a      	beq.n	8013596 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013580:	7dfb      	ldrb	r3, [r7, #23]
 8013582:	2b04      	cmp	r3, #4
 8013584:	d127      	bne.n	80135d6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8013586:	7afb      	ldrb	r3, [r7, #11]
 8013588:	f003 0304 	and.w	r3, r3, #4
 801358c:	2b00      	cmp	r3, #0
 801358e:	d122      	bne.n	80135d6 <follow_path+0xd2>
 8013590:	2305      	movs	r3, #5
 8013592:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8013594:	e01f      	b.n	80135d6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013596:	7afb      	ldrb	r3, [r7, #11]
 8013598:	f003 0304 	and.w	r3, r3, #4
 801359c:	2b00      	cmp	r3, #0
 801359e:	d11c      	bne.n	80135da <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80135a0:	693b      	ldr	r3, [r7, #16]
 80135a2:	799b      	ldrb	r3, [r3, #6]
 80135a4:	f003 0310 	and.w	r3, r3, #16
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d102      	bne.n	80135b2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80135ac:	2305      	movs	r3, #5
 80135ae:	75fb      	strb	r3, [r7, #23]
 80135b0:	e014      	b.n	80135dc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	691b      	ldr	r3, [r3, #16]
 80135bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80135c0:	4413      	add	r3, r2
 80135c2:	4619      	mov	r1, r3
 80135c4:	68f8      	ldr	r0, [r7, #12]
 80135c6:	f7ff fe43 	bl	8013250 <ld_clust>
 80135ca:	4602      	mov	r2, r0
 80135cc:	693b      	ldr	r3, [r7, #16]
 80135ce:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80135d0:	e7c0      	b.n	8013554 <follow_path+0x50>
			if (res != FR_OK) break;
 80135d2:	bf00      	nop
 80135d4:	e002      	b.n	80135dc <follow_path+0xd8>
				break;
 80135d6:	bf00      	nop
 80135d8:	e000      	b.n	80135dc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80135da:	bf00      	nop
			}
		}
	}

	return res;
 80135dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80135de:	4618      	mov	r0, r3
 80135e0:	3718      	adds	r7, #24
 80135e2:	46bd      	mov	sp, r7
 80135e4:	bd80      	pop	{r7, pc}

080135e6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80135e6:	b480      	push	{r7}
 80135e8:	b087      	sub	sp, #28
 80135ea:	af00      	add	r7, sp, #0
 80135ec:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80135ee:	f04f 33ff 	mov.w	r3, #4294967295
 80135f2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d031      	beq.n	8013660 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	617b      	str	r3, [r7, #20]
 8013602:	e002      	b.n	801360a <get_ldnumber+0x24>
 8013604:	697b      	ldr	r3, [r7, #20]
 8013606:	3301      	adds	r3, #1
 8013608:	617b      	str	r3, [r7, #20]
 801360a:	697b      	ldr	r3, [r7, #20]
 801360c:	781b      	ldrb	r3, [r3, #0]
 801360e:	2b20      	cmp	r3, #32
 8013610:	d903      	bls.n	801361a <get_ldnumber+0x34>
 8013612:	697b      	ldr	r3, [r7, #20]
 8013614:	781b      	ldrb	r3, [r3, #0]
 8013616:	2b3a      	cmp	r3, #58	@ 0x3a
 8013618:	d1f4      	bne.n	8013604 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801361a:	697b      	ldr	r3, [r7, #20]
 801361c:	781b      	ldrb	r3, [r3, #0]
 801361e:	2b3a      	cmp	r3, #58	@ 0x3a
 8013620:	d11c      	bne.n	801365c <get_ldnumber+0x76>
			tp = *path;
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	1c5a      	adds	r2, r3, #1
 801362c:	60fa      	str	r2, [r7, #12]
 801362e:	781b      	ldrb	r3, [r3, #0]
 8013630:	3b30      	subs	r3, #48	@ 0x30
 8013632:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8013634:	68bb      	ldr	r3, [r7, #8]
 8013636:	2b09      	cmp	r3, #9
 8013638:	d80e      	bhi.n	8013658 <get_ldnumber+0x72>
 801363a:	68fa      	ldr	r2, [r7, #12]
 801363c:	697b      	ldr	r3, [r7, #20]
 801363e:	429a      	cmp	r2, r3
 8013640:	d10a      	bne.n	8013658 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8013642:	68bb      	ldr	r3, [r7, #8]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d107      	bne.n	8013658 <get_ldnumber+0x72>
					vol = (int)i;
 8013648:	68bb      	ldr	r3, [r7, #8]
 801364a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801364c:	697b      	ldr	r3, [r7, #20]
 801364e:	3301      	adds	r3, #1
 8013650:	617b      	str	r3, [r7, #20]
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	697a      	ldr	r2, [r7, #20]
 8013656:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013658:	693b      	ldr	r3, [r7, #16]
 801365a:	e002      	b.n	8013662 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801365c:	2300      	movs	r3, #0
 801365e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8013660:	693b      	ldr	r3, [r7, #16]
}
 8013662:	4618      	mov	r0, r3
 8013664:	371c      	adds	r7, #28
 8013666:	46bd      	mov	sp, r7
 8013668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801366c:	4770      	bx	lr
	...

08013670 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8013670:	b580      	push	{r7, lr}
 8013672:	b082      	sub	sp, #8
 8013674:	af00      	add	r7, sp, #0
 8013676:	6078      	str	r0, [r7, #4]
 8013678:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	2200      	movs	r2, #0
 801367e:	70da      	strb	r2, [r3, #3]
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	f04f 32ff 	mov.w	r2, #4294967295
 8013686:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8013688:	6839      	ldr	r1, [r7, #0]
 801368a:	6878      	ldr	r0, [r7, #4]
 801368c:	f7ff f8dd 	bl	801284a <move_window>
 8013690:	4603      	mov	r3, r0
 8013692:	2b00      	cmp	r3, #0
 8013694:	d001      	beq.n	801369a <check_fs+0x2a>
 8013696:	2304      	movs	r3, #4
 8013698:	e038      	b.n	801370c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	3330      	adds	r3, #48	@ 0x30
 801369e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80136a2:	4618      	mov	r0, r3
 80136a4:	f7fe ff8c 	bl	80125c0 <ld_word>
 80136a8:	4603      	mov	r3, r0
 80136aa:	461a      	mov	r2, r3
 80136ac:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80136b0:	429a      	cmp	r2, r3
 80136b2:	d001      	beq.n	80136b8 <check_fs+0x48>
 80136b4:	2303      	movs	r3, #3
 80136b6:	e029      	b.n	801370c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80136be:	2be9      	cmp	r3, #233	@ 0xe9
 80136c0:	d009      	beq.n	80136d6 <check_fs+0x66>
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80136c8:	2beb      	cmp	r3, #235	@ 0xeb
 80136ca:	d11e      	bne.n	801370a <check_fs+0x9a>
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80136d2:	2b90      	cmp	r3, #144	@ 0x90
 80136d4:	d119      	bne.n	801370a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	3330      	adds	r3, #48	@ 0x30
 80136da:	3336      	adds	r3, #54	@ 0x36
 80136dc:	4618      	mov	r0, r3
 80136de:	f7fe ff88 	bl	80125f2 <ld_dword>
 80136e2:	4603      	mov	r3, r0
 80136e4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80136e8:	4a0a      	ldr	r2, [pc, #40]	@ (8013714 <check_fs+0xa4>)
 80136ea:	4293      	cmp	r3, r2
 80136ec:	d101      	bne.n	80136f2 <check_fs+0x82>
 80136ee:	2300      	movs	r3, #0
 80136f0:	e00c      	b.n	801370c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	3330      	adds	r3, #48	@ 0x30
 80136f6:	3352      	adds	r3, #82	@ 0x52
 80136f8:	4618      	mov	r0, r3
 80136fa:	f7fe ff7a 	bl	80125f2 <ld_dword>
 80136fe:	4603      	mov	r3, r0
 8013700:	4a05      	ldr	r2, [pc, #20]	@ (8013718 <check_fs+0xa8>)
 8013702:	4293      	cmp	r3, r2
 8013704:	d101      	bne.n	801370a <check_fs+0x9a>
 8013706:	2300      	movs	r3, #0
 8013708:	e000      	b.n	801370c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801370a:	2302      	movs	r3, #2
}
 801370c:	4618      	mov	r0, r3
 801370e:	3708      	adds	r7, #8
 8013710:	46bd      	mov	sp, r7
 8013712:	bd80      	pop	{r7, pc}
 8013714:	00544146 	.word	0x00544146
 8013718:	33544146 	.word	0x33544146

0801371c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801371c:	b580      	push	{r7, lr}
 801371e:	b096      	sub	sp, #88	@ 0x58
 8013720:	af00      	add	r7, sp, #0
 8013722:	60f8      	str	r0, [r7, #12]
 8013724:	60b9      	str	r1, [r7, #8]
 8013726:	4613      	mov	r3, r2
 8013728:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801372a:	68bb      	ldr	r3, [r7, #8]
 801372c:	2200      	movs	r2, #0
 801372e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013730:	68f8      	ldr	r0, [r7, #12]
 8013732:	f7ff ff58 	bl	80135e6 <get_ldnumber>
 8013736:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013738:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801373a:	2b00      	cmp	r3, #0
 801373c:	da01      	bge.n	8013742 <find_volume+0x26>
 801373e:	230b      	movs	r3, #11
 8013740:	e22a      	b.n	8013b98 <find_volume+0x47c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8013742:	4aa1      	ldr	r2, [pc, #644]	@ (80139c8 <find_volume+0x2ac>)
 8013744:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801374a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801374c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801374e:	2b00      	cmp	r3, #0
 8013750:	d101      	bne.n	8013756 <find_volume+0x3a>
 8013752:	230c      	movs	r3, #12
 8013754:	e220      	b.n	8013b98 <find_volume+0x47c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8013756:	68bb      	ldr	r3, [r7, #8]
 8013758:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801375a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801375c:	79fb      	ldrb	r3, [r7, #7]
 801375e:	f023 0301 	bic.w	r3, r3, #1
 8013762:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013766:	781b      	ldrb	r3, [r3, #0]
 8013768:	2b00      	cmp	r3, #0
 801376a:	d01a      	beq.n	80137a2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801376c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801376e:	785b      	ldrb	r3, [r3, #1]
 8013770:	4618      	mov	r0, r3
 8013772:	f7fe fe87 	bl	8012484 <disk_status>
 8013776:	4603      	mov	r3, r0
 8013778:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801377c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013780:	f003 0301 	and.w	r3, r3, #1
 8013784:	2b00      	cmp	r3, #0
 8013786:	d10c      	bne.n	80137a2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013788:	79fb      	ldrb	r3, [r7, #7]
 801378a:	2b00      	cmp	r3, #0
 801378c:	d007      	beq.n	801379e <find_volume+0x82>
 801378e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013792:	f003 0304 	and.w	r3, r3, #4
 8013796:	2b00      	cmp	r3, #0
 8013798:	d001      	beq.n	801379e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801379a:	230a      	movs	r3, #10
 801379c:	e1fc      	b.n	8013b98 <find_volume+0x47c>
			}
			return FR_OK;				/* The file system object is valid */
 801379e:	2300      	movs	r3, #0
 80137a0:	e1fa      	b.n	8013b98 <find_volume+0x47c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80137a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137a4:	2200      	movs	r2, #0
 80137a6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80137a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80137aa:	b2da      	uxtb	r2, r3
 80137ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137ae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80137b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137b2:	785b      	ldrb	r3, [r3, #1]
 80137b4:	4618      	mov	r0, r3
 80137b6:	f7fe fe7f 	bl	80124b8 <disk_initialize>
 80137ba:	4603      	mov	r3, r0
 80137bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80137c0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80137c4:	f003 0301 	and.w	r3, r3, #1
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d001      	beq.n	80137d0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80137cc:	2303      	movs	r3, #3
 80137ce:	e1e3      	b.n	8013b98 <find_volume+0x47c>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80137d0:	79fb      	ldrb	r3, [r7, #7]
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d007      	beq.n	80137e6 <find_volume+0xca>
 80137d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80137da:	f003 0304 	and.w	r3, r3, #4
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d001      	beq.n	80137e6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80137e2:	230a      	movs	r3, #10
 80137e4:	e1d8      	b.n	8013b98 <find_volume+0x47c>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80137e6:	2300      	movs	r3, #0
 80137e8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80137ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80137ec:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80137ee:	f7ff ff3f 	bl	8013670 <check_fs>
 80137f2:	4603      	mov	r3, r0
 80137f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80137f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80137fc:	2b02      	cmp	r3, #2
 80137fe:	d149      	bne.n	8013894 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013800:	2300      	movs	r3, #0
 8013802:	643b      	str	r3, [r7, #64]	@ 0x40
 8013804:	e01e      	b.n	8013844 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8013806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013808:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801380c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801380e:	011b      	lsls	r3, r3, #4
 8013810:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8013814:	4413      	add	r3, r2
 8013816:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801381a:	3304      	adds	r3, #4
 801381c:	781b      	ldrb	r3, [r3, #0]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d006      	beq.n	8013830 <find_volume+0x114>
 8013822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013824:	3308      	adds	r3, #8
 8013826:	4618      	mov	r0, r3
 8013828:	f7fe fee3 	bl	80125f2 <ld_dword>
 801382c:	4602      	mov	r2, r0
 801382e:	e000      	b.n	8013832 <find_volume+0x116>
 8013830:	2200      	movs	r2, #0
 8013832:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013834:	009b      	lsls	r3, r3, #2
 8013836:	3358      	adds	r3, #88	@ 0x58
 8013838:	443b      	add	r3, r7
 801383a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801383e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013840:	3301      	adds	r3, #1
 8013842:	643b      	str	r3, [r7, #64]	@ 0x40
 8013844:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013846:	2b03      	cmp	r3, #3
 8013848:	d9dd      	bls.n	8013806 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801384a:	2300      	movs	r3, #0
 801384c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801384e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013850:	2b00      	cmp	r3, #0
 8013852:	d002      	beq.n	801385a <find_volume+0x13e>
 8013854:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013856:	3b01      	subs	r3, #1
 8013858:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801385a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801385c:	009b      	lsls	r3, r3, #2
 801385e:	3358      	adds	r3, #88	@ 0x58
 8013860:	443b      	add	r3, r7
 8013862:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8013866:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013868:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801386a:	2b00      	cmp	r3, #0
 801386c:	d005      	beq.n	801387a <find_volume+0x15e>
 801386e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013870:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013872:	f7ff fefd 	bl	8013670 <check_fs>
 8013876:	4603      	mov	r3, r0
 8013878:	e000      	b.n	801387c <find_volume+0x160>
 801387a:	2303      	movs	r3, #3
 801387c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013880:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013884:	2b01      	cmp	r3, #1
 8013886:	d905      	bls.n	8013894 <find_volume+0x178>
 8013888:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801388a:	3301      	adds	r3, #1
 801388c:	643b      	str	r3, [r7, #64]	@ 0x40
 801388e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013890:	2b03      	cmp	r3, #3
 8013892:	d9e2      	bls.n	801385a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8013894:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013898:	2b04      	cmp	r3, #4
 801389a:	d101      	bne.n	80138a0 <find_volume+0x184>
 801389c:	2301      	movs	r3, #1
 801389e:	e17b      	b.n	8013b98 <find_volume+0x47c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80138a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80138a4:	2b01      	cmp	r3, #1
 80138a6:	d901      	bls.n	80138ac <find_volume+0x190>
 80138a8:	230d      	movs	r3, #13
 80138aa:	e175      	b.n	8013b98 <find_volume+0x47c>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80138ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138ae:	3330      	adds	r3, #48	@ 0x30
 80138b0:	330b      	adds	r3, #11
 80138b2:	4618      	mov	r0, r3
 80138b4:	f7fe fe84 	bl	80125c0 <ld_word>
 80138b8:	4603      	mov	r3, r0
 80138ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80138be:	d001      	beq.n	80138c4 <find_volume+0x1a8>
 80138c0:	230d      	movs	r3, #13
 80138c2:	e169      	b.n	8013b98 <find_volume+0x47c>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80138c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138c6:	3330      	adds	r3, #48	@ 0x30
 80138c8:	3316      	adds	r3, #22
 80138ca:	4618      	mov	r0, r3
 80138cc:	f7fe fe78 	bl	80125c0 <ld_word>
 80138d0:	4603      	mov	r3, r0
 80138d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80138d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d106      	bne.n	80138e8 <find_volume+0x1cc>
 80138da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138dc:	3330      	adds	r3, #48	@ 0x30
 80138de:	3324      	adds	r3, #36	@ 0x24
 80138e0:	4618      	mov	r0, r3
 80138e2:	f7fe fe86 	bl	80125f2 <ld_dword>
 80138e6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80138e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80138ec:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80138ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138f0:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80138f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138f6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80138f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138fa:	789b      	ldrb	r3, [r3, #2]
 80138fc:	2b01      	cmp	r3, #1
 80138fe:	d005      	beq.n	801390c <find_volume+0x1f0>
 8013900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013902:	789b      	ldrb	r3, [r3, #2]
 8013904:	2b02      	cmp	r3, #2
 8013906:	d001      	beq.n	801390c <find_volume+0x1f0>
 8013908:	230d      	movs	r3, #13
 801390a:	e145      	b.n	8013b98 <find_volume+0x47c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801390c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801390e:	789b      	ldrb	r3, [r3, #2]
 8013910:	461a      	mov	r2, r3
 8013912:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013914:	fb02 f303 	mul.w	r3, r2, r3
 8013918:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801391a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801391c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013920:	461a      	mov	r2, r3
 8013922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013924:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013928:	895b      	ldrh	r3, [r3, #10]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d008      	beq.n	8013940 <find_volume+0x224>
 801392e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013930:	895b      	ldrh	r3, [r3, #10]
 8013932:	461a      	mov	r2, r3
 8013934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013936:	895b      	ldrh	r3, [r3, #10]
 8013938:	3b01      	subs	r3, #1
 801393a:	4013      	ands	r3, r2
 801393c:	2b00      	cmp	r3, #0
 801393e:	d001      	beq.n	8013944 <find_volume+0x228>
 8013940:	230d      	movs	r3, #13
 8013942:	e129      	b.n	8013b98 <find_volume+0x47c>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013946:	3330      	adds	r3, #48	@ 0x30
 8013948:	3311      	adds	r3, #17
 801394a:	4618      	mov	r0, r3
 801394c:	f7fe fe38 	bl	80125c0 <ld_word>
 8013950:	4603      	mov	r3, r0
 8013952:	461a      	mov	r2, r3
 8013954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013956:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801395a:	891b      	ldrh	r3, [r3, #8]
 801395c:	f003 030f 	and.w	r3, r3, #15
 8013960:	b29b      	uxth	r3, r3
 8013962:	2b00      	cmp	r3, #0
 8013964:	d001      	beq.n	801396a <find_volume+0x24e>
 8013966:	230d      	movs	r3, #13
 8013968:	e116      	b.n	8013b98 <find_volume+0x47c>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801396a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801396c:	3330      	adds	r3, #48	@ 0x30
 801396e:	3313      	adds	r3, #19
 8013970:	4618      	mov	r0, r3
 8013972:	f7fe fe25 	bl	80125c0 <ld_word>
 8013976:	4603      	mov	r3, r0
 8013978:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801397a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801397c:	2b00      	cmp	r3, #0
 801397e:	d106      	bne.n	801398e <find_volume+0x272>
 8013980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013982:	3330      	adds	r3, #48	@ 0x30
 8013984:	3320      	adds	r3, #32
 8013986:	4618      	mov	r0, r3
 8013988:	f7fe fe33 	bl	80125f2 <ld_dword>
 801398c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801398e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013990:	3330      	adds	r3, #48	@ 0x30
 8013992:	330e      	adds	r3, #14
 8013994:	4618      	mov	r0, r3
 8013996:	f7fe fe13 	bl	80125c0 <ld_word>
 801399a:	4603      	mov	r3, r0
 801399c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801399e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d101      	bne.n	80139a8 <find_volume+0x28c>
 80139a4:	230d      	movs	r3, #13
 80139a6:	e0f7      	b.n	8013b98 <find_volume+0x47c>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80139a8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80139aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80139ac:	4413      	add	r3, r2
 80139ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80139b0:	8912      	ldrh	r2, [r2, #8]
 80139b2:	0912      	lsrs	r2, r2, #4
 80139b4:	b292      	uxth	r2, r2
 80139b6:	4413      	add	r3, r2
 80139b8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80139ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80139bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139be:	429a      	cmp	r2, r3
 80139c0:	d204      	bcs.n	80139cc <find_volume+0x2b0>
 80139c2:	230d      	movs	r3, #13
 80139c4:	e0e8      	b.n	8013b98 <find_volume+0x47c>
 80139c6:	bf00      	nop
 80139c8:	20002b24 	.word	0x20002b24
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80139cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80139ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139d0:	1ad3      	subs	r3, r2, r3
 80139d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80139d4:	8952      	ldrh	r2, [r2, #10]
 80139d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80139da:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80139dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d101      	bne.n	80139e6 <find_volume+0x2ca>
 80139e2:	230d      	movs	r3, #13
 80139e4:	e0d8      	b.n	8013b98 <find_volume+0x47c>
		fmt = FS_FAT32;
 80139e6:	2303      	movs	r3, #3
 80139e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80139ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139ee:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80139f2:	4293      	cmp	r3, r2
 80139f4:	d802      	bhi.n	80139fc <find_volume+0x2e0>
 80139f6:	2302      	movs	r3, #2
 80139f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80139fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139fe:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8013a02:	4293      	cmp	r3, r2
 8013a04:	d802      	bhi.n	8013a0c <find_volume+0x2f0>
 8013a06:	2301      	movs	r3, #1
 8013a08:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a0e:	1c9a      	adds	r2, r3, #2
 8013a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a12:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8013a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a16:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013a18:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013a1a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013a1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013a1e:	441a      	add	r2, r3
 8013a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a22:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8013a24:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a28:	441a      	add	r2, r3
 8013a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a2c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8013a2e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013a32:	2b03      	cmp	r3, #3
 8013a34:	d11e      	bne.n	8013a74 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a38:	3330      	adds	r3, #48	@ 0x30
 8013a3a:	332a      	adds	r3, #42	@ 0x2a
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	f7fe fdbf 	bl	80125c0 <ld_word>
 8013a42:	4603      	mov	r3, r0
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d001      	beq.n	8013a4c <find_volume+0x330>
 8013a48:	230d      	movs	r3, #13
 8013a4a:	e0a5      	b.n	8013b98 <find_volume+0x47c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a4e:	891b      	ldrh	r3, [r3, #8]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d001      	beq.n	8013a58 <find_volume+0x33c>
 8013a54:	230d      	movs	r3, #13
 8013a56:	e09f      	b.n	8013b98 <find_volume+0x47c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a5a:	3330      	adds	r3, #48	@ 0x30
 8013a5c:	332c      	adds	r3, #44	@ 0x2c
 8013a5e:	4618      	mov	r0, r3
 8013a60:	f7fe fdc7 	bl	80125f2 <ld_dword>
 8013a64:	4602      	mov	r2, r0
 8013a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a68:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a6c:	695b      	ldr	r3, [r3, #20]
 8013a6e:	009b      	lsls	r3, r3, #2
 8013a70:	647b      	str	r3, [r7, #68]	@ 0x44
 8013a72:	e01f      	b.n	8013ab4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a76:	891b      	ldrh	r3, [r3, #8]
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d101      	bne.n	8013a80 <find_volume+0x364>
 8013a7c:	230d      	movs	r3, #13
 8013a7e:	e08b      	b.n	8013b98 <find_volume+0x47c>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a82:	6a1a      	ldr	r2, [r3, #32]
 8013a84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013a86:	441a      	add	r2, r3
 8013a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a8a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013a8c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013a90:	2b02      	cmp	r3, #2
 8013a92:	d103      	bne.n	8013a9c <find_volume+0x380>
 8013a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a96:	695b      	ldr	r3, [r3, #20]
 8013a98:	005b      	lsls	r3, r3, #1
 8013a9a:	e00a      	b.n	8013ab2 <find_volume+0x396>
 8013a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a9e:	695a      	ldr	r2, [r3, #20]
 8013aa0:	4613      	mov	r3, r2
 8013aa2:	005b      	lsls	r3, r3, #1
 8013aa4:	4413      	add	r3, r2
 8013aa6:	085a      	lsrs	r2, r3, #1
 8013aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013aaa:	695b      	ldr	r3, [r3, #20]
 8013aac:	f003 0301 	and.w	r3, r3, #1
 8013ab0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013ab2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ab6:	699a      	ldr	r2, [r3, #24]
 8013ab8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013aba:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8013abe:	0a5b      	lsrs	r3, r3, #9
 8013ac0:	429a      	cmp	r2, r3
 8013ac2:	d201      	bcs.n	8013ac8 <find_volume+0x3ac>
 8013ac4:	230d      	movs	r3, #13
 8013ac6:	e067      	b.n	8013b98 <find_volume+0x47c>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013aca:	f04f 32ff 	mov.w	r2, #4294967295
 8013ace:	611a      	str	r2, [r3, #16]
 8013ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ad2:	691a      	ldr	r2, [r3, #16]
 8013ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ad6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8013ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ada:	2280      	movs	r2, #128	@ 0x80
 8013adc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013ade:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013ae2:	2b03      	cmp	r3, #3
 8013ae4:	d149      	bne.n	8013b7a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ae8:	3330      	adds	r3, #48	@ 0x30
 8013aea:	3330      	adds	r3, #48	@ 0x30
 8013aec:	4618      	mov	r0, r3
 8013aee:	f7fe fd67 	bl	80125c0 <ld_word>
 8013af2:	4603      	mov	r3, r0
 8013af4:	2b01      	cmp	r3, #1
 8013af6:	d140      	bne.n	8013b7a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013af8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013afa:	3301      	adds	r3, #1
 8013afc:	4619      	mov	r1, r3
 8013afe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013b00:	f7fe fea3 	bl	801284a <move_window>
 8013b04:	4603      	mov	r3, r0
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d137      	bne.n	8013b7a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8013b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b0c:	2200      	movs	r2, #0
 8013b0e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b12:	3330      	adds	r3, #48	@ 0x30
 8013b14:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8013b18:	4618      	mov	r0, r3
 8013b1a:	f7fe fd51 	bl	80125c0 <ld_word>
 8013b1e:	4603      	mov	r3, r0
 8013b20:	461a      	mov	r2, r3
 8013b22:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8013b26:	429a      	cmp	r2, r3
 8013b28:	d127      	bne.n	8013b7a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b2c:	3330      	adds	r3, #48	@ 0x30
 8013b2e:	4618      	mov	r0, r3
 8013b30:	f7fe fd5f 	bl	80125f2 <ld_dword>
 8013b34:	4603      	mov	r3, r0
 8013b36:	4a1a      	ldr	r2, [pc, #104]	@ (8013ba0 <find_volume+0x484>)
 8013b38:	4293      	cmp	r3, r2
 8013b3a:	d11e      	bne.n	8013b7a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b3e:	3330      	adds	r3, #48	@ 0x30
 8013b40:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8013b44:	4618      	mov	r0, r3
 8013b46:	f7fe fd54 	bl	80125f2 <ld_dword>
 8013b4a:	4603      	mov	r3, r0
 8013b4c:	4a15      	ldr	r2, [pc, #84]	@ (8013ba4 <find_volume+0x488>)
 8013b4e:	4293      	cmp	r3, r2
 8013b50:	d113      	bne.n	8013b7a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b54:	3330      	adds	r3, #48	@ 0x30
 8013b56:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	f7fe fd49 	bl	80125f2 <ld_dword>
 8013b60:	4602      	mov	r2, r0
 8013b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b64:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b68:	3330      	adds	r3, #48	@ 0x30
 8013b6a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8013b6e:	4618      	mov	r0, r3
 8013b70:	f7fe fd3f 	bl	80125f2 <ld_dword>
 8013b74:	4602      	mov	r2, r0
 8013b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b78:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b7c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8013b80:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013b82:	4b09      	ldr	r3, [pc, #36]	@ (8013ba8 <find_volume+0x48c>)
 8013b84:	881b      	ldrh	r3, [r3, #0]
 8013b86:	3301      	adds	r3, #1
 8013b88:	b29a      	uxth	r2, r3
 8013b8a:	4b07      	ldr	r3, [pc, #28]	@ (8013ba8 <find_volume+0x48c>)
 8013b8c:	801a      	strh	r2, [r3, #0]
 8013b8e:	4b06      	ldr	r3, [pc, #24]	@ (8013ba8 <find_volume+0x48c>)
 8013b90:	881a      	ldrh	r2, [r3, #0]
 8013b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b94:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 8013b96:	2300      	movs	r3, #0
}
 8013b98:	4618      	mov	r0, r3
 8013b9a:	3758      	adds	r7, #88	@ 0x58
 8013b9c:	46bd      	mov	sp, r7
 8013b9e:	bd80      	pop	{r7, pc}
 8013ba0:	41615252 	.word	0x41615252
 8013ba4:	61417272 	.word	0x61417272
 8013ba8:	20002b28 	.word	0x20002b28

08013bac <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013bac:	b580      	push	{r7, lr}
 8013bae:	b084      	sub	sp, #16
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	6078      	str	r0, [r7, #4]
 8013bb4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013bb6:	2309      	movs	r3, #9
 8013bb8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d01c      	beq.n	8013bfa <validate+0x4e>
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d018      	beq.n	8013bfa <validate+0x4e>
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	781b      	ldrb	r3, [r3, #0]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d013      	beq.n	8013bfa <validate+0x4e>
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	889a      	ldrh	r2, [r3, #4]
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	88db      	ldrh	r3, [r3, #6]
 8013bdc:	429a      	cmp	r2, r3
 8013bde:	d10c      	bne.n	8013bfa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	785b      	ldrb	r3, [r3, #1]
 8013be6:	4618      	mov	r0, r3
 8013be8:	f7fe fc4c 	bl	8012484 <disk_status>
 8013bec:	4603      	mov	r3, r0
 8013bee:	f003 0301 	and.w	r3, r3, #1
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d101      	bne.n	8013bfa <validate+0x4e>
			res = FR_OK;
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013bfa:	7bfb      	ldrb	r3, [r7, #15]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d102      	bne.n	8013c06 <validate+0x5a>
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	e000      	b.n	8013c08 <validate+0x5c>
 8013c06:	2300      	movs	r3, #0
 8013c08:	683a      	ldr	r2, [r7, #0]
 8013c0a:	6013      	str	r3, [r2, #0]
	return res;
 8013c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c0e:	4618      	mov	r0, r3
 8013c10:	3710      	adds	r7, #16
 8013c12:	46bd      	mov	sp, r7
 8013c14:	bd80      	pop	{r7, pc}
	...

08013c18 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013c18:	b580      	push	{r7, lr}
 8013c1a:	b088      	sub	sp, #32
 8013c1c:	af00      	add	r7, sp, #0
 8013c1e:	60f8      	str	r0, [r7, #12]
 8013c20:	60b9      	str	r1, [r7, #8]
 8013c22:	4613      	mov	r3, r2
 8013c24:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013c26:	68bb      	ldr	r3, [r7, #8]
 8013c28:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013c2a:	f107 0310 	add.w	r3, r7, #16
 8013c2e:	4618      	mov	r0, r3
 8013c30:	f7ff fcd9 	bl	80135e6 <get_ldnumber>
 8013c34:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013c36:	69fb      	ldr	r3, [r7, #28]
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	da01      	bge.n	8013c40 <f_mount+0x28>
 8013c3c:	230b      	movs	r3, #11
 8013c3e:	e028      	b.n	8013c92 <f_mount+0x7a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013c40:	4a16      	ldr	r2, [pc, #88]	@ (8013c9c <f_mount+0x84>)
 8013c42:	69fb      	ldr	r3, [r7, #28]
 8013c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013c48:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013c4a:	69bb      	ldr	r3, [r7, #24]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d002      	beq.n	8013c56 <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013c50:	69bb      	ldr	r3, [r7, #24]
 8013c52:	2200      	movs	r2, #0
 8013c54:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d002      	beq.n	8013c62 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	2200      	movs	r2, #0
 8013c60:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013c62:	68fa      	ldr	r2, [r7, #12]
 8013c64:	490d      	ldr	r1, [pc, #52]	@ (8013c9c <f_mount+0x84>)
 8013c66:	69fb      	ldr	r3, [r7, #28]
 8013c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d002      	beq.n	8013c78 <f_mount+0x60>
 8013c72:	79fb      	ldrb	r3, [r7, #7]
 8013c74:	2b01      	cmp	r3, #1
 8013c76:	d001      	beq.n	8013c7c <f_mount+0x64>
 8013c78:	2300      	movs	r3, #0
 8013c7a:	e00a      	b.n	8013c92 <f_mount+0x7a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013c7c:	f107 010c 	add.w	r1, r7, #12
 8013c80:	f107 0308 	add.w	r3, r7, #8
 8013c84:	2200      	movs	r2, #0
 8013c86:	4618      	mov	r0, r3
 8013c88:	f7ff fd48 	bl	801371c <find_volume>
 8013c8c:	4603      	mov	r3, r0
 8013c8e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c92:	4618      	mov	r0, r3
 8013c94:	3720      	adds	r7, #32
 8013c96:	46bd      	mov	sp, r7
 8013c98:	bd80      	pop	{r7, pc}
 8013c9a:	bf00      	nop
 8013c9c:	20002b24 	.word	0x20002b24

08013ca0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	b098      	sub	sp, #96	@ 0x60
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	60f8      	str	r0, [r7, #12]
 8013ca8:	60b9      	str	r1, [r7, #8]
 8013caa:	4613      	mov	r3, r2
 8013cac:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d101      	bne.n	8013cb8 <f_open+0x18>
 8013cb4:	2309      	movs	r3, #9
 8013cb6:	e17a      	b.n	8013fae <f_open+0x30e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013cb8:	79fb      	ldrb	r3, [r7, #7]
 8013cba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013cbe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013cc0:	79fa      	ldrb	r2, [r7, #7]
 8013cc2:	f107 0114 	add.w	r1, r7, #20
 8013cc6:	f107 0308 	add.w	r3, r7, #8
 8013cca:	4618      	mov	r0, r3
 8013ccc:	f7ff fd26 	bl	801371c <find_volume>
 8013cd0:	4603      	mov	r3, r0
 8013cd2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8013cd6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	f040 815e 	bne.w	8013f9c <f_open+0x2fc>
		dj.obj.fs = fs;
 8013ce0:	697b      	ldr	r3, [r7, #20]
 8013ce2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013ce4:	68ba      	ldr	r2, [r7, #8]
 8013ce6:	f107 0318 	add.w	r3, r7, #24
 8013cea:	4611      	mov	r1, r2
 8013cec:	4618      	mov	r0, r3
 8013cee:	f7ff fc09 	bl	8013504 <follow_path>
 8013cf2:	4603      	mov	r3, r0
 8013cf4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013cf8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d107      	bne.n	8013d10 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013d00:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013d04:	b25b      	sxtb	r3, r3
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	da02      	bge.n	8013d10 <f_open+0x70>
				res = FR_INVALID_NAME;
 8013d0a:	2306      	movs	r3, #6
 8013d0c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013d10:	79fb      	ldrb	r3, [r7, #7]
 8013d12:	f003 031c 	and.w	r3, r3, #28
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d078      	beq.n	8013e0c <f_open+0x16c>
			if (res != FR_OK) {					/* No file, create new */
 8013d1a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d010      	beq.n	8013d44 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013d22:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013d26:	2b04      	cmp	r3, #4
 8013d28:	d107      	bne.n	8013d3a <f_open+0x9a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8013d2a:	f107 0318 	add.w	r3, r7, #24
 8013d2e:	4618      	mov	r0, r3
 8013d30:	f7ff fb22 	bl	8013378 <dir_register>
 8013d34:	4603      	mov	r3, r0
 8013d36:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013d3a:	79fb      	ldrb	r3, [r7, #7]
 8013d3c:	f043 0308 	orr.w	r3, r3, #8
 8013d40:	71fb      	strb	r3, [r7, #7]
 8013d42:	e010      	b.n	8013d66 <f_open+0xc6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013d44:	7fbb      	ldrb	r3, [r7, #30]
 8013d46:	f003 0311 	and.w	r3, r3, #17
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d003      	beq.n	8013d56 <f_open+0xb6>
					res = FR_DENIED;
 8013d4e:	2307      	movs	r3, #7
 8013d50:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8013d54:	e007      	b.n	8013d66 <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013d56:	79fb      	ldrb	r3, [r7, #7]
 8013d58:	f003 0304 	and.w	r3, r3, #4
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d002      	beq.n	8013d66 <f_open+0xc6>
 8013d60:	2308      	movs	r3, #8
 8013d62:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013d66:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d168      	bne.n	8013e40 <f_open+0x1a0>
 8013d6e:	79fb      	ldrb	r3, [r7, #7]
 8013d70:	f003 0308 	and.w	r3, r3, #8
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d063      	beq.n	8013e40 <f_open+0x1a0>
				dw = GET_FATTIME();
 8013d78:	f7fd ff9e 	bl	8011cb8 <get_fattime>
 8013d7c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013d80:	330e      	adds	r3, #14
 8013d82:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013d84:	4618      	mov	r0, r3
 8013d86:	f7fe fc72 	bl	801266e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013d8c:	3316      	adds	r3, #22
 8013d8e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013d90:	4618      	mov	r0, r3
 8013d92:	f7fe fc6c 	bl	801266e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013d98:	330b      	adds	r3, #11
 8013d9a:	2220      	movs	r2, #32
 8013d9c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013d9e:	697b      	ldr	r3, [r7, #20]
 8013da0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013da2:	4611      	mov	r1, r2
 8013da4:	4618      	mov	r0, r3
 8013da6:	f7ff fa53 	bl	8013250 <ld_clust>
 8013daa:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013dac:	697b      	ldr	r3, [r7, #20]
 8013dae:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013db0:	2200      	movs	r2, #0
 8013db2:	4618      	mov	r0, r3
 8013db4:	f7ff fa6b 	bl	801328e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013dba:	331c      	adds	r3, #28
 8013dbc:	2100      	movs	r1, #0
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	f7fe fc55 	bl	801266e <st_dword>
					fs->wflag = 1;
 8013dc4:	697b      	ldr	r3, [r7, #20]
 8013dc6:	2201      	movs	r2, #1
 8013dc8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013dca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d037      	beq.n	8013e40 <f_open+0x1a0>
						dw = fs->winsect;
 8013dd0:	697b      	ldr	r3, [r7, #20]
 8013dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013dd4:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8013dd6:	f107 0318 	add.w	r3, r7, #24
 8013dda:	2200      	movs	r2, #0
 8013ddc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8013dde:	4618      	mov	r0, r3
 8013de0:	f7fe ff7e 	bl	8012ce0 <remove_chain>
 8013de4:	4603      	mov	r3, r0
 8013de6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8013dea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d126      	bne.n	8013e40 <f_open+0x1a0>
							res = move_window(fs, dw);
 8013df2:	697b      	ldr	r3, [r7, #20]
 8013df4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013df6:	4618      	mov	r0, r3
 8013df8:	f7fe fd27 	bl	801284a <move_window>
 8013dfc:	4603      	mov	r3, r0
 8013dfe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013e02:	697b      	ldr	r3, [r7, #20]
 8013e04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013e06:	3a01      	subs	r2, #1
 8013e08:	60da      	str	r2, [r3, #12]
 8013e0a:	e019      	b.n	8013e40 <f_open+0x1a0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013e0c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d115      	bne.n	8013e40 <f_open+0x1a0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013e14:	7fbb      	ldrb	r3, [r7, #30]
 8013e16:	f003 0310 	and.w	r3, r3, #16
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d003      	beq.n	8013e26 <f_open+0x186>
					res = FR_NO_FILE;
 8013e1e:	2304      	movs	r3, #4
 8013e20:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8013e24:	e00c      	b.n	8013e40 <f_open+0x1a0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013e26:	79fb      	ldrb	r3, [r7, #7]
 8013e28:	f003 0302 	and.w	r3, r3, #2
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d007      	beq.n	8013e40 <f_open+0x1a0>
 8013e30:	7fbb      	ldrb	r3, [r7, #30]
 8013e32:	f003 0301 	and.w	r3, r3, #1
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d002      	beq.n	8013e40 <f_open+0x1a0>
						res = FR_DENIED;
 8013e3a:	2307      	movs	r3, #7
 8013e3c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8013e40:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d10f      	bne.n	8013e68 <f_open+0x1c8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013e48:	79fb      	ldrb	r3, [r7, #7]
 8013e4a:	f003 0308 	and.w	r3, r3, #8
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d003      	beq.n	8013e5a <f_open+0x1ba>
				mode |= FA_MODIFIED;
 8013e52:	79fb      	ldrb	r3, [r7, #7]
 8013e54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013e58:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013e5a:	697b      	ldr	r3, [r7, #20]
 8013e5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 8013e62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	625a      	str	r2, [r3, #36]	@ 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013e68:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	f040 8095 	bne.w	8013f9c <f_open+0x2fc>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013e72:	697b      	ldr	r3, [r7, #20]
 8013e74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013e76:	4611      	mov	r1, r2
 8013e78:	4618      	mov	r0, r3
 8013e7a:	f7ff f9e9 	bl	8013250 <ld_clust>
 8013e7e:	4602      	mov	r2, r0
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e86:	331c      	adds	r3, #28
 8013e88:	4618      	mov	r0, r3
 8013e8a:	f7fe fbb2 	bl	80125f2 <ld_dword>
 8013e8e:	4602      	mov	r2, r0
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	2200      	movs	r2, #0
 8013e98:	629a      	str	r2, [r3, #40]	@ 0x28
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013e9a:	697a      	ldr	r2, [r7, #20]
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013ea0:	697b      	ldr	r3, [r7, #20]
 8013ea2:	88da      	ldrh	r2, [r3, #6]
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	79fa      	ldrb	r2, [r7, #7]
 8013eac:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	2200      	movs	r2, #0
 8013eb2:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	2200      	movs	r2, #0
 8013eb8:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	2200      	movs	r2, #0
 8013ebe:	615a      	str	r2, [r3, #20]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	332c      	adds	r3, #44	@ 0x2c
 8013ec4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013ec8:	2100      	movs	r1, #0
 8013eca:	4618      	mov	r0, r3
 8013ecc:	f7fe fc1c 	bl	8012708 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013ed0:	79fb      	ldrb	r3, [r7, #7]
 8013ed2:	f003 0320 	and.w	r3, r3, #32
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d060      	beq.n	8013f9c <f_open+0x2fc>
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	68db      	ldr	r3, [r3, #12]
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d05c      	beq.n	8013f9c <f_open+0x2fc>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	68da      	ldr	r2, [r3, #12]
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013eea:	697b      	ldr	r3, [r7, #20]
 8013eec:	895b      	ldrh	r3, [r3, #10]
 8013eee:	025b      	lsls	r3, r3, #9
 8013ef0:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	689b      	ldr	r3, [r3, #8]
 8013ef6:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	68db      	ldr	r3, [r3, #12]
 8013efc:	657b      	str	r3, [r7, #84]	@ 0x54
 8013efe:	e016      	b.n	8013f2e <f_open+0x28e>
					clst = get_fat(&fp->obj, clst);
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8013f04:	4618      	mov	r0, r3
 8013f06:	f7fe fd5a 	bl	80129be <get_fat>
 8013f0a:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013f0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013f0e:	2b01      	cmp	r3, #1
 8013f10:	d802      	bhi.n	8013f18 <f_open+0x278>
 8013f12:	2302      	movs	r3, #2
 8013f14:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013f18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f1e:	d102      	bne.n	8013f26 <f_open+0x286>
 8013f20:	2301      	movs	r3, #1
 8013f22:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013f26:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013f28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013f2a:	1ad3      	subs	r3, r2, r3
 8013f2c:	657b      	str	r3, [r7, #84]	@ 0x54
 8013f2e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d103      	bne.n	8013f3e <f_open+0x29e>
 8013f36:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013f38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013f3a:	429a      	cmp	r2, r3
 8013f3c:	d8e0      	bhi.n	8013f00 <f_open+0x260>
				}
				fp->clust = clst;
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013f42:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013f44:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d127      	bne.n	8013f9c <f_open+0x2fc>
 8013f4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d022      	beq.n	8013f9c <f_open+0x2fc>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013f56:	697b      	ldr	r3, [r7, #20]
 8013f58:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8013f5a:	4618      	mov	r0, r3
 8013f5c:	f7fe fd10 	bl	8012980 <clust2sect>
 8013f60:	6478      	str	r0, [r7, #68]	@ 0x44
 8013f62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d103      	bne.n	8013f70 <f_open+0x2d0>
						res = FR_INT_ERR;
 8013f68:	2302      	movs	r3, #2
 8013f6a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8013f6e:	e015      	b.n	8013f9c <f_open+0x2fc>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013f70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f72:	0a5a      	lsrs	r2, r3, #9
 8013f74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f76:	441a      	add	r2, r3
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	61da      	str	r2, [r3, #28]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013f7c:	697b      	ldr	r3, [r7, #20]
 8013f7e:	7858      	ldrb	r0, [r3, #1]
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	69da      	ldr	r2, [r3, #28]
 8013f8a:	2301      	movs	r3, #1
 8013f8c:	f7fe faba 	bl	8012504 <disk_read>
 8013f90:	4603      	mov	r3, r0
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d002      	beq.n	8013f9c <f_open+0x2fc>
 8013f96:	2301      	movs	r3, #1
 8013f98:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013f9c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d002      	beq.n	8013faa <f_open+0x30a>
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	2200      	movs	r2, #0
 8013fa8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013faa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8013fae:	4618      	mov	r0, r3
 8013fb0:	3760      	adds	r7, #96	@ 0x60
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	bd80      	pop	{r7, pc}

08013fb6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013fb6:	b580      	push	{r7, lr}
 8013fb8:	b08c      	sub	sp, #48	@ 0x30
 8013fba:	af00      	add	r7, sp, #0
 8013fbc:	60f8      	str	r0, [r7, #12]
 8013fbe:	60b9      	str	r1, [r7, #8]
 8013fc0:	607a      	str	r2, [r7, #4]
 8013fc2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013fc4:	68bb      	ldr	r3, [r7, #8]
 8013fc6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013fc8:	683b      	ldr	r3, [r7, #0]
 8013fca:	2200      	movs	r2, #0
 8013fcc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	f107 0210 	add.w	r2, r7, #16
 8013fd4:	4611      	mov	r1, r2
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	f7ff fde8 	bl	8013bac <validate>
 8013fdc:	4603      	mov	r3, r0
 8013fde:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013fe2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d107      	bne.n	8013ffa <f_write+0x44>
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	7c5b      	ldrb	r3, [r3, #17]
 8013fee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8013ff2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d002      	beq.n	8014000 <f_write+0x4a>
 8013ffa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013ffe:	e14b      	b.n	8014298 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	7c1b      	ldrb	r3, [r3, #16]
 8014004:	f003 0302 	and.w	r3, r3, #2
 8014008:	2b00      	cmp	r3, #0
 801400a:	d101      	bne.n	8014010 <f_write+0x5a>
 801400c:	2307      	movs	r3, #7
 801400e:	e143      	b.n	8014298 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	695a      	ldr	r2, [r3, #20]
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	441a      	add	r2, r3
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	695b      	ldr	r3, [r3, #20]
 801401c:	429a      	cmp	r2, r3
 801401e:	f080 812d 	bcs.w	801427c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	695b      	ldr	r3, [r3, #20]
 8014026:	43db      	mvns	r3, r3
 8014028:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801402a:	e127      	b.n	801427c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	695b      	ldr	r3, [r3, #20]
 8014030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014034:	2b00      	cmp	r3, #0
 8014036:	f040 80e3 	bne.w	8014200 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	695b      	ldr	r3, [r3, #20]
 801403e:	0a5b      	lsrs	r3, r3, #9
 8014040:	693a      	ldr	r2, [r7, #16]
 8014042:	8952      	ldrh	r2, [r2, #10]
 8014044:	3a01      	subs	r2, #1
 8014046:	4013      	ands	r3, r2
 8014048:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801404a:	69bb      	ldr	r3, [r7, #24]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d143      	bne.n	80140d8 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	695b      	ldr	r3, [r3, #20]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d10c      	bne.n	8014072 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	689b      	ldr	r3, [r3, #8]
 801405c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801405e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014060:	2b00      	cmp	r3, #0
 8014062:	d11a      	bne.n	801409a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	2100      	movs	r1, #0
 8014068:	4618      	mov	r0, r3
 801406a:	f7fe fe9e 	bl	8012daa <create_chain>
 801406e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8014070:	e013      	b.n	801409a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014076:	2b00      	cmp	r3, #0
 8014078:	d007      	beq.n	801408a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	695b      	ldr	r3, [r3, #20]
 801407e:	4619      	mov	r1, r3
 8014080:	68f8      	ldr	r0, [r7, #12]
 8014082:	f7fe ff2a 	bl	8012eda <clmt_clust>
 8014086:	62b8      	str	r0, [r7, #40]	@ 0x28
 8014088:	e007      	b.n	801409a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801408a:	68fa      	ldr	r2, [r7, #12]
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	699b      	ldr	r3, [r3, #24]
 8014090:	4619      	mov	r1, r3
 8014092:	4610      	mov	r0, r2
 8014094:	f7fe fe89 	bl	8012daa <create_chain>
 8014098:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801409a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801409c:	2b00      	cmp	r3, #0
 801409e:	f000 80f2 	beq.w	8014286 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80140a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140a4:	2b01      	cmp	r3, #1
 80140a6:	d104      	bne.n	80140b2 <f_write+0xfc>
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	2202      	movs	r2, #2
 80140ac:	745a      	strb	r2, [r3, #17]
 80140ae:	2302      	movs	r3, #2
 80140b0:	e0f2      	b.n	8014298 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80140b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140b8:	d104      	bne.n	80140c4 <f_write+0x10e>
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	2201      	movs	r2, #1
 80140be:	745a      	strb	r2, [r3, #17]
 80140c0:	2301      	movs	r3, #1
 80140c2:	e0e9      	b.n	8014298 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80140c8:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	689b      	ldr	r3, [r3, #8]
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d102      	bne.n	80140d8 <f_write+0x122>
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80140d6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	7c1b      	ldrb	r3, [r3, #16]
 80140dc:	b25b      	sxtb	r3, r3
 80140de:	2b00      	cmp	r3, #0
 80140e0:	da18      	bge.n	8014114 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80140e2:	693b      	ldr	r3, [r7, #16]
 80140e4:	7858      	ldrb	r0, [r3, #1]
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	69da      	ldr	r2, [r3, #28]
 80140f0:	2301      	movs	r3, #1
 80140f2:	f7fe fa27 	bl	8012544 <disk_write>
 80140f6:	4603      	mov	r3, r0
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d004      	beq.n	8014106 <f_write+0x150>
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	2201      	movs	r2, #1
 8014100:	745a      	strb	r2, [r3, #17]
 8014102:	2301      	movs	r3, #1
 8014104:	e0c8      	b.n	8014298 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	7c1b      	ldrb	r3, [r3, #16]
 801410a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801410e:	b2da      	uxtb	r2, r3
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014114:	693a      	ldr	r2, [r7, #16]
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	699b      	ldr	r3, [r3, #24]
 801411a:	4619      	mov	r1, r3
 801411c:	4610      	mov	r0, r2
 801411e:	f7fe fc2f 	bl	8012980 <clust2sect>
 8014122:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014124:	697b      	ldr	r3, [r7, #20]
 8014126:	2b00      	cmp	r3, #0
 8014128:	d104      	bne.n	8014134 <f_write+0x17e>
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	2202      	movs	r2, #2
 801412e:	745a      	strb	r2, [r3, #17]
 8014130:	2302      	movs	r3, #2
 8014132:	e0b1      	b.n	8014298 <f_write+0x2e2>
			sect += csect;
 8014134:	697a      	ldr	r2, [r7, #20]
 8014136:	69bb      	ldr	r3, [r7, #24]
 8014138:	4413      	add	r3, r2
 801413a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	0a5b      	lsrs	r3, r3, #9
 8014140:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8014142:	6a3b      	ldr	r3, [r7, #32]
 8014144:	2b00      	cmp	r3, #0
 8014146:	d03c      	beq.n	80141c2 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014148:	69ba      	ldr	r2, [r7, #24]
 801414a:	6a3b      	ldr	r3, [r7, #32]
 801414c:	4413      	add	r3, r2
 801414e:	693a      	ldr	r2, [r7, #16]
 8014150:	8952      	ldrh	r2, [r2, #10]
 8014152:	4293      	cmp	r3, r2
 8014154:	d905      	bls.n	8014162 <f_write+0x1ac>
					cc = fs->csize - csect;
 8014156:	693b      	ldr	r3, [r7, #16]
 8014158:	895b      	ldrh	r3, [r3, #10]
 801415a:	461a      	mov	r2, r3
 801415c:	69bb      	ldr	r3, [r7, #24]
 801415e:	1ad3      	subs	r3, r2, r3
 8014160:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014162:	693b      	ldr	r3, [r7, #16]
 8014164:	7858      	ldrb	r0, [r3, #1]
 8014166:	6a3b      	ldr	r3, [r7, #32]
 8014168:	697a      	ldr	r2, [r7, #20]
 801416a:	69f9      	ldr	r1, [r7, #28]
 801416c:	f7fe f9ea 	bl	8012544 <disk_write>
 8014170:	4603      	mov	r3, r0
 8014172:	2b00      	cmp	r3, #0
 8014174:	d004      	beq.n	8014180 <f_write+0x1ca>
 8014176:	68fb      	ldr	r3, [r7, #12]
 8014178:	2201      	movs	r2, #1
 801417a:	745a      	strb	r2, [r3, #17]
 801417c:	2301      	movs	r3, #1
 801417e:	e08b      	b.n	8014298 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8014180:	68fb      	ldr	r3, [r7, #12]
 8014182:	69da      	ldr	r2, [r3, #28]
 8014184:	697b      	ldr	r3, [r7, #20]
 8014186:	1ad3      	subs	r3, r2, r3
 8014188:	6a3a      	ldr	r2, [r7, #32]
 801418a:	429a      	cmp	r2, r3
 801418c:	d915      	bls.n	80141ba <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	f103 002c 	add.w	r0, r3, #44	@ 0x2c
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	69da      	ldr	r2, [r3, #28]
 8014198:	697b      	ldr	r3, [r7, #20]
 801419a:	1ad3      	subs	r3, r2, r3
 801419c:	025b      	lsls	r3, r3, #9
 801419e:	69fa      	ldr	r2, [r7, #28]
 80141a0:	4413      	add	r3, r2
 80141a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80141a6:	4619      	mov	r1, r3
 80141a8:	f7fe fa8d 	bl	80126c6 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	7c1b      	ldrb	r3, [r3, #16]
 80141b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80141b4:	b2da      	uxtb	r2, r3
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80141ba:	6a3b      	ldr	r3, [r7, #32]
 80141bc:	025b      	lsls	r3, r3, #9
 80141be:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80141c0:	e03f      	b.n	8014242 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	69db      	ldr	r3, [r3, #28]
 80141c6:	697a      	ldr	r2, [r7, #20]
 80141c8:	429a      	cmp	r2, r3
 80141ca:	d016      	beq.n	80141fa <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	695a      	ldr	r2, [r3, #20]
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80141d4:	429a      	cmp	r2, r3
 80141d6:	d210      	bcs.n	80141fa <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80141d8:	693b      	ldr	r3, [r7, #16]
 80141da:	7858      	ldrb	r0, [r3, #1]
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 80141e2:	2301      	movs	r3, #1
 80141e4:	697a      	ldr	r2, [r7, #20]
 80141e6:	f7fe f98d 	bl	8012504 <disk_read>
 80141ea:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d004      	beq.n	80141fa <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	2201      	movs	r2, #1
 80141f4:	745a      	strb	r2, [r3, #17]
 80141f6:	2301      	movs	r3, #1
 80141f8:	e04e      	b.n	8014298 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	697a      	ldr	r2, [r7, #20]
 80141fe:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	695b      	ldr	r3, [r3, #20]
 8014204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014208:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801420c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801420e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	429a      	cmp	r2, r3
 8014214:	d901      	bls.n	801421a <f_write+0x264>
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	695b      	ldr	r3, [r3, #20]
 8014224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014228:	4413      	add	r3, r2
 801422a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801422c:	69f9      	ldr	r1, [r7, #28]
 801422e:	4618      	mov	r0, r3
 8014230:	f7fe fa49 	bl	80126c6 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	7c1b      	ldrb	r3, [r3, #16]
 8014238:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801423c:	b2da      	uxtb	r2, r3
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	741a      	strb	r2, [r3, #16]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8014242:	69fa      	ldr	r2, [r7, #28]
 8014244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014246:	4413      	add	r3, r2
 8014248:	61fb      	str	r3, [r7, #28]
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	695a      	ldr	r2, [r3, #20]
 801424e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014250:	441a      	add	r2, r3
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	615a      	str	r2, [r3, #20]
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	68da      	ldr	r2, [r3, #12]
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	695b      	ldr	r3, [r3, #20]
 801425e:	429a      	cmp	r2, r3
 8014260:	bf38      	it	cc
 8014262:	461a      	movcc	r2, r3
 8014264:	68fb      	ldr	r3, [r7, #12]
 8014266:	60da      	str	r2, [r3, #12]
 8014268:	683b      	ldr	r3, [r7, #0]
 801426a:	681a      	ldr	r2, [r3, #0]
 801426c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801426e:	441a      	add	r2, r3
 8014270:	683b      	ldr	r3, [r7, #0]
 8014272:	601a      	str	r2, [r3, #0]
 8014274:	687a      	ldr	r2, [r7, #4]
 8014276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014278:	1ad3      	subs	r3, r2, r3
 801427a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	2b00      	cmp	r3, #0
 8014280:	f47f aed4 	bne.w	801402c <f_write+0x76>
 8014284:	e000      	b.n	8014288 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014286:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	7c1b      	ldrb	r3, [r3, #16]
 801428c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014290:	b2da      	uxtb	r2, r3
 8014292:	68fb      	ldr	r3, [r7, #12]
 8014294:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 8014296:	2300      	movs	r3, #0
}
 8014298:	4618      	mov	r0, r3
 801429a:	3730      	adds	r7, #48	@ 0x30
 801429c:	46bd      	mov	sp, r7
 801429e:	bd80      	pop	{r7, pc}

080142a0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80142a0:	b580      	push	{r7, lr}
 80142a2:	b086      	sub	sp, #24
 80142a4:	af00      	add	r7, sp, #0
 80142a6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	f107 0208 	add.w	r2, r7, #8
 80142ae:	4611      	mov	r1, r2
 80142b0:	4618      	mov	r0, r3
 80142b2:	f7ff fc7b 	bl	8013bac <validate>
 80142b6:	4603      	mov	r3, r0
 80142b8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80142ba:	7dfb      	ldrb	r3, [r7, #23]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d168      	bne.n	8014392 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	7c1b      	ldrb	r3, [r3, #16]
 80142c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d062      	beq.n	8014392 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	7c1b      	ldrb	r3, [r3, #16]
 80142d0:	b25b      	sxtb	r3, r3
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	da15      	bge.n	8014302 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80142d6:	68bb      	ldr	r3, [r7, #8]
 80142d8:	7858      	ldrb	r0, [r3, #1]
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	69da      	ldr	r2, [r3, #28]
 80142e4:	2301      	movs	r3, #1
 80142e6:	f7fe f92d 	bl	8012544 <disk_write>
 80142ea:	4603      	mov	r3, r0
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d001      	beq.n	80142f4 <f_sync+0x54>
 80142f0:	2301      	movs	r3, #1
 80142f2:	e04f      	b.n	8014394 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	7c1b      	ldrb	r3, [r3, #16]
 80142f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80142fc:	b2da      	uxtb	r2, r3
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8014302:	f7fd fcd9 	bl	8011cb8 <get_fattime>
 8014306:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8014308:	68ba      	ldr	r2, [r7, #8]
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	6a1b      	ldr	r3, [r3, #32]
 801430e:	4619      	mov	r1, r3
 8014310:	4610      	mov	r0, r2
 8014312:	f7fe fa9a 	bl	801284a <move_window>
 8014316:	4603      	mov	r3, r0
 8014318:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801431a:	7dfb      	ldrb	r3, [r7, #23]
 801431c:	2b00      	cmp	r3, #0
 801431e:	d138      	bne.n	8014392 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014324:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	330b      	adds	r3, #11
 801432a:	781a      	ldrb	r2, [r3, #0]
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	330b      	adds	r3, #11
 8014330:	f042 0220 	orr.w	r2, r2, #32
 8014334:	b2d2      	uxtb	r2, r2
 8014336:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	6818      	ldr	r0, [r3, #0]
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	689b      	ldr	r3, [r3, #8]
 8014340:	461a      	mov	r2, r3
 8014342:	68f9      	ldr	r1, [r7, #12]
 8014344:	f7fe ffa3 	bl	801328e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	f103 021c 	add.w	r2, r3, #28
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	68db      	ldr	r3, [r3, #12]
 8014352:	4619      	mov	r1, r3
 8014354:	4610      	mov	r0, r2
 8014356:	f7fe f98a 	bl	801266e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801435a:	68fb      	ldr	r3, [r7, #12]
 801435c:	3316      	adds	r3, #22
 801435e:	6939      	ldr	r1, [r7, #16]
 8014360:	4618      	mov	r0, r3
 8014362:	f7fe f984 	bl	801266e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	3312      	adds	r3, #18
 801436a:	2100      	movs	r1, #0
 801436c:	4618      	mov	r0, r3
 801436e:	f7fe f963 	bl	8012638 <st_word>
					fs->wflag = 1;
 8014372:	68bb      	ldr	r3, [r7, #8]
 8014374:	2201      	movs	r2, #1
 8014376:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014378:	68bb      	ldr	r3, [r7, #8]
 801437a:	4618      	mov	r0, r3
 801437c:	f7fe fa92 	bl	80128a4 <sync_fs>
 8014380:	4603      	mov	r3, r0
 8014382:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	7c1b      	ldrb	r3, [r3, #16]
 8014388:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801438c:	b2da      	uxtb	r2, r3
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8014392:	7dfb      	ldrb	r3, [r7, #23]
}
 8014394:	4618      	mov	r0, r3
 8014396:	3718      	adds	r7, #24
 8014398:	46bd      	mov	sp, r7
 801439a:	bd80      	pop	{r7, pc}

0801439c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801439c:	b580      	push	{r7, lr}
 801439e:	b084      	sub	sp, #16
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80143a4:	6878      	ldr	r0, [r7, #4]
 80143a6:	f7ff ff7b 	bl	80142a0 <f_sync>
 80143aa:	4603      	mov	r3, r0
 80143ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80143ae:	7bfb      	ldrb	r3, [r7, #15]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d10e      	bne.n	80143d2 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	f107 0208 	add.w	r2, r7, #8
 80143ba:	4611      	mov	r1, r2
 80143bc:	4618      	mov	r0, r3
 80143be:	f7ff fbf5 	bl	8013bac <validate>
 80143c2:	4603      	mov	r3, r0
 80143c4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80143c6:	7bfb      	ldrb	r3, [r7, #15]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d102      	bne.n	80143d2 <f_close+0x36>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	2200      	movs	r2, #0
 80143d0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80143d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80143d4:	4618      	mov	r0, r3
 80143d6:	3710      	adds	r7, #16
 80143d8:	46bd      	mov	sp, r7
 80143da:	bd80      	pop	{r7, pc}

080143dc <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80143dc:	b580      	push	{r7, lr}
 80143de:	b096      	sub	sp, #88	@ 0x58
 80143e0:	af00      	add	r7, sp, #0
 80143e2:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80143e4:	f107 010c 	add.w	r1, r7, #12
 80143e8:	1d3b      	adds	r3, r7, #4
 80143ea:	2202      	movs	r2, #2
 80143ec:	4618      	mov	r0, r3
 80143ee:	f7ff f995 	bl	801371c <find_volume>
 80143f2:	4603      	mov	r3, r0
 80143f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 80143fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014400:	2b00      	cmp	r3, #0
 8014402:	f040 80ec 	bne.w	80145de <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8014406:	687a      	ldr	r2, [r7, #4]
 8014408:	f107 0310 	add.w	r3, r7, #16
 801440c:	4611      	mov	r1, r2
 801440e:	4618      	mov	r0, r3
 8014410:	f7ff f878 	bl	8013504 <follow_path>
 8014414:	4603      	mov	r3, r0
 8014416:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801441a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801441e:	2b00      	cmp	r3, #0
 8014420:	d102      	bne.n	8014428 <f_mkdir+0x4c>
 8014422:	2308      	movs	r3, #8
 8014424:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8014428:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801442c:	2b04      	cmp	r3, #4
 801442e:	f040 80d6 	bne.w	80145de <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8014432:	f107 0310 	add.w	r3, r7, #16
 8014436:	2100      	movs	r1, #0
 8014438:	4618      	mov	r0, r3
 801443a:	f7fe fcb6 	bl	8012daa <create_chain>
 801443e:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	895b      	ldrh	r3, [r3, #10]
 8014444:	025b      	lsls	r3, r3, #9
 8014446:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 8014448:	2300      	movs	r3, #0
 801444a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 801444e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014450:	2b00      	cmp	r3, #0
 8014452:	d102      	bne.n	801445a <f_mkdir+0x7e>
 8014454:	2307      	movs	r3, #7
 8014456:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 801445a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801445c:	2b01      	cmp	r3, #1
 801445e:	d102      	bne.n	8014466 <f_mkdir+0x8a>
 8014460:	2302      	movs	r3, #2
 8014462:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014466:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014468:	f1b3 3fff 	cmp.w	r3, #4294967295
 801446c:	d102      	bne.n	8014474 <f_mkdir+0x98>
 801446e:	2301      	movs	r3, #1
 8014470:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8014474:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014478:	2b00      	cmp	r3, #0
 801447a:	d106      	bne.n	801448a <f_mkdir+0xae>
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	4618      	mov	r0, r3
 8014480:	f7fe f99f 	bl	80127c2 <sync_window>
 8014484:	4603      	mov	r3, r0
 8014486:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 801448a:	f7fd fc15 	bl	8011cb8 <get_fattime>
 801448e:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8014490:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014494:	2b00      	cmp	r3, #0
 8014496:	d16a      	bne.n	801456e <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801449c:	4618      	mov	r0, r3
 801449e:	f7fe fa6f 	bl	8012980 <clust2sect>
 80144a2:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	3330      	adds	r3, #48	@ 0x30
 80144a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 80144aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80144ae:	2100      	movs	r1, #0
 80144b0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80144b2:	f7fe f929 	bl	8012708 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80144b6:	220b      	movs	r2, #11
 80144b8:	2120      	movs	r1, #32
 80144ba:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80144bc:	f7fe f924 	bl	8012708 <mem_set>
					dir[DIR_Name] = '.';
 80144c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80144c2:	222e      	movs	r2, #46	@ 0x2e
 80144c4:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80144c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80144c8:	330b      	adds	r3, #11
 80144ca:	2210      	movs	r2, #16
 80144cc:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80144ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80144d0:	3316      	adds	r3, #22
 80144d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80144d4:	4618      	mov	r0, r3
 80144d6:	f7fe f8ca 	bl	801266e <st_dword>
					st_clust(fs, dir, dcl);
 80144da:	68fb      	ldr	r3, [r7, #12]
 80144dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80144de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80144e0:	4618      	mov	r0, r3
 80144e2:	f7fe fed4 	bl	801328e <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80144e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80144e8:	3320      	adds	r3, #32
 80144ea:	2220      	movs	r2, #32
 80144ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80144ee:	4618      	mov	r0, r3
 80144f0:	f7fe f8e9 	bl	80126c6 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80144f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80144f6:	3321      	adds	r3, #33	@ 0x21
 80144f8:	222e      	movs	r2, #46	@ 0x2e
 80144fa:	701a      	strb	r2, [r3, #0]
 80144fc:	69bb      	ldr	r3, [r7, #24]
 80144fe:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8014500:	68fb      	ldr	r3, [r7, #12]
 8014502:	781b      	ldrb	r3, [r3, #0]
 8014504:	2b03      	cmp	r3, #3
 8014506:	d106      	bne.n	8014516 <f_mkdir+0x13a>
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801450c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801450e:	429a      	cmp	r2, r3
 8014510:	d101      	bne.n	8014516 <f_mkdir+0x13a>
 8014512:	2300      	movs	r3, #0
 8014514:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8014516:	68f8      	ldr	r0, [r7, #12]
 8014518:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801451a:	3320      	adds	r3, #32
 801451c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801451e:	4619      	mov	r1, r3
 8014520:	f7fe feb5 	bl	801328e <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	895b      	ldrh	r3, [r3, #10]
 8014528:	653b      	str	r3, [r7, #80]	@ 0x50
 801452a:	e01b      	b.n	8014564 <f_mkdir+0x188>
					fs->winsect = dsc++;
 801452c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801452e:	1c5a      	adds	r2, r3, #1
 8014530:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8014532:	68fa      	ldr	r2, [r7, #12]
 8014534:	62d3      	str	r3, [r2, #44]	@ 0x2c
					fs->wflag = 1;
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	2201      	movs	r2, #1
 801453a:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	4618      	mov	r0, r3
 8014540:	f7fe f93f 	bl	80127c2 <sync_window>
 8014544:	4603      	mov	r3, r0
 8014546:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 801454a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801454e:	2b00      	cmp	r3, #0
 8014550:	d10c      	bne.n	801456c <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 8014552:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014556:	2100      	movs	r1, #0
 8014558:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801455a:	f7fe f8d5 	bl	8012708 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801455e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014560:	3b01      	subs	r3, #1
 8014562:	653b      	str	r3, [r7, #80]	@ 0x50
 8014564:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014566:	2b00      	cmp	r3, #0
 8014568:	d1e0      	bne.n	801452c <f_mkdir+0x150>
 801456a:	e000      	b.n	801456e <f_mkdir+0x192>
					if (res != FR_OK) break;
 801456c:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 801456e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014572:	2b00      	cmp	r3, #0
 8014574:	d107      	bne.n	8014586 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8014576:	f107 0310 	add.w	r3, r7, #16
 801457a:	4618      	mov	r0, r3
 801457c:	f7fe fefc 	bl	8013378 <dir_register>
 8014580:	4603      	mov	r3, r0
 8014582:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 8014586:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801458a:	2b00      	cmp	r3, #0
 801458c:	d120      	bne.n	80145d0 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 801458e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014590:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8014592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014594:	3316      	adds	r3, #22
 8014596:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014598:	4618      	mov	r0, r3
 801459a:	f7fe f868 	bl	801266e <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80145a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80145a4:	4618      	mov	r0, r3
 80145a6:	f7fe fe72 	bl	801328e <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80145aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80145ac:	330b      	adds	r3, #11
 80145ae:	2210      	movs	r2, #16
 80145b0:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	2201      	movs	r2, #1
 80145b6:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80145b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d10e      	bne.n	80145de <f_mkdir+0x202>
					res = sync_fs(fs);
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	4618      	mov	r0, r3
 80145c4:	f7fe f96e 	bl	80128a4 <sync_fs>
 80145c8:	4603      	mov	r3, r0
 80145ca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80145ce:	e006      	b.n	80145de <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80145d0:	f107 0310 	add.w	r3, r7, #16
 80145d4:	2200      	movs	r2, #0
 80145d6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80145d8:	4618      	mov	r0, r3
 80145da:	f7fe fb81 	bl	8012ce0 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80145de:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 80145e2:	4618      	mov	r0, r3
 80145e4:	3758      	adds	r7, #88	@ 0x58
 80145e6:	46bd      	mov	sp, r7
 80145e8:	bd80      	pop	{r7, pc}
	...

080145ec <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 80145ec:	b590      	push	{r4, r7, lr}
 80145ee:	b09d      	sub	sp, #116	@ 0x74
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	60f8      	str	r0, [r7, #12]
 80145f4:	607a      	str	r2, [r7, #4]
 80145f6:	603b      	str	r3, [r7, #0]
 80145f8:	460b      	mov	r3, r1
 80145fa:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 80145fc:	2301      	movs	r3, #1
 80145fe:	647b      	str	r3, [r7, #68]	@ 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8014600:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014604:	643b      	str	r3, [r7, #64]	@ 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8014606:	f107 030c 	add.w	r3, r7, #12
 801460a:	4618      	mov	r0, r3
 801460c:	f7fe ffeb 	bl	80135e6 <get_ldnumber>
 8014610:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8014612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014614:	2b00      	cmp	r3, #0
 8014616:	da02      	bge.n	801461e <f_mkfs+0x32>
 8014618:	230b      	movs	r3, #11
 801461a:	f000 bc0d 	b.w	8014e38 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 801461e:	4a94      	ldr	r2, [pc, #592]	@ (8014870 <f_mkfs+0x284>)
 8014620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014626:	2b00      	cmp	r3, #0
 8014628:	d005      	beq.n	8014636 <f_mkfs+0x4a>
 801462a:	4a91      	ldr	r2, [pc, #580]	@ (8014870 <f_mkfs+0x284>)
 801462c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801462e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014632:	2200      	movs	r2, #0
 8014634:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8014636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014638:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 801463c:	2300      	movs	r3, #0
 801463e:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8014642:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8014646:	4618      	mov	r0, r3
 8014648:	f7fd ff36 	bl	80124b8 <disk_initialize>
 801464c:	4603      	mov	r3, r0
 801464e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8014652:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8014656:	f003 0301 	and.w	r3, r3, #1
 801465a:	2b00      	cmp	r3, #0
 801465c:	d001      	beq.n	8014662 <f_mkfs+0x76>
 801465e:	2303      	movs	r3, #3
 8014660:	e3ea      	b.n	8014e38 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8014662:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8014666:	f003 0304 	and.w	r3, r3, #4
 801466a:	2b00      	cmp	r3, #0
 801466c:	d001      	beq.n	8014672 <f_mkfs+0x86>
 801466e:	230a      	movs	r3, #10
 8014670:	e3e2      	b.n	8014e38 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8014672:	f107 0214 	add.w	r2, r7, #20
 8014676:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801467a:	2103      	movs	r1, #3
 801467c:	4618      	mov	r0, r3
 801467e:	f7fd ff81 	bl	8012584 <disk_ioctl>
 8014682:	4603      	mov	r3, r0
 8014684:	2b00      	cmp	r3, #0
 8014686:	d10c      	bne.n	80146a2 <f_mkfs+0xb6>
 8014688:	697b      	ldr	r3, [r7, #20]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d009      	beq.n	80146a2 <f_mkfs+0xb6>
 801468e:	697b      	ldr	r3, [r7, #20]
 8014690:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014694:	d805      	bhi.n	80146a2 <f_mkfs+0xb6>
 8014696:	697b      	ldr	r3, [r7, #20]
 8014698:	1e5a      	subs	r2, r3, #1
 801469a:	697b      	ldr	r3, [r7, #20]
 801469c:	4013      	ands	r3, r2
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d001      	beq.n	80146a6 <f_mkfs+0xba>
 80146a2:	2301      	movs	r3, #1
 80146a4:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 80146a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80146aa:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d003      	beq.n	80146ba <f_mkfs+0xce>
 80146b2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80146b4:	687a      	ldr	r2, [r7, #4]
 80146b6:	429a      	cmp	r2, r3
 80146b8:	d309      	bcc.n	80146ce <f_mkfs+0xe2>
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80146c0:	d805      	bhi.n	80146ce <f_mkfs+0xe2>
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	1e5a      	subs	r2, r3, #1
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	4013      	ands	r3, r2
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d001      	beq.n	80146d2 <f_mkfs+0xe6>
 80146ce:	2313      	movs	r3, #19
 80146d0:	e3b2      	b.n	8014e38 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 80146d2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80146d4:	687a      	ldr	r2, [r7, #4]
 80146d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80146da:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 80146dc:	683b      	ldr	r3, [r7, #0]
 80146de:	633b      	str	r3, [r7, #48]	@ 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 80146e0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80146e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80146e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80146ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 80146ec:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80146ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146f0:	fb02 f303 	mul.w	r3, r2, r3
 80146f4:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 80146f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d101      	bne.n	8014700 <f_mkfs+0x114>
 80146fc:	230e      	movs	r3, #14
 80146fe:	e39b      	b.n	8014e38 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8014700:	f107 0210 	add.w	r2, r7, #16
 8014704:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8014708:	2101      	movs	r1, #1
 801470a:	4618      	mov	r0, r3
 801470c:	f7fd ff3a 	bl	8012584 <disk_ioctl>
 8014710:	4603      	mov	r3, r0
 8014712:	2b00      	cmp	r3, #0
 8014714:	d001      	beq.n	801471a <f_mkfs+0x12e>
 8014716:	2301      	movs	r3, #1
 8014718:	e38e      	b.n	8014e38 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 801471a:	7afb      	ldrb	r3, [r7, #11]
 801471c:	f003 0308 	and.w	r3, r3, #8
 8014720:	2b00      	cmp	r3, #0
 8014722:	d001      	beq.n	8014728 <f_mkfs+0x13c>
 8014724:	2300      	movs	r3, #0
 8014726:	e000      	b.n	801472a <f_mkfs+0x13e>
 8014728:	233f      	movs	r3, #63	@ 0x3f
 801472a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 801472c:	693b      	ldr	r3, [r7, #16]
 801472e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014730:	429a      	cmp	r2, r3
 8014732:	d901      	bls.n	8014738 <f_mkfs+0x14c>
 8014734:	230e      	movs	r3, #14
 8014736:	e37f      	b.n	8014e38 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8014738:	693a      	ldr	r2, [r7, #16]
 801473a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801473c:	1ad3      	subs	r3, r2, r3
 801473e:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8014740:	693b      	ldr	r3, [r7, #16]
 8014742:	2b7f      	cmp	r3, #127	@ 0x7f
 8014744:	d801      	bhi.n	801474a <f_mkfs+0x15e>
 8014746:	230e      	movs	r3, #14
 8014748:	e376      	b.n	8014e38 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	2b80      	cmp	r3, #128	@ 0x80
 801474e:	d901      	bls.n	8014754 <f_mkfs+0x168>
 8014750:	2313      	movs	r3, #19
 8014752:	e371      	b.n	8014e38 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8014754:	7afb      	ldrb	r3, [r7, #11]
 8014756:	f003 0302 	and.w	r3, r3, #2
 801475a:	2b00      	cmp	r3, #0
 801475c:	d00d      	beq.n	801477a <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 801475e:	7afb      	ldrb	r3, [r7, #11]
 8014760:	f003 0307 	and.w	r3, r3, #7
 8014764:	2b02      	cmp	r3, #2
 8014766:	d004      	beq.n	8014772 <f_mkfs+0x186>
 8014768:	7afb      	ldrb	r3, [r7, #11]
 801476a:	f003 0301 	and.w	r3, r3, #1
 801476e:	2b00      	cmp	r3, #0
 8014770:	d103      	bne.n	801477a <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 8014772:	2303      	movs	r3, #3
 8014774:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8014778:	e009      	b.n	801478e <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 801477a:	7afb      	ldrb	r3, [r7, #11]
 801477c:	f003 0301 	and.w	r3, r3, #1
 8014780:	2b00      	cmp	r3, #0
 8014782:	d101      	bne.n	8014788 <f_mkfs+0x19c>
 8014784:	2313      	movs	r3, #19
 8014786:	e357      	b.n	8014e38 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8014788:	2302      	movs	r3, #2
 801478a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	653b      	str	r3, [r7, #80]	@ 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8014792:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014796:	2b03      	cmp	r3, #3
 8014798:	d13c      	bne.n	8014814 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 801479a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801479c:	2b00      	cmp	r3, #0
 801479e:	d11b      	bne.n	80147d8 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 80147a0:	693b      	ldr	r3, [r7, #16]
 80147a2:	0c5b      	lsrs	r3, r3, #17
 80147a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80147a6:	2300      	movs	r3, #0
 80147a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80147aa:	2301      	movs	r3, #1
 80147ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80147ae:	e005      	b.n	80147bc <f_mkfs+0x1d0>
 80147b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80147b2:	3301      	adds	r3, #1
 80147b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80147b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80147b8:	005b      	lsls	r3, r3, #1
 80147ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80147bc:	4a2d      	ldr	r2, [pc, #180]	@ (8014874 <f_mkfs+0x288>)
 80147be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80147c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d007      	beq.n	80147d8 <f_mkfs+0x1ec>
 80147c8:	4a2a      	ldr	r2, [pc, #168]	@ (8014874 <f_mkfs+0x288>)
 80147ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80147cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80147d0:	461a      	mov	r2, r3
 80147d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80147d4:	4293      	cmp	r3, r2
 80147d6:	d2eb      	bcs.n	80147b0 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 80147d8:	693a      	ldr	r2, [r7, #16]
 80147da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80147dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80147e0:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 80147e2:	6a3b      	ldr	r3, [r7, #32]
 80147e4:	3302      	adds	r3, #2
 80147e6:	009a      	lsls	r2, r3, #2
 80147e8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80147ea:	4413      	add	r3, r2
 80147ec:	1e5a      	subs	r2, r3, #1
 80147ee:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80147f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80147f4:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 80147f6:	2320      	movs	r3, #32
 80147f8:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = 0;		/* No static directory */
 80147fa:	2300      	movs	r3, #0
 80147fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 80147fe:	6a3b      	ldr	r3, [r7, #32]
 8014800:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8014804:	4293      	cmp	r3, r2
 8014806:	d903      	bls.n	8014810 <f_mkfs+0x224>
 8014808:	6a3b      	ldr	r3, [r7, #32]
 801480a:	4a1b      	ldr	r2, [pc, #108]	@ (8014878 <f_mkfs+0x28c>)
 801480c:	4293      	cmp	r3, r2
 801480e:	d952      	bls.n	80148b6 <f_mkfs+0x2ca>
 8014810:	230e      	movs	r3, #14
 8014812:	e311      	b.n	8014e38 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8014814:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014816:	2b00      	cmp	r3, #0
 8014818:	d11b      	bne.n	8014852 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 801481a:	693b      	ldr	r3, [r7, #16]
 801481c:	0b1b      	lsrs	r3, r3, #12
 801481e:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8014820:	2300      	movs	r3, #0
 8014822:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014824:	2301      	movs	r3, #1
 8014826:	653b      	str	r3, [r7, #80]	@ 0x50
 8014828:	e005      	b.n	8014836 <f_mkfs+0x24a>
 801482a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801482c:	3301      	adds	r3, #1
 801482e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014830:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014832:	005b      	lsls	r3, r3, #1
 8014834:	653b      	str	r3, [r7, #80]	@ 0x50
 8014836:	4a11      	ldr	r2, [pc, #68]	@ (801487c <f_mkfs+0x290>)
 8014838:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801483a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d007      	beq.n	8014852 <f_mkfs+0x266>
 8014842:	4a0e      	ldr	r2, [pc, #56]	@ (801487c <f_mkfs+0x290>)
 8014844:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014846:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801484a:	461a      	mov	r2, r3
 801484c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801484e:	4293      	cmp	r3, r2
 8014850:	d2eb      	bcs.n	801482a <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 8014852:	693a      	ldr	r2, [r7, #16]
 8014854:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014856:	fbb2 f3f3 	udiv	r3, r2, r3
 801485a:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 801485c:	6a3b      	ldr	r3, [r7, #32]
 801485e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8014862:	4293      	cmp	r3, r2
 8014864:	d90c      	bls.n	8014880 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8014866:	6a3b      	ldr	r3, [r7, #32]
 8014868:	3302      	adds	r3, #2
 801486a:	005b      	lsls	r3, r3, #1
 801486c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801486e:	e012      	b.n	8014896 <f_mkfs+0x2aa>
 8014870:	20002b24 	.word	0x20002b24
 8014874:	0801cd98 	.word	0x0801cd98
 8014878:	0ffffff5 	.word	0x0ffffff5
 801487c:	0801cda8 	.word	0x0801cda8
				} else {
					fmt = FS_FAT12;
 8014880:	2301      	movs	r3, #1
 8014882:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8014886:	6a3a      	ldr	r2, [r7, #32]
 8014888:	4613      	mov	r3, r2
 801488a:	005b      	lsls	r3, r3, #1
 801488c:	4413      	add	r3, r2
 801488e:	3301      	adds	r3, #1
 8014890:	085b      	lsrs	r3, r3, #1
 8014892:	3303      	adds	r3, #3
 8014894:	65fb      	str	r3, [r7, #92]	@ 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8014896:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8014898:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801489a:	4413      	add	r3, r2
 801489c:	1e5a      	subs	r2, r3, #1
 801489e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80148a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80148a4:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 80148a6:	2301      	movs	r3, #1
 80148a8:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 80148aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80148ac:	015a      	lsls	r2, r3, #5
 80148ae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80148b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80148b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 80148b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80148b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80148ba:	4413      	add	r3, r2
 80148bc:	65bb      	str	r3, [r7, #88]	@ 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 80148be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80148c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80148c2:	fb03 f202 	mul.w	r2, r3, r2
 80148c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80148c8:	4413      	add	r3, r2
 80148ca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80148cc:	4413      	add	r3, r2
 80148ce:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 80148d0:	697a      	ldr	r2, [r7, #20]
 80148d2:	69fb      	ldr	r3, [r7, #28]
 80148d4:	4413      	add	r3, r2
 80148d6:	1e5a      	subs	r2, r3, #1
 80148d8:	697b      	ldr	r3, [r7, #20]
 80148da:	425b      	negs	r3, r3
 80148dc:	401a      	ands	r2, r3
 80148de:	69fb      	ldr	r3, [r7, #28]
 80148e0:	1ad3      	subs	r3, r2, r3
 80148e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 80148e4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80148e8:	2b03      	cmp	r3, #3
 80148ea:	d108      	bne.n	80148fe <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 80148ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80148ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80148f0:	4413      	add	r3, r2
 80148f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80148f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80148f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80148f8:	4413      	add	r3, r2
 80148fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80148fc:	e006      	b.n	801490c <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 80148fe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014900:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014902:	fbb2 f3f3 	udiv	r3, r2, r3
 8014906:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8014908:	4413      	add	r3, r2
 801490a:	66bb      	str	r3, [r7, #104]	@ 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 801490c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801490e:	011a      	lsls	r2, r3, #4
 8014910:	69fb      	ldr	r3, [r7, #28]
 8014912:	441a      	add	r2, r3
 8014914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014916:	1ad2      	subs	r2, r2, r3
 8014918:	693b      	ldr	r3, [r7, #16]
 801491a:	429a      	cmp	r2, r3
 801491c:	d901      	bls.n	8014922 <f_mkfs+0x336>
 801491e:	230e      	movs	r3, #14
 8014920:	e28a      	b.n	8014e38 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8014922:	693a      	ldr	r2, [r7, #16]
 8014924:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014926:	1ad2      	subs	r2, r2, r3
 8014928:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801492a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801492c:	fb01 f303 	mul.w	r3, r1, r3
 8014930:	1ad2      	subs	r2, r2, r3
 8014932:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014934:	1ad2      	subs	r2, r2, r3
 8014936:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014938:	fbb2 f3f3 	udiv	r3, r2, r3
 801493c:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 801493e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014942:	2b03      	cmp	r3, #3
 8014944:	d10f      	bne.n	8014966 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8014946:	6a3b      	ldr	r3, [r7, #32]
 8014948:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801494c:	4293      	cmp	r3, r2
 801494e:	d80a      	bhi.n	8014966 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	2b00      	cmp	r3, #0
 8014954:	d105      	bne.n	8014962 <f_mkfs+0x376>
 8014956:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014958:	085b      	lsrs	r3, r3, #1
 801495a:	607b      	str	r3, [r7, #4]
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d144      	bne.n	80149ec <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 8014962:	230e      	movs	r3, #14
 8014964:	e268      	b.n	8014e38 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8014966:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801496a:	2b02      	cmp	r3, #2
 801496c:	d133      	bne.n	80149d6 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 801496e:	6a3b      	ldr	r3, [r7, #32]
 8014970:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8014974:	4293      	cmp	r3, r2
 8014976:	d91e      	bls.n	80149b6 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	2b00      	cmp	r3, #0
 801497c:	d107      	bne.n	801498e <f_mkfs+0x3a2>
 801497e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014980:	005b      	lsls	r3, r3, #1
 8014982:	2b40      	cmp	r3, #64	@ 0x40
 8014984:	d803      	bhi.n	801498e <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8014986:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014988:	005b      	lsls	r3, r3, #1
 801498a:	607b      	str	r3, [r7, #4]
 801498c:	e033      	b.n	80149f6 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 801498e:	7afb      	ldrb	r3, [r7, #11]
 8014990:	f003 0302 	and.w	r3, r3, #2
 8014994:	2b00      	cmp	r3, #0
 8014996:	d003      	beq.n	80149a0 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8014998:	2303      	movs	r3, #3
 801499a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 801499e:	e02a      	b.n	80149f6 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d105      	bne.n	80149b2 <f_mkfs+0x3c6>
 80149a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80149a8:	005b      	lsls	r3, r3, #1
 80149aa:	607b      	str	r3, [r7, #4]
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	2b80      	cmp	r3, #128	@ 0x80
 80149b0:	d91e      	bls.n	80149f0 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 80149b2:	230e      	movs	r3, #14
 80149b4:	e240      	b.n	8014e38 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 80149b6:	6a3b      	ldr	r3, [r7, #32]
 80149b8:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80149bc:	4293      	cmp	r3, r2
 80149be:	d80a      	bhi.n	80149d6 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d105      	bne.n	80149d2 <f_mkfs+0x3e6>
 80149c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80149c8:	005b      	lsls	r3, r3, #1
 80149ca:	607b      	str	r3, [r7, #4]
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	2b80      	cmp	r3, #128	@ 0x80
 80149d0:	d910      	bls.n	80149f4 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 80149d2:	230e      	movs	r3, #14
 80149d4:	e230      	b.n	8014e38 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 80149d6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80149da:	2b01      	cmp	r3, #1
 80149dc:	d10c      	bne.n	80149f8 <f_mkfs+0x40c>
 80149de:	6a3b      	ldr	r3, [r7, #32]
 80149e0:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80149e4:	4293      	cmp	r3, r2
 80149e6:	d907      	bls.n	80149f8 <f_mkfs+0x40c>
 80149e8:	230e      	movs	r3, #14
 80149ea:	e225      	b.n	8014e38 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80149ec:	bf00      	nop
 80149ee:	e6ce      	b.n	801478e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80149f0:	bf00      	nop
 80149f2:	e6cc      	b.n	801478e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80149f4:	bf00      	nop
			pau = au;
 80149f6:	e6ca      	b.n	801478e <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 80149f8:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 80149fa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80149fc:	461a      	mov	r2, r3
 80149fe:	2100      	movs	r1, #0
 8014a00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014a02:	f7fd fe81 	bl	8012708 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8014a06:	220b      	movs	r2, #11
 8014a08:	49b2      	ldr	r1, [pc, #712]	@ (8014cd4 <f_mkfs+0x6e8>)
 8014a0a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014a0c:	f7fd fe5b 	bl	80126c6 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8014a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a12:	330b      	adds	r3, #11
 8014a14:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8014a16:	4611      	mov	r1, r2
 8014a18:	4618      	mov	r0, r3
 8014a1a:	f7fd fe0d 	bl	8012638 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8014a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a20:	330d      	adds	r3, #13
 8014a22:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014a24:	b2d2      	uxtb	r2, r2
 8014a26:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8014a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a2a:	330e      	adds	r3, #14
 8014a2c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014a2e:	b292      	uxth	r2, r2
 8014a30:	4611      	mov	r1, r2
 8014a32:	4618      	mov	r0, r3
 8014a34:	f7fd fe00 	bl	8012638 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8014a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a3a:	3310      	adds	r3, #16
 8014a3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014a3e:	b2d2      	uxtb	r2, r2
 8014a40:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8014a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a44:	f103 0211 	add.w	r2, r3, #17
 8014a48:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014a4c:	2b03      	cmp	r3, #3
 8014a4e:	d002      	beq.n	8014a56 <f_mkfs+0x46a>
 8014a50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014a52:	b29b      	uxth	r3, r3
 8014a54:	e000      	b.n	8014a58 <f_mkfs+0x46c>
 8014a56:	2300      	movs	r3, #0
 8014a58:	4619      	mov	r1, r3
 8014a5a:	4610      	mov	r0, r2
 8014a5c:	f7fd fdec 	bl	8012638 <st_word>
		if (sz_vol < 0x10000) {
 8014a60:	693b      	ldr	r3, [r7, #16]
 8014a62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014a66:	d208      	bcs.n	8014a7a <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8014a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a6a:	3313      	adds	r3, #19
 8014a6c:	693a      	ldr	r2, [r7, #16]
 8014a6e:	b292      	uxth	r2, r2
 8014a70:	4611      	mov	r1, r2
 8014a72:	4618      	mov	r0, r3
 8014a74:	f7fd fde0 	bl	8012638 <st_word>
 8014a78:	e006      	b.n	8014a88 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8014a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a7c:	3320      	adds	r3, #32
 8014a7e:	693a      	ldr	r2, [r7, #16]
 8014a80:	4611      	mov	r1, r2
 8014a82:	4618      	mov	r0, r3
 8014a84:	f7fd fdf3 	bl	801266e <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8014a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a8a:	3315      	adds	r3, #21
 8014a8c:	22f8      	movs	r2, #248	@ 0xf8
 8014a8e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8014a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a92:	3318      	adds	r3, #24
 8014a94:	213f      	movs	r1, #63	@ 0x3f
 8014a96:	4618      	mov	r0, r3
 8014a98:	f7fd fdce 	bl	8012638 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8014a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a9e:	331a      	adds	r3, #26
 8014aa0:	21ff      	movs	r1, #255	@ 0xff
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	f7fd fdc8 	bl	8012638 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8014aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014aaa:	331c      	adds	r3, #28
 8014aac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014aae:	4618      	mov	r0, r3
 8014ab0:	f7fd fddd 	bl	801266e <st_dword>
		if (fmt == FS_FAT32) {
 8014ab4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014ab8:	2b03      	cmp	r3, #3
 8014aba:	d131      	bne.n	8014b20 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8014abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014abe:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 8014ac2:	f7fd f8f9 	bl	8011cb8 <get_fattime>
 8014ac6:	4603      	mov	r3, r0
 8014ac8:	4619      	mov	r1, r3
 8014aca:	4620      	mov	r0, r4
 8014acc:	f7fd fdcf 	bl	801266e <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8014ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ad2:	3324      	adds	r3, #36	@ 0x24
 8014ad4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8014ad6:	4618      	mov	r0, r3
 8014ad8:	f7fd fdc9 	bl	801266e <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8014adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ade:	332c      	adds	r3, #44	@ 0x2c
 8014ae0:	2102      	movs	r1, #2
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	f7fd fdc3 	bl	801266e <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8014ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014aea:	3330      	adds	r3, #48	@ 0x30
 8014aec:	2101      	movs	r1, #1
 8014aee:	4618      	mov	r0, r3
 8014af0:	f7fd fda2 	bl	8012638 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8014af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014af6:	3332      	adds	r3, #50	@ 0x32
 8014af8:	2106      	movs	r1, #6
 8014afa:	4618      	mov	r0, r3
 8014afc:	f7fd fd9c 	bl	8012638 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8014b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b02:	3340      	adds	r3, #64	@ 0x40
 8014b04:	2280      	movs	r2, #128	@ 0x80
 8014b06:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8014b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b0a:	3342      	adds	r3, #66	@ 0x42
 8014b0c:	2229      	movs	r2, #41	@ 0x29
 8014b0e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8014b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b12:	3347      	adds	r3, #71	@ 0x47
 8014b14:	2213      	movs	r2, #19
 8014b16:	4970      	ldr	r1, [pc, #448]	@ (8014cd8 <f_mkfs+0x6ec>)
 8014b18:	4618      	mov	r0, r3
 8014b1a:	f7fd fdd4 	bl	80126c6 <mem_cpy>
 8014b1e:	e020      	b.n	8014b62 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8014b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b22:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 8014b26:	f7fd f8c7 	bl	8011cb8 <get_fattime>
 8014b2a:	4603      	mov	r3, r0
 8014b2c:	4619      	mov	r1, r3
 8014b2e:	4620      	mov	r0, r4
 8014b30:	f7fd fd9d 	bl	801266e <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8014b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b36:	3316      	adds	r3, #22
 8014b38:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8014b3a:	b292      	uxth	r2, r2
 8014b3c:	4611      	mov	r1, r2
 8014b3e:	4618      	mov	r0, r3
 8014b40:	f7fd fd7a 	bl	8012638 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8014b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b46:	3324      	adds	r3, #36	@ 0x24
 8014b48:	2280      	movs	r2, #128	@ 0x80
 8014b4a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8014b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b4e:	3326      	adds	r3, #38	@ 0x26
 8014b50:	2229      	movs	r2, #41	@ 0x29
 8014b52:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8014b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b56:	332b      	adds	r3, #43	@ 0x2b
 8014b58:	2213      	movs	r2, #19
 8014b5a:	4960      	ldr	r1, [pc, #384]	@ (8014cdc <f_mkfs+0x6f0>)
 8014b5c:	4618      	mov	r0, r3
 8014b5e:	f7fd fdb2 	bl	80126c6 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8014b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b64:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014b68:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	f7fd fd63 	bl	8012638 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8014b72:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014b76:	2301      	movs	r3, #1
 8014b78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014b7a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014b7c:	f7fd fce2 	bl	8012544 <disk_write>
 8014b80:	4603      	mov	r3, r0
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d001      	beq.n	8014b8a <f_mkfs+0x59e>
 8014b86:	2301      	movs	r3, #1
 8014b88:	e156      	b.n	8014e38 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8014b8a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014b8e:	2b03      	cmp	r3, #3
 8014b90:	d140      	bne.n	8014c14 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8014b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b94:	1d9a      	adds	r2, r3, #6
 8014b96:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014b9a:	2301      	movs	r3, #1
 8014b9c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014b9e:	f7fd fcd1 	bl	8012544 <disk_write>
			mem_set(buf, 0, ss);
 8014ba2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014ba4:	461a      	mov	r2, r3
 8014ba6:	2100      	movs	r1, #0
 8014ba8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014baa:	f7fd fdad 	bl	8012708 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8014bae:	494c      	ldr	r1, [pc, #304]	@ (8014ce0 <f_mkfs+0x6f4>)
 8014bb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014bb2:	f7fd fd5c 	bl	801266e <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8014bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bb8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8014bbc:	4949      	ldr	r1, [pc, #292]	@ (8014ce4 <f_mkfs+0x6f8>)
 8014bbe:	4618      	mov	r0, r3
 8014bc0:	f7fd fd55 	bl	801266e <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8014bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bc6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8014bca:	6a3b      	ldr	r3, [r7, #32]
 8014bcc:	3b01      	subs	r3, #1
 8014bce:	4619      	mov	r1, r3
 8014bd0:	4610      	mov	r0, r2
 8014bd2:	f7fd fd4c 	bl	801266e <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8014bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bd8:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8014bdc:	2102      	movs	r1, #2
 8014bde:	4618      	mov	r0, r3
 8014be0:	f7fd fd45 	bl	801266e <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8014be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014be6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014bea:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8014bee:	4618      	mov	r0, r3
 8014bf0:	f7fd fd22 	bl	8012638 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8014bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014bf6:	1dda      	adds	r2, r3, #7
 8014bf8:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014bfc:	2301      	movs	r3, #1
 8014bfe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014c00:	f7fd fca0 	bl	8012544 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8014c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c06:	1c5a      	adds	r2, r3, #1
 8014c08:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014c0c:	2301      	movs	r3, #1
 8014c0e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014c10:	f7fd fc98 	bl	8012544 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8014c14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014c16:	2100      	movs	r1, #0
 8014c18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014c1a:	f7fd fd75 	bl	8012708 <mem_set>
		sect = b_fat;		/* FAT start sector */
 8014c1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014c20:	667b      	str	r3, [r7, #100]	@ 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8014c22:	2300      	movs	r3, #0
 8014c24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014c26:	e04b      	b.n	8014cc0 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8014c28:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014c2c:	2b03      	cmp	r3, #3
 8014c2e:	d113      	bne.n	8014c58 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8014c30:	f06f 0107 	mvn.w	r1, #7
 8014c34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014c36:	f7fd fd1a 	bl	801266e <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8014c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c3c:	3304      	adds	r3, #4
 8014c3e:	f04f 31ff 	mov.w	r1, #4294967295
 8014c42:	4618      	mov	r0, r3
 8014c44:	f7fd fd13 	bl	801266e <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8014c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c4a:	3308      	adds	r3, #8
 8014c4c:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8014c50:	4618      	mov	r0, r3
 8014c52:	f7fd fd0c 	bl	801266e <st_dword>
 8014c56:	e00b      	b.n	8014c70 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8014c58:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014c5c:	2b01      	cmp	r3, #1
 8014c5e:	d101      	bne.n	8014c64 <f_mkfs+0x678>
 8014c60:	4b21      	ldr	r3, [pc, #132]	@ (8014ce8 <f_mkfs+0x6fc>)
 8014c62:	e001      	b.n	8014c68 <f_mkfs+0x67c>
 8014c64:	f06f 0307 	mvn.w	r3, #7
 8014c68:	4619      	mov	r1, r3
 8014c6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014c6c:	f7fd fcff 	bl	801266e <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8014c70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014c72:	663b      	str	r3, [r7, #96]	@ 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8014c74:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8014c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c78:	4293      	cmp	r3, r2
 8014c7a:	bf28      	it	cs
 8014c7c:	4613      	movcs	r3, r2
 8014c7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8014c80:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014c84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014c86:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8014c88:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014c8a:	f7fd fc5b 	bl	8012544 <disk_write>
 8014c8e:	4603      	mov	r3, r0
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d001      	beq.n	8014c98 <f_mkfs+0x6ac>
 8014c94:	2301      	movs	r3, #1
 8014c96:	e0cf      	b.n	8014e38 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8014c98:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014c9a:	461a      	mov	r2, r3
 8014c9c:	2100      	movs	r1, #0
 8014c9e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014ca0:	f7fd fd32 	bl	8012708 <mem_set>
				sect += n; nsect -= n;
 8014ca4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8014ca6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014ca8:	4413      	add	r3, r2
 8014caa:	667b      	str	r3, [r7, #100]	@ 0x64
 8014cac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8014cae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014cb0:	1ad3      	subs	r3, r2, r3
 8014cb2:	663b      	str	r3, [r7, #96]	@ 0x60
			} while (nsect);
 8014cb4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d1dc      	bne.n	8014c74 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8014cba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014cbc:	3301      	adds	r3, #1
 8014cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014cc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014cc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014cc4:	429a      	cmp	r2, r3
 8014cc6:	d3af      	bcc.n	8014c28 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8014cc8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014ccc:	2b03      	cmp	r3, #3
 8014cce:	d10d      	bne.n	8014cec <f_mkfs+0x700>
 8014cd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014cd2:	e00c      	b.n	8014cee <f_mkfs+0x702>
 8014cd4:	0801cc9c 	.word	0x0801cc9c
 8014cd8:	0801cca8 	.word	0x0801cca8
 8014cdc:	0801ccbc 	.word	0x0801ccbc
 8014ce0:	41615252 	.word	0x41615252
 8014ce4:	61417272 	.word	0x61417272
 8014ce8:	00fffff8 	.word	0x00fffff8
 8014cec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014cee:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8014cf0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8014cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cf4:	4293      	cmp	r3, r2
 8014cf6:	bf28      	it	cs
 8014cf8:	4613      	movcs	r3, r2
 8014cfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8014cfc:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014d00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014d02:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8014d04:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014d06:	f7fd fc1d 	bl	8012544 <disk_write>
 8014d0a:	4603      	mov	r3, r0
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d001      	beq.n	8014d14 <f_mkfs+0x728>
 8014d10:	2301      	movs	r3, #1
 8014d12:	e091      	b.n	8014e38 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8014d14:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8014d16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014d18:	4413      	add	r3, r2
 8014d1a:	667b      	str	r3, [r7, #100]	@ 0x64
 8014d1c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8014d1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014d20:	1ad3      	subs	r3, r2, r3
 8014d22:	663b      	str	r3, [r7, #96]	@ 0x60
		} while (nsect);
 8014d24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d1e2      	bne.n	8014cf0 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8014d2a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014d2e:	2b03      	cmp	r3, #3
 8014d30:	d103      	bne.n	8014d3a <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8014d32:	230c      	movs	r3, #12
 8014d34:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8014d38:	e010      	b.n	8014d5c <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 8014d3a:	693b      	ldr	r3, [r7, #16]
 8014d3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014d40:	d303      	bcc.n	8014d4a <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8014d42:	2306      	movs	r3, #6
 8014d44:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8014d48:	e008      	b.n	8014d5c <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8014d4a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014d4e:	2b02      	cmp	r3, #2
 8014d50:	d101      	bne.n	8014d56 <f_mkfs+0x76a>
 8014d52:	2304      	movs	r3, #4
 8014d54:	e000      	b.n	8014d58 <f_mkfs+0x76c>
 8014d56:	2301      	movs	r3, #1
 8014d58:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8014d5c:	7afb      	ldrb	r3, [r7, #11]
 8014d5e:	f003 0308 	and.w	r3, r3, #8
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d15b      	bne.n	8014e1e <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8014d66:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014d68:	461a      	mov	r2, r3
 8014d6a:	2100      	movs	r1, #0
 8014d6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014d6e:	f7fd fccb 	bl	8012708 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8014d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d74:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014d78:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8014d7c:	4618      	mov	r0, r3
 8014d7e:	f7fd fc5b 	bl	8012638 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8014d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d84:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8014d88:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8014d8a:	69bb      	ldr	r3, [r7, #24]
 8014d8c:	2200      	movs	r2, #0
 8014d8e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8014d90:	69bb      	ldr	r3, [r7, #24]
 8014d92:	3301      	adds	r3, #1
 8014d94:	2201      	movs	r2, #1
 8014d96:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8014d98:	69bb      	ldr	r3, [r7, #24]
 8014d9a:	3302      	adds	r3, #2
 8014d9c:	2201      	movs	r2, #1
 8014d9e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8014da0:	69bb      	ldr	r3, [r7, #24]
 8014da2:	3303      	adds	r3, #3
 8014da4:	2200      	movs	r2, #0
 8014da6:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8014da8:	69bb      	ldr	r3, [r7, #24]
 8014daa:	3304      	adds	r3, #4
 8014dac:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8014db0:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8014db2:	693a      	ldr	r2, [r7, #16]
 8014db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014db6:	441a      	add	r2, r3
 8014db8:	4b21      	ldr	r3, [pc, #132]	@ (8014e40 <f_mkfs+0x854>)
 8014dba:	fba3 1302 	umull	r1, r3, r3, r2
 8014dbe:	1ad2      	subs	r2, r2, r3
 8014dc0:	0852      	lsrs	r2, r2, #1
 8014dc2:	4413      	add	r3, r2
 8014dc4:	0b5b      	lsrs	r3, r3, #13
 8014dc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8014dc8:	69bb      	ldr	r3, [r7, #24]
 8014dca:	3305      	adds	r3, #5
 8014dcc:	22fe      	movs	r2, #254	@ 0xfe
 8014dce:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8014dd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014dd2:	089b      	lsrs	r3, r3, #2
 8014dd4:	b2da      	uxtb	r2, r3
 8014dd6:	69bb      	ldr	r3, [r7, #24]
 8014dd8:	3306      	adds	r3, #6
 8014dda:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 8014dde:	b2d2      	uxtb	r2, r2
 8014de0:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8014de2:	69bb      	ldr	r3, [r7, #24]
 8014de4:	3307      	adds	r3, #7
 8014de6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014de8:	b2d2      	uxtb	r2, r2
 8014dea:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8014dec:	69bb      	ldr	r3, [r7, #24]
 8014dee:	3308      	adds	r3, #8
 8014df0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014df2:	4618      	mov	r0, r3
 8014df4:	f7fd fc3b 	bl	801266e <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8014df8:	69bb      	ldr	r3, [r7, #24]
 8014dfa:	330c      	adds	r3, #12
 8014dfc:	693a      	ldr	r2, [r7, #16]
 8014dfe:	4611      	mov	r1, r2
 8014e00:	4618      	mov	r0, r3
 8014e02:	f7fd fc34 	bl	801266e <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8014e06:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014e0a:	2301      	movs	r3, #1
 8014e0c:	2200      	movs	r2, #0
 8014e0e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014e10:	f7fd fb98 	bl	8012544 <disk_write>
 8014e14:	4603      	mov	r3, r0
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d001      	beq.n	8014e1e <f_mkfs+0x832>
 8014e1a:	2301      	movs	r3, #1
 8014e1c:	e00c      	b.n	8014e38 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8014e1e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8014e22:	2200      	movs	r2, #0
 8014e24:	2100      	movs	r1, #0
 8014e26:	4618      	mov	r0, r3
 8014e28:	f7fd fbac 	bl	8012584 <disk_ioctl>
 8014e2c:	4603      	mov	r3, r0
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d001      	beq.n	8014e36 <f_mkfs+0x84a>
 8014e32:	2301      	movs	r3, #1
 8014e34:	e000      	b.n	8014e38 <f_mkfs+0x84c>

	return FR_OK;
 8014e36:	2300      	movs	r3, #0
}
 8014e38:	4618      	mov	r0, r3
 8014e3a:	3774      	adds	r7, #116	@ 0x74
 8014e3c:	46bd      	mov	sp, r7
 8014e3e:	bd90      	pop	{r4, r7, pc}
 8014e40:	0515565b 	.word	0x0515565b

08014e44 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014e44:	b480      	push	{r7}
 8014e46:	b087      	sub	sp, #28
 8014e48:	af00      	add	r7, sp, #0
 8014e4a:	60f8      	str	r0, [r7, #12]
 8014e4c:	60b9      	str	r1, [r7, #8]
 8014e4e:	4613      	mov	r3, r2
 8014e50:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014e52:	2301      	movs	r3, #1
 8014e54:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014e56:	2300      	movs	r3, #0
 8014e58:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014e5a:	4b1f      	ldr	r3, [pc, #124]	@ (8014ed8 <FATFS_LinkDriverEx+0x94>)
 8014e5c:	7a5b      	ldrb	r3, [r3, #9]
 8014e5e:	b2db      	uxtb	r3, r3
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d131      	bne.n	8014ec8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014e64:	4b1c      	ldr	r3, [pc, #112]	@ (8014ed8 <FATFS_LinkDriverEx+0x94>)
 8014e66:	7a5b      	ldrb	r3, [r3, #9]
 8014e68:	b2db      	uxtb	r3, r3
 8014e6a:	461a      	mov	r2, r3
 8014e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8014ed8 <FATFS_LinkDriverEx+0x94>)
 8014e6e:	2100      	movs	r1, #0
 8014e70:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014e72:	4b19      	ldr	r3, [pc, #100]	@ (8014ed8 <FATFS_LinkDriverEx+0x94>)
 8014e74:	7a5b      	ldrb	r3, [r3, #9]
 8014e76:	b2db      	uxtb	r3, r3
 8014e78:	4a17      	ldr	r2, [pc, #92]	@ (8014ed8 <FATFS_LinkDriverEx+0x94>)
 8014e7a:	009b      	lsls	r3, r3, #2
 8014e7c:	4413      	add	r3, r2
 8014e7e:	68fa      	ldr	r2, [r7, #12]
 8014e80:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014e82:	4b15      	ldr	r3, [pc, #84]	@ (8014ed8 <FATFS_LinkDriverEx+0x94>)
 8014e84:	7a5b      	ldrb	r3, [r3, #9]
 8014e86:	b2db      	uxtb	r3, r3
 8014e88:	461a      	mov	r2, r3
 8014e8a:	4b13      	ldr	r3, [pc, #76]	@ (8014ed8 <FATFS_LinkDriverEx+0x94>)
 8014e8c:	4413      	add	r3, r2
 8014e8e:	79fa      	ldrb	r2, [r7, #7]
 8014e90:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014e92:	4b11      	ldr	r3, [pc, #68]	@ (8014ed8 <FATFS_LinkDriverEx+0x94>)
 8014e94:	7a5b      	ldrb	r3, [r3, #9]
 8014e96:	b2db      	uxtb	r3, r3
 8014e98:	1c5a      	adds	r2, r3, #1
 8014e9a:	b2d1      	uxtb	r1, r2
 8014e9c:	4a0e      	ldr	r2, [pc, #56]	@ (8014ed8 <FATFS_LinkDriverEx+0x94>)
 8014e9e:	7251      	strb	r1, [r2, #9]
 8014ea0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014ea2:	7dbb      	ldrb	r3, [r7, #22]
 8014ea4:	3330      	adds	r3, #48	@ 0x30
 8014ea6:	b2da      	uxtb	r2, r3
 8014ea8:	68bb      	ldr	r3, [r7, #8]
 8014eaa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014eac:	68bb      	ldr	r3, [r7, #8]
 8014eae:	3301      	adds	r3, #1
 8014eb0:	223a      	movs	r2, #58	@ 0x3a
 8014eb2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014eb4:	68bb      	ldr	r3, [r7, #8]
 8014eb6:	3302      	adds	r3, #2
 8014eb8:	222f      	movs	r2, #47	@ 0x2f
 8014eba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014ebc:	68bb      	ldr	r3, [r7, #8]
 8014ebe:	3303      	adds	r3, #3
 8014ec0:	2200      	movs	r2, #0
 8014ec2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014ec4:	2300      	movs	r3, #0
 8014ec6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8014eca:	4618      	mov	r0, r3
 8014ecc:	371c      	adds	r7, #28
 8014ece:	46bd      	mov	sp, r7
 8014ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ed4:	4770      	bx	lr
 8014ed6:	bf00      	nop
 8014ed8:	20002b2c 	.word	0x20002b2c

08014edc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014edc:	b580      	push	{r7, lr}
 8014ede:	b082      	sub	sp, #8
 8014ee0:	af00      	add	r7, sp, #0
 8014ee2:	6078      	str	r0, [r7, #4]
 8014ee4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014ee6:	2200      	movs	r2, #0
 8014ee8:	6839      	ldr	r1, [r7, #0]
 8014eea:	6878      	ldr	r0, [r7, #4]
 8014eec:	f7ff ffaa 	bl	8014e44 <FATFS_LinkDriverEx>
 8014ef0:	4603      	mov	r3, r0
}
 8014ef2:	4618      	mov	r0, r3
 8014ef4:	3708      	adds	r7, #8
 8014ef6:	46bd      	mov	sp, r7
 8014ef8:	bd80      	pop	{r7, pc}

08014efa <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8014efa:	b480      	push	{r7}
 8014efc:	b085      	sub	sp, #20
 8014efe:	af00      	add	r7, sp, #0
 8014f00:	4603      	mov	r3, r0
 8014f02:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8014f04:	2300      	movs	r3, #0
 8014f06:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8014f08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014f0c:	2b84      	cmp	r3, #132	@ 0x84
 8014f0e:	d005      	beq.n	8014f1c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8014f10:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	4413      	add	r3, r2
 8014f18:	3303      	adds	r3, #3
 8014f1a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8014f1c:	68fb      	ldr	r3, [r7, #12]
}
 8014f1e:	4618      	mov	r0, r3
 8014f20:	3714      	adds	r7, #20
 8014f22:	46bd      	mov	sp, r7
 8014f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f28:	4770      	bx	lr

08014f2a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8014f2a:	b480      	push	{r7}
 8014f2c:	b083      	sub	sp, #12
 8014f2e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014f30:	f3ef 8305 	mrs	r3, IPSR
 8014f34:	607b      	str	r3, [r7, #4]
  return(result);
 8014f36:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	bf14      	ite	ne
 8014f3c:	2301      	movne	r3, #1
 8014f3e:	2300      	moveq	r3, #0
 8014f40:	b2db      	uxtb	r3, r3
}
 8014f42:	4618      	mov	r0, r3
 8014f44:	370c      	adds	r7, #12
 8014f46:	46bd      	mov	sp, r7
 8014f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f4c:	4770      	bx	lr

08014f4e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8014f4e:	b580      	push	{r7, lr}
 8014f50:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8014f52:	f001 f9cd 	bl	80162f0 <vTaskStartScheduler>
  
  return osOK;
 8014f56:	2300      	movs	r3, #0
}
 8014f58:	4618      	mov	r0, r3
 8014f5a:	bd80      	pop	{r7, pc}

08014f5c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8014f5c:	b580      	push	{r7, lr}
 8014f5e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8014f60:	f001 fe2e 	bl	8016bc0 <xTaskGetSchedulerState>
 8014f64:	4603      	mov	r3, r0
 8014f66:	2b01      	cmp	r3, #1
 8014f68:	d101      	bne.n	8014f6e <osKernelRunning+0x12>
    return 0;
 8014f6a:	2300      	movs	r3, #0
 8014f6c:	e000      	b.n	8014f70 <osKernelRunning+0x14>
  else
    return 1;
 8014f6e:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8014f70:	4618      	mov	r0, r3
 8014f72:	bd80      	pop	{r7, pc}

08014f74 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8014f74:	b580      	push	{r7, lr}
 8014f76:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8014f78:	f7ff ffd7 	bl	8014f2a <inHandlerMode>
 8014f7c:	4603      	mov	r3, r0
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d003      	beq.n	8014f8a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8014f82:	f001 fad9 	bl	8016538 <xTaskGetTickCountFromISR>
 8014f86:	4603      	mov	r3, r0
 8014f88:	e002      	b.n	8014f90 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8014f8a:	f001 fac5 	bl	8016518 <xTaskGetTickCount>
 8014f8e:	4603      	mov	r3, r0
  }
}
 8014f90:	4618      	mov	r0, r3
 8014f92:	bd80      	pop	{r7, pc}

08014f94 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8014f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f96:	b089      	sub	sp, #36	@ 0x24
 8014f98:	af04      	add	r7, sp, #16
 8014f9a:	6078      	str	r0, [r7, #4]
 8014f9c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	695b      	ldr	r3, [r3, #20]
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d020      	beq.n	8014fe8 <osThreadCreate+0x54>
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	699b      	ldr	r3, [r3, #24]
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d01c      	beq.n	8014fe8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	685c      	ldr	r4, [r3, #4]
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	691e      	ldr	r6, [r3, #16]
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014fc0:	4618      	mov	r0, r3
 8014fc2:	f7ff ff9a 	bl	8014efa <makeFreeRtosPriority>
 8014fc6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	695b      	ldr	r3, [r3, #20]
 8014fcc:	687a      	ldr	r2, [r7, #4]
 8014fce:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014fd0:	9202      	str	r2, [sp, #8]
 8014fd2:	9301      	str	r3, [sp, #4]
 8014fd4:	9100      	str	r1, [sp, #0]
 8014fd6:	683b      	ldr	r3, [r7, #0]
 8014fd8:	4632      	mov	r2, r6
 8014fda:	4629      	mov	r1, r5
 8014fdc:	4620      	mov	r0, r4
 8014fde:	f000 ffa5 	bl	8015f2c <xTaskCreateStatic>
 8014fe2:	4603      	mov	r3, r0
 8014fe4:	60fb      	str	r3, [r7, #12]
 8014fe6:	e01c      	b.n	8015022 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	685c      	ldr	r4, [r3, #4]
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014ff4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	f7ff ff7c 	bl	8014efa <makeFreeRtosPriority>
 8015002:	4602      	mov	r2, r0
 8015004:	f107 030c 	add.w	r3, r7, #12
 8015008:	9301      	str	r3, [sp, #4]
 801500a:	9200      	str	r2, [sp, #0]
 801500c:	683b      	ldr	r3, [r7, #0]
 801500e:	4632      	mov	r2, r6
 8015010:	4629      	mov	r1, r5
 8015012:	4620      	mov	r0, r4
 8015014:	f000 fff0 	bl	8015ff8 <xTaskCreate>
 8015018:	4603      	mov	r3, r0
 801501a:	2b01      	cmp	r3, #1
 801501c:	d001      	beq.n	8015022 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801501e:	2300      	movs	r3, #0
 8015020:	e000      	b.n	8015024 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8015022:	68fb      	ldr	r3, [r7, #12]
}
 8015024:	4618      	mov	r0, r3
 8015026:	3714      	adds	r7, #20
 8015028:	46bd      	mov	sp, r7
 801502a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801502c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801502c:	b580      	push	{r7, lr}
 801502e:	b084      	sub	sp, #16
 8015030:	af00      	add	r7, sp, #0
 8015032:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	2b00      	cmp	r3, #0
 801503c:	d001      	beq.n	8015042 <osDelay+0x16>
 801503e:	68fb      	ldr	r3, [r7, #12]
 8015040:	e000      	b.n	8015044 <osDelay+0x18>
 8015042:	2301      	movs	r3, #1
 8015044:	4618      	mov	r0, r3
 8015046:	f001 f91b 	bl	8016280 <vTaskDelay>
  
  return osOK;
 801504a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801504c:	4618      	mov	r0, r3
 801504e:	3710      	adds	r7, #16
 8015050:	46bd      	mov	sp, r7
 8015052:	bd80      	pop	{r7, pc}

08015054 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8015054:	b590      	push	{r4, r7, lr}
 8015056:	b085      	sub	sp, #20
 8015058:	af02      	add	r7, sp, #8
 801505a:	6078      	str	r0, [r7, #4]
 801505c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	689b      	ldr	r3, [r3, #8]
 8015062:	2b00      	cmp	r3, #0
 8015064:	d011      	beq.n	801508a <osMessageCreate+0x36>
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	68db      	ldr	r3, [r3, #12]
 801506a:	2b00      	cmp	r3, #0
 801506c:	d00d      	beq.n	801508a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	6818      	ldr	r0, [r3, #0]
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	6859      	ldr	r1, [r3, #4]
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	689a      	ldr	r2, [r3, #8]
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	68db      	ldr	r3, [r3, #12]
 801507e:	2400      	movs	r4, #0
 8015080:	9400      	str	r4, [sp, #0]
 8015082:	f000 f9f9 	bl	8015478 <xQueueGenericCreateStatic>
 8015086:	4603      	mov	r3, r0
 8015088:	e008      	b.n	801509c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	6818      	ldr	r0, [r3, #0]
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	685b      	ldr	r3, [r3, #4]
 8015092:	2200      	movs	r2, #0
 8015094:	4619      	mov	r1, r3
 8015096:	f000 fa76 	bl	8015586 <xQueueGenericCreate>
 801509a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 801509c:	4618      	mov	r0, r3
 801509e:	370c      	adds	r7, #12
 80150a0:	46bd      	mov	sp, r7
 80150a2:	bd90      	pop	{r4, r7, pc}

080150a4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80150a4:	b580      	push	{r7, lr}
 80150a6:	b086      	sub	sp, #24
 80150a8:	af00      	add	r7, sp, #0
 80150aa:	60f8      	str	r0, [r7, #12]
 80150ac:	60b9      	str	r1, [r7, #8]
 80150ae:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80150b0:	2300      	movs	r3, #0
 80150b2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80150b8:	697b      	ldr	r3, [r7, #20]
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d101      	bne.n	80150c2 <osMessagePut+0x1e>
    ticks = 1;
 80150be:	2301      	movs	r3, #1
 80150c0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80150c2:	f7ff ff32 	bl	8014f2a <inHandlerMode>
 80150c6:	4603      	mov	r3, r0
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d018      	beq.n	80150fe <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80150cc:	f107 0210 	add.w	r2, r7, #16
 80150d0:	f107 0108 	add.w	r1, r7, #8
 80150d4:	2300      	movs	r3, #0
 80150d6:	68f8      	ldr	r0, [r7, #12]
 80150d8:	f000 fbc2 	bl	8015860 <xQueueGenericSendFromISR>
 80150dc:	4603      	mov	r3, r0
 80150de:	2b01      	cmp	r3, #1
 80150e0:	d001      	beq.n	80150e6 <osMessagePut+0x42>
      return osErrorOS;
 80150e2:	23ff      	movs	r3, #255	@ 0xff
 80150e4:	e018      	b.n	8015118 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80150e6:	693b      	ldr	r3, [r7, #16]
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d014      	beq.n	8015116 <osMessagePut+0x72>
 80150ec:	4b0c      	ldr	r3, [pc, #48]	@ (8015120 <osMessagePut+0x7c>)
 80150ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80150f2:	601a      	str	r2, [r3, #0]
 80150f4:	f3bf 8f4f 	dsb	sy
 80150f8:	f3bf 8f6f 	isb	sy
 80150fc:	e00b      	b.n	8015116 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80150fe:	f107 0108 	add.w	r1, r7, #8
 8015102:	2300      	movs	r3, #0
 8015104:	697a      	ldr	r2, [r7, #20]
 8015106:	68f8      	ldr	r0, [r7, #12]
 8015108:	f000 faa0 	bl	801564c <xQueueGenericSend>
 801510c:	4603      	mov	r3, r0
 801510e:	2b01      	cmp	r3, #1
 8015110:	d001      	beq.n	8015116 <osMessagePut+0x72>
      return osErrorOS;
 8015112:	23ff      	movs	r3, #255	@ 0xff
 8015114:	e000      	b.n	8015118 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8015116:	2300      	movs	r3, #0
}
 8015118:	4618      	mov	r0, r3
 801511a:	3718      	adds	r7, #24
 801511c:	46bd      	mov	sp, r7
 801511e:	bd80      	pop	{r7, pc}
 8015120:	e000ed04 	.word	0xe000ed04

08015124 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8015124:	b590      	push	{r4, r7, lr}
 8015126:	b08b      	sub	sp, #44	@ 0x2c
 8015128:	af00      	add	r7, sp, #0
 801512a:	60f8      	str	r0, [r7, #12]
 801512c:	60b9      	str	r1, [r7, #8]
 801512e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8015130:	68bb      	ldr	r3, [r7, #8]
 8015132:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8015134:	2300      	movs	r3, #0
 8015136:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8015138:	68bb      	ldr	r3, [r7, #8]
 801513a:	2b00      	cmp	r3, #0
 801513c:	d10a      	bne.n	8015154 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801513e:	2380      	movs	r3, #128	@ 0x80
 8015140:	617b      	str	r3, [r7, #20]
    return event;
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	461c      	mov	r4, r3
 8015146:	f107 0314 	add.w	r3, r7, #20
 801514a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801514e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015152:	e054      	b.n	80151fe <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8015154:	2300      	movs	r3, #0
 8015156:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8015158:	2300      	movs	r3, #0
 801515a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015162:	d103      	bne.n	801516c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8015164:	f04f 33ff 	mov.w	r3, #4294967295
 8015168:	627b      	str	r3, [r7, #36]	@ 0x24
 801516a:	e009      	b.n	8015180 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	2b00      	cmp	r3, #0
 8015170:	d006      	beq.n	8015180 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8015176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015178:	2b00      	cmp	r3, #0
 801517a:	d101      	bne.n	8015180 <osMessageGet+0x5c>
      ticks = 1;
 801517c:	2301      	movs	r3, #1
 801517e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8015180:	f7ff fed3 	bl	8014f2a <inHandlerMode>
 8015184:	4603      	mov	r3, r0
 8015186:	2b00      	cmp	r3, #0
 8015188:	d01c      	beq.n	80151c4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801518a:	f107 0220 	add.w	r2, r7, #32
 801518e:	f107 0314 	add.w	r3, r7, #20
 8015192:	3304      	adds	r3, #4
 8015194:	4619      	mov	r1, r3
 8015196:	68b8      	ldr	r0, [r7, #8]
 8015198:	f000 fcee 	bl	8015b78 <xQueueReceiveFromISR>
 801519c:	4603      	mov	r3, r0
 801519e:	2b01      	cmp	r3, #1
 80151a0:	d102      	bne.n	80151a8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80151a2:	2310      	movs	r3, #16
 80151a4:	617b      	str	r3, [r7, #20]
 80151a6:	e001      	b.n	80151ac <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80151a8:	2300      	movs	r3, #0
 80151aa:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80151ac:	6a3b      	ldr	r3, [r7, #32]
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d01d      	beq.n	80151ee <osMessageGet+0xca>
 80151b2:	4b15      	ldr	r3, [pc, #84]	@ (8015208 <osMessageGet+0xe4>)
 80151b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80151b8:	601a      	str	r2, [r3, #0]
 80151ba:	f3bf 8f4f 	dsb	sy
 80151be:	f3bf 8f6f 	isb	sy
 80151c2:	e014      	b.n	80151ee <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80151c4:	f107 0314 	add.w	r3, r7, #20
 80151c8:	3304      	adds	r3, #4
 80151ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80151cc:	4619      	mov	r1, r3
 80151ce:	68b8      	ldr	r0, [r7, #8]
 80151d0:	f000 fbea 	bl	80159a8 <xQueueReceive>
 80151d4:	4603      	mov	r3, r0
 80151d6:	2b01      	cmp	r3, #1
 80151d8:	d102      	bne.n	80151e0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80151da:	2310      	movs	r3, #16
 80151dc:	617b      	str	r3, [r7, #20]
 80151de:	e006      	b.n	80151ee <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80151e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d101      	bne.n	80151ea <osMessageGet+0xc6>
 80151e6:	2300      	movs	r3, #0
 80151e8:	e000      	b.n	80151ec <osMessageGet+0xc8>
 80151ea:	2340      	movs	r3, #64	@ 0x40
 80151ec:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	461c      	mov	r4, r3
 80151f2:	f107 0314 	add.w	r3, r7, #20
 80151f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80151fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80151fe:	68f8      	ldr	r0, [r7, #12]
 8015200:	372c      	adds	r7, #44	@ 0x2c
 8015202:	46bd      	mov	sp, r7
 8015204:	bd90      	pop	{r4, r7, pc}
 8015206:	bf00      	nop
 8015208:	e000ed04 	.word	0xe000ed04

0801520c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 801520c:	b580      	push	{r7, lr}
 801520e:	b082      	sub	sp, #8
 8015210:	af00      	add	r7, sp, #0
 8015212:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8015214:	f7ff fe89 	bl	8014f2a <inHandlerMode>
 8015218:	4603      	mov	r3, r0
 801521a:	2b00      	cmp	r3, #0
 801521c:	d004      	beq.n	8015228 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 801521e:	6878      	ldr	r0, [r7, #4]
 8015220:	f000 fd53 	bl	8015cca <uxQueueMessagesWaitingFromISR>
 8015224:	4603      	mov	r3, r0
 8015226:	e003      	b.n	8015230 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8015228:	6878      	ldr	r0, [r7, #4]
 801522a:	f000 fd2d 	bl	8015c88 <uxQueueMessagesWaiting>
 801522e:	4603      	mov	r3, r0
  }
}
 8015230:	4618      	mov	r0, r3
 8015232:	3708      	adds	r7, #8
 8015234:	46bd      	mov	sp, r7
 8015236:	bd80      	pop	{r7, pc}

08015238 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8015238:	b480      	push	{r7}
 801523a:	b083      	sub	sp, #12
 801523c:	af00      	add	r7, sp, #0
 801523e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	f103 0208 	add.w	r2, r3, #8
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	f04f 32ff 	mov.w	r2, #4294967295
 8015250:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	f103 0208 	add.w	r2, r3, #8
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	f103 0208 	add.w	r2, r3, #8
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	2200      	movs	r2, #0
 801526a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801526c:	bf00      	nop
 801526e:	370c      	adds	r7, #12
 8015270:	46bd      	mov	sp, r7
 8015272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015276:	4770      	bx	lr

08015278 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8015278:	b480      	push	{r7}
 801527a:	b083      	sub	sp, #12
 801527c:	af00      	add	r7, sp, #0
 801527e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	2200      	movs	r2, #0
 8015284:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8015286:	bf00      	nop
 8015288:	370c      	adds	r7, #12
 801528a:	46bd      	mov	sp, r7
 801528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015290:	4770      	bx	lr

08015292 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015292:	b480      	push	{r7}
 8015294:	b085      	sub	sp, #20
 8015296:	af00      	add	r7, sp, #0
 8015298:	6078      	str	r0, [r7, #4]
 801529a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	685b      	ldr	r3, [r3, #4]
 80152a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80152a2:	683b      	ldr	r3, [r7, #0]
 80152a4:	68fa      	ldr	r2, [r7, #12]
 80152a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80152a8:	68fb      	ldr	r3, [r7, #12]
 80152aa:	689a      	ldr	r2, [r3, #8]
 80152ac:	683b      	ldr	r3, [r7, #0]
 80152ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	689b      	ldr	r3, [r3, #8]
 80152b4:	683a      	ldr	r2, [r7, #0]
 80152b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	683a      	ldr	r2, [r7, #0]
 80152bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80152be:	683b      	ldr	r3, [r7, #0]
 80152c0:	687a      	ldr	r2, [r7, #4]
 80152c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	681b      	ldr	r3, [r3, #0]
 80152c8:	1c5a      	adds	r2, r3, #1
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	601a      	str	r2, [r3, #0]
}
 80152ce:	bf00      	nop
 80152d0:	3714      	adds	r7, #20
 80152d2:	46bd      	mov	sp, r7
 80152d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152d8:	4770      	bx	lr

080152da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80152da:	b480      	push	{r7}
 80152dc:	b085      	sub	sp, #20
 80152de:	af00      	add	r7, sp, #0
 80152e0:	6078      	str	r0, [r7, #4]
 80152e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80152e4:	683b      	ldr	r3, [r7, #0]
 80152e6:	681b      	ldr	r3, [r3, #0]
 80152e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80152ea:	68bb      	ldr	r3, [r7, #8]
 80152ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152f0:	d103      	bne.n	80152fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	691b      	ldr	r3, [r3, #16]
 80152f6:	60fb      	str	r3, [r7, #12]
 80152f8:	e00c      	b.n	8015314 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	3308      	adds	r3, #8
 80152fe:	60fb      	str	r3, [r7, #12]
 8015300:	e002      	b.n	8015308 <vListInsert+0x2e>
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	685b      	ldr	r3, [r3, #4]
 8015306:	60fb      	str	r3, [r7, #12]
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	685b      	ldr	r3, [r3, #4]
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	68ba      	ldr	r2, [r7, #8]
 8015310:	429a      	cmp	r2, r3
 8015312:	d2f6      	bcs.n	8015302 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	685a      	ldr	r2, [r3, #4]
 8015318:	683b      	ldr	r3, [r7, #0]
 801531a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801531c:	683b      	ldr	r3, [r7, #0]
 801531e:	685b      	ldr	r3, [r3, #4]
 8015320:	683a      	ldr	r2, [r7, #0]
 8015322:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8015324:	683b      	ldr	r3, [r7, #0]
 8015326:	68fa      	ldr	r2, [r7, #12]
 8015328:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801532a:	68fb      	ldr	r3, [r7, #12]
 801532c:	683a      	ldr	r2, [r7, #0]
 801532e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8015330:	683b      	ldr	r3, [r7, #0]
 8015332:	687a      	ldr	r2, [r7, #4]
 8015334:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	1c5a      	adds	r2, r3, #1
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	601a      	str	r2, [r3, #0]
}
 8015340:	bf00      	nop
 8015342:	3714      	adds	r7, #20
 8015344:	46bd      	mov	sp, r7
 8015346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801534a:	4770      	bx	lr

0801534c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801534c:	b480      	push	{r7}
 801534e:	b085      	sub	sp, #20
 8015350:	af00      	add	r7, sp, #0
 8015352:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	691b      	ldr	r3, [r3, #16]
 8015358:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	685b      	ldr	r3, [r3, #4]
 801535e:	687a      	ldr	r2, [r7, #4]
 8015360:	6892      	ldr	r2, [r2, #8]
 8015362:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	689b      	ldr	r3, [r3, #8]
 8015368:	687a      	ldr	r2, [r7, #4]
 801536a:	6852      	ldr	r2, [r2, #4]
 801536c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	685b      	ldr	r3, [r3, #4]
 8015372:	687a      	ldr	r2, [r7, #4]
 8015374:	429a      	cmp	r2, r3
 8015376:	d103      	bne.n	8015380 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	689a      	ldr	r2, [r3, #8]
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	2200      	movs	r2, #0
 8015384:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	1e5a      	subs	r2, r3, #1
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	681b      	ldr	r3, [r3, #0]
}
 8015394:	4618      	mov	r0, r3
 8015396:	3714      	adds	r7, #20
 8015398:	46bd      	mov	sp, r7
 801539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801539e:	4770      	bx	lr

080153a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80153a0:	b580      	push	{r7, lr}
 80153a2:	b084      	sub	sp, #16
 80153a4:	af00      	add	r7, sp, #0
 80153a6:	6078      	str	r0, [r7, #4]
 80153a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d10d      	bne.n	80153d0 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80153b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153b8:	b672      	cpsid	i
 80153ba:	f383 8811 	msr	BASEPRI, r3
 80153be:	f3bf 8f6f 	isb	sy
 80153c2:	f3bf 8f4f 	dsb	sy
 80153c6:	b662      	cpsie	i
 80153c8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80153ca:	bf00      	nop
 80153cc:	bf00      	nop
 80153ce:	e7fd      	b.n	80153cc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80153d0:	f001 fe14 	bl	8016ffc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	681a      	ldr	r2, [r3, #0]
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80153dc:	68f9      	ldr	r1, [r7, #12]
 80153de:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80153e0:	fb01 f303 	mul.w	r3, r1, r3
 80153e4:	441a      	add	r2, r3
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	2200      	movs	r2, #0
 80153ee:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	681a      	ldr	r2, [r3, #0]
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	681a      	ldr	r2, [r3, #0]
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015400:	3b01      	subs	r3, #1
 8015402:	68f9      	ldr	r1, [r7, #12]
 8015404:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8015406:	fb01 f303 	mul.w	r3, r1, r3
 801540a:	441a      	add	r2, r3
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	22ff      	movs	r2, #255	@ 0xff
 8015414:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	22ff      	movs	r2, #255	@ 0xff
 801541c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8015420:	683b      	ldr	r3, [r7, #0]
 8015422:	2b00      	cmp	r3, #0
 8015424:	d114      	bne.n	8015450 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	691b      	ldr	r3, [r3, #16]
 801542a:	2b00      	cmp	r3, #0
 801542c:	d01a      	beq.n	8015464 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801542e:	68fb      	ldr	r3, [r7, #12]
 8015430:	3310      	adds	r3, #16
 8015432:	4618      	mov	r0, r3
 8015434:	f001 f9fa 	bl	801682c <xTaskRemoveFromEventList>
 8015438:	4603      	mov	r3, r0
 801543a:	2b00      	cmp	r3, #0
 801543c:	d012      	beq.n	8015464 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801543e:	4b0d      	ldr	r3, [pc, #52]	@ (8015474 <xQueueGenericReset+0xd4>)
 8015440:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015444:	601a      	str	r2, [r3, #0]
 8015446:	f3bf 8f4f 	dsb	sy
 801544a:	f3bf 8f6f 	isb	sy
 801544e:	e009      	b.n	8015464 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	3310      	adds	r3, #16
 8015454:	4618      	mov	r0, r3
 8015456:	f7ff feef 	bl	8015238 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	3324      	adds	r3, #36	@ 0x24
 801545e:	4618      	mov	r0, r3
 8015460:	f7ff feea 	bl	8015238 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8015464:	f001 fe00 	bl	8017068 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8015468:	2301      	movs	r3, #1
}
 801546a:	4618      	mov	r0, r3
 801546c:	3710      	adds	r7, #16
 801546e:	46bd      	mov	sp, r7
 8015470:	bd80      	pop	{r7, pc}
 8015472:	bf00      	nop
 8015474:	e000ed04 	.word	0xe000ed04

08015478 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8015478:	b580      	push	{r7, lr}
 801547a:	b08e      	sub	sp, #56	@ 0x38
 801547c:	af02      	add	r7, sp, #8
 801547e:	60f8      	str	r0, [r7, #12]
 8015480:	60b9      	str	r1, [r7, #8]
 8015482:	607a      	str	r2, [r7, #4]
 8015484:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	2b00      	cmp	r3, #0
 801548a:	d10d      	bne.n	80154a8 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 801548c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015490:	b672      	cpsid	i
 8015492:	f383 8811 	msr	BASEPRI, r3
 8015496:	f3bf 8f6f 	isb	sy
 801549a:	f3bf 8f4f 	dsb	sy
 801549e:	b662      	cpsie	i
 80154a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80154a2:	bf00      	nop
 80154a4:	bf00      	nop
 80154a6:	e7fd      	b.n	80154a4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80154a8:	683b      	ldr	r3, [r7, #0]
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d10d      	bne.n	80154ca <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80154ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154b2:	b672      	cpsid	i
 80154b4:	f383 8811 	msr	BASEPRI, r3
 80154b8:	f3bf 8f6f 	isb	sy
 80154bc:	f3bf 8f4f 	dsb	sy
 80154c0:	b662      	cpsie	i
 80154c2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80154c4:	bf00      	nop
 80154c6:	bf00      	nop
 80154c8:	e7fd      	b.n	80154c6 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d002      	beq.n	80154d6 <xQueueGenericCreateStatic+0x5e>
 80154d0:	68bb      	ldr	r3, [r7, #8]
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d001      	beq.n	80154da <xQueueGenericCreateStatic+0x62>
 80154d6:	2301      	movs	r3, #1
 80154d8:	e000      	b.n	80154dc <xQueueGenericCreateStatic+0x64>
 80154da:	2300      	movs	r3, #0
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d10d      	bne.n	80154fc <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80154e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154e4:	b672      	cpsid	i
 80154e6:	f383 8811 	msr	BASEPRI, r3
 80154ea:	f3bf 8f6f 	isb	sy
 80154ee:	f3bf 8f4f 	dsb	sy
 80154f2:	b662      	cpsie	i
 80154f4:	623b      	str	r3, [r7, #32]
}
 80154f6:	bf00      	nop
 80154f8:	bf00      	nop
 80154fa:	e7fd      	b.n	80154f8 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d102      	bne.n	8015508 <xQueueGenericCreateStatic+0x90>
 8015502:	68bb      	ldr	r3, [r7, #8]
 8015504:	2b00      	cmp	r3, #0
 8015506:	d101      	bne.n	801550c <xQueueGenericCreateStatic+0x94>
 8015508:	2301      	movs	r3, #1
 801550a:	e000      	b.n	801550e <xQueueGenericCreateStatic+0x96>
 801550c:	2300      	movs	r3, #0
 801550e:	2b00      	cmp	r3, #0
 8015510:	d10d      	bne.n	801552e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8015512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015516:	b672      	cpsid	i
 8015518:	f383 8811 	msr	BASEPRI, r3
 801551c:	f3bf 8f6f 	isb	sy
 8015520:	f3bf 8f4f 	dsb	sy
 8015524:	b662      	cpsie	i
 8015526:	61fb      	str	r3, [r7, #28]
}
 8015528:	bf00      	nop
 801552a:	bf00      	nop
 801552c:	e7fd      	b.n	801552a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801552e:	2348      	movs	r3, #72	@ 0x48
 8015530:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8015532:	697b      	ldr	r3, [r7, #20]
 8015534:	2b48      	cmp	r3, #72	@ 0x48
 8015536:	d00d      	beq.n	8015554 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8015538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801553c:	b672      	cpsid	i
 801553e:	f383 8811 	msr	BASEPRI, r3
 8015542:	f3bf 8f6f 	isb	sy
 8015546:	f3bf 8f4f 	dsb	sy
 801554a:	b662      	cpsie	i
 801554c:	61bb      	str	r3, [r7, #24]
}
 801554e:	bf00      	nop
 8015550:	bf00      	nop
 8015552:	e7fd      	b.n	8015550 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015554:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015556:	683b      	ldr	r3, [r7, #0]
 8015558:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 801555a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801555c:	2b00      	cmp	r3, #0
 801555e:	d00d      	beq.n	801557c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015562:	2201      	movs	r2, #1
 8015564:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015568:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 801556c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801556e:	9300      	str	r3, [sp, #0]
 8015570:	4613      	mov	r3, r2
 8015572:	687a      	ldr	r2, [r7, #4]
 8015574:	68b9      	ldr	r1, [r7, #8]
 8015576:	68f8      	ldr	r0, [r7, #12]
 8015578:	f000 f848 	bl	801560c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801557c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 801557e:	4618      	mov	r0, r3
 8015580:	3730      	adds	r7, #48	@ 0x30
 8015582:	46bd      	mov	sp, r7
 8015584:	bd80      	pop	{r7, pc}

08015586 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8015586:	b580      	push	{r7, lr}
 8015588:	b08a      	sub	sp, #40	@ 0x28
 801558a:	af02      	add	r7, sp, #8
 801558c:	60f8      	str	r0, [r7, #12]
 801558e:	60b9      	str	r1, [r7, #8]
 8015590:	4613      	mov	r3, r2
 8015592:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	2b00      	cmp	r3, #0
 8015598:	d10d      	bne.n	80155b6 <xQueueGenericCreate+0x30>
	__asm volatile
 801559a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801559e:	b672      	cpsid	i
 80155a0:	f383 8811 	msr	BASEPRI, r3
 80155a4:	f3bf 8f6f 	isb	sy
 80155a8:	f3bf 8f4f 	dsb	sy
 80155ac:	b662      	cpsie	i
 80155ae:	613b      	str	r3, [r7, #16]
}
 80155b0:	bf00      	nop
 80155b2:	bf00      	nop
 80155b4:	e7fd      	b.n	80155b2 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80155b6:	68bb      	ldr	r3, [r7, #8]
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d102      	bne.n	80155c2 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80155bc:	2300      	movs	r3, #0
 80155be:	61fb      	str	r3, [r7, #28]
 80155c0:	e004      	b.n	80155cc <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80155c2:	68fb      	ldr	r3, [r7, #12]
 80155c4:	68ba      	ldr	r2, [r7, #8]
 80155c6:	fb02 f303 	mul.w	r3, r2, r3
 80155ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80155cc:	69fb      	ldr	r3, [r7, #28]
 80155ce:	3348      	adds	r3, #72	@ 0x48
 80155d0:	4618      	mov	r0, r3
 80155d2:	f001 fe41 	bl	8017258 <pvPortMalloc>
 80155d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80155d8:	69bb      	ldr	r3, [r7, #24]
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d011      	beq.n	8015602 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80155de:	69bb      	ldr	r3, [r7, #24]
 80155e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80155e2:	697b      	ldr	r3, [r7, #20]
 80155e4:	3348      	adds	r3, #72	@ 0x48
 80155e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80155e8:	69bb      	ldr	r3, [r7, #24]
 80155ea:	2200      	movs	r2, #0
 80155ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80155f0:	79fa      	ldrb	r2, [r7, #7]
 80155f2:	69bb      	ldr	r3, [r7, #24]
 80155f4:	9300      	str	r3, [sp, #0]
 80155f6:	4613      	mov	r3, r2
 80155f8:	697a      	ldr	r2, [r7, #20]
 80155fa:	68b9      	ldr	r1, [r7, #8]
 80155fc:	68f8      	ldr	r0, [r7, #12]
 80155fe:	f000 f805 	bl	801560c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015602:	69bb      	ldr	r3, [r7, #24]
	}
 8015604:	4618      	mov	r0, r3
 8015606:	3720      	adds	r7, #32
 8015608:	46bd      	mov	sp, r7
 801560a:	bd80      	pop	{r7, pc}

0801560c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801560c:	b580      	push	{r7, lr}
 801560e:	b084      	sub	sp, #16
 8015610:	af00      	add	r7, sp, #0
 8015612:	60f8      	str	r0, [r7, #12]
 8015614:	60b9      	str	r1, [r7, #8]
 8015616:	607a      	str	r2, [r7, #4]
 8015618:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801561a:	68bb      	ldr	r3, [r7, #8]
 801561c:	2b00      	cmp	r3, #0
 801561e:	d103      	bne.n	8015628 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015620:	69bb      	ldr	r3, [r7, #24]
 8015622:	69ba      	ldr	r2, [r7, #24]
 8015624:	601a      	str	r2, [r3, #0]
 8015626:	e002      	b.n	801562e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015628:	69bb      	ldr	r3, [r7, #24]
 801562a:	687a      	ldr	r2, [r7, #4]
 801562c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801562e:	69bb      	ldr	r3, [r7, #24]
 8015630:	68fa      	ldr	r2, [r7, #12]
 8015632:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015634:	69bb      	ldr	r3, [r7, #24]
 8015636:	68ba      	ldr	r2, [r7, #8]
 8015638:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801563a:	2101      	movs	r1, #1
 801563c:	69b8      	ldr	r0, [r7, #24]
 801563e:	f7ff feaf 	bl	80153a0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8015642:	bf00      	nop
 8015644:	3710      	adds	r7, #16
 8015646:	46bd      	mov	sp, r7
 8015648:	bd80      	pop	{r7, pc}
	...

0801564c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801564c:	b580      	push	{r7, lr}
 801564e:	b08e      	sub	sp, #56	@ 0x38
 8015650:	af00      	add	r7, sp, #0
 8015652:	60f8      	str	r0, [r7, #12]
 8015654:	60b9      	str	r1, [r7, #8]
 8015656:	607a      	str	r2, [r7, #4]
 8015658:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801565a:	2300      	movs	r3, #0
 801565c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801565e:	68fb      	ldr	r3, [r7, #12]
 8015660:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8015662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015664:	2b00      	cmp	r3, #0
 8015666:	d10d      	bne.n	8015684 <xQueueGenericSend+0x38>
	__asm volatile
 8015668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801566c:	b672      	cpsid	i
 801566e:	f383 8811 	msr	BASEPRI, r3
 8015672:	f3bf 8f6f 	isb	sy
 8015676:	f3bf 8f4f 	dsb	sy
 801567a:	b662      	cpsie	i
 801567c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801567e:	bf00      	nop
 8015680:	bf00      	nop
 8015682:	e7fd      	b.n	8015680 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015684:	68bb      	ldr	r3, [r7, #8]
 8015686:	2b00      	cmp	r3, #0
 8015688:	d103      	bne.n	8015692 <xQueueGenericSend+0x46>
 801568a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801568c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801568e:	2b00      	cmp	r3, #0
 8015690:	d101      	bne.n	8015696 <xQueueGenericSend+0x4a>
 8015692:	2301      	movs	r3, #1
 8015694:	e000      	b.n	8015698 <xQueueGenericSend+0x4c>
 8015696:	2300      	movs	r3, #0
 8015698:	2b00      	cmp	r3, #0
 801569a:	d10d      	bne.n	80156b8 <xQueueGenericSend+0x6c>
	__asm volatile
 801569c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80156a0:	b672      	cpsid	i
 80156a2:	f383 8811 	msr	BASEPRI, r3
 80156a6:	f3bf 8f6f 	isb	sy
 80156aa:	f3bf 8f4f 	dsb	sy
 80156ae:	b662      	cpsie	i
 80156b0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80156b2:	bf00      	nop
 80156b4:	bf00      	nop
 80156b6:	e7fd      	b.n	80156b4 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80156b8:	683b      	ldr	r3, [r7, #0]
 80156ba:	2b02      	cmp	r3, #2
 80156bc:	d103      	bne.n	80156c6 <xQueueGenericSend+0x7a>
 80156be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80156c2:	2b01      	cmp	r3, #1
 80156c4:	d101      	bne.n	80156ca <xQueueGenericSend+0x7e>
 80156c6:	2301      	movs	r3, #1
 80156c8:	e000      	b.n	80156cc <xQueueGenericSend+0x80>
 80156ca:	2300      	movs	r3, #0
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d10d      	bne.n	80156ec <xQueueGenericSend+0xa0>
	__asm volatile
 80156d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80156d4:	b672      	cpsid	i
 80156d6:	f383 8811 	msr	BASEPRI, r3
 80156da:	f3bf 8f6f 	isb	sy
 80156de:	f3bf 8f4f 	dsb	sy
 80156e2:	b662      	cpsie	i
 80156e4:	623b      	str	r3, [r7, #32]
}
 80156e6:	bf00      	nop
 80156e8:	bf00      	nop
 80156ea:	e7fd      	b.n	80156e8 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80156ec:	f001 fa68 	bl	8016bc0 <xTaskGetSchedulerState>
 80156f0:	4603      	mov	r3, r0
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d102      	bne.n	80156fc <xQueueGenericSend+0xb0>
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d101      	bne.n	8015700 <xQueueGenericSend+0xb4>
 80156fc:	2301      	movs	r3, #1
 80156fe:	e000      	b.n	8015702 <xQueueGenericSend+0xb6>
 8015700:	2300      	movs	r3, #0
 8015702:	2b00      	cmp	r3, #0
 8015704:	d10d      	bne.n	8015722 <xQueueGenericSend+0xd6>
	__asm volatile
 8015706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801570a:	b672      	cpsid	i
 801570c:	f383 8811 	msr	BASEPRI, r3
 8015710:	f3bf 8f6f 	isb	sy
 8015714:	f3bf 8f4f 	dsb	sy
 8015718:	b662      	cpsie	i
 801571a:	61fb      	str	r3, [r7, #28]
}
 801571c:	bf00      	nop
 801571e:	bf00      	nop
 8015720:	e7fd      	b.n	801571e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015722:	f001 fc6b 	bl	8016ffc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015728:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801572a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801572c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801572e:	429a      	cmp	r2, r3
 8015730:	d302      	bcc.n	8015738 <xQueueGenericSend+0xec>
 8015732:	683b      	ldr	r3, [r7, #0]
 8015734:	2b02      	cmp	r3, #2
 8015736:	d129      	bne.n	801578c <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015738:	683a      	ldr	r2, [r7, #0]
 801573a:	68b9      	ldr	r1, [r7, #8]
 801573c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801573e:	f000 fae5 	bl	8015d0c <prvCopyDataToQueue>
 8015742:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015748:	2b00      	cmp	r3, #0
 801574a:	d010      	beq.n	801576e <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801574c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801574e:	3324      	adds	r3, #36	@ 0x24
 8015750:	4618      	mov	r0, r3
 8015752:	f001 f86b 	bl	801682c <xTaskRemoveFromEventList>
 8015756:	4603      	mov	r3, r0
 8015758:	2b00      	cmp	r3, #0
 801575a:	d013      	beq.n	8015784 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801575c:	4b3f      	ldr	r3, [pc, #252]	@ (801585c <xQueueGenericSend+0x210>)
 801575e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015762:	601a      	str	r2, [r3, #0]
 8015764:	f3bf 8f4f 	dsb	sy
 8015768:	f3bf 8f6f 	isb	sy
 801576c:	e00a      	b.n	8015784 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801576e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015770:	2b00      	cmp	r3, #0
 8015772:	d007      	beq.n	8015784 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015774:	4b39      	ldr	r3, [pc, #228]	@ (801585c <xQueueGenericSend+0x210>)
 8015776:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801577a:	601a      	str	r2, [r3, #0]
 801577c:	f3bf 8f4f 	dsb	sy
 8015780:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015784:	f001 fc70 	bl	8017068 <vPortExitCritical>
				return pdPASS;
 8015788:	2301      	movs	r3, #1
 801578a:	e063      	b.n	8015854 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	2b00      	cmp	r3, #0
 8015790:	d103      	bne.n	801579a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015792:	f001 fc69 	bl	8017068 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8015796:	2300      	movs	r3, #0
 8015798:	e05c      	b.n	8015854 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 801579a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801579c:	2b00      	cmp	r3, #0
 801579e:	d106      	bne.n	80157ae <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80157a0:	f107 0314 	add.w	r3, r7, #20
 80157a4:	4618      	mov	r0, r3
 80157a6:	f001 f8a7 	bl	80168f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80157aa:	2301      	movs	r3, #1
 80157ac:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80157ae:	f001 fc5b 	bl	8017068 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80157b2:	f000 fe03 	bl	80163bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80157b6:	f001 fc21 	bl	8016ffc <vPortEnterCritical>
 80157ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80157c0:	b25b      	sxtb	r3, r3
 80157c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80157c6:	d103      	bne.n	80157d0 <xQueueGenericSend+0x184>
 80157c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157ca:	2200      	movs	r2, #0
 80157cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80157d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80157d6:	b25b      	sxtb	r3, r3
 80157d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80157dc:	d103      	bne.n	80157e6 <xQueueGenericSend+0x19a>
 80157de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157e0:	2200      	movs	r2, #0
 80157e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80157e6:	f001 fc3f 	bl	8017068 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80157ea:	1d3a      	adds	r2, r7, #4
 80157ec:	f107 0314 	add.w	r3, r7, #20
 80157f0:	4611      	mov	r1, r2
 80157f2:	4618      	mov	r0, r3
 80157f4:	f001 f896 	bl	8016924 <xTaskCheckForTimeOut>
 80157f8:	4603      	mov	r3, r0
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d124      	bne.n	8015848 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80157fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015800:	f000 fb7c 	bl	8015efc <prvIsQueueFull>
 8015804:	4603      	mov	r3, r0
 8015806:	2b00      	cmp	r3, #0
 8015808:	d018      	beq.n	801583c <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801580a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801580c:	3310      	adds	r3, #16
 801580e:	687a      	ldr	r2, [r7, #4]
 8015810:	4611      	mov	r1, r2
 8015812:	4618      	mov	r0, r3
 8015814:	f000 ffe2 	bl	80167dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015818:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801581a:	f000 fb07 	bl	8015e2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801581e:	f000 fddb 	bl	80163d8 <xTaskResumeAll>
 8015822:	4603      	mov	r3, r0
 8015824:	2b00      	cmp	r3, #0
 8015826:	f47f af7c 	bne.w	8015722 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 801582a:	4b0c      	ldr	r3, [pc, #48]	@ (801585c <xQueueGenericSend+0x210>)
 801582c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015830:	601a      	str	r2, [r3, #0]
 8015832:	f3bf 8f4f 	dsb	sy
 8015836:	f3bf 8f6f 	isb	sy
 801583a:	e772      	b.n	8015722 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801583c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801583e:	f000 faf5 	bl	8015e2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015842:	f000 fdc9 	bl	80163d8 <xTaskResumeAll>
 8015846:	e76c      	b.n	8015722 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015848:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801584a:	f000 faef 	bl	8015e2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801584e:	f000 fdc3 	bl	80163d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015852:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015854:	4618      	mov	r0, r3
 8015856:	3738      	adds	r7, #56	@ 0x38
 8015858:	46bd      	mov	sp, r7
 801585a:	bd80      	pop	{r7, pc}
 801585c:	e000ed04 	.word	0xe000ed04

08015860 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015860:	b580      	push	{r7, lr}
 8015862:	b08e      	sub	sp, #56	@ 0x38
 8015864:	af00      	add	r7, sp, #0
 8015866:	60f8      	str	r0, [r7, #12]
 8015868:	60b9      	str	r1, [r7, #8]
 801586a:	607a      	str	r2, [r7, #4]
 801586c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8015872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015874:	2b00      	cmp	r3, #0
 8015876:	d10d      	bne.n	8015894 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8015878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801587c:	b672      	cpsid	i
 801587e:	f383 8811 	msr	BASEPRI, r3
 8015882:	f3bf 8f6f 	isb	sy
 8015886:	f3bf 8f4f 	dsb	sy
 801588a:	b662      	cpsie	i
 801588c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801588e:	bf00      	nop
 8015890:	bf00      	nop
 8015892:	e7fd      	b.n	8015890 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015894:	68bb      	ldr	r3, [r7, #8]
 8015896:	2b00      	cmp	r3, #0
 8015898:	d103      	bne.n	80158a2 <xQueueGenericSendFromISR+0x42>
 801589a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801589c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d101      	bne.n	80158a6 <xQueueGenericSendFromISR+0x46>
 80158a2:	2301      	movs	r3, #1
 80158a4:	e000      	b.n	80158a8 <xQueueGenericSendFromISR+0x48>
 80158a6:	2300      	movs	r3, #0
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d10d      	bne.n	80158c8 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80158ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80158b0:	b672      	cpsid	i
 80158b2:	f383 8811 	msr	BASEPRI, r3
 80158b6:	f3bf 8f6f 	isb	sy
 80158ba:	f3bf 8f4f 	dsb	sy
 80158be:	b662      	cpsie	i
 80158c0:	623b      	str	r3, [r7, #32]
}
 80158c2:	bf00      	nop
 80158c4:	bf00      	nop
 80158c6:	e7fd      	b.n	80158c4 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80158c8:	683b      	ldr	r3, [r7, #0]
 80158ca:	2b02      	cmp	r3, #2
 80158cc:	d103      	bne.n	80158d6 <xQueueGenericSendFromISR+0x76>
 80158ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80158d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80158d2:	2b01      	cmp	r3, #1
 80158d4:	d101      	bne.n	80158da <xQueueGenericSendFromISR+0x7a>
 80158d6:	2301      	movs	r3, #1
 80158d8:	e000      	b.n	80158dc <xQueueGenericSendFromISR+0x7c>
 80158da:	2300      	movs	r3, #0
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d10d      	bne.n	80158fc <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80158e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80158e4:	b672      	cpsid	i
 80158e6:	f383 8811 	msr	BASEPRI, r3
 80158ea:	f3bf 8f6f 	isb	sy
 80158ee:	f3bf 8f4f 	dsb	sy
 80158f2:	b662      	cpsie	i
 80158f4:	61fb      	str	r3, [r7, #28]
}
 80158f6:	bf00      	nop
 80158f8:	bf00      	nop
 80158fa:	e7fd      	b.n	80158f8 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80158fc:	f001 fc66 	bl	80171cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015900:	f3ef 8211 	mrs	r2, BASEPRI
 8015904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015908:	b672      	cpsid	i
 801590a:	f383 8811 	msr	BASEPRI, r3
 801590e:	f3bf 8f6f 	isb	sy
 8015912:	f3bf 8f4f 	dsb	sy
 8015916:	b662      	cpsie	i
 8015918:	61ba      	str	r2, [r7, #24]
 801591a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801591c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801591e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015922:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015928:	429a      	cmp	r2, r3
 801592a:	d302      	bcc.n	8015932 <xQueueGenericSendFromISR+0xd2>
 801592c:	683b      	ldr	r3, [r7, #0]
 801592e:	2b02      	cmp	r3, #2
 8015930:	d12c      	bne.n	801598c <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015934:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015938:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801593c:	683a      	ldr	r2, [r7, #0]
 801593e:	68b9      	ldr	r1, [r7, #8]
 8015940:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015942:	f000 f9e3 	bl	8015d0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015946:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 801594a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801594e:	d112      	bne.n	8015976 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015954:	2b00      	cmp	r3, #0
 8015956:	d016      	beq.n	8015986 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801595a:	3324      	adds	r3, #36	@ 0x24
 801595c:	4618      	mov	r0, r3
 801595e:	f000 ff65 	bl	801682c <xTaskRemoveFromEventList>
 8015962:	4603      	mov	r3, r0
 8015964:	2b00      	cmp	r3, #0
 8015966:	d00e      	beq.n	8015986 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	2b00      	cmp	r3, #0
 801596c:	d00b      	beq.n	8015986 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	2201      	movs	r2, #1
 8015972:	601a      	str	r2, [r3, #0]
 8015974:	e007      	b.n	8015986 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015976:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801597a:	3301      	adds	r3, #1
 801597c:	b2db      	uxtb	r3, r3
 801597e:	b25a      	sxtb	r2, r3
 8015980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015982:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8015986:	2301      	movs	r3, #1
 8015988:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 801598a:	e001      	b.n	8015990 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801598c:	2300      	movs	r3, #0
 801598e:	637b      	str	r3, [r7, #52]	@ 0x34
 8015990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015992:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015994:	693b      	ldr	r3, [r7, #16]
 8015996:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801599a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801599c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801599e:	4618      	mov	r0, r3
 80159a0:	3738      	adds	r7, #56	@ 0x38
 80159a2:	46bd      	mov	sp, r7
 80159a4:	bd80      	pop	{r7, pc}
	...

080159a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80159a8:	b580      	push	{r7, lr}
 80159aa:	b08c      	sub	sp, #48	@ 0x30
 80159ac:	af00      	add	r7, sp, #0
 80159ae:	60f8      	str	r0, [r7, #12]
 80159b0:	60b9      	str	r1, [r7, #8]
 80159b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80159b4:	2300      	movs	r3, #0
 80159b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80159bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d10d      	bne.n	80159de <xQueueReceive+0x36>
	__asm volatile
 80159c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80159c6:	b672      	cpsid	i
 80159c8:	f383 8811 	msr	BASEPRI, r3
 80159cc:	f3bf 8f6f 	isb	sy
 80159d0:	f3bf 8f4f 	dsb	sy
 80159d4:	b662      	cpsie	i
 80159d6:	623b      	str	r3, [r7, #32]
}
 80159d8:	bf00      	nop
 80159da:	bf00      	nop
 80159dc:	e7fd      	b.n	80159da <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80159de:	68bb      	ldr	r3, [r7, #8]
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d103      	bne.n	80159ec <xQueueReceive+0x44>
 80159e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d101      	bne.n	80159f0 <xQueueReceive+0x48>
 80159ec:	2301      	movs	r3, #1
 80159ee:	e000      	b.n	80159f2 <xQueueReceive+0x4a>
 80159f0:	2300      	movs	r3, #0
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d10d      	bne.n	8015a12 <xQueueReceive+0x6a>
	__asm volatile
 80159f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80159fa:	b672      	cpsid	i
 80159fc:	f383 8811 	msr	BASEPRI, r3
 8015a00:	f3bf 8f6f 	isb	sy
 8015a04:	f3bf 8f4f 	dsb	sy
 8015a08:	b662      	cpsie	i
 8015a0a:	61fb      	str	r3, [r7, #28]
}
 8015a0c:	bf00      	nop
 8015a0e:	bf00      	nop
 8015a10:	e7fd      	b.n	8015a0e <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015a12:	f001 f8d5 	bl	8016bc0 <xTaskGetSchedulerState>
 8015a16:	4603      	mov	r3, r0
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d102      	bne.n	8015a22 <xQueueReceive+0x7a>
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d101      	bne.n	8015a26 <xQueueReceive+0x7e>
 8015a22:	2301      	movs	r3, #1
 8015a24:	e000      	b.n	8015a28 <xQueueReceive+0x80>
 8015a26:	2300      	movs	r3, #0
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d10d      	bne.n	8015a48 <xQueueReceive+0xa0>
	__asm volatile
 8015a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a30:	b672      	cpsid	i
 8015a32:	f383 8811 	msr	BASEPRI, r3
 8015a36:	f3bf 8f6f 	isb	sy
 8015a3a:	f3bf 8f4f 	dsb	sy
 8015a3e:	b662      	cpsie	i
 8015a40:	61bb      	str	r3, [r7, #24]
}
 8015a42:	bf00      	nop
 8015a44:	bf00      	nop
 8015a46:	e7fd      	b.n	8015a44 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015a48:	f001 fad8 	bl	8016ffc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015a50:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d01f      	beq.n	8015a98 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015a58:	68b9      	ldr	r1, [r7, #8]
 8015a5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015a5c:	f000 f9c0 	bl	8015de0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a62:	1e5a      	subs	r2, r3, #1
 8015a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a66:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a6a:	691b      	ldr	r3, [r3, #16]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d00f      	beq.n	8015a90 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a72:	3310      	adds	r3, #16
 8015a74:	4618      	mov	r0, r3
 8015a76:	f000 fed9 	bl	801682c <xTaskRemoveFromEventList>
 8015a7a:	4603      	mov	r3, r0
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d007      	beq.n	8015a90 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015a80:	4b3c      	ldr	r3, [pc, #240]	@ (8015b74 <xQueueReceive+0x1cc>)
 8015a82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015a86:	601a      	str	r2, [r3, #0]
 8015a88:	f3bf 8f4f 	dsb	sy
 8015a8c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015a90:	f001 faea 	bl	8017068 <vPortExitCritical>
				return pdPASS;
 8015a94:	2301      	movs	r3, #1
 8015a96:	e069      	b.n	8015b6c <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d103      	bne.n	8015aa6 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015a9e:	f001 fae3 	bl	8017068 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015aa2:	2300      	movs	r3, #0
 8015aa4:	e062      	b.n	8015b6c <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d106      	bne.n	8015aba <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015aac:	f107 0310 	add.w	r3, r7, #16
 8015ab0:	4618      	mov	r0, r3
 8015ab2:	f000 ff21 	bl	80168f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015ab6:	2301      	movs	r3, #1
 8015ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015aba:	f001 fad5 	bl	8017068 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015abe:	f000 fc7d 	bl	80163bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015ac2:	f001 fa9b 	bl	8016ffc <vPortEnterCritical>
 8015ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ac8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015acc:	b25b      	sxtb	r3, r3
 8015ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ad2:	d103      	bne.n	8015adc <xQueueReceive+0x134>
 8015ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ad6:	2200      	movs	r2, #0
 8015ad8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ade:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015ae2:	b25b      	sxtb	r3, r3
 8015ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ae8:	d103      	bne.n	8015af2 <xQueueReceive+0x14a>
 8015aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015aec:	2200      	movs	r2, #0
 8015aee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015af2:	f001 fab9 	bl	8017068 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015af6:	1d3a      	adds	r2, r7, #4
 8015af8:	f107 0310 	add.w	r3, r7, #16
 8015afc:	4611      	mov	r1, r2
 8015afe:	4618      	mov	r0, r3
 8015b00:	f000 ff10 	bl	8016924 <xTaskCheckForTimeOut>
 8015b04:	4603      	mov	r3, r0
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d123      	bne.n	8015b52 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015b0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015b0c:	f000 f9e0 	bl	8015ed0 <prvIsQueueEmpty>
 8015b10:	4603      	mov	r3, r0
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d017      	beq.n	8015b46 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b18:	3324      	adds	r3, #36	@ 0x24
 8015b1a:	687a      	ldr	r2, [r7, #4]
 8015b1c:	4611      	mov	r1, r2
 8015b1e:	4618      	mov	r0, r3
 8015b20:	f000 fe5c 	bl	80167dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015b24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015b26:	f000 f981 	bl	8015e2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015b2a:	f000 fc55 	bl	80163d8 <xTaskResumeAll>
 8015b2e:	4603      	mov	r3, r0
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d189      	bne.n	8015a48 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8015b34:	4b0f      	ldr	r3, [pc, #60]	@ (8015b74 <xQueueReceive+0x1cc>)
 8015b36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015b3a:	601a      	str	r2, [r3, #0]
 8015b3c:	f3bf 8f4f 	dsb	sy
 8015b40:	f3bf 8f6f 	isb	sy
 8015b44:	e780      	b.n	8015a48 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8015b46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015b48:	f000 f970 	bl	8015e2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015b4c:	f000 fc44 	bl	80163d8 <xTaskResumeAll>
 8015b50:	e77a      	b.n	8015a48 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8015b52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015b54:	f000 f96a 	bl	8015e2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015b58:	f000 fc3e 	bl	80163d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015b5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015b5e:	f000 f9b7 	bl	8015ed0 <prvIsQueueEmpty>
 8015b62:	4603      	mov	r3, r0
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	f43f af6f 	beq.w	8015a48 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015b6a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015b6c:	4618      	mov	r0, r3
 8015b6e:	3730      	adds	r7, #48	@ 0x30
 8015b70:	46bd      	mov	sp, r7
 8015b72:	bd80      	pop	{r7, pc}
 8015b74:	e000ed04 	.word	0xe000ed04

08015b78 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015b78:	b580      	push	{r7, lr}
 8015b7a:	b08e      	sub	sp, #56	@ 0x38
 8015b7c:	af00      	add	r7, sp, #0
 8015b7e:	60f8      	str	r0, [r7, #12]
 8015b80:	60b9      	str	r1, [r7, #8]
 8015b82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8015b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d10d      	bne.n	8015baa <xQueueReceiveFromISR+0x32>
	__asm volatile
 8015b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b92:	b672      	cpsid	i
 8015b94:	f383 8811 	msr	BASEPRI, r3
 8015b98:	f3bf 8f6f 	isb	sy
 8015b9c:	f3bf 8f4f 	dsb	sy
 8015ba0:	b662      	cpsie	i
 8015ba2:	623b      	str	r3, [r7, #32]
}
 8015ba4:	bf00      	nop
 8015ba6:	bf00      	nop
 8015ba8:	e7fd      	b.n	8015ba6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015baa:	68bb      	ldr	r3, [r7, #8]
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d103      	bne.n	8015bb8 <xQueueReceiveFromISR+0x40>
 8015bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d101      	bne.n	8015bbc <xQueueReceiveFromISR+0x44>
 8015bb8:	2301      	movs	r3, #1
 8015bba:	e000      	b.n	8015bbe <xQueueReceiveFromISR+0x46>
 8015bbc:	2300      	movs	r3, #0
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d10d      	bne.n	8015bde <xQueueReceiveFromISR+0x66>
	__asm volatile
 8015bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015bc6:	b672      	cpsid	i
 8015bc8:	f383 8811 	msr	BASEPRI, r3
 8015bcc:	f3bf 8f6f 	isb	sy
 8015bd0:	f3bf 8f4f 	dsb	sy
 8015bd4:	b662      	cpsie	i
 8015bd6:	61fb      	str	r3, [r7, #28]
}
 8015bd8:	bf00      	nop
 8015bda:	bf00      	nop
 8015bdc:	e7fd      	b.n	8015bda <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015bde:	f001 faf5 	bl	80171cc <vPortValidateInterruptPriority>
	__asm volatile
 8015be2:	f3ef 8211 	mrs	r2, BASEPRI
 8015be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015bea:	b672      	cpsid	i
 8015bec:	f383 8811 	msr	BASEPRI, r3
 8015bf0:	f3bf 8f6f 	isb	sy
 8015bf4:	f3bf 8f4f 	dsb	sy
 8015bf8:	b662      	cpsie	i
 8015bfa:	61ba      	str	r2, [r7, #24]
 8015bfc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8015bfe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015c06:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d02f      	beq.n	8015c6e <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8015c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015c14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015c18:	68b9      	ldr	r1, [r7, #8]
 8015c1a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015c1c:	f000 f8e0 	bl	8015de0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c22:	1e5a      	subs	r2, r3, #1
 8015c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c26:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8015c28:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8015c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c30:	d112      	bne.n	8015c58 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c34:	691b      	ldr	r3, [r3, #16]
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d016      	beq.n	8015c68 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c3c:	3310      	adds	r3, #16
 8015c3e:	4618      	mov	r0, r3
 8015c40:	f000 fdf4 	bl	801682c <xTaskRemoveFromEventList>
 8015c44:	4603      	mov	r3, r0
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d00e      	beq.n	8015c68 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d00b      	beq.n	8015c68 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	2201      	movs	r2, #1
 8015c54:	601a      	str	r2, [r3, #0]
 8015c56:	e007      	b.n	8015c68 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8015c58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015c5c:	3301      	adds	r3, #1
 8015c5e:	b2db      	uxtb	r3, r3
 8015c60:	b25a      	sxtb	r2, r3
 8015c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8015c68:	2301      	movs	r3, #1
 8015c6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8015c6c:	e001      	b.n	8015c72 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8015c6e:	2300      	movs	r3, #0
 8015c70:	637b      	str	r3, [r7, #52]	@ 0x34
 8015c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c74:	613b      	str	r3, [r7, #16]
	__asm volatile
 8015c76:	693b      	ldr	r3, [r7, #16]
 8015c78:	f383 8811 	msr	BASEPRI, r3
}
 8015c7c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8015c80:	4618      	mov	r0, r3
 8015c82:	3738      	adds	r7, #56	@ 0x38
 8015c84:	46bd      	mov	sp, r7
 8015c86:	bd80      	pop	{r7, pc}

08015c88 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8015c88:	b580      	push	{r7, lr}
 8015c8a:	b084      	sub	sp, #16
 8015c8c:	af00      	add	r7, sp, #0
 8015c8e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d10d      	bne.n	8015cb2 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8015c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c9a:	b672      	cpsid	i
 8015c9c:	f383 8811 	msr	BASEPRI, r3
 8015ca0:	f3bf 8f6f 	isb	sy
 8015ca4:	f3bf 8f4f 	dsb	sy
 8015ca8:	b662      	cpsie	i
 8015caa:	60bb      	str	r3, [r7, #8]
}
 8015cac:	bf00      	nop
 8015cae:	bf00      	nop
 8015cb0:	e7fd      	b.n	8015cae <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8015cb2:	f001 f9a3 	bl	8016ffc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015cba:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8015cbc:	f001 f9d4 	bl	8017068 <vPortExitCritical>

	return uxReturn;
 8015cc0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	3710      	adds	r7, #16
 8015cc6:	46bd      	mov	sp, r7
 8015cc8:	bd80      	pop	{r7, pc}

08015cca <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8015cca:	b480      	push	{r7}
 8015ccc:	b087      	sub	sp, #28
 8015cce:	af00      	add	r7, sp, #0
 8015cd0:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8015cd6:	697b      	ldr	r3, [r7, #20]
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d10d      	bne.n	8015cf8 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 8015cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ce0:	b672      	cpsid	i
 8015ce2:	f383 8811 	msr	BASEPRI, r3
 8015ce6:	f3bf 8f6f 	isb	sy
 8015cea:	f3bf 8f4f 	dsb	sy
 8015cee:	b662      	cpsie	i
 8015cf0:	60fb      	str	r3, [r7, #12]
}
 8015cf2:	bf00      	nop
 8015cf4:	bf00      	nop
 8015cf6:	e7fd      	b.n	8015cf4 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8015cf8:	697b      	ldr	r3, [r7, #20]
 8015cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015cfc:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8015cfe:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8015d00:	4618      	mov	r0, r3
 8015d02:	371c      	adds	r7, #28
 8015d04:	46bd      	mov	sp, r7
 8015d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d0a:	4770      	bx	lr

08015d0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015d0c:	b580      	push	{r7, lr}
 8015d0e:	b086      	sub	sp, #24
 8015d10:	af00      	add	r7, sp, #0
 8015d12:	60f8      	str	r0, [r7, #12]
 8015d14:	60b9      	str	r1, [r7, #8]
 8015d16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015d18:	2300      	movs	r3, #0
 8015d1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015d20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015d22:	68fb      	ldr	r3, [r7, #12]
 8015d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d10d      	bne.n	8015d46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015d2a:	68fb      	ldr	r3, [r7, #12]
 8015d2c:	681b      	ldr	r3, [r3, #0]
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d14d      	bne.n	8015dce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015d32:	68fb      	ldr	r3, [r7, #12]
 8015d34:	689b      	ldr	r3, [r3, #8]
 8015d36:	4618      	mov	r0, r3
 8015d38:	f000 ff60 	bl	8016bfc <xTaskPriorityDisinherit>
 8015d3c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	2200      	movs	r2, #0
 8015d42:	609a      	str	r2, [r3, #8]
 8015d44:	e043      	b.n	8015dce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d119      	bne.n	8015d80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015d4c:	68fb      	ldr	r3, [r7, #12]
 8015d4e:	6858      	ldr	r0, [r3, #4]
 8015d50:	68fb      	ldr	r3, [r7, #12]
 8015d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015d54:	461a      	mov	r2, r3
 8015d56:	68b9      	ldr	r1, [r7, #8]
 8015d58:	f002 f855 	bl	8017e06 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	685a      	ldr	r2, [r3, #4]
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015d64:	441a      	add	r2, r3
 8015d66:	68fb      	ldr	r3, [r7, #12]
 8015d68:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015d6a:	68fb      	ldr	r3, [r7, #12]
 8015d6c:	685a      	ldr	r2, [r3, #4]
 8015d6e:	68fb      	ldr	r3, [r7, #12]
 8015d70:	689b      	ldr	r3, [r3, #8]
 8015d72:	429a      	cmp	r2, r3
 8015d74:	d32b      	bcc.n	8015dce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015d76:	68fb      	ldr	r3, [r7, #12]
 8015d78:	681a      	ldr	r2, [r3, #0]
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	605a      	str	r2, [r3, #4]
 8015d7e:	e026      	b.n	8015dce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015d80:	68fb      	ldr	r3, [r7, #12]
 8015d82:	68d8      	ldr	r0, [r3, #12]
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015d88:	461a      	mov	r2, r3
 8015d8a:	68b9      	ldr	r1, [r7, #8]
 8015d8c:	f002 f83b 	bl	8017e06 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015d90:	68fb      	ldr	r3, [r7, #12]
 8015d92:	68da      	ldr	r2, [r3, #12]
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015d98:	425b      	negs	r3, r3
 8015d9a:	441a      	add	r2, r3
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015da0:	68fb      	ldr	r3, [r7, #12]
 8015da2:	68da      	ldr	r2, [r3, #12]
 8015da4:	68fb      	ldr	r3, [r7, #12]
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	429a      	cmp	r2, r3
 8015daa:	d207      	bcs.n	8015dbc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015dac:	68fb      	ldr	r3, [r7, #12]
 8015dae:	689a      	ldr	r2, [r3, #8]
 8015db0:	68fb      	ldr	r3, [r7, #12]
 8015db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015db4:	425b      	negs	r3, r3
 8015db6:	441a      	add	r2, r3
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	2b02      	cmp	r3, #2
 8015dc0:	d105      	bne.n	8015dce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015dc2:	693b      	ldr	r3, [r7, #16]
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d002      	beq.n	8015dce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015dc8:	693b      	ldr	r3, [r7, #16]
 8015dca:	3b01      	subs	r3, #1
 8015dcc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015dce:	693b      	ldr	r3, [r7, #16]
 8015dd0:	1c5a      	adds	r2, r3, #1
 8015dd2:	68fb      	ldr	r3, [r7, #12]
 8015dd4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8015dd6:	697b      	ldr	r3, [r7, #20]
}
 8015dd8:	4618      	mov	r0, r3
 8015dda:	3718      	adds	r7, #24
 8015ddc:	46bd      	mov	sp, r7
 8015dde:	bd80      	pop	{r7, pc}

08015de0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015de0:	b580      	push	{r7, lr}
 8015de2:	b082      	sub	sp, #8
 8015de4:	af00      	add	r7, sp, #0
 8015de6:	6078      	str	r0, [r7, #4]
 8015de8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d018      	beq.n	8015e24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	68da      	ldr	r2, [r3, #12]
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015dfa:	441a      	add	r2, r3
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	68da      	ldr	r2, [r3, #12]
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	689b      	ldr	r3, [r3, #8]
 8015e08:	429a      	cmp	r2, r3
 8015e0a:	d303      	bcc.n	8015e14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	681a      	ldr	r2, [r3, #0]
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	68d9      	ldr	r1, [r3, #12]
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015e1c:	461a      	mov	r2, r3
 8015e1e:	6838      	ldr	r0, [r7, #0]
 8015e20:	f001 fff1 	bl	8017e06 <memcpy>
	}
}
 8015e24:	bf00      	nop
 8015e26:	3708      	adds	r7, #8
 8015e28:	46bd      	mov	sp, r7
 8015e2a:	bd80      	pop	{r7, pc}

08015e2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015e2c:	b580      	push	{r7, lr}
 8015e2e:	b084      	sub	sp, #16
 8015e30:	af00      	add	r7, sp, #0
 8015e32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015e34:	f001 f8e2 	bl	8016ffc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015e3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015e40:	e011      	b.n	8015e66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d012      	beq.n	8015e70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	3324      	adds	r3, #36	@ 0x24
 8015e4e:	4618      	mov	r0, r3
 8015e50:	f000 fcec 	bl	801682c <xTaskRemoveFromEventList>
 8015e54:	4603      	mov	r3, r0
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d001      	beq.n	8015e5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015e5a:	f000 fdcb 	bl	80169f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015e5e:	7bfb      	ldrb	r3, [r7, #15]
 8015e60:	3b01      	subs	r3, #1
 8015e62:	b2db      	uxtb	r3, r3
 8015e64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	dce9      	bgt.n	8015e42 <prvUnlockQueue+0x16>
 8015e6e:	e000      	b.n	8015e72 <prvUnlockQueue+0x46>
					break;
 8015e70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	22ff      	movs	r2, #255	@ 0xff
 8015e76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8015e7a:	f001 f8f5 	bl	8017068 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015e7e:	f001 f8bd 	bl	8016ffc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015e88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015e8a:	e011      	b.n	8015eb0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	691b      	ldr	r3, [r3, #16]
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d012      	beq.n	8015eba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	3310      	adds	r3, #16
 8015e98:	4618      	mov	r0, r3
 8015e9a:	f000 fcc7 	bl	801682c <xTaskRemoveFromEventList>
 8015e9e:	4603      	mov	r3, r0
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d001      	beq.n	8015ea8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015ea4:	f000 fda6 	bl	80169f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015ea8:	7bbb      	ldrb	r3, [r7, #14]
 8015eaa:	3b01      	subs	r3, #1
 8015eac:	b2db      	uxtb	r3, r3
 8015eae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015eb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	dce9      	bgt.n	8015e8c <prvUnlockQueue+0x60>
 8015eb8:	e000      	b.n	8015ebc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8015eba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	22ff      	movs	r2, #255	@ 0xff
 8015ec0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8015ec4:	f001 f8d0 	bl	8017068 <vPortExitCritical>
}
 8015ec8:	bf00      	nop
 8015eca:	3710      	adds	r7, #16
 8015ecc:	46bd      	mov	sp, r7
 8015ece:	bd80      	pop	{r7, pc}

08015ed0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015ed0:	b580      	push	{r7, lr}
 8015ed2:	b084      	sub	sp, #16
 8015ed4:	af00      	add	r7, sp, #0
 8015ed6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015ed8:	f001 f890 	bl	8016ffc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d102      	bne.n	8015eea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8015ee4:	2301      	movs	r3, #1
 8015ee6:	60fb      	str	r3, [r7, #12]
 8015ee8:	e001      	b.n	8015eee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8015eea:	2300      	movs	r3, #0
 8015eec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015eee:	f001 f8bb 	bl	8017068 <vPortExitCritical>

	return xReturn;
 8015ef2:	68fb      	ldr	r3, [r7, #12]
}
 8015ef4:	4618      	mov	r0, r3
 8015ef6:	3710      	adds	r7, #16
 8015ef8:	46bd      	mov	sp, r7
 8015efa:	bd80      	pop	{r7, pc}

08015efc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8015efc:	b580      	push	{r7, lr}
 8015efe:	b084      	sub	sp, #16
 8015f00:	af00      	add	r7, sp, #0
 8015f02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015f04:	f001 f87a 	bl	8016ffc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015f10:	429a      	cmp	r2, r3
 8015f12:	d102      	bne.n	8015f1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8015f14:	2301      	movs	r3, #1
 8015f16:	60fb      	str	r3, [r7, #12]
 8015f18:	e001      	b.n	8015f1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8015f1a:	2300      	movs	r3, #0
 8015f1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015f1e:	f001 f8a3 	bl	8017068 <vPortExitCritical>

	return xReturn;
 8015f22:	68fb      	ldr	r3, [r7, #12]
}
 8015f24:	4618      	mov	r0, r3
 8015f26:	3710      	adds	r7, #16
 8015f28:	46bd      	mov	sp, r7
 8015f2a:	bd80      	pop	{r7, pc}

08015f2c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8015f2c:	b580      	push	{r7, lr}
 8015f2e:	b08e      	sub	sp, #56	@ 0x38
 8015f30:	af04      	add	r7, sp, #16
 8015f32:	60f8      	str	r0, [r7, #12]
 8015f34:	60b9      	str	r1, [r7, #8]
 8015f36:	607a      	str	r2, [r7, #4]
 8015f38:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8015f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d10d      	bne.n	8015f5c <xTaskCreateStatic+0x30>
	__asm volatile
 8015f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f44:	b672      	cpsid	i
 8015f46:	f383 8811 	msr	BASEPRI, r3
 8015f4a:	f3bf 8f6f 	isb	sy
 8015f4e:	f3bf 8f4f 	dsb	sy
 8015f52:	b662      	cpsie	i
 8015f54:	623b      	str	r3, [r7, #32]
}
 8015f56:	bf00      	nop
 8015f58:	bf00      	nop
 8015f5a:	e7fd      	b.n	8015f58 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8015f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d10d      	bne.n	8015f7e <xTaskCreateStatic+0x52>
	__asm volatile
 8015f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f66:	b672      	cpsid	i
 8015f68:	f383 8811 	msr	BASEPRI, r3
 8015f6c:	f3bf 8f6f 	isb	sy
 8015f70:	f3bf 8f4f 	dsb	sy
 8015f74:	b662      	cpsie	i
 8015f76:	61fb      	str	r3, [r7, #28]
}
 8015f78:	bf00      	nop
 8015f7a:	bf00      	nop
 8015f7c:	e7fd      	b.n	8015f7a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8015f7e:	2358      	movs	r3, #88	@ 0x58
 8015f80:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8015f82:	693b      	ldr	r3, [r7, #16]
 8015f84:	2b58      	cmp	r3, #88	@ 0x58
 8015f86:	d00d      	beq.n	8015fa4 <xTaskCreateStatic+0x78>
	__asm volatile
 8015f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f8c:	b672      	cpsid	i
 8015f8e:	f383 8811 	msr	BASEPRI, r3
 8015f92:	f3bf 8f6f 	isb	sy
 8015f96:	f3bf 8f4f 	dsb	sy
 8015f9a:	b662      	cpsie	i
 8015f9c:	61bb      	str	r3, [r7, #24]
}
 8015f9e:	bf00      	nop
 8015fa0:	bf00      	nop
 8015fa2:	e7fd      	b.n	8015fa0 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8015fa4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8015fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d01e      	beq.n	8015fea <xTaskCreateStatic+0xbe>
 8015fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d01b      	beq.n	8015fea <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015fb4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8015fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fb8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015fba:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8015fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fbe:	2202      	movs	r2, #2
 8015fc0:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8015fc4:	2300      	movs	r3, #0
 8015fc6:	9303      	str	r3, [sp, #12]
 8015fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fca:	9302      	str	r3, [sp, #8]
 8015fcc:	f107 0314 	add.w	r3, r7, #20
 8015fd0:	9301      	str	r3, [sp, #4]
 8015fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015fd4:	9300      	str	r3, [sp, #0]
 8015fd6:	683b      	ldr	r3, [r7, #0]
 8015fd8:	687a      	ldr	r2, [r7, #4]
 8015fda:	68b9      	ldr	r1, [r7, #8]
 8015fdc:	68f8      	ldr	r0, [r7, #12]
 8015fde:	f000 f850 	bl	8016082 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015fe2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015fe4:	f000 f8e2 	bl	80161ac <prvAddNewTaskToReadyList>
 8015fe8:	e001      	b.n	8015fee <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8015fea:	2300      	movs	r3, #0
 8015fec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8015fee:	697b      	ldr	r3, [r7, #20]
	}
 8015ff0:	4618      	mov	r0, r3
 8015ff2:	3728      	adds	r7, #40	@ 0x28
 8015ff4:	46bd      	mov	sp, r7
 8015ff6:	bd80      	pop	{r7, pc}

08015ff8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8015ff8:	b580      	push	{r7, lr}
 8015ffa:	b08c      	sub	sp, #48	@ 0x30
 8015ffc:	af04      	add	r7, sp, #16
 8015ffe:	60f8      	str	r0, [r7, #12]
 8016000:	60b9      	str	r1, [r7, #8]
 8016002:	603b      	str	r3, [r7, #0]
 8016004:	4613      	mov	r3, r2
 8016006:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016008:	88fb      	ldrh	r3, [r7, #6]
 801600a:	009b      	lsls	r3, r3, #2
 801600c:	4618      	mov	r0, r3
 801600e:	f001 f923 	bl	8017258 <pvPortMalloc>
 8016012:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016014:	697b      	ldr	r3, [r7, #20]
 8016016:	2b00      	cmp	r3, #0
 8016018:	d00e      	beq.n	8016038 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801601a:	2058      	movs	r0, #88	@ 0x58
 801601c:	f001 f91c 	bl	8017258 <pvPortMalloc>
 8016020:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016022:	69fb      	ldr	r3, [r7, #28]
 8016024:	2b00      	cmp	r3, #0
 8016026:	d003      	beq.n	8016030 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016028:	69fb      	ldr	r3, [r7, #28]
 801602a:	697a      	ldr	r2, [r7, #20]
 801602c:	631a      	str	r2, [r3, #48]	@ 0x30
 801602e:	e005      	b.n	801603c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016030:	6978      	ldr	r0, [r7, #20]
 8016032:	f001 f9e3 	bl	80173fc <vPortFree>
 8016036:	e001      	b.n	801603c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016038:	2300      	movs	r3, #0
 801603a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801603c:	69fb      	ldr	r3, [r7, #28]
 801603e:	2b00      	cmp	r3, #0
 8016040:	d017      	beq.n	8016072 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016042:	69fb      	ldr	r3, [r7, #28]
 8016044:	2200      	movs	r2, #0
 8016046:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801604a:	88fa      	ldrh	r2, [r7, #6]
 801604c:	2300      	movs	r3, #0
 801604e:	9303      	str	r3, [sp, #12]
 8016050:	69fb      	ldr	r3, [r7, #28]
 8016052:	9302      	str	r3, [sp, #8]
 8016054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016056:	9301      	str	r3, [sp, #4]
 8016058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801605a:	9300      	str	r3, [sp, #0]
 801605c:	683b      	ldr	r3, [r7, #0]
 801605e:	68b9      	ldr	r1, [r7, #8]
 8016060:	68f8      	ldr	r0, [r7, #12]
 8016062:	f000 f80e 	bl	8016082 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016066:	69f8      	ldr	r0, [r7, #28]
 8016068:	f000 f8a0 	bl	80161ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801606c:	2301      	movs	r3, #1
 801606e:	61bb      	str	r3, [r7, #24]
 8016070:	e002      	b.n	8016078 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016072:	f04f 33ff 	mov.w	r3, #4294967295
 8016076:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8016078:	69bb      	ldr	r3, [r7, #24]
	}
 801607a:	4618      	mov	r0, r3
 801607c:	3720      	adds	r7, #32
 801607e:	46bd      	mov	sp, r7
 8016080:	bd80      	pop	{r7, pc}

08016082 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8016082:	b580      	push	{r7, lr}
 8016084:	b088      	sub	sp, #32
 8016086:	af00      	add	r7, sp, #0
 8016088:	60f8      	str	r0, [r7, #12]
 801608a:	60b9      	str	r1, [r7, #8]
 801608c:	607a      	str	r2, [r7, #4]
 801608e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8016090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016092:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	009b      	lsls	r3, r3, #2
 8016098:	461a      	mov	r2, r3
 801609a:	21a5      	movs	r1, #165	@ 0xa5
 801609c:	f001 fdf2 	bl	8017c84 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80160a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80160a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80160a4:	6879      	ldr	r1, [r7, #4]
 80160a6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80160aa:	440b      	add	r3, r1
 80160ac:	009b      	lsls	r3, r3, #2
 80160ae:	4413      	add	r3, r2
 80160b0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80160b2:	69bb      	ldr	r3, [r7, #24]
 80160b4:	f023 0307 	bic.w	r3, r3, #7
 80160b8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80160ba:	69bb      	ldr	r3, [r7, #24]
 80160bc:	f003 0307 	and.w	r3, r3, #7
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d00d      	beq.n	80160e0 <prvInitialiseNewTask+0x5e>
	__asm volatile
 80160c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80160c8:	b672      	cpsid	i
 80160ca:	f383 8811 	msr	BASEPRI, r3
 80160ce:	f3bf 8f6f 	isb	sy
 80160d2:	f3bf 8f4f 	dsb	sy
 80160d6:	b662      	cpsie	i
 80160d8:	617b      	str	r3, [r7, #20]
}
 80160da:	bf00      	nop
 80160dc:	bf00      	nop
 80160de:	e7fd      	b.n	80160dc <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80160e0:	68bb      	ldr	r3, [r7, #8]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d01f      	beq.n	8016126 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80160e6:	2300      	movs	r3, #0
 80160e8:	61fb      	str	r3, [r7, #28]
 80160ea:	e012      	b.n	8016112 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80160ec:	68ba      	ldr	r2, [r7, #8]
 80160ee:	69fb      	ldr	r3, [r7, #28]
 80160f0:	4413      	add	r3, r2
 80160f2:	7819      	ldrb	r1, [r3, #0]
 80160f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80160f6:	69fb      	ldr	r3, [r7, #28]
 80160f8:	4413      	add	r3, r2
 80160fa:	3334      	adds	r3, #52	@ 0x34
 80160fc:	460a      	mov	r2, r1
 80160fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8016100:	68ba      	ldr	r2, [r7, #8]
 8016102:	69fb      	ldr	r3, [r7, #28]
 8016104:	4413      	add	r3, r2
 8016106:	781b      	ldrb	r3, [r3, #0]
 8016108:	2b00      	cmp	r3, #0
 801610a:	d006      	beq.n	801611a <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801610c:	69fb      	ldr	r3, [r7, #28]
 801610e:	3301      	adds	r3, #1
 8016110:	61fb      	str	r3, [r7, #28]
 8016112:	69fb      	ldr	r3, [r7, #28]
 8016114:	2b0f      	cmp	r3, #15
 8016116:	d9e9      	bls.n	80160ec <prvInitialiseNewTask+0x6a>
 8016118:	e000      	b.n	801611c <prvInitialiseNewTask+0x9a>
			{
				break;
 801611a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801611c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801611e:	2200      	movs	r2, #0
 8016120:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8016124:	e003      	b.n	801612e <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8016126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016128:	2200      	movs	r2, #0
 801612a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801612e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016130:	2b06      	cmp	r3, #6
 8016132:	d901      	bls.n	8016138 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016134:	2306      	movs	r3, #6
 8016136:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801613a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801613c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801613e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016140:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016142:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8016144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016146:	2200      	movs	r2, #0
 8016148:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801614a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801614c:	3304      	adds	r3, #4
 801614e:	4618      	mov	r0, r3
 8016150:	f7ff f892 	bl	8015278 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016156:	3318      	adds	r3, #24
 8016158:	4618      	mov	r0, r3
 801615a:	f7ff f88d 	bl	8015278 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801615e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016160:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016162:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016166:	f1c3 0207 	rsb	r2, r3, #7
 801616a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801616c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801616e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016170:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016172:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8016174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016176:	2200      	movs	r2, #0
 8016178:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801617a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801617c:	2200      	movs	r2, #0
 801617e:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016182:	2200      	movs	r2, #0
 8016184:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016188:	683a      	ldr	r2, [r7, #0]
 801618a:	68f9      	ldr	r1, [r7, #12]
 801618c:	69b8      	ldr	r0, [r7, #24]
 801618e:	f000 fe27 	bl	8016de0 <pxPortInitialiseStack>
 8016192:	4602      	mov	r2, r0
 8016194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016196:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8016198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801619a:	2b00      	cmp	r3, #0
 801619c:	d002      	beq.n	80161a4 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801619e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80161a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80161a4:	bf00      	nop
 80161a6:	3720      	adds	r7, #32
 80161a8:	46bd      	mov	sp, r7
 80161aa:	bd80      	pop	{r7, pc}

080161ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80161ac:	b580      	push	{r7, lr}
 80161ae:	b082      	sub	sp, #8
 80161b0:	af00      	add	r7, sp, #0
 80161b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80161b4:	f000 ff22 	bl	8016ffc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80161b8:	4b2a      	ldr	r3, [pc, #168]	@ (8016264 <prvAddNewTaskToReadyList+0xb8>)
 80161ba:	681b      	ldr	r3, [r3, #0]
 80161bc:	3301      	adds	r3, #1
 80161be:	4a29      	ldr	r2, [pc, #164]	@ (8016264 <prvAddNewTaskToReadyList+0xb8>)
 80161c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80161c2:	4b29      	ldr	r3, [pc, #164]	@ (8016268 <prvAddNewTaskToReadyList+0xbc>)
 80161c4:	681b      	ldr	r3, [r3, #0]
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d109      	bne.n	80161de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80161ca:	4a27      	ldr	r2, [pc, #156]	@ (8016268 <prvAddNewTaskToReadyList+0xbc>)
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80161d0:	4b24      	ldr	r3, [pc, #144]	@ (8016264 <prvAddNewTaskToReadyList+0xb8>)
 80161d2:	681b      	ldr	r3, [r3, #0]
 80161d4:	2b01      	cmp	r3, #1
 80161d6:	d110      	bne.n	80161fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80161d8:	f000 fc32 	bl	8016a40 <prvInitialiseTaskLists>
 80161dc:	e00d      	b.n	80161fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80161de:	4b23      	ldr	r3, [pc, #140]	@ (801626c <prvAddNewTaskToReadyList+0xc0>)
 80161e0:	681b      	ldr	r3, [r3, #0]
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d109      	bne.n	80161fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80161e6:	4b20      	ldr	r3, [pc, #128]	@ (8016268 <prvAddNewTaskToReadyList+0xbc>)
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80161f0:	429a      	cmp	r2, r3
 80161f2:	d802      	bhi.n	80161fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80161f4:	4a1c      	ldr	r2, [pc, #112]	@ (8016268 <prvAddNewTaskToReadyList+0xbc>)
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80161fa:	4b1d      	ldr	r3, [pc, #116]	@ (8016270 <prvAddNewTaskToReadyList+0xc4>)
 80161fc:	681b      	ldr	r3, [r3, #0]
 80161fe:	3301      	adds	r3, #1
 8016200:	4a1b      	ldr	r2, [pc, #108]	@ (8016270 <prvAddNewTaskToReadyList+0xc4>)
 8016202:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016208:	2201      	movs	r2, #1
 801620a:	409a      	lsls	r2, r3
 801620c:	4b19      	ldr	r3, [pc, #100]	@ (8016274 <prvAddNewTaskToReadyList+0xc8>)
 801620e:	681b      	ldr	r3, [r3, #0]
 8016210:	4313      	orrs	r3, r2
 8016212:	4a18      	ldr	r2, [pc, #96]	@ (8016274 <prvAddNewTaskToReadyList+0xc8>)
 8016214:	6013      	str	r3, [r2, #0]
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801621a:	4613      	mov	r3, r2
 801621c:	009b      	lsls	r3, r3, #2
 801621e:	4413      	add	r3, r2
 8016220:	009b      	lsls	r3, r3, #2
 8016222:	4a15      	ldr	r2, [pc, #84]	@ (8016278 <prvAddNewTaskToReadyList+0xcc>)
 8016224:	441a      	add	r2, r3
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	3304      	adds	r3, #4
 801622a:	4619      	mov	r1, r3
 801622c:	4610      	mov	r0, r2
 801622e:	f7ff f830 	bl	8015292 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016232:	f000 ff19 	bl	8017068 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8016236:	4b0d      	ldr	r3, [pc, #52]	@ (801626c <prvAddNewTaskToReadyList+0xc0>)
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	2b00      	cmp	r3, #0
 801623c:	d00e      	beq.n	801625c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801623e:	4b0a      	ldr	r3, [pc, #40]	@ (8016268 <prvAddNewTaskToReadyList+0xbc>)
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016248:	429a      	cmp	r2, r3
 801624a:	d207      	bcs.n	801625c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801624c:	4b0b      	ldr	r3, [pc, #44]	@ (801627c <prvAddNewTaskToReadyList+0xd0>)
 801624e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016252:	601a      	str	r2, [r3, #0]
 8016254:	f3bf 8f4f 	dsb	sy
 8016258:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801625c:	bf00      	nop
 801625e:	3708      	adds	r7, #8
 8016260:	46bd      	mov	sp, r7
 8016262:	bd80      	pop	{r7, pc}
 8016264:	20002c38 	.word	0x20002c38
 8016268:	20002b38 	.word	0x20002b38
 801626c:	20002c44 	.word	0x20002c44
 8016270:	20002c54 	.word	0x20002c54
 8016274:	20002c40 	.word	0x20002c40
 8016278:	20002b3c 	.word	0x20002b3c
 801627c:	e000ed04 	.word	0xe000ed04

08016280 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8016280:	b580      	push	{r7, lr}
 8016282:	b084      	sub	sp, #16
 8016284:	af00      	add	r7, sp, #0
 8016286:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8016288:	2300      	movs	r3, #0
 801628a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	2b00      	cmp	r3, #0
 8016290:	d01a      	beq.n	80162c8 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8016292:	4b15      	ldr	r3, [pc, #84]	@ (80162e8 <vTaskDelay+0x68>)
 8016294:	681b      	ldr	r3, [r3, #0]
 8016296:	2b00      	cmp	r3, #0
 8016298:	d00d      	beq.n	80162b6 <vTaskDelay+0x36>
	__asm volatile
 801629a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801629e:	b672      	cpsid	i
 80162a0:	f383 8811 	msr	BASEPRI, r3
 80162a4:	f3bf 8f6f 	isb	sy
 80162a8:	f3bf 8f4f 	dsb	sy
 80162ac:	b662      	cpsie	i
 80162ae:	60bb      	str	r3, [r7, #8]
}
 80162b0:	bf00      	nop
 80162b2:	bf00      	nop
 80162b4:	e7fd      	b.n	80162b2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80162b6:	f000 f881 	bl	80163bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80162ba:	2100      	movs	r1, #0
 80162bc:	6878      	ldr	r0, [r7, #4]
 80162be:	f000 fd29 	bl	8016d14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80162c2:	f000 f889 	bl	80163d8 <xTaskResumeAll>
 80162c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d107      	bne.n	80162de <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80162ce:	4b07      	ldr	r3, [pc, #28]	@ (80162ec <vTaskDelay+0x6c>)
 80162d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80162d4:	601a      	str	r2, [r3, #0]
 80162d6:	f3bf 8f4f 	dsb	sy
 80162da:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80162de:	bf00      	nop
 80162e0:	3710      	adds	r7, #16
 80162e2:	46bd      	mov	sp, r7
 80162e4:	bd80      	pop	{r7, pc}
 80162e6:	bf00      	nop
 80162e8:	20002c60 	.word	0x20002c60
 80162ec:	e000ed04 	.word	0xe000ed04

080162f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80162f0:	b580      	push	{r7, lr}
 80162f2:	b08a      	sub	sp, #40	@ 0x28
 80162f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80162f6:	2300      	movs	r3, #0
 80162f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80162fa:	2300      	movs	r3, #0
 80162fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80162fe:	463a      	mov	r2, r7
 8016300:	1d39      	adds	r1, r7, #4
 8016302:	f107 0308 	add.w	r3, r7, #8
 8016306:	4618      	mov	r0, r3
 8016308:	f7eb ff58 	bl	80021bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801630c:	6839      	ldr	r1, [r7, #0]
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	68ba      	ldr	r2, [r7, #8]
 8016312:	9202      	str	r2, [sp, #8]
 8016314:	9301      	str	r3, [sp, #4]
 8016316:	2300      	movs	r3, #0
 8016318:	9300      	str	r3, [sp, #0]
 801631a:	2300      	movs	r3, #0
 801631c:	460a      	mov	r2, r1
 801631e:	4921      	ldr	r1, [pc, #132]	@ (80163a4 <vTaskStartScheduler+0xb4>)
 8016320:	4821      	ldr	r0, [pc, #132]	@ (80163a8 <vTaskStartScheduler+0xb8>)
 8016322:	f7ff fe03 	bl	8015f2c <xTaskCreateStatic>
 8016326:	4603      	mov	r3, r0
 8016328:	4a20      	ldr	r2, [pc, #128]	@ (80163ac <vTaskStartScheduler+0xbc>)
 801632a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801632c:	4b1f      	ldr	r3, [pc, #124]	@ (80163ac <vTaskStartScheduler+0xbc>)
 801632e:	681b      	ldr	r3, [r3, #0]
 8016330:	2b00      	cmp	r3, #0
 8016332:	d002      	beq.n	801633a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016334:	2301      	movs	r3, #1
 8016336:	617b      	str	r3, [r7, #20]
 8016338:	e001      	b.n	801633e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801633a:	2300      	movs	r3, #0
 801633c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801633e:	697b      	ldr	r3, [r7, #20]
 8016340:	2b01      	cmp	r3, #1
 8016342:	d118      	bne.n	8016376 <vTaskStartScheduler+0x86>
	__asm volatile
 8016344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016348:	b672      	cpsid	i
 801634a:	f383 8811 	msr	BASEPRI, r3
 801634e:	f3bf 8f6f 	isb	sy
 8016352:	f3bf 8f4f 	dsb	sy
 8016356:	b662      	cpsie	i
 8016358:	613b      	str	r3, [r7, #16]
}
 801635a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801635c:	4b14      	ldr	r3, [pc, #80]	@ (80163b0 <vTaskStartScheduler+0xc0>)
 801635e:	f04f 32ff 	mov.w	r2, #4294967295
 8016362:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8016364:	4b13      	ldr	r3, [pc, #76]	@ (80163b4 <vTaskStartScheduler+0xc4>)
 8016366:	2201      	movs	r2, #1
 8016368:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801636a:	4b13      	ldr	r3, [pc, #76]	@ (80163b8 <vTaskStartScheduler+0xc8>)
 801636c:	2200      	movs	r2, #0
 801636e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8016370:	f000 fdc6 	bl	8016f00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8016374:	e011      	b.n	801639a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8016376:	697b      	ldr	r3, [r7, #20]
 8016378:	f1b3 3fff 	cmp.w	r3, #4294967295
 801637c:	d10d      	bne.n	801639a <vTaskStartScheduler+0xaa>
	__asm volatile
 801637e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016382:	b672      	cpsid	i
 8016384:	f383 8811 	msr	BASEPRI, r3
 8016388:	f3bf 8f6f 	isb	sy
 801638c:	f3bf 8f4f 	dsb	sy
 8016390:	b662      	cpsie	i
 8016392:	60fb      	str	r3, [r7, #12]
}
 8016394:	bf00      	nop
 8016396:	bf00      	nop
 8016398:	e7fd      	b.n	8016396 <vTaskStartScheduler+0xa6>
}
 801639a:	bf00      	nop
 801639c:	3718      	adds	r7, #24
 801639e:	46bd      	mov	sp, r7
 80163a0:	bd80      	pop	{r7, pc}
 80163a2:	bf00      	nop
 80163a4:	0801ccd0 	.word	0x0801ccd0
 80163a8:	08016a0d 	.word	0x08016a0d
 80163ac:	20002c5c 	.word	0x20002c5c
 80163b0:	20002c58 	.word	0x20002c58
 80163b4:	20002c44 	.word	0x20002c44
 80163b8:	20002c3c 	.word	0x20002c3c

080163bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80163bc:	b480      	push	{r7}
 80163be:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80163c0:	4b04      	ldr	r3, [pc, #16]	@ (80163d4 <vTaskSuspendAll+0x18>)
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	3301      	adds	r3, #1
 80163c6:	4a03      	ldr	r2, [pc, #12]	@ (80163d4 <vTaskSuspendAll+0x18>)
 80163c8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80163ca:	bf00      	nop
 80163cc:	46bd      	mov	sp, r7
 80163ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163d2:	4770      	bx	lr
 80163d4:	20002c60 	.word	0x20002c60

080163d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80163d8:	b580      	push	{r7, lr}
 80163da:	b084      	sub	sp, #16
 80163dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80163de:	2300      	movs	r3, #0
 80163e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80163e2:	2300      	movs	r3, #0
 80163e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80163e6:	4b43      	ldr	r3, [pc, #268]	@ (80164f4 <xTaskResumeAll+0x11c>)
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d10d      	bne.n	801640a <xTaskResumeAll+0x32>
	__asm volatile
 80163ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80163f2:	b672      	cpsid	i
 80163f4:	f383 8811 	msr	BASEPRI, r3
 80163f8:	f3bf 8f6f 	isb	sy
 80163fc:	f3bf 8f4f 	dsb	sy
 8016400:	b662      	cpsie	i
 8016402:	603b      	str	r3, [r7, #0]
}
 8016404:	bf00      	nop
 8016406:	bf00      	nop
 8016408:	e7fd      	b.n	8016406 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801640a:	f000 fdf7 	bl	8016ffc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801640e:	4b39      	ldr	r3, [pc, #228]	@ (80164f4 <xTaskResumeAll+0x11c>)
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	3b01      	subs	r3, #1
 8016414:	4a37      	ldr	r2, [pc, #220]	@ (80164f4 <xTaskResumeAll+0x11c>)
 8016416:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016418:	4b36      	ldr	r3, [pc, #216]	@ (80164f4 <xTaskResumeAll+0x11c>)
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	2b00      	cmp	r3, #0
 801641e:	d161      	bne.n	80164e4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8016420:	4b35      	ldr	r3, [pc, #212]	@ (80164f8 <xTaskResumeAll+0x120>)
 8016422:	681b      	ldr	r3, [r3, #0]
 8016424:	2b00      	cmp	r3, #0
 8016426:	d05d      	beq.n	80164e4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016428:	e02e      	b.n	8016488 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801642a:	4b34      	ldr	r3, [pc, #208]	@ (80164fc <xTaskResumeAll+0x124>)
 801642c:	68db      	ldr	r3, [r3, #12]
 801642e:	68db      	ldr	r3, [r3, #12]
 8016430:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	3318      	adds	r3, #24
 8016436:	4618      	mov	r0, r3
 8016438:	f7fe ff88 	bl	801534c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801643c:	68fb      	ldr	r3, [r7, #12]
 801643e:	3304      	adds	r3, #4
 8016440:	4618      	mov	r0, r3
 8016442:	f7fe ff83 	bl	801534c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016446:	68fb      	ldr	r3, [r7, #12]
 8016448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801644a:	2201      	movs	r2, #1
 801644c:	409a      	lsls	r2, r3
 801644e:	4b2c      	ldr	r3, [pc, #176]	@ (8016500 <xTaskResumeAll+0x128>)
 8016450:	681b      	ldr	r3, [r3, #0]
 8016452:	4313      	orrs	r3, r2
 8016454:	4a2a      	ldr	r2, [pc, #168]	@ (8016500 <xTaskResumeAll+0x128>)
 8016456:	6013      	str	r3, [r2, #0]
 8016458:	68fb      	ldr	r3, [r7, #12]
 801645a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801645c:	4613      	mov	r3, r2
 801645e:	009b      	lsls	r3, r3, #2
 8016460:	4413      	add	r3, r2
 8016462:	009b      	lsls	r3, r3, #2
 8016464:	4a27      	ldr	r2, [pc, #156]	@ (8016504 <xTaskResumeAll+0x12c>)
 8016466:	441a      	add	r2, r3
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	3304      	adds	r3, #4
 801646c:	4619      	mov	r1, r3
 801646e:	4610      	mov	r0, r2
 8016470:	f7fe ff0f 	bl	8015292 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016478:	4b23      	ldr	r3, [pc, #140]	@ (8016508 <xTaskResumeAll+0x130>)
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801647e:	429a      	cmp	r2, r3
 8016480:	d302      	bcc.n	8016488 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8016482:	4b22      	ldr	r3, [pc, #136]	@ (801650c <xTaskResumeAll+0x134>)
 8016484:	2201      	movs	r2, #1
 8016486:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016488:	4b1c      	ldr	r3, [pc, #112]	@ (80164fc <xTaskResumeAll+0x124>)
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	2b00      	cmp	r3, #0
 801648e:	d1cc      	bne.n	801642a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8016490:	68fb      	ldr	r3, [r7, #12]
 8016492:	2b00      	cmp	r3, #0
 8016494:	d001      	beq.n	801649a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8016496:	f000 fb73 	bl	8016b80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801649a:	4b1d      	ldr	r3, [pc, #116]	@ (8016510 <xTaskResumeAll+0x138>)
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d010      	beq.n	80164c8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80164a6:	f000 f859 	bl	801655c <xTaskIncrementTick>
 80164aa:	4603      	mov	r3, r0
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d002      	beq.n	80164b6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80164b0:	4b16      	ldr	r3, [pc, #88]	@ (801650c <xTaskResumeAll+0x134>)
 80164b2:	2201      	movs	r2, #1
 80164b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	3b01      	subs	r3, #1
 80164ba:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d1f1      	bne.n	80164a6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80164c2:	4b13      	ldr	r3, [pc, #76]	@ (8016510 <xTaskResumeAll+0x138>)
 80164c4:	2200      	movs	r2, #0
 80164c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80164c8:	4b10      	ldr	r3, [pc, #64]	@ (801650c <xTaskResumeAll+0x134>)
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	d009      	beq.n	80164e4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80164d0:	2301      	movs	r3, #1
 80164d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80164d4:	4b0f      	ldr	r3, [pc, #60]	@ (8016514 <xTaskResumeAll+0x13c>)
 80164d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80164da:	601a      	str	r2, [r3, #0]
 80164dc:	f3bf 8f4f 	dsb	sy
 80164e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80164e4:	f000 fdc0 	bl	8017068 <vPortExitCritical>

	return xAlreadyYielded;
 80164e8:	68bb      	ldr	r3, [r7, #8]
}
 80164ea:	4618      	mov	r0, r3
 80164ec:	3710      	adds	r7, #16
 80164ee:	46bd      	mov	sp, r7
 80164f0:	bd80      	pop	{r7, pc}
 80164f2:	bf00      	nop
 80164f4:	20002c60 	.word	0x20002c60
 80164f8:	20002c38 	.word	0x20002c38
 80164fc:	20002bf8 	.word	0x20002bf8
 8016500:	20002c40 	.word	0x20002c40
 8016504:	20002b3c 	.word	0x20002b3c
 8016508:	20002b38 	.word	0x20002b38
 801650c:	20002c4c 	.word	0x20002c4c
 8016510:	20002c48 	.word	0x20002c48
 8016514:	e000ed04 	.word	0xe000ed04

08016518 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016518:	b480      	push	{r7}
 801651a:	b083      	sub	sp, #12
 801651c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801651e:	4b05      	ldr	r3, [pc, #20]	@ (8016534 <xTaskGetTickCount+0x1c>)
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8016524:	687b      	ldr	r3, [r7, #4]
}
 8016526:	4618      	mov	r0, r3
 8016528:	370c      	adds	r7, #12
 801652a:	46bd      	mov	sp, r7
 801652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016530:	4770      	bx	lr
 8016532:	bf00      	nop
 8016534:	20002c3c 	.word	0x20002c3c

08016538 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8016538:	b580      	push	{r7, lr}
 801653a:	b082      	sub	sp, #8
 801653c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801653e:	f000 fe45 	bl	80171cc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8016542:	2300      	movs	r3, #0
 8016544:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8016546:	4b04      	ldr	r3, [pc, #16]	@ (8016558 <xTaskGetTickCountFromISR+0x20>)
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801654c:	683b      	ldr	r3, [r7, #0]
}
 801654e:	4618      	mov	r0, r3
 8016550:	3708      	adds	r7, #8
 8016552:	46bd      	mov	sp, r7
 8016554:	bd80      	pop	{r7, pc}
 8016556:	bf00      	nop
 8016558:	20002c3c 	.word	0x20002c3c

0801655c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801655c:	b580      	push	{r7, lr}
 801655e:	b086      	sub	sp, #24
 8016560:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8016562:	2300      	movs	r3, #0
 8016564:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016566:	4b50      	ldr	r3, [pc, #320]	@ (80166a8 <xTaskIncrementTick+0x14c>)
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	2b00      	cmp	r3, #0
 801656c:	f040 808b 	bne.w	8016686 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016570:	4b4e      	ldr	r3, [pc, #312]	@ (80166ac <xTaskIncrementTick+0x150>)
 8016572:	681b      	ldr	r3, [r3, #0]
 8016574:	3301      	adds	r3, #1
 8016576:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8016578:	4a4c      	ldr	r2, [pc, #304]	@ (80166ac <xTaskIncrementTick+0x150>)
 801657a:	693b      	ldr	r3, [r7, #16]
 801657c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801657e:	693b      	ldr	r3, [r7, #16]
 8016580:	2b00      	cmp	r3, #0
 8016582:	d123      	bne.n	80165cc <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8016584:	4b4a      	ldr	r3, [pc, #296]	@ (80166b0 <xTaskIncrementTick+0x154>)
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	2b00      	cmp	r3, #0
 801658c:	d00d      	beq.n	80165aa <xTaskIncrementTick+0x4e>
	__asm volatile
 801658e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016592:	b672      	cpsid	i
 8016594:	f383 8811 	msr	BASEPRI, r3
 8016598:	f3bf 8f6f 	isb	sy
 801659c:	f3bf 8f4f 	dsb	sy
 80165a0:	b662      	cpsie	i
 80165a2:	603b      	str	r3, [r7, #0]
}
 80165a4:	bf00      	nop
 80165a6:	bf00      	nop
 80165a8:	e7fd      	b.n	80165a6 <xTaskIncrementTick+0x4a>
 80165aa:	4b41      	ldr	r3, [pc, #260]	@ (80166b0 <xTaskIncrementTick+0x154>)
 80165ac:	681b      	ldr	r3, [r3, #0]
 80165ae:	60fb      	str	r3, [r7, #12]
 80165b0:	4b40      	ldr	r3, [pc, #256]	@ (80166b4 <xTaskIncrementTick+0x158>)
 80165b2:	681b      	ldr	r3, [r3, #0]
 80165b4:	4a3e      	ldr	r2, [pc, #248]	@ (80166b0 <xTaskIncrementTick+0x154>)
 80165b6:	6013      	str	r3, [r2, #0]
 80165b8:	4a3e      	ldr	r2, [pc, #248]	@ (80166b4 <xTaskIncrementTick+0x158>)
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	6013      	str	r3, [r2, #0]
 80165be:	4b3e      	ldr	r3, [pc, #248]	@ (80166b8 <xTaskIncrementTick+0x15c>)
 80165c0:	681b      	ldr	r3, [r3, #0]
 80165c2:	3301      	adds	r3, #1
 80165c4:	4a3c      	ldr	r2, [pc, #240]	@ (80166b8 <xTaskIncrementTick+0x15c>)
 80165c6:	6013      	str	r3, [r2, #0]
 80165c8:	f000 fada 	bl	8016b80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80165cc:	4b3b      	ldr	r3, [pc, #236]	@ (80166bc <xTaskIncrementTick+0x160>)
 80165ce:	681b      	ldr	r3, [r3, #0]
 80165d0:	693a      	ldr	r2, [r7, #16]
 80165d2:	429a      	cmp	r2, r3
 80165d4:	d348      	bcc.n	8016668 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80165d6:	4b36      	ldr	r3, [pc, #216]	@ (80166b0 <xTaskIncrementTick+0x154>)
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d104      	bne.n	80165ea <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80165e0:	4b36      	ldr	r3, [pc, #216]	@ (80166bc <xTaskIncrementTick+0x160>)
 80165e2:	f04f 32ff 	mov.w	r2, #4294967295
 80165e6:	601a      	str	r2, [r3, #0]
					break;
 80165e8:	e03e      	b.n	8016668 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80165ea:	4b31      	ldr	r3, [pc, #196]	@ (80166b0 <xTaskIncrementTick+0x154>)
 80165ec:	681b      	ldr	r3, [r3, #0]
 80165ee:	68db      	ldr	r3, [r3, #12]
 80165f0:	68db      	ldr	r3, [r3, #12]
 80165f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80165f4:	68bb      	ldr	r3, [r7, #8]
 80165f6:	685b      	ldr	r3, [r3, #4]
 80165f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80165fa:	693a      	ldr	r2, [r7, #16]
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	429a      	cmp	r2, r3
 8016600:	d203      	bcs.n	801660a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016602:	4a2e      	ldr	r2, [pc, #184]	@ (80166bc <xTaskIncrementTick+0x160>)
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8016608:	e02e      	b.n	8016668 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801660a:	68bb      	ldr	r3, [r7, #8]
 801660c:	3304      	adds	r3, #4
 801660e:	4618      	mov	r0, r3
 8016610:	f7fe fe9c 	bl	801534c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016614:	68bb      	ldr	r3, [r7, #8]
 8016616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016618:	2b00      	cmp	r3, #0
 801661a:	d004      	beq.n	8016626 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801661c:	68bb      	ldr	r3, [r7, #8]
 801661e:	3318      	adds	r3, #24
 8016620:	4618      	mov	r0, r3
 8016622:	f7fe fe93 	bl	801534c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8016626:	68bb      	ldr	r3, [r7, #8]
 8016628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801662a:	2201      	movs	r2, #1
 801662c:	409a      	lsls	r2, r3
 801662e:	4b24      	ldr	r3, [pc, #144]	@ (80166c0 <xTaskIncrementTick+0x164>)
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	4313      	orrs	r3, r2
 8016634:	4a22      	ldr	r2, [pc, #136]	@ (80166c0 <xTaskIncrementTick+0x164>)
 8016636:	6013      	str	r3, [r2, #0]
 8016638:	68bb      	ldr	r3, [r7, #8]
 801663a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801663c:	4613      	mov	r3, r2
 801663e:	009b      	lsls	r3, r3, #2
 8016640:	4413      	add	r3, r2
 8016642:	009b      	lsls	r3, r3, #2
 8016644:	4a1f      	ldr	r2, [pc, #124]	@ (80166c4 <xTaskIncrementTick+0x168>)
 8016646:	441a      	add	r2, r3
 8016648:	68bb      	ldr	r3, [r7, #8]
 801664a:	3304      	adds	r3, #4
 801664c:	4619      	mov	r1, r3
 801664e:	4610      	mov	r0, r2
 8016650:	f7fe fe1f 	bl	8015292 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016654:	68bb      	ldr	r3, [r7, #8]
 8016656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016658:	4b1b      	ldr	r3, [pc, #108]	@ (80166c8 <xTaskIncrementTick+0x16c>)
 801665a:	681b      	ldr	r3, [r3, #0]
 801665c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801665e:	429a      	cmp	r2, r3
 8016660:	d3b9      	bcc.n	80165d6 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8016662:	2301      	movs	r3, #1
 8016664:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016666:	e7b6      	b.n	80165d6 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016668:	4b17      	ldr	r3, [pc, #92]	@ (80166c8 <xTaskIncrementTick+0x16c>)
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801666e:	4915      	ldr	r1, [pc, #84]	@ (80166c4 <xTaskIncrementTick+0x168>)
 8016670:	4613      	mov	r3, r2
 8016672:	009b      	lsls	r3, r3, #2
 8016674:	4413      	add	r3, r2
 8016676:	009b      	lsls	r3, r3, #2
 8016678:	440b      	add	r3, r1
 801667a:	681b      	ldr	r3, [r3, #0]
 801667c:	2b01      	cmp	r3, #1
 801667e:	d907      	bls.n	8016690 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8016680:	2301      	movs	r3, #1
 8016682:	617b      	str	r3, [r7, #20]
 8016684:	e004      	b.n	8016690 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8016686:	4b11      	ldr	r3, [pc, #68]	@ (80166cc <xTaskIncrementTick+0x170>)
 8016688:	681b      	ldr	r3, [r3, #0]
 801668a:	3301      	adds	r3, #1
 801668c:	4a0f      	ldr	r2, [pc, #60]	@ (80166cc <xTaskIncrementTick+0x170>)
 801668e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8016690:	4b0f      	ldr	r3, [pc, #60]	@ (80166d0 <xTaskIncrementTick+0x174>)
 8016692:	681b      	ldr	r3, [r3, #0]
 8016694:	2b00      	cmp	r3, #0
 8016696:	d001      	beq.n	801669c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8016698:	2301      	movs	r3, #1
 801669a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801669c:	697b      	ldr	r3, [r7, #20]
}
 801669e:	4618      	mov	r0, r3
 80166a0:	3718      	adds	r7, #24
 80166a2:	46bd      	mov	sp, r7
 80166a4:	bd80      	pop	{r7, pc}
 80166a6:	bf00      	nop
 80166a8:	20002c60 	.word	0x20002c60
 80166ac:	20002c3c 	.word	0x20002c3c
 80166b0:	20002bf0 	.word	0x20002bf0
 80166b4:	20002bf4 	.word	0x20002bf4
 80166b8:	20002c50 	.word	0x20002c50
 80166bc:	20002c58 	.word	0x20002c58
 80166c0:	20002c40 	.word	0x20002c40
 80166c4:	20002b3c 	.word	0x20002b3c
 80166c8:	20002b38 	.word	0x20002b38
 80166cc:	20002c48 	.word	0x20002c48
 80166d0:	20002c4c 	.word	0x20002c4c

080166d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80166d4:	b580      	push	{r7, lr}
 80166d6:	b088      	sub	sp, #32
 80166d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80166da:	4b3b      	ldr	r3, [pc, #236]	@ (80167c8 <vTaskSwitchContext+0xf4>)
 80166dc:	681b      	ldr	r3, [r3, #0]
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d003      	beq.n	80166ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80166e2:	4b3a      	ldr	r3, [pc, #232]	@ (80167cc <vTaskSwitchContext+0xf8>)
 80166e4:	2201      	movs	r2, #1
 80166e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80166e8:	e069      	b.n	80167be <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 80166ea:	4b38      	ldr	r3, [pc, #224]	@ (80167cc <vTaskSwitchContext+0xf8>)
 80166ec:	2200      	movs	r2, #0
 80166ee:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80166f0:	4b37      	ldr	r3, [pc, #220]	@ (80167d0 <vTaskSwitchContext+0xfc>)
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80166f6:	61fb      	str	r3, [r7, #28]
 80166f8:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 80166fc:	61bb      	str	r3, [r7, #24]
 80166fe:	69fb      	ldr	r3, [r7, #28]
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	69ba      	ldr	r2, [r7, #24]
 8016704:	429a      	cmp	r2, r3
 8016706:	d111      	bne.n	801672c <vTaskSwitchContext+0x58>
 8016708:	69fb      	ldr	r3, [r7, #28]
 801670a:	3304      	adds	r3, #4
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	69ba      	ldr	r2, [r7, #24]
 8016710:	429a      	cmp	r2, r3
 8016712:	d10b      	bne.n	801672c <vTaskSwitchContext+0x58>
 8016714:	69fb      	ldr	r3, [r7, #28]
 8016716:	3308      	adds	r3, #8
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	69ba      	ldr	r2, [r7, #24]
 801671c:	429a      	cmp	r2, r3
 801671e:	d105      	bne.n	801672c <vTaskSwitchContext+0x58>
 8016720:	69fb      	ldr	r3, [r7, #28]
 8016722:	330c      	adds	r3, #12
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	69ba      	ldr	r2, [r7, #24]
 8016728:	429a      	cmp	r2, r3
 801672a:	d008      	beq.n	801673e <vTaskSwitchContext+0x6a>
 801672c:	4b28      	ldr	r3, [pc, #160]	@ (80167d0 <vTaskSwitchContext+0xfc>)
 801672e:	681a      	ldr	r2, [r3, #0]
 8016730:	4b27      	ldr	r3, [pc, #156]	@ (80167d0 <vTaskSwitchContext+0xfc>)
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	3334      	adds	r3, #52	@ 0x34
 8016736:	4619      	mov	r1, r3
 8016738:	4610      	mov	r0, r2
 801673a:	f7eb fd2c 	bl	8002196 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801673e:	4b25      	ldr	r3, [pc, #148]	@ (80167d4 <vTaskSwitchContext+0x100>)
 8016740:	681b      	ldr	r3, [r3, #0]
 8016742:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8016744:	68fb      	ldr	r3, [r7, #12]
 8016746:	fab3 f383 	clz	r3, r3
 801674a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801674c:	7afb      	ldrb	r3, [r7, #11]
 801674e:	f1c3 031f 	rsb	r3, r3, #31
 8016752:	617b      	str	r3, [r7, #20]
 8016754:	4920      	ldr	r1, [pc, #128]	@ (80167d8 <vTaskSwitchContext+0x104>)
 8016756:	697a      	ldr	r2, [r7, #20]
 8016758:	4613      	mov	r3, r2
 801675a:	009b      	lsls	r3, r3, #2
 801675c:	4413      	add	r3, r2
 801675e:	009b      	lsls	r3, r3, #2
 8016760:	440b      	add	r3, r1
 8016762:	681b      	ldr	r3, [r3, #0]
 8016764:	2b00      	cmp	r3, #0
 8016766:	d10d      	bne.n	8016784 <vTaskSwitchContext+0xb0>
	__asm volatile
 8016768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801676c:	b672      	cpsid	i
 801676e:	f383 8811 	msr	BASEPRI, r3
 8016772:	f3bf 8f6f 	isb	sy
 8016776:	f3bf 8f4f 	dsb	sy
 801677a:	b662      	cpsie	i
 801677c:	607b      	str	r3, [r7, #4]
}
 801677e:	bf00      	nop
 8016780:	bf00      	nop
 8016782:	e7fd      	b.n	8016780 <vTaskSwitchContext+0xac>
 8016784:	697a      	ldr	r2, [r7, #20]
 8016786:	4613      	mov	r3, r2
 8016788:	009b      	lsls	r3, r3, #2
 801678a:	4413      	add	r3, r2
 801678c:	009b      	lsls	r3, r3, #2
 801678e:	4a12      	ldr	r2, [pc, #72]	@ (80167d8 <vTaskSwitchContext+0x104>)
 8016790:	4413      	add	r3, r2
 8016792:	613b      	str	r3, [r7, #16]
 8016794:	693b      	ldr	r3, [r7, #16]
 8016796:	685b      	ldr	r3, [r3, #4]
 8016798:	685a      	ldr	r2, [r3, #4]
 801679a:	693b      	ldr	r3, [r7, #16]
 801679c:	605a      	str	r2, [r3, #4]
 801679e:	693b      	ldr	r3, [r7, #16]
 80167a0:	685a      	ldr	r2, [r3, #4]
 80167a2:	693b      	ldr	r3, [r7, #16]
 80167a4:	3308      	adds	r3, #8
 80167a6:	429a      	cmp	r2, r3
 80167a8:	d104      	bne.n	80167b4 <vTaskSwitchContext+0xe0>
 80167aa:	693b      	ldr	r3, [r7, #16]
 80167ac:	685b      	ldr	r3, [r3, #4]
 80167ae:	685a      	ldr	r2, [r3, #4]
 80167b0:	693b      	ldr	r3, [r7, #16]
 80167b2:	605a      	str	r2, [r3, #4]
 80167b4:	693b      	ldr	r3, [r7, #16]
 80167b6:	685b      	ldr	r3, [r3, #4]
 80167b8:	68db      	ldr	r3, [r3, #12]
 80167ba:	4a05      	ldr	r2, [pc, #20]	@ (80167d0 <vTaskSwitchContext+0xfc>)
 80167bc:	6013      	str	r3, [r2, #0]
}
 80167be:	bf00      	nop
 80167c0:	3720      	adds	r7, #32
 80167c2:	46bd      	mov	sp, r7
 80167c4:	bd80      	pop	{r7, pc}
 80167c6:	bf00      	nop
 80167c8:	20002c60 	.word	0x20002c60
 80167cc:	20002c4c 	.word	0x20002c4c
 80167d0:	20002b38 	.word	0x20002b38
 80167d4:	20002c40 	.word	0x20002c40
 80167d8:	20002b3c 	.word	0x20002b3c

080167dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80167dc:	b580      	push	{r7, lr}
 80167de:	b084      	sub	sp, #16
 80167e0:	af00      	add	r7, sp, #0
 80167e2:	6078      	str	r0, [r7, #4]
 80167e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d10d      	bne.n	8016808 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80167ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80167f0:	b672      	cpsid	i
 80167f2:	f383 8811 	msr	BASEPRI, r3
 80167f6:	f3bf 8f6f 	isb	sy
 80167fa:	f3bf 8f4f 	dsb	sy
 80167fe:	b662      	cpsie	i
 8016800:	60fb      	str	r3, [r7, #12]
}
 8016802:	bf00      	nop
 8016804:	bf00      	nop
 8016806:	e7fd      	b.n	8016804 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016808:	4b07      	ldr	r3, [pc, #28]	@ (8016828 <vTaskPlaceOnEventList+0x4c>)
 801680a:	681b      	ldr	r3, [r3, #0]
 801680c:	3318      	adds	r3, #24
 801680e:	4619      	mov	r1, r3
 8016810:	6878      	ldr	r0, [r7, #4]
 8016812:	f7fe fd62 	bl	80152da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016816:	2101      	movs	r1, #1
 8016818:	6838      	ldr	r0, [r7, #0]
 801681a:	f000 fa7b 	bl	8016d14 <prvAddCurrentTaskToDelayedList>
}
 801681e:	bf00      	nop
 8016820:	3710      	adds	r7, #16
 8016822:	46bd      	mov	sp, r7
 8016824:	bd80      	pop	{r7, pc}
 8016826:	bf00      	nop
 8016828:	20002b38 	.word	0x20002b38

0801682c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801682c:	b580      	push	{r7, lr}
 801682e:	b086      	sub	sp, #24
 8016830:	af00      	add	r7, sp, #0
 8016832:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	68db      	ldr	r3, [r3, #12]
 8016838:	68db      	ldr	r3, [r3, #12]
 801683a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801683c:	693b      	ldr	r3, [r7, #16]
 801683e:	2b00      	cmp	r3, #0
 8016840:	d10d      	bne.n	801685e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8016842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016846:	b672      	cpsid	i
 8016848:	f383 8811 	msr	BASEPRI, r3
 801684c:	f3bf 8f6f 	isb	sy
 8016850:	f3bf 8f4f 	dsb	sy
 8016854:	b662      	cpsie	i
 8016856:	60fb      	str	r3, [r7, #12]
}
 8016858:	bf00      	nop
 801685a:	bf00      	nop
 801685c:	e7fd      	b.n	801685a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801685e:	693b      	ldr	r3, [r7, #16]
 8016860:	3318      	adds	r3, #24
 8016862:	4618      	mov	r0, r3
 8016864:	f7fe fd72 	bl	801534c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016868:	4b1d      	ldr	r3, [pc, #116]	@ (80168e0 <xTaskRemoveFromEventList+0xb4>)
 801686a:	681b      	ldr	r3, [r3, #0]
 801686c:	2b00      	cmp	r3, #0
 801686e:	d11c      	bne.n	80168aa <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016870:	693b      	ldr	r3, [r7, #16]
 8016872:	3304      	adds	r3, #4
 8016874:	4618      	mov	r0, r3
 8016876:	f7fe fd69 	bl	801534c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801687a:	693b      	ldr	r3, [r7, #16]
 801687c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801687e:	2201      	movs	r2, #1
 8016880:	409a      	lsls	r2, r3
 8016882:	4b18      	ldr	r3, [pc, #96]	@ (80168e4 <xTaskRemoveFromEventList+0xb8>)
 8016884:	681b      	ldr	r3, [r3, #0]
 8016886:	4313      	orrs	r3, r2
 8016888:	4a16      	ldr	r2, [pc, #88]	@ (80168e4 <xTaskRemoveFromEventList+0xb8>)
 801688a:	6013      	str	r3, [r2, #0]
 801688c:	693b      	ldr	r3, [r7, #16]
 801688e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016890:	4613      	mov	r3, r2
 8016892:	009b      	lsls	r3, r3, #2
 8016894:	4413      	add	r3, r2
 8016896:	009b      	lsls	r3, r3, #2
 8016898:	4a13      	ldr	r2, [pc, #76]	@ (80168e8 <xTaskRemoveFromEventList+0xbc>)
 801689a:	441a      	add	r2, r3
 801689c:	693b      	ldr	r3, [r7, #16]
 801689e:	3304      	adds	r3, #4
 80168a0:	4619      	mov	r1, r3
 80168a2:	4610      	mov	r0, r2
 80168a4:	f7fe fcf5 	bl	8015292 <vListInsertEnd>
 80168a8:	e005      	b.n	80168b6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80168aa:	693b      	ldr	r3, [r7, #16]
 80168ac:	3318      	adds	r3, #24
 80168ae:	4619      	mov	r1, r3
 80168b0:	480e      	ldr	r0, [pc, #56]	@ (80168ec <xTaskRemoveFromEventList+0xc0>)
 80168b2:	f7fe fcee 	bl	8015292 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80168b6:	693b      	ldr	r3, [r7, #16]
 80168b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80168ba:	4b0d      	ldr	r3, [pc, #52]	@ (80168f0 <xTaskRemoveFromEventList+0xc4>)
 80168bc:	681b      	ldr	r3, [r3, #0]
 80168be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80168c0:	429a      	cmp	r2, r3
 80168c2:	d905      	bls.n	80168d0 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80168c4:	2301      	movs	r3, #1
 80168c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80168c8:	4b0a      	ldr	r3, [pc, #40]	@ (80168f4 <xTaskRemoveFromEventList+0xc8>)
 80168ca:	2201      	movs	r2, #1
 80168cc:	601a      	str	r2, [r3, #0]
 80168ce:	e001      	b.n	80168d4 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80168d0:	2300      	movs	r3, #0
 80168d2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80168d4:	697b      	ldr	r3, [r7, #20]
}
 80168d6:	4618      	mov	r0, r3
 80168d8:	3718      	adds	r7, #24
 80168da:	46bd      	mov	sp, r7
 80168dc:	bd80      	pop	{r7, pc}
 80168de:	bf00      	nop
 80168e0:	20002c60 	.word	0x20002c60
 80168e4:	20002c40 	.word	0x20002c40
 80168e8:	20002b3c 	.word	0x20002b3c
 80168ec:	20002bf8 	.word	0x20002bf8
 80168f0:	20002b38 	.word	0x20002b38
 80168f4:	20002c4c 	.word	0x20002c4c

080168f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80168f8:	b480      	push	{r7}
 80168fa:	b083      	sub	sp, #12
 80168fc:	af00      	add	r7, sp, #0
 80168fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016900:	4b06      	ldr	r3, [pc, #24]	@ (801691c <vTaskInternalSetTimeOutState+0x24>)
 8016902:	681a      	ldr	r2, [r3, #0]
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016908:	4b05      	ldr	r3, [pc, #20]	@ (8016920 <vTaskInternalSetTimeOutState+0x28>)
 801690a:	681a      	ldr	r2, [r3, #0]
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	605a      	str	r2, [r3, #4]
}
 8016910:	bf00      	nop
 8016912:	370c      	adds	r7, #12
 8016914:	46bd      	mov	sp, r7
 8016916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801691a:	4770      	bx	lr
 801691c:	20002c50 	.word	0x20002c50
 8016920:	20002c3c 	.word	0x20002c3c

08016924 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8016924:	b580      	push	{r7, lr}
 8016926:	b088      	sub	sp, #32
 8016928:	af00      	add	r7, sp, #0
 801692a:	6078      	str	r0, [r7, #4]
 801692c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	2b00      	cmp	r3, #0
 8016932:	d10d      	bne.n	8016950 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8016934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016938:	b672      	cpsid	i
 801693a:	f383 8811 	msr	BASEPRI, r3
 801693e:	f3bf 8f6f 	isb	sy
 8016942:	f3bf 8f4f 	dsb	sy
 8016946:	b662      	cpsie	i
 8016948:	613b      	str	r3, [r7, #16]
}
 801694a:	bf00      	nop
 801694c:	bf00      	nop
 801694e:	e7fd      	b.n	801694c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8016950:	683b      	ldr	r3, [r7, #0]
 8016952:	2b00      	cmp	r3, #0
 8016954:	d10d      	bne.n	8016972 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8016956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801695a:	b672      	cpsid	i
 801695c:	f383 8811 	msr	BASEPRI, r3
 8016960:	f3bf 8f6f 	isb	sy
 8016964:	f3bf 8f4f 	dsb	sy
 8016968:	b662      	cpsie	i
 801696a:	60fb      	str	r3, [r7, #12]
}
 801696c:	bf00      	nop
 801696e:	bf00      	nop
 8016970:	e7fd      	b.n	801696e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8016972:	f000 fb43 	bl	8016ffc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8016976:	4b1d      	ldr	r3, [pc, #116]	@ (80169ec <xTaskCheckForTimeOut+0xc8>)
 8016978:	681b      	ldr	r3, [r3, #0]
 801697a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	685b      	ldr	r3, [r3, #4]
 8016980:	69ba      	ldr	r2, [r7, #24]
 8016982:	1ad3      	subs	r3, r2, r3
 8016984:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8016986:	683b      	ldr	r3, [r7, #0]
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801698e:	d102      	bne.n	8016996 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8016990:	2300      	movs	r3, #0
 8016992:	61fb      	str	r3, [r7, #28]
 8016994:	e023      	b.n	80169de <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	681a      	ldr	r2, [r3, #0]
 801699a:	4b15      	ldr	r3, [pc, #84]	@ (80169f0 <xTaskCheckForTimeOut+0xcc>)
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	429a      	cmp	r2, r3
 80169a0:	d007      	beq.n	80169b2 <xTaskCheckForTimeOut+0x8e>
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	685b      	ldr	r3, [r3, #4]
 80169a6:	69ba      	ldr	r2, [r7, #24]
 80169a8:	429a      	cmp	r2, r3
 80169aa:	d302      	bcc.n	80169b2 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80169ac:	2301      	movs	r3, #1
 80169ae:	61fb      	str	r3, [r7, #28]
 80169b0:	e015      	b.n	80169de <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80169b2:	683b      	ldr	r3, [r7, #0]
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	697a      	ldr	r2, [r7, #20]
 80169b8:	429a      	cmp	r2, r3
 80169ba:	d20b      	bcs.n	80169d4 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80169bc:	683b      	ldr	r3, [r7, #0]
 80169be:	681a      	ldr	r2, [r3, #0]
 80169c0:	697b      	ldr	r3, [r7, #20]
 80169c2:	1ad2      	subs	r2, r2, r3
 80169c4:	683b      	ldr	r3, [r7, #0]
 80169c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80169c8:	6878      	ldr	r0, [r7, #4]
 80169ca:	f7ff ff95 	bl	80168f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80169ce:	2300      	movs	r3, #0
 80169d0:	61fb      	str	r3, [r7, #28]
 80169d2:	e004      	b.n	80169de <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80169d4:	683b      	ldr	r3, [r7, #0]
 80169d6:	2200      	movs	r2, #0
 80169d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80169da:	2301      	movs	r3, #1
 80169dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80169de:	f000 fb43 	bl	8017068 <vPortExitCritical>

	return xReturn;
 80169e2:	69fb      	ldr	r3, [r7, #28]
}
 80169e4:	4618      	mov	r0, r3
 80169e6:	3720      	adds	r7, #32
 80169e8:	46bd      	mov	sp, r7
 80169ea:	bd80      	pop	{r7, pc}
 80169ec:	20002c3c 	.word	0x20002c3c
 80169f0:	20002c50 	.word	0x20002c50

080169f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80169f4:	b480      	push	{r7}
 80169f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80169f8:	4b03      	ldr	r3, [pc, #12]	@ (8016a08 <vTaskMissedYield+0x14>)
 80169fa:	2201      	movs	r2, #1
 80169fc:	601a      	str	r2, [r3, #0]
}
 80169fe:	bf00      	nop
 8016a00:	46bd      	mov	sp, r7
 8016a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a06:	4770      	bx	lr
 8016a08:	20002c4c 	.word	0x20002c4c

08016a0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016a0c:	b580      	push	{r7, lr}
 8016a0e:	b082      	sub	sp, #8
 8016a10:	af00      	add	r7, sp, #0
 8016a12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016a14:	f000 f854 	bl	8016ac0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016a18:	4b07      	ldr	r3, [pc, #28]	@ (8016a38 <prvIdleTask+0x2c>)
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	2b01      	cmp	r3, #1
 8016a1e:	d907      	bls.n	8016a30 <prvIdleTask+0x24>
			{
				taskYIELD();
 8016a20:	4b06      	ldr	r3, [pc, #24]	@ (8016a3c <prvIdleTask+0x30>)
 8016a22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016a26:	601a      	str	r2, [r3, #0]
 8016a28:	f3bf 8f4f 	dsb	sy
 8016a2c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8016a30:	f7eb fbaa 	bl	8002188 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8016a34:	e7ee      	b.n	8016a14 <prvIdleTask+0x8>
 8016a36:	bf00      	nop
 8016a38:	20002b3c 	.word	0x20002b3c
 8016a3c:	e000ed04 	.word	0xe000ed04

08016a40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016a40:	b580      	push	{r7, lr}
 8016a42:	b082      	sub	sp, #8
 8016a44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016a46:	2300      	movs	r3, #0
 8016a48:	607b      	str	r3, [r7, #4]
 8016a4a:	e00c      	b.n	8016a66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016a4c:	687a      	ldr	r2, [r7, #4]
 8016a4e:	4613      	mov	r3, r2
 8016a50:	009b      	lsls	r3, r3, #2
 8016a52:	4413      	add	r3, r2
 8016a54:	009b      	lsls	r3, r3, #2
 8016a56:	4a12      	ldr	r2, [pc, #72]	@ (8016aa0 <prvInitialiseTaskLists+0x60>)
 8016a58:	4413      	add	r3, r2
 8016a5a:	4618      	mov	r0, r3
 8016a5c:	f7fe fbec 	bl	8015238 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	3301      	adds	r3, #1
 8016a64:	607b      	str	r3, [r7, #4]
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	2b06      	cmp	r3, #6
 8016a6a:	d9ef      	bls.n	8016a4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016a6c:	480d      	ldr	r0, [pc, #52]	@ (8016aa4 <prvInitialiseTaskLists+0x64>)
 8016a6e:	f7fe fbe3 	bl	8015238 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016a72:	480d      	ldr	r0, [pc, #52]	@ (8016aa8 <prvInitialiseTaskLists+0x68>)
 8016a74:	f7fe fbe0 	bl	8015238 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016a78:	480c      	ldr	r0, [pc, #48]	@ (8016aac <prvInitialiseTaskLists+0x6c>)
 8016a7a:	f7fe fbdd 	bl	8015238 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016a7e:	480c      	ldr	r0, [pc, #48]	@ (8016ab0 <prvInitialiseTaskLists+0x70>)
 8016a80:	f7fe fbda 	bl	8015238 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016a84:	480b      	ldr	r0, [pc, #44]	@ (8016ab4 <prvInitialiseTaskLists+0x74>)
 8016a86:	f7fe fbd7 	bl	8015238 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8016a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8016ab8 <prvInitialiseTaskLists+0x78>)
 8016a8c:	4a05      	ldr	r2, [pc, #20]	@ (8016aa4 <prvInitialiseTaskLists+0x64>)
 8016a8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016a90:	4b0a      	ldr	r3, [pc, #40]	@ (8016abc <prvInitialiseTaskLists+0x7c>)
 8016a92:	4a05      	ldr	r2, [pc, #20]	@ (8016aa8 <prvInitialiseTaskLists+0x68>)
 8016a94:	601a      	str	r2, [r3, #0]
}
 8016a96:	bf00      	nop
 8016a98:	3708      	adds	r7, #8
 8016a9a:	46bd      	mov	sp, r7
 8016a9c:	bd80      	pop	{r7, pc}
 8016a9e:	bf00      	nop
 8016aa0:	20002b3c 	.word	0x20002b3c
 8016aa4:	20002bc8 	.word	0x20002bc8
 8016aa8:	20002bdc 	.word	0x20002bdc
 8016aac:	20002bf8 	.word	0x20002bf8
 8016ab0:	20002c0c 	.word	0x20002c0c
 8016ab4:	20002c24 	.word	0x20002c24
 8016ab8:	20002bf0 	.word	0x20002bf0
 8016abc:	20002bf4 	.word	0x20002bf4

08016ac0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016ac0:	b580      	push	{r7, lr}
 8016ac2:	b082      	sub	sp, #8
 8016ac4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016ac6:	e019      	b.n	8016afc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016ac8:	f000 fa98 	bl	8016ffc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016acc:	4b10      	ldr	r3, [pc, #64]	@ (8016b10 <prvCheckTasksWaitingTermination+0x50>)
 8016ace:	68db      	ldr	r3, [r3, #12]
 8016ad0:	68db      	ldr	r3, [r3, #12]
 8016ad2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	3304      	adds	r3, #4
 8016ad8:	4618      	mov	r0, r3
 8016ada:	f7fe fc37 	bl	801534c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016ade:	4b0d      	ldr	r3, [pc, #52]	@ (8016b14 <prvCheckTasksWaitingTermination+0x54>)
 8016ae0:	681b      	ldr	r3, [r3, #0]
 8016ae2:	3b01      	subs	r3, #1
 8016ae4:	4a0b      	ldr	r2, [pc, #44]	@ (8016b14 <prvCheckTasksWaitingTermination+0x54>)
 8016ae6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8016b18 <prvCheckTasksWaitingTermination+0x58>)
 8016aea:	681b      	ldr	r3, [r3, #0]
 8016aec:	3b01      	subs	r3, #1
 8016aee:	4a0a      	ldr	r2, [pc, #40]	@ (8016b18 <prvCheckTasksWaitingTermination+0x58>)
 8016af0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8016af2:	f000 fab9 	bl	8017068 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8016af6:	6878      	ldr	r0, [r7, #4]
 8016af8:	f000 f810 	bl	8016b1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016afc:	4b06      	ldr	r3, [pc, #24]	@ (8016b18 <prvCheckTasksWaitingTermination+0x58>)
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	d1e1      	bne.n	8016ac8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016b04:	bf00      	nop
 8016b06:	bf00      	nop
 8016b08:	3708      	adds	r7, #8
 8016b0a:	46bd      	mov	sp, r7
 8016b0c:	bd80      	pop	{r7, pc}
 8016b0e:	bf00      	nop
 8016b10:	20002c0c 	.word	0x20002c0c
 8016b14:	20002c38 	.word	0x20002c38
 8016b18:	20002c20 	.word	0x20002c20

08016b1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016b1c:	b580      	push	{r7, lr}
 8016b1e:	b084      	sub	sp, #16
 8016b20:	af00      	add	r7, sp, #0
 8016b22:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d108      	bne.n	8016b40 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016b32:	4618      	mov	r0, r3
 8016b34:	f000 fc62 	bl	80173fc <vPortFree>
				vPortFree( pxTCB );
 8016b38:	6878      	ldr	r0, [r7, #4]
 8016b3a:	f000 fc5f 	bl	80173fc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016b3e:	e01b      	b.n	8016b78 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8016b46:	2b01      	cmp	r3, #1
 8016b48:	d103      	bne.n	8016b52 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8016b4a:	6878      	ldr	r0, [r7, #4]
 8016b4c:	f000 fc56 	bl	80173fc <vPortFree>
	}
 8016b50:	e012      	b.n	8016b78 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8016b58:	2b02      	cmp	r3, #2
 8016b5a:	d00d      	beq.n	8016b78 <prvDeleteTCB+0x5c>
	__asm volatile
 8016b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016b60:	b672      	cpsid	i
 8016b62:	f383 8811 	msr	BASEPRI, r3
 8016b66:	f3bf 8f6f 	isb	sy
 8016b6a:	f3bf 8f4f 	dsb	sy
 8016b6e:	b662      	cpsie	i
 8016b70:	60fb      	str	r3, [r7, #12]
}
 8016b72:	bf00      	nop
 8016b74:	bf00      	nop
 8016b76:	e7fd      	b.n	8016b74 <prvDeleteTCB+0x58>
	}
 8016b78:	bf00      	nop
 8016b7a:	3710      	adds	r7, #16
 8016b7c:	46bd      	mov	sp, r7
 8016b7e:	bd80      	pop	{r7, pc}

08016b80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016b80:	b480      	push	{r7}
 8016b82:	b083      	sub	sp, #12
 8016b84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016b86:	4b0c      	ldr	r3, [pc, #48]	@ (8016bb8 <prvResetNextTaskUnblockTime+0x38>)
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	681b      	ldr	r3, [r3, #0]
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d104      	bne.n	8016b9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016b90:	4b0a      	ldr	r3, [pc, #40]	@ (8016bbc <prvResetNextTaskUnblockTime+0x3c>)
 8016b92:	f04f 32ff 	mov.w	r2, #4294967295
 8016b96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016b98:	e008      	b.n	8016bac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016b9a:	4b07      	ldr	r3, [pc, #28]	@ (8016bb8 <prvResetNextTaskUnblockTime+0x38>)
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	68db      	ldr	r3, [r3, #12]
 8016ba0:	68db      	ldr	r3, [r3, #12]
 8016ba2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	685b      	ldr	r3, [r3, #4]
 8016ba8:	4a04      	ldr	r2, [pc, #16]	@ (8016bbc <prvResetNextTaskUnblockTime+0x3c>)
 8016baa:	6013      	str	r3, [r2, #0]
}
 8016bac:	bf00      	nop
 8016bae:	370c      	adds	r7, #12
 8016bb0:	46bd      	mov	sp, r7
 8016bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bb6:	4770      	bx	lr
 8016bb8:	20002bf0 	.word	0x20002bf0
 8016bbc:	20002c58 	.word	0x20002c58

08016bc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8016bc0:	b480      	push	{r7}
 8016bc2:	b083      	sub	sp, #12
 8016bc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8016bf4 <xTaskGetSchedulerState+0x34>)
 8016bc8:	681b      	ldr	r3, [r3, #0]
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d102      	bne.n	8016bd4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8016bce:	2301      	movs	r3, #1
 8016bd0:	607b      	str	r3, [r7, #4]
 8016bd2:	e008      	b.n	8016be6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016bd4:	4b08      	ldr	r3, [pc, #32]	@ (8016bf8 <xTaskGetSchedulerState+0x38>)
 8016bd6:	681b      	ldr	r3, [r3, #0]
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d102      	bne.n	8016be2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8016bdc:	2302      	movs	r3, #2
 8016bde:	607b      	str	r3, [r7, #4]
 8016be0:	e001      	b.n	8016be6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8016be2:	2300      	movs	r3, #0
 8016be4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016be6:	687b      	ldr	r3, [r7, #4]
	}
 8016be8:	4618      	mov	r0, r3
 8016bea:	370c      	adds	r7, #12
 8016bec:	46bd      	mov	sp, r7
 8016bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bf2:	4770      	bx	lr
 8016bf4:	20002c44 	.word	0x20002c44
 8016bf8:	20002c60 	.word	0x20002c60

08016bfc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016bfc:	b580      	push	{r7, lr}
 8016bfe:	b086      	sub	sp, #24
 8016c00:	af00      	add	r7, sp, #0
 8016c02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016c08:	2300      	movs	r3, #0
 8016c0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d074      	beq.n	8016cfc <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8016c12:	4b3d      	ldr	r3, [pc, #244]	@ (8016d08 <xTaskPriorityDisinherit+0x10c>)
 8016c14:	681b      	ldr	r3, [r3, #0]
 8016c16:	693a      	ldr	r2, [r7, #16]
 8016c18:	429a      	cmp	r2, r3
 8016c1a:	d00d      	beq.n	8016c38 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8016c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c20:	b672      	cpsid	i
 8016c22:	f383 8811 	msr	BASEPRI, r3
 8016c26:	f3bf 8f6f 	isb	sy
 8016c2a:	f3bf 8f4f 	dsb	sy
 8016c2e:	b662      	cpsie	i
 8016c30:	60fb      	str	r3, [r7, #12]
}
 8016c32:	bf00      	nop
 8016c34:	bf00      	nop
 8016c36:	e7fd      	b.n	8016c34 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8016c38:	693b      	ldr	r3, [r7, #16]
 8016c3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d10d      	bne.n	8016c5c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8016c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c44:	b672      	cpsid	i
 8016c46:	f383 8811 	msr	BASEPRI, r3
 8016c4a:	f3bf 8f6f 	isb	sy
 8016c4e:	f3bf 8f4f 	dsb	sy
 8016c52:	b662      	cpsie	i
 8016c54:	60bb      	str	r3, [r7, #8]
}
 8016c56:	bf00      	nop
 8016c58:	bf00      	nop
 8016c5a:	e7fd      	b.n	8016c58 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8016c5c:	693b      	ldr	r3, [r7, #16]
 8016c5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016c60:	1e5a      	subs	r2, r3, #1
 8016c62:	693b      	ldr	r3, [r7, #16]
 8016c64:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016c66:	693b      	ldr	r3, [r7, #16]
 8016c68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016c6a:	693b      	ldr	r3, [r7, #16]
 8016c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016c6e:	429a      	cmp	r2, r3
 8016c70:	d044      	beq.n	8016cfc <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016c72:	693b      	ldr	r3, [r7, #16]
 8016c74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d140      	bne.n	8016cfc <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016c7a:	693b      	ldr	r3, [r7, #16]
 8016c7c:	3304      	adds	r3, #4
 8016c7e:	4618      	mov	r0, r3
 8016c80:	f7fe fb64 	bl	801534c <uxListRemove>
 8016c84:	4603      	mov	r3, r0
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d115      	bne.n	8016cb6 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016c8a:	693b      	ldr	r3, [r7, #16]
 8016c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016c8e:	491f      	ldr	r1, [pc, #124]	@ (8016d0c <xTaskPriorityDisinherit+0x110>)
 8016c90:	4613      	mov	r3, r2
 8016c92:	009b      	lsls	r3, r3, #2
 8016c94:	4413      	add	r3, r2
 8016c96:	009b      	lsls	r3, r3, #2
 8016c98:	440b      	add	r3, r1
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d10a      	bne.n	8016cb6 <xTaskPriorityDisinherit+0xba>
 8016ca0:	693b      	ldr	r3, [r7, #16]
 8016ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016ca4:	2201      	movs	r2, #1
 8016ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8016caa:	43da      	mvns	r2, r3
 8016cac:	4b18      	ldr	r3, [pc, #96]	@ (8016d10 <xTaskPriorityDisinherit+0x114>)
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	4013      	ands	r3, r2
 8016cb2:	4a17      	ldr	r2, [pc, #92]	@ (8016d10 <xTaskPriorityDisinherit+0x114>)
 8016cb4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016cb6:	693b      	ldr	r3, [r7, #16]
 8016cb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016cba:	693b      	ldr	r3, [r7, #16]
 8016cbc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016cbe:	693b      	ldr	r3, [r7, #16]
 8016cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016cc2:	f1c3 0207 	rsb	r2, r3, #7
 8016cc6:	693b      	ldr	r3, [r7, #16]
 8016cc8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016cca:	693b      	ldr	r3, [r7, #16]
 8016ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016cce:	2201      	movs	r2, #1
 8016cd0:	409a      	lsls	r2, r3
 8016cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8016d10 <xTaskPriorityDisinherit+0x114>)
 8016cd4:	681b      	ldr	r3, [r3, #0]
 8016cd6:	4313      	orrs	r3, r2
 8016cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8016d10 <xTaskPriorityDisinherit+0x114>)
 8016cda:	6013      	str	r3, [r2, #0]
 8016cdc:	693b      	ldr	r3, [r7, #16]
 8016cde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016ce0:	4613      	mov	r3, r2
 8016ce2:	009b      	lsls	r3, r3, #2
 8016ce4:	4413      	add	r3, r2
 8016ce6:	009b      	lsls	r3, r3, #2
 8016ce8:	4a08      	ldr	r2, [pc, #32]	@ (8016d0c <xTaskPriorityDisinherit+0x110>)
 8016cea:	441a      	add	r2, r3
 8016cec:	693b      	ldr	r3, [r7, #16]
 8016cee:	3304      	adds	r3, #4
 8016cf0:	4619      	mov	r1, r3
 8016cf2:	4610      	mov	r0, r2
 8016cf4:	f7fe facd 	bl	8015292 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016cf8:	2301      	movs	r3, #1
 8016cfa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016cfc:	697b      	ldr	r3, [r7, #20]
	}
 8016cfe:	4618      	mov	r0, r3
 8016d00:	3718      	adds	r7, #24
 8016d02:	46bd      	mov	sp, r7
 8016d04:	bd80      	pop	{r7, pc}
 8016d06:	bf00      	nop
 8016d08:	20002b38 	.word	0x20002b38
 8016d0c:	20002b3c 	.word	0x20002b3c
 8016d10:	20002c40 	.word	0x20002c40

08016d14 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016d14:	b580      	push	{r7, lr}
 8016d16:	b084      	sub	sp, #16
 8016d18:	af00      	add	r7, sp, #0
 8016d1a:	6078      	str	r0, [r7, #4]
 8016d1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016d1e:	4b29      	ldr	r3, [pc, #164]	@ (8016dc4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016d24:	4b28      	ldr	r3, [pc, #160]	@ (8016dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016d26:	681b      	ldr	r3, [r3, #0]
 8016d28:	3304      	adds	r3, #4
 8016d2a:	4618      	mov	r0, r3
 8016d2c:	f7fe fb0e 	bl	801534c <uxListRemove>
 8016d30:	4603      	mov	r3, r0
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d10b      	bne.n	8016d4e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8016d36:	4b24      	ldr	r3, [pc, #144]	@ (8016dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016d38:	681b      	ldr	r3, [r3, #0]
 8016d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016d3c:	2201      	movs	r2, #1
 8016d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8016d42:	43da      	mvns	r2, r3
 8016d44:	4b21      	ldr	r3, [pc, #132]	@ (8016dcc <prvAddCurrentTaskToDelayedList+0xb8>)
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	4013      	ands	r3, r2
 8016d4a:	4a20      	ldr	r2, [pc, #128]	@ (8016dcc <prvAddCurrentTaskToDelayedList+0xb8>)
 8016d4c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d54:	d10a      	bne.n	8016d6c <prvAddCurrentTaskToDelayedList+0x58>
 8016d56:	683b      	ldr	r3, [r7, #0]
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d007      	beq.n	8016d6c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8016dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016d5e:	681b      	ldr	r3, [r3, #0]
 8016d60:	3304      	adds	r3, #4
 8016d62:	4619      	mov	r1, r3
 8016d64:	481a      	ldr	r0, [pc, #104]	@ (8016dd0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8016d66:	f7fe fa94 	bl	8015292 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016d6a:	e026      	b.n	8016dba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016d6c:	68fa      	ldr	r2, [r7, #12]
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	4413      	add	r3, r2
 8016d72:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016d74:	4b14      	ldr	r3, [pc, #80]	@ (8016dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016d76:	681b      	ldr	r3, [r3, #0]
 8016d78:	68ba      	ldr	r2, [r7, #8]
 8016d7a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016d7c:	68ba      	ldr	r2, [r7, #8]
 8016d7e:	68fb      	ldr	r3, [r7, #12]
 8016d80:	429a      	cmp	r2, r3
 8016d82:	d209      	bcs.n	8016d98 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016d84:	4b13      	ldr	r3, [pc, #76]	@ (8016dd4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8016d86:	681a      	ldr	r2, [r3, #0]
 8016d88:	4b0f      	ldr	r3, [pc, #60]	@ (8016dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016d8a:	681b      	ldr	r3, [r3, #0]
 8016d8c:	3304      	adds	r3, #4
 8016d8e:	4619      	mov	r1, r3
 8016d90:	4610      	mov	r0, r2
 8016d92:	f7fe faa2 	bl	80152da <vListInsert>
}
 8016d96:	e010      	b.n	8016dba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016d98:	4b0f      	ldr	r3, [pc, #60]	@ (8016dd8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8016d9a:	681a      	ldr	r2, [r3, #0]
 8016d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8016dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	3304      	adds	r3, #4
 8016da2:	4619      	mov	r1, r3
 8016da4:	4610      	mov	r0, r2
 8016da6:	f7fe fa98 	bl	80152da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016daa:	4b0c      	ldr	r3, [pc, #48]	@ (8016ddc <prvAddCurrentTaskToDelayedList+0xc8>)
 8016dac:	681b      	ldr	r3, [r3, #0]
 8016dae:	68ba      	ldr	r2, [r7, #8]
 8016db0:	429a      	cmp	r2, r3
 8016db2:	d202      	bcs.n	8016dba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8016db4:	4a09      	ldr	r2, [pc, #36]	@ (8016ddc <prvAddCurrentTaskToDelayedList+0xc8>)
 8016db6:	68bb      	ldr	r3, [r7, #8]
 8016db8:	6013      	str	r3, [r2, #0]
}
 8016dba:	bf00      	nop
 8016dbc:	3710      	adds	r7, #16
 8016dbe:	46bd      	mov	sp, r7
 8016dc0:	bd80      	pop	{r7, pc}
 8016dc2:	bf00      	nop
 8016dc4:	20002c3c 	.word	0x20002c3c
 8016dc8:	20002b38 	.word	0x20002b38
 8016dcc:	20002c40 	.word	0x20002c40
 8016dd0:	20002c24 	.word	0x20002c24
 8016dd4:	20002bf4 	.word	0x20002bf4
 8016dd8:	20002bf0 	.word	0x20002bf0
 8016ddc:	20002c58 	.word	0x20002c58

08016de0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016de0:	b480      	push	{r7}
 8016de2:	b085      	sub	sp, #20
 8016de4:	af00      	add	r7, sp, #0
 8016de6:	60f8      	str	r0, [r7, #12]
 8016de8:	60b9      	str	r1, [r7, #8]
 8016dea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	3b04      	subs	r3, #4
 8016df0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016df2:	68fb      	ldr	r3, [r7, #12]
 8016df4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8016df8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	3b04      	subs	r3, #4
 8016dfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016e00:	68bb      	ldr	r3, [r7, #8]
 8016e02:	f023 0201 	bic.w	r2, r3, #1
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016e0a:	68fb      	ldr	r3, [r7, #12]
 8016e0c:	3b04      	subs	r3, #4
 8016e0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016e10:	4a0c      	ldr	r2, [pc, #48]	@ (8016e44 <pxPortInitialiseStack+0x64>)
 8016e12:	68fb      	ldr	r3, [r7, #12]
 8016e14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016e16:	68fb      	ldr	r3, [r7, #12]
 8016e18:	3b14      	subs	r3, #20
 8016e1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016e1c:	687a      	ldr	r2, [r7, #4]
 8016e1e:	68fb      	ldr	r3, [r7, #12]
 8016e20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016e22:	68fb      	ldr	r3, [r7, #12]
 8016e24:	3b04      	subs	r3, #4
 8016e26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016e28:	68fb      	ldr	r3, [r7, #12]
 8016e2a:	f06f 0202 	mvn.w	r2, #2
 8016e2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016e30:	68fb      	ldr	r3, [r7, #12]
 8016e32:	3b20      	subs	r3, #32
 8016e34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016e36:	68fb      	ldr	r3, [r7, #12]
}
 8016e38:	4618      	mov	r0, r3
 8016e3a:	3714      	adds	r7, #20
 8016e3c:	46bd      	mov	sp, r7
 8016e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e42:	4770      	bx	lr
 8016e44:	08016e49 	.word	0x08016e49

08016e48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016e48:	b480      	push	{r7}
 8016e4a:	b085      	sub	sp, #20
 8016e4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8016e4e:	2300      	movs	r3, #0
 8016e50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8016e52:	4b15      	ldr	r3, [pc, #84]	@ (8016ea8 <prvTaskExitError+0x60>)
 8016e54:	681b      	ldr	r3, [r3, #0]
 8016e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e5a:	d00d      	beq.n	8016e78 <prvTaskExitError+0x30>
	__asm volatile
 8016e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e60:	b672      	cpsid	i
 8016e62:	f383 8811 	msr	BASEPRI, r3
 8016e66:	f3bf 8f6f 	isb	sy
 8016e6a:	f3bf 8f4f 	dsb	sy
 8016e6e:	b662      	cpsie	i
 8016e70:	60fb      	str	r3, [r7, #12]
}
 8016e72:	bf00      	nop
 8016e74:	bf00      	nop
 8016e76:	e7fd      	b.n	8016e74 <prvTaskExitError+0x2c>
	__asm volatile
 8016e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e7c:	b672      	cpsid	i
 8016e7e:	f383 8811 	msr	BASEPRI, r3
 8016e82:	f3bf 8f6f 	isb	sy
 8016e86:	f3bf 8f4f 	dsb	sy
 8016e8a:	b662      	cpsie	i
 8016e8c:	60bb      	str	r3, [r7, #8]
}
 8016e8e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8016e90:	bf00      	nop
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d0fc      	beq.n	8016e92 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8016e98:	bf00      	nop
 8016e9a:	bf00      	nop
 8016e9c:	3714      	adds	r7, #20
 8016e9e:	46bd      	mov	sp, r7
 8016ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ea4:	4770      	bx	lr
 8016ea6:	bf00      	nop
 8016ea8:	20000074 	.word	0x20000074
 8016eac:	00000000 	.word	0x00000000

08016eb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016eb0:	4b07      	ldr	r3, [pc, #28]	@ (8016ed0 <pxCurrentTCBConst2>)
 8016eb2:	6819      	ldr	r1, [r3, #0]
 8016eb4:	6808      	ldr	r0, [r1, #0]
 8016eb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016eba:	f380 8809 	msr	PSP, r0
 8016ebe:	f3bf 8f6f 	isb	sy
 8016ec2:	f04f 0000 	mov.w	r0, #0
 8016ec6:	f380 8811 	msr	BASEPRI, r0
 8016eca:	4770      	bx	lr
 8016ecc:	f3af 8000 	nop.w

08016ed0 <pxCurrentTCBConst2>:
 8016ed0:	20002b38 	.word	0x20002b38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016ed4:	bf00      	nop
 8016ed6:	bf00      	nop

08016ed8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016ed8:	4808      	ldr	r0, [pc, #32]	@ (8016efc <prvPortStartFirstTask+0x24>)
 8016eda:	6800      	ldr	r0, [r0, #0]
 8016edc:	6800      	ldr	r0, [r0, #0]
 8016ede:	f380 8808 	msr	MSP, r0
 8016ee2:	f04f 0000 	mov.w	r0, #0
 8016ee6:	f380 8814 	msr	CONTROL, r0
 8016eea:	b662      	cpsie	i
 8016eec:	b661      	cpsie	f
 8016eee:	f3bf 8f4f 	dsb	sy
 8016ef2:	f3bf 8f6f 	isb	sy
 8016ef6:	df00      	svc	0
 8016ef8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8016efa:	bf00      	nop
 8016efc:	e000ed08 	.word	0xe000ed08

08016f00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016f00:	b580      	push	{r7, lr}
 8016f02:	b084      	sub	sp, #16
 8016f04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016f06:	4b37      	ldr	r3, [pc, #220]	@ (8016fe4 <xPortStartScheduler+0xe4>)
 8016f08:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8016f0a:	68fb      	ldr	r3, [r7, #12]
 8016f0c:	781b      	ldrb	r3, [r3, #0]
 8016f0e:	b2db      	uxtb	r3, r3
 8016f10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	22ff      	movs	r2, #255	@ 0xff
 8016f16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016f18:	68fb      	ldr	r3, [r7, #12]
 8016f1a:	781b      	ldrb	r3, [r3, #0]
 8016f1c:	b2db      	uxtb	r3, r3
 8016f1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016f20:	78fb      	ldrb	r3, [r7, #3]
 8016f22:	b2db      	uxtb	r3, r3
 8016f24:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8016f28:	b2da      	uxtb	r2, r3
 8016f2a:	4b2f      	ldr	r3, [pc, #188]	@ (8016fe8 <xPortStartScheduler+0xe8>)
 8016f2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8016f2e:	4b2f      	ldr	r3, [pc, #188]	@ (8016fec <xPortStartScheduler+0xec>)
 8016f30:	2207      	movs	r2, #7
 8016f32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016f34:	e009      	b.n	8016f4a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8016f36:	4b2d      	ldr	r3, [pc, #180]	@ (8016fec <xPortStartScheduler+0xec>)
 8016f38:	681b      	ldr	r3, [r3, #0]
 8016f3a:	3b01      	subs	r3, #1
 8016f3c:	4a2b      	ldr	r2, [pc, #172]	@ (8016fec <xPortStartScheduler+0xec>)
 8016f3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016f40:	78fb      	ldrb	r3, [r7, #3]
 8016f42:	b2db      	uxtb	r3, r3
 8016f44:	005b      	lsls	r3, r3, #1
 8016f46:	b2db      	uxtb	r3, r3
 8016f48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016f4a:	78fb      	ldrb	r3, [r7, #3]
 8016f4c:	b2db      	uxtb	r3, r3
 8016f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016f52:	2b80      	cmp	r3, #128	@ 0x80
 8016f54:	d0ef      	beq.n	8016f36 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8016f56:	4b25      	ldr	r3, [pc, #148]	@ (8016fec <xPortStartScheduler+0xec>)
 8016f58:	681b      	ldr	r3, [r3, #0]
 8016f5a:	f1c3 0307 	rsb	r3, r3, #7
 8016f5e:	2b04      	cmp	r3, #4
 8016f60:	d00d      	beq.n	8016f7e <xPortStartScheduler+0x7e>
	__asm volatile
 8016f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f66:	b672      	cpsid	i
 8016f68:	f383 8811 	msr	BASEPRI, r3
 8016f6c:	f3bf 8f6f 	isb	sy
 8016f70:	f3bf 8f4f 	dsb	sy
 8016f74:	b662      	cpsie	i
 8016f76:	60bb      	str	r3, [r7, #8]
}
 8016f78:	bf00      	nop
 8016f7a:	bf00      	nop
 8016f7c:	e7fd      	b.n	8016f7a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8016fec <xPortStartScheduler+0xec>)
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	021b      	lsls	r3, r3, #8
 8016f84:	4a19      	ldr	r2, [pc, #100]	@ (8016fec <xPortStartScheduler+0xec>)
 8016f86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016f88:	4b18      	ldr	r3, [pc, #96]	@ (8016fec <xPortStartScheduler+0xec>)
 8016f8a:	681b      	ldr	r3, [r3, #0]
 8016f8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8016f90:	4a16      	ldr	r2, [pc, #88]	@ (8016fec <xPortStartScheduler+0xec>)
 8016f92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	b2da      	uxtb	r2, r3
 8016f98:	68fb      	ldr	r3, [r7, #12]
 8016f9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016f9c:	4b14      	ldr	r3, [pc, #80]	@ (8016ff0 <xPortStartScheduler+0xf0>)
 8016f9e:	681b      	ldr	r3, [r3, #0]
 8016fa0:	4a13      	ldr	r2, [pc, #76]	@ (8016ff0 <xPortStartScheduler+0xf0>)
 8016fa2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8016fa6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016fa8:	4b11      	ldr	r3, [pc, #68]	@ (8016ff0 <xPortStartScheduler+0xf0>)
 8016faa:	681b      	ldr	r3, [r3, #0]
 8016fac:	4a10      	ldr	r2, [pc, #64]	@ (8016ff0 <xPortStartScheduler+0xf0>)
 8016fae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8016fb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016fb4:	f000 f8dc 	bl	8017170 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8016ff4 <xPortStartScheduler+0xf4>)
 8016fba:	2200      	movs	r2, #0
 8016fbc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016fbe:	f000 f8fb 	bl	80171b8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8016ff8 <xPortStartScheduler+0xf8>)
 8016fc4:	681b      	ldr	r3, [r3, #0]
 8016fc6:	4a0c      	ldr	r2, [pc, #48]	@ (8016ff8 <xPortStartScheduler+0xf8>)
 8016fc8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8016fcc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016fce:	f7ff ff83 	bl	8016ed8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8016fd2:	f7ff fb7f 	bl	80166d4 <vTaskSwitchContext>
	prvTaskExitError();
 8016fd6:	f7ff ff37 	bl	8016e48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016fda:	2300      	movs	r3, #0
}
 8016fdc:	4618      	mov	r0, r3
 8016fde:	3710      	adds	r7, #16
 8016fe0:	46bd      	mov	sp, r7
 8016fe2:	bd80      	pop	{r7, pc}
 8016fe4:	e000e400 	.word	0xe000e400
 8016fe8:	20002c64 	.word	0x20002c64
 8016fec:	20002c68 	.word	0x20002c68
 8016ff0:	e000ed20 	.word	0xe000ed20
 8016ff4:	20000074 	.word	0x20000074
 8016ff8:	e000ef34 	.word	0xe000ef34

08016ffc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016ffc:	b480      	push	{r7}
 8016ffe:	b083      	sub	sp, #12
 8017000:	af00      	add	r7, sp, #0
	__asm volatile
 8017002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017006:	b672      	cpsid	i
 8017008:	f383 8811 	msr	BASEPRI, r3
 801700c:	f3bf 8f6f 	isb	sy
 8017010:	f3bf 8f4f 	dsb	sy
 8017014:	b662      	cpsie	i
 8017016:	607b      	str	r3, [r7, #4]
}
 8017018:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801701a:	4b11      	ldr	r3, [pc, #68]	@ (8017060 <vPortEnterCritical+0x64>)
 801701c:	681b      	ldr	r3, [r3, #0]
 801701e:	3301      	adds	r3, #1
 8017020:	4a0f      	ldr	r2, [pc, #60]	@ (8017060 <vPortEnterCritical+0x64>)
 8017022:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8017024:	4b0e      	ldr	r3, [pc, #56]	@ (8017060 <vPortEnterCritical+0x64>)
 8017026:	681b      	ldr	r3, [r3, #0]
 8017028:	2b01      	cmp	r3, #1
 801702a:	d112      	bne.n	8017052 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801702c:	4b0d      	ldr	r3, [pc, #52]	@ (8017064 <vPortEnterCritical+0x68>)
 801702e:	681b      	ldr	r3, [r3, #0]
 8017030:	b2db      	uxtb	r3, r3
 8017032:	2b00      	cmp	r3, #0
 8017034:	d00d      	beq.n	8017052 <vPortEnterCritical+0x56>
	__asm volatile
 8017036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801703a:	b672      	cpsid	i
 801703c:	f383 8811 	msr	BASEPRI, r3
 8017040:	f3bf 8f6f 	isb	sy
 8017044:	f3bf 8f4f 	dsb	sy
 8017048:	b662      	cpsie	i
 801704a:	603b      	str	r3, [r7, #0]
}
 801704c:	bf00      	nop
 801704e:	bf00      	nop
 8017050:	e7fd      	b.n	801704e <vPortEnterCritical+0x52>
	}
}
 8017052:	bf00      	nop
 8017054:	370c      	adds	r7, #12
 8017056:	46bd      	mov	sp, r7
 8017058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801705c:	4770      	bx	lr
 801705e:	bf00      	nop
 8017060:	20000074 	.word	0x20000074
 8017064:	e000ed04 	.word	0xe000ed04

08017068 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8017068:	b480      	push	{r7}
 801706a:	b083      	sub	sp, #12
 801706c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801706e:	4b13      	ldr	r3, [pc, #76]	@ (80170bc <vPortExitCritical+0x54>)
 8017070:	681b      	ldr	r3, [r3, #0]
 8017072:	2b00      	cmp	r3, #0
 8017074:	d10d      	bne.n	8017092 <vPortExitCritical+0x2a>
	__asm volatile
 8017076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801707a:	b672      	cpsid	i
 801707c:	f383 8811 	msr	BASEPRI, r3
 8017080:	f3bf 8f6f 	isb	sy
 8017084:	f3bf 8f4f 	dsb	sy
 8017088:	b662      	cpsie	i
 801708a:	607b      	str	r3, [r7, #4]
}
 801708c:	bf00      	nop
 801708e:	bf00      	nop
 8017090:	e7fd      	b.n	801708e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8017092:	4b0a      	ldr	r3, [pc, #40]	@ (80170bc <vPortExitCritical+0x54>)
 8017094:	681b      	ldr	r3, [r3, #0]
 8017096:	3b01      	subs	r3, #1
 8017098:	4a08      	ldr	r2, [pc, #32]	@ (80170bc <vPortExitCritical+0x54>)
 801709a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801709c:	4b07      	ldr	r3, [pc, #28]	@ (80170bc <vPortExitCritical+0x54>)
 801709e:	681b      	ldr	r3, [r3, #0]
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	d105      	bne.n	80170b0 <vPortExitCritical+0x48>
 80170a4:	2300      	movs	r3, #0
 80170a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80170a8:	683b      	ldr	r3, [r7, #0]
 80170aa:	f383 8811 	msr	BASEPRI, r3
}
 80170ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80170b0:	bf00      	nop
 80170b2:	370c      	adds	r7, #12
 80170b4:	46bd      	mov	sp, r7
 80170b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ba:	4770      	bx	lr
 80170bc:	20000074 	.word	0x20000074

080170c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80170c0:	f3ef 8009 	mrs	r0, PSP
 80170c4:	f3bf 8f6f 	isb	sy
 80170c8:	4b15      	ldr	r3, [pc, #84]	@ (8017120 <pxCurrentTCBConst>)
 80170ca:	681a      	ldr	r2, [r3, #0]
 80170cc:	f01e 0f10 	tst.w	lr, #16
 80170d0:	bf08      	it	eq
 80170d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80170d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170da:	6010      	str	r0, [r2, #0]
 80170dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80170e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80170e4:	b672      	cpsid	i
 80170e6:	f380 8811 	msr	BASEPRI, r0
 80170ea:	f3bf 8f4f 	dsb	sy
 80170ee:	f3bf 8f6f 	isb	sy
 80170f2:	b662      	cpsie	i
 80170f4:	f7ff faee 	bl	80166d4 <vTaskSwitchContext>
 80170f8:	f04f 0000 	mov.w	r0, #0
 80170fc:	f380 8811 	msr	BASEPRI, r0
 8017100:	bc09      	pop	{r0, r3}
 8017102:	6819      	ldr	r1, [r3, #0]
 8017104:	6808      	ldr	r0, [r1, #0]
 8017106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801710a:	f01e 0f10 	tst.w	lr, #16
 801710e:	bf08      	it	eq
 8017110:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8017114:	f380 8809 	msr	PSP, r0
 8017118:	f3bf 8f6f 	isb	sy
 801711c:	4770      	bx	lr
 801711e:	bf00      	nop

08017120 <pxCurrentTCBConst>:
 8017120:	20002b38 	.word	0x20002b38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8017124:	bf00      	nop
 8017126:	bf00      	nop

08017128 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8017128:	b580      	push	{r7, lr}
 801712a:	b082      	sub	sp, #8
 801712c:	af00      	add	r7, sp, #0
	__asm volatile
 801712e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017132:	b672      	cpsid	i
 8017134:	f383 8811 	msr	BASEPRI, r3
 8017138:	f3bf 8f6f 	isb	sy
 801713c:	f3bf 8f4f 	dsb	sy
 8017140:	b662      	cpsie	i
 8017142:	607b      	str	r3, [r7, #4]
}
 8017144:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8017146:	f7ff fa09 	bl	801655c <xTaskIncrementTick>
 801714a:	4603      	mov	r3, r0
 801714c:	2b00      	cmp	r3, #0
 801714e:	d003      	beq.n	8017158 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8017150:	4b06      	ldr	r3, [pc, #24]	@ (801716c <SysTick_Handler+0x44>)
 8017152:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017156:	601a      	str	r2, [r3, #0]
 8017158:	2300      	movs	r3, #0
 801715a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801715c:	683b      	ldr	r3, [r7, #0]
 801715e:	f383 8811 	msr	BASEPRI, r3
}
 8017162:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8017164:	bf00      	nop
 8017166:	3708      	adds	r7, #8
 8017168:	46bd      	mov	sp, r7
 801716a:	bd80      	pop	{r7, pc}
 801716c:	e000ed04 	.word	0xe000ed04

08017170 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8017170:	b480      	push	{r7}
 8017172:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8017174:	4b0b      	ldr	r3, [pc, #44]	@ (80171a4 <vPortSetupTimerInterrupt+0x34>)
 8017176:	2200      	movs	r2, #0
 8017178:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801717a:	4b0b      	ldr	r3, [pc, #44]	@ (80171a8 <vPortSetupTimerInterrupt+0x38>)
 801717c:	2200      	movs	r2, #0
 801717e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8017180:	4b0a      	ldr	r3, [pc, #40]	@ (80171ac <vPortSetupTimerInterrupt+0x3c>)
 8017182:	681b      	ldr	r3, [r3, #0]
 8017184:	4a0a      	ldr	r2, [pc, #40]	@ (80171b0 <vPortSetupTimerInterrupt+0x40>)
 8017186:	fba2 2303 	umull	r2, r3, r2, r3
 801718a:	099b      	lsrs	r3, r3, #6
 801718c:	4a09      	ldr	r2, [pc, #36]	@ (80171b4 <vPortSetupTimerInterrupt+0x44>)
 801718e:	3b01      	subs	r3, #1
 8017190:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8017192:	4b04      	ldr	r3, [pc, #16]	@ (80171a4 <vPortSetupTimerInterrupt+0x34>)
 8017194:	2207      	movs	r2, #7
 8017196:	601a      	str	r2, [r3, #0]
}
 8017198:	bf00      	nop
 801719a:	46bd      	mov	sp, r7
 801719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171a0:	4770      	bx	lr
 80171a2:	bf00      	nop
 80171a4:	e000e010 	.word	0xe000e010
 80171a8:	e000e018 	.word	0xe000e018
 80171ac:	2000001c 	.word	0x2000001c
 80171b0:	10624dd3 	.word	0x10624dd3
 80171b4:	e000e014 	.word	0xe000e014

080171b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80171b8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80171c8 <vPortEnableVFP+0x10>
 80171bc:	6801      	ldr	r1, [r0, #0]
 80171be:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80171c2:	6001      	str	r1, [r0, #0]
 80171c4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80171c6:	bf00      	nop
 80171c8:	e000ed88 	.word	0xe000ed88

080171cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80171cc:	b480      	push	{r7}
 80171ce:	b085      	sub	sp, #20
 80171d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80171d2:	f3ef 8305 	mrs	r3, IPSR
 80171d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80171d8:	68fb      	ldr	r3, [r7, #12]
 80171da:	2b0f      	cmp	r3, #15
 80171dc:	d917      	bls.n	801720e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80171de:	4a1a      	ldr	r2, [pc, #104]	@ (8017248 <vPortValidateInterruptPriority+0x7c>)
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	4413      	add	r3, r2
 80171e4:	781b      	ldrb	r3, [r3, #0]
 80171e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80171e8:	4b18      	ldr	r3, [pc, #96]	@ (801724c <vPortValidateInterruptPriority+0x80>)
 80171ea:	781b      	ldrb	r3, [r3, #0]
 80171ec:	7afa      	ldrb	r2, [r7, #11]
 80171ee:	429a      	cmp	r2, r3
 80171f0:	d20d      	bcs.n	801720e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80171f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80171f6:	b672      	cpsid	i
 80171f8:	f383 8811 	msr	BASEPRI, r3
 80171fc:	f3bf 8f6f 	isb	sy
 8017200:	f3bf 8f4f 	dsb	sy
 8017204:	b662      	cpsie	i
 8017206:	607b      	str	r3, [r7, #4]
}
 8017208:	bf00      	nop
 801720a:	bf00      	nop
 801720c:	e7fd      	b.n	801720a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801720e:	4b10      	ldr	r3, [pc, #64]	@ (8017250 <vPortValidateInterruptPriority+0x84>)
 8017210:	681b      	ldr	r3, [r3, #0]
 8017212:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8017216:	4b0f      	ldr	r3, [pc, #60]	@ (8017254 <vPortValidateInterruptPriority+0x88>)
 8017218:	681b      	ldr	r3, [r3, #0]
 801721a:	429a      	cmp	r2, r3
 801721c:	d90d      	bls.n	801723a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 801721e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017222:	b672      	cpsid	i
 8017224:	f383 8811 	msr	BASEPRI, r3
 8017228:	f3bf 8f6f 	isb	sy
 801722c:	f3bf 8f4f 	dsb	sy
 8017230:	b662      	cpsie	i
 8017232:	603b      	str	r3, [r7, #0]
}
 8017234:	bf00      	nop
 8017236:	bf00      	nop
 8017238:	e7fd      	b.n	8017236 <vPortValidateInterruptPriority+0x6a>
	}
 801723a:	bf00      	nop
 801723c:	3714      	adds	r7, #20
 801723e:	46bd      	mov	sp, r7
 8017240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017244:	4770      	bx	lr
 8017246:	bf00      	nop
 8017248:	e000e3f0 	.word	0xe000e3f0
 801724c:	20002c64 	.word	0x20002c64
 8017250:	e000ed0c 	.word	0xe000ed0c
 8017254:	20002c68 	.word	0x20002c68

08017258 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8017258:	b580      	push	{r7, lr}
 801725a:	b08a      	sub	sp, #40	@ 0x28
 801725c:	af00      	add	r7, sp, #0
 801725e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8017260:	2300      	movs	r3, #0
 8017262:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8017264:	f7ff f8aa 	bl	80163bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8017268:	4b5f      	ldr	r3, [pc, #380]	@ (80173e8 <pvPortMalloc+0x190>)
 801726a:	681b      	ldr	r3, [r3, #0]
 801726c:	2b00      	cmp	r3, #0
 801726e:	d101      	bne.n	8017274 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8017270:	f000 f924 	bl	80174bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8017274:	4b5d      	ldr	r3, [pc, #372]	@ (80173ec <pvPortMalloc+0x194>)
 8017276:	681a      	ldr	r2, [r3, #0]
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	4013      	ands	r3, r2
 801727c:	2b00      	cmp	r3, #0
 801727e:	f040 8094 	bne.w	80173aa <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	2b00      	cmp	r3, #0
 8017286:	d020      	beq.n	80172ca <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8017288:	2208      	movs	r2, #8
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	4413      	add	r3, r2
 801728e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	f003 0307 	and.w	r3, r3, #7
 8017296:	2b00      	cmp	r3, #0
 8017298:	d017      	beq.n	80172ca <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	f023 0307 	bic.w	r3, r3, #7
 80172a0:	3308      	adds	r3, #8
 80172a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	f003 0307 	and.w	r3, r3, #7
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d00d      	beq.n	80172ca <pvPortMalloc+0x72>
	__asm volatile
 80172ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80172b2:	b672      	cpsid	i
 80172b4:	f383 8811 	msr	BASEPRI, r3
 80172b8:	f3bf 8f6f 	isb	sy
 80172bc:	f3bf 8f4f 	dsb	sy
 80172c0:	b662      	cpsie	i
 80172c2:	617b      	str	r3, [r7, #20]
}
 80172c4:	bf00      	nop
 80172c6:	bf00      	nop
 80172c8:	e7fd      	b.n	80172c6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	d06c      	beq.n	80173aa <pvPortMalloc+0x152>
 80172d0:	4b47      	ldr	r3, [pc, #284]	@ (80173f0 <pvPortMalloc+0x198>)
 80172d2:	681b      	ldr	r3, [r3, #0]
 80172d4:	687a      	ldr	r2, [r7, #4]
 80172d6:	429a      	cmp	r2, r3
 80172d8:	d867      	bhi.n	80173aa <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80172da:	4b46      	ldr	r3, [pc, #280]	@ (80173f4 <pvPortMalloc+0x19c>)
 80172dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80172de:	4b45      	ldr	r3, [pc, #276]	@ (80173f4 <pvPortMalloc+0x19c>)
 80172e0:	681b      	ldr	r3, [r3, #0]
 80172e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80172e4:	e004      	b.n	80172f0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80172e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80172ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172ec:	681b      	ldr	r3, [r3, #0]
 80172ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80172f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172f2:	685b      	ldr	r3, [r3, #4]
 80172f4:	687a      	ldr	r2, [r7, #4]
 80172f6:	429a      	cmp	r2, r3
 80172f8:	d903      	bls.n	8017302 <pvPortMalloc+0xaa>
 80172fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172fc:	681b      	ldr	r3, [r3, #0]
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d1f1      	bne.n	80172e6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8017302:	4b39      	ldr	r3, [pc, #228]	@ (80173e8 <pvPortMalloc+0x190>)
 8017304:	681b      	ldr	r3, [r3, #0]
 8017306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017308:	429a      	cmp	r2, r3
 801730a:	d04e      	beq.n	80173aa <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801730c:	6a3b      	ldr	r3, [r7, #32]
 801730e:	681b      	ldr	r3, [r3, #0]
 8017310:	2208      	movs	r2, #8
 8017312:	4413      	add	r3, r2
 8017314:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017318:	681a      	ldr	r2, [r3, #0]
 801731a:	6a3b      	ldr	r3, [r7, #32]
 801731c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801731e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017320:	685a      	ldr	r2, [r3, #4]
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	1ad2      	subs	r2, r2, r3
 8017326:	2308      	movs	r3, #8
 8017328:	005b      	lsls	r3, r3, #1
 801732a:	429a      	cmp	r2, r3
 801732c:	d922      	bls.n	8017374 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801732e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	4413      	add	r3, r2
 8017334:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017336:	69bb      	ldr	r3, [r7, #24]
 8017338:	f003 0307 	and.w	r3, r3, #7
 801733c:	2b00      	cmp	r3, #0
 801733e:	d00d      	beq.n	801735c <pvPortMalloc+0x104>
	__asm volatile
 8017340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017344:	b672      	cpsid	i
 8017346:	f383 8811 	msr	BASEPRI, r3
 801734a:	f3bf 8f6f 	isb	sy
 801734e:	f3bf 8f4f 	dsb	sy
 8017352:	b662      	cpsie	i
 8017354:	613b      	str	r3, [r7, #16]
}
 8017356:	bf00      	nop
 8017358:	bf00      	nop
 801735a:	e7fd      	b.n	8017358 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801735c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801735e:	685a      	ldr	r2, [r3, #4]
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	1ad2      	subs	r2, r2, r3
 8017364:	69bb      	ldr	r3, [r7, #24]
 8017366:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8017368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801736a:	687a      	ldr	r2, [r7, #4]
 801736c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801736e:	69b8      	ldr	r0, [r7, #24]
 8017370:	f000 f906 	bl	8017580 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017374:	4b1e      	ldr	r3, [pc, #120]	@ (80173f0 <pvPortMalloc+0x198>)
 8017376:	681a      	ldr	r2, [r3, #0]
 8017378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801737a:	685b      	ldr	r3, [r3, #4]
 801737c:	1ad3      	subs	r3, r2, r3
 801737e:	4a1c      	ldr	r2, [pc, #112]	@ (80173f0 <pvPortMalloc+0x198>)
 8017380:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8017382:	4b1b      	ldr	r3, [pc, #108]	@ (80173f0 <pvPortMalloc+0x198>)
 8017384:	681a      	ldr	r2, [r3, #0]
 8017386:	4b1c      	ldr	r3, [pc, #112]	@ (80173f8 <pvPortMalloc+0x1a0>)
 8017388:	681b      	ldr	r3, [r3, #0]
 801738a:	429a      	cmp	r2, r3
 801738c:	d203      	bcs.n	8017396 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801738e:	4b18      	ldr	r3, [pc, #96]	@ (80173f0 <pvPortMalloc+0x198>)
 8017390:	681b      	ldr	r3, [r3, #0]
 8017392:	4a19      	ldr	r2, [pc, #100]	@ (80173f8 <pvPortMalloc+0x1a0>)
 8017394:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8017396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017398:	685a      	ldr	r2, [r3, #4]
 801739a:	4b14      	ldr	r3, [pc, #80]	@ (80173ec <pvPortMalloc+0x194>)
 801739c:	681b      	ldr	r3, [r3, #0]
 801739e:	431a      	orrs	r2, r3
 80173a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173a2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80173a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173a6:	2200      	movs	r2, #0
 80173a8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80173aa:	f7ff f815 	bl	80163d8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80173ae:	69fb      	ldr	r3, [r7, #28]
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d101      	bne.n	80173b8 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80173b4:	f7ea fefa 	bl	80021ac <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80173b8:	69fb      	ldr	r3, [r7, #28]
 80173ba:	f003 0307 	and.w	r3, r3, #7
 80173be:	2b00      	cmp	r3, #0
 80173c0:	d00d      	beq.n	80173de <pvPortMalloc+0x186>
	__asm volatile
 80173c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80173c6:	b672      	cpsid	i
 80173c8:	f383 8811 	msr	BASEPRI, r3
 80173cc:	f3bf 8f6f 	isb	sy
 80173d0:	f3bf 8f4f 	dsb	sy
 80173d4:	b662      	cpsie	i
 80173d6:	60fb      	str	r3, [r7, #12]
}
 80173d8:	bf00      	nop
 80173da:	bf00      	nop
 80173dc:	e7fd      	b.n	80173da <pvPortMalloc+0x182>
	return pvReturn;
 80173de:	69fb      	ldr	r3, [r7, #28]
}
 80173e0:	4618      	mov	r0, r3
 80173e2:	3728      	adds	r7, #40	@ 0x28
 80173e4:	46bd      	mov	sp, r7
 80173e6:	bd80      	pop	{r7, pc}
 80173e8:	20012c74 	.word	0x20012c74
 80173ec:	20012c80 	.word	0x20012c80
 80173f0:	20012c78 	.word	0x20012c78
 80173f4:	20012c6c 	.word	0x20012c6c
 80173f8:	20012c7c 	.word	0x20012c7c

080173fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80173fc:	b580      	push	{r7, lr}
 80173fe:	b086      	sub	sp, #24
 8017400:	af00      	add	r7, sp, #0
 8017402:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	2b00      	cmp	r3, #0
 801740c:	d04e      	beq.n	80174ac <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801740e:	2308      	movs	r3, #8
 8017410:	425b      	negs	r3, r3
 8017412:	697a      	ldr	r2, [r7, #20]
 8017414:	4413      	add	r3, r2
 8017416:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8017418:	697b      	ldr	r3, [r7, #20]
 801741a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801741c:	693b      	ldr	r3, [r7, #16]
 801741e:	685a      	ldr	r2, [r3, #4]
 8017420:	4b24      	ldr	r3, [pc, #144]	@ (80174b4 <vPortFree+0xb8>)
 8017422:	681b      	ldr	r3, [r3, #0]
 8017424:	4013      	ands	r3, r2
 8017426:	2b00      	cmp	r3, #0
 8017428:	d10d      	bne.n	8017446 <vPortFree+0x4a>
	__asm volatile
 801742a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801742e:	b672      	cpsid	i
 8017430:	f383 8811 	msr	BASEPRI, r3
 8017434:	f3bf 8f6f 	isb	sy
 8017438:	f3bf 8f4f 	dsb	sy
 801743c:	b662      	cpsie	i
 801743e:	60fb      	str	r3, [r7, #12]
}
 8017440:	bf00      	nop
 8017442:	bf00      	nop
 8017444:	e7fd      	b.n	8017442 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8017446:	693b      	ldr	r3, [r7, #16]
 8017448:	681b      	ldr	r3, [r3, #0]
 801744a:	2b00      	cmp	r3, #0
 801744c:	d00d      	beq.n	801746a <vPortFree+0x6e>
	__asm volatile
 801744e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017452:	b672      	cpsid	i
 8017454:	f383 8811 	msr	BASEPRI, r3
 8017458:	f3bf 8f6f 	isb	sy
 801745c:	f3bf 8f4f 	dsb	sy
 8017460:	b662      	cpsie	i
 8017462:	60bb      	str	r3, [r7, #8]
}
 8017464:	bf00      	nop
 8017466:	bf00      	nop
 8017468:	e7fd      	b.n	8017466 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801746a:	693b      	ldr	r3, [r7, #16]
 801746c:	685a      	ldr	r2, [r3, #4]
 801746e:	4b11      	ldr	r3, [pc, #68]	@ (80174b4 <vPortFree+0xb8>)
 8017470:	681b      	ldr	r3, [r3, #0]
 8017472:	4013      	ands	r3, r2
 8017474:	2b00      	cmp	r3, #0
 8017476:	d019      	beq.n	80174ac <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8017478:	693b      	ldr	r3, [r7, #16]
 801747a:	681b      	ldr	r3, [r3, #0]
 801747c:	2b00      	cmp	r3, #0
 801747e:	d115      	bne.n	80174ac <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017480:	693b      	ldr	r3, [r7, #16]
 8017482:	685a      	ldr	r2, [r3, #4]
 8017484:	4b0b      	ldr	r3, [pc, #44]	@ (80174b4 <vPortFree+0xb8>)
 8017486:	681b      	ldr	r3, [r3, #0]
 8017488:	43db      	mvns	r3, r3
 801748a:	401a      	ands	r2, r3
 801748c:	693b      	ldr	r3, [r7, #16]
 801748e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8017490:	f7fe ff94 	bl	80163bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017494:	693b      	ldr	r3, [r7, #16]
 8017496:	685a      	ldr	r2, [r3, #4]
 8017498:	4b07      	ldr	r3, [pc, #28]	@ (80174b8 <vPortFree+0xbc>)
 801749a:	681b      	ldr	r3, [r3, #0]
 801749c:	4413      	add	r3, r2
 801749e:	4a06      	ldr	r2, [pc, #24]	@ (80174b8 <vPortFree+0xbc>)
 80174a0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80174a2:	6938      	ldr	r0, [r7, #16]
 80174a4:	f000 f86c 	bl	8017580 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80174a8:	f7fe ff96 	bl	80163d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80174ac:	bf00      	nop
 80174ae:	3718      	adds	r7, #24
 80174b0:	46bd      	mov	sp, r7
 80174b2:	bd80      	pop	{r7, pc}
 80174b4:	20012c80 	.word	0x20012c80
 80174b8:	20012c78 	.word	0x20012c78

080174bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80174bc:	b480      	push	{r7}
 80174be:	b085      	sub	sp, #20
 80174c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80174c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80174c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80174c8:	4b27      	ldr	r3, [pc, #156]	@ (8017568 <prvHeapInit+0xac>)
 80174ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80174cc:	68fb      	ldr	r3, [r7, #12]
 80174ce:	f003 0307 	and.w	r3, r3, #7
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d00c      	beq.n	80174f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80174d6:	68fb      	ldr	r3, [r7, #12]
 80174d8:	3307      	adds	r3, #7
 80174da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80174dc:	68fb      	ldr	r3, [r7, #12]
 80174de:	f023 0307 	bic.w	r3, r3, #7
 80174e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80174e4:	68ba      	ldr	r2, [r7, #8]
 80174e6:	68fb      	ldr	r3, [r7, #12]
 80174e8:	1ad3      	subs	r3, r2, r3
 80174ea:	4a1f      	ldr	r2, [pc, #124]	@ (8017568 <prvHeapInit+0xac>)
 80174ec:	4413      	add	r3, r2
 80174ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80174f0:	68fb      	ldr	r3, [r7, #12]
 80174f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80174f4:	4a1d      	ldr	r2, [pc, #116]	@ (801756c <prvHeapInit+0xb0>)
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80174fa:	4b1c      	ldr	r3, [pc, #112]	@ (801756c <prvHeapInit+0xb0>)
 80174fc:	2200      	movs	r2, #0
 80174fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	68ba      	ldr	r2, [r7, #8]
 8017504:	4413      	add	r3, r2
 8017506:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8017508:	2208      	movs	r2, #8
 801750a:	68fb      	ldr	r3, [r7, #12]
 801750c:	1a9b      	subs	r3, r3, r2
 801750e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017510:	68fb      	ldr	r3, [r7, #12]
 8017512:	f023 0307 	bic.w	r3, r3, #7
 8017516:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8017518:	68fb      	ldr	r3, [r7, #12]
 801751a:	4a15      	ldr	r2, [pc, #84]	@ (8017570 <prvHeapInit+0xb4>)
 801751c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801751e:	4b14      	ldr	r3, [pc, #80]	@ (8017570 <prvHeapInit+0xb4>)
 8017520:	681b      	ldr	r3, [r3, #0]
 8017522:	2200      	movs	r2, #0
 8017524:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8017526:	4b12      	ldr	r3, [pc, #72]	@ (8017570 <prvHeapInit+0xb4>)
 8017528:	681b      	ldr	r3, [r3, #0]
 801752a:	2200      	movs	r2, #0
 801752c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8017532:	683b      	ldr	r3, [r7, #0]
 8017534:	68fa      	ldr	r2, [r7, #12]
 8017536:	1ad2      	subs	r2, r2, r3
 8017538:	683b      	ldr	r3, [r7, #0]
 801753a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801753c:	4b0c      	ldr	r3, [pc, #48]	@ (8017570 <prvHeapInit+0xb4>)
 801753e:	681a      	ldr	r2, [r3, #0]
 8017540:	683b      	ldr	r3, [r7, #0]
 8017542:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017544:	683b      	ldr	r3, [r7, #0]
 8017546:	685b      	ldr	r3, [r3, #4]
 8017548:	4a0a      	ldr	r2, [pc, #40]	@ (8017574 <prvHeapInit+0xb8>)
 801754a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801754c:	683b      	ldr	r3, [r7, #0]
 801754e:	685b      	ldr	r3, [r3, #4]
 8017550:	4a09      	ldr	r2, [pc, #36]	@ (8017578 <prvHeapInit+0xbc>)
 8017552:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8017554:	4b09      	ldr	r3, [pc, #36]	@ (801757c <prvHeapInit+0xc0>)
 8017556:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801755a:	601a      	str	r2, [r3, #0]
}
 801755c:	bf00      	nop
 801755e:	3714      	adds	r7, #20
 8017560:	46bd      	mov	sp, r7
 8017562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017566:	4770      	bx	lr
 8017568:	20002c6c 	.word	0x20002c6c
 801756c:	20012c6c 	.word	0x20012c6c
 8017570:	20012c74 	.word	0x20012c74
 8017574:	20012c7c 	.word	0x20012c7c
 8017578:	20012c78 	.word	0x20012c78
 801757c:	20012c80 	.word	0x20012c80

08017580 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8017580:	b480      	push	{r7}
 8017582:	b085      	sub	sp, #20
 8017584:	af00      	add	r7, sp, #0
 8017586:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8017588:	4b28      	ldr	r3, [pc, #160]	@ (801762c <prvInsertBlockIntoFreeList+0xac>)
 801758a:	60fb      	str	r3, [r7, #12]
 801758c:	e002      	b.n	8017594 <prvInsertBlockIntoFreeList+0x14>
 801758e:	68fb      	ldr	r3, [r7, #12]
 8017590:	681b      	ldr	r3, [r3, #0]
 8017592:	60fb      	str	r3, [r7, #12]
 8017594:	68fb      	ldr	r3, [r7, #12]
 8017596:	681b      	ldr	r3, [r3, #0]
 8017598:	687a      	ldr	r2, [r7, #4]
 801759a:	429a      	cmp	r2, r3
 801759c:	d8f7      	bhi.n	801758e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801759e:	68fb      	ldr	r3, [r7, #12]
 80175a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80175a2:	68fb      	ldr	r3, [r7, #12]
 80175a4:	685b      	ldr	r3, [r3, #4]
 80175a6:	68ba      	ldr	r2, [r7, #8]
 80175a8:	4413      	add	r3, r2
 80175aa:	687a      	ldr	r2, [r7, #4]
 80175ac:	429a      	cmp	r2, r3
 80175ae:	d108      	bne.n	80175c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	685a      	ldr	r2, [r3, #4]
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	685b      	ldr	r3, [r3, #4]
 80175b8:	441a      	add	r2, r3
 80175ba:	68fb      	ldr	r3, [r7, #12]
 80175bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80175be:	68fb      	ldr	r3, [r7, #12]
 80175c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	685b      	ldr	r3, [r3, #4]
 80175ca:	68ba      	ldr	r2, [r7, #8]
 80175cc:	441a      	add	r2, r3
 80175ce:	68fb      	ldr	r3, [r7, #12]
 80175d0:	681b      	ldr	r3, [r3, #0]
 80175d2:	429a      	cmp	r2, r3
 80175d4:	d118      	bne.n	8017608 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80175d6:	68fb      	ldr	r3, [r7, #12]
 80175d8:	681a      	ldr	r2, [r3, #0]
 80175da:	4b15      	ldr	r3, [pc, #84]	@ (8017630 <prvInsertBlockIntoFreeList+0xb0>)
 80175dc:	681b      	ldr	r3, [r3, #0]
 80175de:	429a      	cmp	r2, r3
 80175e0:	d00d      	beq.n	80175fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	685a      	ldr	r2, [r3, #4]
 80175e6:	68fb      	ldr	r3, [r7, #12]
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	685b      	ldr	r3, [r3, #4]
 80175ec:	441a      	add	r2, r3
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80175f2:	68fb      	ldr	r3, [r7, #12]
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	681a      	ldr	r2, [r3, #0]
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	601a      	str	r2, [r3, #0]
 80175fc:	e008      	b.n	8017610 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80175fe:	4b0c      	ldr	r3, [pc, #48]	@ (8017630 <prvInsertBlockIntoFreeList+0xb0>)
 8017600:	681a      	ldr	r2, [r3, #0]
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	601a      	str	r2, [r3, #0]
 8017606:	e003      	b.n	8017610 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017608:	68fb      	ldr	r3, [r7, #12]
 801760a:	681a      	ldr	r2, [r3, #0]
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017610:	68fa      	ldr	r2, [r7, #12]
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	429a      	cmp	r2, r3
 8017616:	d002      	beq.n	801761e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017618:	68fb      	ldr	r3, [r7, #12]
 801761a:	687a      	ldr	r2, [r7, #4]
 801761c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801761e:	bf00      	nop
 8017620:	3714      	adds	r7, #20
 8017622:	46bd      	mov	sp, r7
 8017624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017628:	4770      	bx	lr
 801762a:	bf00      	nop
 801762c:	20012c6c 	.word	0x20012c6c
 8017630:	20012c74 	.word	0x20012c74

08017634 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8017634:	b580      	push	{r7, lr}
 8017636:	b082      	sub	sp, #8
 8017638:	af00      	add	r7, sp, #0
 801763a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8017642:	4618      	mov	r0, r3
 8017644:	f7fa fe36 	bl	80122b4 <USBH_LL_IncTimer>
}
 8017648:	bf00      	nop
 801764a:	3708      	adds	r7, #8
 801764c:	46bd      	mov	sp, r7
 801764e:	bd80      	pop	{r7, pc}

08017650 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8017650:	b580      	push	{r7, lr}
 8017652:	b082      	sub	sp, #8
 8017654:	af00      	add	r7, sp, #0
 8017656:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801765e:	4618      	mov	r0, r3
 8017660:	f7fa fe76 	bl	8012350 <USBH_LL_Connect>
}
 8017664:	bf00      	nop
 8017666:	3708      	adds	r7, #8
 8017668:	46bd      	mov	sp, r7
 801766a:	bd80      	pop	{r7, pc}

0801766c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801766c:	b580      	push	{r7, lr}
 801766e:	b082      	sub	sp, #8
 8017670:	af00      	add	r7, sp, #0
 8017672:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801767a:	4618      	mov	r0, r3
 801767c:	f7fa fe83 	bl	8012386 <USBH_LL_Disconnect>
}
 8017680:	bf00      	nop
 8017682:	3708      	adds	r7, #8
 8017684:	46bd      	mov	sp, r7
 8017686:	bd80      	pop	{r7, pc}

08017688 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8017688:	b580      	push	{r7, lr}
 801768a:	b082      	sub	sp, #8
 801768c:	af00      	add	r7, sp, #0
 801768e:	6078      	str	r0, [r7, #4]
 8017690:	460b      	mov	r3, r1
 8017692:	70fb      	strb	r3, [r7, #3]
 8017694:	4613      	mov	r3, r2
 8017696:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801769e:	4618      	mov	r0, r3
 80176a0:	f7fa fec2 	bl	8012428 <USBH_LL_NotifyURBChange>
#endif
}
 80176a4:	bf00      	nop
 80176a6:	3708      	adds	r7, #8
 80176a8:	46bd      	mov	sp, r7
 80176aa:	bd80      	pop	{r7, pc}

080176ac <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80176ac:	b580      	push	{r7, lr}
 80176ae:	b082      	sub	sp, #8
 80176b0:	af00      	add	r7, sp, #0
 80176b2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80176ba:	4618      	mov	r0, r3
 80176bc:	f7fa fe24 	bl	8012308 <USBH_LL_PortEnabled>
}
 80176c0:	bf00      	nop
 80176c2:	3708      	adds	r7, #8
 80176c4:	46bd      	mov	sp, r7
 80176c6:	bd80      	pop	{r7, pc}

080176c8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80176c8:	b580      	push	{r7, lr}
 80176ca:	b082      	sub	sp, #8
 80176cc:	af00      	add	r7, sp, #0
 80176ce:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80176d6:	4618      	mov	r0, r3
 80176d8:	f7fa fe28 	bl	801232c <USBH_LL_PortDisabled>
}
 80176dc:	bf00      	nop
 80176de:	3708      	adds	r7, #8
 80176e0:	46bd      	mov	sp, r7
 80176e2:	bd80      	pop	{r7, pc}

080176e4 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80176e4:	b580      	push	{r7, lr}
 80176e6:	b084      	sub	sp, #16
 80176e8:	af00      	add	r7, sp, #0
 80176ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80176ec:	2300      	movs	r3, #0
 80176ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80176f0:	2300      	movs	r3, #0
 80176f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80176fa:	4618      	mov	r0, r3
 80176fc:	f7f1 f86d 	bl	80087da <HAL_HCD_Stop>
 8017700:	4603      	mov	r3, r0
 8017702:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8017704:	7bfb      	ldrb	r3, [r7, #15]
 8017706:	4618      	mov	r0, r3
 8017708:	f000 f808 	bl	801771c <USBH_Get_USB_Status>
 801770c:	4603      	mov	r3, r0
 801770e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017710:	7bbb      	ldrb	r3, [r7, #14]
}
 8017712:	4618      	mov	r0, r3
 8017714:	3710      	adds	r7, #16
 8017716:	46bd      	mov	sp, r7
 8017718:	bd80      	pop	{r7, pc}
	...

0801771c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801771c:	b480      	push	{r7}
 801771e:	b085      	sub	sp, #20
 8017720:	af00      	add	r7, sp, #0
 8017722:	4603      	mov	r3, r0
 8017724:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017726:	2300      	movs	r3, #0
 8017728:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801772a:	79fb      	ldrb	r3, [r7, #7]
 801772c:	2b03      	cmp	r3, #3
 801772e:	d817      	bhi.n	8017760 <USBH_Get_USB_Status+0x44>
 8017730:	a201      	add	r2, pc, #4	@ (adr r2, 8017738 <USBH_Get_USB_Status+0x1c>)
 8017732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017736:	bf00      	nop
 8017738:	08017749 	.word	0x08017749
 801773c:	0801774f 	.word	0x0801774f
 8017740:	08017755 	.word	0x08017755
 8017744:	0801775b 	.word	0x0801775b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8017748:	2300      	movs	r3, #0
 801774a:	73fb      	strb	r3, [r7, #15]
    break;
 801774c:	e00b      	b.n	8017766 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801774e:	2302      	movs	r3, #2
 8017750:	73fb      	strb	r3, [r7, #15]
    break;
 8017752:	e008      	b.n	8017766 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8017754:	2301      	movs	r3, #1
 8017756:	73fb      	strb	r3, [r7, #15]
    break;
 8017758:	e005      	b.n	8017766 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801775a:	2302      	movs	r3, #2
 801775c:	73fb      	strb	r3, [r7, #15]
    break;
 801775e:	e002      	b.n	8017766 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8017760:	2302      	movs	r3, #2
 8017762:	73fb      	strb	r3, [r7, #15]
    break;
 8017764:	bf00      	nop
  }
  return usb_status;
 8017766:	7bfb      	ldrb	r3, [r7, #15]
}
 8017768:	4618      	mov	r0, r3
 801776a:	3714      	adds	r7, #20
 801776c:	46bd      	mov	sp, r7
 801776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017772:	4770      	bx	lr

08017774 <sbrk_aligned>:
 8017774:	b570      	push	{r4, r5, r6, lr}
 8017776:	4e0f      	ldr	r6, [pc, #60]	@ (80177b4 <sbrk_aligned+0x40>)
 8017778:	460c      	mov	r4, r1
 801777a:	6831      	ldr	r1, [r6, #0]
 801777c:	4605      	mov	r5, r0
 801777e:	b911      	cbnz	r1, 8017786 <sbrk_aligned+0x12>
 8017780:	f000 faf2 	bl	8017d68 <_sbrk_r>
 8017784:	6030      	str	r0, [r6, #0]
 8017786:	4621      	mov	r1, r4
 8017788:	4628      	mov	r0, r5
 801778a:	f000 faed 	bl	8017d68 <_sbrk_r>
 801778e:	1c43      	adds	r3, r0, #1
 8017790:	d103      	bne.n	801779a <sbrk_aligned+0x26>
 8017792:	f04f 34ff 	mov.w	r4, #4294967295
 8017796:	4620      	mov	r0, r4
 8017798:	bd70      	pop	{r4, r5, r6, pc}
 801779a:	1cc4      	adds	r4, r0, #3
 801779c:	f024 0403 	bic.w	r4, r4, #3
 80177a0:	42a0      	cmp	r0, r4
 80177a2:	d0f8      	beq.n	8017796 <sbrk_aligned+0x22>
 80177a4:	1a21      	subs	r1, r4, r0
 80177a6:	4628      	mov	r0, r5
 80177a8:	f000 fade 	bl	8017d68 <_sbrk_r>
 80177ac:	3001      	adds	r0, #1
 80177ae:	d1f2      	bne.n	8017796 <sbrk_aligned+0x22>
 80177b0:	e7ef      	b.n	8017792 <sbrk_aligned+0x1e>
 80177b2:	bf00      	nop
 80177b4:	20013064 	.word	0x20013064

080177b8 <_malloc_r>:
 80177b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80177bc:	1ccd      	adds	r5, r1, #3
 80177be:	f025 0503 	bic.w	r5, r5, #3
 80177c2:	3508      	adds	r5, #8
 80177c4:	2d0c      	cmp	r5, #12
 80177c6:	bf38      	it	cc
 80177c8:	250c      	movcc	r5, #12
 80177ca:	2d00      	cmp	r5, #0
 80177cc:	4606      	mov	r6, r0
 80177ce:	db01      	blt.n	80177d4 <_malloc_r+0x1c>
 80177d0:	42a9      	cmp	r1, r5
 80177d2:	d904      	bls.n	80177de <_malloc_r+0x26>
 80177d4:	230c      	movs	r3, #12
 80177d6:	6033      	str	r3, [r6, #0]
 80177d8:	2000      	movs	r0, #0
 80177da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80177de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80178b4 <_malloc_r+0xfc>
 80177e2:	f000 f869 	bl	80178b8 <__malloc_lock>
 80177e6:	f8d8 3000 	ldr.w	r3, [r8]
 80177ea:	461c      	mov	r4, r3
 80177ec:	bb44      	cbnz	r4, 8017840 <_malloc_r+0x88>
 80177ee:	4629      	mov	r1, r5
 80177f0:	4630      	mov	r0, r6
 80177f2:	f7ff ffbf 	bl	8017774 <sbrk_aligned>
 80177f6:	1c43      	adds	r3, r0, #1
 80177f8:	4604      	mov	r4, r0
 80177fa:	d158      	bne.n	80178ae <_malloc_r+0xf6>
 80177fc:	f8d8 4000 	ldr.w	r4, [r8]
 8017800:	4627      	mov	r7, r4
 8017802:	2f00      	cmp	r7, #0
 8017804:	d143      	bne.n	801788e <_malloc_r+0xd6>
 8017806:	2c00      	cmp	r4, #0
 8017808:	d04b      	beq.n	80178a2 <_malloc_r+0xea>
 801780a:	6823      	ldr	r3, [r4, #0]
 801780c:	4639      	mov	r1, r7
 801780e:	4630      	mov	r0, r6
 8017810:	eb04 0903 	add.w	r9, r4, r3
 8017814:	f000 faa8 	bl	8017d68 <_sbrk_r>
 8017818:	4581      	cmp	r9, r0
 801781a:	d142      	bne.n	80178a2 <_malloc_r+0xea>
 801781c:	6821      	ldr	r1, [r4, #0]
 801781e:	1a6d      	subs	r5, r5, r1
 8017820:	4629      	mov	r1, r5
 8017822:	4630      	mov	r0, r6
 8017824:	f7ff ffa6 	bl	8017774 <sbrk_aligned>
 8017828:	3001      	adds	r0, #1
 801782a:	d03a      	beq.n	80178a2 <_malloc_r+0xea>
 801782c:	6823      	ldr	r3, [r4, #0]
 801782e:	442b      	add	r3, r5
 8017830:	6023      	str	r3, [r4, #0]
 8017832:	f8d8 3000 	ldr.w	r3, [r8]
 8017836:	685a      	ldr	r2, [r3, #4]
 8017838:	bb62      	cbnz	r2, 8017894 <_malloc_r+0xdc>
 801783a:	f8c8 7000 	str.w	r7, [r8]
 801783e:	e00f      	b.n	8017860 <_malloc_r+0xa8>
 8017840:	6822      	ldr	r2, [r4, #0]
 8017842:	1b52      	subs	r2, r2, r5
 8017844:	d420      	bmi.n	8017888 <_malloc_r+0xd0>
 8017846:	2a0b      	cmp	r2, #11
 8017848:	d917      	bls.n	801787a <_malloc_r+0xc2>
 801784a:	1961      	adds	r1, r4, r5
 801784c:	42a3      	cmp	r3, r4
 801784e:	6025      	str	r5, [r4, #0]
 8017850:	bf18      	it	ne
 8017852:	6059      	strne	r1, [r3, #4]
 8017854:	6863      	ldr	r3, [r4, #4]
 8017856:	bf08      	it	eq
 8017858:	f8c8 1000 	streq.w	r1, [r8]
 801785c:	5162      	str	r2, [r4, r5]
 801785e:	604b      	str	r3, [r1, #4]
 8017860:	4630      	mov	r0, r6
 8017862:	f000 f82f 	bl	80178c4 <__malloc_unlock>
 8017866:	f104 000b 	add.w	r0, r4, #11
 801786a:	1d23      	adds	r3, r4, #4
 801786c:	f020 0007 	bic.w	r0, r0, #7
 8017870:	1ac2      	subs	r2, r0, r3
 8017872:	bf1c      	itt	ne
 8017874:	1a1b      	subne	r3, r3, r0
 8017876:	50a3      	strne	r3, [r4, r2]
 8017878:	e7af      	b.n	80177da <_malloc_r+0x22>
 801787a:	6862      	ldr	r2, [r4, #4]
 801787c:	42a3      	cmp	r3, r4
 801787e:	bf0c      	ite	eq
 8017880:	f8c8 2000 	streq.w	r2, [r8]
 8017884:	605a      	strne	r2, [r3, #4]
 8017886:	e7eb      	b.n	8017860 <_malloc_r+0xa8>
 8017888:	4623      	mov	r3, r4
 801788a:	6864      	ldr	r4, [r4, #4]
 801788c:	e7ae      	b.n	80177ec <_malloc_r+0x34>
 801788e:	463c      	mov	r4, r7
 8017890:	687f      	ldr	r7, [r7, #4]
 8017892:	e7b6      	b.n	8017802 <_malloc_r+0x4a>
 8017894:	461a      	mov	r2, r3
 8017896:	685b      	ldr	r3, [r3, #4]
 8017898:	42a3      	cmp	r3, r4
 801789a:	d1fb      	bne.n	8017894 <_malloc_r+0xdc>
 801789c:	2300      	movs	r3, #0
 801789e:	6053      	str	r3, [r2, #4]
 80178a0:	e7de      	b.n	8017860 <_malloc_r+0xa8>
 80178a2:	230c      	movs	r3, #12
 80178a4:	6033      	str	r3, [r6, #0]
 80178a6:	4630      	mov	r0, r6
 80178a8:	f000 f80c 	bl	80178c4 <__malloc_unlock>
 80178ac:	e794      	b.n	80177d8 <_malloc_r+0x20>
 80178ae:	6005      	str	r5, [r0, #0]
 80178b0:	e7d6      	b.n	8017860 <_malloc_r+0xa8>
 80178b2:	bf00      	nop
 80178b4:	20013068 	.word	0x20013068

080178b8 <__malloc_lock>:
 80178b8:	4801      	ldr	r0, [pc, #4]	@ (80178c0 <__malloc_lock+0x8>)
 80178ba:	f000 baa2 	b.w	8017e02 <__retarget_lock_acquire_recursive>
 80178be:	bf00      	nop
 80178c0:	200131ac 	.word	0x200131ac

080178c4 <__malloc_unlock>:
 80178c4:	4801      	ldr	r0, [pc, #4]	@ (80178cc <__malloc_unlock+0x8>)
 80178c6:	f000 ba9d 	b.w	8017e04 <__retarget_lock_release_recursive>
 80178ca:	bf00      	nop
 80178cc:	200131ac 	.word	0x200131ac

080178d0 <std>:
 80178d0:	2300      	movs	r3, #0
 80178d2:	b510      	push	{r4, lr}
 80178d4:	4604      	mov	r4, r0
 80178d6:	e9c0 3300 	strd	r3, r3, [r0]
 80178da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80178de:	6083      	str	r3, [r0, #8]
 80178e0:	8181      	strh	r1, [r0, #12]
 80178e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80178e4:	81c2      	strh	r2, [r0, #14]
 80178e6:	6183      	str	r3, [r0, #24]
 80178e8:	4619      	mov	r1, r3
 80178ea:	2208      	movs	r2, #8
 80178ec:	305c      	adds	r0, #92	@ 0x5c
 80178ee:	f000 f9c9 	bl	8017c84 <memset>
 80178f2:	4b0d      	ldr	r3, [pc, #52]	@ (8017928 <std+0x58>)
 80178f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80178f6:	4b0d      	ldr	r3, [pc, #52]	@ (801792c <std+0x5c>)
 80178f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80178fa:	4b0d      	ldr	r3, [pc, #52]	@ (8017930 <std+0x60>)
 80178fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80178fe:	4b0d      	ldr	r3, [pc, #52]	@ (8017934 <std+0x64>)
 8017900:	6323      	str	r3, [r4, #48]	@ 0x30
 8017902:	4b0d      	ldr	r3, [pc, #52]	@ (8017938 <std+0x68>)
 8017904:	6224      	str	r4, [r4, #32]
 8017906:	429c      	cmp	r4, r3
 8017908:	d006      	beq.n	8017918 <std+0x48>
 801790a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801790e:	4294      	cmp	r4, r2
 8017910:	d002      	beq.n	8017918 <std+0x48>
 8017912:	33d0      	adds	r3, #208	@ 0xd0
 8017914:	429c      	cmp	r4, r3
 8017916:	d105      	bne.n	8017924 <std+0x54>
 8017918:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801791c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017920:	f000 ba6e 	b.w	8017e00 <__retarget_lock_init_recursive>
 8017924:	bd10      	pop	{r4, pc}
 8017926:	bf00      	nop
 8017928:	08017b81 	.word	0x08017b81
 801792c:	08017ba7 	.word	0x08017ba7
 8017930:	08017bdf 	.word	0x08017bdf
 8017934:	08017c03 	.word	0x08017c03
 8017938:	2001306c 	.word	0x2001306c

0801793c <stdio_exit_handler>:
 801793c:	4a02      	ldr	r2, [pc, #8]	@ (8017948 <stdio_exit_handler+0xc>)
 801793e:	4903      	ldr	r1, [pc, #12]	@ (801794c <stdio_exit_handler+0x10>)
 8017940:	4803      	ldr	r0, [pc, #12]	@ (8017950 <stdio_exit_handler+0x14>)
 8017942:	f000 b869 	b.w	8017a18 <_fwalk_sglue>
 8017946:	bf00      	nop
 8017948:	20000078 	.word	0x20000078
 801794c:	08018e49 	.word	0x08018e49
 8017950:	20000088 	.word	0x20000088

08017954 <cleanup_stdio>:
 8017954:	6841      	ldr	r1, [r0, #4]
 8017956:	4b0c      	ldr	r3, [pc, #48]	@ (8017988 <cleanup_stdio+0x34>)
 8017958:	4299      	cmp	r1, r3
 801795a:	b510      	push	{r4, lr}
 801795c:	4604      	mov	r4, r0
 801795e:	d001      	beq.n	8017964 <cleanup_stdio+0x10>
 8017960:	f001 fa72 	bl	8018e48 <_fflush_r>
 8017964:	68a1      	ldr	r1, [r4, #8]
 8017966:	4b09      	ldr	r3, [pc, #36]	@ (801798c <cleanup_stdio+0x38>)
 8017968:	4299      	cmp	r1, r3
 801796a:	d002      	beq.n	8017972 <cleanup_stdio+0x1e>
 801796c:	4620      	mov	r0, r4
 801796e:	f001 fa6b 	bl	8018e48 <_fflush_r>
 8017972:	68e1      	ldr	r1, [r4, #12]
 8017974:	4b06      	ldr	r3, [pc, #24]	@ (8017990 <cleanup_stdio+0x3c>)
 8017976:	4299      	cmp	r1, r3
 8017978:	d004      	beq.n	8017984 <cleanup_stdio+0x30>
 801797a:	4620      	mov	r0, r4
 801797c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017980:	f001 ba62 	b.w	8018e48 <_fflush_r>
 8017984:	bd10      	pop	{r4, pc}
 8017986:	bf00      	nop
 8017988:	2001306c 	.word	0x2001306c
 801798c:	200130d4 	.word	0x200130d4
 8017990:	2001313c 	.word	0x2001313c

08017994 <global_stdio_init.part.0>:
 8017994:	b510      	push	{r4, lr}
 8017996:	4b0b      	ldr	r3, [pc, #44]	@ (80179c4 <global_stdio_init.part.0+0x30>)
 8017998:	4c0b      	ldr	r4, [pc, #44]	@ (80179c8 <global_stdio_init.part.0+0x34>)
 801799a:	4a0c      	ldr	r2, [pc, #48]	@ (80179cc <global_stdio_init.part.0+0x38>)
 801799c:	601a      	str	r2, [r3, #0]
 801799e:	4620      	mov	r0, r4
 80179a0:	2200      	movs	r2, #0
 80179a2:	2104      	movs	r1, #4
 80179a4:	f7ff ff94 	bl	80178d0 <std>
 80179a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80179ac:	2201      	movs	r2, #1
 80179ae:	2109      	movs	r1, #9
 80179b0:	f7ff ff8e 	bl	80178d0 <std>
 80179b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80179b8:	2202      	movs	r2, #2
 80179ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80179be:	2112      	movs	r1, #18
 80179c0:	f7ff bf86 	b.w	80178d0 <std>
 80179c4:	200131a4 	.word	0x200131a4
 80179c8:	2001306c 	.word	0x2001306c
 80179cc:	0801793d 	.word	0x0801793d

080179d0 <__sfp_lock_acquire>:
 80179d0:	4801      	ldr	r0, [pc, #4]	@ (80179d8 <__sfp_lock_acquire+0x8>)
 80179d2:	f000 ba16 	b.w	8017e02 <__retarget_lock_acquire_recursive>
 80179d6:	bf00      	nop
 80179d8:	200131ad 	.word	0x200131ad

080179dc <__sfp_lock_release>:
 80179dc:	4801      	ldr	r0, [pc, #4]	@ (80179e4 <__sfp_lock_release+0x8>)
 80179de:	f000 ba11 	b.w	8017e04 <__retarget_lock_release_recursive>
 80179e2:	bf00      	nop
 80179e4:	200131ad 	.word	0x200131ad

080179e8 <__sinit>:
 80179e8:	b510      	push	{r4, lr}
 80179ea:	4604      	mov	r4, r0
 80179ec:	f7ff fff0 	bl	80179d0 <__sfp_lock_acquire>
 80179f0:	6a23      	ldr	r3, [r4, #32]
 80179f2:	b11b      	cbz	r3, 80179fc <__sinit+0x14>
 80179f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80179f8:	f7ff bff0 	b.w	80179dc <__sfp_lock_release>
 80179fc:	4b04      	ldr	r3, [pc, #16]	@ (8017a10 <__sinit+0x28>)
 80179fe:	6223      	str	r3, [r4, #32]
 8017a00:	4b04      	ldr	r3, [pc, #16]	@ (8017a14 <__sinit+0x2c>)
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	d1f5      	bne.n	80179f4 <__sinit+0xc>
 8017a08:	f7ff ffc4 	bl	8017994 <global_stdio_init.part.0>
 8017a0c:	e7f2      	b.n	80179f4 <__sinit+0xc>
 8017a0e:	bf00      	nop
 8017a10:	08017955 	.word	0x08017955
 8017a14:	200131a4 	.word	0x200131a4

08017a18 <_fwalk_sglue>:
 8017a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017a1c:	4607      	mov	r7, r0
 8017a1e:	4688      	mov	r8, r1
 8017a20:	4614      	mov	r4, r2
 8017a22:	2600      	movs	r6, #0
 8017a24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017a28:	f1b9 0901 	subs.w	r9, r9, #1
 8017a2c:	d505      	bpl.n	8017a3a <_fwalk_sglue+0x22>
 8017a2e:	6824      	ldr	r4, [r4, #0]
 8017a30:	2c00      	cmp	r4, #0
 8017a32:	d1f7      	bne.n	8017a24 <_fwalk_sglue+0xc>
 8017a34:	4630      	mov	r0, r6
 8017a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a3a:	89ab      	ldrh	r3, [r5, #12]
 8017a3c:	2b01      	cmp	r3, #1
 8017a3e:	d907      	bls.n	8017a50 <_fwalk_sglue+0x38>
 8017a40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017a44:	3301      	adds	r3, #1
 8017a46:	d003      	beq.n	8017a50 <_fwalk_sglue+0x38>
 8017a48:	4629      	mov	r1, r5
 8017a4a:	4638      	mov	r0, r7
 8017a4c:	47c0      	blx	r8
 8017a4e:	4306      	orrs	r6, r0
 8017a50:	3568      	adds	r5, #104	@ 0x68
 8017a52:	e7e9      	b.n	8017a28 <_fwalk_sglue+0x10>

08017a54 <iprintf>:
 8017a54:	b40f      	push	{r0, r1, r2, r3}
 8017a56:	b507      	push	{r0, r1, r2, lr}
 8017a58:	4906      	ldr	r1, [pc, #24]	@ (8017a74 <iprintf+0x20>)
 8017a5a:	ab04      	add	r3, sp, #16
 8017a5c:	6808      	ldr	r0, [r1, #0]
 8017a5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017a62:	6881      	ldr	r1, [r0, #8]
 8017a64:	9301      	str	r3, [sp, #4]
 8017a66:	f000 fd79 	bl	801855c <_vfiprintf_r>
 8017a6a:	b003      	add	sp, #12
 8017a6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017a70:	b004      	add	sp, #16
 8017a72:	4770      	bx	lr
 8017a74:	20000084 	.word	0x20000084

08017a78 <sniprintf>:
 8017a78:	b40c      	push	{r2, r3}
 8017a7a:	b530      	push	{r4, r5, lr}
 8017a7c:	4b18      	ldr	r3, [pc, #96]	@ (8017ae0 <sniprintf+0x68>)
 8017a7e:	1e0c      	subs	r4, r1, #0
 8017a80:	681d      	ldr	r5, [r3, #0]
 8017a82:	b09d      	sub	sp, #116	@ 0x74
 8017a84:	da08      	bge.n	8017a98 <sniprintf+0x20>
 8017a86:	238b      	movs	r3, #139	@ 0x8b
 8017a88:	602b      	str	r3, [r5, #0]
 8017a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8017a8e:	b01d      	add	sp, #116	@ 0x74
 8017a90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017a94:	b002      	add	sp, #8
 8017a96:	4770      	bx	lr
 8017a98:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017a9c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017aa0:	f04f 0300 	mov.w	r3, #0
 8017aa4:	931b      	str	r3, [sp, #108]	@ 0x6c
 8017aa6:	bf14      	ite	ne
 8017aa8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017aac:	4623      	moveq	r3, r4
 8017aae:	9304      	str	r3, [sp, #16]
 8017ab0:	9307      	str	r3, [sp, #28]
 8017ab2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017ab6:	9002      	str	r0, [sp, #8]
 8017ab8:	9006      	str	r0, [sp, #24]
 8017aba:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017abe:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8017ac0:	ab21      	add	r3, sp, #132	@ 0x84
 8017ac2:	a902      	add	r1, sp, #8
 8017ac4:	4628      	mov	r0, r5
 8017ac6:	9301      	str	r3, [sp, #4]
 8017ac8:	f000 fa52 	bl	8017f70 <_svfiprintf_r>
 8017acc:	1c43      	adds	r3, r0, #1
 8017ace:	bfbc      	itt	lt
 8017ad0:	238b      	movlt	r3, #139	@ 0x8b
 8017ad2:	602b      	strlt	r3, [r5, #0]
 8017ad4:	2c00      	cmp	r4, #0
 8017ad6:	d0da      	beq.n	8017a8e <sniprintf+0x16>
 8017ad8:	9b02      	ldr	r3, [sp, #8]
 8017ada:	2200      	movs	r2, #0
 8017adc:	701a      	strb	r2, [r3, #0]
 8017ade:	e7d6      	b.n	8017a8e <sniprintf+0x16>
 8017ae0:	20000084 	.word	0x20000084

08017ae4 <siprintf>:
 8017ae4:	b40e      	push	{r1, r2, r3}
 8017ae6:	b510      	push	{r4, lr}
 8017ae8:	b09d      	sub	sp, #116	@ 0x74
 8017aea:	ab1f      	add	r3, sp, #124	@ 0x7c
 8017aec:	9002      	str	r0, [sp, #8]
 8017aee:	9006      	str	r0, [sp, #24]
 8017af0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017af4:	480a      	ldr	r0, [pc, #40]	@ (8017b20 <siprintf+0x3c>)
 8017af6:	9107      	str	r1, [sp, #28]
 8017af8:	9104      	str	r1, [sp, #16]
 8017afa:	490a      	ldr	r1, [pc, #40]	@ (8017b24 <siprintf+0x40>)
 8017afc:	f853 2b04 	ldr.w	r2, [r3], #4
 8017b00:	9105      	str	r1, [sp, #20]
 8017b02:	2400      	movs	r4, #0
 8017b04:	a902      	add	r1, sp, #8
 8017b06:	6800      	ldr	r0, [r0, #0]
 8017b08:	9301      	str	r3, [sp, #4]
 8017b0a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8017b0c:	f000 fa30 	bl	8017f70 <_svfiprintf_r>
 8017b10:	9b02      	ldr	r3, [sp, #8]
 8017b12:	701c      	strb	r4, [r3, #0]
 8017b14:	b01d      	add	sp, #116	@ 0x74
 8017b16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b1a:	b003      	add	sp, #12
 8017b1c:	4770      	bx	lr
 8017b1e:	bf00      	nop
 8017b20:	20000084 	.word	0x20000084
 8017b24:	ffff0208 	.word	0xffff0208

08017b28 <siscanf>:
 8017b28:	b40e      	push	{r1, r2, r3}
 8017b2a:	b570      	push	{r4, r5, r6, lr}
 8017b2c:	b09d      	sub	sp, #116	@ 0x74
 8017b2e:	ac21      	add	r4, sp, #132	@ 0x84
 8017b30:	2500      	movs	r5, #0
 8017b32:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8017b36:	f854 6b04 	ldr.w	r6, [r4], #4
 8017b3a:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017b3e:	951b      	str	r5, [sp, #108]	@ 0x6c
 8017b40:	9002      	str	r0, [sp, #8]
 8017b42:	9006      	str	r0, [sp, #24]
 8017b44:	f7e8 fb6e 	bl	8000224 <strlen>
 8017b48:	4b0b      	ldr	r3, [pc, #44]	@ (8017b78 <siscanf+0x50>)
 8017b4a:	9003      	str	r0, [sp, #12]
 8017b4c:	9007      	str	r0, [sp, #28]
 8017b4e:	480b      	ldr	r0, [pc, #44]	@ (8017b7c <siscanf+0x54>)
 8017b50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017b52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017b56:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017b5a:	4632      	mov	r2, r6
 8017b5c:	4623      	mov	r3, r4
 8017b5e:	a902      	add	r1, sp, #8
 8017b60:	6800      	ldr	r0, [r0, #0]
 8017b62:	950f      	str	r5, [sp, #60]	@ 0x3c
 8017b64:	9514      	str	r5, [sp, #80]	@ 0x50
 8017b66:	9401      	str	r4, [sp, #4]
 8017b68:	f000 fb58 	bl	801821c <__ssvfiscanf_r>
 8017b6c:	b01d      	add	sp, #116	@ 0x74
 8017b6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017b72:	b003      	add	sp, #12
 8017b74:	4770      	bx	lr
 8017b76:	bf00      	nop
 8017b78:	08017ba3 	.word	0x08017ba3
 8017b7c:	20000084 	.word	0x20000084

08017b80 <__sread>:
 8017b80:	b510      	push	{r4, lr}
 8017b82:	460c      	mov	r4, r1
 8017b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b88:	f000 f8dc 	bl	8017d44 <_read_r>
 8017b8c:	2800      	cmp	r0, #0
 8017b8e:	bfab      	itete	ge
 8017b90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017b92:	89a3      	ldrhlt	r3, [r4, #12]
 8017b94:	181b      	addge	r3, r3, r0
 8017b96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017b9a:	bfac      	ite	ge
 8017b9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017b9e:	81a3      	strhlt	r3, [r4, #12]
 8017ba0:	bd10      	pop	{r4, pc}

08017ba2 <__seofread>:
 8017ba2:	2000      	movs	r0, #0
 8017ba4:	4770      	bx	lr

08017ba6 <__swrite>:
 8017ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017baa:	461f      	mov	r7, r3
 8017bac:	898b      	ldrh	r3, [r1, #12]
 8017bae:	05db      	lsls	r3, r3, #23
 8017bb0:	4605      	mov	r5, r0
 8017bb2:	460c      	mov	r4, r1
 8017bb4:	4616      	mov	r6, r2
 8017bb6:	d505      	bpl.n	8017bc4 <__swrite+0x1e>
 8017bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017bbc:	2302      	movs	r3, #2
 8017bbe:	2200      	movs	r2, #0
 8017bc0:	f000 f8ae 	bl	8017d20 <_lseek_r>
 8017bc4:	89a3      	ldrh	r3, [r4, #12]
 8017bc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017bca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017bce:	81a3      	strh	r3, [r4, #12]
 8017bd0:	4632      	mov	r2, r6
 8017bd2:	463b      	mov	r3, r7
 8017bd4:	4628      	mov	r0, r5
 8017bd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017bda:	f000 b8d5 	b.w	8017d88 <_write_r>

08017bde <__sseek>:
 8017bde:	b510      	push	{r4, lr}
 8017be0:	460c      	mov	r4, r1
 8017be2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017be6:	f000 f89b 	bl	8017d20 <_lseek_r>
 8017bea:	1c43      	adds	r3, r0, #1
 8017bec:	89a3      	ldrh	r3, [r4, #12]
 8017bee:	bf15      	itete	ne
 8017bf0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017bf2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017bf6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017bfa:	81a3      	strheq	r3, [r4, #12]
 8017bfc:	bf18      	it	ne
 8017bfe:	81a3      	strhne	r3, [r4, #12]
 8017c00:	bd10      	pop	{r4, pc}

08017c02 <__sclose>:
 8017c02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c06:	f000 b87b 	b.w	8017d00 <_close_r>

08017c0a <_vsniprintf_r>:
 8017c0a:	b530      	push	{r4, r5, lr}
 8017c0c:	4614      	mov	r4, r2
 8017c0e:	2c00      	cmp	r4, #0
 8017c10:	b09b      	sub	sp, #108	@ 0x6c
 8017c12:	4605      	mov	r5, r0
 8017c14:	461a      	mov	r2, r3
 8017c16:	da05      	bge.n	8017c24 <_vsniprintf_r+0x1a>
 8017c18:	238b      	movs	r3, #139	@ 0x8b
 8017c1a:	6003      	str	r3, [r0, #0]
 8017c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8017c20:	b01b      	add	sp, #108	@ 0x6c
 8017c22:	bd30      	pop	{r4, r5, pc}
 8017c24:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017c28:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017c2c:	f04f 0300 	mov.w	r3, #0
 8017c30:	9319      	str	r3, [sp, #100]	@ 0x64
 8017c32:	bf14      	ite	ne
 8017c34:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017c38:	4623      	moveq	r3, r4
 8017c3a:	9302      	str	r3, [sp, #8]
 8017c3c:	9305      	str	r3, [sp, #20]
 8017c3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017c42:	9100      	str	r1, [sp, #0]
 8017c44:	9104      	str	r1, [sp, #16]
 8017c46:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017c4a:	4669      	mov	r1, sp
 8017c4c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017c4e:	f000 f98f 	bl	8017f70 <_svfiprintf_r>
 8017c52:	1c43      	adds	r3, r0, #1
 8017c54:	bfbc      	itt	lt
 8017c56:	238b      	movlt	r3, #139	@ 0x8b
 8017c58:	602b      	strlt	r3, [r5, #0]
 8017c5a:	2c00      	cmp	r4, #0
 8017c5c:	d0e0      	beq.n	8017c20 <_vsniprintf_r+0x16>
 8017c5e:	9b00      	ldr	r3, [sp, #0]
 8017c60:	2200      	movs	r2, #0
 8017c62:	701a      	strb	r2, [r3, #0]
 8017c64:	e7dc      	b.n	8017c20 <_vsniprintf_r+0x16>
	...

08017c68 <vsniprintf>:
 8017c68:	b507      	push	{r0, r1, r2, lr}
 8017c6a:	9300      	str	r3, [sp, #0]
 8017c6c:	4613      	mov	r3, r2
 8017c6e:	460a      	mov	r2, r1
 8017c70:	4601      	mov	r1, r0
 8017c72:	4803      	ldr	r0, [pc, #12]	@ (8017c80 <vsniprintf+0x18>)
 8017c74:	6800      	ldr	r0, [r0, #0]
 8017c76:	f7ff ffc8 	bl	8017c0a <_vsniprintf_r>
 8017c7a:	b003      	add	sp, #12
 8017c7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017c80:	20000084 	.word	0x20000084

08017c84 <memset>:
 8017c84:	4402      	add	r2, r0
 8017c86:	4603      	mov	r3, r0
 8017c88:	4293      	cmp	r3, r2
 8017c8a:	d100      	bne.n	8017c8e <memset+0xa>
 8017c8c:	4770      	bx	lr
 8017c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8017c92:	e7f9      	b.n	8017c88 <memset+0x4>

08017c94 <strchr>:
 8017c94:	b2c9      	uxtb	r1, r1
 8017c96:	4603      	mov	r3, r0
 8017c98:	4618      	mov	r0, r3
 8017c9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017c9e:	b112      	cbz	r2, 8017ca6 <strchr+0x12>
 8017ca0:	428a      	cmp	r2, r1
 8017ca2:	d1f9      	bne.n	8017c98 <strchr+0x4>
 8017ca4:	4770      	bx	lr
 8017ca6:	2900      	cmp	r1, #0
 8017ca8:	bf18      	it	ne
 8017caa:	2000      	movne	r0, #0
 8017cac:	4770      	bx	lr

08017cae <strncpy>:
 8017cae:	b510      	push	{r4, lr}
 8017cb0:	3901      	subs	r1, #1
 8017cb2:	4603      	mov	r3, r0
 8017cb4:	b132      	cbz	r2, 8017cc4 <strncpy+0x16>
 8017cb6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017cba:	f803 4b01 	strb.w	r4, [r3], #1
 8017cbe:	3a01      	subs	r2, #1
 8017cc0:	2c00      	cmp	r4, #0
 8017cc2:	d1f7      	bne.n	8017cb4 <strncpy+0x6>
 8017cc4:	441a      	add	r2, r3
 8017cc6:	2100      	movs	r1, #0
 8017cc8:	4293      	cmp	r3, r2
 8017cca:	d100      	bne.n	8017cce <strncpy+0x20>
 8017ccc:	bd10      	pop	{r4, pc}
 8017cce:	f803 1b01 	strb.w	r1, [r3], #1
 8017cd2:	e7f9      	b.n	8017cc8 <strncpy+0x1a>

08017cd4 <strstr>:
 8017cd4:	780a      	ldrb	r2, [r1, #0]
 8017cd6:	b570      	push	{r4, r5, r6, lr}
 8017cd8:	b96a      	cbnz	r2, 8017cf6 <strstr+0x22>
 8017cda:	bd70      	pop	{r4, r5, r6, pc}
 8017cdc:	429a      	cmp	r2, r3
 8017cde:	d109      	bne.n	8017cf4 <strstr+0x20>
 8017ce0:	460c      	mov	r4, r1
 8017ce2:	4605      	mov	r5, r0
 8017ce4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	d0f6      	beq.n	8017cda <strstr+0x6>
 8017cec:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8017cf0:	429e      	cmp	r6, r3
 8017cf2:	d0f7      	beq.n	8017ce4 <strstr+0x10>
 8017cf4:	3001      	adds	r0, #1
 8017cf6:	7803      	ldrb	r3, [r0, #0]
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	d1ef      	bne.n	8017cdc <strstr+0x8>
 8017cfc:	4618      	mov	r0, r3
 8017cfe:	e7ec      	b.n	8017cda <strstr+0x6>

08017d00 <_close_r>:
 8017d00:	b538      	push	{r3, r4, r5, lr}
 8017d02:	4d06      	ldr	r5, [pc, #24]	@ (8017d1c <_close_r+0x1c>)
 8017d04:	2300      	movs	r3, #0
 8017d06:	4604      	mov	r4, r0
 8017d08:	4608      	mov	r0, r1
 8017d0a:	602b      	str	r3, [r5, #0]
 8017d0c:	f7ed fc89 	bl	8005622 <_close>
 8017d10:	1c43      	adds	r3, r0, #1
 8017d12:	d102      	bne.n	8017d1a <_close_r+0x1a>
 8017d14:	682b      	ldr	r3, [r5, #0]
 8017d16:	b103      	cbz	r3, 8017d1a <_close_r+0x1a>
 8017d18:	6023      	str	r3, [r4, #0]
 8017d1a:	bd38      	pop	{r3, r4, r5, pc}
 8017d1c:	200131a8 	.word	0x200131a8

08017d20 <_lseek_r>:
 8017d20:	b538      	push	{r3, r4, r5, lr}
 8017d22:	4d07      	ldr	r5, [pc, #28]	@ (8017d40 <_lseek_r+0x20>)
 8017d24:	4604      	mov	r4, r0
 8017d26:	4608      	mov	r0, r1
 8017d28:	4611      	mov	r1, r2
 8017d2a:	2200      	movs	r2, #0
 8017d2c:	602a      	str	r2, [r5, #0]
 8017d2e:	461a      	mov	r2, r3
 8017d30:	f7ed fc9e 	bl	8005670 <_lseek>
 8017d34:	1c43      	adds	r3, r0, #1
 8017d36:	d102      	bne.n	8017d3e <_lseek_r+0x1e>
 8017d38:	682b      	ldr	r3, [r5, #0]
 8017d3a:	b103      	cbz	r3, 8017d3e <_lseek_r+0x1e>
 8017d3c:	6023      	str	r3, [r4, #0]
 8017d3e:	bd38      	pop	{r3, r4, r5, pc}
 8017d40:	200131a8 	.word	0x200131a8

08017d44 <_read_r>:
 8017d44:	b538      	push	{r3, r4, r5, lr}
 8017d46:	4d07      	ldr	r5, [pc, #28]	@ (8017d64 <_read_r+0x20>)
 8017d48:	4604      	mov	r4, r0
 8017d4a:	4608      	mov	r0, r1
 8017d4c:	4611      	mov	r1, r2
 8017d4e:	2200      	movs	r2, #0
 8017d50:	602a      	str	r2, [r5, #0]
 8017d52:	461a      	mov	r2, r3
 8017d54:	f7ed fc2c 	bl	80055b0 <_read>
 8017d58:	1c43      	adds	r3, r0, #1
 8017d5a:	d102      	bne.n	8017d62 <_read_r+0x1e>
 8017d5c:	682b      	ldr	r3, [r5, #0]
 8017d5e:	b103      	cbz	r3, 8017d62 <_read_r+0x1e>
 8017d60:	6023      	str	r3, [r4, #0]
 8017d62:	bd38      	pop	{r3, r4, r5, pc}
 8017d64:	200131a8 	.word	0x200131a8

08017d68 <_sbrk_r>:
 8017d68:	b538      	push	{r3, r4, r5, lr}
 8017d6a:	4d06      	ldr	r5, [pc, #24]	@ (8017d84 <_sbrk_r+0x1c>)
 8017d6c:	2300      	movs	r3, #0
 8017d6e:	4604      	mov	r4, r0
 8017d70:	4608      	mov	r0, r1
 8017d72:	602b      	str	r3, [r5, #0]
 8017d74:	f7ed fc8a 	bl	800568c <_sbrk>
 8017d78:	1c43      	adds	r3, r0, #1
 8017d7a:	d102      	bne.n	8017d82 <_sbrk_r+0x1a>
 8017d7c:	682b      	ldr	r3, [r5, #0]
 8017d7e:	b103      	cbz	r3, 8017d82 <_sbrk_r+0x1a>
 8017d80:	6023      	str	r3, [r4, #0]
 8017d82:	bd38      	pop	{r3, r4, r5, pc}
 8017d84:	200131a8 	.word	0x200131a8

08017d88 <_write_r>:
 8017d88:	b538      	push	{r3, r4, r5, lr}
 8017d8a:	4d07      	ldr	r5, [pc, #28]	@ (8017da8 <_write_r+0x20>)
 8017d8c:	4604      	mov	r4, r0
 8017d8e:	4608      	mov	r0, r1
 8017d90:	4611      	mov	r1, r2
 8017d92:	2200      	movs	r2, #0
 8017d94:	602a      	str	r2, [r5, #0]
 8017d96:	461a      	mov	r2, r3
 8017d98:	f7ed fc27 	bl	80055ea <_write>
 8017d9c:	1c43      	adds	r3, r0, #1
 8017d9e:	d102      	bne.n	8017da6 <_write_r+0x1e>
 8017da0:	682b      	ldr	r3, [r5, #0]
 8017da2:	b103      	cbz	r3, 8017da6 <_write_r+0x1e>
 8017da4:	6023      	str	r3, [r4, #0]
 8017da6:	bd38      	pop	{r3, r4, r5, pc}
 8017da8:	200131a8 	.word	0x200131a8

08017dac <__errno>:
 8017dac:	4b01      	ldr	r3, [pc, #4]	@ (8017db4 <__errno+0x8>)
 8017dae:	6818      	ldr	r0, [r3, #0]
 8017db0:	4770      	bx	lr
 8017db2:	bf00      	nop
 8017db4:	20000084 	.word	0x20000084

08017db8 <__libc_init_array>:
 8017db8:	b570      	push	{r4, r5, r6, lr}
 8017dba:	4d0d      	ldr	r5, [pc, #52]	@ (8017df0 <__libc_init_array+0x38>)
 8017dbc:	4c0d      	ldr	r4, [pc, #52]	@ (8017df4 <__libc_init_array+0x3c>)
 8017dbe:	1b64      	subs	r4, r4, r5
 8017dc0:	10a4      	asrs	r4, r4, #2
 8017dc2:	2600      	movs	r6, #0
 8017dc4:	42a6      	cmp	r6, r4
 8017dc6:	d109      	bne.n	8017ddc <__libc_init_array+0x24>
 8017dc8:	4d0b      	ldr	r5, [pc, #44]	@ (8017df8 <__libc_init_array+0x40>)
 8017dca:	4c0c      	ldr	r4, [pc, #48]	@ (8017dfc <__libc_init_array+0x44>)
 8017dcc:	f001 fb2c 	bl	8019428 <_init>
 8017dd0:	1b64      	subs	r4, r4, r5
 8017dd2:	10a4      	asrs	r4, r4, #2
 8017dd4:	2600      	movs	r6, #0
 8017dd6:	42a6      	cmp	r6, r4
 8017dd8:	d105      	bne.n	8017de6 <__libc_init_array+0x2e>
 8017dda:	bd70      	pop	{r4, r5, r6, pc}
 8017ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8017de0:	4798      	blx	r3
 8017de2:	3601      	adds	r6, #1
 8017de4:	e7ee      	b.n	8017dc4 <__libc_init_array+0xc>
 8017de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8017dea:	4798      	blx	r3
 8017dec:	3601      	adds	r6, #1
 8017dee:	e7f2      	b.n	8017dd6 <__libc_init_array+0x1e>
 8017df0:	0801cf10 	.word	0x0801cf10
 8017df4:	0801cf10 	.word	0x0801cf10
 8017df8:	0801cf10 	.word	0x0801cf10
 8017dfc:	0801cf14 	.word	0x0801cf14

08017e00 <__retarget_lock_init_recursive>:
 8017e00:	4770      	bx	lr

08017e02 <__retarget_lock_acquire_recursive>:
 8017e02:	4770      	bx	lr

08017e04 <__retarget_lock_release_recursive>:
 8017e04:	4770      	bx	lr

08017e06 <memcpy>:
 8017e06:	440a      	add	r2, r1
 8017e08:	4291      	cmp	r1, r2
 8017e0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8017e0e:	d100      	bne.n	8017e12 <memcpy+0xc>
 8017e10:	4770      	bx	lr
 8017e12:	b510      	push	{r4, lr}
 8017e14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017e18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017e1c:	4291      	cmp	r1, r2
 8017e1e:	d1f9      	bne.n	8017e14 <memcpy+0xe>
 8017e20:	bd10      	pop	{r4, pc}
	...

08017e24 <_free_r>:
 8017e24:	b538      	push	{r3, r4, r5, lr}
 8017e26:	4605      	mov	r5, r0
 8017e28:	2900      	cmp	r1, #0
 8017e2a:	d041      	beq.n	8017eb0 <_free_r+0x8c>
 8017e2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017e30:	1f0c      	subs	r4, r1, #4
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	bfb8      	it	lt
 8017e36:	18e4      	addlt	r4, r4, r3
 8017e38:	f7ff fd3e 	bl	80178b8 <__malloc_lock>
 8017e3c:	4a1d      	ldr	r2, [pc, #116]	@ (8017eb4 <_free_r+0x90>)
 8017e3e:	6813      	ldr	r3, [r2, #0]
 8017e40:	b933      	cbnz	r3, 8017e50 <_free_r+0x2c>
 8017e42:	6063      	str	r3, [r4, #4]
 8017e44:	6014      	str	r4, [r2, #0]
 8017e46:	4628      	mov	r0, r5
 8017e48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017e4c:	f7ff bd3a 	b.w	80178c4 <__malloc_unlock>
 8017e50:	42a3      	cmp	r3, r4
 8017e52:	d908      	bls.n	8017e66 <_free_r+0x42>
 8017e54:	6820      	ldr	r0, [r4, #0]
 8017e56:	1821      	adds	r1, r4, r0
 8017e58:	428b      	cmp	r3, r1
 8017e5a:	bf01      	itttt	eq
 8017e5c:	6819      	ldreq	r1, [r3, #0]
 8017e5e:	685b      	ldreq	r3, [r3, #4]
 8017e60:	1809      	addeq	r1, r1, r0
 8017e62:	6021      	streq	r1, [r4, #0]
 8017e64:	e7ed      	b.n	8017e42 <_free_r+0x1e>
 8017e66:	461a      	mov	r2, r3
 8017e68:	685b      	ldr	r3, [r3, #4]
 8017e6a:	b10b      	cbz	r3, 8017e70 <_free_r+0x4c>
 8017e6c:	42a3      	cmp	r3, r4
 8017e6e:	d9fa      	bls.n	8017e66 <_free_r+0x42>
 8017e70:	6811      	ldr	r1, [r2, #0]
 8017e72:	1850      	adds	r0, r2, r1
 8017e74:	42a0      	cmp	r0, r4
 8017e76:	d10b      	bne.n	8017e90 <_free_r+0x6c>
 8017e78:	6820      	ldr	r0, [r4, #0]
 8017e7a:	4401      	add	r1, r0
 8017e7c:	1850      	adds	r0, r2, r1
 8017e7e:	4283      	cmp	r3, r0
 8017e80:	6011      	str	r1, [r2, #0]
 8017e82:	d1e0      	bne.n	8017e46 <_free_r+0x22>
 8017e84:	6818      	ldr	r0, [r3, #0]
 8017e86:	685b      	ldr	r3, [r3, #4]
 8017e88:	6053      	str	r3, [r2, #4]
 8017e8a:	4408      	add	r0, r1
 8017e8c:	6010      	str	r0, [r2, #0]
 8017e8e:	e7da      	b.n	8017e46 <_free_r+0x22>
 8017e90:	d902      	bls.n	8017e98 <_free_r+0x74>
 8017e92:	230c      	movs	r3, #12
 8017e94:	602b      	str	r3, [r5, #0]
 8017e96:	e7d6      	b.n	8017e46 <_free_r+0x22>
 8017e98:	6820      	ldr	r0, [r4, #0]
 8017e9a:	1821      	adds	r1, r4, r0
 8017e9c:	428b      	cmp	r3, r1
 8017e9e:	bf04      	itt	eq
 8017ea0:	6819      	ldreq	r1, [r3, #0]
 8017ea2:	685b      	ldreq	r3, [r3, #4]
 8017ea4:	6063      	str	r3, [r4, #4]
 8017ea6:	bf04      	itt	eq
 8017ea8:	1809      	addeq	r1, r1, r0
 8017eaa:	6021      	streq	r1, [r4, #0]
 8017eac:	6054      	str	r4, [r2, #4]
 8017eae:	e7ca      	b.n	8017e46 <_free_r+0x22>
 8017eb0:	bd38      	pop	{r3, r4, r5, pc}
 8017eb2:	bf00      	nop
 8017eb4:	20013068 	.word	0x20013068

08017eb8 <__ssputs_r>:
 8017eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ebc:	688e      	ldr	r6, [r1, #8]
 8017ebe:	461f      	mov	r7, r3
 8017ec0:	42be      	cmp	r6, r7
 8017ec2:	680b      	ldr	r3, [r1, #0]
 8017ec4:	4682      	mov	sl, r0
 8017ec6:	460c      	mov	r4, r1
 8017ec8:	4690      	mov	r8, r2
 8017eca:	d82d      	bhi.n	8017f28 <__ssputs_r+0x70>
 8017ecc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017ed0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017ed4:	d026      	beq.n	8017f24 <__ssputs_r+0x6c>
 8017ed6:	6965      	ldr	r5, [r4, #20]
 8017ed8:	6909      	ldr	r1, [r1, #16]
 8017eda:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017ede:	eba3 0901 	sub.w	r9, r3, r1
 8017ee2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017ee6:	1c7b      	adds	r3, r7, #1
 8017ee8:	444b      	add	r3, r9
 8017eea:	106d      	asrs	r5, r5, #1
 8017eec:	429d      	cmp	r5, r3
 8017eee:	bf38      	it	cc
 8017ef0:	461d      	movcc	r5, r3
 8017ef2:	0553      	lsls	r3, r2, #21
 8017ef4:	d527      	bpl.n	8017f46 <__ssputs_r+0x8e>
 8017ef6:	4629      	mov	r1, r5
 8017ef8:	f7ff fc5e 	bl	80177b8 <_malloc_r>
 8017efc:	4606      	mov	r6, r0
 8017efe:	b360      	cbz	r0, 8017f5a <__ssputs_r+0xa2>
 8017f00:	6921      	ldr	r1, [r4, #16]
 8017f02:	464a      	mov	r2, r9
 8017f04:	f7ff ff7f 	bl	8017e06 <memcpy>
 8017f08:	89a3      	ldrh	r3, [r4, #12]
 8017f0a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017f0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017f12:	81a3      	strh	r3, [r4, #12]
 8017f14:	6126      	str	r6, [r4, #16]
 8017f16:	6165      	str	r5, [r4, #20]
 8017f18:	444e      	add	r6, r9
 8017f1a:	eba5 0509 	sub.w	r5, r5, r9
 8017f1e:	6026      	str	r6, [r4, #0]
 8017f20:	60a5      	str	r5, [r4, #8]
 8017f22:	463e      	mov	r6, r7
 8017f24:	42be      	cmp	r6, r7
 8017f26:	d900      	bls.n	8017f2a <__ssputs_r+0x72>
 8017f28:	463e      	mov	r6, r7
 8017f2a:	6820      	ldr	r0, [r4, #0]
 8017f2c:	4632      	mov	r2, r6
 8017f2e:	4641      	mov	r1, r8
 8017f30:	f001 f8ba 	bl	80190a8 <memmove>
 8017f34:	68a3      	ldr	r3, [r4, #8]
 8017f36:	1b9b      	subs	r3, r3, r6
 8017f38:	60a3      	str	r3, [r4, #8]
 8017f3a:	6823      	ldr	r3, [r4, #0]
 8017f3c:	4433      	add	r3, r6
 8017f3e:	6023      	str	r3, [r4, #0]
 8017f40:	2000      	movs	r0, #0
 8017f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f46:	462a      	mov	r2, r5
 8017f48:	f001 f8c8 	bl	80190dc <_realloc_r>
 8017f4c:	4606      	mov	r6, r0
 8017f4e:	2800      	cmp	r0, #0
 8017f50:	d1e0      	bne.n	8017f14 <__ssputs_r+0x5c>
 8017f52:	6921      	ldr	r1, [r4, #16]
 8017f54:	4650      	mov	r0, sl
 8017f56:	f7ff ff65 	bl	8017e24 <_free_r>
 8017f5a:	230c      	movs	r3, #12
 8017f5c:	f8ca 3000 	str.w	r3, [sl]
 8017f60:	89a3      	ldrh	r3, [r4, #12]
 8017f62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017f66:	81a3      	strh	r3, [r4, #12]
 8017f68:	f04f 30ff 	mov.w	r0, #4294967295
 8017f6c:	e7e9      	b.n	8017f42 <__ssputs_r+0x8a>
	...

08017f70 <_svfiprintf_r>:
 8017f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f74:	4698      	mov	r8, r3
 8017f76:	898b      	ldrh	r3, [r1, #12]
 8017f78:	061b      	lsls	r3, r3, #24
 8017f7a:	b09d      	sub	sp, #116	@ 0x74
 8017f7c:	4607      	mov	r7, r0
 8017f7e:	460d      	mov	r5, r1
 8017f80:	4614      	mov	r4, r2
 8017f82:	d510      	bpl.n	8017fa6 <_svfiprintf_r+0x36>
 8017f84:	690b      	ldr	r3, [r1, #16]
 8017f86:	b973      	cbnz	r3, 8017fa6 <_svfiprintf_r+0x36>
 8017f88:	2140      	movs	r1, #64	@ 0x40
 8017f8a:	f7ff fc15 	bl	80177b8 <_malloc_r>
 8017f8e:	6028      	str	r0, [r5, #0]
 8017f90:	6128      	str	r0, [r5, #16]
 8017f92:	b930      	cbnz	r0, 8017fa2 <_svfiprintf_r+0x32>
 8017f94:	230c      	movs	r3, #12
 8017f96:	603b      	str	r3, [r7, #0]
 8017f98:	f04f 30ff 	mov.w	r0, #4294967295
 8017f9c:	b01d      	add	sp, #116	@ 0x74
 8017f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fa2:	2340      	movs	r3, #64	@ 0x40
 8017fa4:	616b      	str	r3, [r5, #20]
 8017fa6:	2300      	movs	r3, #0
 8017fa8:	9309      	str	r3, [sp, #36]	@ 0x24
 8017faa:	2320      	movs	r3, #32
 8017fac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017fb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8017fb4:	2330      	movs	r3, #48	@ 0x30
 8017fb6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8018154 <_svfiprintf_r+0x1e4>
 8017fba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017fbe:	f04f 0901 	mov.w	r9, #1
 8017fc2:	4623      	mov	r3, r4
 8017fc4:	469a      	mov	sl, r3
 8017fc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017fca:	b10a      	cbz	r2, 8017fd0 <_svfiprintf_r+0x60>
 8017fcc:	2a25      	cmp	r2, #37	@ 0x25
 8017fce:	d1f9      	bne.n	8017fc4 <_svfiprintf_r+0x54>
 8017fd0:	ebba 0b04 	subs.w	fp, sl, r4
 8017fd4:	d00b      	beq.n	8017fee <_svfiprintf_r+0x7e>
 8017fd6:	465b      	mov	r3, fp
 8017fd8:	4622      	mov	r2, r4
 8017fda:	4629      	mov	r1, r5
 8017fdc:	4638      	mov	r0, r7
 8017fde:	f7ff ff6b 	bl	8017eb8 <__ssputs_r>
 8017fe2:	3001      	adds	r0, #1
 8017fe4:	f000 80a7 	beq.w	8018136 <_svfiprintf_r+0x1c6>
 8017fe8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017fea:	445a      	add	r2, fp
 8017fec:	9209      	str	r2, [sp, #36]	@ 0x24
 8017fee:	f89a 3000 	ldrb.w	r3, [sl]
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	f000 809f 	beq.w	8018136 <_svfiprintf_r+0x1c6>
 8017ff8:	2300      	movs	r3, #0
 8017ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8017ffe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018002:	f10a 0a01 	add.w	sl, sl, #1
 8018006:	9304      	str	r3, [sp, #16]
 8018008:	9307      	str	r3, [sp, #28]
 801800a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801800e:	931a      	str	r3, [sp, #104]	@ 0x68
 8018010:	4654      	mov	r4, sl
 8018012:	2205      	movs	r2, #5
 8018014:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018018:	484e      	ldr	r0, [pc, #312]	@ (8018154 <_svfiprintf_r+0x1e4>)
 801801a:	f7e8 f911 	bl	8000240 <memchr>
 801801e:	9a04      	ldr	r2, [sp, #16]
 8018020:	b9d8      	cbnz	r0, 801805a <_svfiprintf_r+0xea>
 8018022:	06d0      	lsls	r0, r2, #27
 8018024:	bf44      	itt	mi
 8018026:	2320      	movmi	r3, #32
 8018028:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801802c:	0711      	lsls	r1, r2, #28
 801802e:	bf44      	itt	mi
 8018030:	232b      	movmi	r3, #43	@ 0x2b
 8018032:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018036:	f89a 3000 	ldrb.w	r3, [sl]
 801803a:	2b2a      	cmp	r3, #42	@ 0x2a
 801803c:	d015      	beq.n	801806a <_svfiprintf_r+0xfa>
 801803e:	9a07      	ldr	r2, [sp, #28]
 8018040:	4654      	mov	r4, sl
 8018042:	2000      	movs	r0, #0
 8018044:	f04f 0c0a 	mov.w	ip, #10
 8018048:	4621      	mov	r1, r4
 801804a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801804e:	3b30      	subs	r3, #48	@ 0x30
 8018050:	2b09      	cmp	r3, #9
 8018052:	d94b      	bls.n	80180ec <_svfiprintf_r+0x17c>
 8018054:	b1b0      	cbz	r0, 8018084 <_svfiprintf_r+0x114>
 8018056:	9207      	str	r2, [sp, #28]
 8018058:	e014      	b.n	8018084 <_svfiprintf_r+0x114>
 801805a:	eba0 0308 	sub.w	r3, r0, r8
 801805e:	fa09 f303 	lsl.w	r3, r9, r3
 8018062:	4313      	orrs	r3, r2
 8018064:	9304      	str	r3, [sp, #16]
 8018066:	46a2      	mov	sl, r4
 8018068:	e7d2      	b.n	8018010 <_svfiprintf_r+0xa0>
 801806a:	9b03      	ldr	r3, [sp, #12]
 801806c:	1d19      	adds	r1, r3, #4
 801806e:	681b      	ldr	r3, [r3, #0]
 8018070:	9103      	str	r1, [sp, #12]
 8018072:	2b00      	cmp	r3, #0
 8018074:	bfbb      	ittet	lt
 8018076:	425b      	neglt	r3, r3
 8018078:	f042 0202 	orrlt.w	r2, r2, #2
 801807c:	9307      	strge	r3, [sp, #28]
 801807e:	9307      	strlt	r3, [sp, #28]
 8018080:	bfb8      	it	lt
 8018082:	9204      	strlt	r2, [sp, #16]
 8018084:	7823      	ldrb	r3, [r4, #0]
 8018086:	2b2e      	cmp	r3, #46	@ 0x2e
 8018088:	d10a      	bne.n	80180a0 <_svfiprintf_r+0x130>
 801808a:	7863      	ldrb	r3, [r4, #1]
 801808c:	2b2a      	cmp	r3, #42	@ 0x2a
 801808e:	d132      	bne.n	80180f6 <_svfiprintf_r+0x186>
 8018090:	9b03      	ldr	r3, [sp, #12]
 8018092:	1d1a      	adds	r2, r3, #4
 8018094:	681b      	ldr	r3, [r3, #0]
 8018096:	9203      	str	r2, [sp, #12]
 8018098:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801809c:	3402      	adds	r4, #2
 801809e:	9305      	str	r3, [sp, #20]
 80180a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8018164 <_svfiprintf_r+0x1f4>
 80180a4:	7821      	ldrb	r1, [r4, #0]
 80180a6:	2203      	movs	r2, #3
 80180a8:	4650      	mov	r0, sl
 80180aa:	f7e8 f8c9 	bl	8000240 <memchr>
 80180ae:	b138      	cbz	r0, 80180c0 <_svfiprintf_r+0x150>
 80180b0:	9b04      	ldr	r3, [sp, #16]
 80180b2:	eba0 000a 	sub.w	r0, r0, sl
 80180b6:	2240      	movs	r2, #64	@ 0x40
 80180b8:	4082      	lsls	r2, r0
 80180ba:	4313      	orrs	r3, r2
 80180bc:	3401      	adds	r4, #1
 80180be:	9304      	str	r3, [sp, #16]
 80180c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80180c4:	4824      	ldr	r0, [pc, #144]	@ (8018158 <_svfiprintf_r+0x1e8>)
 80180c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80180ca:	2206      	movs	r2, #6
 80180cc:	f7e8 f8b8 	bl	8000240 <memchr>
 80180d0:	2800      	cmp	r0, #0
 80180d2:	d036      	beq.n	8018142 <_svfiprintf_r+0x1d2>
 80180d4:	4b21      	ldr	r3, [pc, #132]	@ (801815c <_svfiprintf_r+0x1ec>)
 80180d6:	bb1b      	cbnz	r3, 8018120 <_svfiprintf_r+0x1b0>
 80180d8:	9b03      	ldr	r3, [sp, #12]
 80180da:	3307      	adds	r3, #7
 80180dc:	f023 0307 	bic.w	r3, r3, #7
 80180e0:	3308      	adds	r3, #8
 80180e2:	9303      	str	r3, [sp, #12]
 80180e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80180e6:	4433      	add	r3, r6
 80180e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80180ea:	e76a      	b.n	8017fc2 <_svfiprintf_r+0x52>
 80180ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80180f0:	460c      	mov	r4, r1
 80180f2:	2001      	movs	r0, #1
 80180f4:	e7a8      	b.n	8018048 <_svfiprintf_r+0xd8>
 80180f6:	2300      	movs	r3, #0
 80180f8:	3401      	adds	r4, #1
 80180fa:	9305      	str	r3, [sp, #20]
 80180fc:	4619      	mov	r1, r3
 80180fe:	f04f 0c0a 	mov.w	ip, #10
 8018102:	4620      	mov	r0, r4
 8018104:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018108:	3a30      	subs	r2, #48	@ 0x30
 801810a:	2a09      	cmp	r2, #9
 801810c:	d903      	bls.n	8018116 <_svfiprintf_r+0x1a6>
 801810e:	2b00      	cmp	r3, #0
 8018110:	d0c6      	beq.n	80180a0 <_svfiprintf_r+0x130>
 8018112:	9105      	str	r1, [sp, #20]
 8018114:	e7c4      	b.n	80180a0 <_svfiprintf_r+0x130>
 8018116:	fb0c 2101 	mla	r1, ip, r1, r2
 801811a:	4604      	mov	r4, r0
 801811c:	2301      	movs	r3, #1
 801811e:	e7f0      	b.n	8018102 <_svfiprintf_r+0x192>
 8018120:	ab03      	add	r3, sp, #12
 8018122:	9300      	str	r3, [sp, #0]
 8018124:	462a      	mov	r2, r5
 8018126:	4b0e      	ldr	r3, [pc, #56]	@ (8018160 <_svfiprintf_r+0x1f0>)
 8018128:	a904      	add	r1, sp, #16
 801812a:	4638      	mov	r0, r7
 801812c:	f3af 8000 	nop.w
 8018130:	1c42      	adds	r2, r0, #1
 8018132:	4606      	mov	r6, r0
 8018134:	d1d6      	bne.n	80180e4 <_svfiprintf_r+0x174>
 8018136:	89ab      	ldrh	r3, [r5, #12]
 8018138:	065b      	lsls	r3, r3, #25
 801813a:	f53f af2d 	bmi.w	8017f98 <_svfiprintf_r+0x28>
 801813e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018140:	e72c      	b.n	8017f9c <_svfiprintf_r+0x2c>
 8018142:	ab03      	add	r3, sp, #12
 8018144:	9300      	str	r3, [sp, #0]
 8018146:	462a      	mov	r2, r5
 8018148:	4b05      	ldr	r3, [pc, #20]	@ (8018160 <_svfiprintf_r+0x1f0>)
 801814a:	a904      	add	r1, sp, #16
 801814c:	4638      	mov	r0, r7
 801814e:	f000 fb8b 	bl	8018868 <_printf_i>
 8018152:	e7ed      	b.n	8018130 <_svfiprintf_r+0x1c0>
 8018154:	0801cdb6 	.word	0x0801cdb6
 8018158:	0801cdc0 	.word	0x0801cdc0
 801815c:	00000000 	.word	0x00000000
 8018160:	08017eb9 	.word	0x08017eb9
 8018164:	0801cdbc 	.word	0x0801cdbc

08018168 <_sungetc_r>:
 8018168:	b538      	push	{r3, r4, r5, lr}
 801816a:	1c4b      	adds	r3, r1, #1
 801816c:	4614      	mov	r4, r2
 801816e:	d103      	bne.n	8018178 <_sungetc_r+0x10>
 8018170:	f04f 35ff 	mov.w	r5, #4294967295
 8018174:	4628      	mov	r0, r5
 8018176:	bd38      	pop	{r3, r4, r5, pc}
 8018178:	8993      	ldrh	r3, [r2, #12]
 801817a:	f023 0320 	bic.w	r3, r3, #32
 801817e:	8193      	strh	r3, [r2, #12]
 8018180:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018182:	6852      	ldr	r2, [r2, #4]
 8018184:	b2cd      	uxtb	r5, r1
 8018186:	b18b      	cbz	r3, 80181ac <_sungetc_r+0x44>
 8018188:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801818a:	4293      	cmp	r3, r2
 801818c:	dd08      	ble.n	80181a0 <_sungetc_r+0x38>
 801818e:	6823      	ldr	r3, [r4, #0]
 8018190:	1e5a      	subs	r2, r3, #1
 8018192:	6022      	str	r2, [r4, #0]
 8018194:	f803 5c01 	strb.w	r5, [r3, #-1]
 8018198:	6863      	ldr	r3, [r4, #4]
 801819a:	3301      	adds	r3, #1
 801819c:	6063      	str	r3, [r4, #4]
 801819e:	e7e9      	b.n	8018174 <_sungetc_r+0xc>
 80181a0:	4621      	mov	r1, r4
 80181a2:	f000 feb2 	bl	8018f0a <__submore>
 80181a6:	2800      	cmp	r0, #0
 80181a8:	d0f1      	beq.n	801818e <_sungetc_r+0x26>
 80181aa:	e7e1      	b.n	8018170 <_sungetc_r+0x8>
 80181ac:	6921      	ldr	r1, [r4, #16]
 80181ae:	6823      	ldr	r3, [r4, #0]
 80181b0:	b151      	cbz	r1, 80181c8 <_sungetc_r+0x60>
 80181b2:	4299      	cmp	r1, r3
 80181b4:	d208      	bcs.n	80181c8 <_sungetc_r+0x60>
 80181b6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80181ba:	42a9      	cmp	r1, r5
 80181bc:	d104      	bne.n	80181c8 <_sungetc_r+0x60>
 80181be:	3b01      	subs	r3, #1
 80181c0:	3201      	adds	r2, #1
 80181c2:	6023      	str	r3, [r4, #0]
 80181c4:	6062      	str	r2, [r4, #4]
 80181c6:	e7d5      	b.n	8018174 <_sungetc_r+0xc>
 80181c8:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80181cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80181d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80181d2:	2303      	movs	r3, #3
 80181d4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80181d6:	4623      	mov	r3, r4
 80181d8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80181dc:	6023      	str	r3, [r4, #0]
 80181de:	2301      	movs	r3, #1
 80181e0:	e7dc      	b.n	801819c <_sungetc_r+0x34>

080181e2 <__ssrefill_r>:
 80181e2:	b510      	push	{r4, lr}
 80181e4:	460c      	mov	r4, r1
 80181e6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80181e8:	b169      	cbz	r1, 8018206 <__ssrefill_r+0x24>
 80181ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80181ee:	4299      	cmp	r1, r3
 80181f0:	d001      	beq.n	80181f6 <__ssrefill_r+0x14>
 80181f2:	f7ff fe17 	bl	8017e24 <_free_r>
 80181f6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80181f8:	6063      	str	r3, [r4, #4]
 80181fa:	2000      	movs	r0, #0
 80181fc:	6360      	str	r0, [r4, #52]	@ 0x34
 80181fe:	b113      	cbz	r3, 8018206 <__ssrefill_r+0x24>
 8018200:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8018202:	6023      	str	r3, [r4, #0]
 8018204:	bd10      	pop	{r4, pc}
 8018206:	6923      	ldr	r3, [r4, #16]
 8018208:	6023      	str	r3, [r4, #0]
 801820a:	2300      	movs	r3, #0
 801820c:	6063      	str	r3, [r4, #4]
 801820e:	89a3      	ldrh	r3, [r4, #12]
 8018210:	f043 0320 	orr.w	r3, r3, #32
 8018214:	81a3      	strh	r3, [r4, #12]
 8018216:	f04f 30ff 	mov.w	r0, #4294967295
 801821a:	e7f3      	b.n	8018204 <__ssrefill_r+0x22>

0801821c <__ssvfiscanf_r>:
 801821c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018220:	460c      	mov	r4, r1
 8018222:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8018226:	2100      	movs	r1, #0
 8018228:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801822c:	49a6      	ldr	r1, [pc, #664]	@ (80184c8 <__ssvfiscanf_r+0x2ac>)
 801822e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8018230:	f10d 0804 	add.w	r8, sp, #4
 8018234:	49a5      	ldr	r1, [pc, #660]	@ (80184cc <__ssvfiscanf_r+0x2b0>)
 8018236:	4fa6      	ldr	r7, [pc, #664]	@ (80184d0 <__ssvfiscanf_r+0x2b4>)
 8018238:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801823c:	4606      	mov	r6, r0
 801823e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8018240:	9300      	str	r3, [sp, #0]
 8018242:	f892 9000 	ldrb.w	r9, [r2]
 8018246:	f1b9 0f00 	cmp.w	r9, #0
 801824a:	f000 8158 	beq.w	80184fe <__ssvfiscanf_r+0x2e2>
 801824e:	f817 3009 	ldrb.w	r3, [r7, r9]
 8018252:	f013 0308 	ands.w	r3, r3, #8
 8018256:	f102 0501 	add.w	r5, r2, #1
 801825a:	d019      	beq.n	8018290 <__ssvfiscanf_r+0x74>
 801825c:	6863      	ldr	r3, [r4, #4]
 801825e:	2b00      	cmp	r3, #0
 8018260:	dd0f      	ble.n	8018282 <__ssvfiscanf_r+0x66>
 8018262:	6823      	ldr	r3, [r4, #0]
 8018264:	781a      	ldrb	r2, [r3, #0]
 8018266:	5cba      	ldrb	r2, [r7, r2]
 8018268:	0712      	lsls	r2, r2, #28
 801826a:	d401      	bmi.n	8018270 <__ssvfiscanf_r+0x54>
 801826c:	462a      	mov	r2, r5
 801826e:	e7e8      	b.n	8018242 <__ssvfiscanf_r+0x26>
 8018270:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8018272:	3201      	adds	r2, #1
 8018274:	9245      	str	r2, [sp, #276]	@ 0x114
 8018276:	6862      	ldr	r2, [r4, #4]
 8018278:	3301      	adds	r3, #1
 801827a:	3a01      	subs	r2, #1
 801827c:	6062      	str	r2, [r4, #4]
 801827e:	6023      	str	r3, [r4, #0]
 8018280:	e7ec      	b.n	801825c <__ssvfiscanf_r+0x40>
 8018282:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8018284:	4621      	mov	r1, r4
 8018286:	4630      	mov	r0, r6
 8018288:	4798      	blx	r3
 801828a:	2800      	cmp	r0, #0
 801828c:	d0e9      	beq.n	8018262 <__ssvfiscanf_r+0x46>
 801828e:	e7ed      	b.n	801826c <__ssvfiscanf_r+0x50>
 8018290:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8018294:	f040 8085 	bne.w	80183a2 <__ssvfiscanf_r+0x186>
 8018298:	9341      	str	r3, [sp, #260]	@ 0x104
 801829a:	9343      	str	r3, [sp, #268]	@ 0x10c
 801829c:	7853      	ldrb	r3, [r2, #1]
 801829e:	2b2a      	cmp	r3, #42	@ 0x2a
 80182a0:	bf02      	ittt	eq
 80182a2:	2310      	moveq	r3, #16
 80182a4:	1c95      	addeq	r5, r2, #2
 80182a6:	9341      	streq	r3, [sp, #260]	@ 0x104
 80182a8:	220a      	movs	r2, #10
 80182aa:	46aa      	mov	sl, r5
 80182ac:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80182b0:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80182b4:	2b09      	cmp	r3, #9
 80182b6:	d91e      	bls.n	80182f6 <__ssvfiscanf_r+0xda>
 80182b8:	f8df b218 	ldr.w	fp, [pc, #536]	@ 80184d4 <__ssvfiscanf_r+0x2b8>
 80182bc:	2203      	movs	r2, #3
 80182be:	4658      	mov	r0, fp
 80182c0:	f7e7 ffbe 	bl	8000240 <memchr>
 80182c4:	b138      	cbz	r0, 80182d6 <__ssvfiscanf_r+0xba>
 80182c6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80182c8:	eba0 000b 	sub.w	r0, r0, fp
 80182cc:	2301      	movs	r3, #1
 80182ce:	4083      	lsls	r3, r0
 80182d0:	4313      	orrs	r3, r2
 80182d2:	9341      	str	r3, [sp, #260]	@ 0x104
 80182d4:	4655      	mov	r5, sl
 80182d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80182da:	2b78      	cmp	r3, #120	@ 0x78
 80182dc:	d806      	bhi.n	80182ec <__ssvfiscanf_r+0xd0>
 80182de:	2b57      	cmp	r3, #87	@ 0x57
 80182e0:	d810      	bhi.n	8018304 <__ssvfiscanf_r+0xe8>
 80182e2:	2b25      	cmp	r3, #37	@ 0x25
 80182e4:	d05d      	beq.n	80183a2 <__ssvfiscanf_r+0x186>
 80182e6:	d857      	bhi.n	8018398 <__ssvfiscanf_r+0x17c>
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d075      	beq.n	80183d8 <__ssvfiscanf_r+0x1bc>
 80182ec:	2303      	movs	r3, #3
 80182ee:	9347      	str	r3, [sp, #284]	@ 0x11c
 80182f0:	230a      	movs	r3, #10
 80182f2:	9342      	str	r3, [sp, #264]	@ 0x108
 80182f4:	e088      	b.n	8018408 <__ssvfiscanf_r+0x1ec>
 80182f6:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80182f8:	fb02 1103 	mla	r1, r2, r3, r1
 80182fc:	3930      	subs	r1, #48	@ 0x30
 80182fe:	9143      	str	r1, [sp, #268]	@ 0x10c
 8018300:	4655      	mov	r5, sl
 8018302:	e7d2      	b.n	80182aa <__ssvfiscanf_r+0x8e>
 8018304:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8018308:	2a20      	cmp	r2, #32
 801830a:	d8ef      	bhi.n	80182ec <__ssvfiscanf_r+0xd0>
 801830c:	a101      	add	r1, pc, #4	@ (adr r1, 8018314 <__ssvfiscanf_r+0xf8>)
 801830e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8018312:	bf00      	nop
 8018314:	080183e7 	.word	0x080183e7
 8018318:	080182ed 	.word	0x080182ed
 801831c:	080182ed 	.word	0x080182ed
 8018320:	08018441 	.word	0x08018441
 8018324:	080182ed 	.word	0x080182ed
 8018328:	080182ed 	.word	0x080182ed
 801832c:	080182ed 	.word	0x080182ed
 8018330:	080182ed 	.word	0x080182ed
 8018334:	080182ed 	.word	0x080182ed
 8018338:	080182ed 	.word	0x080182ed
 801833c:	080182ed 	.word	0x080182ed
 8018340:	08018457 	.word	0x08018457
 8018344:	0801843d 	.word	0x0801843d
 8018348:	0801839f 	.word	0x0801839f
 801834c:	0801839f 	.word	0x0801839f
 8018350:	0801839f 	.word	0x0801839f
 8018354:	080182ed 	.word	0x080182ed
 8018358:	080183f9 	.word	0x080183f9
 801835c:	080182ed 	.word	0x080182ed
 8018360:	080182ed 	.word	0x080182ed
 8018364:	080182ed 	.word	0x080182ed
 8018368:	080182ed 	.word	0x080182ed
 801836c:	08018467 	.word	0x08018467
 8018370:	08018401 	.word	0x08018401
 8018374:	080183df 	.word	0x080183df
 8018378:	080182ed 	.word	0x080182ed
 801837c:	080182ed 	.word	0x080182ed
 8018380:	08018463 	.word	0x08018463
 8018384:	080182ed 	.word	0x080182ed
 8018388:	0801843d 	.word	0x0801843d
 801838c:	080182ed 	.word	0x080182ed
 8018390:	080182ed 	.word	0x080182ed
 8018394:	080183e7 	.word	0x080183e7
 8018398:	3b45      	subs	r3, #69	@ 0x45
 801839a:	2b02      	cmp	r3, #2
 801839c:	d8a6      	bhi.n	80182ec <__ssvfiscanf_r+0xd0>
 801839e:	2305      	movs	r3, #5
 80183a0:	e031      	b.n	8018406 <__ssvfiscanf_r+0x1ea>
 80183a2:	6863      	ldr	r3, [r4, #4]
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	dd0d      	ble.n	80183c4 <__ssvfiscanf_r+0x1a8>
 80183a8:	6823      	ldr	r3, [r4, #0]
 80183aa:	781a      	ldrb	r2, [r3, #0]
 80183ac:	454a      	cmp	r2, r9
 80183ae:	f040 80a6 	bne.w	80184fe <__ssvfiscanf_r+0x2e2>
 80183b2:	3301      	adds	r3, #1
 80183b4:	6862      	ldr	r2, [r4, #4]
 80183b6:	6023      	str	r3, [r4, #0]
 80183b8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80183ba:	3a01      	subs	r2, #1
 80183bc:	3301      	adds	r3, #1
 80183be:	6062      	str	r2, [r4, #4]
 80183c0:	9345      	str	r3, [sp, #276]	@ 0x114
 80183c2:	e753      	b.n	801826c <__ssvfiscanf_r+0x50>
 80183c4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80183c6:	4621      	mov	r1, r4
 80183c8:	4630      	mov	r0, r6
 80183ca:	4798      	blx	r3
 80183cc:	2800      	cmp	r0, #0
 80183ce:	d0eb      	beq.n	80183a8 <__ssvfiscanf_r+0x18c>
 80183d0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80183d2:	2800      	cmp	r0, #0
 80183d4:	f040 808b 	bne.w	80184ee <__ssvfiscanf_r+0x2d2>
 80183d8:	f04f 30ff 	mov.w	r0, #4294967295
 80183dc:	e08b      	b.n	80184f6 <__ssvfiscanf_r+0x2da>
 80183de:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80183e0:	f042 0220 	orr.w	r2, r2, #32
 80183e4:	9241      	str	r2, [sp, #260]	@ 0x104
 80183e6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80183e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80183ec:	9241      	str	r2, [sp, #260]	@ 0x104
 80183ee:	2210      	movs	r2, #16
 80183f0:	2b6e      	cmp	r3, #110	@ 0x6e
 80183f2:	9242      	str	r2, [sp, #264]	@ 0x108
 80183f4:	d902      	bls.n	80183fc <__ssvfiscanf_r+0x1e0>
 80183f6:	e005      	b.n	8018404 <__ssvfiscanf_r+0x1e8>
 80183f8:	2300      	movs	r3, #0
 80183fa:	9342      	str	r3, [sp, #264]	@ 0x108
 80183fc:	2303      	movs	r3, #3
 80183fe:	e002      	b.n	8018406 <__ssvfiscanf_r+0x1ea>
 8018400:	2308      	movs	r3, #8
 8018402:	9342      	str	r3, [sp, #264]	@ 0x108
 8018404:	2304      	movs	r3, #4
 8018406:	9347      	str	r3, [sp, #284]	@ 0x11c
 8018408:	6863      	ldr	r3, [r4, #4]
 801840a:	2b00      	cmp	r3, #0
 801840c:	dd39      	ble.n	8018482 <__ssvfiscanf_r+0x266>
 801840e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8018410:	0659      	lsls	r1, r3, #25
 8018412:	d404      	bmi.n	801841e <__ssvfiscanf_r+0x202>
 8018414:	6823      	ldr	r3, [r4, #0]
 8018416:	781a      	ldrb	r2, [r3, #0]
 8018418:	5cba      	ldrb	r2, [r7, r2]
 801841a:	0712      	lsls	r2, r2, #28
 801841c:	d438      	bmi.n	8018490 <__ssvfiscanf_r+0x274>
 801841e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8018420:	2b02      	cmp	r3, #2
 8018422:	dc47      	bgt.n	80184b4 <__ssvfiscanf_r+0x298>
 8018424:	466b      	mov	r3, sp
 8018426:	4622      	mov	r2, r4
 8018428:	a941      	add	r1, sp, #260	@ 0x104
 801842a:	4630      	mov	r0, r6
 801842c:	f000 fb3a 	bl	8018aa4 <_scanf_chars>
 8018430:	2801      	cmp	r0, #1
 8018432:	d064      	beq.n	80184fe <__ssvfiscanf_r+0x2e2>
 8018434:	2802      	cmp	r0, #2
 8018436:	f47f af19 	bne.w	801826c <__ssvfiscanf_r+0x50>
 801843a:	e7c9      	b.n	80183d0 <__ssvfiscanf_r+0x1b4>
 801843c:	220a      	movs	r2, #10
 801843e:	e7d7      	b.n	80183f0 <__ssvfiscanf_r+0x1d4>
 8018440:	4629      	mov	r1, r5
 8018442:	4640      	mov	r0, r8
 8018444:	f000 fd28 	bl	8018e98 <__sccl>
 8018448:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801844a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801844e:	9341      	str	r3, [sp, #260]	@ 0x104
 8018450:	4605      	mov	r5, r0
 8018452:	2301      	movs	r3, #1
 8018454:	e7d7      	b.n	8018406 <__ssvfiscanf_r+0x1ea>
 8018456:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8018458:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801845c:	9341      	str	r3, [sp, #260]	@ 0x104
 801845e:	2300      	movs	r3, #0
 8018460:	e7d1      	b.n	8018406 <__ssvfiscanf_r+0x1ea>
 8018462:	2302      	movs	r3, #2
 8018464:	e7cf      	b.n	8018406 <__ssvfiscanf_r+0x1ea>
 8018466:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8018468:	06c3      	lsls	r3, r0, #27
 801846a:	f53f aeff 	bmi.w	801826c <__ssvfiscanf_r+0x50>
 801846e:	9b00      	ldr	r3, [sp, #0]
 8018470:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8018472:	1d19      	adds	r1, r3, #4
 8018474:	9100      	str	r1, [sp, #0]
 8018476:	681b      	ldr	r3, [r3, #0]
 8018478:	07c0      	lsls	r0, r0, #31
 801847a:	bf4c      	ite	mi
 801847c:	801a      	strhmi	r2, [r3, #0]
 801847e:	601a      	strpl	r2, [r3, #0]
 8018480:	e6f4      	b.n	801826c <__ssvfiscanf_r+0x50>
 8018482:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8018484:	4621      	mov	r1, r4
 8018486:	4630      	mov	r0, r6
 8018488:	4798      	blx	r3
 801848a:	2800      	cmp	r0, #0
 801848c:	d0bf      	beq.n	801840e <__ssvfiscanf_r+0x1f2>
 801848e:	e79f      	b.n	80183d0 <__ssvfiscanf_r+0x1b4>
 8018490:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8018492:	3201      	adds	r2, #1
 8018494:	9245      	str	r2, [sp, #276]	@ 0x114
 8018496:	6862      	ldr	r2, [r4, #4]
 8018498:	3a01      	subs	r2, #1
 801849a:	2a00      	cmp	r2, #0
 801849c:	6062      	str	r2, [r4, #4]
 801849e:	dd02      	ble.n	80184a6 <__ssvfiscanf_r+0x28a>
 80184a0:	3301      	adds	r3, #1
 80184a2:	6023      	str	r3, [r4, #0]
 80184a4:	e7b6      	b.n	8018414 <__ssvfiscanf_r+0x1f8>
 80184a6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80184a8:	4621      	mov	r1, r4
 80184aa:	4630      	mov	r0, r6
 80184ac:	4798      	blx	r3
 80184ae:	2800      	cmp	r0, #0
 80184b0:	d0b0      	beq.n	8018414 <__ssvfiscanf_r+0x1f8>
 80184b2:	e78d      	b.n	80183d0 <__ssvfiscanf_r+0x1b4>
 80184b4:	2b04      	cmp	r3, #4
 80184b6:	dc0f      	bgt.n	80184d8 <__ssvfiscanf_r+0x2bc>
 80184b8:	466b      	mov	r3, sp
 80184ba:	4622      	mov	r2, r4
 80184bc:	a941      	add	r1, sp, #260	@ 0x104
 80184be:	4630      	mov	r0, r6
 80184c0:	f000 fb4a 	bl	8018b58 <_scanf_i>
 80184c4:	e7b4      	b.n	8018430 <__ssvfiscanf_r+0x214>
 80184c6:	bf00      	nop
 80184c8:	08018169 	.word	0x08018169
 80184cc:	080181e3 	.word	0x080181e3
 80184d0:	0801ce05 	.word	0x0801ce05
 80184d4:	0801cdbc 	.word	0x0801cdbc
 80184d8:	4b0a      	ldr	r3, [pc, #40]	@ (8018504 <__ssvfiscanf_r+0x2e8>)
 80184da:	2b00      	cmp	r3, #0
 80184dc:	f43f aec6 	beq.w	801826c <__ssvfiscanf_r+0x50>
 80184e0:	466b      	mov	r3, sp
 80184e2:	4622      	mov	r2, r4
 80184e4:	a941      	add	r1, sp, #260	@ 0x104
 80184e6:	4630      	mov	r0, r6
 80184e8:	f3af 8000 	nop.w
 80184ec:	e7a0      	b.n	8018430 <__ssvfiscanf_r+0x214>
 80184ee:	89a3      	ldrh	r3, [r4, #12]
 80184f0:	065b      	lsls	r3, r3, #25
 80184f2:	f53f af71 	bmi.w	80183d8 <__ssvfiscanf_r+0x1bc>
 80184f6:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 80184fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184fe:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8018500:	e7f9      	b.n	80184f6 <__ssvfiscanf_r+0x2da>
 8018502:	bf00      	nop
 8018504:	00000000 	.word	0x00000000

08018508 <__sfputc_r>:
 8018508:	6893      	ldr	r3, [r2, #8]
 801850a:	3b01      	subs	r3, #1
 801850c:	2b00      	cmp	r3, #0
 801850e:	b410      	push	{r4}
 8018510:	6093      	str	r3, [r2, #8]
 8018512:	da08      	bge.n	8018526 <__sfputc_r+0x1e>
 8018514:	6994      	ldr	r4, [r2, #24]
 8018516:	42a3      	cmp	r3, r4
 8018518:	db01      	blt.n	801851e <__sfputc_r+0x16>
 801851a:	290a      	cmp	r1, #10
 801851c:	d103      	bne.n	8018526 <__sfputc_r+0x1e>
 801851e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018522:	f000 bd2c 	b.w	8018f7e <__swbuf_r>
 8018526:	6813      	ldr	r3, [r2, #0]
 8018528:	1c58      	adds	r0, r3, #1
 801852a:	6010      	str	r0, [r2, #0]
 801852c:	7019      	strb	r1, [r3, #0]
 801852e:	4608      	mov	r0, r1
 8018530:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018534:	4770      	bx	lr

08018536 <__sfputs_r>:
 8018536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018538:	4606      	mov	r6, r0
 801853a:	460f      	mov	r7, r1
 801853c:	4614      	mov	r4, r2
 801853e:	18d5      	adds	r5, r2, r3
 8018540:	42ac      	cmp	r4, r5
 8018542:	d101      	bne.n	8018548 <__sfputs_r+0x12>
 8018544:	2000      	movs	r0, #0
 8018546:	e007      	b.n	8018558 <__sfputs_r+0x22>
 8018548:	f814 1b01 	ldrb.w	r1, [r4], #1
 801854c:	463a      	mov	r2, r7
 801854e:	4630      	mov	r0, r6
 8018550:	f7ff ffda 	bl	8018508 <__sfputc_r>
 8018554:	1c43      	adds	r3, r0, #1
 8018556:	d1f3      	bne.n	8018540 <__sfputs_r+0xa>
 8018558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801855c <_vfiprintf_r>:
 801855c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018560:	460d      	mov	r5, r1
 8018562:	b09d      	sub	sp, #116	@ 0x74
 8018564:	4614      	mov	r4, r2
 8018566:	4698      	mov	r8, r3
 8018568:	4606      	mov	r6, r0
 801856a:	b118      	cbz	r0, 8018574 <_vfiprintf_r+0x18>
 801856c:	6a03      	ldr	r3, [r0, #32]
 801856e:	b90b      	cbnz	r3, 8018574 <_vfiprintf_r+0x18>
 8018570:	f7ff fa3a 	bl	80179e8 <__sinit>
 8018574:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018576:	07d9      	lsls	r1, r3, #31
 8018578:	d405      	bmi.n	8018586 <_vfiprintf_r+0x2a>
 801857a:	89ab      	ldrh	r3, [r5, #12]
 801857c:	059a      	lsls	r2, r3, #22
 801857e:	d402      	bmi.n	8018586 <_vfiprintf_r+0x2a>
 8018580:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018582:	f7ff fc3e 	bl	8017e02 <__retarget_lock_acquire_recursive>
 8018586:	89ab      	ldrh	r3, [r5, #12]
 8018588:	071b      	lsls	r3, r3, #28
 801858a:	d501      	bpl.n	8018590 <_vfiprintf_r+0x34>
 801858c:	692b      	ldr	r3, [r5, #16]
 801858e:	b99b      	cbnz	r3, 80185b8 <_vfiprintf_r+0x5c>
 8018590:	4629      	mov	r1, r5
 8018592:	4630      	mov	r0, r6
 8018594:	f000 fd32 	bl	8018ffc <__swsetup_r>
 8018598:	b170      	cbz	r0, 80185b8 <_vfiprintf_r+0x5c>
 801859a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801859c:	07dc      	lsls	r4, r3, #31
 801859e:	d504      	bpl.n	80185aa <_vfiprintf_r+0x4e>
 80185a0:	f04f 30ff 	mov.w	r0, #4294967295
 80185a4:	b01d      	add	sp, #116	@ 0x74
 80185a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185aa:	89ab      	ldrh	r3, [r5, #12]
 80185ac:	0598      	lsls	r0, r3, #22
 80185ae:	d4f7      	bmi.n	80185a0 <_vfiprintf_r+0x44>
 80185b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80185b2:	f7ff fc27 	bl	8017e04 <__retarget_lock_release_recursive>
 80185b6:	e7f3      	b.n	80185a0 <_vfiprintf_r+0x44>
 80185b8:	2300      	movs	r3, #0
 80185ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80185bc:	2320      	movs	r3, #32
 80185be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80185c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80185c6:	2330      	movs	r3, #48	@ 0x30
 80185c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018778 <_vfiprintf_r+0x21c>
 80185cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80185d0:	f04f 0901 	mov.w	r9, #1
 80185d4:	4623      	mov	r3, r4
 80185d6:	469a      	mov	sl, r3
 80185d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80185dc:	b10a      	cbz	r2, 80185e2 <_vfiprintf_r+0x86>
 80185de:	2a25      	cmp	r2, #37	@ 0x25
 80185e0:	d1f9      	bne.n	80185d6 <_vfiprintf_r+0x7a>
 80185e2:	ebba 0b04 	subs.w	fp, sl, r4
 80185e6:	d00b      	beq.n	8018600 <_vfiprintf_r+0xa4>
 80185e8:	465b      	mov	r3, fp
 80185ea:	4622      	mov	r2, r4
 80185ec:	4629      	mov	r1, r5
 80185ee:	4630      	mov	r0, r6
 80185f0:	f7ff ffa1 	bl	8018536 <__sfputs_r>
 80185f4:	3001      	adds	r0, #1
 80185f6:	f000 80a7 	beq.w	8018748 <_vfiprintf_r+0x1ec>
 80185fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80185fc:	445a      	add	r2, fp
 80185fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8018600:	f89a 3000 	ldrb.w	r3, [sl]
 8018604:	2b00      	cmp	r3, #0
 8018606:	f000 809f 	beq.w	8018748 <_vfiprintf_r+0x1ec>
 801860a:	2300      	movs	r3, #0
 801860c:	f04f 32ff 	mov.w	r2, #4294967295
 8018610:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018614:	f10a 0a01 	add.w	sl, sl, #1
 8018618:	9304      	str	r3, [sp, #16]
 801861a:	9307      	str	r3, [sp, #28]
 801861c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018620:	931a      	str	r3, [sp, #104]	@ 0x68
 8018622:	4654      	mov	r4, sl
 8018624:	2205      	movs	r2, #5
 8018626:	f814 1b01 	ldrb.w	r1, [r4], #1
 801862a:	4853      	ldr	r0, [pc, #332]	@ (8018778 <_vfiprintf_r+0x21c>)
 801862c:	f7e7 fe08 	bl	8000240 <memchr>
 8018630:	9a04      	ldr	r2, [sp, #16]
 8018632:	b9d8      	cbnz	r0, 801866c <_vfiprintf_r+0x110>
 8018634:	06d1      	lsls	r1, r2, #27
 8018636:	bf44      	itt	mi
 8018638:	2320      	movmi	r3, #32
 801863a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801863e:	0713      	lsls	r3, r2, #28
 8018640:	bf44      	itt	mi
 8018642:	232b      	movmi	r3, #43	@ 0x2b
 8018644:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018648:	f89a 3000 	ldrb.w	r3, [sl]
 801864c:	2b2a      	cmp	r3, #42	@ 0x2a
 801864e:	d015      	beq.n	801867c <_vfiprintf_r+0x120>
 8018650:	9a07      	ldr	r2, [sp, #28]
 8018652:	4654      	mov	r4, sl
 8018654:	2000      	movs	r0, #0
 8018656:	f04f 0c0a 	mov.w	ip, #10
 801865a:	4621      	mov	r1, r4
 801865c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018660:	3b30      	subs	r3, #48	@ 0x30
 8018662:	2b09      	cmp	r3, #9
 8018664:	d94b      	bls.n	80186fe <_vfiprintf_r+0x1a2>
 8018666:	b1b0      	cbz	r0, 8018696 <_vfiprintf_r+0x13a>
 8018668:	9207      	str	r2, [sp, #28]
 801866a:	e014      	b.n	8018696 <_vfiprintf_r+0x13a>
 801866c:	eba0 0308 	sub.w	r3, r0, r8
 8018670:	fa09 f303 	lsl.w	r3, r9, r3
 8018674:	4313      	orrs	r3, r2
 8018676:	9304      	str	r3, [sp, #16]
 8018678:	46a2      	mov	sl, r4
 801867a:	e7d2      	b.n	8018622 <_vfiprintf_r+0xc6>
 801867c:	9b03      	ldr	r3, [sp, #12]
 801867e:	1d19      	adds	r1, r3, #4
 8018680:	681b      	ldr	r3, [r3, #0]
 8018682:	9103      	str	r1, [sp, #12]
 8018684:	2b00      	cmp	r3, #0
 8018686:	bfbb      	ittet	lt
 8018688:	425b      	neglt	r3, r3
 801868a:	f042 0202 	orrlt.w	r2, r2, #2
 801868e:	9307      	strge	r3, [sp, #28]
 8018690:	9307      	strlt	r3, [sp, #28]
 8018692:	bfb8      	it	lt
 8018694:	9204      	strlt	r2, [sp, #16]
 8018696:	7823      	ldrb	r3, [r4, #0]
 8018698:	2b2e      	cmp	r3, #46	@ 0x2e
 801869a:	d10a      	bne.n	80186b2 <_vfiprintf_r+0x156>
 801869c:	7863      	ldrb	r3, [r4, #1]
 801869e:	2b2a      	cmp	r3, #42	@ 0x2a
 80186a0:	d132      	bne.n	8018708 <_vfiprintf_r+0x1ac>
 80186a2:	9b03      	ldr	r3, [sp, #12]
 80186a4:	1d1a      	adds	r2, r3, #4
 80186a6:	681b      	ldr	r3, [r3, #0]
 80186a8:	9203      	str	r2, [sp, #12]
 80186aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80186ae:	3402      	adds	r4, #2
 80186b0:	9305      	str	r3, [sp, #20]
 80186b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018788 <_vfiprintf_r+0x22c>
 80186b6:	7821      	ldrb	r1, [r4, #0]
 80186b8:	2203      	movs	r2, #3
 80186ba:	4650      	mov	r0, sl
 80186bc:	f7e7 fdc0 	bl	8000240 <memchr>
 80186c0:	b138      	cbz	r0, 80186d2 <_vfiprintf_r+0x176>
 80186c2:	9b04      	ldr	r3, [sp, #16]
 80186c4:	eba0 000a 	sub.w	r0, r0, sl
 80186c8:	2240      	movs	r2, #64	@ 0x40
 80186ca:	4082      	lsls	r2, r0
 80186cc:	4313      	orrs	r3, r2
 80186ce:	3401      	adds	r4, #1
 80186d0:	9304      	str	r3, [sp, #16]
 80186d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80186d6:	4829      	ldr	r0, [pc, #164]	@ (801877c <_vfiprintf_r+0x220>)
 80186d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80186dc:	2206      	movs	r2, #6
 80186de:	f7e7 fdaf 	bl	8000240 <memchr>
 80186e2:	2800      	cmp	r0, #0
 80186e4:	d03f      	beq.n	8018766 <_vfiprintf_r+0x20a>
 80186e6:	4b26      	ldr	r3, [pc, #152]	@ (8018780 <_vfiprintf_r+0x224>)
 80186e8:	bb1b      	cbnz	r3, 8018732 <_vfiprintf_r+0x1d6>
 80186ea:	9b03      	ldr	r3, [sp, #12]
 80186ec:	3307      	adds	r3, #7
 80186ee:	f023 0307 	bic.w	r3, r3, #7
 80186f2:	3308      	adds	r3, #8
 80186f4:	9303      	str	r3, [sp, #12]
 80186f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80186f8:	443b      	add	r3, r7
 80186fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80186fc:	e76a      	b.n	80185d4 <_vfiprintf_r+0x78>
 80186fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8018702:	460c      	mov	r4, r1
 8018704:	2001      	movs	r0, #1
 8018706:	e7a8      	b.n	801865a <_vfiprintf_r+0xfe>
 8018708:	2300      	movs	r3, #0
 801870a:	3401      	adds	r4, #1
 801870c:	9305      	str	r3, [sp, #20]
 801870e:	4619      	mov	r1, r3
 8018710:	f04f 0c0a 	mov.w	ip, #10
 8018714:	4620      	mov	r0, r4
 8018716:	f810 2b01 	ldrb.w	r2, [r0], #1
 801871a:	3a30      	subs	r2, #48	@ 0x30
 801871c:	2a09      	cmp	r2, #9
 801871e:	d903      	bls.n	8018728 <_vfiprintf_r+0x1cc>
 8018720:	2b00      	cmp	r3, #0
 8018722:	d0c6      	beq.n	80186b2 <_vfiprintf_r+0x156>
 8018724:	9105      	str	r1, [sp, #20]
 8018726:	e7c4      	b.n	80186b2 <_vfiprintf_r+0x156>
 8018728:	fb0c 2101 	mla	r1, ip, r1, r2
 801872c:	4604      	mov	r4, r0
 801872e:	2301      	movs	r3, #1
 8018730:	e7f0      	b.n	8018714 <_vfiprintf_r+0x1b8>
 8018732:	ab03      	add	r3, sp, #12
 8018734:	9300      	str	r3, [sp, #0]
 8018736:	462a      	mov	r2, r5
 8018738:	4b12      	ldr	r3, [pc, #72]	@ (8018784 <_vfiprintf_r+0x228>)
 801873a:	a904      	add	r1, sp, #16
 801873c:	4630      	mov	r0, r6
 801873e:	f3af 8000 	nop.w
 8018742:	4607      	mov	r7, r0
 8018744:	1c78      	adds	r0, r7, #1
 8018746:	d1d6      	bne.n	80186f6 <_vfiprintf_r+0x19a>
 8018748:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801874a:	07d9      	lsls	r1, r3, #31
 801874c:	d405      	bmi.n	801875a <_vfiprintf_r+0x1fe>
 801874e:	89ab      	ldrh	r3, [r5, #12]
 8018750:	059a      	lsls	r2, r3, #22
 8018752:	d402      	bmi.n	801875a <_vfiprintf_r+0x1fe>
 8018754:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018756:	f7ff fb55 	bl	8017e04 <__retarget_lock_release_recursive>
 801875a:	89ab      	ldrh	r3, [r5, #12]
 801875c:	065b      	lsls	r3, r3, #25
 801875e:	f53f af1f 	bmi.w	80185a0 <_vfiprintf_r+0x44>
 8018762:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018764:	e71e      	b.n	80185a4 <_vfiprintf_r+0x48>
 8018766:	ab03      	add	r3, sp, #12
 8018768:	9300      	str	r3, [sp, #0]
 801876a:	462a      	mov	r2, r5
 801876c:	4b05      	ldr	r3, [pc, #20]	@ (8018784 <_vfiprintf_r+0x228>)
 801876e:	a904      	add	r1, sp, #16
 8018770:	4630      	mov	r0, r6
 8018772:	f000 f879 	bl	8018868 <_printf_i>
 8018776:	e7e4      	b.n	8018742 <_vfiprintf_r+0x1e6>
 8018778:	0801cdb6 	.word	0x0801cdb6
 801877c:	0801cdc0 	.word	0x0801cdc0
 8018780:	00000000 	.word	0x00000000
 8018784:	08018537 	.word	0x08018537
 8018788:	0801cdbc 	.word	0x0801cdbc

0801878c <_printf_common>:
 801878c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018790:	4616      	mov	r6, r2
 8018792:	4698      	mov	r8, r3
 8018794:	688a      	ldr	r2, [r1, #8]
 8018796:	690b      	ldr	r3, [r1, #16]
 8018798:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801879c:	4293      	cmp	r3, r2
 801879e:	bfb8      	it	lt
 80187a0:	4613      	movlt	r3, r2
 80187a2:	6033      	str	r3, [r6, #0]
 80187a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80187a8:	4607      	mov	r7, r0
 80187aa:	460c      	mov	r4, r1
 80187ac:	b10a      	cbz	r2, 80187b2 <_printf_common+0x26>
 80187ae:	3301      	adds	r3, #1
 80187b0:	6033      	str	r3, [r6, #0]
 80187b2:	6823      	ldr	r3, [r4, #0]
 80187b4:	0699      	lsls	r1, r3, #26
 80187b6:	bf42      	ittt	mi
 80187b8:	6833      	ldrmi	r3, [r6, #0]
 80187ba:	3302      	addmi	r3, #2
 80187bc:	6033      	strmi	r3, [r6, #0]
 80187be:	6825      	ldr	r5, [r4, #0]
 80187c0:	f015 0506 	ands.w	r5, r5, #6
 80187c4:	d106      	bne.n	80187d4 <_printf_common+0x48>
 80187c6:	f104 0a19 	add.w	sl, r4, #25
 80187ca:	68e3      	ldr	r3, [r4, #12]
 80187cc:	6832      	ldr	r2, [r6, #0]
 80187ce:	1a9b      	subs	r3, r3, r2
 80187d0:	42ab      	cmp	r3, r5
 80187d2:	dc26      	bgt.n	8018822 <_printf_common+0x96>
 80187d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80187d8:	6822      	ldr	r2, [r4, #0]
 80187da:	3b00      	subs	r3, #0
 80187dc:	bf18      	it	ne
 80187de:	2301      	movne	r3, #1
 80187e0:	0692      	lsls	r2, r2, #26
 80187e2:	d42b      	bmi.n	801883c <_printf_common+0xb0>
 80187e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80187e8:	4641      	mov	r1, r8
 80187ea:	4638      	mov	r0, r7
 80187ec:	47c8      	blx	r9
 80187ee:	3001      	adds	r0, #1
 80187f0:	d01e      	beq.n	8018830 <_printf_common+0xa4>
 80187f2:	6823      	ldr	r3, [r4, #0]
 80187f4:	6922      	ldr	r2, [r4, #16]
 80187f6:	f003 0306 	and.w	r3, r3, #6
 80187fa:	2b04      	cmp	r3, #4
 80187fc:	bf02      	ittt	eq
 80187fe:	68e5      	ldreq	r5, [r4, #12]
 8018800:	6833      	ldreq	r3, [r6, #0]
 8018802:	1aed      	subeq	r5, r5, r3
 8018804:	68a3      	ldr	r3, [r4, #8]
 8018806:	bf0c      	ite	eq
 8018808:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801880c:	2500      	movne	r5, #0
 801880e:	4293      	cmp	r3, r2
 8018810:	bfc4      	itt	gt
 8018812:	1a9b      	subgt	r3, r3, r2
 8018814:	18ed      	addgt	r5, r5, r3
 8018816:	2600      	movs	r6, #0
 8018818:	341a      	adds	r4, #26
 801881a:	42b5      	cmp	r5, r6
 801881c:	d11a      	bne.n	8018854 <_printf_common+0xc8>
 801881e:	2000      	movs	r0, #0
 8018820:	e008      	b.n	8018834 <_printf_common+0xa8>
 8018822:	2301      	movs	r3, #1
 8018824:	4652      	mov	r2, sl
 8018826:	4641      	mov	r1, r8
 8018828:	4638      	mov	r0, r7
 801882a:	47c8      	blx	r9
 801882c:	3001      	adds	r0, #1
 801882e:	d103      	bne.n	8018838 <_printf_common+0xac>
 8018830:	f04f 30ff 	mov.w	r0, #4294967295
 8018834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018838:	3501      	adds	r5, #1
 801883a:	e7c6      	b.n	80187ca <_printf_common+0x3e>
 801883c:	18e1      	adds	r1, r4, r3
 801883e:	1c5a      	adds	r2, r3, #1
 8018840:	2030      	movs	r0, #48	@ 0x30
 8018842:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018846:	4422      	add	r2, r4
 8018848:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801884c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018850:	3302      	adds	r3, #2
 8018852:	e7c7      	b.n	80187e4 <_printf_common+0x58>
 8018854:	2301      	movs	r3, #1
 8018856:	4622      	mov	r2, r4
 8018858:	4641      	mov	r1, r8
 801885a:	4638      	mov	r0, r7
 801885c:	47c8      	blx	r9
 801885e:	3001      	adds	r0, #1
 8018860:	d0e6      	beq.n	8018830 <_printf_common+0xa4>
 8018862:	3601      	adds	r6, #1
 8018864:	e7d9      	b.n	801881a <_printf_common+0x8e>
	...

08018868 <_printf_i>:
 8018868:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801886c:	7e0f      	ldrb	r7, [r1, #24]
 801886e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018870:	2f78      	cmp	r7, #120	@ 0x78
 8018872:	4691      	mov	r9, r2
 8018874:	4680      	mov	r8, r0
 8018876:	460c      	mov	r4, r1
 8018878:	469a      	mov	sl, r3
 801887a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801887e:	d807      	bhi.n	8018890 <_printf_i+0x28>
 8018880:	2f62      	cmp	r7, #98	@ 0x62
 8018882:	d80a      	bhi.n	801889a <_printf_i+0x32>
 8018884:	2f00      	cmp	r7, #0
 8018886:	f000 80d1 	beq.w	8018a2c <_printf_i+0x1c4>
 801888a:	2f58      	cmp	r7, #88	@ 0x58
 801888c:	f000 80b8 	beq.w	8018a00 <_printf_i+0x198>
 8018890:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018894:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018898:	e03a      	b.n	8018910 <_printf_i+0xa8>
 801889a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801889e:	2b15      	cmp	r3, #21
 80188a0:	d8f6      	bhi.n	8018890 <_printf_i+0x28>
 80188a2:	a101      	add	r1, pc, #4	@ (adr r1, 80188a8 <_printf_i+0x40>)
 80188a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80188a8:	08018901 	.word	0x08018901
 80188ac:	08018915 	.word	0x08018915
 80188b0:	08018891 	.word	0x08018891
 80188b4:	08018891 	.word	0x08018891
 80188b8:	08018891 	.word	0x08018891
 80188bc:	08018891 	.word	0x08018891
 80188c0:	08018915 	.word	0x08018915
 80188c4:	08018891 	.word	0x08018891
 80188c8:	08018891 	.word	0x08018891
 80188cc:	08018891 	.word	0x08018891
 80188d0:	08018891 	.word	0x08018891
 80188d4:	08018a13 	.word	0x08018a13
 80188d8:	0801893f 	.word	0x0801893f
 80188dc:	080189cd 	.word	0x080189cd
 80188e0:	08018891 	.word	0x08018891
 80188e4:	08018891 	.word	0x08018891
 80188e8:	08018a35 	.word	0x08018a35
 80188ec:	08018891 	.word	0x08018891
 80188f0:	0801893f 	.word	0x0801893f
 80188f4:	08018891 	.word	0x08018891
 80188f8:	08018891 	.word	0x08018891
 80188fc:	080189d5 	.word	0x080189d5
 8018900:	6833      	ldr	r3, [r6, #0]
 8018902:	1d1a      	adds	r2, r3, #4
 8018904:	681b      	ldr	r3, [r3, #0]
 8018906:	6032      	str	r2, [r6, #0]
 8018908:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801890c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018910:	2301      	movs	r3, #1
 8018912:	e09c      	b.n	8018a4e <_printf_i+0x1e6>
 8018914:	6833      	ldr	r3, [r6, #0]
 8018916:	6820      	ldr	r0, [r4, #0]
 8018918:	1d19      	adds	r1, r3, #4
 801891a:	6031      	str	r1, [r6, #0]
 801891c:	0606      	lsls	r6, r0, #24
 801891e:	d501      	bpl.n	8018924 <_printf_i+0xbc>
 8018920:	681d      	ldr	r5, [r3, #0]
 8018922:	e003      	b.n	801892c <_printf_i+0xc4>
 8018924:	0645      	lsls	r5, r0, #25
 8018926:	d5fb      	bpl.n	8018920 <_printf_i+0xb8>
 8018928:	f9b3 5000 	ldrsh.w	r5, [r3]
 801892c:	2d00      	cmp	r5, #0
 801892e:	da03      	bge.n	8018938 <_printf_i+0xd0>
 8018930:	232d      	movs	r3, #45	@ 0x2d
 8018932:	426d      	negs	r5, r5
 8018934:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018938:	4858      	ldr	r0, [pc, #352]	@ (8018a9c <_printf_i+0x234>)
 801893a:	230a      	movs	r3, #10
 801893c:	e011      	b.n	8018962 <_printf_i+0xfa>
 801893e:	6821      	ldr	r1, [r4, #0]
 8018940:	6833      	ldr	r3, [r6, #0]
 8018942:	0608      	lsls	r0, r1, #24
 8018944:	f853 5b04 	ldr.w	r5, [r3], #4
 8018948:	d402      	bmi.n	8018950 <_printf_i+0xe8>
 801894a:	0649      	lsls	r1, r1, #25
 801894c:	bf48      	it	mi
 801894e:	b2ad      	uxthmi	r5, r5
 8018950:	2f6f      	cmp	r7, #111	@ 0x6f
 8018952:	4852      	ldr	r0, [pc, #328]	@ (8018a9c <_printf_i+0x234>)
 8018954:	6033      	str	r3, [r6, #0]
 8018956:	bf14      	ite	ne
 8018958:	230a      	movne	r3, #10
 801895a:	2308      	moveq	r3, #8
 801895c:	2100      	movs	r1, #0
 801895e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8018962:	6866      	ldr	r6, [r4, #4]
 8018964:	60a6      	str	r6, [r4, #8]
 8018966:	2e00      	cmp	r6, #0
 8018968:	db05      	blt.n	8018976 <_printf_i+0x10e>
 801896a:	6821      	ldr	r1, [r4, #0]
 801896c:	432e      	orrs	r6, r5
 801896e:	f021 0104 	bic.w	r1, r1, #4
 8018972:	6021      	str	r1, [r4, #0]
 8018974:	d04b      	beq.n	8018a0e <_printf_i+0x1a6>
 8018976:	4616      	mov	r6, r2
 8018978:	fbb5 f1f3 	udiv	r1, r5, r3
 801897c:	fb03 5711 	mls	r7, r3, r1, r5
 8018980:	5dc7      	ldrb	r7, [r0, r7]
 8018982:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018986:	462f      	mov	r7, r5
 8018988:	42bb      	cmp	r3, r7
 801898a:	460d      	mov	r5, r1
 801898c:	d9f4      	bls.n	8018978 <_printf_i+0x110>
 801898e:	2b08      	cmp	r3, #8
 8018990:	d10b      	bne.n	80189aa <_printf_i+0x142>
 8018992:	6823      	ldr	r3, [r4, #0]
 8018994:	07df      	lsls	r7, r3, #31
 8018996:	d508      	bpl.n	80189aa <_printf_i+0x142>
 8018998:	6923      	ldr	r3, [r4, #16]
 801899a:	6861      	ldr	r1, [r4, #4]
 801899c:	4299      	cmp	r1, r3
 801899e:	bfde      	ittt	le
 80189a0:	2330      	movle	r3, #48	@ 0x30
 80189a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80189a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80189aa:	1b92      	subs	r2, r2, r6
 80189ac:	6122      	str	r2, [r4, #16]
 80189ae:	f8cd a000 	str.w	sl, [sp]
 80189b2:	464b      	mov	r3, r9
 80189b4:	aa03      	add	r2, sp, #12
 80189b6:	4621      	mov	r1, r4
 80189b8:	4640      	mov	r0, r8
 80189ba:	f7ff fee7 	bl	801878c <_printf_common>
 80189be:	3001      	adds	r0, #1
 80189c0:	d14a      	bne.n	8018a58 <_printf_i+0x1f0>
 80189c2:	f04f 30ff 	mov.w	r0, #4294967295
 80189c6:	b004      	add	sp, #16
 80189c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80189cc:	6823      	ldr	r3, [r4, #0]
 80189ce:	f043 0320 	orr.w	r3, r3, #32
 80189d2:	6023      	str	r3, [r4, #0]
 80189d4:	4832      	ldr	r0, [pc, #200]	@ (8018aa0 <_printf_i+0x238>)
 80189d6:	2778      	movs	r7, #120	@ 0x78
 80189d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80189dc:	6823      	ldr	r3, [r4, #0]
 80189de:	6831      	ldr	r1, [r6, #0]
 80189e0:	061f      	lsls	r7, r3, #24
 80189e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80189e6:	d402      	bmi.n	80189ee <_printf_i+0x186>
 80189e8:	065f      	lsls	r7, r3, #25
 80189ea:	bf48      	it	mi
 80189ec:	b2ad      	uxthmi	r5, r5
 80189ee:	6031      	str	r1, [r6, #0]
 80189f0:	07d9      	lsls	r1, r3, #31
 80189f2:	bf44      	itt	mi
 80189f4:	f043 0320 	orrmi.w	r3, r3, #32
 80189f8:	6023      	strmi	r3, [r4, #0]
 80189fa:	b11d      	cbz	r5, 8018a04 <_printf_i+0x19c>
 80189fc:	2310      	movs	r3, #16
 80189fe:	e7ad      	b.n	801895c <_printf_i+0xf4>
 8018a00:	4826      	ldr	r0, [pc, #152]	@ (8018a9c <_printf_i+0x234>)
 8018a02:	e7e9      	b.n	80189d8 <_printf_i+0x170>
 8018a04:	6823      	ldr	r3, [r4, #0]
 8018a06:	f023 0320 	bic.w	r3, r3, #32
 8018a0a:	6023      	str	r3, [r4, #0]
 8018a0c:	e7f6      	b.n	80189fc <_printf_i+0x194>
 8018a0e:	4616      	mov	r6, r2
 8018a10:	e7bd      	b.n	801898e <_printf_i+0x126>
 8018a12:	6833      	ldr	r3, [r6, #0]
 8018a14:	6825      	ldr	r5, [r4, #0]
 8018a16:	6961      	ldr	r1, [r4, #20]
 8018a18:	1d18      	adds	r0, r3, #4
 8018a1a:	6030      	str	r0, [r6, #0]
 8018a1c:	062e      	lsls	r6, r5, #24
 8018a1e:	681b      	ldr	r3, [r3, #0]
 8018a20:	d501      	bpl.n	8018a26 <_printf_i+0x1be>
 8018a22:	6019      	str	r1, [r3, #0]
 8018a24:	e002      	b.n	8018a2c <_printf_i+0x1c4>
 8018a26:	0668      	lsls	r0, r5, #25
 8018a28:	d5fb      	bpl.n	8018a22 <_printf_i+0x1ba>
 8018a2a:	8019      	strh	r1, [r3, #0]
 8018a2c:	2300      	movs	r3, #0
 8018a2e:	6123      	str	r3, [r4, #16]
 8018a30:	4616      	mov	r6, r2
 8018a32:	e7bc      	b.n	80189ae <_printf_i+0x146>
 8018a34:	6833      	ldr	r3, [r6, #0]
 8018a36:	1d1a      	adds	r2, r3, #4
 8018a38:	6032      	str	r2, [r6, #0]
 8018a3a:	681e      	ldr	r6, [r3, #0]
 8018a3c:	6862      	ldr	r2, [r4, #4]
 8018a3e:	2100      	movs	r1, #0
 8018a40:	4630      	mov	r0, r6
 8018a42:	f7e7 fbfd 	bl	8000240 <memchr>
 8018a46:	b108      	cbz	r0, 8018a4c <_printf_i+0x1e4>
 8018a48:	1b80      	subs	r0, r0, r6
 8018a4a:	6060      	str	r0, [r4, #4]
 8018a4c:	6863      	ldr	r3, [r4, #4]
 8018a4e:	6123      	str	r3, [r4, #16]
 8018a50:	2300      	movs	r3, #0
 8018a52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018a56:	e7aa      	b.n	80189ae <_printf_i+0x146>
 8018a58:	6923      	ldr	r3, [r4, #16]
 8018a5a:	4632      	mov	r2, r6
 8018a5c:	4649      	mov	r1, r9
 8018a5e:	4640      	mov	r0, r8
 8018a60:	47d0      	blx	sl
 8018a62:	3001      	adds	r0, #1
 8018a64:	d0ad      	beq.n	80189c2 <_printf_i+0x15a>
 8018a66:	6823      	ldr	r3, [r4, #0]
 8018a68:	079b      	lsls	r3, r3, #30
 8018a6a:	d413      	bmi.n	8018a94 <_printf_i+0x22c>
 8018a6c:	68e0      	ldr	r0, [r4, #12]
 8018a6e:	9b03      	ldr	r3, [sp, #12]
 8018a70:	4298      	cmp	r0, r3
 8018a72:	bfb8      	it	lt
 8018a74:	4618      	movlt	r0, r3
 8018a76:	e7a6      	b.n	80189c6 <_printf_i+0x15e>
 8018a78:	2301      	movs	r3, #1
 8018a7a:	4632      	mov	r2, r6
 8018a7c:	4649      	mov	r1, r9
 8018a7e:	4640      	mov	r0, r8
 8018a80:	47d0      	blx	sl
 8018a82:	3001      	adds	r0, #1
 8018a84:	d09d      	beq.n	80189c2 <_printf_i+0x15a>
 8018a86:	3501      	adds	r5, #1
 8018a88:	68e3      	ldr	r3, [r4, #12]
 8018a8a:	9903      	ldr	r1, [sp, #12]
 8018a8c:	1a5b      	subs	r3, r3, r1
 8018a8e:	42ab      	cmp	r3, r5
 8018a90:	dcf2      	bgt.n	8018a78 <_printf_i+0x210>
 8018a92:	e7eb      	b.n	8018a6c <_printf_i+0x204>
 8018a94:	2500      	movs	r5, #0
 8018a96:	f104 0619 	add.w	r6, r4, #25
 8018a9a:	e7f5      	b.n	8018a88 <_printf_i+0x220>
 8018a9c:	0801cdc7 	.word	0x0801cdc7
 8018aa0:	0801cdd8 	.word	0x0801cdd8

08018aa4 <_scanf_chars>:
 8018aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018aa8:	4615      	mov	r5, r2
 8018aaa:	688a      	ldr	r2, [r1, #8]
 8018aac:	4680      	mov	r8, r0
 8018aae:	460c      	mov	r4, r1
 8018ab0:	b932      	cbnz	r2, 8018ac0 <_scanf_chars+0x1c>
 8018ab2:	698a      	ldr	r2, [r1, #24]
 8018ab4:	2a00      	cmp	r2, #0
 8018ab6:	bf14      	ite	ne
 8018ab8:	f04f 32ff 	movne.w	r2, #4294967295
 8018abc:	2201      	moveq	r2, #1
 8018abe:	608a      	str	r2, [r1, #8]
 8018ac0:	6822      	ldr	r2, [r4, #0]
 8018ac2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8018b54 <_scanf_chars+0xb0>
 8018ac6:	06d1      	lsls	r1, r2, #27
 8018ac8:	bf5f      	itttt	pl
 8018aca:	681a      	ldrpl	r2, [r3, #0]
 8018acc:	1d11      	addpl	r1, r2, #4
 8018ace:	6019      	strpl	r1, [r3, #0]
 8018ad0:	6816      	ldrpl	r6, [r2, #0]
 8018ad2:	2700      	movs	r7, #0
 8018ad4:	69a0      	ldr	r0, [r4, #24]
 8018ad6:	b188      	cbz	r0, 8018afc <_scanf_chars+0x58>
 8018ad8:	2801      	cmp	r0, #1
 8018ada:	d107      	bne.n	8018aec <_scanf_chars+0x48>
 8018adc:	682b      	ldr	r3, [r5, #0]
 8018ade:	781a      	ldrb	r2, [r3, #0]
 8018ae0:	6963      	ldr	r3, [r4, #20]
 8018ae2:	5c9b      	ldrb	r3, [r3, r2]
 8018ae4:	b953      	cbnz	r3, 8018afc <_scanf_chars+0x58>
 8018ae6:	2f00      	cmp	r7, #0
 8018ae8:	d031      	beq.n	8018b4e <_scanf_chars+0xaa>
 8018aea:	e022      	b.n	8018b32 <_scanf_chars+0x8e>
 8018aec:	2802      	cmp	r0, #2
 8018aee:	d120      	bne.n	8018b32 <_scanf_chars+0x8e>
 8018af0:	682b      	ldr	r3, [r5, #0]
 8018af2:	781b      	ldrb	r3, [r3, #0]
 8018af4:	f819 3003 	ldrb.w	r3, [r9, r3]
 8018af8:	071b      	lsls	r3, r3, #28
 8018afa:	d41a      	bmi.n	8018b32 <_scanf_chars+0x8e>
 8018afc:	6823      	ldr	r3, [r4, #0]
 8018afe:	06da      	lsls	r2, r3, #27
 8018b00:	bf5e      	ittt	pl
 8018b02:	682b      	ldrpl	r3, [r5, #0]
 8018b04:	781b      	ldrbpl	r3, [r3, #0]
 8018b06:	f806 3b01 	strbpl.w	r3, [r6], #1
 8018b0a:	682a      	ldr	r2, [r5, #0]
 8018b0c:	686b      	ldr	r3, [r5, #4]
 8018b0e:	3201      	adds	r2, #1
 8018b10:	602a      	str	r2, [r5, #0]
 8018b12:	68a2      	ldr	r2, [r4, #8]
 8018b14:	3b01      	subs	r3, #1
 8018b16:	3a01      	subs	r2, #1
 8018b18:	606b      	str	r3, [r5, #4]
 8018b1a:	3701      	adds	r7, #1
 8018b1c:	60a2      	str	r2, [r4, #8]
 8018b1e:	b142      	cbz	r2, 8018b32 <_scanf_chars+0x8e>
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	dcd7      	bgt.n	8018ad4 <_scanf_chars+0x30>
 8018b24:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8018b28:	4629      	mov	r1, r5
 8018b2a:	4640      	mov	r0, r8
 8018b2c:	4798      	blx	r3
 8018b2e:	2800      	cmp	r0, #0
 8018b30:	d0d0      	beq.n	8018ad4 <_scanf_chars+0x30>
 8018b32:	6823      	ldr	r3, [r4, #0]
 8018b34:	f013 0310 	ands.w	r3, r3, #16
 8018b38:	d105      	bne.n	8018b46 <_scanf_chars+0xa2>
 8018b3a:	68e2      	ldr	r2, [r4, #12]
 8018b3c:	3201      	adds	r2, #1
 8018b3e:	60e2      	str	r2, [r4, #12]
 8018b40:	69a2      	ldr	r2, [r4, #24]
 8018b42:	b102      	cbz	r2, 8018b46 <_scanf_chars+0xa2>
 8018b44:	7033      	strb	r3, [r6, #0]
 8018b46:	6923      	ldr	r3, [r4, #16]
 8018b48:	443b      	add	r3, r7
 8018b4a:	6123      	str	r3, [r4, #16]
 8018b4c:	2000      	movs	r0, #0
 8018b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018b52:	bf00      	nop
 8018b54:	0801ce05 	.word	0x0801ce05

08018b58 <_scanf_i>:
 8018b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b5c:	4698      	mov	r8, r3
 8018b5e:	4b74      	ldr	r3, [pc, #464]	@ (8018d30 <_scanf_i+0x1d8>)
 8018b60:	460c      	mov	r4, r1
 8018b62:	4682      	mov	sl, r0
 8018b64:	4616      	mov	r6, r2
 8018b66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018b6a:	b087      	sub	sp, #28
 8018b6c:	ab03      	add	r3, sp, #12
 8018b6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8018b72:	4b70      	ldr	r3, [pc, #448]	@ (8018d34 <_scanf_i+0x1dc>)
 8018b74:	69a1      	ldr	r1, [r4, #24]
 8018b76:	4a70      	ldr	r2, [pc, #448]	@ (8018d38 <_scanf_i+0x1e0>)
 8018b78:	2903      	cmp	r1, #3
 8018b7a:	bf08      	it	eq
 8018b7c:	461a      	moveq	r2, r3
 8018b7e:	68a3      	ldr	r3, [r4, #8]
 8018b80:	9201      	str	r2, [sp, #4]
 8018b82:	1e5a      	subs	r2, r3, #1
 8018b84:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8018b88:	bf88      	it	hi
 8018b8a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8018b8e:	4627      	mov	r7, r4
 8018b90:	bf82      	ittt	hi
 8018b92:	eb03 0905 	addhi.w	r9, r3, r5
 8018b96:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8018b9a:	60a3      	strhi	r3, [r4, #8]
 8018b9c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8018ba0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8018ba4:	bf98      	it	ls
 8018ba6:	f04f 0900 	movls.w	r9, #0
 8018baa:	6023      	str	r3, [r4, #0]
 8018bac:	463d      	mov	r5, r7
 8018bae:	f04f 0b00 	mov.w	fp, #0
 8018bb2:	6831      	ldr	r1, [r6, #0]
 8018bb4:	ab03      	add	r3, sp, #12
 8018bb6:	7809      	ldrb	r1, [r1, #0]
 8018bb8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8018bbc:	2202      	movs	r2, #2
 8018bbe:	f7e7 fb3f 	bl	8000240 <memchr>
 8018bc2:	b328      	cbz	r0, 8018c10 <_scanf_i+0xb8>
 8018bc4:	f1bb 0f01 	cmp.w	fp, #1
 8018bc8:	d159      	bne.n	8018c7e <_scanf_i+0x126>
 8018bca:	6862      	ldr	r2, [r4, #4]
 8018bcc:	b92a      	cbnz	r2, 8018bda <_scanf_i+0x82>
 8018bce:	6822      	ldr	r2, [r4, #0]
 8018bd0:	2108      	movs	r1, #8
 8018bd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8018bd6:	6061      	str	r1, [r4, #4]
 8018bd8:	6022      	str	r2, [r4, #0]
 8018bda:	6822      	ldr	r2, [r4, #0]
 8018bdc:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8018be0:	6022      	str	r2, [r4, #0]
 8018be2:	68a2      	ldr	r2, [r4, #8]
 8018be4:	1e51      	subs	r1, r2, #1
 8018be6:	60a1      	str	r1, [r4, #8]
 8018be8:	b192      	cbz	r2, 8018c10 <_scanf_i+0xb8>
 8018bea:	6832      	ldr	r2, [r6, #0]
 8018bec:	1c51      	adds	r1, r2, #1
 8018bee:	6031      	str	r1, [r6, #0]
 8018bf0:	7812      	ldrb	r2, [r2, #0]
 8018bf2:	f805 2b01 	strb.w	r2, [r5], #1
 8018bf6:	6872      	ldr	r2, [r6, #4]
 8018bf8:	3a01      	subs	r2, #1
 8018bfa:	2a00      	cmp	r2, #0
 8018bfc:	6072      	str	r2, [r6, #4]
 8018bfe:	dc07      	bgt.n	8018c10 <_scanf_i+0xb8>
 8018c00:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8018c04:	4631      	mov	r1, r6
 8018c06:	4650      	mov	r0, sl
 8018c08:	4790      	blx	r2
 8018c0a:	2800      	cmp	r0, #0
 8018c0c:	f040 8085 	bne.w	8018d1a <_scanf_i+0x1c2>
 8018c10:	f10b 0b01 	add.w	fp, fp, #1
 8018c14:	f1bb 0f03 	cmp.w	fp, #3
 8018c18:	d1cb      	bne.n	8018bb2 <_scanf_i+0x5a>
 8018c1a:	6863      	ldr	r3, [r4, #4]
 8018c1c:	b90b      	cbnz	r3, 8018c22 <_scanf_i+0xca>
 8018c1e:	230a      	movs	r3, #10
 8018c20:	6063      	str	r3, [r4, #4]
 8018c22:	6863      	ldr	r3, [r4, #4]
 8018c24:	4945      	ldr	r1, [pc, #276]	@ (8018d3c <_scanf_i+0x1e4>)
 8018c26:	6960      	ldr	r0, [r4, #20]
 8018c28:	1ac9      	subs	r1, r1, r3
 8018c2a:	f000 f935 	bl	8018e98 <__sccl>
 8018c2e:	f04f 0b00 	mov.w	fp, #0
 8018c32:	68a3      	ldr	r3, [r4, #8]
 8018c34:	6822      	ldr	r2, [r4, #0]
 8018c36:	2b00      	cmp	r3, #0
 8018c38:	d03d      	beq.n	8018cb6 <_scanf_i+0x15e>
 8018c3a:	6831      	ldr	r1, [r6, #0]
 8018c3c:	6960      	ldr	r0, [r4, #20]
 8018c3e:	f891 c000 	ldrb.w	ip, [r1]
 8018c42:	f810 000c 	ldrb.w	r0, [r0, ip]
 8018c46:	2800      	cmp	r0, #0
 8018c48:	d035      	beq.n	8018cb6 <_scanf_i+0x15e>
 8018c4a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8018c4e:	d124      	bne.n	8018c9a <_scanf_i+0x142>
 8018c50:	0510      	lsls	r0, r2, #20
 8018c52:	d522      	bpl.n	8018c9a <_scanf_i+0x142>
 8018c54:	f10b 0b01 	add.w	fp, fp, #1
 8018c58:	f1b9 0f00 	cmp.w	r9, #0
 8018c5c:	d003      	beq.n	8018c66 <_scanf_i+0x10e>
 8018c5e:	3301      	adds	r3, #1
 8018c60:	f109 39ff 	add.w	r9, r9, #4294967295
 8018c64:	60a3      	str	r3, [r4, #8]
 8018c66:	6873      	ldr	r3, [r6, #4]
 8018c68:	3b01      	subs	r3, #1
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	6073      	str	r3, [r6, #4]
 8018c6e:	dd1b      	ble.n	8018ca8 <_scanf_i+0x150>
 8018c70:	6833      	ldr	r3, [r6, #0]
 8018c72:	3301      	adds	r3, #1
 8018c74:	6033      	str	r3, [r6, #0]
 8018c76:	68a3      	ldr	r3, [r4, #8]
 8018c78:	3b01      	subs	r3, #1
 8018c7a:	60a3      	str	r3, [r4, #8]
 8018c7c:	e7d9      	b.n	8018c32 <_scanf_i+0xda>
 8018c7e:	f1bb 0f02 	cmp.w	fp, #2
 8018c82:	d1ae      	bne.n	8018be2 <_scanf_i+0x8a>
 8018c84:	6822      	ldr	r2, [r4, #0]
 8018c86:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8018c8a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8018c8e:	d1c4      	bne.n	8018c1a <_scanf_i+0xc2>
 8018c90:	2110      	movs	r1, #16
 8018c92:	6061      	str	r1, [r4, #4]
 8018c94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8018c98:	e7a2      	b.n	8018be0 <_scanf_i+0x88>
 8018c9a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8018c9e:	6022      	str	r2, [r4, #0]
 8018ca0:	780b      	ldrb	r3, [r1, #0]
 8018ca2:	f805 3b01 	strb.w	r3, [r5], #1
 8018ca6:	e7de      	b.n	8018c66 <_scanf_i+0x10e>
 8018ca8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8018cac:	4631      	mov	r1, r6
 8018cae:	4650      	mov	r0, sl
 8018cb0:	4798      	blx	r3
 8018cb2:	2800      	cmp	r0, #0
 8018cb4:	d0df      	beq.n	8018c76 <_scanf_i+0x11e>
 8018cb6:	6823      	ldr	r3, [r4, #0]
 8018cb8:	05d9      	lsls	r1, r3, #23
 8018cba:	d50d      	bpl.n	8018cd8 <_scanf_i+0x180>
 8018cbc:	42bd      	cmp	r5, r7
 8018cbe:	d909      	bls.n	8018cd4 <_scanf_i+0x17c>
 8018cc0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8018cc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8018cc8:	4632      	mov	r2, r6
 8018cca:	4650      	mov	r0, sl
 8018ccc:	4798      	blx	r3
 8018cce:	f105 39ff 	add.w	r9, r5, #4294967295
 8018cd2:	464d      	mov	r5, r9
 8018cd4:	42bd      	cmp	r5, r7
 8018cd6:	d028      	beq.n	8018d2a <_scanf_i+0x1d2>
 8018cd8:	6822      	ldr	r2, [r4, #0]
 8018cda:	f012 0210 	ands.w	r2, r2, #16
 8018cde:	d113      	bne.n	8018d08 <_scanf_i+0x1b0>
 8018ce0:	702a      	strb	r2, [r5, #0]
 8018ce2:	6863      	ldr	r3, [r4, #4]
 8018ce4:	9e01      	ldr	r6, [sp, #4]
 8018ce6:	4639      	mov	r1, r7
 8018ce8:	4650      	mov	r0, sl
 8018cea:	47b0      	blx	r6
 8018cec:	f8d8 3000 	ldr.w	r3, [r8]
 8018cf0:	6821      	ldr	r1, [r4, #0]
 8018cf2:	1d1a      	adds	r2, r3, #4
 8018cf4:	f8c8 2000 	str.w	r2, [r8]
 8018cf8:	f011 0f20 	tst.w	r1, #32
 8018cfc:	681b      	ldr	r3, [r3, #0]
 8018cfe:	d00f      	beq.n	8018d20 <_scanf_i+0x1c8>
 8018d00:	6018      	str	r0, [r3, #0]
 8018d02:	68e3      	ldr	r3, [r4, #12]
 8018d04:	3301      	adds	r3, #1
 8018d06:	60e3      	str	r3, [r4, #12]
 8018d08:	6923      	ldr	r3, [r4, #16]
 8018d0a:	1bed      	subs	r5, r5, r7
 8018d0c:	445d      	add	r5, fp
 8018d0e:	442b      	add	r3, r5
 8018d10:	6123      	str	r3, [r4, #16]
 8018d12:	2000      	movs	r0, #0
 8018d14:	b007      	add	sp, #28
 8018d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d1a:	f04f 0b00 	mov.w	fp, #0
 8018d1e:	e7ca      	b.n	8018cb6 <_scanf_i+0x15e>
 8018d20:	07ca      	lsls	r2, r1, #31
 8018d22:	bf4c      	ite	mi
 8018d24:	8018      	strhmi	r0, [r3, #0]
 8018d26:	6018      	strpl	r0, [r3, #0]
 8018d28:	e7eb      	b.n	8018d02 <_scanf_i+0x1aa>
 8018d2a:	2001      	movs	r0, #1
 8018d2c:	e7f2      	b.n	8018d14 <_scanf_i+0x1bc>
 8018d2e:	bf00      	nop
 8018d30:	0801ccd8 	.word	0x0801ccd8
 8018d34:	0801922d 	.word	0x0801922d
 8018d38:	0801930d 	.word	0x0801930d
 8018d3c:	0801cdf9 	.word	0x0801cdf9

08018d40 <__sflush_r>:
 8018d40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d48:	0716      	lsls	r6, r2, #28
 8018d4a:	4605      	mov	r5, r0
 8018d4c:	460c      	mov	r4, r1
 8018d4e:	d454      	bmi.n	8018dfa <__sflush_r+0xba>
 8018d50:	684b      	ldr	r3, [r1, #4]
 8018d52:	2b00      	cmp	r3, #0
 8018d54:	dc02      	bgt.n	8018d5c <__sflush_r+0x1c>
 8018d56:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018d58:	2b00      	cmp	r3, #0
 8018d5a:	dd48      	ble.n	8018dee <__sflush_r+0xae>
 8018d5c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018d5e:	2e00      	cmp	r6, #0
 8018d60:	d045      	beq.n	8018dee <__sflush_r+0xae>
 8018d62:	2300      	movs	r3, #0
 8018d64:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018d68:	682f      	ldr	r7, [r5, #0]
 8018d6a:	6a21      	ldr	r1, [r4, #32]
 8018d6c:	602b      	str	r3, [r5, #0]
 8018d6e:	d030      	beq.n	8018dd2 <__sflush_r+0x92>
 8018d70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018d72:	89a3      	ldrh	r3, [r4, #12]
 8018d74:	0759      	lsls	r1, r3, #29
 8018d76:	d505      	bpl.n	8018d84 <__sflush_r+0x44>
 8018d78:	6863      	ldr	r3, [r4, #4]
 8018d7a:	1ad2      	subs	r2, r2, r3
 8018d7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018d7e:	b10b      	cbz	r3, 8018d84 <__sflush_r+0x44>
 8018d80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018d82:	1ad2      	subs	r2, r2, r3
 8018d84:	2300      	movs	r3, #0
 8018d86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018d88:	6a21      	ldr	r1, [r4, #32]
 8018d8a:	4628      	mov	r0, r5
 8018d8c:	47b0      	blx	r6
 8018d8e:	1c43      	adds	r3, r0, #1
 8018d90:	89a3      	ldrh	r3, [r4, #12]
 8018d92:	d106      	bne.n	8018da2 <__sflush_r+0x62>
 8018d94:	6829      	ldr	r1, [r5, #0]
 8018d96:	291d      	cmp	r1, #29
 8018d98:	d82b      	bhi.n	8018df2 <__sflush_r+0xb2>
 8018d9a:	4a2a      	ldr	r2, [pc, #168]	@ (8018e44 <__sflush_r+0x104>)
 8018d9c:	40ca      	lsrs	r2, r1
 8018d9e:	07d6      	lsls	r6, r2, #31
 8018da0:	d527      	bpl.n	8018df2 <__sflush_r+0xb2>
 8018da2:	2200      	movs	r2, #0
 8018da4:	6062      	str	r2, [r4, #4]
 8018da6:	04d9      	lsls	r1, r3, #19
 8018da8:	6922      	ldr	r2, [r4, #16]
 8018daa:	6022      	str	r2, [r4, #0]
 8018dac:	d504      	bpl.n	8018db8 <__sflush_r+0x78>
 8018dae:	1c42      	adds	r2, r0, #1
 8018db0:	d101      	bne.n	8018db6 <__sflush_r+0x76>
 8018db2:	682b      	ldr	r3, [r5, #0]
 8018db4:	b903      	cbnz	r3, 8018db8 <__sflush_r+0x78>
 8018db6:	6560      	str	r0, [r4, #84]	@ 0x54
 8018db8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018dba:	602f      	str	r7, [r5, #0]
 8018dbc:	b1b9      	cbz	r1, 8018dee <__sflush_r+0xae>
 8018dbe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018dc2:	4299      	cmp	r1, r3
 8018dc4:	d002      	beq.n	8018dcc <__sflush_r+0x8c>
 8018dc6:	4628      	mov	r0, r5
 8018dc8:	f7ff f82c 	bl	8017e24 <_free_r>
 8018dcc:	2300      	movs	r3, #0
 8018dce:	6363      	str	r3, [r4, #52]	@ 0x34
 8018dd0:	e00d      	b.n	8018dee <__sflush_r+0xae>
 8018dd2:	2301      	movs	r3, #1
 8018dd4:	4628      	mov	r0, r5
 8018dd6:	47b0      	blx	r6
 8018dd8:	4602      	mov	r2, r0
 8018dda:	1c50      	adds	r0, r2, #1
 8018ddc:	d1c9      	bne.n	8018d72 <__sflush_r+0x32>
 8018dde:	682b      	ldr	r3, [r5, #0]
 8018de0:	2b00      	cmp	r3, #0
 8018de2:	d0c6      	beq.n	8018d72 <__sflush_r+0x32>
 8018de4:	2b1d      	cmp	r3, #29
 8018de6:	d001      	beq.n	8018dec <__sflush_r+0xac>
 8018de8:	2b16      	cmp	r3, #22
 8018dea:	d11e      	bne.n	8018e2a <__sflush_r+0xea>
 8018dec:	602f      	str	r7, [r5, #0]
 8018dee:	2000      	movs	r0, #0
 8018df0:	e022      	b.n	8018e38 <__sflush_r+0xf8>
 8018df2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018df6:	b21b      	sxth	r3, r3
 8018df8:	e01b      	b.n	8018e32 <__sflush_r+0xf2>
 8018dfa:	690f      	ldr	r7, [r1, #16]
 8018dfc:	2f00      	cmp	r7, #0
 8018dfe:	d0f6      	beq.n	8018dee <__sflush_r+0xae>
 8018e00:	0793      	lsls	r3, r2, #30
 8018e02:	680e      	ldr	r6, [r1, #0]
 8018e04:	bf08      	it	eq
 8018e06:	694b      	ldreq	r3, [r1, #20]
 8018e08:	600f      	str	r7, [r1, #0]
 8018e0a:	bf18      	it	ne
 8018e0c:	2300      	movne	r3, #0
 8018e0e:	eba6 0807 	sub.w	r8, r6, r7
 8018e12:	608b      	str	r3, [r1, #8]
 8018e14:	f1b8 0f00 	cmp.w	r8, #0
 8018e18:	dde9      	ble.n	8018dee <__sflush_r+0xae>
 8018e1a:	6a21      	ldr	r1, [r4, #32]
 8018e1c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8018e1e:	4643      	mov	r3, r8
 8018e20:	463a      	mov	r2, r7
 8018e22:	4628      	mov	r0, r5
 8018e24:	47b0      	blx	r6
 8018e26:	2800      	cmp	r0, #0
 8018e28:	dc08      	bgt.n	8018e3c <__sflush_r+0xfc>
 8018e2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018e2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018e32:	81a3      	strh	r3, [r4, #12]
 8018e34:	f04f 30ff 	mov.w	r0, #4294967295
 8018e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e3c:	4407      	add	r7, r0
 8018e3e:	eba8 0800 	sub.w	r8, r8, r0
 8018e42:	e7e7      	b.n	8018e14 <__sflush_r+0xd4>
 8018e44:	20400001 	.word	0x20400001

08018e48 <_fflush_r>:
 8018e48:	b538      	push	{r3, r4, r5, lr}
 8018e4a:	690b      	ldr	r3, [r1, #16]
 8018e4c:	4605      	mov	r5, r0
 8018e4e:	460c      	mov	r4, r1
 8018e50:	b913      	cbnz	r3, 8018e58 <_fflush_r+0x10>
 8018e52:	2500      	movs	r5, #0
 8018e54:	4628      	mov	r0, r5
 8018e56:	bd38      	pop	{r3, r4, r5, pc}
 8018e58:	b118      	cbz	r0, 8018e62 <_fflush_r+0x1a>
 8018e5a:	6a03      	ldr	r3, [r0, #32]
 8018e5c:	b90b      	cbnz	r3, 8018e62 <_fflush_r+0x1a>
 8018e5e:	f7fe fdc3 	bl	80179e8 <__sinit>
 8018e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018e66:	2b00      	cmp	r3, #0
 8018e68:	d0f3      	beq.n	8018e52 <_fflush_r+0xa>
 8018e6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018e6c:	07d0      	lsls	r0, r2, #31
 8018e6e:	d404      	bmi.n	8018e7a <_fflush_r+0x32>
 8018e70:	0599      	lsls	r1, r3, #22
 8018e72:	d402      	bmi.n	8018e7a <_fflush_r+0x32>
 8018e74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018e76:	f7fe ffc4 	bl	8017e02 <__retarget_lock_acquire_recursive>
 8018e7a:	4628      	mov	r0, r5
 8018e7c:	4621      	mov	r1, r4
 8018e7e:	f7ff ff5f 	bl	8018d40 <__sflush_r>
 8018e82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018e84:	07da      	lsls	r2, r3, #31
 8018e86:	4605      	mov	r5, r0
 8018e88:	d4e4      	bmi.n	8018e54 <_fflush_r+0xc>
 8018e8a:	89a3      	ldrh	r3, [r4, #12]
 8018e8c:	059b      	lsls	r3, r3, #22
 8018e8e:	d4e1      	bmi.n	8018e54 <_fflush_r+0xc>
 8018e90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018e92:	f7fe ffb7 	bl	8017e04 <__retarget_lock_release_recursive>
 8018e96:	e7dd      	b.n	8018e54 <_fflush_r+0xc>

08018e98 <__sccl>:
 8018e98:	b570      	push	{r4, r5, r6, lr}
 8018e9a:	780b      	ldrb	r3, [r1, #0]
 8018e9c:	4604      	mov	r4, r0
 8018e9e:	2b5e      	cmp	r3, #94	@ 0x5e
 8018ea0:	bf0b      	itete	eq
 8018ea2:	784b      	ldrbeq	r3, [r1, #1]
 8018ea4:	1c4a      	addne	r2, r1, #1
 8018ea6:	1c8a      	addeq	r2, r1, #2
 8018ea8:	2100      	movne	r1, #0
 8018eaa:	bf08      	it	eq
 8018eac:	2101      	moveq	r1, #1
 8018eae:	3801      	subs	r0, #1
 8018eb0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8018eb4:	f800 1f01 	strb.w	r1, [r0, #1]!
 8018eb8:	42a8      	cmp	r0, r5
 8018eba:	d1fb      	bne.n	8018eb4 <__sccl+0x1c>
 8018ebc:	b90b      	cbnz	r3, 8018ec2 <__sccl+0x2a>
 8018ebe:	1e50      	subs	r0, r2, #1
 8018ec0:	bd70      	pop	{r4, r5, r6, pc}
 8018ec2:	f081 0101 	eor.w	r1, r1, #1
 8018ec6:	54e1      	strb	r1, [r4, r3]
 8018ec8:	4610      	mov	r0, r2
 8018eca:	4602      	mov	r2, r0
 8018ecc:	f812 5b01 	ldrb.w	r5, [r2], #1
 8018ed0:	2d2d      	cmp	r5, #45	@ 0x2d
 8018ed2:	d005      	beq.n	8018ee0 <__sccl+0x48>
 8018ed4:	2d5d      	cmp	r5, #93	@ 0x5d
 8018ed6:	d016      	beq.n	8018f06 <__sccl+0x6e>
 8018ed8:	2d00      	cmp	r5, #0
 8018eda:	d0f1      	beq.n	8018ec0 <__sccl+0x28>
 8018edc:	462b      	mov	r3, r5
 8018ede:	e7f2      	b.n	8018ec6 <__sccl+0x2e>
 8018ee0:	7846      	ldrb	r6, [r0, #1]
 8018ee2:	2e5d      	cmp	r6, #93	@ 0x5d
 8018ee4:	d0fa      	beq.n	8018edc <__sccl+0x44>
 8018ee6:	42b3      	cmp	r3, r6
 8018ee8:	dcf8      	bgt.n	8018edc <__sccl+0x44>
 8018eea:	3002      	adds	r0, #2
 8018eec:	461a      	mov	r2, r3
 8018eee:	3201      	adds	r2, #1
 8018ef0:	4296      	cmp	r6, r2
 8018ef2:	54a1      	strb	r1, [r4, r2]
 8018ef4:	dcfb      	bgt.n	8018eee <__sccl+0x56>
 8018ef6:	1af2      	subs	r2, r6, r3
 8018ef8:	3a01      	subs	r2, #1
 8018efa:	1c5d      	adds	r5, r3, #1
 8018efc:	42b3      	cmp	r3, r6
 8018efe:	bfa8      	it	ge
 8018f00:	2200      	movge	r2, #0
 8018f02:	18ab      	adds	r3, r5, r2
 8018f04:	e7e1      	b.n	8018eca <__sccl+0x32>
 8018f06:	4610      	mov	r0, r2
 8018f08:	e7da      	b.n	8018ec0 <__sccl+0x28>

08018f0a <__submore>:
 8018f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f0e:	460c      	mov	r4, r1
 8018f10:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8018f12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018f16:	4299      	cmp	r1, r3
 8018f18:	d11d      	bne.n	8018f56 <__submore+0x4c>
 8018f1a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8018f1e:	f7fe fc4b 	bl	80177b8 <_malloc_r>
 8018f22:	b918      	cbnz	r0, 8018f2c <__submore+0x22>
 8018f24:	f04f 30ff 	mov.w	r0, #4294967295
 8018f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018f30:	63a3      	str	r3, [r4, #56]	@ 0x38
 8018f32:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8018f36:	6360      	str	r0, [r4, #52]	@ 0x34
 8018f38:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8018f3c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8018f40:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8018f44:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8018f48:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8018f4c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8018f50:	6020      	str	r0, [r4, #0]
 8018f52:	2000      	movs	r0, #0
 8018f54:	e7e8      	b.n	8018f28 <__submore+0x1e>
 8018f56:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8018f58:	0077      	lsls	r7, r6, #1
 8018f5a:	463a      	mov	r2, r7
 8018f5c:	f000 f8be 	bl	80190dc <_realloc_r>
 8018f60:	4605      	mov	r5, r0
 8018f62:	2800      	cmp	r0, #0
 8018f64:	d0de      	beq.n	8018f24 <__submore+0x1a>
 8018f66:	eb00 0806 	add.w	r8, r0, r6
 8018f6a:	4601      	mov	r1, r0
 8018f6c:	4632      	mov	r2, r6
 8018f6e:	4640      	mov	r0, r8
 8018f70:	f7fe ff49 	bl	8017e06 <memcpy>
 8018f74:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8018f78:	f8c4 8000 	str.w	r8, [r4]
 8018f7c:	e7e9      	b.n	8018f52 <__submore+0x48>

08018f7e <__swbuf_r>:
 8018f7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f80:	460e      	mov	r6, r1
 8018f82:	4614      	mov	r4, r2
 8018f84:	4605      	mov	r5, r0
 8018f86:	b118      	cbz	r0, 8018f90 <__swbuf_r+0x12>
 8018f88:	6a03      	ldr	r3, [r0, #32]
 8018f8a:	b90b      	cbnz	r3, 8018f90 <__swbuf_r+0x12>
 8018f8c:	f7fe fd2c 	bl	80179e8 <__sinit>
 8018f90:	69a3      	ldr	r3, [r4, #24]
 8018f92:	60a3      	str	r3, [r4, #8]
 8018f94:	89a3      	ldrh	r3, [r4, #12]
 8018f96:	071a      	lsls	r2, r3, #28
 8018f98:	d501      	bpl.n	8018f9e <__swbuf_r+0x20>
 8018f9a:	6923      	ldr	r3, [r4, #16]
 8018f9c:	b943      	cbnz	r3, 8018fb0 <__swbuf_r+0x32>
 8018f9e:	4621      	mov	r1, r4
 8018fa0:	4628      	mov	r0, r5
 8018fa2:	f000 f82b 	bl	8018ffc <__swsetup_r>
 8018fa6:	b118      	cbz	r0, 8018fb0 <__swbuf_r+0x32>
 8018fa8:	f04f 37ff 	mov.w	r7, #4294967295
 8018fac:	4638      	mov	r0, r7
 8018fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018fb0:	6823      	ldr	r3, [r4, #0]
 8018fb2:	6922      	ldr	r2, [r4, #16]
 8018fb4:	1a98      	subs	r0, r3, r2
 8018fb6:	6963      	ldr	r3, [r4, #20]
 8018fb8:	b2f6      	uxtb	r6, r6
 8018fba:	4283      	cmp	r3, r0
 8018fbc:	4637      	mov	r7, r6
 8018fbe:	dc05      	bgt.n	8018fcc <__swbuf_r+0x4e>
 8018fc0:	4621      	mov	r1, r4
 8018fc2:	4628      	mov	r0, r5
 8018fc4:	f7ff ff40 	bl	8018e48 <_fflush_r>
 8018fc8:	2800      	cmp	r0, #0
 8018fca:	d1ed      	bne.n	8018fa8 <__swbuf_r+0x2a>
 8018fcc:	68a3      	ldr	r3, [r4, #8]
 8018fce:	3b01      	subs	r3, #1
 8018fd0:	60a3      	str	r3, [r4, #8]
 8018fd2:	6823      	ldr	r3, [r4, #0]
 8018fd4:	1c5a      	adds	r2, r3, #1
 8018fd6:	6022      	str	r2, [r4, #0]
 8018fd8:	701e      	strb	r6, [r3, #0]
 8018fda:	6962      	ldr	r2, [r4, #20]
 8018fdc:	1c43      	adds	r3, r0, #1
 8018fde:	429a      	cmp	r2, r3
 8018fe0:	d004      	beq.n	8018fec <__swbuf_r+0x6e>
 8018fe2:	89a3      	ldrh	r3, [r4, #12]
 8018fe4:	07db      	lsls	r3, r3, #31
 8018fe6:	d5e1      	bpl.n	8018fac <__swbuf_r+0x2e>
 8018fe8:	2e0a      	cmp	r6, #10
 8018fea:	d1df      	bne.n	8018fac <__swbuf_r+0x2e>
 8018fec:	4621      	mov	r1, r4
 8018fee:	4628      	mov	r0, r5
 8018ff0:	f7ff ff2a 	bl	8018e48 <_fflush_r>
 8018ff4:	2800      	cmp	r0, #0
 8018ff6:	d0d9      	beq.n	8018fac <__swbuf_r+0x2e>
 8018ff8:	e7d6      	b.n	8018fa8 <__swbuf_r+0x2a>
	...

08018ffc <__swsetup_r>:
 8018ffc:	b538      	push	{r3, r4, r5, lr}
 8018ffe:	4b29      	ldr	r3, [pc, #164]	@ (80190a4 <__swsetup_r+0xa8>)
 8019000:	4605      	mov	r5, r0
 8019002:	6818      	ldr	r0, [r3, #0]
 8019004:	460c      	mov	r4, r1
 8019006:	b118      	cbz	r0, 8019010 <__swsetup_r+0x14>
 8019008:	6a03      	ldr	r3, [r0, #32]
 801900a:	b90b      	cbnz	r3, 8019010 <__swsetup_r+0x14>
 801900c:	f7fe fcec 	bl	80179e8 <__sinit>
 8019010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019014:	0719      	lsls	r1, r3, #28
 8019016:	d422      	bmi.n	801905e <__swsetup_r+0x62>
 8019018:	06da      	lsls	r2, r3, #27
 801901a:	d407      	bmi.n	801902c <__swsetup_r+0x30>
 801901c:	2209      	movs	r2, #9
 801901e:	602a      	str	r2, [r5, #0]
 8019020:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019024:	81a3      	strh	r3, [r4, #12]
 8019026:	f04f 30ff 	mov.w	r0, #4294967295
 801902a:	e033      	b.n	8019094 <__swsetup_r+0x98>
 801902c:	0758      	lsls	r0, r3, #29
 801902e:	d512      	bpl.n	8019056 <__swsetup_r+0x5a>
 8019030:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019032:	b141      	cbz	r1, 8019046 <__swsetup_r+0x4a>
 8019034:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019038:	4299      	cmp	r1, r3
 801903a:	d002      	beq.n	8019042 <__swsetup_r+0x46>
 801903c:	4628      	mov	r0, r5
 801903e:	f7fe fef1 	bl	8017e24 <_free_r>
 8019042:	2300      	movs	r3, #0
 8019044:	6363      	str	r3, [r4, #52]	@ 0x34
 8019046:	89a3      	ldrh	r3, [r4, #12]
 8019048:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801904c:	81a3      	strh	r3, [r4, #12]
 801904e:	2300      	movs	r3, #0
 8019050:	6063      	str	r3, [r4, #4]
 8019052:	6923      	ldr	r3, [r4, #16]
 8019054:	6023      	str	r3, [r4, #0]
 8019056:	89a3      	ldrh	r3, [r4, #12]
 8019058:	f043 0308 	orr.w	r3, r3, #8
 801905c:	81a3      	strh	r3, [r4, #12]
 801905e:	6923      	ldr	r3, [r4, #16]
 8019060:	b94b      	cbnz	r3, 8019076 <__swsetup_r+0x7a>
 8019062:	89a3      	ldrh	r3, [r4, #12]
 8019064:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019068:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801906c:	d003      	beq.n	8019076 <__swsetup_r+0x7a>
 801906e:	4621      	mov	r1, r4
 8019070:	4628      	mov	r0, r5
 8019072:	f000 f973 	bl	801935c <__smakebuf_r>
 8019076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801907a:	f013 0201 	ands.w	r2, r3, #1
 801907e:	d00a      	beq.n	8019096 <__swsetup_r+0x9a>
 8019080:	2200      	movs	r2, #0
 8019082:	60a2      	str	r2, [r4, #8]
 8019084:	6962      	ldr	r2, [r4, #20]
 8019086:	4252      	negs	r2, r2
 8019088:	61a2      	str	r2, [r4, #24]
 801908a:	6922      	ldr	r2, [r4, #16]
 801908c:	b942      	cbnz	r2, 80190a0 <__swsetup_r+0xa4>
 801908e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8019092:	d1c5      	bne.n	8019020 <__swsetup_r+0x24>
 8019094:	bd38      	pop	{r3, r4, r5, pc}
 8019096:	0799      	lsls	r1, r3, #30
 8019098:	bf58      	it	pl
 801909a:	6962      	ldrpl	r2, [r4, #20]
 801909c:	60a2      	str	r2, [r4, #8]
 801909e:	e7f4      	b.n	801908a <__swsetup_r+0x8e>
 80190a0:	2000      	movs	r0, #0
 80190a2:	e7f7      	b.n	8019094 <__swsetup_r+0x98>
 80190a4:	20000084 	.word	0x20000084

080190a8 <memmove>:
 80190a8:	4288      	cmp	r0, r1
 80190aa:	b510      	push	{r4, lr}
 80190ac:	eb01 0402 	add.w	r4, r1, r2
 80190b0:	d902      	bls.n	80190b8 <memmove+0x10>
 80190b2:	4284      	cmp	r4, r0
 80190b4:	4623      	mov	r3, r4
 80190b6:	d807      	bhi.n	80190c8 <memmove+0x20>
 80190b8:	1e43      	subs	r3, r0, #1
 80190ba:	42a1      	cmp	r1, r4
 80190bc:	d008      	beq.n	80190d0 <memmove+0x28>
 80190be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80190c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80190c6:	e7f8      	b.n	80190ba <memmove+0x12>
 80190c8:	4402      	add	r2, r0
 80190ca:	4601      	mov	r1, r0
 80190cc:	428a      	cmp	r2, r1
 80190ce:	d100      	bne.n	80190d2 <memmove+0x2a>
 80190d0:	bd10      	pop	{r4, pc}
 80190d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80190d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80190da:	e7f7      	b.n	80190cc <memmove+0x24>

080190dc <_realloc_r>:
 80190dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190e0:	4607      	mov	r7, r0
 80190e2:	4614      	mov	r4, r2
 80190e4:	460d      	mov	r5, r1
 80190e6:	b921      	cbnz	r1, 80190f2 <_realloc_r+0x16>
 80190e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80190ec:	4611      	mov	r1, r2
 80190ee:	f7fe bb63 	b.w	80177b8 <_malloc_r>
 80190f2:	b92a      	cbnz	r2, 8019100 <_realloc_r+0x24>
 80190f4:	f7fe fe96 	bl	8017e24 <_free_r>
 80190f8:	4625      	mov	r5, r4
 80190fa:	4628      	mov	r0, r5
 80190fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019100:	f000 f98a 	bl	8019418 <_malloc_usable_size_r>
 8019104:	4284      	cmp	r4, r0
 8019106:	4606      	mov	r6, r0
 8019108:	d802      	bhi.n	8019110 <_realloc_r+0x34>
 801910a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801910e:	d8f4      	bhi.n	80190fa <_realloc_r+0x1e>
 8019110:	4621      	mov	r1, r4
 8019112:	4638      	mov	r0, r7
 8019114:	f7fe fb50 	bl	80177b8 <_malloc_r>
 8019118:	4680      	mov	r8, r0
 801911a:	b908      	cbnz	r0, 8019120 <_realloc_r+0x44>
 801911c:	4645      	mov	r5, r8
 801911e:	e7ec      	b.n	80190fa <_realloc_r+0x1e>
 8019120:	42b4      	cmp	r4, r6
 8019122:	4622      	mov	r2, r4
 8019124:	4629      	mov	r1, r5
 8019126:	bf28      	it	cs
 8019128:	4632      	movcs	r2, r6
 801912a:	f7fe fe6c 	bl	8017e06 <memcpy>
 801912e:	4629      	mov	r1, r5
 8019130:	4638      	mov	r0, r7
 8019132:	f7fe fe77 	bl	8017e24 <_free_r>
 8019136:	e7f1      	b.n	801911c <_realloc_r+0x40>

08019138 <_strtol_l.isra.0>:
 8019138:	2b24      	cmp	r3, #36	@ 0x24
 801913a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801913e:	4686      	mov	lr, r0
 8019140:	4690      	mov	r8, r2
 8019142:	d801      	bhi.n	8019148 <_strtol_l.isra.0+0x10>
 8019144:	2b01      	cmp	r3, #1
 8019146:	d106      	bne.n	8019156 <_strtol_l.isra.0+0x1e>
 8019148:	f7fe fe30 	bl	8017dac <__errno>
 801914c:	2316      	movs	r3, #22
 801914e:	6003      	str	r3, [r0, #0]
 8019150:	2000      	movs	r0, #0
 8019152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019156:	4834      	ldr	r0, [pc, #208]	@ (8019228 <_strtol_l.isra.0+0xf0>)
 8019158:	460d      	mov	r5, r1
 801915a:	462a      	mov	r2, r5
 801915c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019160:	5d06      	ldrb	r6, [r0, r4]
 8019162:	f016 0608 	ands.w	r6, r6, #8
 8019166:	d1f8      	bne.n	801915a <_strtol_l.isra.0+0x22>
 8019168:	2c2d      	cmp	r4, #45	@ 0x2d
 801916a:	d110      	bne.n	801918e <_strtol_l.isra.0+0x56>
 801916c:	782c      	ldrb	r4, [r5, #0]
 801916e:	2601      	movs	r6, #1
 8019170:	1c95      	adds	r5, r2, #2
 8019172:	f033 0210 	bics.w	r2, r3, #16
 8019176:	d115      	bne.n	80191a4 <_strtol_l.isra.0+0x6c>
 8019178:	2c30      	cmp	r4, #48	@ 0x30
 801917a:	d10d      	bne.n	8019198 <_strtol_l.isra.0+0x60>
 801917c:	782a      	ldrb	r2, [r5, #0]
 801917e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8019182:	2a58      	cmp	r2, #88	@ 0x58
 8019184:	d108      	bne.n	8019198 <_strtol_l.isra.0+0x60>
 8019186:	786c      	ldrb	r4, [r5, #1]
 8019188:	3502      	adds	r5, #2
 801918a:	2310      	movs	r3, #16
 801918c:	e00a      	b.n	80191a4 <_strtol_l.isra.0+0x6c>
 801918e:	2c2b      	cmp	r4, #43	@ 0x2b
 8019190:	bf04      	itt	eq
 8019192:	782c      	ldrbeq	r4, [r5, #0]
 8019194:	1c95      	addeq	r5, r2, #2
 8019196:	e7ec      	b.n	8019172 <_strtol_l.isra.0+0x3a>
 8019198:	2b00      	cmp	r3, #0
 801919a:	d1f6      	bne.n	801918a <_strtol_l.isra.0+0x52>
 801919c:	2c30      	cmp	r4, #48	@ 0x30
 801919e:	bf14      	ite	ne
 80191a0:	230a      	movne	r3, #10
 80191a2:	2308      	moveq	r3, #8
 80191a4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80191a8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80191ac:	2200      	movs	r2, #0
 80191ae:	fbbc f9f3 	udiv	r9, ip, r3
 80191b2:	4610      	mov	r0, r2
 80191b4:	fb03 ca19 	mls	sl, r3, r9, ip
 80191b8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80191bc:	2f09      	cmp	r7, #9
 80191be:	d80f      	bhi.n	80191e0 <_strtol_l.isra.0+0xa8>
 80191c0:	463c      	mov	r4, r7
 80191c2:	42a3      	cmp	r3, r4
 80191c4:	dd1b      	ble.n	80191fe <_strtol_l.isra.0+0xc6>
 80191c6:	1c57      	adds	r7, r2, #1
 80191c8:	d007      	beq.n	80191da <_strtol_l.isra.0+0xa2>
 80191ca:	4581      	cmp	r9, r0
 80191cc:	d314      	bcc.n	80191f8 <_strtol_l.isra.0+0xc0>
 80191ce:	d101      	bne.n	80191d4 <_strtol_l.isra.0+0x9c>
 80191d0:	45a2      	cmp	sl, r4
 80191d2:	db11      	blt.n	80191f8 <_strtol_l.isra.0+0xc0>
 80191d4:	fb00 4003 	mla	r0, r0, r3, r4
 80191d8:	2201      	movs	r2, #1
 80191da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80191de:	e7eb      	b.n	80191b8 <_strtol_l.isra.0+0x80>
 80191e0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80191e4:	2f19      	cmp	r7, #25
 80191e6:	d801      	bhi.n	80191ec <_strtol_l.isra.0+0xb4>
 80191e8:	3c37      	subs	r4, #55	@ 0x37
 80191ea:	e7ea      	b.n	80191c2 <_strtol_l.isra.0+0x8a>
 80191ec:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80191f0:	2f19      	cmp	r7, #25
 80191f2:	d804      	bhi.n	80191fe <_strtol_l.isra.0+0xc6>
 80191f4:	3c57      	subs	r4, #87	@ 0x57
 80191f6:	e7e4      	b.n	80191c2 <_strtol_l.isra.0+0x8a>
 80191f8:	f04f 32ff 	mov.w	r2, #4294967295
 80191fc:	e7ed      	b.n	80191da <_strtol_l.isra.0+0xa2>
 80191fe:	1c53      	adds	r3, r2, #1
 8019200:	d108      	bne.n	8019214 <_strtol_l.isra.0+0xdc>
 8019202:	2322      	movs	r3, #34	@ 0x22
 8019204:	f8ce 3000 	str.w	r3, [lr]
 8019208:	4660      	mov	r0, ip
 801920a:	f1b8 0f00 	cmp.w	r8, #0
 801920e:	d0a0      	beq.n	8019152 <_strtol_l.isra.0+0x1a>
 8019210:	1e69      	subs	r1, r5, #1
 8019212:	e006      	b.n	8019222 <_strtol_l.isra.0+0xea>
 8019214:	b106      	cbz	r6, 8019218 <_strtol_l.isra.0+0xe0>
 8019216:	4240      	negs	r0, r0
 8019218:	f1b8 0f00 	cmp.w	r8, #0
 801921c:	d099      	beq.n	8019152 <_strtol_l.isra.0+0x1a>
 801921e:	2a00      	cmp	r2, #0
 8019220:	d1f6      	bne.n	8019210 <_strtol_l.isra.0+0xd8>
 8019222:	f8c8 1000 	str.w	r1, [r8]
 8019226:	e794      	b.n	8019152 <_strtol_l.isra.0+0x1a>
 8019228:	0801ce05 	.word	0x0801ce05

0801922c <_strtol_r>:
 801922c:	f7ff bf84 	b.w	8019138 <_strtol_l.isra.0>

08019230 <_strtoul_l.isra.0>:
 8019230:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019234:	4e34      	ldr	r6, [pc, #208]	@ (8019308 <_strtoul_l.isra.0+0xd8>)
 8019236:	4686      	mov	lr, r0
 8019238:	460d      	mov	r5, r1
 801923a:	4628      	mov	r0, r5
 801923c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019240:	5d37      	ldrb	r7, [r6, r4]
 8019242:	f017 0708 	ands.w	r7, r7, #8
 8019246:	d1f8      	bne.n	801923a <_strtoul_l.isra.0+0xa>
 8019248:	2c2d      	cmp	r4, #45	@ 0x2d
 801924a:	d110      	bne.n	801926e <_strtoul_l.isra.0+0x3e>
 801924c:	782c      	ldrb	r4, [r5, #0]
 801924e:	2701      	movs	r7, #1
 8019250:	1c85      	adds	r5, r0, #2
 8019252:	f033 0010 	bics.w	r0, r3, #16
 8019256:	d115      	bne.n	8019284 <_strtoul_l.isra.0+0x54>
 8019258:	2c30      	cmp	r4, #48	@ 0x30
 801925a:	d10d      	bne.n	8019278 <_strtoul_l.isra.0+0x48>
 801925c:	7828      	ldrb	r0, [r5, #0]
 801925e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8019262:	2858      	cmp	r0, #88	@ 0x58
 8019264:	d108      	bne.n	8019278 <_strtoul_l.isra.0+0x48>
 8019266:	786c      	ldrb	r4, [r5, #1]
 8019268:	3502      	adds	r5, #2
 801926a:	2310      	movs	r3, #16
 801926c:	e00a      	b.n	8019284 <_strtoul_l.isra.0+0x54>
 801926e:	2c2b      	cmp	r4, #43	@ 0x2b
 8019270:	bf04      	itt	eq
 8019272:	782c      	ldrbeq	r4, [r5, #0]
 8019274:	1c85      	addeq	r5, r0, #2
 8019276:	e7ec      	b.n	8019252 <_strtoul_l.isra.0+0x22>
 8019278:	2b00      	cmp	r3, #0
 801927a:	d1f6      	bne.n	801926a <_strtoul_l.isra.0+0x3a>
 801927c:	2c30      	cmp	r4, #48	@ 0x30
 801927e:	bf14      	ite	ne
 8019280:	230a      	movne	r3, #10
 8019282:	2308      	moveq	r3, #8
 8019284:	f04f 38ff 	mov.w	r8, #4294967295
 8019288:	2600      	movs	r6, #0
 801928a:	fbb8 f8f3 	udiv	r8, r8, r3
 801928e:	fb03 f908 	mul.w	r9, r3, r8
 8019292:	ea6f 0909 	mvn.w	r9, r9
 8019296:	4630      	mov	r0, r6
 8019298:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801929c:	f1bc 0f09 	cmp.w	ip, #9
 80192a0:	d810      	bhi.n	80192c4 <_strtoul_l.isra.0+0x94>
 80192a2:	4664      	mov	r4, ip
 80192a4:	42a3      	cmp	r3, r4
 80192a6:	dd1e      	ble.n	80192e6 <_strtoul_l.isra.0+0xb6>
 80192a8:	f1b6 3fff 	cmp.w	r6, #4294967295
 80192ac:	d007      	beq.n	80192be <_strtoul_l.isra.0+0x8e>
 80192ae:	4580      	cmp	r8, r0
 80192b0:	d316      	bcc.n	80192e0 <_strtoul_l.isra.0+0xb0>
 80192b2:	d101      	bne.n	80192b8 <_strtoul_l.isra.0+0x88>
 80192b4:	45a1      	cmp	r9, r4
 80192b6:	db13      	blt.n	80192e0 <_strtoul_l.isra.0+0xb0>
 80192b8:	fb00 4003 	mla	r0, r0, r3, r4
 80192bc:	2601      	movs	r6, #1
 80192be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80192c2:	e7e9      	b.n	8019298 <_strtoul_l.isra.0+0x68>
 80192c4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80192c8:	f1bc 0f19 	cmp.w	ip, #25
 80192cc:	d801      	bhi.n	80192d2 <_strtoul_l.isra.0+0xa2>
 80192ce:	3c37      	subs	r4, #55	@ 0x37
 80192d0:	e7e8      	b.n	80192a4 <_strtoul_l.isra.0+0x74>
 80192d2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80192d6:	f1bc 0f19 	cmp.w	ip, #25
 80192da:	d804      	bhi.n	80192e6 <_strtoul_l.isra.0+0xb6>
 80192dc:	3c57      	subs	r4, #87	@ 0x57
 80192de:	e7e1      	b.n	80192a4 <_strtoul_l.isra.0+0x74>
 80192e0:	f04f 36ff 	mov.w	r6, #4294967295
 80192e4:	e7eb      	b.n	80192be <_strtoul_l.isra.0+0x8e>
 80192e6:	1c73      	adds	r3, r6, #1
 80192e8:	d106      	bne.n	80192f8 <_strtoul_l.isra.0+0xc8>
 80192ea:	2322      	movs	r3, #34	@ 0x22
 80192ec:	f8ce 3000 	str.w	r3, [lr]
 80192f0:	4630      	mov	r0, r6
 80192f2:	b932      	cbnz	r2, 8019302 <_strtoul_l.isra.0+0xd2>
 80192f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80192f8:	b107      	cbz	r7, 80192fc <_strtoul_l.isra.0+0xcc>
 80192fa:	4240      	negs	r0, r0
 80192fc:	2a00      	cmp	r2, #0
 80192fe:	d0f9      	beq.n	80192f4 <_strtoul_l.isra.0+0xc4>
 8019300:	b106      	cbz	r6, 8019304 <_strtoul_l.isra.0+0xd4>
 8019302:	1e69      	subs	r1, r5, #1
 8019304:	6011      	str	r1, [r2, #0]
 8019306:	e7f5      	b.n	80192f4 <_strtoul_l.isra.0+0xc4>
 8019308:	0801ce05 	.word	0x0801ce05

0801930c <_strtoul_r>:
 801930c:	f7ff bf90 	b.w	8019230 <_strtoul_l.isra.0>

08019310 <__swhatbuf_r>:
 8019310:	b570      	push	{r4, r5, r6, lr}
 8019312:	460c      	mov	r4, r1
 8019314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019318:	2900      	cmp	r1, #0
 801931a:	b096      	sub	sp, #88	@ 0x58
 801931c:	4615      	mov	r5, r2
 801931e:	461e      	mov	r6, r3
 8019320:	da0d      	bge.n	801933e <__swhatbuf_r+0x2e>
 8019322:	89a3      	ldrh	r3, [r4, #12]
 8019324:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8019328:	f04f 0100 	mov.w	r1, #0
 801932c:	bf14      	ite	ne
 801932e:	2340      	movne	r3, #64	@ 0x40
 8019330:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019334:	2000      	movs	r0, #0
 8019336:	6031      	str	r1, [r6, #0]
 8019338:	602b      	str	r3, [r5, #0]
 801933a:	b016      	add	sp, #88	@ 0x58
 801933c:	bd70      	pop	{r4, r5, r6, pc}
 801933e:	466a      	mov	r2, sp
 8019340:	f000 f848 	bl	80193d4 <_fstat_r>
 8019344:	2800      	cmp	r0, #0
 8019346:	dbec      	blt.n	8019322 <__swhatbuf_r+0x12>
 8019348:	9901      	ldr	r1, [sp, #4]
 801934a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801934e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019352:	4259      	negs	r1, r3
 8019354:	4159      	adcs	r1, r3
 8019356:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801935a:	e7eb      	b.n	8019334 <__swhatbuf_r+0x24>

0801935c <__smakebuf_r>:
 801935c:	898b      	ldrh	r3, [r1, #12]
 801935e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019360:	079d      	lsls	r5, r3, #30
 8019362:	4606      	mov	r6, r0
 8019364:	460c      	mov	r4, r1
 8019366:	d507      	bpl.n	8019378 <__smakebuf_r+0x1c>
 8019368:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801936c:	6023      	str	r3, [r4, #0]
 801936e:	6123      	str	r3, [r4, #16]
 8019370:	2301      	movs	r3, #1
 8019372:	6163      	str	r3, [r4, #20]
 8019374:	b003      	add	sp, #12
 8019376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019378:	ab01      	add	r3, sp, #4
 801937a:	466a      	mov	r2, sp
 801937c:	f7ff ffc8 	bl	8019310 <__swhatbuf_r>
 8019380:	9f00      	ldr	r7, [sp, #0]
 8019382:	4605      	mov	r5, r0
 8019384:	4639      	mov	r1, r7
 8019386:	4630      	mov	r0, r6
 8019388:	f7fe fa16 	bl	80177b8 <_malloc_r>
 801938c:	b948      	cbnz	r0, 80193a2 <__smakebuf_r+0x46>
 801938e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019392:	059a      	lsls	r2, r3, #22
 8019394:	d4ee      	bmi.n	8019374 <__smakebuf_r+0x18>
 8019396:	f023 0303 	bic.w	r3, r3, #3
 801939a:	f043 0302 	orr.w	r3, r3, #2
 801939e:	81a3      	strh	r3, [r4, #12]
 80193a0:	e7e2      	b.n	8019368 <__smakebuf_r+0xc>
 80193a2:	89a3      	ldrh	r3, [r4, #12]
 80193a4:	6020      	str	r0, [r4, #0]
 80193a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80193aa:	81a3      	strh	r3, [r4, #12]
 80193ac:	9b01      	ldr	r3, [sp, #4]
 80193ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80193b2:	b15b      	cbz	r3, 80193cc <__smakebuf_r+0x70>
 80193b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80193b8:	4630      	mov	r0, r6
 80193ba:	f000 f81d 	bl	80193f8 <_isatty_r>
 80193be:	b128      	cbz	r0, 80193cc <__smakebuf_r+0x70>
 80193c0:	89a3      	ldrh	r3, [r4, #12]
 80193c2:	f023 0303 	bic.w	r3, r3, #3
 80193c6:	f043 0301 	orr.w	r3, r3, #1
 80193ca:	81a3      	strh	r3, [r4, #12]
 80193cc:	89a3      	ldrh	r3, [r4, #12]
 80193ce:	431d      	orrs	r5, r3
 80193d0:	81a5      	strh	r5, [r4, #12]
 80193d2:	e7cf      	b.n	8019374 <__smakebuf_r+0x18>

080193d4 <_fstat_r>:
 80193d4:	b538      	push	{r3, r4, r5, lr}
 80193d6:	4d07      	ldr	r5, [pc, #28]	@ (80193f4 <_fstat_r+0x20>)
 80193d8:	2300      	movs	r3, #0
 80193da:	4604      	mov	r4, r0
 80193dc:	4608      	mov	r0, r1
 80193de:	4611      	mov	r1, r2
 80193e0:	602b      	str	r3, [r5, #0]
 80193e2:	f7ec f92a 	bl	800563a <_fstat>
 80193e6:	1c43      	adds	r3, r0, #1
 80193e8:	d102      	bne.n	80193f0 <_fstat_r+0x1c>
 80193ea:	682b      	ldr	r3, [r5, #0]
 80193ec:	b103      	cbz	r3, 80193f0 <_fstat_r+0x1c>
 80193ee:	6023      	str	r3, [r4, #0]
 80193f0:	bd38      	pop	{r3, r4, r5, pc}
 80193f2:	bf00      	nop
 80193f4:	200131a8 	.word	0x200131a8

080193f8 <_isatty_r>:
 80193f8:	b538      	push	{r3, r4, r5, lr}
 80193fa:	4d06      	ldr	r5, [pc, #24]	@ (8019414 <_isatty_r+0x1c>)
 80193fc:	2300      	movs	r3, #0
 80193fe:	4604      	mov	r4, r0
 8019400:	4608      	mov	r0, r1
 8019402:	602b      	str	r3, [r5, #0]
 8019404:	f7ec f929 	bl	800565a <_isatty>
 8019408:	1c43      	adds	r3, r0, #1
 801940a:	d102      	bne.n	8019412 <_isatty_r+0x1a>
 801940c:	682b      	ldr	r3, [r5, #0]
 801940e:	b103      	cbz	r3, 8019412 <_isatty_r+0x1a>
 8019410:	6023      	str	r3, [r4, #0]
 8019412:	bd38      	pop	{r3, r4, r5, pc}
 8019414:	200131a8 	.word	0x200131a8

08019418 <_malloc_usable_size_r>:
 8019418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801941c:	1f18      	subs	r0, r3, #4
 801941e:	2b00      	cmp	r3, #0
 8019420:	bfbc      	itt	lt
 8019422:	580b      	ldrlt	r3, [r1, r0]
 8019424:	18c0      	addlt	r0, r0, r3
 8019426:	4770      	bx	lr

08019428 <_init>:
 8019428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801942a:	bf00      	nop
 801942c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801942e:	bc08      	pop	{r3}
 8019430:	469e      	mov	lr, r3
 8019432:	4770      	bx	lr

08019434 <_fini>:
 8019434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019436:	bf00      	nop
 8019438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801943a:	bc08      	pop	{r3}
 801943c:	469e      	mov	lr, r3
 801943e:	4770      	bx	lr
