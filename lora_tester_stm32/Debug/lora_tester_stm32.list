
lora_tester_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015c74  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003fb0  08015e44  08015e44  00016e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019df4  08019df4  0001b200  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08019df4  08019df4  0001adf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019dfc  08019dfc  0001b200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019dfc  08019dfc  0001adfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08019e00  08019e00  0001ae00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c0  20000000  08019e04  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000c0  08019ec4  0001b0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000160  08019f64  0001b160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00011c60  20000200  0801a004  0001b200  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20011e60  0801a004  0001be60  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001b200  2**0
                  CONTENTS, READONLY
 14 .debug_info   00042694  00000000  00000000  0001b230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008f70  00000000  00000000  0005d8c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003740  00000000  00000000  00066838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002b17  00000000  00000000  00069f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003715c  00000000  00000000  0006ca8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004aef7  00000000  00000000  000a3beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012c721  00000000  00000000  000eeae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0021b203  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000f05c  00000000  00000000  0021b248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000082  00000000  00000000  0022a2a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015e2c 	.word	0x08015e2c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	08015e2c 	.word	0x08015e2c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <CommandSender_Send>:
#include <stddef.h>
#include <string.h>
#include <stdio.h>

void CommandSender_Send(const char* command)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	@ 0x58
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    if (command != NULL) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d051      	beq.n	80006be <CommandSender_Send+0xb2>
        int len = strlen(command);
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff fe02 	bl	8000224 <strlen>
 8000620:	4603      	mov	r3, r0
 8000622:	653b      	str	r3, [r7, #80]	@ 0x50
        
        // 전송할 명령어를 명확히 로깅 (특수 문자도 표시)
        LOG_INFO("📤 TX: '%s' (%d bytes)", command, len);
 8000624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	4929      	ldr	r1, [pc, #164]	@ (80006d0 <CommandSender_Send+0xc4>)
 800062a:	2001      	movs	r0, #1
 800062c:	f004 fa5e 	bl	8004aec <LOGGER_SendFormatted>
        
        // 헥스 덤프도 표시 (처음 20바이트까지)
        if (len > 0) {
 8000630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000632:	2b00      	cmp	r3, #0
 8000634:	dd2c      	ble.n	8000690 <CommandSender_Send+0x84>
            char hex_dump[64] = {0};
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	2240      	movs	r2, #64	@ 0x40
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f014 fffa 	bl	8015638 <memset>
            int dump_len = (len > 20) ? 20 : len;
 8000644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000646:	2b14      	cmp	r3, #20
 8000648:	bfa8      	it	ge
 800064a:	2314      	movge	r3, #20
 800064c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (int i = 0; i < dump_len; i++) {
 800064e:	2300      	movs	r3, #0
 8000650:	657b      	str	r3, [r7, #84]	@ 0x54
 8000652:	e012      	b.n	800067a <CommandSender_Send+0x6e>
                snprintf(hex_dump + i*3, 4, "%02X ", (unsigned char)command[i]);
 8000654:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000656:	4613      	mov	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	461a      	mov	r2, r3
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	1898      	adds	r0, r3, r2
 8000664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4a19      	ldr	r2, [pc, #100]	@ (80006d4 <CommandSender_Send+0xc8>)
 800066e:	2104      	movs	r1, #4
 8000670:	f014 ff4e 	bl	8015510 <sniprintf>
            for (int i = 0; i < dump_len; i++) {
 8000674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000676:	3301      	adds	r3, #1
 8000678:	657b      	str	r3, [r7, #84]	@ 0x54
 800067a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800067c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800067e:	429a      	cmp	r2, r3
 8000680:	dbe8      	blt.n	8000654 <CommandSender_Send+0x48>
            }
            LOG_DEBUG("[CommandSender] Hex: %s", hex_dump);
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	461a      	mov	r2, r3
 8000688:	4913      	ldr	r1, [pc, #76]	@ (80006d8 <CommandSender_Send+0xcc>)
 800068a:	2000      	movs	r0, #0
 800068c:	f004 fa2e 	bl	8004aec <LOGGER_SendFormatted>
        }
        
        UartStatus status = UART_Send(command);
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f004 fb0f 	bl	8004cb4 <UART_Send>
 8000696:	4603      	mov	r3, r0
 8000698:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        
        if (status == UART_STATUS_OK) {
 800069c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d104      	bne.n	80006ae <CommandSender_Send+0xa2>
            LOG_DEBUG("[CommandSender] ✓ Command sent successfully");
 80006a4:	490d      	ldr	r1, [pc, #52]	@ (80006dc <CommandSender_Send+0xd0>)
 80006a6:	2000      	movs	r0, #0
 80006a8:	f004 fa20 	bl	8004aec <LOGGER_SendFormatted>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
        }
    } else {
        LOG_WARN("[CommandSender] Attempted to send NULL command");
    }
}
 80006ac:	e00b      	b.n	80006c6 <CommandSender_Send+0xba>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
 80006ae:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006b2:	461a      	mov	r2, r3
 80006b4:	490a      	ldr	r1, [pc, #40]	@ (80006e0 <CommandSender_Send+0xd4>)
 80006b6:	2003      	movs	r0, #3
 80006b8:	f004 fa18 	bl	8004aec <LOGGER_SendFormatted>
}
 80006bc:	e003      	b.n	80006c6 <CommandSender_Send+0xba>
        LOG_WARN("[CommandSender] Attempted to send NULL command");
 80006be:	4909      	ldr	r1, [pc, #36]	@ (80006e4 <CommandSender_Send+0xd8>)
 80006c0:	2002      	movs	r0, #2
 80006c2:	f004 fa13 	bl	8004aec <LOGGER_SendFormatted>
}
 80006c6:	bf00      	nop
 80006c8:	3758      	adds	r7, #88	@ 0x58
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	08015e44 	.word	0x08015e44
 80006d4:	08015e60 	.word	0x08015e60
 80006d8:	08015e68 	.word	0x08015e68
 80006dc:	08015e80 	.word	0x08015e80
 80006e0:	08015eb0 	.word	0x08015eb0
 80006e4:	08015ee8 	.word	0x08015ee8

080006e8 <get_state_name>:
};

const int LORA_DEFAULT_INIT_COMMANDS_COUNT = sizeof(LORA_DEFAULT_INIT_COMMANDS) / sizeof(LORA_DEFAULT_INIT_COMMANDS[0]);

// 상태 이름을 문자열로 변환하는 헬퍼 함수
static const char* get_state_name(LoraState state) {
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
    switch(state) {
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b0a      	cmp	r3, #10
 80006f6:	d82f      	bhi.n	8000758 <get_state_name+0x70>
 80006f8:	a201      	add	r2, pc, #4	@ (adr r2, 8000700 <get_state_name+0x18>)
 80006fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fe:	bf00      	nop
 8000700:	0800072d 	.word	0x0800072d
 8000704:	08000731 	.word	0x08000731
 8000708:	08000735 	.word	0x08000735
 800070c:	08000739 	.word	0x08000739
 8000710:	0800073d 	.word	0x0800073d
 8000714:	08000741 	.word	0x08000741
 8000718:	08000745 	.word	0x08000745
 800071c:	08000749 	.word	0x08000749
 8000720:	0800074d 	.word	0x0800074d
 8000724:	08000751 	.word	0x08000751
 8000728:	08000755 	.word	0x08000755
        case LORA_STATE_INIT: return "INIT";
 800072c:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <get_state_name+0x80>)
 800072e:	e014      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_CMD: return "SEND_CMD";
 8000730:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <get_state_name+0x84>)
 8000732:	e012      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_OK: return "WAIT_OK";
 8000734:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <get_state_name+0x88>)
 8000736:	e010      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_JOIN: return "SEND_JOIN";
 8000738:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <get_state_name+0x8c>)
 800073a:	e00e      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_JOIN_OK: return "WAIT_JOIN_OK";
 800073c:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <get_state_name+0x90>)
 800073e:	e00c      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_PERIODIC: return "SEND_PERIODIC";
 8000740:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <get_state_name+0x94>)
 8000742:	e00a      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_SEND_RESPONSE: return "WAIT_SEND_RESPONSE";
 8000744:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <get_state_name+0x98>)
 8000746:	e008      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_SEND_INTERVAL: return "WAIT_SEND_INTERVAL";
 8000748:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <get_state_name+0x9c>)
 800074a:	e006      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_JOIN_RETRY: return "JOIN_RETRY";
 800074c:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <get_state_name+0xa0>)
 800074e:	e004      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_DONE: return "DONE";
 8000750:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <get_state_name+0xa4>)
 8000752:	e002      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_ERROR: return "ERROR";
 8000754:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <get_state_name+0xa8>)
 8000756:	e000      	b.n	800075a <get_state_name+0x72>
        default: return "UNKNOWN";
 8000758:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <get_state_name+0xac>)
    }
}
 800075a:	4618      	mov	r0, r3
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	08015f54 	.word	0x08015f54
 800076c:	08015f5c 	.word	0x08015f5c
 8000770:	08015f68 	.word	0x08015f68
 8000774:	08015f70 	.word	0x08015f70
 8000778:	08015f7c 	.word	0x08015f7c
 800077c:	08015f8c 	.word	0x08015f8c
 8000780:	08015f9c 	.word	0x08015f9c
 8000784:	08015fb0 	.word	0x08015fb0
 8000788:	08015fc4 	.word	0x08015fc4
 800078c:	08015fd0 	.word	0x08015fd0
 8000790:	08015fd8 	.word	0x08015fd8
 8000794:	08015fe0 	.word	0x08015fe0

08000798 <LoraStarter_InitWithDefaults>:
    UART_Connect(port);
    LOG_INFO("[LoRa] UART connected to %s", port);
}

void LoraStarter_InitWithDefaults(LoraStarterContext* ctx, const char* send_message)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
    if (ctx == NULL) return;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d032      	beq.n	800080e <LoraStarter_InitWithDefaults+0x76>
    
    ctx->state = LORA_STATE_INIT;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]
    ctx->cmd_index = 0;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
    ctx->commands = LORA_DEFAULT_INIT_COMMANDS;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4a18      	ldr	r2, [pc, #96]	@ (8000818 <LoraStarter_InitWithDefaults+0x80>)
 80007b8:	609a      	str	r2, [r3, #8]
    ctx->num_commands = LORA_DEFAULT_INIT_COMMANDS_COUNT;
 80007ba:	2205      	movs	r2, #5
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	60da      	str	r2, [r3, #12]
    ctx->send_message = (send_message != NULL) ? send_message : "TEST";
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <LoraStarter_InitWithDefaults+0x32>
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	e000      	b.n	80007cc <LoraStarter_InitWithDefaults+0x34>
 80007ca:	4b14      	ldr	r3, [pc, #80]	@ (800081c <LoraStarter_InitWithDefaults+0x84>)
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	61d3      	str	r3, [r2, #28]
    ctx->max_retry_count = 3;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2203      	movs	r2, #3
 80007d4:	625a      	str	r2, [r3, #36]	@ 0x24
    ctx->send_interval_ms = 300000;  // 5분 간격
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a11      	ldr	r2, [pc, #68]	@ (8000820 <LoraStarter_InitWithDefaults+0x88>)
 80007da:	615a      	str	r2, [r3, #20]
    ctx->last_send_time = 0;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
    ctx->send_count = 0;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
    ctx->error_count = 0;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
    ctx->last_retry_time = 0;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	629a      	str	r2, [r3, #40]	@ 0x28
    ctx->retry_delay_ms = 1000;  // 1초 초기 지연
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    LOG_INFO("[LoRa] Initialized with defaults - Commands: %d, Message: %s", 
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	68da      	ldr	r2, [r3, #12]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	69db      	ldr	r3, [r3, #28]
 8000804:	4907      	ldr	r1, [pc, #28]	@ (8000824 <LoraStarter_InitWithDefaults+0x8c>)
 8000806:	2001      	movs	r0, #1
 8000808:	f004 f970 	bl	8004aec <LOGGER_SendFormatted>
 800080c:	e000      	b.n	8000810 <LoraStarter_InitWithDefaults+0x78>
    if (ctx == NULL) return;
 800080e:	bf00      	nop
             ctx->num_commands, ctx->send_message);
}
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000000 	.word	0x20000000
 800081c:	08016004 	.word	0x08016004
 8000820:	000493e0 	.word	0x000493e0
 8000824:	0801600c 	.word	0x0801600c

08000828 <LoraStarter_Process>:

void LoraStarter_Process(LoraStarterContext* ctx, const char* uart_rx)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b0bf      	sub	sp, #252	@ 0xfc
 800082c:	af02      	add	r7, sp, #8
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
    if (ctx == NULL) return;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b00      	cmp	r3, #0
 8000836:	f000 8289 	beq.w	8000d4c <LoraStarter_Process+0x524>

    LoraState old_state = ctx->state;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb

    switch(ctx->state) {
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b08      	cmp	r3, #8
 8000848:	f200 8261 	bhi.w	8000d0e <LoraStarter_Process+0x4e6>
 800084c:	a201      	add	r2, pc, #4	@ (adr r2, 8000854 <LoraStarter_Process+0x2c>)
 800084e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000852:	bf00      	nop
 8000854:	08000879 	.word	0x08000879
 8000858:	080008c7 	.word	0x080008c7
 800085c:	0800091d 	.word	0x0800091d
 8000860:	080009d7 	.word	0x080009d7
 8000864:	080009ed 	.word	0x080009ed
 8000868:	08000a3b 	.word	0x08000a3b
 800086c:	08000af9 	.word	0x08000af9
 8000870:	08000c35 	.word	0x08000c35
 8000874:	08000c9b 	.word	0x08000c9b
        case LORA_STATE_INIT:
            ctx->cmd_index = 0;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2200      	movs	r2, #0
 800087c:	605a      	str	r2, [r3, #4]
            ctx->error_count = 0;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
            ctx->state = LORA_STATE_SEND_CMD;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2201      	movs	r2, #1
 8000888:	701a      	strb	r2, [r3, #0]
            // 기본값 설정
            if (ctx->max_retry_count == 0) ctx->max_retry_count = 0; // 0이면 무제한
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800088e:	2b00      	cmp	r3, #0
 8000890:	d102      	bne.n	8000898 <LoraStarter_Process+0x70>
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	@ 0x24
            if (ctx->send_message == NULL) ctx->send_message = "Hello";
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	69db      	ldr	r3, [r3, #28]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d102      	bne.n	80008a6 <LoraStarter_Process+0x7e>
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4aaa      	ldr	r2, [pc, #680]	@ (8000b4c <LoraStarter_Process+0x324>)
 80008a4:	61da      	str	r2, [r3, #28]
            ctx->last_retry_time = 0;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2200      	movs	r2, #0
 80008aa:	629a      	str	r2, [r3, #40]	@ 0x28
            ctx->retry_delay_ms = 1000; // 초기 재시도 지연: 1초
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008b2:	62da      	str	r2, [r3, #44]	@ 0x2c
            LOG_INFO("[LoRa] Initialized with message: %s, max_retries: %d", 
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	69da      	ldr	r2, [r3, #28]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008bc:	49a4      	ldr	r1, [pc, #656]	@ (8000b50 <LoraStarter_Process+0x328>)
 80008be:	2001      	movs	r0, #1
 80008c0:	f004 f914 	bl	8004aec <LOGGER_SendFormatted>
                    ctx->send_message, ctx->max_retry_count);
            break;
 80008c4:	e22a      	b.n	8000d1c <LoraStarter_Process+0x4f4>
        case LORA_STATE_SEND_CMD:
            if (ctx->cmd_index < ctx->num_commands) {
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	685a      	ldr	r2, [r3, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	68db      	ldr	r3, [r3, #12]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	da20      	bge.n	8000914 <LoraStarter_Process+0xec>
                LOG_DEBUG("[LoRa] Sending command %d/%d: %s", 
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	1c59      	adds	r1, r3, #1
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	68d8      	ldr	r0, [r3, #12]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	689a      	ldr	r2, [r3, #8]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	4413      	add	r3, r2
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	4603      	mov	r3, r0
 80008ee:	460a      	mov	r2, r1
 80008f0:	4998      	ldr	r1, [pc, #608]	@ (8000b54 <LoraStarter_Process+0x32c>)
 80008f2:	2000      	movs	r0, #0
 80008f4:	f004 f8fa 	bl	8004aec <LOGGER_SendFormatted>
                         ctx->cmd_index + 1, ctx->num_commands, ctx->commands[ctx->cmd_index]);
                CommandSender_Send(ctx->commands[ctx->cmd_index]);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	689a      	ldr	r2, [r3, #8]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	4413      	add	r3, r2
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fe80 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_OK;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2202      	movs	r2, #2
 8000910:	701a      	strb	r2, [r3, #0]
            } else {
                ctx->state = LORA_STATE_SEND_JOIN;
            }
            break;
 8000912:	e203      	b.n	8000d1c <LoraStarter_Process+0x4f4>
                ctx->state = LORA_STATE_SEND_JOIN;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2203      	movs	r2, #3
 8000918:	701a      	strb	r2, [r3, #0]
            break;
 800091a:	e1ff      	b.n	8000d1c <LoraStarter_Process+0x4f4>
        case LORA_STATE_WAIT_OK:
            if (uart_rx) {
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	f000 81f7 	beq.w	8000d12 <LoraStarter_Process+0x4ea>
                if (is_response_ok(uart_rx)) {
 8000924:	6838      	ldr	r0, [r7, #0]
 8000926:	f000 fa99 	bl	8000e5c <is_response_ok>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d010      	beq.n	8000952 <LoraStarter_Process+0x12a>
                    LOG_DEBUG("[LoRa] Command %d OK received", ctx->cmd_index + 1);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	3301      	adds	r3, #1
 8000936:	461a      	mov	r2, r3
 8000938:	4987      	ldr	r1, [pc, #540]	@ (8000b58 <LoraStarter_Process+0x330>)
 800093a:	2000      	movs	r0, #0
 800093c:	f004 f8d6 	bl	8004aec <LOGGER_SendFormatted>
                    ctx->cmd_index++;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	1c5a      	adds	r2, r3, #1
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	605a      	str	r2, [r3, #4]
                    ctx->state = LORA_STATE_SEND_CMD;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 에러 카운터 리셋
                        ctx->state = LORA_STATE_SEND_CMD;
                    }
                }
            }
            break;
 8000950:	e1df      	b.n	8000d12 <LoraStarter_Process+0x4ea>
                } else if (strstr(uart_rx, "ERROR") || strstr(uart_rx, "AT_COMMAND_NOT_FOUND")) {
 8000952:	4982      	ldr	r1, [pc, #520]	@ (8000b5c <LoraStarter_Process+0x334>)
 8000954:	6838      	ldr	r0, [r7, #0]
 8000956:	f014 fe8a 	bl	801566e <strstr>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d107      	bne.n	8000970 <LoraStarter_Process+0x148>
 8000960:	497f      	ldr	r1, [pc, #508]	@ (8000b60 <LoraStarter_Process+0x338>)
 8000962:	6838      	ldr	r0, [r7, #0]
 8000964:	f014 fe83 	bl	801566e <strstr>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	f000 81d1 	beq.w	8000d12 <LoraStarter_Process+0x4ea>
                    LOG_WARN("[LoRa] Command %d failed: %s", ctx->cmd_index + 1, uart_rx);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	1c5a      	adds	r2, r3, #1
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	497a      	ldr	r1, [pc, #488]	@ (8000b64 <LoraStarter_Process+0x33c>)
 800097a:	2002      	movs	r0, #2
 800097c:	f004 f8b6 	bl	8004aec <LOGGER_SendFormatted>
                    ctx->error_count++;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6a1b      	ldr	r3, [r3, #32]
 8000984:	1c5a      	adds	r2, r3, #1
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	621a      	str	r2, [r3, #32]
                    if (ctx->error_count < 3) {
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6a1b      	ldr	r3, [r3, #32]
 800098e:	2b02      	cmp	r3, #2
 8000990:	dc0d      	bgt.n	80009ae <LoraStarter_Process+0x186>
                        LOG_INFO("[LoRa] Retrying command %d (attempt %d/3)", ctx->cmd_index + 1, ctx->error_count + 1);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	1c5a      	adds	r2, r3, #1
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6a1b      	ldr	r3, [r3, #32]
 800099c:	3301      	adds	r3, #1
 800099e:	4972      	ldr	r1, [pc, #456]	@ (8000b68 <LoraStarter_Process+0x340>)
 80009a0:	2001      	movs	r0, #1
 80009a2:	f004 f8a3 	bl	8004aec <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_SEND_CMD; // 같은 명령 재시도
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2201      	movs	r2, #1
 80009aa:	701a      	strb	r2, [r3, #0]
            break;
 80009ac:	e1b1      	b.n	8000d12 <LoraStarter_Process+0x4ea>
                        LOG_WARN("[LoRa] Command %d failed after 3 attempts, skipping to next", ctx->cmd_index + 1);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	3301      	adds	r3, #1
 80009b4:	461a      	mov	r2, r3
 80009b6:	496d      	ldr	r1, [pc, #436]	@ (8000b6c <LoraStarter_Process+0x344>)
 80009b8:	2002      	movs	r0, #2
 80009ba:	f004 f897 	bl	8004aec <LOGGER_SendFormatted>
                        ctx->cmd_index++; // 다음 명령으로 건너뛰기
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	1c5a      	adds	r2, r3, #1
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	605a      	str	r2, [r3, #4]
                        ctx->error_count = 0; // 에러 카운터 리셋
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	621a      	str	r2, [r3, #32]
                        ctx->state = LORA_STATE_SEND_CMD;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2201      	movs	r2, #1
 80009d2:	701a      	strb	r2, [r3, #0]
            break;
 80009d4:	e19d      	b.n	8000d12 <LoraStarter_Process+0x4ea>
        case LORA_STATE_SEND_JOIN:
            LORA_LOG_JOIN_ATTEMPT();
 80009d6:	4966      	ldr	r1, [pc, #408]	@ (8000b70 <LoraStarter_Process+0x348>)
 80009d8:	2002      	movs	r0, #2
 80009da:	f004 f887 	bl	8004aec <LOGGER_SendFormatted>
            CommandSender_Send("AT+JOIN\r\n");
 80009de:	4865      	ldr	r0, [pc, #404]	@ (8000b74 <LoraStarter_Process+0x34c>)
 80009e0:	f7ff fe14 	bl	800060c <CommandSender_Send>
            ctx->state = LORA_STATE_WAIT_JOIN_OK;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2204      	movs	r2, #4
 80009e8:	701a      	strb	r2, [r3, #0]
            break;
 80009ea:	e197      	b.n	8000d1c <LoraStarter_Process+0x4f4>
        case LORA_STATE_WAIT_JOIN_OK:
            if (uart_rx && is_join_response_ok(uart_rx)) {
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f000 8191 	beq.w	8000d16 <LoraStarter_Process+0x4ee>
 80009f4:	6838      	ldr	r0, [r7, #0]
 80009f6:	f000 fa99 	bl	8000f2c <is_join_response_ok>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	f000 818a 	beq.w	8000d16 <LoraStarter_Process+0x4ee>
                LORA_LOG_JOIN_SUCCESS();
 8000a02:	495d      	ldr	r1, [pc, #372]	@ (8000b78 <LoraStarter_Process+0x350>)
 8000a04:	2002      	movs	r0, #2
 8000a06:	f004 f871 	bl	8004aec <LOGGER_SendFormatted>
                ctx->state = LORA_STATE_SEND_PERIODIC;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2205      	movs	r2, #5
 8000a0e:	701a      	strb	r2, [r3, #0]
                ctx->send_count = 0;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
                ctx->error_count = 0; // JOIN 성공 시 에러 카운터 리셋
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
                ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a22:	62da      	str	r2, [r3, #44]	@ 0x2c
                ctx->last_retry_time = 0; // 재시도 시간 리셋
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2200      	movs	r2, #0
 8000a28:	629a      	str	r2, [r3, #40]	@ 0x28
                LOG_WARN("[LoRa] 🚀 PERIODIC SEND STARTED with message: %s", ctx->send_message);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	4952      	ldr	r1, [pc, #328]	@ (8000b7c <LoraStarter_Process+0x354>)
 8000a32:	2002      	movs	r0, #2
 8000a34:	f004 f85a 	bl	8004aec <LOGGER_SendFormatted>
            }
            break;
 8000a38:	e16d      	b.n	8000d16 <LoraStarter_Process+0x4ee>
        case LORA_STATE_SEND_PERIODIC:
            {
                char send_cmd[128];
                char hex_data[64];
                const char* message = (ctx->send_message != NULL) ? ctx->send_message : "Hello";
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d002      	beq.n	8000a48 <LoraStarter_Process+0x220>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	e000      	b.n	8000a4a <LoraStarter_Process+0x222>
 8000a48:	4b40      	ldr	r3, [pc, #256]	@ (8000b4c <LoraStarter_Process+0x324>)
 8000a4a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                
                // 문자열을 헥사 문자열로 변환
                int len = strlen(message);
 8000a4e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8000a52:	f7ff fbe7 	bl	8000224 <strlen>
 8000a56:	4603      	mov	r3, r0
 8000a58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000a62:	e014      	b.n	8000a8e <LoraStarter_Process+0x266>
                    sprintf(&hex_data[i*2], "%02X", (unsigned char)message[i]);
 8000a64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	f107 020c 	add.w	r2, r7, #12
 8000a6e:	18d0      	adds	r0, r2, r3
 8000a70:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a74:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000a78:	4413      	add	r3, r2
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4940      	ldr	r1, [pc, #256]	@ (8000b80 <LoraStarter_Process+0x358>)
 8000a80:	f014 fd7c 	bl	801557c <siprintf>
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 8000a84:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a88:	3301      	adds	r3, #1
 8000a8a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000a8e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8000a92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000a96:	429a      	cmp	r2, r3
 8000a98:	da03      	bge.n	8000aa2 <LoraStarter_Process+0x27a>
 8000a9a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a9e:	2b1e      	cmp	r3, #30
 8000aa0:	dde0      	ble.n	8000a64 <LoraStarter_Process+0x23c>
                }
                hex_data[len*2] = '\0';
 8000aa2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	33f0      	adds	r3, #240	@ 0xf0
 8000aaa:	443b      	add	r3, r7
 8000aac:	2200      	movs	r2, #0
 8000aae:	f803 2ce4 	strb.w	r2, [r3, #-228]
                
                snprintf(send_cmd, sizeof(send_cmd), "AT+SEND=1:%s\r\n", hex_data);
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8000aba:	4a32      	ldr	r2, [pc, #200]	@ (8000b84 <LoraStarter_Process+0x35c>)
 8000abc:	2180      	movs	r1, #128	@ 0x80
 8000abe:	f014 fd27 	bl	8015510 <sniprintf>
                LORA_LOG_SEND_ATTEMPT(message);
 8000ac2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000ac6:	4930      	ldr	r1, [pc, #192]	@ (8000b88 <LoraStarter_Process+0x360>)
 8000ac8:	2002      	movs	r0, #2
 8000aca:	f004 f80f 	bl	8004aec <LOGGER_SendFormatted>
                CommandSender_Send(send_cmd);
 8000ace:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fd9a 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_SEND_RESPONSE;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2206      	movs	r2, #6
 8000adc:	701a      	strb	r2, [r3, #0]
                ctx->send_count++;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	619a      	str	r2, [r3, #24]
                LOG_DEBUG("[LoRa] Send count: %d", ctx->send_count);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	461a      	mov	r2, r3
 8000aee:	4927      	ldr	r1, [pc, #156]	@ (8000b8c <LoraStarter_Process+0x364>)
 8000af0:	2000      	movs	r0, #0
 8000af2:	f003 fffb 	bl	8004aec <LOGGER_SendFormatted>
            }
            break;
 8000af6:	e111      	b.n	8000d1c <LoraStarter_Process+0x4f4>
        case LORA_STATE_WAIT_SEND_RESPONSE:
            if (uart_rx) {
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	f000 810d 	beq.w	8000d1a <LoraStarter_Process+0x4f2>
                ResponseType response_type = ResponseHandler_ParseSendResponse(uart_rx);
 8000b00:	6838      	ldr	r0, [r7, #0]
 8000b02:	f000 fa97 	bl	8001034 <ResponseHandler_ParseSendResponse>
 8000b06:	4603      	mov	r3, r0
 8000b08:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
                switch(response_type) {
 8000b0c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d03f      	beq.n	8000b94 <LoraStarter_Process+0x36c>
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	f300 8086 	bgt.w	8000c26 <LoraStarter_Process+0x3fe>
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d002      	beq.n	8000b24 <LoraStarter_Process+0x2fc>
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d04c      	beq.n	8000bbc <LoraStarter_Process+0x394>
 8000b22:	e080      	b.n	8000c26 <LoraStarter_Process+0x3fe>
                    case RESPONSE_OK:
                        LORA_LOG_SEND_SUCCESS();
 8000b24:	491a      	ldr	r1, [pc, #104]	@ (8000b90 <LoraStarter_Process+0x368>)
 8000b26:	2002      	movs	r0, #2
 8000b28:	f003 ffe0 	bl	8004aec <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL; // 주기적 대기 상태로 전이
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2207      	movs	r2, #7
 8000b30:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 성공 시 에러 카운터 리셋
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b3e:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 마지막 송신 시간 저장
 8000b40:	f003 ff66 	bl	8004a10 <TIME_GetCurrentMs>
 8000b44:	4602      	mov	r2, r0
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	611a      	str	r2, [r3, #16]
                        break;
 8000b4a:	e072      	b.n	8000c32 <LoraStarter_Process+0x40a>
 8000b4c:	0801604c 	.word	0x0801604c
 8000b50:	08016054 	.word	0x08016054
 8000b54:	0801608c 	.word	0x0801608c
 8000b58:	080160b0 	.word	0x080160b0
 8000b5c:	08015fd8 	.word	0x08015fd8
 8000b60:	080160d0 	.word	0x080160d0
 8000b64:	080160e8 	.word	0x080160e8
 8000b68:	08016108 	.word	0x08016108
 8000b6c:	08016134 	.word	0x08016134
 8000b70:	08016170 	.word	0x08016170
 8000b74:	08016194 	.word	0x08016194
 8000b78:	080161a0 	.word	0x080161a0
 8000b7c:	080161bc 	.word	0x080161bc
 8000b80:	080161f0 	.word	0x080161f0
 8000b84:	080161f8 	.word	0x080161f8
 8000b88:	08016208 	.word	0x08016208
 8000b8c:	08016228 	.word	0x08016228
 8000b90:	08016240 	.word	0x08016240
                    case RESPONSE_TIMEOUT:
                        LOG_WARN("[LoRa] SEND timeout");
 8000b94:	496f      	ldr	r1, [pc, #444]	@ (8000d54 <LoraStarter_Process+0x52c>)
 8000b96:	2002      	movs	r0, #2
 8000b98:	f003 ffa8 	bl	8004aec <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL; // 주기적 대기 상태로 전이
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2207      	movs	r2, #7
 8000ba0:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 성공 시 에러 카운터 리셋
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000bae:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 마지막 송신 시간 저장
 8000bb0:	f003 ff2e 	bl	8004a10 <TIME_GetCurrentMs>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	611a      	str	r2, [r3, #16]
                        break;
 8000bba:	e03a      	b.n	8000c32 <LoraStarter_Process+0x40a>
                    case RESPONSE_ERROR:
                        LORA_LOG_SEND_FAILED("Network error");
 8000bbc:	4a66      	ldr	r2, [pc, #408]	@ (8000d58 <LoraStarter_Process+0x530>)
 8000bbe:	4967      	ldr	r1, [pc, #412]	@ (8000d5c <LoraStarter_Process+0x534>)
 8000bc0:	2002      	movs	r0, #2
 8000bc2:	f003 ff93 	bl	8004aec <LOGGER_SendFormatted>
                        ctx->error_count++;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6a1b      	ldr	r3, [r3, #32]
 8000bca:	1c5a      	adds	r2, r3, #1
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	621a      	str	r2, [r3, #32]
                        LORA_LOG_ERROR_COUNT(ctx->error_count);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6a1b      	ldr	r3, [r3, #32]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4962      	ldr	r1, [pc, #392]	@ (8000d60 <LoraStarter_Process+0x538>)
 8000bd8:	2002      	movs	r0, #2
 8000bda:	f003 ff87 	bl	8004aec <LOGGER_SendFormatted>
                        // 무제한 재시도 (max_retry_count가 0이거나 아직 제한에 도달하지 않은 경우)
                        if (ctx->max_retry_count == 0 || ctx->error_count < ctx->max_retry_count) {
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d005      	beq.n	8000bf2 <LoraStarter_Process+0x3ca>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6a1a      	ldr	r2, [r3, #32]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	da11      	bge.n	8000c16 <LoraStarter_Process+0x3ee>
                            LORA_LOG_RETRY_ATTEMPT(ctx->error_count, ctx->max_retry_count);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6a1a      	ldr	r2, [r3, #32]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d002      	beq.n	8000c04 <LoraStarter_Process+0x3dc>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c02:	e000      	b.n	8000c06 <LoraStarter_Process+0x3de>
 8000c04:	4b57      	ldr	r3, [pc, #348]	@ (8000d64 <LoraStarter_Process+0x53c>)
 8000c06:	4958      	ldr	r1, [pc, #352]	@ (8000d68 <LoraStarter_Process+0x540>)
 8000c08:	2002      	movs	r0, #2
 8000c0a:	f003 ff6f 	bl	8004aec <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_JOIN_RETRY; // JOIN 재시도
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2208      	movs	r2, #8
 8000c12:	701a      	strb	r2, [r3, #0]
                        } else {
                            LORA_LOG_MAX_RETRIES_REACHED();
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
                        }
                        break;
 8000c14:	e00d      	b.n	8000c32 <LoraStarter_Process+0x40a>
                            LORA_LOG_MAX_RETRIES_REACHED();
 8000c16:	4955      	ldr	r1, [pc, #340]	@ (8000d6c <LoraStarter_Process+0x544>)
 8000c18:	2003      	movs	r0, #3
 8000c1a:	f003 ff67 	bl	8004aec <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	220a      	movs	r2, #10
 8000c22:	701a      	strb	r2, [r3, #0]
                        break;
 8000c24:	e005      	b.n	8000c32 <LoraStarter_Process+0x40a>
                    default:
                        // 알 수 없는 응답은 무시하고 계속 대기
                        LOG_DEBUG("[LoRa] Unknown response: %s", uart_rx);
 8000c26:	683a      	ldr	r2, [r7, #0]
 8000c28:	4951      	ldr	r1, [pc, #324]	@ (8000d70 <LoraStarter_Process+0x548>)
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f003 ff5e 	bl	8004aec <LOGGER_SendFormatted>
                        break;
 8000c30:	bf00      	nop
                }
            }
            break;
 8000c32:	e072      	b.n	8000d1a <LoraStarter_Process+0x4f2>
        case LORA_STATE_WAIT_SEND_INTERVAL:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000c34:	f003 feec 	bl	8004a10 <TIME_GetCurrentMs>
 8000c38:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
                uint32_t interval_ms = (ctx->send_interval_ms > 0) ? ctx->send_interval_ms : 30000; // 기본값 30초
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	695b      	ldr	r3, [r3, #20]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d002      	beq.n	8000c4a <LoraStarter_Process+0x422>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	695b      	ldr	r3, [r3, #20]
 8000c48:	e001      	b.n	8000c4e <LoraStarter_Process+0x426>
 8000c4a:	f247 5330 	movw	r3, #30000	@ 0x7530
 8000c4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                
                if ((current_time - ctx->last_send_time) >= interval_ms) {
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	691b      	ldr	r3, [r3, #16]
 8000c56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d809      	bhi.n	8000c78 <LoraStarter_Process+0x450>
                    LOG_DEBUG("[LoRa] Send interval passed (%u ms), ready for next send", interval_ms);
 8000c64:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000c68:	4942      	ldr	r1, [pc, #264]	@ (8000d74 <LoraStarter_Process+0x54c>)
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f003 ff3e 	bl	8004aec <LOGGER_SendFormatted>
                    ctx->state = LORA_STATE_SEND_PERIODIC;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2205      	movs	r2, #5
 8000c74:	701a      	strb	r2, [r3, #0]
                    // 아직 대기 시간이 남았으므로 상태 유지
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
                }
            }
            break;
 8000c76:	e051      	b.n	8000d1c <LoraStarter_Process+0x4f4>
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	691a      	ldr	r2, [r3, #16]
 8000c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000c86:	4413      	add	r3, r2
 8000c88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
 8000c8c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000c90:	4939      	ldr	r1, [pc, #228]	@ (8000d78 <LoraStarter_Process+0x550>)
 8000c92:	2000      	movs	r0, #0
 8000c94:	f003 ff2a 	bl	8004aec <LOGGER_SendFormatted>
            break;
 8000c98:	e040      	b.n	8000d1c <LoraStarter_Process+0x4f4>
        case LORA_STATE_JOIN_RETRY:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000c9a:	f003 feb9 	bl	8004a10 <TIME_GetCurrentMs>
 8000c9e:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
                
                if (ctx->last_retry_time == 0) {
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d10b      	bne.n	8000cc2 <LoraStarter_Process+0x49a>
                    // 첫 재시도: 바로 SEND_JOIN
                    LOG_DEBUG("[LoRa] First JOIN retry");
 8000caa:	4934      	ldr	r1, [pc, #208]	@ (8000d7c <LoraStarter_Process+0x554>)
 8000cac:	2000      	movs	r0, #0
 8000cae:	f003 ff1d 	bl	8004aec <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000cb8:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	701a      	strb	r2, [r3, #0]
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
                             ctx->retry_delay_ms - (current_time - ctx->last_retry_time));
                    // 아무것도 하지 않음
                }
            }
            break;
 8000cc0:	e02c      	b.n	8000d1c <LoraStarter_Process+0x4f4>
                } else if ((current_time - ctx->last_retry_time) >= ctx->retry_delay_ms) {
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cc6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000cca:	1ad2      	subs	r2, r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d30e      	bcc.n	8000cf2 <LoraStarter_Process+0x4ca>
                    LOG_DEBUG("[LoRa] JOIN retry after %lu ms delay", ctx->retry_delay_ms);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4929      	ldr	r1, [pc, #164]	@ (8000d80 <LoraStarter_Process+0x558>)
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f003 ff05 	bl	8004aec <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000ce8:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2203      	movs	r2, #3
 8000cee:	701a      	strb	r2, [r3, #0]
            break;
 8000cf0:	e014      	b.n	8000d1c <LoraStarter_Process+0x4f4>
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000cfe:	1acb      	subs	r3, r1, r3
 8000d00:	4413      	add	r3, r2
 8000d02:	461a      	mov	r2, r3
 8000d04:	491f      	ldr	r1, [pc, #124]	@ (8000d84 <LoraStarter_Process+0x55c>)
 8000d06:	2000      	movs	r0, #0
 8000d08:	f003 fef0 	bl	8004aec <LOGGER_SendFormatted>
            break;
 8000d0c:	e006      	b.n	8000d1c <LoraStarter_Process+0x4f4>
        case LORA_STATE_DONE:
        case LORA_STATE_ERROR:
        default:
            // 이미 완료된 상태이므로 아무것도 하지 않음
            break;
 8000d0e:	bf00      	nop
 8000d10:	e004      	b.n	8000d1c <LoraStarter_Process+0x4f4>
            break;
 8000d12:	bf00      	nop
 8000d14:	e002      	b.n	8000d1c <LoraStarter_Process+0x4f4>
            break;
 8000d16:	bf00      	nop
 8000d18:	e000      	b.n	8000d1c <LoraStarter_Process+0x4f4>
            break;
 8000d1a:	bf00      	nop
    }

    // 상태 변경 로깅
    if (old_state != ctx->state) {
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	f897 20eb 	ldrb.w	r2, [r7, #235]	@ 0xeb
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d012      	beq.n	8000d4e <LoraStarter_Process+0x526>
        LORA_LOG_STATE_CHANGE(get_state_name(old_state), get_state_name(ctx->state));
 8000d28:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fcdb 	bl	80006e8 <get_state_name>
 8000d32:	4604      	mov	r4, r0
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fcd5 	bl	80006e8 <get_state_name>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	4622      	mov	r2, r4
 8000d42:	4911      	ldr	r1, [pc, #68]	@ (8000d88 <LoraStarter_Process+0x560>)
 8000d44:	2000      	movs	r0, #0
 8000d46:	f003 fed1 	bl	8004aec <LOGGER_SendFormatted>
 8000d4a:	e000      	b.n	8000d4e <LoraStarter_Process+0x526>
    if (ctx == NULL) return;
 8000d4c:	bf00      	nop
    }
}
 8000d4e:	37f4      	adds	r7, #244	@ 0xf4
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd90      	pop	{r4, r7, pc}
 8000d54:	0801625c 	.word	0x0801625c
 8000d58:	08016270 	.word	0x08016270
 8000d5c:	08016280 	.word	0x08016280
 8000d60:	08016298 	.word	0x08016298
 8000d64:	080162b0 	.word	0x080162b0
 8000d68:	080162b4 	.word	0x080162b4
 8000d6c:	080162d0 	.word	0x080162d0
 8000d70:	080162f4 	.word	0x080162f4
 8000d74:	08016310 	.word	0x08016310
 8000d78:	0801634c 	.word	0x0801634c
 8000d7c:	08016380 	.word	0x08016380
 8000d80:	08016398 	.word	0x08016398
 8000d84:	080163c0 	.word	0x080163c0
 8000d88:	080163f4 	.word	0x080163f4

08000d8c <Network_SendBinary>:
    
    return NETWORK_OK;
}

int Network_SendBinary(const void* data, size_t size)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
    if (!g_connected) {
 8000d96:	4b20      	ldr	r3, [pc, #128]	@ (8000e18 <Network_SendBinary+0x8c>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	f083 0301 	eor.w	r3, r3, #1
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d002      	beq.n	8000daa <Network_SendBinary+0x1e>
        return NETWORK_NOT_CONNECTED;
 8000da4:	f06f 0301 	mvn.w	r3, #1
 8000da8:	e032      	b.n	8000e10 <Network_SendBinary+0x84>
    }
    
    if (data == NULL || size == 0) {
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d002      	beq.n	8000db6 <Network_SendBinary+0x2a>
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d102      	bne.n	8000dbc <Network_SendBinary+0x30>
        return NETWORK_INVALID_PARAM;
 8000db6:	f06f 0303 	mvn.w	r3, #3
 8000dba:	e029      	b.n	8000e10 <Network_SendBinary+0x84>
    }
    
    // 백엔드에 따른 분기 처리
    switch (g_backend) {
 8000dbc:	4b17      	ldr	r3, [pc, #92]	@ (8000e1c <Network_SendBinary+0x90>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d002      	beq.n	8000dca <Network_SendBinary+0x3e>
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d002      	beq.n	8000dce <Network_SendBinary+0x42>
 8000dc8:	e020      	b.n	8000e0c <Network_SendBinary+0x80>
        case NETWORK_BACKEND_SOCKET:
            // 실제 구현에서는 소켓을 통한 데이터 전송
            // 지금은 테스트를 위한 최소 구현
            return NETWORK_OK;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	e020      	b.n	8000e10 <Network_SendBinary+0x84>
            
        case NETWORK_BACKEND_SD_CARD:
            {
                int result = SDStorage_WriteLog(data, size);
 8000dce:	6839      	ldr	r1, [r7, #0]
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f000 fb5d 	bl	8001490 <SDStorage_WriteLog>
 8000dd6:	60f8      	str	r0, [r7, #12]
                switch (result) {
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d00b      	beq.n	8000df6 <Network_SendBinary+0x6a>
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	dc10      	bgt.n	8000e06 <Network_SendBinary+0x7a>
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f113 0f05 	cmn.w	r3, #5
 8000dea:	d009      	beq.n	8000e00 <Network_SendBinary+0x74>
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f113 0f02 	cmn.w	r3, #2
 8000df2:	d002      	beq.n	8000dfa <Network_SendBinary+0x6e>
 8000df4:	e007      	b.n	8000e06 <Network_SendBinary+0x7a>
                    case SDSTORAGE_OK:
                        return NETWORK_OK;
 8000df6:	2300      	movs	r3, #0
 8000df8:	e00a      	b.n	8000e10 <Network_SendBinary+0x84>
                    case SDSTORAGE_NOT_READY:
                        return NETWORK_NOT_CONNECTED;
 8000dfa:	f06f 0301 	mvn.w	r3, #1
 8000dfe:	e007      	b.n	8000e10 <Network_SendBinary+0x84>
                    case SDSTORAGE_INVALID_PARAM:
                        return NETWORK_INVALID_PARAM;
 8000e00:	f06f 0303 	mvn.w	r3, #3
 8000e04:	e004      	b.n	8000e10 <Network_SendBinary+0x84>
                    case SDSTORAGE_DISK_FULL:
                    case SDSTORAGE_FILE_ERROR:
                    default:
                        return NETWORK_ERROR;
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0a:	e001      	b.n	8000e10 <Network_SendBinary+0x84>
                }
            }
            
        default:
            return NETWORK_ERROR;
 8000e0c:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	2000021c 	.word	0x2000021c
 8000e1c:	2000021d 	.word	0x2000021d

08000e20 <Network_IsConnected>:

bool Network_IsConnected(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
    if (g_backend == NETWORK_BACKEND_SD_CARD) {
 8000e24:	4b0b      	ldr	r3, [pc, #44]	@ (8000e54 <Network_IsConnected+0x34>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d10f      	bne.n	8000e4c <Network_IsConnected+0x2c>
        return g_connected && SDStorage_IsReady();
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <Network_IsConnected+0x38>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d006      	beq.n	8000e42 <Network_IsConnected+0x22>
 8000e34:	f000 fd12 	bl	800185c <SDStorage_IsReady>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <Network_IsConnected+0x22>
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e000      	b.n	8000e44 <Network_IsConnected+0x24>
 8000e42:	2300      	movs	r3, #0
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	e001      	b.n	8000e50 <Network_IsConnected+0x30>
    }
    return g_connected;
 8000e4c:	4b02      	ldr	r3, [pc, #8]	@ (8000e58 <Network_IsConnected+0x38>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	2000021d 	.word	0x2000021d
 8000e58:	2000021c 	.word	0x2000021c

08000e5c <is_response_ok>:
#include "ResponseHandler.h"
#include "logger.h"
#include <string.h>

bool is_response_ok(const char* response)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d105      	bne.n	8000e76 <is_response_ok+0x1a>
        LOG_DEBUG("[ResponseHandler] is_response_ok: NULL response");
 8000e6a:	4925      	ldr	r1, [pc, #148]	@ (8000f00 <is_response_ok+0xa4>)
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f003 fe3d 	bl	8004aec <LOGGER_SendFormatted>
        return false;
 8000e72:	2300      	movs	r3, #0
 8000e74:	e03f      	b.n	8000ef6 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking OK response: '%s'", response);
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	4922      	ldr	r1, [pc, #136]	@ (8000f04 <is_response_ok+0xa8>)
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f003 fe36 	bl	8004aec <LOGGER_SendFormatted>
    
    // OK 또는 OK\r\n, OK\n 등 허용
    if (strcmp(response, "OK") == 0) {
 8000e80:	4921      	ldr	r1, [pc, #132]	@ (8000f08 <is_response_ok+0xac>)
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff f9c4 	bl	8000210 <strcmp>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d105      	bne.n	8000e9a <is_response_ok+0x3e>
        LOG_DEBUG("[ResponseHandler] OK response confirmed");
 8000e8e:	491f      	ldr	r1, [pc, #124]	@ (8000f0c <is_response_ok+0xb0>)
 8000e90:	2000      	movs	r0, #0
 8000e92:	f003 fe2b 	bl	8004aec <LOGGER_SendFormatted>
        return true;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e02d      	b.n	8000ef6 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\r\n") == 0) {
 8000e9a:	491d      	ldr	r1, [pc, #116]	@ (8000f10 <is_response_ok+0xb4>)
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff f9b7 	bl	8000210 <strcmp>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d105      	bne.n	8000eb4 <is_response_ok+0x58>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with CRLF)");
 8000ea8:	491a      	ldr	r1, [pc, #104]	@ (8000f14 <is_response_ok+0xb8>)
 8000eaa:	2000      	movs	r0, #0
 8000eac:	f003 fe1e 	bl	8004aec <LOGGER_SendFormatted>
        return true;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e020      	b.n	8000ef6 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\n") == 0) {
 8000eb4:	4918      	ldr	r1, [pc, #96]	@ (8000f18 <is_response_ok+0xbc>)
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff f9aa 	bl	8000210 <strcmp>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d105      	bne.n	8000ece <is_response_ok+0x72>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with LF)");
 8000ec2:	4916      	ldr	r1, [pc, #88]	@ (8000f1c <is_response_ok+0xc0>)
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f003 fe11 	bl	8004aec <LOGGER_SendFormatted>
        return true;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e013      	b.n	8000ef6 <is_response_ok+0x9a>
    }
    
    // AT+VER 버전 응답도 성공으로 간주 (RUI_로 시작하는 응답)
    if (strstr(response, "RUI_") != NULL) {
 8000ece:	4914      	ldr	r1, [pc, #80]	@ (8000f20 <is_response_ok+0xc4>)
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f014 fbcc 	bl	801566e <strstr>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d006      	beq.n	8000eea <is_response_ok+0x8e>
        LOG_DEBUG("[ResponseHandler] Version response confirmed: %s", response);
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	4911      	ldr	r1, [pc, #68]	@ (8000f24 <is_response_ok+0xc8>)
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f003 fe03 	bl	8004aec <LOGGER_SendFormatted>
        return true;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e005      	b.n	8000ef6 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Not an OK response: '%s'", response);
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	490e      	ldr	r1, [pc, #56]	@ (8000f28 <is_response_ok+0xcc>)
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f003 fdfc 	bl	8004aec <LOGGER_SendFormatted>
    return false;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	08016414 	.word	0x08016414
 8000f04:	08016444 	.word	0x08016444
 8000f08:	08016474 	.word	0x08016474
 8000f0c:	08016478 	.word	0x08016478
 8000f10:	080164a0 	.word	0x080164a0
 8000f14:	080164a8 	.word	0x080164a8
 8000f18:	080164dc 	.word	0x080164dc
 8000f1c:	080164e0 	.word	0x080164e0
 8000f20:	08016514 	.word	0x08016514
 8000f24:	0801651c 	.word	0x0801651c
 8000f28:	08016550 	.word	0x08016550

08000f2c <is_join_response_ok>:

bool is_join_response_ok(const char* response)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f38:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f3c:	6018      	str	r0, [r3, #0]
    if (response == NULL) {
 8000f3e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f42:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d105      	bne.n	8000f58 <is_join_response_ok+0x2c>
        LOG_DEBUG("[ResponseHandler] is_join_response_ok: NULL response");
 8000f4c:	4934      	ldr	r1, [pc, #208]	@ (8001020 <is_join_response_ok+0xf4>)
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f003 fdcc 	bl	8004aec <LOGGER_SendFormatted>
        return false;
 8000f54:	2300      	movs	r3, #0
 8000f56:	e05e      	b.n	8001016 <is_join_response_ok+0xea>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking JOIN response: '%s'", response);
 8000f58:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f5c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	4930      	ldr	r1, [pc, #192]	@ (8001024 <is_join_response_ok+0xf8>)
 8000f64:	2000      	movs	r0, #0
 8000f66:	f003 fdc1 	bl	8004aec <LOGGER_SendFormatted>
    
    // 개행 문자 제거하여 비교
    char clean_response[512];
    strncpy(clean_response, response, sizeof(clean_response) - 1);
 8000f6a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f6e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f72:	f107 0008 	add.w	r0, r7, #8
 8000f76:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8000f7a:	6819      	ldr	r1, [r3, #0]
 8000f7c:	f014 fb64 	bl	8015648 <strncpy>
    clean_response[sizeof(clean_response) - 1] = '\0';
 8000f80:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f84:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
    
    // 개행 문자 제거
    char* pos = clean_response;
 8000f8e:	f107 0308 	add.w	r3, r7, #8
 8000f92:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8000f96:	e013      	b.n	8000fc0 <is_join_response_ok+0x94>
        if (*pos == '\r' || *pos == '\n') {
 8000f98:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b0d      	cmp	r3, #13
 8000fa0:	d004      	beq.n	8000fac <is_join_response_ok+0x80>
 8000fa2:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b0a      	cmp	r3, #10
 8000faa:	d104      	bne.n	8000fb6 <is_join_response_ok+0x8a>
            *pos = '\0';
 8000fac:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
            break;
 8000fb4:	e009      	b.n	8000fca <is_join_response_ok+0x9e>
        }
        pos++;
 8000fb6:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000fba:	3301      	adds	r3, #1
 8000fbc:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8000fc0:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1e6      	bne.n	8000f98 <is_join_response_ok+0x6c>
    }
    
    bool result = (strcmp(clean_response, "+EVT:JOINED") == 0);
 8000fca:	f107 0308 	add.w	r3, r7, #8
 8000fce:	4916      	ldr	r1, [pc, #88]	@ (8001028 <is_join_response_ok+0xfc>)
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff f91d 	bl	8000210 <strcmp>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	bf0c      	ite	eq
 8000fdc:	2301      	moveq	r3, #1
 8000fde:	2300      	movne	r3, #0
 8000fe0:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
    
    if (result) {
 8000fe4:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d009      	beq.n	8001000 <is_join_response_ok+0xd4>
        LOG_WARN("[ResponseHandler] ✅ JOIN SUCCESS: %s", response);
 8000fec:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000ff0:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	490d      	ldr	r1, [pc, #52]	@ (800102c <is_join_response_ok+0x100>)
 8000ff8:	2002      	movs	r0, #2
 8000ffa:	f003 fd77 	bl	8004aec <LOGGER_SendFormatted>
 8000ffe:	e008      	b.n	8001012 <is_join_response_ok+0xe6>
    } else {
        LOG_DEBUG("[ResponseHandler] Not a JOIN response: '%s'", response);
 8001000:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001004:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	4909      	ldr	r1, [pc, #36]	@ (8001030 <is_join_response_ok+0x104>)
 800100c:	2000      	movs	r0, #0
 800100e:	f003 fd6d 	bl	8004aec <LOGGER_SendFormatted>
    }
    
    return result;
 8001012:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
}
 8001016:	4618      	mov	r0, r3
 8001018:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	0801657c 	.word	0x0801657c
 8001024:	080165b4 	.word	0x080165b4
 8001028:	080165e4 	.word	0x080165e4
 800102c:	080165f0 	.word	0x080165f0
 8001030:	08016618 	.word	0x08016618

08001034 <ResponseHandler_ParseSendResponse>:

ResponseType ResponseHandler_ParseSendResponse(const char* response)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d105      	bne.n	800104e <ResponseHandler_ParseSendResponse+0x1a>
        LOG_DEBUG("[ResponseHandler] ParseSendResponse: NULL response");
 8001042:	491e      	ldr	r1, [pc, #120]	@ (80010bc <ResponseHandler_ParseSendResponse+0x88>)
 8001044:	2000      	movs	r0, #0
 8001046:	f003 fd51 	bl	8004aec <LOGGER_SendFormatted>
        return RESPONSE_UNKNOWN;
 800104a:	2303      	movs	r3, #3
 800104c:	e031      	b.n	80010b2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Parsing SEND response: '%s'", response);
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	491b      	ldr	r1, [pc, #108]	@ (80010c0 <ResponseHandler_ParseSendResponse+0x8c>)
 8001052:	2000      	movs	r0, #0
 8001054:	f003 fd4a 	bl	8004aec <LOGGER_SendFormatted>
    
    if (strstr(response, "+EVT:SEND_CONFIRMED_OK") != NULL) {
 8001058:	491a      	ldr	r1, [pc, #104]	@ (80010c4 <ResponseHandler_ParseSendResponse+0x90>)
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f014 fb07 	bl	801566e <strstr>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d005      	beq.n	8001072 <ResponseHandler_ParseSendResponse+0x3e>
        LOG_WARN("[ResponseHandler] ✅ SEND SUCCESS: CONFIRMED_OK");
 8001066:	4918      	ldr	r1, [pc, #96]	@ (80010c8 <ResponseHandler_ParseSendResponse+0x94>)
 8001068:	2002      	movs	r0, #2
 800106a:	f003 fd3f 	bl	8004aec <LOGGER_SendFormatted>
        return RESPONSE_OK;
 800106e:	2300      	movs	r3, #0
 8001070:	e01f      	b.n	80010b2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strstr(response, "+EVT:SEND_CONFIRMED_FAILED") != NULL) {
 8001072:	4916      	ldr	r1, [pc, #88]	@ (80010cc <ResponseHandler_ParseSendResponse+0x98>)
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f014 fafa 	bl	801566e <strstr>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d005      	beq.n	800108c <ResponseHandler_ParseSendResponse+0x58>
        LOG_WARN("[ResponseHandler] SEND response: CONFIRMED_FAILED");
 8001080:	4913      	ldr	r1, [pc, #76]	@ (80010d0 <ResponseHandler_ParseSendResponse+0x9c>)
 8001082:	2002      	movs	r0, #2
 8001084:	f003 fd32 	bl	8004aec <LOGGER_SendFormatted>
        return RESPONSE_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e012      	b.n	80010b2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strcmp(response, "TIMEOUT") == 0) {
 800108c:	4911      	ldr	r1, [pc, #68]	@ (80010d4 <ResponseHandler_ParseSendResponse+0xa0>)
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff f8be 	bl	8000210 <strcmp>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d105      	bne.n	80010a6 <ResponseHandler_ParseSendResponse+0x72>
        LOG_WARN("[ResponseHandler] SEND response: TIMEOUT");
 800109a:	490f      	ldr	r1, [pc, #60]	@ (80010d8 <ResponseHandler_ParseSendResponse+0xa4>)
 800109c:	2002      	movs	r0, #2
 800109e:	f003 fd25 	bl	8004aec <LOGGER_SendFormatted>
        return RESPONSE_TIMEOUT;
 80010a2:	2302      	movs	r3, #2
 80010a4:	e005      	b.n	80010b2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Unknown SEND response: '%s'", response);
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	490c      	ldr	r1, [pc, #48]	@ (80010dc <ResponseHandler_ParseSendResponse+0xa8>)
 80010aa:	2000      	movs	r0, #0
 80010ac:	f003 fd1e 	bl	8004aec <LOGGER_SendFormatted>
    return RESPONSE_UNKNOWN;
 80010b0:	2303      	movs	r3, #3
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	08016644 	.word	0x08016644
 80010c0:	08016678 	.word	0x08016678
 80010c4:	080166a8 	.word	0x080166a8
 80010c8:	080166c0 	.word	0x080166c0
 80010cc:	080166f4 	.word	0x080166f4
 80010d0:	08016710 	.word	0x08016710
 80010d4:	08016744 	.word	0x08016744
 80010d8:	0801674c 	.word	0x0801674c
 80010dc:	08016778 	.word	0x08016778

080010e0 <SDStorage_Init>:
static int _create_log_directory(void);
static int _generate_log_filename(char* filename, size_t max_len);
// static uint32_t _get_current_timestamp(void); - unused function removed

int SDStorage_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
 80010e6:	af00      	add	r7, sp, #0
#ifdef STM32F746xx
    // STM32 환경: FatFs 초기화 및 진단
    LOG_INFO("[SDStorage] Starting SD card initialization...");
 80010e8:	49b8      	ldr	r1, [pc, #736]	@ (80013cc <SDStorage_Init+0x2ec>)
 80010ea:	2001      	movs	r0, #1
 80010ec:	f003 fcfe 	bl	8004aec <LOGGER_SendFormatted>
    
    // 1. 하드웨어 상태 진단
    extern SD_HandleTypeDef hsd1;
    HAL_SD_CardStateTypeDef card_state = HAL_SD_GetCardState(&hsd1);
 80010f0:	48b7      	ldr	r0, [pc, #732]	@ (80013d0 <SDStorage_Init+0x2f0>)
 80010f2:	f00b f997 	bl	800c424 <HAL_SD_GetCardState>
 80010f6:	f8c7 0244 	str.w	r0, [r7, #580]	@ 0x244
    LOG_INFO("[SDStorage] HAL SD card state: %d", card_state);
 80010fa:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 80010fe:	49b5      	ldr	r1, [pc, #724]	@ (80013d4 <SDStorage_Init+0x2f4>)
 8001100:	2001      	movs	r0, #1
 8001102:	f003 fcf3 	bl	8004aec <LOGGER_SendFormatted>
    
    DSTATUS disk_status = disk_initialize(0);
 8001106:	2000      	movs	r0, #0
 8001108:	f00f fd98 	bl	8010c3c <disk_initialize>
 800110c:	4603      	mov	r3, r0
 800110e:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
    LOG_INFO("[SDStorage] disk_initialize result: 0x%02X", disk_status);
 8001112:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8001116:	461a      	mov	r2, r3
 8001118:	49af      	ldr	r1, [pc, #700]	@ (80013d8 <SDStorage_Init+0x2f8>)
 800111a:	2001      	movs	r0, #1
 800111c:	f003 fce6 	bl	8004aec <LOGGER_SendFormatted>
    
    // disk_initialize 실패 시 조기 종료 (블로킹 방지)
    if (disk_status != 0) {
 8001120:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8001124:	2b00      	cmp	r3, #0
 8001126:	d00a      	beq.n	800113e <SDStorage_Init+0x5e>
        LOG_ERROR("[SDStorage] disk_initialize failed - SD card not ready");
 8001128:	49ac      	ldr	r1, [pc, #688]	@ (80013dc <SDStorage_Init+0x2fc>)
 800112a:	2003      	movs	r0, #3
 800112c:	f003 fcde 	bl	8004aec <LOGGER_SendFormatted>
        LOG_ERROR("[SDStorage] Possible causes: write-protected, bad card, or BSP/HAL conflict");
 8001130:	49ab      	ldr	r1, [pc, #684]	@ (80013e0 <SDStorage_Init+0x300>)
 8001132:	2003      	movs	r0, #3
 8001134:	f003 fcda 	bl	8004aec <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 8001138:	f04f 33ff 	mov.w	r3, #4294967295
 800113c:	e141      	b.n	80013c2 <SDStorage_Init+0x2e2>
    }
    
    // 2. 파일시스템 마운트 시도 (지연 마운트로 변경 - 블로킹 방지)
    LOG_INFO("[SDStorage] Using deferred mount (flag=0) to avoid blocking...");
 800113e:	49a9      	ldr	r1, [pc, #676]	@ (80013e4 <SDStorage_Init+0x304>)
 8001140:	2001      	movs	r0, #1
 8001142:	f003 fcd3 	bl	8004aec <LOGGER_SendFormatted>
    
    // f_mount 호출 전에 약간의 지연 (SD 카드 안정화)
    #ifdef STM32F746xx
    HAL_Delay(100);
 8001146:	2064      	movs	r0, #100	@ 0x64
 8001148:	f004 f81a 	bl	8005180 <HAL_Delay>
    #endif
    
    // f_mount 블로킹 문제 - 완전 우회 시도
    LOG_WARN("[SDStorage] f_mount consistently blocks despite all fixes");
 800114c:	49a6      	ldr	r1, [pc, #664]	@ (80013e8 <SDStorage_Init+0x308>)
 800114e:	2002      	movs	r0, #2
 8001150:	f003 fccc 	bl	8004aec <LOGGER_SendFormatted>
    LOG_INFO("[SDStorage] Attempting direct file operations without f_mount...");
 8001154:	49a5      	ldr	r1, [pc, #660]	@ (80013ec <SDStorage_Init+0x30c>)
 8001156:	2001      	movs	r0, #1
 8001158:	f003 fcc8 	bl	8004aec <LOGGER_SendFormatted>
    LOG_INFO("[SDStorage] Some FatFs implementations support auto-mount on first file access");
 800115c:	49a4      	ldr	r1, [pc, #656]	@ (80013f0 <SDStorage_Init+0x310>)
 800115e:	2001      	movs	r0, #1
 8001160:	f003 fcc4 	bl	8004aec <LOGGER_SendFormatted>
    
    // f_mount를 우회하고 직접 파일 작업 시도
    FRESULT mount_result = FR_OK;  // f_mount 생략
 8001164:	2300      	movs	r3, #0
 8001166:	f887 3242 	strb.w	r3, [r7, #578]	@ 0x242
    LOG_INFO("[SDStorage] f_mount bypassed - proceeding to direct file test");
 800116a:	49a2      	ldr	r1, [pc, #648]	@ (80013f4 <SDStorage_Init+0x314>)
 800116c:	2001      	movs	r0, #1
 800116e:	f003 fcbd 	bl	8004aec <LOGGER_SendFormatted>
    
    // 즉시 마운트 성공 시 쓰기 준비 완료
    if (mount_result == FR_OK) {
 8001172:	f897 3242 	ldrb.w	r3, [r7, #578]	@ 0x242
 8001176:	2b00      	cmp	r3, #0
 8001178:	d103      	bne.n	8001182 <SDStorage_Init+0xa2>
        LOG_INFO("[SDStorage] Immediate mount successful - SD ready for write operations");
 800117a:	499f      	ldr	r1, [pc, #636]	@ (80013f8 <SDStorage_Init+0x318>)
 800117c:	2001      	movs	r0, #1
 800117e:	f003 fcb5 	bl	8004aec <LOGGER_SendFormatted>
    }
    
    if (mount_result != FR_OK) {
 8001182:	f897 3242 	ldrb.w	r3, [r7, #578]	@ 0x242
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 80a4 	beq.w	80012d4 <SDStorage_Init+0x1f4>
        LOG_WARN("[SDStorage] f_mount failed with result: %d", mount_result);
 800118c:	f897 3242 	ldrb.w	r3, [r7, #578]	@ 0x242
 8001190:	461a      	mov	r2, r3
 8001192:	499a      	ldr	r1, [pc, #616]	@ (80013fc <SDStorage_Init+0x31c>)
 8001194:	2002      	movs	r0, #2
 8001196:	f003 fca9 	bl	8004aec <LOGGER_SendFormatted>
        
        // SD 카드가 이미 포맷되어 있다면 f_mkfs 시도하지 않고 다른 접근법 사용
        if (mount_result == FR_DISK_ERR) {
 800119a:	f897 3242 	ldrb.w	r3, [r7, #578]	@ 0x242
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d132      	bne.n	8001208 <SDStorage_Init+0x128>
            LOG_WARN("[SDStorage] FR_DISK_ERR detected - SD card may be formatted but incompatible");
 80011a2:	4997      	ldr	r1, [pc, #604]	@ (8001400 <SDStorage_Init+0x320>)
 80011a4:	2002      	movs	r0, #2
 80011a6:	f003 fca1 	bl	8004aec <LOGGER_SendFormatted>
            LOG_INFO("[SDStorage] Skipping f_mkfs since SD card is already FAT32 formatted");
 80011aa:	4996      	ldr	r1, [pc, #600]	@ (8001404 <SDStorage_Init+0x324>)
 80011ac:	2001      	movs	r0, #1
 80011ae:	f003 fc9d 	bl	8004aec <LOGGER_SendFormatted>
            LOG_INFO("[SDStorage] Trying alternative mount approach...");
 80011b2:	4995      	ldr	r1, [pc, #596]	@ (8001408 <SDStorage_Init+0x328>)
 80011b4:	2001      	movs	r0, #1
 80011b6:	f003 fc99 	bl	8004aec <LOGGER_SendFormatted>
            
            // 다른 마운트 방식 시도 (지연 마운트)
            LOG_INFO("[SDStorage] Attempting deferred mount (flag=0)...");
 80011ba:	4994      	ldr	r1, [pc, #592]	@ (800140c <SDStorage_Init+0x32c>)
 80011bc:	2001      	movs	r0, #1
 80011be:	f003 fc95 	bl	8004aec <LOGGER_SendFormatted>
            mount_result = f_mount(&SDFatFS, SDPath, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	4992      	ldr	r1, [pc, #584]	@ (8001410 <SDStorage_Init+0x330>)
 80011c6:	4893      	ldr	r0, [pc, #588]	@ (8001414 <SDStorage_Init+0x334>)
 80011c8:	f011 fa5a 	bl	8012680 <f_mount>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f887 3242 	strb.w	r3, [r7, #578]	@ 0x242
            LOG_INFO("[SDStorage] Deferred mount result: %d", mount_result);
 80011d2:	f897 3242 	ldrb.w	r3, [r7, #578]	@ 0x242
 80011d6:	461a      	mov	r2, r3
 80011d8:	498f      	ldr	r1, [pc, #572]	@ (8001418 <SDStorage_Init+0x338>)
 80011da:	2001      	movs	r0, #1
 80011dc:	f003 fc86 	bl	8004aec <LOGGER_SendFormatted>
            
            if (mount_result == FR_OK) {
 80011e0:	f897 3242 	ldrb.w	r3, [r7, #578]	@ 0x242
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d104      	bne.n	80011f2 <SDStorage_Init+0x112>
                LOG_INFO("[SDStorage] Deferred mount successful!");
 80011e8:	498c      	ldr	r1, [pc, #560]	@ (800141c <SDStorage_Init+0x33c>)
 80011ea:	2001      	movs	r0, #1
 80011ec:	f003 fc7e 	bl	8004aec <LOGGER_SendFormatted>
 80011f0:	e070      	b.n	80012d4 <SDStorage_Init+0x1f4>
            } else {
                LOG_ERROR("[SDStorage] Both immediate and deferred mount failed");
 80011f2:	498b      	ldr	r1, [pc, #556]	@ (8001420 <SDStorage_Init+0x340>)
 80011f4:	2003      	movs	r0, #3
 80011f6:	f003 fc79 	bl	8004aec <LOGGER_SendFormatted>
                LOG_ERROR("[SDStorage] SD card may have hardware compatibility issues");
 80011fa:	498a      	ldr	r1, [pc, #552]	@ (8001424 <SDStorage_Init+0x344>)
 80011fc:	2003      	movs	r0, #3
 80011fe:	f003 fc75 	bl	8004aec <LOGGER_SendFormatted>
                return SDSTORAGE_ERROR;
 8001202:	f04f 33ff 	mov.w	r3, #4294967295
 8001206:	e0dc      	b.n	80013c2 <SDStorage_Init+0x2e2>
            }
        }
        else if (mount_result == FR_NOT_READY || mount_result == FR_NO_FILESYSTEM) {
 8001208:	f897 3242 	ldrb.w	r3, [r7, #578]	@ 0x242
 800120c:	2b03      	cmp	r3, #3
 800120e:	d003      	beq.n	8001218 <SDStorage_Init+0x138>
 8001210:	f897 3242 	ldrb.w	r3, [r7, #578]	@ 0x242
 8001214:	2b0d      	cmp	r3, #13
 8001216:	d152      	bne.n	80012be <SDStorage_Init+0x1de>
            // 작업 버퍼 할당 (전역 또는 스택)
            static BYTE work[_MAX_SS];
            
            // f_mkfs 무한 루프 방지를 위해 임시 비활성화
            LOG_WARN("[SDStorage] f_mkfs temporarily disabled due to infinite loop issue");
 8001218:	4983      	ldr	r1, [pc, #524]	@ (8001428 <SDStorage_Init+0x348>)
 800121a:	2002      	movs	r0, #2
 800121c:	f003 fc66 	bl	8004aec <LOGGER_SendFormatted>
            LOG_INFO("[SDStorage] Skipping filesystem creation to avoid system hang");
 8001220:	4982      	ldr	r1, [pc, #520]	@ (800142c <SDStorage_Init+0x34c>)
 8001222:	2001      	movs	r0, #1
 8001224:	f003 fc62 	bl	8004aec <LOGGER_SendFormatted>
            FRESULT mkfs_result = FR_DISK_ERR;  // 강제 실패 처리
 8001228:	2301      	movs	r3, #1
 800122a:	f887 3241 	strb.w	r3, [r7, #577]	@ 0x241
            LOG_INFO("[SDStorage] f_mkfs(skipped) result: %d", mkfs_result);
 800122e:	f897 3241 	ldrb.w	r3, [r7, #577]	@ 0x241
 8001232:	461a      	mov	r2, r3
 8001234:	497e      	ldr	r1, [pc, #504]	@ (8001430 <SDStorage_Init+0x350>)
 8001236:	2001      	movs	r0, #1
 8001238:	f003 fc58 	bl	8004aec <LOGGER_SendFormatted>
            
            if (mkfs_result != FR_OK) {
 800123c:	f897 3241 	ldrb.w	r3, [r7, #577]	@ 0x241
 8001240:	2b00      	cmp	r3, #0
 8001242:	d01f      	beq.n	8001284 <SDStorage_Init+0x1a4>
                // FAT32 강제 생성도 무한 루프 방지를 위해 비활성화
                LOG_WARN("[SDStorage] f_mkfs(FM_FAT32) also disabled due to infinite loop issue");
 8001244:	497b      	ldr	r1, [pc, #492]	@ (8001434 <SDStorage_Init+0x354>)
 8001246:	2002      	movs	r0, #2
 8001248:	f003 fc50 	bl	8004aec <LOGGER_SendFormatted>
                mkfs_result = FR_DISK_ERR;  // 강제 실패 처리
 800124c:	2301      	movs	r3, #1
 800124e:	f887 3241 	strb.w	r3, [r7, #577]	@ 0x241
                LOG_INFO("[SDStorage] f_mkfs(FM_FAT32, skipped) result: %d", mkfs_result);
 8001252:	f897 3241 	ldrb.w	r3, [r7, #577]	@ 0x241
 8001256:	461a      	mov	r2, r3
 8001258:	4977      	ldr	r1, [pc, #476]	@ (8001438 <SDStorage_Init+0x358>)
 800125a:	2001      	movs	r0, #1
 800125c:	f003 fc46 	bl	8004aec <LOGGER_SendFormatted>
                
                if (mkfs_result != FR_OK) {
 8001260:	f897 3241 	ldrb.w	r3, [r7, #577]	@ 0x241
 8001264:	2b00      	cmp	r3, #0
 8001266:	d00d      	beq.n	8001284 <SDStorage_Init+0x1a4>
                    LOG_ERROR("[SDStorage] File system creation failed: %d", mkfs_result);
 8001268:	f897 3241 	ldrb.w	r3, [r7, #577]	@ 0x241
 800126c:	461a      	mov	r2, r3
 800126e:	4973      	ldr	r1, [pc, #460]	@ (800143c <SDStorage_Init+0x35c>)
 8001270:	2003      	movs	r0, #3
 8001272:	f003 fc3b 	bl	8004aec <LOGGER_SendFormatted>
                    LOG_ERROR("[SDStorage] Possible SD card hardware issue - try different card");
 8001276:	4972      	ldr	r1, [pc, #456]	@ (8001440 <SDStorage_Init+0x360>)
 8001278:	2003      	movs	r0, #3
 800127a:	f003 fc37 	bl	8004aec <LOGGER_SendFormatted>
                    return SDSTORAGE_ERROR;
 800127e:	f04f 33ff 	mov.w	r3, #4294967295
 8001282:	e09e      	b.n	80013c2 <SDStorage_Init+0x2e2>
                }
            }
            
            // 파일시스템 생성 후 재마운트 시도
            mount_result = f_mount(&SDFatFS, SDPath, 1);
 8001284:	2201      	movs	r2, #1
 8001286:	4962      	ldr	r1, [pc, #392]	@ (8001410 <SDStorage_Init+0x330>)
 8001288:	4862      	ldr	r0, [pc, #392]	@ (8001414 <SDStorage_Init+0x334>)
 800128a:	f011 f9f9 	bl	8012680 <f_mount>
 800128e:	4603      	mov	r3, r0
 8001290:	f887 3242 	strb.w	r3, [r7, #578]	@ 0x242
            LOG_INFO("[SDStorage] Re-mount after mkfs result: %d", mount_result);
 8001294:	f897 3242 	ldrb.w	r3, [r7, #578]	@ 0x242
 8001298:	461a      	mov	r2, r3
 800129a:	496a      	ldr	r1, [pc, #424]	@ (8001444 <SDStorage_Init+0x364>)
 800129c:	2001      	movs	r0, #1
 800129e:	f003 fc25 	bl	8004aec <LOGGER_SendFormatted>
            
            if (mount_result != FR_OK) {
 80012a2:	f897 3242 	ldrb.w	r3, [r7, #578]	@ 0x242
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d013      	beq.n	80012d2 <SDStorage_Init+0x1f2>
                LOG_ERROR("[SDStorage] Re-mount failed after mkfs: %d", mount_result);
 80012aa:	f897 3242 	ldrb.w	r3, [r7, #578]	@ 0x242
 80012ae:	461a      	mov	r2, r3
 80012b0:	4965      	ldr	r1, [pc, #404]	@ (8001448 <SDStorage_Init+0x368>)
 80012b2:	2003      	movs	r0, #3
 80012b4:	f003 fc1a 	bl	8004aec <LOGGER_SendFormatted>
                return SDSTORAGE_ERROR;
 80012b8:	f04f 33ff 	mov.w	r3, #4294967295
 80012bc:	e081      	b.n	80013c2 <SDStorage_Init+0x2e2>
            }
        } else {
            LOG_ERROR("[SDStorage] Mount failed with unrecoverable error: %d", mount_result);
 80012be:	f897 3242 	ldrb.w	r3, [r7, #578]	@ 0x242
 80012c2:	461a      	mov	r2, r3
 80012c4:	4961      	ldr	r1, [pc, #388]	@ (800144c <SDStorage_Init+0x36c>)
 80012c6:	2003      	movs	r0, #3
 80012c8:	f003 fc10 	bl	8004aec <LOGGER_SendFormatted>
            return SDSTORAGE_ERROR;
 80012cc:	f04f 33ff 	mov.w	r3, #4294967295
 80012d0:	e077      	b.n	80013c2 <SDStorage_Init+0x2e2>
        else if (mount_result == FR_NOT_READY || mount_result == FR_NO_FILESYSTEM) {
 80012d2:	bf00      	nop
        }
    }
    
    LOG_INFO("[SDStorage] File system mount successful");
 80012d4:	495e      	ldr	r1, [pc, #376]	@ (8001450 <SDStorage_Init+0x370>)
 80012d6:	2001      	movs	r0, #1
 80012d8:	f003 fc08 	bl	8004aec <LOGGER_SendFormatted>
    // PC/테스트 환경: 시뮬레이션
    LOG_INFO("[SDStorage] Test environment - simulating successful initialization");
#endif

    // f_mount 우회 후 직접 파일 테스트
    LOG_INFO("[SDStorage] Testing direct file operations without f_mount...");
 80012dc:	495d      	ldr	r1, [pc, #372]	@ (8001454 <SDStorage_Init+0x374>)
 80012de:	2001      	movs	r0, #1
 80012e0:	f003 fc04 	bl	8004aec <LOGGER_SendFormatted>
    
    // 간단한 테스트 파일 생성 시도
    FIL test_file;
    LOG_INFO("[SDStorage] Attempting direct f_open for test file...");
 80012e4:	495c      	ldr	r1, [pc, #368]	@ (8001458 <SDStorage_Init+0x378>)
 80012e6:	2001      	movs	r0, #1
 80012e8:	f003 fc00 	bl	8004aec <LOGGER_SendFormatted>
    FRESULT test_result = f_open(&test_file, "test.txt", FA_CREATE_ALWAYS | FA_WRITE);
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	220a      	movs	r2, #10
 80012f0:	495a      	ldr	r1, [pc, #360]	@ (800145c <SDStorage_Init+0x37c>)
 80012f2:	4618      	mov	r0, r3
 80012f4:	f011 fa0a 	bl	801270c <f_open>
 80012f8:	4603      	mov	r3, r0
 80012fa:	f887 3240 	strb.w	r3, [r7, #576]	@ 0x240
    LOG_INFO("[SDStorage] f_open result: %d", test_result);
 80012fe:	f897 3240 	ldrb.w	r3, [r7, #576]	@ 0x240
 8001302:	461a      	mov	r2, r3
 8001304:	4956      	ldr	r1, [pc, #344]	@ (8001460 <SDStorage_Init+0x380>)
 8001306:	2001      	movs	r0, #1
 8001308:	f003 fbf0 	bl	8004aec <LOGGER_SendFormatted>
    
    if (test_result == FR_OK) {
 800130c:	f897 3240 	ldrb.w	r3, [r7, #576]	@ 0x240
 8001310:	2b00      	cmp	r3, #0
 8001312:	d137      	bne.n	8001384 <SDStorage_Init+0x2a4>
        LOG_INFO("[SDStorage] ✅ Direct f_open SUCCESS - FatFs working without f_mount!");
 8001314:	4953      	ldr	r1, [pc, #332]	@ (8001464 <SDStorage_Init+0x384>)
 8001316:	2001      	movs	r0, #1
 8001318:	f003 fbe8 	bl	8004aec <LOGGER_SendFormatted>
        
        // 테스트 데이터 쓰기
        const char* test_data = "FatFs Direct File Test\n";
 800131c:	4b52      	ldr	r3, [pc, #328]	@ (8001468 <SDStorage_Init+0x388>)
 800131e:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
        UINT bytes_written;
        FRESULT write_result = f_write(&test_file, test_data, strlen(test_data), &bytes_written);
 8001322:	f8d7 023c 	ldr.w	r0, [r7, #572]	@ 0x23c
 8001326:	f7fe ff7d 	bl	8000224 <strlen>
 800132a:	4602      	mov	r2, r0
 800132c:	463b      	mov	r3, r7
 800132e:	1d38      	adds	r0, r7, #4
 8001330:	f8d7 123c 	ldr.w	r1, [r7, #572]	@ 0x23c
 8001334:	f011 fba4 	bl	8012a80 <f_write>
 8001338:	4603      	mov	r3, r0
 800133a:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        LOG_INFO("[SDStorage] f_write result: %d, bytes: %d", write_result, bytes_written);
 800133e:	f897 223b 	ldrb.w	r2, [r7, #571]	@ 0x23b
 8001342:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001346:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4947      	ldr	r1, [pc, #284]	@ (800146c <SDStorage_Init+0x38c>)
 800134e:	2001      	movs	r0, #1
 8001350:	f003 fbcc 	bl	8004aec <LOGGER_SendFormatted>
        
        f_close(&test_file);
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	4618      	mov	r0, r3
 8001358:	f011 fd85 	bl	8012e66 <f_close>
        LOG_INFO("[SDStorage] Test file closed successfully");
 800135c:	4944      	ldr	r1, [pc, #272]	@ (8001470 <SDStorage_Init+0x390>)
 800135e:	2001      	movs	r0, #1
 8001360:	f003 fbc4 	bl	8004aec <LOGGER_SendFormatted>
        
        if (write_result == FR_OK && bytes_written > 0) {
 8001364:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
 8001368:	2b00      	cmp	r3, #0
 800136a:	d112      	bne.n	8001392 <SDStorage_Init+0x2b2>
 800136c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001370:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00b      	beq.n	8001392 <SDStorage_Init+0x2b2>
            LOG_INFO("[SDStorage] ✅ BREAKTHROUGH: SD card FatFs working via direct file access!");
 800137a:	493e      	ldr	r1, [pc, #248]	@ (8001474 <SDStorage_Init+0x394>)
 800137c:	2001      	movs	r0, #1
 800137e:	f003 fbb5 	bl	8004aec <LOGGER_SendFormatted>
 8001382:	e006      	b.n	8001392 <SDStorage_Init+0x2b2>
        }
    } else {
        LOG_ERROR("[SDStorage] f_open failed: %d - testing fallback methods", test_result);
 8001384:	f897 3240 	ldrb.w	r3, [r7, #576]	@ 0x240
 8001388:	461a      	mov	r2, r3
 800138a:	493b      	ldr	r1, [pc, #236]	@ (8001478 <SDStorage_Init+0x398>)
 800138c:	2003      	movs	r0, #3
 800138e:	f003 fbad 	bl	8004aec <LOGGER_SendFormatted>
    }
    
    // 디렉토리 생성 건너뛰기 (테스트 목적)
    LOG_INFO("[SDStorage] Skipping directory creation for direct file test");
 8001392:	493a      	ldr	r1, [pc, #232]	@ (800147c <SDStorage_Init+0x39c>)
 8001394:	2001      	movs	r0, #1
 8001396:	f003 fba9 	bl	8004aec <LOGGER_SendFormatted>
    int dir_result = SDSTORAGE_OK;  // 강제 성공 처리
 800139a:	2300      	movs	r3, #0
 800139c:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
    
    g_sd_ready = true;
 80013a0:	4b37      	ldr	r3, [pc, #220]	@ (8001480 <SDStorage_Init+0x3a0>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	701a      	strb	r2, [r3, #0]
    g_current_log_size = 0;
 80013a6:	4b37      	ldr	r3, [pc, #220]	@ (8001484 <SDStorage_Init+0x3a4>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
    memset(g_current_log_file, 0, sizeof(g_current_log_file));
 80013ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013b0:	2100      	movs	r1, #0
 80013b2:	4835      	ldr	r0, [pc, #212]	@ (8001488 <SDStorage_Init+0x3a8>)
 80013b4:	f014 f940 	bl	8015638 <memset>
    
    LOG_INFO("[SDStorage] Initialization completed successfully");
 80013b8:	4934      	ldr	r1, [pc, #208]	@ (800148c <SDStorage_Init+0x3ac>)
 80013ba:	2001      	movs	r0, #1
 80013bc:	f003 fb96 	bl	8004aec <LOGGER_SendFormatted>
    return SDSTORAGE_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	f507 7712 	add.w	r7, r7, #584	@ 0x248
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	080167a8 	.word	0x080167a8
 80013d0:	20000c58 	.word	0x20000c58
 80013d4:	080167d8 	.word	0x080167d8
 80013d8:	080167fc 	.word	0x080167fc
 80013dc:	08016828 	.word	0x08016828
 80013e0:	08016860 	.word	0x08016860
 80013e4:	080168ac 	.word	0x080168ac
 80013e8:	080168ec 	.word	0x080168ec
 80013ec:	08016928 	.word	0x08016928
 80013f0:	0801696c 	.word	0x0801696c
 80013f4:	080169bc 	.word	0x080169bc
 80013f8:	080169fc 	.word	0x080169fc
 80013fc:	08016a44 	.word	0x08016a44
 8001400:	08016a70 	.word	0x08016a70
 8001404:	08016ac0 	.word	0x08016ac0
 8001408:	08016b08 	.word	0x08016b08
 800140c:	08016b3c 	.word	0x08016b3c
 8001410:	20001580 	.word	0x20001580
 8001414:	20001584 	.word	0x20001584
 8001418:	08016b70 	.word	0x08016b70
 800141c:	08016b98 	.word	0x08016b98
 8001420:	08016bc0 	.word	0x08016bc0
 8001424:	08016bf8 	.word	0x08016bf8
 8001428:	08016c34 	.word	0x08016c34
 800142c:	08016c78 	.word	0x08016c78
 8001430:	08016cb8 	.word	0x08016cb8
 8001434:	08016ce0 	.word	0x08016ce0
 8001438:	08016d28 	.word	0x08016d28
 800143c:	08016d5c 	.word	0x08016d5c
 8001440:	08016d88 	.word	0x08016d88
 8001444:	08016dcc 	.word	0x08016dcc
 8001448:	08016df8 	.word	0x08016df8
 800144c:	08016e24 	.word	0x08016e24
 8001450:	08016e5c 	.word	0x08016e5c
 8001454:	08016e88 	.word	0x08016e88
 8001458:	08016ec8 	.word	0x08016ec8
 800145c:	08016f00 	.word	0x08016f00
 8001460:	08016f0c 	.word	0x08016f0c
 8001464:	08016f2c 	.word	0x08016f2c
 8001468:	08016f74 	.word	0x08016f74
 800146c:	08016f8c 	.word	0x08016f8c
 8001470:	08016fb8 	.word	0x08016fb8
 8001474:	08016fe4 	.word	0x08016fe4
 8001478:	08017030 	.word	0x08017030
 800147c:	0801706c 	.word	0x0801706c
 8001480:	2000021e 	.word	0x2000021e
 8001484:	20000320 	.word	0x20000320
 8001488:	20000220 	.word	0x20000220
 800148c:	080170ac 	.word	0x080170ac

08001490 <SDStorage_WriteLog>:

int SDStorage_WriteLog(const void* data, size_t size)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 8001496:	af02      	add	r7, sp, #8
 8001498:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800149c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80014a0:	6018      	str	r0, [r3, #0]
 80014a2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80014a6:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80014aa:	6019      	str	r1, [r3, #0]
    if (!g_sd_ready) {
 80014ac:	4bb3      	ldr	r3, [pc, #716]	@ (800177c <SDStorage_WriteLog+0x2ec>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	f083 0301 	eor.w	r3, r3, #1
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d002      	beq.n	80014c0 <SDStorage_WriteLog+0x30>
        return SDSTORAGE_NOT_READY;
 80014ba:	f06f 0301 	mvn.w	r3, #1
 80014be:	e1bf      	b.n	8001840 <SDStorage_WriteLog+0x3b0>
    }
    
    if (data == NULL || size == 0) {
 80014c0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80014c4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d006      	beq.n	80014dc <SDStorage_WriteLog+0x4c>
 80014ce:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80014d2:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d102      	bne.n	80014e2 <SDStorage_WriteLog+0x52>
        return SDSTORAGE_INVALID_PARAM;
 80014dc:	f06f 0304 	mvn.w	r3, #4
 80014e0:	e1ae      	b.n	8001840 <SDStorage_WriteLog+0x3b0>
    }
    
    // 새 로그 파일이 필요한 경우 생성
    if (strlen(g_current_log_file) == 0 || 
 80014e2:	4ba7      	ldr	r3, [pc, #668]	@ (8001780 <SDStorage_WriteLog+0x2f0>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d00a      	beq.n	8001500 <SDStorage_WriteLog+0x70>
        g_current_log_size + size > SDSTORAGE_MAX_LOG_SIZE) {
 80014ea:	4ba6      	ldr	r3, [pc, #664]	@ (8001784 <SDStorage_WriteLog+0x2f4>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80014f2:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4413      	add	r3, r2
    if (strlen(g_current_log_file) == 0 || 
 80014fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80014fe:	d907      	bls.n	8001510 <SDStorage_WriteLog+0x80>
        if (SDStorage_CreateNewLogFile() != SDSTORAGE_OK) {
 8001500:	f000 f9b8 	bl	8001874 <SDStorage_CreateNewLogFile>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d002      	beq.n	8001510 <SDStorage_WriteLog+0x80>
            return SDSTORAGE_FILE_ERROR;
 800150a:	f06f 0302 	mvn.w	r3, #2
 800150e:	e197      	b.n	8001840 <SDStorage_WriteLog+0x3b0>
        }
    }

#ifdef STM32F746xx
    // STM32 환경: 안전한 파일 쓰기 (블로킹 방지)
    LOG_INFO("[SDStorage] WriteLog: size=%d bytes, file_open=%s", 
 8001510:	4b9d      	ldr	r3, [pc, #628]	@ (8001788 <SDStorage_WriteLog+0x2f8>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <SDStorage_WriteLog+0x8c>
 8001518:	4b9c      	ldr	r3, [pc, #624]	@ (800178c <SDStorage_WriteLog+0x2fc>)
 800151a:	e000      	b.n	800151e <SDStorage_WriteLog+0x8e>
 800151c:	4b9c      	ldr	r3, [pc, #624]	@ (8001790 <SDStorage_WriteLog+0x300>)
 800151e:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8001522:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8001526:	6812      	ldr	r2, [r2, #0]
 8001528:	499a      	ldr	r1, [pc, #616]	@ (8001794 <SDStorage_WriteLog+0x304>)
 800152a:	2001      	movs	r0, #1
 800152c:	f003 fade 	bl	8004aec <LOGGER_SendFormatted>
             size, g_file_open ? "true" : "false");
    
    if (!g_file_open) {
 8001530:	4b95      	ldr	r3, [pc, #596]	@ (8001788 <SDStorage_WriteLog+0x2f8>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	f083 0301 	eor.w	r3, r3, #1
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d062      	beq.n	8001604 <SDStorage_WriteLog+0x174>
        LOG_INFO("[SDStorage] Attempting safe f_open for writing...");
 800153e:	4996      	ldr	r1, [pc, #600]	@ (8001798 <SDStorage_WriteLog+0x308>)
 8001540:	2001      	movs	r0, #1
 8001542:	f003 fad3 	bl	8004aec <LOGGER_SendFormatted>
        
        // 간단한 파일명으로 다시 시도 (긴 경로명 문제 가능성)
        LOG_INFO("[SDStorage] Trying simple filename to avoid path issues...");
 8001546:	4995      	ldr	r1, [pc, #596]	@ (800179c <SDStorage_WriteLog+0x30c>)
 8001548:	2001      	movs	r0, #1
 800154a:	f003 facf 	bl	8004aec <LOGGER_SendFormatted>
        
        // 루트 디렉토리에 간단한 파일명 사용
        strcpy(g_current_log_file, "log.txt");
 800154e:	4b8c      	ldr	r3, [pc, #560]	@ (8001780 <SDStorage_WriteLog+0x2f0>)
 8001550:	4a93      	ldr	r2, [pc, #588]	@ (80017a0 <SDStorage_WriteLog+0x310>)
 8001552:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001556:	e883 0003 	stmia.w	r3, {r0, r1}
        LOG_INFO("[SDStorage] Using simple filename: %s", g_current_log_file);
 800155a:	4a89      	ldr	r2, [pc, #548]	@ (8001780 <SDStorage_WriteLog+0x2f0>)
 800155c:	4991      	ldr	r1, [pc, #580]	@ (80017a4 <SDStorage_WriteLog+0x314>)
 800155e:	2001      	movs	r0, #1
 8001560:	f003 fac4 	bl	8004aec <LOGGER_SendFormatted>
        
        // FatFs 블로킹 문제로 인해 타임아웃 기반 접근 시도
        LOG_WARN("[SDStorage] FatFs operations are blocking - switching to HAL direct write");
 8001564:	4990      	ldr	r1, [pc, #576]	@ (80017a8 <SDStorage_WriteLog+0x318>)
 8001566:	2002      	movs	r0, #2
 8001568:	f003 fac0 	bl	8004aec <LOGGER_SendFormatted>
        LOG_INFO("[SDStorage] This will preserve data but files won't be visible in Windows");
 800156c:	498f      	ldr	r1, [pc, #572]	@ (80017ac <SDStorage_WriteLog+0x31c>)
 800156e:	2001      	movs	r0, #1
 8001570:	f003 fabc 	bl	8004aec <LOGGER_SendFormatted>
        
        g_file_open = false;  // FatFs 모드 비활성화
 8001574:	4b84      	ldr	r3, [pc, #528]	@ (8001788 <SDStorage_WriteLog+0x2f8>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
        
        // 사용자에게 명확한 상황 설명
        LOG_WARN("[SDStorage] === SD CARD LOGGING STATUS ===");
 800157a:	498d      	ldr	r1, [pc, #564]	@ (80017b0 <SDStorage_WriteLog+0x320>)
 800157c:	2002      	movs	r0, #2
 800157e:	f003 fab5 	bl	8004aec <LOGGER_SendFormatted>
        LOG_WARN("[SDStorage] - Data WILL be saved to SD card");  
 8001582:	498c      	ldr	r1, [pc, #560]	@ (80017b4 <SDStorage_WriteLog+0x324>)
 8001584:	2002      	movs	r0, #2
 8001586:	f003 fab1 	bl	8004aec <LOGGER_SendFormatted>
        LOG_WARN("[SDStorage] - Files will NOT be visible in Windows");
 800158a:	498b      	ldr	r1, [pc, #556]	@ (80017b8 <SDStorage_WriteLog+0x328>)
 800158c:	2002      	movs	r0, #2
 800158e:	f003 faad 	bl	8004aec <LOGGER_SendFormatted>
        LOG_WARN("[SDStorage] - This is due to FatFs software blocking issue");
 8001592:	498a      	ldr	r1, [pc, #552]	@ (80017bc <SDStorage_WriteLog+0x32c>)
 8001594:	2002      	movs	r0, #2
 8001596:	f003 faa9 	bl	8004aec <LOGGER_SendFormatted>
        LOG_WARN("[SDStorage] - SD hardware is working perfectly");
 800159a:	4989      	ldr	r1, [pc, #548]	@ (80017c0 <SDStorage_WriteLog+0x330>)
 800159c:	2002      	movs	r0, #2
 800159e:	f003 faa5 	bl	8004aec <LOGGER_SendFormatted>
        LOG_WARN("[SDStorage] ===============================");
 80015a2:	4988      	ldr	r1, [pc, #544]	@ (80017c4 <SDStorage_WriteLog+0x334>)
 80015a4:	2002      	movs	r0, #2
 80015a6:	f003 faa1 	bl	8004aec <LOGGER_SendFormatted>
        
        // 실제 f_open 시도 (CREATE_ALWAYS로 덮어쓰기 허용)
        FRESULT open_result = f_open(&g_log_file, g_current_log_file, FA_CREATE_ALWAYS | FA_WRITE);
 80015aa:	220a      	movs	r2, #10
 80015ac:	4974      	ldr	r1, [pc, #464]	@ (8001780 <SDStorage_WriteLog+0x2f0>)
 80015ae:	4886      	ldr	r0, [pc, #536]	@ (80017c8 <SDStorage_WriteLog+0x338>)
 80015b0:	f011 f8ac 	bl	801270c <f_open>
 80015b4:	4603      	mov	r3, r0
 80015b6:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
        LOG_INFO("[SDStorage] f_open result: %d", open_result);
 80015ba:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 80015be:	461a      	mov	r2, r3
 80015c0:	4982      	ldr	r1, [pc, #520]	@ (80017cc <SDStorage_WriteLog+0x33c>)
 80015c2:	2001      	movs	r0, #1
 80015c4:	f003 fa92 	bl	8004aec <LOGGER_SendFormatted>
        
        if (open_result == FR_OK) {
 80015c8:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d107      	bne.n	80015e0 <SDStorage_WriteLog+0x150>
            g_file_open = true;
 80015d0:	4b6d      	ldr	r3, [pc, #436]	@ (8001788 <SDStorage_WriteLog+0x2f8>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	701a      	strb	r2, [r3, #0]
            LOG_INFO("[SDStorage] File opened successfully for writing");
 80015d6:	497e      	ldr	r1, [pc, #504]	@ (80017d0 <SDStorage_WriteLog+0x340>)
 80015d8:	2001      	movs	r0, #1
 80015da:	f003 fa87 	bl	8004aec <LOGGER_SendFormatted>
 80015de:	e011      	b.n	8001604 <SDStorage_WriteLog+0x174>
        } else {
            LOG_ERROR("[SDStorage] f_open failed: %d - using HAL direct write fallback", open_result);
 80015e0:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 80015e4:	461a      	mov	r2, r3
 80015e6:	497b      	ldr	r1, [pc, #492]	@ (80017d4 <SDStorage_WriteLog+0x344>)
 80015e8:	2003      	movs	r0, #3
 80015ea:	f003 fa7f 	bl	8004aec <LOGGER_SendFormatted>
            
            // FatFs 실패 시 HAL 직접 쓰기 모드로 폴백
            LOG_WARN("[SDStorage] Falling back to HAL direct write (bypassing FatFs)");
 80015ee:	497a      	ldr	r1, [pc, #488]	@ (80017d8 <SDStorage_WriteLog+0x348>)
 80015f0:	2002      	movs	r0, #2
 80015f2:	f003 fa7b 	bl	8004aec <LOGGER_SendFormatted>
            g_file_open = false;  // FatFs 모드 비활성화
 80015f6:	4b64      	ldr	r3, [pc, #400]	@ (8001788 <SDStorage_WriteLog+0x2f8>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
            LOG_INFO("[SDStorage] Will use HAL_SD_WriteBlocks directly");
 80015fc:	4977      	ldr	r1, [pc, #476]	@ (80017dc <SDStorage_WriteLog+0x34c>)
 80015fe:	2001      	movs	r0, #1
 8001600:	f003 fa74 	bl	8004aec <LOGGER_SendFormatted>
        }
    }
    
    if (g_file_open) {
 8001604:	4b60      	ldr	r3, [pc, #384]	@ (8001788 <SDStorage_WriteLog+0x2f8>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d055      	beq.n	80016b8 <SDStorage_WriteLog+0x228>
        // FatFs 파일 쓰기 (Windows 호환)
        LOG_INFO("[SDStorage] Writing %d bytes using FatFs (for Windows compatibility)", size);
 800160c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001610:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	4972      	ldr	r1, [pc, #456]	@ (80017e0 <SDStorage_WriteLog+0x350>)
 8001618:	2001      	movs	r0, #1
 800161a:	f003 fa67 	bl	8004aec <LOGGER_SendFormatted>
        
        UINT bytes_written;
        FRESULT write_result = f_write(&g_log_file, data, size, &bytes_written);
 800161e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001622:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8001626:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 800162a:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 800162e:	f5a1 7105 	sub.w	r1, r1, #532	@ 0x214
 8001632:	6812      	ldr	r2, [r2, #0]
 8001634:	6809      	ldr	r1, [r1, #0]
 8001636:	4864      	ldr	r0, [pc, #400]	@ (80017c8 <SDStorage_WriteLog+0x338>)
 8001638:	f011 fa22 	bl	8012a80 <f_write>
 800163c:	4603      	mov	r3, r0
 800163e:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216
        LOG_INFO("[SDStorage] f_write result: %d, bytes_written: %d", write_result, bytes_written);
 8001642:	f897 2216 	ldrb.w	r2, [r7, #534]	@ 0x216
 8001646:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 800164a:	4966      	ldr	r1, [pc, #408]	@ (80017e4 <SDStorage_WriteLog+0x354>)
 800164c:	2001      	movs	r0, #1
 800164e:	f003 fa4d 	bl	8004aec <LOGGER_SendFormatted>
        
        if (write_result != FR_OK) {
 8001652:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00a      	beq.n	8001670 <SDStorage_WriteLog+0x1e0>
            LOG_ERROR("[SDStorage] f_write failed: %d - switching to HAL direct write", write_result);
 800165a:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 800165e:	461a      	mov	r2, r3
 8001660:	4961      	ldr	r1, [pc, #388]	@ (80017e8 <SDStorage_WriteLog+0x358>)
 8001662:	2003      	movs	r0, #3
 8001664:	f003 fa42 	bl	8004aec <LOGGER_SendFormatted>
            g_file_open = false;  // FatFs 모드 비활성화하고 HAL 모드로 전환
 8001668:	4b47      	ldr	r3, [pc, #284]	@ (8001788 <SDStorage_WriteLog+0x2f8>)
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
 800166e:	e023      	b.n	80016b8 <SDStorage_WriteLog+0x228>
        } else if (bytes_written != size) {
 8001670:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8001674:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8001678:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 800167c:	6812      	ldr	r2, [r2, #0]
 800167e:	429a      	cmp	r2, r3
 8001680:	d00d      	beq.n	800169e <SDStorage_WriteLog+0x20e>
            LOG_WARN("[SDStorage] Partial write: %d/%d bytes", bytes_written, size);
 8001682:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8001686:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800168a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4956      	ldr	r1, [pc, #344]	@ (80017ec <SDStorage_WriteLog+0x35c>)
 8001692:	2002      	movs	r0, #2
 8001694:	f003 fa2a 	bl	8004aec <LOGGER_SendFormatted>
            return SDSTORAGE_DISK_FULL;
 8001698:	f06f 0303 	mvn.w	r3, #3
 800169c:	e0d0      	b.n	8001840 <SDStorage_WriteLog+0x3b0>
        } else {
            // FatFs 쓰기 성공
            LOG_INFO("[SDStorage] FatFs write successful");
 800169e:	4954      	ldr	r1, [pc, #336]	@ (80017f0 <SDStorage_WriteLog+0x360>)
 80016a0:	2001      	movs	r0, #1
 80016a2:	f003 fa23 	bl	8004aec <LOGGER_SendFormatted>
            g_current_log_size += bytes_written;
 80016a6:	4b37      	ldr	r3, [pc, #220]	@ (8001784 <SDStorage_WriteLog+0x2f4>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80016ae:	4413      	add	r3, r2
 80016b0:	4a34      	ldr	r2, [pc, #208]	@ (8001784 <SDStorage_WriteLog+0x2f4>)
 80016b2:	6013      	str	r3, [r2, #0]
            return SDSTORAGE_OK;
 80016b4:	2300      	movs	r3, #0
 80016b6:	e0c3      	b.n	8001840 <SDStorage_WriteLog+0x3b0>
        }
    }
    
    if (!g_file_open) {
 80016b8:	4b33      	ldr	r3, [pc, #204]	@ (8001788 <SDStorage_WriteLog+0x2f8>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	f083 0301 	eor.w	r3, r3, #1
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 80a0 	beq.w	8001808 <SDStorage_WriteLog+0x378>
        // HAL 직접 쓰기 모드 (FatFs 우회)
        LOG_INFO("[SDStorage] Using HAL direct write (bypassing FatFs)");
 80016c8:	494a      	ldr	r1, [pc, #296]	@ (80017f4 <SDStorage_WriteLog+0x364>)
 80016ca:	2001      	movs	r0, #1
 80016cc:	f003 fa0e 	bl	8004aec <LOGGER_SendFormatted>
        
        // SD 카드에 직접 섹터 쓰기 (512바이트 단위)
        uint32_t sector_start = 1000;  // 임의의 안전한 섹터 위치
 80016d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016d4:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
        // uint32_t sectors_needed = (size + 511) / 512;  // 올림 계산 - unused variable removed
        
        // 512바이트 단위로 패딩된 버퍼 생성
        uint8_t sector_buffer[512] = {0};
 80016d8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80016dc:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80016e0:	4618      	mov	r0, r3
 80016e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016e6:	461a      	mov	r2, r3
 80016e8:	2100      	movs	r1, #0
 80016ea:	f013 ffa5 	bl	8015638 <memset>
        memcpy(sector_buffer, data, (size > 512) ? 512 : size);
 80016ee:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80016f2:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016fc:	bf28      	it	cs
 80016fe:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8001702:	461a      	mov	r2, r3
 8001704:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001708:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800170c:	f107 0008 	add.w	r0, r7, #8
 8001710:	6819      	ldr	r1, [r3, #0]
 8001712:	f013 ffff 	bl	8015714 <memcpy>
        
        HAL_StatusTypeDef hal_result = HAL_SD_WriteBlocks(&hsd1, sector_buffer, sector_start, 1, 5000);
 8001716:	f107 0108 	add.w	r1, r7, #8
 800171a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	2301      	movs	r3, #1
 8001722:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8001726:	4834      	ldr	r0, [pc, #208]	@ (80017f8 <SDStorage_WriteLog+0x368>)
 8001728:	f00a fb26 	bl	800bd78 <HAL_SD_WriteBlocks>
 800172c:	4603      	mov	r3, r0
 800172e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
        LOG_INFO("[SDStorage] HAL_SD_WriteBlocks result: %d", hal_result);
 8001732:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8001736:	461a      	mov	r2, r3
 8001738:	4930      	ldr	r1, [pc, #192]	@ (80017fc <SDStorage_WriteLog+0x36c>)
 800173a:	2001      	movs	r0, #1
 800173c:	f003 f9d6 	bl	8004aec <LOGGER_SendFormatted>
        
        if (hal_result == HAL_OK) {
 8001740:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8001744:	2b00      	cmp	r3, #0
 8001746:	d10f      	bne.n	8001768 <SDStorage_WriteLog+0x2d8>
            LOG_INFO("[SDStorage] HAL direct write successful");
 8001748:	492d      	ldr	r1, [pc, #180]	@ (8001800 <SDStorage_WriteLog+0x370>)
 800174a:	2001      	movs	r0, #1
 800174c:	f003 f9ce 	bl	8004aec <LOGGER_SendFormatted>
            g_current_log_size += size;
 8001750:	4b0c      	ldr	r3, [pc, #48]	@ (8001784 <SDStorage_WriteLog+0x2f4>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001758:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4413      	add	r3, r2
 8001760:	4a08      	ldr	r2, [pc, #32]	@ (8001784 <SDStorage_WriteLog+0x2f4>)
 8001762:	6013      	str	r3, [r2, #0]
            return SDSTORAGE_OK;
 8001764:	2300      	movs	r3, #0
 8001766:	e06b      	b.n	8001840 <SDStorage_WriteLog+0x3b0>
        } else {
            LOG_ERROR("[SDStorage] HAL direct write failed: %d", hal_result);
 8001768:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800176c:	461a      	mov	r2, r3
 800176e:	4925      	ldr	r1, [pc, #148]	@ (8001804 <SDStorage_WriteLog+0x374>)
 8001770:	2003      	movs	r0, #3
 8001772:	f003 f9bb 	bl	8004aec <LOGGER_SendFormatted>
            return SDSTORAGE_FILE_ERROR;  // SDSTORAGE_DISK_ERROR 대신 FILE_ERROR 사용
 8001776:	f06f 0302 	mvn.w	r3, #2
 800177a:	e061      	b.n	8001840 <SDStorage_WriteLog+0x3b0>
 800177c:	2000021e 	.word	0x2000021e
 8001780:	20000220 	.word	0x20000220
 8001784:	20000320 	.word	0x20000320
 8001788:	20000554 	.word	0x20000554
 800178c:	080170e0 	.word	0x080170e0
 8001790:	080170e8 	.word	0x080170e8
 8001794:	080170f0 	.word	0x080170f0
 8001798:	08017124 	.word	0x08017124
 800179c:	08017158 	.word	0x08017158
 80017a0:	08017194 	.word	0x08017194
 80017a4:	0801719c 	.word	0x0801719c
 80017a8:	080171c4 	.word	0x080171c4
 80017ac:	08017210 	.word	0x08017210
 80017b0:	0801725c 	.word	0x0801725c
 80017b4:	08017288 	.word	0x08017288
 80017b8:	080172b4 	.word	0x080172b4
 80017bc:	080172e8 	.word	0x080172e8
 80017c0:	08017324 	.word	0x08017324
 80017c4:	08017354 	.word	0x08017354
 80017c8:	20000324 	.word	0x20000324
 80017cc:	08016f0c 	.word	0x08016f0c
 80017d0:	08017380 	.word	0x08017380
 80017d4:	080173b4 	.word	0x080173b4
 80017d8:	080173f4 	.word	0x080173f4
 80017dc:	08017434 	.word	0x08017434
 80017e0:	08017468 	.word	0x08017468
 80017e4:	080174b0 	.word	0x080174b0
 80017e8:	080174e4 	.word	0x080174e4
 80017ec:	08017524 	.word	0x08017524
 80017f0:	0801754c 	.word	0x0801754c
 80017f4:	08017570 	.word	0x08017570
 80017f8:	20000c58 	.word	0x20000c58
 80017fc:	080175a8 	.word	0x080175a8
 8001800:	080175d4 	.word	0x080175d4
 8001804:	080175fc 	.word	0x080175fc
        }
    }
    
    // 즉시 플러시하여 데이터 안정성 확보
    LOG_INFO("[SDStorage] Syncing file to SD card...");
 8001808:	4910      	ldr	r1, [pc, #64]	@ (800184c <SDStorage_WriteLog+0x3bc>)
 800180a:	2001      	movs	r0, #1
 800180c:	f003 f96e 	bl	8004aec <LOGGER_SendFormatted>
    FRESULT sync_result = f_sync(&g_log_file);
 8001810:	480f      	ldr	r0, [pc, #60]	@ (8001850 <SDStorage_WriteLog+0x3c0>)
 8001812:	f011 faaa 	bl	8012d6a <f_sync>
 8001816:	4603      	mov	r3, r0
 8001818:	f887 3215 	strb.w	r3, [r7, #533]	@ 0x215
    LOG_INFO("[SDStorage] f_sync result: %d", sync_result);
 800181c:	f897 3215 	ldrb.w	r3, [r7, #533]	@ 0x215
 8001820:	461a      	mov	r2, r3
 8001822:	490c      	ldr	r1, [pc, #48]	@ (8001854 <SDStorage_WriteLog+0x3c4>)
 8001824:	2001      	movs	r0, #1
 8001826:	f003 f961 	bl	8004aec <LOGGER_SendFormatted>
#else
    // PC/테스트 환경: 파일 I/O 시뮬레이션 (항상 성공)
    // 실제 파일 쓰기 없이 성공으로 처리
#endif

    g_current_log_size += size;
 800182a:	4b0b      	ldr	r3, [pc, #44]	@ (8001858 <SDStorage_WriteLog+0x3c8>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001832:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4413      	add	r3, r2
 800183a:	4a07      	ldr	r2, [pc, #28]	@ (8001858 <SDStorage_WriteLog+0x3c8>)
 800183c:	6013      	str	r3, [r2, #0]
    return SDSTORAGE_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	08017624 	.word	0x08017624
 8001850:	20000324 	.word	0x20000324
 8001854:	0801764c 	.word	0x0801764c
 8001858:	20000320 	.word	0x20000320

0800185c <SDStorage_IsReady>:

bool SDStorage_IsReady(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
    return g_sd_ready;
 8001860:	4b03      	ldr	r3, [pc, #12]	@ (8001870 <SDStorage_IsReady+0x14>)
 8001862:	781b      	ldrb	r3, [r3, #0]
}
 8001864:	4618      	mov	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	2000021e 	.word	0x2000021e

08001874 <SDStorage_CreateNewLogFile>:
        memset(g_current_log_file, 0, sizeof(g_current_log_file));
    }
}

int SDStorage_CreateNewLogFile(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
    if (!g_sd_ready) {
 800187a:	4b2d      	ldr	r3, [pc, #180]	@ (8001930 <SDStorage_CreateNewLogFile+0xbc>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	f083 0301 	eor.w	r3, r3, #1
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b00      	cmp	r3, #0
 8001886:	d002      	beq.n	800188e <SDStorage_CreateNewLogFile+0x1a>
        return SDSTORAGE_NOT_READY;
 8001888:	f06f 0301 	mvn.w	r3, #1
 800188c:	e04c      	b.n	8001928 <SDStorage_CreateNewLogFile+0xb4>
    }
    
    // 이전 파일이 열려있다면 닫기
#ifdef STM32F746xx
    if (g_file_open) {
 800188e:	4b29      	ldr	r3, [pc, #164]	@ (8001934 <SDStorage_CreateNewLogFile+0xc0>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d005      	beq.n	80018a2 <SDStorage_CreateNewLogFile+0x2e>
        f_close(&g_log_file);
 8001896:	4828      	ldr	r0, [pc, #160]	@ (8001938 <SDStorage_CreateNewLogFile+0xc4>)
 8001898:	f011 fae5 	bl	8012e66 <f_close>
        g_file_open = false;
 800189c:	4b25      	ldr	r3, [pc, #148]	@ (8001934 <SDStorage_CreateNewLogFile+0xc0>)
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]
        g_log_file = NULL;
    }
#endif
    
    // 새 파일명 생성
    if (_generate_log_filename(g_current_log_file, sizeof(g_current_log_file)) != SDSTORAGE_OK) {
 80018a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018a6:	4825      	ldr	r0, [pc, #148]	@ (800193c <SDStorage_CreateNewLogFile+0xc8>)
 80018a8:	f000 f85c 	bl	8001964 <_generate_log_filename>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d002      	beq.n	80018b8 <SDStorage_CreateNewLogFile+0x44>
        return SDSTORAGE_ERROR;
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295
 80018b6:	e037      	b.n	8001928 <SDStorage_CreateNewLogFile+0xb4>
    }
    
    // 파일 생성 확인 (SD 쓰기 문제로 인한 블로킹 방지)
#ifdef STM32F746xx
    LOG_INFO("[SDStorage] Attempting to create log file: %s", g_current_log_file);
 80018b8:	4a20      	ldr	r2, [pc, #128]	@ (800193c <SDStorage_CreateNewLogFile+0xc8>)
 80018ba:	4921      	ldr	r1, [pc, #132]	@ (8001940 <SDStorage_CreateNewLogFile+0xcc>)
 80018bc:	2001      	movs	r0, #1
 80018be:	f003 f915 	bl	8004aec <LOGGER_SendFormatted>
    
    // f_open 블로킹 문제로 인해 파일 생성 건너뛰기
    LOG_WARN("[SDStorage] Skipping f_open due to known blocking issue");
 80018c2:	4920      	ldr	r1, [pc, #128]	@ (8001944 <SDStorage_CreateNewLogFile+0xd0>)
 80018c4:	2002      	movs	r0, #2
 80018c6:	f003 f911 	bl	8004aec <LOGGER_SendFormatted>
    LOG_INFO("[SDStorage] Will attempt direct write operations instead");
 80018ca:	491f      	ldr	r1, [pc, #124]	@ (8001948 <SDStorage_CreateNewLogFile+0xd4>)
 80018cc:	2001      	movs	r0, #1
 80018ce:	f003 f90d 	bl	8004aec <LOGGER_SendFormatted>
    
    // 파일명만 설정하고 실제 생성은 WriteLog에서 수행
    FRESULT open_result = FR_OK;  // 강제로 성공 처리
 80018d2:	2300      	movs	r3, #0
 80018d4:	71fb      	strb	r3, [r7, #7]
    LOG_INFO("[SDStorage] File creation bypassed - proceeding with direct write mode");
 80018d6:	491d      	ldr	r1, [pc, #116]	@ (800194c <SDStorage_CreateNewLogFile+0xd8>)
 80018d8:	2001      	movs	r0, #1
 80018da:	f003 f907 	bl	8004aec <LOGGER_SendFormatted>
    
    if (open_result != FR_OK) {
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d00f      	beq.n	8001904 <SDStorage_CreateNewLogFile+0x90>
        LOG_ERROR("[SDStorage] f_open failed: %d - SD write problem detected", open_result);
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	461a      	mov	r2, r3
 80018e8:	4919      	ldr	r1, [pc, #100]	@ (8001950 <SDStorage_CreateNewLogFile+0xdc>)
 80018ea:	2003      	movs	r0, #3
 80018ec:	f003 f8fe 	bl	8004aec <LOGGER_SendFormatted>
        LOG_WARN("[SDStorage] Disabling SD logging due to file creation failure");
 80018f0:	4918      	ldr	r1, [pc, #96]	@ (8001954 <SDStorage_CreateNewLogFile+0xe0>)
 80018f2:	2002      	movs	r0, #2
 80018f4:	f003 f8fa 	bl	8004aec <LOGGER_SendFormatted>
        g_sd_ready = false;  // SD 로깅 비활성화
 80018f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001930 <SDStorage_CreateNewLogFile+0xbc>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
        return SDSTORAGE_FILE_ERROR;
 80018fe:	f06f 0302 	mvn.w	r3, #2
 8001902:	e011      	b.n	8001928 <SDStorage_CreateNewLogFile+0xb4>
    }
    
    LOG_INFO("[SDStorage] File created successfully, closing...");
 8001904:	4914      	ldr	r1, [pc, #80]	@ (8001958 <SDStorage_CreateNewLogFile+0xe4>)
 8001906:	2001      	movs	r0, #1
 8001908:	f003 f8f0 	bl	8004aec <LOGGER_SendFormatted>
    f_close(&g_log_file);
 800190c:	480a      	ldr	r0, [pc, #40]	@ (8001938 <SDStorage_CreateNewLogFile+0xc4>)
 800190e:	f011 faaa 	bl	8012e66 <f_close>
    g_file_open = false;
 8001912:	4b08      	ldr	r3, [pc, #32]	@ (8001934 <SDStorage_CreateNewLogFile+0xc0>)
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]
    LOG_INFO("[SDStorage] File closed, ready for logging");
 8001918:	4910      	ldr	r1, [pc, #64]	@ (800195c <SDStorage_CreateNewLogFile+0xe8>)
 800191a:	2001      	movs	r0, #1
 800191c:	f003 f8e6 	bl	8004aec <LOGGER_SendFormatted>
#else
    // PC/테스트 환경: 파일 생성 시뮬레이션 (항상 성공)
    LOG_INFO("[SDStorage] Test environment - file creation simulated");
#endif
    
    g_current_log_size = 0;
 8001920:	4b0f      	ldr	r3, [pc, #60]	@ (8001960 <SDStorage_CreateNewLogFile+0xec>)
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
    return SDSTORAGE_OK;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	2000021e 	.word	0x2000021e
 8001934:	20000554 	.word	0x20000554
 8001938:	20000324 	.word	0x20000324
 800193c:	20000220 	.word	0x20000220
 8001940:	0801766c 	.word	0x0801766c
 8001944:	0801769c 	.word	0x0801769c
 8001948:	080176d4 	.word	0x080176d4
 800194c:	08017710 	.word	0x08017710
 8001950:	08017758 	.word	0x08017758
 8001954:	08017794 	.word	0x08017794
 8001958:	080177d4 	.word	0x080177d4
 800195c:	08017808 	.word	0x08017808
 8001960:	20000320 	.word	0x20000320

08001964 <_generate_log_filename>:
    return SDSTORAGE_OK;
#endif
}

static int _generate_log_filename(char* filename, size_t max_len)
{
 8001964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001966:	b095      	sub	sp, #84	@ 0x54
 8001968:	af08      	add	r7, sp, #32
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
    // uint32_t timestamp = _get_current_timestamp(); - unused variable removed
    
    // YYYYMMDD_HHMMSS 형식으로 타임스탬프 생성
    uint16_t year = 2025;   // 기본값
 800196e:	f240 73e9 	movw	r3, #2025	@ 0x7e9
 8001972:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    uint8_t month = 1, day = 1, hour = 0, minute = 0, second = 0;
 8001974:	2301      	movs	r3, #1
 8001976:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800197a:	2301      	movs	r3, #1
 800197c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8001980:	2300      	movs	r3, #0
 8001982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001986:	2300      	movs	r3, #0
 8001988:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800198c:	2300      	movs	r3, #0
 800198e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
#ifdef STM32F746xx
    // STM32: RTC에서 실제 시간 읽기
    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;
    
    if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK &&
 8001992:	f107 0310 	add.w	r3, r7, #16
 8001996:	2200      	movs	r2, #0
 8001998:	4619      	mov	r1, r3
 800199a:	4826      	ldr	r0, [pc, #152]	@ (8001a34 <_generate_log_filename+0xd0>)
 800199c:	f009 fa26 	bl	800adec <HAL_RTC_GetTime>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d11c      	bne.n	80019e0 <_generate_log_filename+0x7c>
        HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) == HAL_OK) {
 80019a6:	f107 030c 	add.w	r3, r7, #12
 80019aa:	2200      	movs	r2, #0
 80019ac:	4619      	mov	r1, r3
 80019ae:	4821      	ldr	r0, [pc, #132]	@ (8001a34 <_generate_log_filename+0xd0>)
 80019b0:	f009 fafe 	bl	800afb0 <HAL_RTC_GetDate>
 80019b4:	4603      	mov	r3, r0
    if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK &&
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d112      	bne.n	80019e0 <_generate_log_filename+0x7c>
        year = 2000 + sDate.Year;
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
 80019bc:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80019c0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        month = sDate.Month;
 80019c2:	7b7b      	ldrb	r3, [r7, #13]
 80019c4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        day = sDate.Date;
 80019c8:	7bbb      	ldrb	r3, [r7, #14]
 80019ca:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        hour = sTime.Hours;
 80019ce:	7c3b      	ldrb	r3, [r7, #16]
 80019d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        minute = sTime.Minutes;
 80019d4:	7c7b      	ldrb	r3, [r7, #17]
 80019d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        second = sTime.Seconds;
 80019da:	7cbb      	ldrb	r3, [r7, #18]
 80019dc:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    minute = 30;
    second = timestamp % 60;  // 타임스탬프 기반 변화
#endif
    
    // 디렉토리가 없을 경우를 대비해 루트에 파일 생성
    int result = snprintf(filename, max_len, 
 80019e0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80019e2:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80019e6:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 80019ea:	f897 002b 	ldrb.w	r0, [r7, #43]	@ 0x2b
 80019ee:	f897 402a 	ldrb.w	r4, [r7, #42]	@ 0x2a
 80019f2:	f897 5029 	ldrb.w	r5, [r7, #41]	@ 0x29
 80019f6:	4e10      	ldr	r6, [pc, #64]	@ (8001a38 <_generate_log_filename+0xd4>)
 80019f8:	9606      	str	r6, [sp, #24]
 80019fa:	9505      	str	r5, [sp, #20]
 80019fc:	9404      	str	r4, [sp, #16]
 80019fe:	9003      	str	r0, [sp, #12]
 8001a00:	9102      	str	r1, [sp, #8]
 8001a02:	9201      	str	r2, [sp, #4]
 8001a04:	9300      	str	r3, [sp, #0]
 8001a06:	4b0d      	ldr	r3, [pc, #52]	@ (8001a3c <_generate_log_filename+0xd8>)
 8001a08:	4a0d      	ldr	r2, [pc, #52]	@ (8001a40 <_generate_log_filename+0xdc>)
 8001a0a:	6839      	ldr	r1, [r7, #0]
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f013 fd7f 	bl	8015510 <sniprintf>
 8001a12:	6278      	str	r0, [r7, #36]	@ 0x24
                         "%s%04d%02d%02d_%02d%02d%02d%s",
                         SDSTORAGE_LOG_PREFIX,
                         year, month, day, hour, minute, second,
                         SDSTORAGE_LOG_EXTENSION);
    
    if (result < 0 || (size_t)result >= max_len) {
 8001a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	db03      	blt.n	8001a22 <_generate_log_filename+0xbe>
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d802      	bhi.n	8001a28 <_generate_log_filename+0xc4>
        return SDSTORAGE_ERROR;
 8001a22:	f04f 33ff 	mov.w	r3, #4294967295
 8001a26:	e000      	b.n	8001a2a <_generate_log_filename+0xc6>
    }
    
    return SDSTORAGE_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3734      	adds	r7, #52	@ 0x34
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000b30 	.word	0x20000b30
 8001a38:	08017c54 	.word	0x08017c54
 8001a3c:	08017c28 	.word	0x08017c28
 8001a40:	08017c34 	.word	0x08017c34

08001a44 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
 8001a5a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4a07      	ldr	r2, [pc, #28]	@ (8001aa4 <vApplicationGetIdleTaskMemory+0x2c>)
 8001a88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	4a06      	ldr	r2, [pc, #24]	@ (8001aa8 <vApplicationGetIdleTaskMemory+0x30>)
 8001a8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2280      	movs	r2, #128	@ 0x80
 8001a94:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001a96:	bf00      	nop
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	20000558 	.word	0x20000558
 8001aa8:	200005b0 	.word	0x200005b0

08001aac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aac:	b5b0      	push	{r4, r5, r7, lr}
 8001aae:	b08c      	sub	sp, #48	@ 0x30
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // 리셋 카운터 추가
  static uint32_t reset_count = 0;
  reset_count++;
 8001ab2:	4b87      	ldr	r3, [pc, #540]	@ (8001cd0 <main+0x224>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	4a85      	ldr	r2, [pc, #532]	@ (8001cd0 <main+0x224>)
 8001aba:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001abc:	f003 fb33 	bl	8005126 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ac0:	f000 f944 	bl	8001d4c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001ac4:	f000 f9b4 	bl	8001e30 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ac8:	f001 f976 	bl	8002db8 <MX_GPIO_Init>
  MX_DMA_Init();  // DMA는 UART보다 먼저 초기화
 8001acc:	f001 fd70 	bl	80035b0 <MX_DMA_Init>
  MX_USART6_DMA_Init();  // USART6 DMA 초기화 (UART보다 먼저)
 8001ad0:	f001 fd94 	bl	80035fc <MX_USART6_DMA_Init>
  MX_ADC3_Init();
 8001ad4:	f000 f9de 	bl	8001e94 <MX_ADC3_Init>
  MX_CRC_Init();
 8001ad8:	f000 fa2e 	bl	8001f38 <MX_CRC_Init>
  MX_DCMI_Init();
 8001adc:	f000 fa4e 	bl	8001f7c <MX_DCMI_Init>
  MX_DMA2D_Init();
 8001ae0:	f000 fa80 	bl	8001fe4 <MX_DMA2D_Init>
  MX_ETH_Init();
 8001ae4:	f000 fab0 	bl	8002048 <MX_ETH_Init>
  MX_FMC_Init();
 8001ae8:	f001 f916 	bl	8002d18 <MX_FMC_Init>
  MX_I2C1_Init();
 8001aec:	f000 fafa 	bl	80020e4 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001af0:	f000 fb38 	bl	8002164 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001af4:	f000 fb76 	bl	80021e4 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8001af8:	f000 fbf6 	bl	80022e8 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8001afc:	f000 fc20 	bl	8002340 <MX_RTC_Init>
  MX_SAI2_Init();
 8001b00:	f000 fcc2 	bl	8002488 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8001b04:	f000 fd68 	bl	80025d8 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8001b08:	f000 fd8c 	bl	8002624 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8001b0c:	f000 fdba 	bl	8002684 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001b10:	f000 fdf6 	bl	8002700 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001b14:	f000 fea0 	bl	8002858 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b18:	f000 ff14 	bl	8002944 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001b1c:	f000 ff8a 	bl	8002a34 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001b20:	f001 f800 	bl	8002b24 <MX_TIM8_Init>
  MX_TIM12_Init();
 8001b24:	f001 f852 	bl	8002bcc <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001b28:	f001 f896 	bl	8002c58 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001b2c:	f001 f8c4 	bl	8002cb8 <MX_USART6_UART_Init>
  
  // UART 초기화 후 DMA 핸들 다시 연결 (HAL_UART_Init에서 리셋될 수 있음)
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8001b30:	4b68      	ldr	r3, [pc, #416]	@ (8001cd4 <main+0x228>)
 8001b32:	4a69      	ldr	r2, [pc, #420]	@ (8001cd8 <main+0x22c>)
 8001b34:	675a      	str	r2, [r3, #116]	@ 0x74
 8001b36:	4b68      	ldr	r3, [pc, #416]	@ (8001cd8 <main+0x22c>)
 8001b38:	4a66      	ldr	r2, [pc, #408]	@ (8001cd4 <main+0x228>)
 8001b3a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  // UART IDLE 인터럽트 활성화 (DMA 기반 수신을 위해)
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8001b3c:	4b65      	ldr	r3, [pc, #404]	@ (8001cd4 <main+0x228>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	4b64      	ldr	r3, [pc, #400]	@ (8001cd4 <main+0x228>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0210 	orr.w	r2, r2, #16
 8001b4a:	601a      	str	r2, [r3, #0]
  MX_FATFS_Init();
 8001b4c:	f00e fd28 	bl	80105a0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  
  // Logger 초기화 (터미널 출력만 사용)
  LOGGER_Connect("STM32", 0);
 8001b50:	2100      	movs	r1, #0
 8001b52:	4862      	ldr	r0, [pc, #392]	@ (8001cdc <main+0x230>)
 8001b54:	f002 ff6a 	bl	8004a2c <LOGGER_Connect>
  
  // 리셋 원인 확인
  LOG_INFO("=== SYSTEM START (Reset #%lu) ===", reset_count);
 8001b58:	4b5d      	ldr	r3, [pc, #372]	@ (8001cd0 <main+0x224>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4960      	ldr	r1, [pc, #384]	@ (8001ce0 <main+0x234>)
 8001b60:	2001      	movs	r0, #1
 8001b62:	f002 ffc3 	bl	8004aec <LOGGER_SendFormatted>
  
  // RCC 리셋 플래그 확인
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST)) LOG_WARN("Reset: BOR (Brown-out)");
 8001b66:	4b5f      	ldr	r3, [pc, #380]	@ (8001ce4 <main+0x238>)
 8001b68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <main+0xce>
 8001b72:	495d      	ldr	r1, [pc, #372]	@ (8001ce8 <main+0x23c>)
 8001b74:	2002      	movs	r0, #2
 8001b76:	f002 ffb9 	bl	8004aec <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)) LOG_WARN("Reset: PIN (External)");
 8001b7a:	4b5a      	ldr	r3, [pc, #360]	@ (8001ce4 <main+0x238>)
 8001b7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b7e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <main+0xe2>
 8001b86:	4959      	ldr	r1, [pc, #356]	@ (8001cec <main+0x240>)
 8001b88:	2002      	movs	r0, #2
 8001b8a:	f002 ffaf 	bl	8004aec <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST)) LOG_WARN("Reset: POR (Power-on)");
 8001b8e:	4b55      	ldr	r3, [pc, #340]	@ (8001ce4 <main+0x238>)
 8001b90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <main+0xf6>
 8001b9a:	4955      	ldr	r1, [pc, #340]	@ (8001cf0 <main+0x244>)
 8001b9c:	2002      	movs	r0, #2
 8001b9e:	f002 ffa5 	bl	8004aec <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)) LOG_WARN("Reset: SOFTWARE");
 8001ba2:	4b50      	ldr	r3, [pc, #320]	@ (8001ce4 <main+0x238>)
 8001ba4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <main+0x10a>
 8001bae:	4951      	ldr	r1, [pc, #324]	@ (8001cf4 <main+0x248>)
 8001bb0:	2002      	movs	r0, #2
 8001bb2:	f002 ff9b 	bl	8004aec <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST)) LOG_WARN("Reset: IWDG (Watchdog)");
 8001bb6:	4b4b      	ldr	r3, [pc, #300]	@ (8001ce4 <main+0x238>)
 8001bb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <main+0x11e>
 8001bc2:	494d      	ldr	r1, [pc, #308]	@ (8001cf8 <main+0x24c>)
 8001bc4:	2002      	movs	r0, #2
 8001bc6:	f002 ff91 	bl	8004aec <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST)) LOG_WARN("Reset: WWDG (Window Watchdog)");
 8001bca:	4b46      	ldr	r3, [pc, #280]	@ (8001ce4 <main+0x238>)
 8001bcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <main+0x132>
 8001bd6:	4949      	ldr	r1, [pc, #292]	@ (8001cfc <main+0x250>)
 8001bd8:	2002      	movs	r0, #2
 8001bda:	f002 ff87 	bl	8004aec <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST)) LOG_WARN("Reset: LPWR (Low Power)");
 8001bde:	4b41      	ldr	r3, [pc, #260]	@ (8001ce4 <main+0x238>)
 8001be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	da03      	bge.n	8001bee <main+0x142>
 8001be6:	4946      	ldr	r1, [pc, #280]	@ (8001d00 <main+0x254>)
 8001be8:	2002      	movs	r0, #2
 8001bea:	f002 ff7f 	bl	8004aec <LOGGER_SendFormatted>
  
  // 플래그 클리어
  __HAL_RCC_CLEAR_RESET_FLAGS();
 8001bee:	4b3d      	ldr	r3, [pc, #244]	@ (8001ce4 <main+0x238>)
 8001bf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bf2:	4a3c      	ldr	r2, [pc, #240]	@ (8001ce4 <main+0x238>)
 8001bf4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bf8:	6753      	str	r3, [r2, #116]	@ 0x74
  
  // ===== 하드웨어 초기화만 main()에서 수행 =====
  
  // SD카드 초기화는 FreeRTOS 태스크에서 수행 (커널 시작 후)
  LOG_INFO("🔄 SD card initialization will be performed in FreeRTOS task");
 8001bfa:	4942      	ldr	r1, [pc, #264]	@ (8001d04 <main+0x258>)
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	f002 ff75 	bl	8004aec <LOGGER_SendFormatted>
  g_sd_initialization_result = -1;  // 초기화 안됨 상태
 8001c02:	4b41      	ldr	r3, [pc, #260]	@ (8001d08 <main+0x25c>)
 8001c04:	f04f 32ff 	mov.w	r2, #4294967295
 8001c08:	601a      	str	r2, [r3, #0]
  
  // UART6 DMA 초기화 건너뛰기 (이미 main 초기화에서 완료됨)
  LOG_INFO("📤 UART DMA already initialized in main() - skipping");
 8001c0a:	4940      	ldr	r1, [pc, #256]	@ (8001d0c <main+0x260>)
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	f002 ff6d 	bl	8004aec <LOGGER_SendFormatted>
  
  // IDLE 인터럽트만 활성화 (메시지 끝 감지용)
  LOG_INFO("📤 Enabling UART IDLE interrupt...");
 8001c12:	493f      	ldr	r1, [pc, #252]	@ (8001d10 <main+0x264>)
 8001c14:	2001      	movs	r0, #1
 8001c16:	f002 ff69 	bl	8004aec <LOGGER_SendFormatted>
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8001c1a:	4b2e      	ldr	r3, [pc, #184]	@ (8001cd4 <main+0x228>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4b2c      	ldr	r3, [pc, #176]	@ (8001cd4 <main+0x228>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f042 0210 	orr.w	r2, r2, #16
 8001c28:	601a      	str	r2, [r3, #0]
  LOG_INFO("✅ UART setup completed");
 8001c2a:	493a      	ldr	r1, [pc, #232]	@ (8001d14 <main+0x268>)
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	f002 ff5d 	bl	8004aec <LOGGER_SendFormatted>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  // SD 로깅 큐 생성 (안전성 체크 포함)
  LOG_INFO("📤 Creating SD logging queue (size: %d, item: %d bytes)", 
 8001c32:	2388      	movs	r3, #136	@ 0x88
 8001c34:	220a      	movs	r2, #10
 8001c36:	4938      	ldr	r1, [pc, #224]	@ (8001d18 <main+0x26c>)
 8001c38:	2001      	movs	r0, #1
 8001c3a:	f002 ff57 	bl	8004aec <LOGGER_SendFormatted>
           SD_LOG_QUEUE_SIZE, sizeof(SDLogEntry_t));
  
  osMessageQDef(sdLogQueue, SD_LOG_QUEUE_SIZE, SDLogEntry_t);
 8001c3e:	4b37      	ldr	r3, [pc, #220]	@ (8001d1c <main+0x270>)
 8001c40:	f107 0420 	add.w	r4, r7, #32
 8001c44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  sdLogQueueHandle = osMessageCreate(osMessageQ(sdLogQueue), NULL);
 8001c4a:	f107 0320 	add.w	r3, r7, #32
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f011 fa3b 	bl	80130cc <osMessageCreate>
 8001c56:	4603      	mov	r3, r0
 8001c58:	4a31      	ldr	r2, [pc, #196]	@ (8001d20 <main+0x274>)
 8001c5a:	6013      	str	r3, [r2, #0]
  
  if (sdLogQueueHandle == NULL) {
 8001c5c:	4b30      	ldr	r3, [pc, #192]	@ (8001d20 <main+0x274>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d104      	bne.n	8001c6e <main+0x1c2>
    LOG_ERROR("❌ SD logging queue creation FAILED - insufficient memory");
 8001c64:	492f      	ldr	r1, [pc, #188]	@ (8001d24 <main+0x278>)
 8001c66:	2003      	movs	r0, #3
 8001c68:	f002 ff40 	bl	8004aec <LOGGER_SendFormatted>
 8001c6c:	e003      	b.n	8001c76 <main+0x1ca>
  } else {
    LOG_INFO("✅ SD logging queue created successfully");
 8001c6e:	492e      	ldr	r1, [pc, #184]	@ (8001d28 <main+0x27c>)
 8001c70:	2001      	movs	r0, #1
 8001c72:	f002 ff3b 	bl	8004aec <LOGGER_SendFormatted>
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 8192);
 8001c76:	4b2d      	ldr	r3, [pc, #180]	@ (8001d2c <main+0x280>)
 8001c78:	1d3c      	adds	r4, r7, #4
 8001c7a:	461d      	mov	r5, r3
 8001c7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f011 f9bd 	bl	801300c <osThreadCreate>
 8001c92:	4603      	mov	r3, r0
 8001c94:	4a26      	ldr	r2, [pc, #152]	@ (8001d30 <main+0x284>)
 8001c96:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* 수신 태스크 비활성화 - SD 카드 테스트에는 불필요 */
  LOG_INFO("📤 Receive Task disabled for SD card testing");
 8001c98:	4926      	ldr	r1, [pc, #152]	@ (8001d34 <main+0x288>)
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	f002 ff26 	bl	8004aec <LOGGER_SendFormatted>
  LOG_INFO("📤 This eliminates UART receive errors during SD testing");
 8001ca0:	4925      	ldr	r1, [pc, #148]	@ (8001d38 <main+0x28c>)
 8001ca2:	2001      	movs	r0, #1
 8001ca4:	f002 ff22 	bl	8004aec <LOGGER_SendFormatted>
  
  /* SD 로깅 태스크 임시 비활성화 - 메모리 부족 문제 */
  LOG_INFO("📤 SD Logging Task disabled temporarily due to memory constraints");
 8001ca8:	4924      	ldr	r1, [pc, #144]	@ (8001d3c <main+0x290>)
 8001caa:	2001      	movs	r0, #1
 8001cac:	f002 ff1e 	bl	8004aec <LOGGER_SendFormatted>
  LOG_INFO("📤 SD card testing will be performed in Default Task instead");
 8001cb0:	4923      	ldr	r1, [pc, #140]	@ (8001d40 <main+0x294>)
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	f002 ff1a 	bl	8004aec <LOGGER_SendFormatted>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  LOG_INFO("🚀 Starting FreeRTOS scheduler...");
 8001cb8:	4922      	ldr	r1, [pc, #136]	@ (8001d44 <main+0x298>)
 8001cba:	2001      	movs	r0, #1
 8001cbc:	f002 ff16 	bl	8004aec <LOGGER_SendFormatted>
  osKernelStart();
 8001cc0:	f011 f981 	bl	8012fc6 <osKernelStart>
  
  // 이 부분은 절대 실행되면 안됨 (스케줄러가 제어를 가져가야 함)
  LOG_ERROR("❌ FATAL: Scheduler failed to start - system halted");
 8001cc4:	4920      	ldr	r1, [pc, #128]	@ (8001d48 <main+0x29c>)
 8001cc6:	2003      	movs	r0, #3
 8001cc8:	f002 ff10 	bl	8004aec <LOGGER_SendFormatted>

  /* We should never get here as control is now taken by the scheduler */
  
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ccc:	bf00      	nop
 8001cce:	e7fd      	b.n	8001ccc <main+0x220>
 8001cd0:	20001308 	.word	0x20001308
 8001cd4:	20000fdc 	.word	0x20000fdc
 8001cd8:	200012a8 	.word	0x200012a8
 8001cdc:	08017c5c 	.word	0x08017c5c
 8001ce0:	08017c64 	.word	0x08017c64
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	08017c88 	.word	0x08017c88
 8001cec:	08017ca0 	.word	0x08017ca0
 8001cf0:	08017cb8 	.word	0x08017cb8
 8001cf4:	08017cd0 	.word	0x08017cd0
 8001cf8:	08017ce0 	.word	0x08017ce0
 8001cfc:	08017cf8 	.word	0x08017cf8
 8001d00:	08017d18 	.word	0x08017d18
 8001d04:	08017d30 	.word	0x08017d30
 8001d08:	20000014 	.word	0x20000014
 8001d0c:	08017d70 	.word	0x08017d70
 8001d10:	08017da8 	.word	0x08017da8
 8001d14:	08017dd0 	.word	0x08017dd0
 8001d18:	08017dec 	.word	0x08017dec
 8001d1c:	08017fdc 	.word	0x08017fdc
 8001d20:	2000109c 	.word	0x2000109c
 8001d24:	08017e28 	.word	0x08017e28
 8001d28:	08017e64 	.word	0x08017e64
 8001d2c:	08017ff8 	.word	0x08017ff8
 8001d30:	20001098 	.word	0x20001098
 8001d34:	08017e90 	.word	0x08017e90
 8001d38:	08017ec0 	.word	0x08017ec0
 8001d3c:	08017efc 	.word	0x08017efc
 8001d40:	08017f40 	.word	0x08017f40
 8001d44:	08017f80 	.word	0x08017f80
 8001d48:	08017fa4 	.word	0x08017fa4

08001d4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b094      	sub	sp, #80	@ 0x50
 8001d50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d52:	f107 0320 	add.w	r3, r7, #32
 8001d56:	2230      	movs	r2, #48	@ 0x30
 8001d58:	2100      	movs	r1, #0
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f013 fc6c 	bl	8015638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d60:	f107 030c 	add.w	r3, r7, #12
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001d70:	f007 fc12 	bl	8009598 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d74:	4b2c      	ldr	r3, [pc, #176]	@ (8001e28 <SystemClock_Config+0xdc>)
 8001d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d78:	4a2b      	ldr	r2, [pc, #172]	@ (8001e28 <SystemClock_Config+0xdc>)
 8001d7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d80:	4b29      	ldr	r3, [pc, #164]	@ (8001e28 <SystemClock_Config+0xdc>)
 8001d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d8c:	4b27      	ldr	r3, [pc, #156]	@ (8001e2c <SystemClock_Config+0xe0>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a26      	ldr	r2, [pc, #152]	@ (8001e2c <SystemClock_Config+0xe0>)
 8001d92:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	4b24      	ldr	r3, [pc, #144]	@ (8001e2c <SystemClock_Config+0xe0>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001da4:	2309      	movs	r3, #9
 8001da6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001da8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001dac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001dae:	2301      	movs	r3, #1
 8001db0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001db2:	2302      	movs	r3, #2
 8001db4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001db6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001dbc:	2319      	movs	r3, #25
 8001dbe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001dc0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001dc4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001dca:	2309      	movs	r3, #9
 8001dcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dce:	f107 0320 	add.w	r3, r7, #32
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f007 fd02 	bl	80097dc <HAL_RCC_OscConfig>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001dde:	f001 fbe1 	bl	80035a4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001de2:	f007 fbe9 	bl	80095b8 <HAL_PWREx_EnableOverDrive>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001dec:	f001 fbda 	bl	80035a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001df0:	230f      	movs	r3, #15
 8001df2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001df4:	2302      	movs	r3, #2
 8001df6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001dfc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001e00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e06:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001e08:	f107 030c 	add.w	r3, r7, #12
 8001e0c:	2106      	movs	r1, #6
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f007 ff88 	bl	8009d24 <HAL_RCC_ClockConfig>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001e1a:	f001 fbc3 	bl	80035a4 <Error_Handler>
  }
}
 8001e1e:	bf00      	nop
 8001e20:	3750      	adds	r7, #80	@ 0x50
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40007000 	.word	0x40007000

08001e30 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b0a2      	sub	sp, #136	@ 0x88
 8001e34:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e36:	1d3b      	adds	r3, r7, #4
 8001e38:	2284      	movs	r2, #132	@ 0x84
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f013 fbfb 	bl	8015638 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8001e42:	4b13      	ldr	r3, [pc, #76]	@ (8001e90 <PeriphCommonClock_Config+0x60>)
 8001e44:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001e46:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001e4a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001e4c:	2305      	movs	r3, #5
 8001e4e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001e50:	2302      	movs	r3, #2
 8001e52:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001e54:	2303      	movs	r3, #3
 8001e56:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001e5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e60:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001e62:	2300      	movs	r3, #0
 8001e64:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001e66:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001e6a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e74:	1d3b      	adds	r3, r7, #4
 8001e76:	4618      	mov	r0, r3
 8001e78:	f008 f96c 	bl	800a154 <HAL_RCCEx_PeriphCLKConfig>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001e82:	f001 fb8f 	bl	80035a4 <Error_Handler>
  }
}
 8001e86:	bf00      	nop
 8001e88:	3788      	adds	r7, #136	@ 0x88
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	00b00008 	.word	0x00b00008

08001e94 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e9a:	463b      	mov	r3, r7
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001ea6:	4b21      	ldr	r3, [pc, #132]	@ (8001f2c <MX_ADC3_Init+0x98>)
 8001ea8:	4a21      	ldr	r2, [pc, #132]	@ (8001f30 <MX_ADC3_Init+0x9c>)
 8001eaa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001eac:	4b1f      	ldr	r3, [pc, #124]	@ (8001f2c <MX_ADC3_Init+0x98>)
 8001eae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001eb2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f2c <MX_ADC3_Init+0x98>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001eba:	4b1c      	ldr	r3, [pc, #112]	@ (8001f2c <MX_ADC3_Init+0x98>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f2c <MX_ADC3_Init+0x98>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001ec6:	4b19      	ldr	r3, [pc, #100]	@ (8001f2c <MX_ADC3_Init+0x98>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ece:	4b17      	ldr	r3, [pc, #92]	@ (8001f2c <MX_ADC3_Init+0x98>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ed4:	4b15      	ldr	r3, [pc, #84]	@ (8001f2c <MX_ADC3_Init+0x98>)
 8001ed6:	4a17      	ldr	r2, [pc, #92]	@ (8001f34 <MX_ADC3_Init+0xa0>)
 8001ed8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001eda:	4b14      	ldr	r3, [pc, #80]	@ (8001f2c <MX_ADC3_Init+0x98>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001ee0:	4b12      	ldr	r3, [pc, #72]	@ (8001f2c <MX_ADC3_Init+0x98>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001ee6:	4b11      	ldr	r3, [pc, #68]	@ (8001f2c <MX_ADC3_Init+0x98>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001eee:	4b0f      	ldr	r3, [pc, #60]	@ (8001f2c <MX_ADC3_Init+0x98>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001ef4:	480d      	ldr	r0, [pc, #52]	@ (8001f2c <MX_ADC3_Init+0x98>)
 8001ef6:	f003 f967 	bl	80051c8 <HAL_ADC_Init>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001f00:	f001 fb50 	bl	80035a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001f04:	2304      	movs	r3, #4
 8001f06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001f10:	463b      	mov	r3, r7
 8001f12:	4619      	mov	r1, r3
 8001f14:	4805      	ldr	r0, [pc, #20]	@ (8001f2c <MX_ADC3_Init+0x98>)
 8001f16:	f003 f99b 	bl	8005250 <HAL_ADC_ConfigChannel>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001f20:	f001 fb40 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001f24:	bf00      	nop
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	200007e8 	.word	0x200007e8
 8001f30:	40012200 	.word	0x40012200
 8001f34:	0f000001 	.word	0x0f000001

08001f38 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001f3c:	4b0d      	ldr	r3, [pc, #52]	@ (8001f74 <MX_CRC_Init+0x3c>)
 8001f3e:	4a0e      	ldr	r2, [pc, #56]	@ (8001f78 <MX_CRC_Init+0x40>)
 8001f40:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001f42:	4b0c      	ldr	r3, [pc, #48]	@ (8001f74 <MX_CRC_Init+0x3c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001f48:	4b0a      	ldr	r3, [pc, #40]	@ (8001f74 <MX_CRC_Init+0x3c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001f4e:	4b09      	ldr	r3, [pc, #36]	@ (8001f74 <MX_CRC_Init+0x3c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001f54:	4b07      	ldr	r3, [pc, #28]	@ (8001f74 <MX_CRC_Init+0x3c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001f5a:	4b06      	ldr	r3, [pc, #24]	@ (8001f74 <MX_CRC_Init+0x3c>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001f60:	4804      	ldr	r0, [pc, #16]	@ (8001f74 <MX_CRC_Init+0x3c>)
 8001f62:	f003 fcab 	bl	80058bc <HAL_CRC_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001f6c:	f001 fb1a 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000830 	.word	0x20000830
 8001f78:	40023000 	.word	0x40023000

08001f7c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001f80:	4b16      	ldr	r3, [pc, #88]	@ (8001fdc <MX_DCMI_Init+0x60>)
 8001f82:	4a17      	ldr	r2, [pc, #92]	@ (8001fe0 <MX_DCMI_Init+0x64>)
 8001f84:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001f86:	4b15      	ldr	r3, [pc, #84]	@ (8001fdc <MX_DCMI_Init+0x60>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001f8c:	4b13      	ldr	r3, [pc, #76]	@ (8001fdc <MX_DCMI_Init+0x60>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001f92:	4b12      	ldr	r3, [pc, #72]	@ (8001fdc <MX_DCMI_Init+0x60>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001f98:	4b10      	ldr	r3, [pc, #64]	@ (8001fdc <MX_DCMI_Init+0x60>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001fdc <MX_DCMI_Init+0x60>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8001fdc <MX_DCMI_Init+0x60>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001faa:	4b0c      	ldr	r3, [pc, #48]	@ (8001fdc <MX_DCMI_Init+0x60>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8001fdc <MX_DCMI_Init+0x60>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001fb6:	4b09      	ldr	r3, [pc, #36]	@ (8001fdc <MX_DCMI_Init+0x60>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001fbc:	4b07      	ldr	r3, [pc, #28]	@ (8001fdc <MX_DCMI_Init+0x60>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001fc2:	4b06      	ldr	r3, [pc, #24]	@ (8001fdc <MX_DCMI_Init+0x60>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001fc8:	4804      	ldr	r0, [pc, #16]	@ (8001fdc <MX_DCMI_Init+0x60>)
 8001fca:	f003 fd69 	bl	8005aa0 <HAL_DCMI_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001fd4:	f001 fae6 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001fd8:	bf00      	nop
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000854 	.word	0x20000854
 8001fe0:	50050000 	.word	0x50050000

08001fe4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001fe8:	4b15      	ldr	r3, [pc, #84]	@ (8002040 <MX_DMA2D_Init+0x5c>)
 8001fea:	4a16      	ldr	r2, [pc, #88]	@ (8002044 <MX_DMA2D_Init+0x60>)
 8001fec:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001fee:	4b14      	ldr	r3, [pc, #80]	@ (8002040 <MX_DMA2D_Init+0x5c>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001ff4:	4b12      	ldr	r3, [pc, #72]	@ (8002040 <MX_DMA2D_Init+0x5c>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001ffa:	4b11      	ldr	r3, [pc, #68]	@ (8002040 <MX_DMA2D_Init+0x5c>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8002000:	4b0f      	ldr	r3, [pc, #60]	@ (8002040 <MX_DMA2D_Init+0x5c>)
 8002002:	2200      	movs	r2, #0
 8002004:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8002006:	4b0e      	ldr	r3, [pc, #56]	@ (8002040 <MX_DMA2D_Init+0x5c>)
 8002008:	2200      	movs	r2, #0
 800200a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800200c:	4b0c      	ldr	r3, [pc, #48]	@ (8002040 <MX_DMA2D_Init+0x5c>)
 800200e:	2200      	movs	r2, #0
 8002010:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8002012:	4b0b      	ldr	r3, [pc, #44]	@ (8002040 <MX_DMA2D_Init+0x5c>)
 8002014:	2200      	movs	r2, #0
 8002016:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8002018:	4809      	ldr	r0, [pc, #36]	@ (8002040 <MX_DMA2D_Init+0x5c>)
 800201a:	f004 f9d1 	bl	80063c0 <HAL_DMA2D_Init>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8002024:	f001 fabe 	bl	80035a4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8002028:	2101      	movs	r1, #1
 800202a:	4805      	ldr	r0, [pc, #20]	@ (8002040 <MX_DMA2D_Init+0x5c>)
 800202c:	f004 fb22 	bl	8006674 <HAL_DMA2D_ConfigLayer>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8002036:	f001 fab5 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	200008a4 	.word	0x200008a4
 8002044:	4002b000 	.word	0x4002b000

08002048 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800204c:	4b1f      	ldr	r3, [pc, #124]	@ (80020cc <MX_ETH_Init+0x84>)
 800204e:	4a20      	ldr	r2, [pc, #128]	@ (80020d0 <MX_ETH_Init+0x88>)
 8002050:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8002052:	4b20      	ldr	r3, [pc, #128]	@ (80020d4 <MX_ETH_Init+0x8c>)
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8002058:	4b1e      	ldr	r3, [pc, #120]	@ (80020d4 <MX_ETH_Init+0x8c>)
 800205a:	2280      	movs	r2, #128	@ 0x80
 800205c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800205e:	4b1d      	ldr	r3, [pc, #116]	@ (80020d4 <MX_ETH_Init+0x8c>)
 8002060:	22e1      	movs	r2, #225	@ 0xe1
 8002062:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8002064:	4b1b      	ldr	r3, [pc, #108]	@ (80020d4 <MX_ETH_Init+0x8c>)
 8002066:	2200      	movs	r2, #0
 8002068:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800206a:	4b1a      	ldr	r3, [pc, #104]	@ (80020d4 <MX_ETH_Init+0x8c>)
 800206c:	2200      	movs	r2, #0
 800206e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8002070:	4b18      	ldr	r3, [pc, #96]	@ (80020d4 <MX_ETH_Init+0x8c>)
 8002072:	2200      	movs	r2, #0
 8002074:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8002076:	4b15      	ldr	r3, [pc, #84]	@ (80020cc <MX_ETH_Init+0x84>)
 8002078:	4a16      	ldr	r2, [pc, #88]	@ (80020d4 <MX_ETH_Init+0x8c>)
 800207a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800207c:	4b13      	ldr	r3, [pc, #76]	@ (80020cc <MX_ETH_Init+0x84>)
 800207e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002082:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002084:	4b11      	ldr	r3, [pc, #68]	@ (80020cc <MX_ETH_Init+0x84>)
 8002086:	4a14      	ldr	r2, [pc, #80]	@ (80020d8 <MX_ETH_Init+0x90>)
 8002088:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800208a:	4b10      	ldr	r3, [pc, #64]	@ (80020cc <MX_ETH_Init+0x84>)
 800208c:	4a13      	ldr	r2, [pc, #76]	@ (80020dc <MX_ETH_Init+0x94>)
 800208e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8002090:	4b0e      	ldr	r3, [pc, #56]	@ (80020cc <MX_ETH_Init+0x84>)
 8002092:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8002096:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002098:	480c      	ldr	r0, [pc, #48]	@ (80020cc <MX_ETH_Init+0x84>)
 800209a:	f004 fb7d 	bl	8006798 <HAL_ETH_Init>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80020a4:	f001 fa7e 	bl	80035a4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80020a8:	2238      	movs	r2, #56	@ 0x38
 80020aa:	2100      	movs	r1, #0
 80020ac:	480c      	ldr	r0, [pc, #48]	@ (80020e0 <MX_ETH_Init+0x98>)
 80020ae:	f013 fac3 	bl	8015638 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80020b2:	4b0b      	ldr	r3, [pc, #44]	@ (80020e0 <MX_ETH_Init+0x98>)
 80020b4:	2221      	movs	r2, #33	@ 0x21
 80020b6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80020b8:	4b09      	ldr	r3, [pc, #36]	@ (80020e0 <MX_ETH_Init+0x98>)
 80020ba:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80020be:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80020c0:	4b07      	ldr	r3, [pc, #28]	@ (80020e0 <MX_ETH_Init+0x98>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	200008e4 	.word	0x200008e4
 80020d0:	40028000 	.word	0x40028000
 80020d4:	2000130c 	.word	0x2000130c
 80020d8:	20000160 	.word	0x20000160
 80020dc:	200000c0 	.word	0x200000c0
 80020e0:	200007b0 	.word	0x200007b0

080020e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002158 <MX_I2C1_Init+0x74>)
 80020ea:	4a1c      	ldr	r2, [pc, #112]	@ (800215c <MX_I2C1_Init+0x78>)
 80020ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80020ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002158 <MX_I2C1_Init+0x74>)
 80020f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002160 <MX_I2C1_Init+0x7c>)
 80020f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80020f4:	4b18      	ldr	r3, [pc, #96]	@ (8002158 <MX_I2C1_Init+0x74>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020fa:	4b17      	ldr	r3, [pc, #92]	@ (8002158 <MX_I2C1_Init+0x74>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002100:	4b15      	ldr	r3, [pc, #84]	@ (8002158 <MX_I2C1_Init+0x74>)
 8002102:	2200      	movs	r2, #0
 8002104:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002106:	4b14      	ldr	r3, [pc, #80]	@ (8002158 <MX_I2C1_Init+0x74>)
 8002108:	2200      	movs	r2, #0
 800210a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800210c:	4b12      	ldr	r3, [pc, #72]	@ (8002158 <MX_I2C1_Init+0x74>)
 800210e:	2200      	movs	r2, #0
 8002110:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002112:	4b11      	ldr	r3, [pc, #68]	@ (8002158 <MX_I2C1_Init+0x74>)
 8002114:	2200      	movs	r2, #0
 8002116:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002118:	4b0f      	ldr	r3, [pc, #60]	@ (8002158 <MX_I2C1_Init+0x74>)
 800211a:	2200      	movs	r2, #0
 800211c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800211e:	480e      	ldr	r0, [pc, #56]	@ (8002158 <MX_I2C1_Init+0x74>)
 8002120:	f006 fdf4 	bl	8008d0c <HAL_I2C_Init>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800212a:	f001 fa3b 	bl	80035a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800212e:	2100      	movs	r1, #0
 8002130:	4809      	ldr	r0, [pc, #36]	@ (8002158 <MX_I2C1_Init+0x74>)
 8002132:	f006 fe87 	bl	8008e44 <HAL_I2CEx_ConfigAnalogFilter>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800213c:	f001 fa32 	bl	80035a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002140:	2100      	movs	r1, #0
 8002142:	4805      	ldr	r0, [pc, #20]	@ (8002158 <MX_I2C1_Init+0x74>)
 8002144:	f006 fec9 	bl	8008eda <HAL_I2CEx_ConfigDigitalFilter>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800214e:	f001 fa29 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20000994 	.word	0x20000994
 800215c:	40005400 	.word	0x40005400
 8002160:	00c0eaff 	.word	0x00c0eaff

08002164 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002168:	4b1b      	ldr	r3, [pc, #108]	@ (80021d8 <MX_I2C3_Init+0x74>)
 800216a:	4a1c      	ldr	r2, [pc, #112]	@ (80021dc <MX_I2C3_Init+0x78>)
 800216c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800216e:	4b1a      	ldr	r3, [pc, #104]	@ (80021d8 <MX_I2C3_Init+0x74>)
 8002170:	4a1b      	ldr	r2, [pc, #108]	@ (80021e0 <MX_I2C3_Init+0x7c>)
 8002172:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002174:	4b18      	ldr	r3, [pc, #96]	@ (80021d8 <MX_I2C3_Init+0x74>)
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800217a:	4b17      	ldr	r3, [pc, #92]	@ (80021d8 <MX_I2C3_Init+0x74>)
 800217c:	2201      	movs	r2, #1
 800217e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002180:	4b15      	ldr	r3, [pc, #84]	@ (80021d8 <MX_I2C3_Init+0x74>)
 8002182:	2200      	movs	r2, #0
 8002184:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002186:	4b14      	ldr	r3, [pc, #80]	@ (80021d8 <MX_I2C3_Init+0x74>)
 8002188:	2200      	movs	r2, #0
 800218a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800218c:	4b12      	ldr	r3, [pc, #72]	@ (80021d8 <MX_I2C3_Init+0x74>)
 800218e:	2200      	movs	r2, #0
 8002190:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002192:	4b11      	ldr	r3, [pc, #68]	@ (80021d8 <MX_I2C3_Init+0x74>)
 8002194:	2200      	movs	r2, #0
 8002196:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002198:	4b0f      	ldr	r3, [pc, #60]	@ (80021d8 <MX_I2C3_Init+0x74>)
 800219a:	2200      	movs	r2, #0
 800219c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800219e:	480e      	ldr	r0, [pc, #56]	@ (80021d8 <MX_I2C3_Init+0x74>)
 80021a0:	f006 fdb4 	bl	8008d0c <HAL_I2C_Init>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80021aa:	f001 f9fb 	bl	80035a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021ae:	2100      	movs	r1, #0
 80021b0:	4809      	ldr	r0, [pc, #36]	@ (80021d8 <MX_I2C3_Init+0x74>)
 80021b2:	f006 fe47 	bl	8008e44 <HAL_I2CEx_ConfigAnalogFilter>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80021bc:	f001 f9f2 	bl	80035a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80021c0:	2100      	movs	r1, #0
 80021c2:	4805      	ldr	r0, [pc, #20]	@ (80021d8 <MX_I2C3_Init+0x74>)
 80021c4:	f006 fe89 	bl	8008eda <HAL_I2CEx_ConfigDigitalFilter>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80021ce:	f001 f9e9 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	200009e8 	.word	0x200009e8
 80021dc:	40005c00 	.word	0x40005c00
 80021e0:	00c0eaff 	.word	0x00c0eaff

080021e4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08e      	sub	sp, #56	@ 0x38
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80021ea:	1d3b      	adds	r3, r7, #4
 80021ec:	2234      	movs	r2, #52	@ 0x34
 80021ee:	2100      	movs	r1, #0
 80021f0:	4618      	mov	r0, r3
 80021f2:	f013 fa21 	bl	8015638 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80021f6:	4b3a      	ldr	r3, [pc, #232]	@ (80022e0 <MX_LTDC_Init+0xfc>)
 80021f8:	4a3a      	ldr	r2, [pc, #232]	@ (80022e4 <MX_LTDC_Init+0x100>)
 80021fa:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80021fc:	4b38      	ldr	r3, [pc, #224]	@ (80022e0 <MX_LTDC_Init+0xfc>)
 80021fe:	2200      	movs	r2, #0
 8002200:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002202:	4b37      	ldr	r3, [pc, #220]	@ (80022e0 <MX_LTDC_Init+0xfc>)
 8002204:	2200      	movs	r2, #0
 8002206:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002208:	4b35      	ldr	r3, [pc, #212]	@ (80022e0 <MX_LTDC_Init+0xfc>)
 800220a:	2200      	movs	r2, #0
 800220c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800220e:	4b34      	ldr	r3, [pc, #208]	@ (80022e0 <MX_LTDC_Init+0xfc>)
 8002210:	2200      	movs	r2, #0
 8002212:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8002214:	4b32      	ldr	r3, [pc, #200]	@ (80022e0 <MX_LTDC_Init+0xfc>)
 8002216:	2228      	movs	r2, #40	@ 0x28
 8002218:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800221a:	4b31      	ldr	r3, [pc, #196]	@ (80022e0 <MX_LTDC_Init+0xfc>)
 800221c:	2209      	movs	r2, #9
 800221e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8002220:	4b2f      	ldr	r3, [pc, #188]	@ (80022e0 <MX_LTDC_Init+0xfc>)
 8002222:	2235      	movs	r2, #53	@ 0x35
 8002224:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8002226:	4b2e      	ldr	r3, [pc, #184]	@ (80022e0 <MX_LTDC_Init+0xfc>)
 8002228:	220b      	movs	r2, #11
 800222a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800222c:	4b2c      	ldr	r3, [pc, #176]	@ (80022e0 <MX_LTDC_Init+0xfc>)
 800222e:	f240 2215 	movw	r2, #533	@ 0x215
 8002232:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8002234:	4b2a      	ldr	r3, [pc, #168]	@ (80022e0 <MX_LTDC_Init+0xfc>)
 8002236:	f240 121b 	movw	r2, #283	@ 0x11b
 800223a:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 800223c:	4b28      	ldr	r3, [pc, #160]	@ (80022e0 <MX_LTDC_Init+0xfc>)
 800223e:	f240 2235 	movw	r2, #565	@ 0x235
 8002242:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8002244:	4b26      	ldr	r3, [pc, #152]	@ (80022e0 <MX_LTDC_Init+0xfc>)
 8002246:	f240 121d 	movw	r2, #285	@ 0x11d
 800224a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800224c:	4b24      	ldr	r3, [pc, #144]	@ (80022e0 <MX_LTDC_Init+0xfc>)
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002254:	4b22      	ldr	r3, [pc, #136]	@ (80022e0 <MX_LTDC_Init+0xfc>)
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800225c:	4b20      	ldr	r3, [pc, #128]	@ (80022e0 <MX_LTDC_Init+0xfc>)
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002264:	481e      	ldr	r0, [pc, #120]	@ (80022e0 <MX_LTDC_Init+0xfc>)
 8002266:	f006 fe84 	bl	8008f72 <HAL_LTDC_Init>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8002270:	f001 f998 	bl	80035a4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8002278:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800227c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8002282:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002286:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002288:	2302      	movs	r3, #2
 800228a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800228c:	23ff      	movs	r3, #255	@ 0xff
 800228e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8002290:	2300      	movs	r3, #0
 8002292:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002294:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002298:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800229a:	2307      	movs	r3, #7
 800229c:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800229e:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80022a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 80022a4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80022a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 80022aa:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80022ae:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80022c2:	1d3b      	adds	r3, r7, #4
 80022c4:	2200      	movs	r2, #0
 80022c6:	4619      	mov	r1, r3
 80022c8:	4805      	ldr	r0, [pc, #20]	@ (80022e0 <MX_LTDC_Init+0xfc>)
 80022ca:	f006 ffb1 	bl	8009230 <HAL_LTDC_ConfigLayer>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80022d4:	f001 f966 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80022d8:	bf00      	nop
 80022da:	3738      	adds	r7, #56	@ 0x38
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	20000a3c 	.word	0x20000a3c
 80022e4:	40016800 	.word	0x40016800

080022e8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80022ec:	4b12      	ldr	r3, [pc, #72]	@ (8002338 <MX_QUADSPI_Init+0x50>)
 80022ee:	4a13      	ldr	r2, [pc, #76]	@ (800233c <MX_QUADSPI_Init+0x54>)
 80022f0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80022f2:	4b11      	ldr	r3, [pc, #68]	@ (8002338 <MX_QUADSPI_Init+0x50>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80022f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002338 <MX_QUADSPI_Init+0x50>)
 80022fa:	2204      	movs	r2, #4
 80022fc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80022fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002338 <MX_QUADSPI_Init+0x50>)
 8002300:	2210      	movs	r2, #16
 8002302:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8002304:	4b0c      	ldr	r3, [pc, #48]	@ (8002338 <MX_QUADSPI_Init+0x50>)
 8002306:	2218      	movs	r2, #24
 8002308:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 800230a:	4b0b      	ldr	r3, [pc, #44]	@ (8002338 <MX_QUADSPI_Init+0x50>)
 800230c:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8002310:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002312:	4b09      	ldr	r3, [pc, #36]	@ (8002338 <MX_QUADSPI_Init+0x50>)
 8002314:	2200      	movs	r2, #0
 8002316:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8002318:	4b07      	ldr	r3, [pc, #28]	@ (8002338 <MX_QUADSPI_Init+0x50>)
 800231a:	2200      	movs	r2, #0
 800231c:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800231e:	4b06      	ldr	r3, [pc, #24]	@ (8002338 <MX_QUADSPI_Init+0x50>)
 8002320:	2200      	movs	r2, #0
 8002322:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002324:	4804      	ldr	r0, [pc, #16]	@ (8002338 <MX_QUADSPI_Init+0x50>)
 8002326:	f007 f997 	bl	8009658 <HAL_QSPI_Init>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8002330:	f001 f938 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002334:	bf00      	nop
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000ae4 	.word	0x20000ae4
 800233c:	a0001000 	.word	0xa0001000

08002340 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b090      	sub	sp, #64	@ 0x40
 8002344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002346:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	605a      	str	r2, [r3, #4]
 8002350:	609a      	str	r2, [r3, #8]
 8002352:	60da      	str	r2, [r3, #12]
 8002354:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002356:	2300      	movs	r3, #0
 8002358:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800235a:	463b      	mov	r3, r7
 800235c:	2228      	movs	r2, #40	@ 0x28
 800235e:	2100      	movs	r1, #0
 8002360:	4618      	mov	r0, r3
 8002362:	f013 f969 	bl	8015638 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002366:	4b46      	ldr	r3, [pc, #280]	@ (8002480 <MX_RTC_Init+0x140>)
 8002368:	4a46      	ldr	r2, [pc, #280]	@ (8002484 <MX_RTC_Init+0x144>)
 800236a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800236c:	4b44      	ldr	r3, [pc, #272]	@ (8002480 <MX_RTC_Init+0x140>)
 800236e:	2200      	movs	r2, #0
 8002370:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002372:	4b43      	ldr	r3, [pc, #268]	@ (8002480 <MX_RTC_Init+0x140>)
 8002374:	227f      	movs	r2, #127	@ 0x7f
 8002376:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002378:	4b41      	ldr	r3, [pc, #260]	@ (8002480 <MX_RTC_Init+0x140>)
 800237a:	22ff      	movs	r2, #255	@ 0xff
 800237c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800237e:	4b40      	ldr	r3, [pc, #256]	@ (8002480 <MX_RTC_Init+0x140>)
 8002380:	2200      	movs	r2, #0
 8002382:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002384:	4b3e      	ldr	r3, [pc, #248]	@ (8002480 <MX_RTC_Init+0x140>)
 8002386:	2200      	movs	r2, #0
 8002388:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800238a:	4b3d      	ldr	r3, [pc, #244]	@ (8002480 <MX_RTC_Init+0x140>)
 800238c:	2200      	movs	r2, #0
 800238e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002390:	483b      	ldr	r0, [pc, #236]	@ (8002480 <MX_RTC_Init+0x140>)
 8002392:	f008 fc0f 	bl	800abb4 <HAL_RTC_Init>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800239c:	f001 f902 	bl	80035a4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80023b2:	2300      	movs	r3, #0
 80023b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80023b6:	2300      	movs	r3, #0
 80023b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80023ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023be:	2201      	movs	r2, #1
 80023c0:	4619      	mov	r1, r3
 80023c2:	482f      	ldr	r0, [pc, #188]	@ (8002480 <MX_RTC_Init+0x140>)
 80023c4:	f008 fc78 	bl	800acb8 <HAL_RTC_SetTime>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80023ce:	f001 f8e9 	bl	80035a4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80023d2:	2301      	movs	r3, #1
 80023d4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80023d8:	2301      	movs	r3, #1
 80023da:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 80023de:	2301      	movs	r3, #1
 80023e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80023ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023ee:	2201      	movs	r2, #1
 80023f0:	4619      	mov	r1, r3
 80023f2:	4823      	ldr	r0, [pc, #140]	@ (8002480 <MX_RTC_Init+0x140>)
 80023f4:	f008 fd58 	bl	800aea8 <HAL_RTC_SetDate>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80023fe:	f001 f8d1 	bl	80035a4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002402:	2300      	movs	r3, #0
 8002404:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002406:	2300      	movs	r3, #0
 8002408:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800240a:	2300      	movs	r3, #0
 800240c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800240e:	2300      	movs	r3, #0
 8002410:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002412:	2300      	movs	r3, #0
 8002414:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002416:	2300      	movs	r3, #0
 8002418:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800241e:	2300      	movs	r3, #0
 8002420:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002426:	2301      	movs	r3, #1
 8002428:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800242c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002430:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002432:	463b      	mov	r3, r7
 8002434:	2201      	movs	r2, #1
 8002436:	4619      	mov	r1, r3
 8002438:	4811      	ldr	r0, [pc, #68]	@ (8002480 <MX_RTC_Init+0x140>)
 800243a:	f008 fe09 	bl	800b050 <HAL_RTC_SetAlarm>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8002444:	f001 f8ae 	bl	80035a4 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8002448:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800244c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800244e:	463b      	mov	r3, r7
 8002450:	2201      	movs	r2, #1
 8002452:	4619      	mov	r1, r3
 8002454:	480a      	ldr	r0, [pc, #40]	@ (8002480 <MX_RTC_Init+0x140>)
 8002456:	f008 fdfb 	bl	800b050 <HAL_RTC_SetAlarm>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8002460:	f001 f8a0 	bl	80035a4 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8002464:	2202      	movs	r2, #2
 8002466:	2100      	movs	r1, #0
 8002468:	4805      	ldr	r0, [pc, #20]	@ (8002480 <MX_RTC_Init+0x140>)
 800246a:	f008 ffd9 	bl	800b420 <HAL_RTCEx_SetTimeStamp>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8002474:	f001 f896 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002478:	bf00      	nop
 800247a:	3740      	adds	r7, #64	@ 0x40
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	20000b30 	.word	0x20000b30
 8002484:	40002800 	.word	0x40002800

08002488 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 800248c:	4b4d      	ldr	r3, [pc, #308]	@ (80025c4 <MX_SAI2_Init+0x13c>)
 800248e:	4a4e      	ldr	r2, [pc, #312]	@ (80025c8 <MX_SAI2_Init+0x140>)
 8002490:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8002492:	4b4c      	ldr	r3, [pc, #304]	@ (80025c4 <MX_SAI2_Init+0x13c>)
 8002494:	2200      	movs	r2, #0
 8002496:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8002498:	4b4a      	ldr	r3, [pc, #296]	@ (80025c4 <MX_SAI2_Init+0x13c>)
 800249a:	2200      	movs	r2, #0
 800249c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800249e:	4b49      	ldr	r3, [pc, #292]	@ (80025c4 <MX_SAI2_Init+0x13c>)
 80024a0:	2240      	movs	r2, #64	@ 0x40
 80024a2:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80024a4:	4b47      	ldr	r3, [pc, #284]	@ (80025c4 <MX_SAI2_Init+0x13c>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80024aa:	4b46      	ldr	r3, [pc, #280]	@ (80025c4 <MX_SAI2_Init+0x13c>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80024b0:	4b44      	ldr	r3, [pc, #272]	@ (80025c4 <MX_SAI2_Init+0x13c>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80024b6:	4b43      	ldr	r3, [pc, #268]	@ (80025c4 <MX_SAI2_Init+0x13c>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80024bc:	4b41      	ldr	r3, [pc, #260]	@ (80025c4 <MX_SAI2_Init+0x13c>)
 80024be:	2200      	movs	r2, #0
 80024c0:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80024c2:	4b40      	ldr	r3, [pc, #256]	@ (80025c4 <MX_SAI2_Init+0x13c>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80024c8:	4b3e      	ldr	r3, [pc, #248]	@ (80025c4 <MX_SAI2_Init+0x13c>)
 80024ca:	4a40      	ldr	r2, [pc, #256]	@ (80025cc <MX_SAI2_Init+0x144>)
 80024cc:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80024ce:	4b3d      	ldr	r3, [pc, #244]	@ (80025c4 <MX_SAI2_Init+0x13c>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80024d4:	4b3b      	ldr	r3, [pc, #236]	@ (80025c4 <MX_SAI2_Init+0x13c>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80024da:	4b3a      	ldr	r3, [pc, #232]	@ (80025c4 <MX_SAI2_Init+0x13c>)
 80024dc:	2200      	movs	r2, #0
 80024de:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80024e0:	4b38      	ldr	r3, [pc, #224]	@ (80025c4 <MX_SAI2_Init+0x13c>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80024e6:	4b37      	ldr	r3, [pc, #220]	@ (80025c4 <MX_SAI2_Init+0x13c>)
 80024e8:	2208      	movs	r2, #8
 80024ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80024ec:	4b35      	ldr	r3, [pc, #212]	@ (80025c4 <MX_SAI2_Init+0x13c>)
 80024ee:	2201      	movs	r2, #1
 80024f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80024f2:	4b34      	ldr	r3, [pc, #208]	@ (80025c4 <MX_SAI2_Init+0x13c>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80024f8:	4b32      	ldr	r3, [pc, #200]	@ (80025c4 <MX_SAI2_Init+0x13c>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80024fe:	4b31      	ldr	r3, [pc, #196]	@ (80025c4 <MX_SAI2_Init+0x13c>)
 8002500:	2200      	movs	r2, #0
 8002502:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8002504:	4b2f      	ldr	r3, [pc, #188]	@ (80025c4 <MX_SAI2_Init+0x13c>)
 8002506:	2200      	movs	r2, #0
 8002508:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800250a:	4b2e      	ldr	r3, [pc, #184]	@ (80025c4 <MX_SAI2_Init+0x13c>)
 800250c:	2200      	movs	r2, #0
 800250e:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8002510:	4b2c      	ldr	r3, [pc, #176]	@ (80025c4 <MX_SAI2_Init+0x13c>)
 8002512:	2201      	movs	r2, #1
 8002514:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8002516:	4b2b      	ldr	r3, [pc, #172]	@ (80025c4 <MX_SAI2_Init+0x13c>)
 8002518:	2200      	movs	r2, #0
 800251a:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800251c:	4829      	ldr	r0, [pc, #164]	@ (80025c4 <MX_SAI2_Init+0x13c>)
 800251e:	f008 ffe7 	bl	800b4f0 <HAL_SAI_Init>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8002528:	f001 f83c 	bl	80035a4 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 800252c:	4b28      	ldr	r3, [pc, #160]	@ (80025d0 <MX_SAI2_Init+0x148>)
 800252e:	4a29      	ldr	r2, [pc, #164]	@ (80025d4 <MX_SAI2_Init+0x14c>)
 8002530:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8002532:	4b27      	ldr	r3, [pc, #156]	@ (80025d0 <MX_SAI2_Init+0x148>)
 8002534:	2200      	movs	r2, #0
 8002536:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8002538:	4b25      	ldr	r3, [pc, #148]	@ (80025d0 <MX_SAI2_Init+0x148>)
 800253a:	2203      	movs	r2, #3
 800253c:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 800253e:	4b24      	ldr	r3, [pc, #144]	@ (80025d0 <MX_SAI2_Init+0x148>)
 8002540:	2240      	movs	r2, #64	@ 0x40
 8002542:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002544:	4b22      	ldr	r3, [pc, #136]	@ (80025d0 <MX_SAI2_Init+0x148>)
 8002546:	2200      	movs	r2, #0
 8002548:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800254a:	4b21      	ldr	r3, [pc, #132]	@ (80025d0 <MX_SAI2_Init+0x148>)
 800254c:	2200      	movs	r2, #0
 800254e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8002550:	4b1f      	ldr	r3, [pc, #124]	@ (80025d0 <MX_SAI2_Init+0x148>)
 8002552:	2201      	movs	r2, #1
 8002554:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002556:	4b1e      	ldr	r3, [pc, #120]	@ (80025d0 <MX_SAI2_Init+0x148>)
 8002558:	2200      	movs	r2, #0
 800255a:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800255c:	4b1c      	ldr	r3, [pc, #112]	@ (80025d0 <MX_SAI2_Init+0x148>)
 800255e:	2200      	movs	r2, #0
 8002560:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002562:	4b1b      	ldr	r3, [pc, #108]	@ (80025d0 <MX_SAI2_Init+0x148>)
 8002564:	2200      	movs	r2, #0
 8002566:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002568:	4b19      	ldr	r3, [pc, #100]	@ (80025d0 <MX_SAI2_Init+0x148>)
 800256a:	2200      	movs	r2, #0
 800256c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800256e:	4b18      	ldr	r3, [pc, #96]	@ (80025d0 <MX_SAI2_Init+0x148>)
 8002570:	2200      	movs	r2, #0
 8002572:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002574:	4b16      	ldr	r3, [pc, #88]	@ (80025d0 <MX_SAI2_Init+0x148>)
 8002576:	2200      	movs	r2, #0
 8002578:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 800257a:	4b15      	ldr	r3, [pc, #84]	@ (80025d0 <MX_SAI2_Init+0x148>)
 800257c:	2208      	movs	r2, #8
 800257e:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8002580:	4b13      	ldr	r3, [pc, #76]	@ (80025d0 <MX_SAI2_Init+0x148>)
 8002582:	2201      	movs	r2, #1
 8002584:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002586:	4b12      	ldr	r3, [pc, #72]	@ (80025d0 <MX_SAI2_Init+0x148>)
 8002588:	2200      	movs	r2, #0
 800258a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800258c:	4b10      	ldr	r3, [pc, #64]	@ (80025d0 <MX_SAI2_Init+0x148>)
 800258e:	2200      	movs	r2, #0
 8002590:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002592:	4b0f      	ldr	r3, [pc, #60]	@ (80025d0 <MX_SAI2_Init+0x148>)
 8002594:	2200      	movs	r2, #0
 8002596:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8002598:	4b0d      	ldr	r3, [pc, #52]	@ (80025d0 <MX_SAI2_Init+0x148>)
 800259a:	2200      	movs	r2, #0
 800259c:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800259e:	4b0c      	ldr	r3, [pc, #48]	@ (80025d0 <MX_SAI2_Init+0x148>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80025a4:	4b0a      	ldr	r3, [pc, #40]	@ (80025d0 <MX_SAI2_Init+0x148>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80025aa:	4b09      	ldr	r3, [pc, #36]	@ (80025d0 <MX_SAI2_Init+0x148>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80025b0:	4807      	ldr	r0, [pc, #28]	@ (80025d0 <MX_SAI2_Init+0x148>)
 80025b2:	f008 ff9d 	bl	800b4f0 <HAL_SAI_Init>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 80025bc:	f000 fff2 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80025c0:	bf00      	nop
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	20000b50 	.word	0x20000b50
 80025c8:	40015c04 	.word	0x40015c04
 80025cc:	0002ee00 	.word	0x0002ee00
 80025d0:	20000bd4 	.word	0x20000bd4
 80025d4:	40015c24 	.word	0x40015c24

080025d8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80025dc:	4b0f      	ldr	r3, [pc, #60]	@ (800261c <MX_SDMMC1_SD_Init+0x44>)
 80025de:	4a10      	ldr	r2, [pc, #64]	@ (8002620 <MX_SDMMC1_SD_Init+0x48>)
 80025e0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80025e2:	4b0e      	ldr	r3, [pc, #56]	@ (800261c <MX_SDMMC1_SD_Init+0x44>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80025e8:	4b0c      	ldr	r3, [pc, #48]	@ (800261c <MX_SDMMC1_SD_Init+0x44>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80025ee:	4b0b      	ldr	r3, [pc, #44]	@ (800261c <MX_SDMMC1_SD_Init+0x44>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;  // ST 커뮤니티 가이드: 1-bit 모드로 변경
 80025f4:	4b09      	ldr	r3, [pc, #36]	@ (800261c <MX_SDMMC1_SD_Init+0x44>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;  // 하드웨어 플로우 컨트롤 활성화 (안정성 향상)
 80025fa:	4b08      	ldr	r3, [pc, #32]	@ (800261c <MX_SDMMC1_SD_Init+0x44>)
 80025fc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002600:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 8;  // 클럭 분주비 증가 (2→8, STM32F7 안정화 권장값)
 8002602:	4b06      	ldr	r3, [pc, #24]	@ (800261c <MX_SDMMC1_SD_Init+0x44>)
 8002604:	2208      	movs	r2, #8
 8002606:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  
  // Initialize SD card with HAL
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8002608:	4804      	ldr	r0, [pc, #16]	@ (800261c <MX_SDMMC1_SD_Init+0x44>)
 800260a:	f009 f927 	bl	800b85c <HAL_SD_Init>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_SDMMC1_SD_Init+0x40>
  {
    Error_Handler();
 8002614:	f000 ffc6 	bl	80035a4 <Error_Handler>
  }

  /* USER CODE END SDMMC1_Init 2 */

}
 8002618:	bf00      	nop
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20000c58 	.word	0x20000c58
 8002620:	40012c00 	.word	0x40012c00

08002624 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8002628:	4b15      	ldr	r3, [pc, #84]	@ (8002680 <MX_SPDIFRX_Init+0x5c>)
 800262a:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800262e:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8002630:	4b13      	ldr	r3, [pc, #76]	@ (8002680 <MX_SPDIFRX_Init+0x5c>)
 8002632:	2200      	movs	r2, #0
 8002634:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8002636:	4b12      	ldr	r3, [pc, #72]	@ (8002680 <MX_SPDIFRX_Init+0x5c>)
 8002638:	2200      	movs	r2, #0
 800263a:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 800263c:	4b10      	ldr	r3, [pc, #64]	@ (8002680 <MX_SPDIFRX_Init+0x5c>)
 800263e:	2200      	movs	r2, #0
 8002640:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8002642:	4b0f      	ldr	r3, [pc, #60]	@ (8002680 <MX_SPDIFRX_Init+0x5c>)
 8002644:	2200      	movs	r2, #0
 8002646:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8002648:	4b0d      	ldr	r3, [pc, #52]	@ (8002680 <MX_SPDIFRX_Init+0x5c>)
 800264a:	2200      	movs	r2, #0
 800264c:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800264e:	4b0c      	ldr	r3, [pc, #48]	@ (8002680 <MX_SPDIFRX_Init+0x5c>)
 8002650:	2200      	movs	r2, #0
 8002652:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8002654:	4b0a      	ldr	r3, [pc, #40]	@ (8002680 <MX_SPDIFRX_Init+0x5c>)
 8002656:	2200      	movs	r2, #0
 8002658:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800265a:	4b09      	ldr	r3, [pc, #36]	@ (8002680 <MX_SPDIFRX_Init+0x5c>)
 800265c:	2200      	movs	r2, #0
 800265e:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8002660:	4b07      	ldr	r3, [pc, #28]	@ (8002680 <MX_SPDIFRX_Init+0x5c>)
 8002662:	2200      	movs	r2, #0
 8002664:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8002666:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <MX_SPDIFRX_Init+0x5c>)
 8002668:	2200      	movs	r2, #0
 800266a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 800266c:	4804      	ldr	r0, [pc, #16]	@ (8002680 <MX_SPDIFRX_Init+0x5c>)
 800266e:	f00a f8b1 	bl	800c7d4 <HAL_SPDIFRX_Init>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8002678:	f000 ff94 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 800267c:	bf00      	nop
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20000cdc 	.word	0x20000cdc

08002684 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002688:	4b1b      	ldr	r3, [pc, #108]	@ (80026f8 <MX_SPI2_Init+0x74>)
 800268a:	4a1c      	ldr	r2, [pc, #112]	@ (80026fc <MX_SPI2_Init+0x78>)
 800268c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800268e:	4b1a      	ldr	r3, [pc, #104]	@ (80026f8 <MX_SPI2_Init+0x74>)
 8002690:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002694:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002696:	4b18      	ldr	r3, [pc, #96]	@ (80026f8 <MX_SPI2_Init+0x74>)
 8002698:	2200      	movs	r2, #0
 800269a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800269c:	4b16      	ldr	r3, [pc, #88]	@ (80026f8 <MX_SPI2_Init+0x74>)
 800269e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80026a2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026a4:	4b14      	ldr	r3, [pc, #80]	@ (80026f8 <MX_SPI2_Init+0x74>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026aa:	4b13      	ldr	r3, [pc, #76]	@ (80026f8 <MX_SPI2_Init+0x74>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80026b0:	4b11      	ldr	r3, [pc, #68]	@ (80026f8 <MX_SPI2_Init+0x74>)
 80026b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026b6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026b8:	4b0f      	ldr	r3, [pc, #60]	@ (80026f8 <MX_SPI2_Init+0x74>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026be:	4b0e      	ldr	r3, [pc, #56]	@ (80026f8 <MX_SPI2_Init+0x74>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80026c4:	4b0c      	ldr	r3, [pc, #48]	@ (80026f8 <MX_SPI2_Init+0x74>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026ca:	4b0b      	ldr	r3, [pc, #44]	@ (80026f8 <MX_SPI2_Init+0x74>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80026d0:	4b09      	ldr	r3, [pc, #36]	@ (80026f8 <MX_SPI2_Init+0x74>)
 80026d2:	2207      	movs	r2, #7
 80026d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80026d6:	4b08      	ldr	r3, [pc, #32]	@ (80026f8 <MX_SPI2_Init+0x74>)
 80026d8:	2200      	movs	r2, #0
 80026da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80026dc:	4b06      	ldr	r3, [pc, #24]	@ (80026f8 <MX_SPI2_Init+0x74>)
 80026de:	2208      	movs	r2, #8
 80026e0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80026e2:	4805      	ldr	r0, [pc, #20]	@ (80026f8 <MX_SPI2_Init+0x74>)
 80026e4:	f00a f8d2 	bl	800c88c <HAL_SPI_Init>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80026ee:	f000 ff59 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20000d28 	.word	0x20000d28
 80026fc:	40003800 	.word	0x40003800

08002700 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b09a      	sub	sp, #104	@ 0x68
 8002704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002706:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	605a      	str	r2, [r3, #4]
 8002710:	609a      	str	r2, [r3, #8]
 8002712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002714:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	605a      	str	r2, [r3, #4]
 800271e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002720:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	605a      	str	r2, [r3, #4]
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	60da      	str	r2, [r3, #12]
 800272e:	611a      	str	r2, [r3, #16]
 8002730:	615a      	str	r2, [r3, #20]
 8002732:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002734:	1d3b      	adds	r3, r7, #4
 8002736:	222c      	movs	r2, #44	@ 0x2c
 8002738:	2100      	movs	r1, #0
 800273a:	4618      	mov	r0, r3
 800273c:	f012 ff7c 	bl	8015638 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002740:	4b43      	ldr	r3, [pc, #268]	@ (8002850 <MX_TIM1_Init+0x150>)
 8002742:	4a44      	ldr	r2, [pc, #272]	@ (8002854 <MX_TIM1_Init+0x154>)
 8002744:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002746:	4b42      	ldr	r3, [pc, #264]	@ (8002850 <MX_TIM1_Init+0x150>)
 8002748:	2200      	movs	r2, #0
 800274a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800274c:	4b40      	ldr	r3, [pc, #256]	@ (8002850 <MX_TIM1_Init+0x150>)
 800274e:	2200      	movs	r2, #0
 8002750:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002752:	4b3f      	ldr	r3, [pc, #252]	@ (8002850 <MX_TIM1_Init+0x150>)
 8002754:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002758:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800275a:	4b3d      	ldr	r3, [pc, #244]	@ (8002850 <MX_TIM1_Init+0x150>)
 800275c:	2200      	movs	r2, #0
 800275e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002760:	4b3b      	ldr	r3, [pc, #236]	@ (8002850 <MX_TIM1_Init+0x150>)
 8002762:	2200      	movs	r2, #0
 8002764:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002766:	4b3a      	ldr	r3, [pc, #232]	@ (8002850 <MX_TIM1_Init+0x150>)
 8002768:	2200      	movs	r2, #0
 800276a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800276c:	4838      	ldr	r0, [pc, #224]	@ (8002850 <MX_TIM1_Init+0x150>)
 800276e:	f00a f938 	bl	800c9e2 <HAL_TIM_Base_Init>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002778:	f000 ff14 	bl	80035a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800277c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002780:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002782:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002786:	4619      	mov	r1, r3
 8002788:	4831      	ldr	r0, [pc, #196]	@ (8002850 <MX_TIM1_Init+0x150>)
 800278a:	f00a fc6b 	bl	800d064 <HAL_TIM_ConfigClockSource>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002794:	f000 ff06 	bl	80035a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002798:	482d      	ldr	r0, [pc, #180]	@ (8002850 <MX_TIM1_Init+0x150>)
 800279a:	f00a f9f1 	bl	800cb80 <HAL_TIM_PWM_Init>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80027a4:	f000 fefe 	bl	80035a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027a8:	2300      	movs	r3, #0
 80027aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80027ac:	2300      	movs	r3, #0
 80027ae:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027b0:	2300      	movs	r3, #0
 80027b2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80027b4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80027b8:	4619      	mov	r1, r3
 80027ba:	4825      	ldr	r0, [pc, #148]	@ (8002850 <MX_TIM1_Init+0x150>)
 80027bc:	f00b f8e2 	bl	800d984 <HAL_TIMEx_MasterConfigSynchronization>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80027c6:	f000 feed 	bl	80035a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027ca:	2360      	movs	r3, #96	@ 0x60
 80027cc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80027ce:	2300      	movs	r3, #0
 80027d0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027d2:	2300      	movs	r3, #0
 80027d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80027d6:	2300      	movs	r3, #0
 80027d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027da:	2300      	movs	r3, #0
 80027dc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80027de:	2300      	movs	r3, #0
 80027e0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80027e2:	2300      	movs	r3, #0
 80027e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027e6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80027ea:	2200      	movs	r2, #0
 80027ec:	4619      	mov	r1, r3
 80027ee:	4818      	ldr	r0, [pc, #96]	@ (8002850 <MX_TIM1_Init+0x150>)
 80027f0:	f00a fb24 	bl	800ce3c <HAL_TIM_PWM_ConfigChannel>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80027fa:	f000 fed3 	bl	80035a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80027fe:	2300      	movs	r3, #0
 8002800:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002802:	2300      	movs	r3, #0
 8002804:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800280a:	2300      	movs	r3, #0
 800280c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002812:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002816:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002818:	2300      	movs	r3, #0
 800281a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800281c:	2300      	movs	r3, #0
 800281e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002820:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002824:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002826:	2300      	movs	r3, #0
 8002828:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800282a:	2300      	movs	r3, #0
 800282c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800282e:	1d3b      	adds	r3, r7, #4
 8002830:	4619      	mov	r1, r3
 8002832:	4807      	ldr	r0, [pc, #28]	@ (8002850 <MX_TIM1_Init+0x150>)
 8002834:	f00b f934 	bl	800daa0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800283e:	f000 feb1 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002842:	4803      	ldr	r0, [pc, #12]	@ (8002850 <MX_TIM1_Init+0x150>)
 8002844:	f001 fd22 	bl	800428c <HAL_TIM_MspPostInit>

}
 8002848:	bf00      	nop
 800284a:	3768      	adds	r7, #104	@ 0x68
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	20000d8c 	.word	0x20000d8c
 8002854:	40010000 	.word	0x40010000

08002858 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08e      	sub	sp, #56	@ 0x38
 800285c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800285e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	605a      	str	r2, [r3, #4]
 8002868:	609a      	str	r2, [r3, #8]
 800286a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800286c:	f107 031c 	add.w	r3, r7, #28
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002878:	463b      	mov	r3, r7
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	605a      	str	r2, [r3, #4]
 8002880:	609a      	str	r2, [r3, #8]
 8002882:	60da      	str	r2, [r3, #12]
 8002884:	611a      	str	r2, [r3, #16]
 8002886:	615a      	str	r2, [r3, #20]
 8002888:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800288a:	4b2d      	ldr	r3, [pc, #180]	@ (8002940 <MX_TIM2_Init+0xe8>)
 800288c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002890:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002892:	4b2b      	ldr	r3, [pc, #172]	@ (8002940 <MX_TIM2_Init+0xe8>)
 8002894:	2200      	movs	r2, #0
 8002896:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002898:	4b29      	ldr	r3, [pc, #164]	@ (8002940 <MX_TIM2_Init+0xe8>)
 800289a:	2200      	movs	r2, #0
 800289c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800289e:	4b28      	ldr	r3, [pc, #160]	@ (8002940 <MX_TIM2_Init+0xe8>)
 80028a0:	f04f 32ff 	mov.w	r2, #4294967295
 80028a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028a6:	4b26      	ldr	r3, [pc, #152]	@ (8002940 <MX_TIM2_Init+0xe8>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ac:	4b24      	ldr	r3, [pc, #144]	@ (8002940 <MX_TIM2_Init+0xe8>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80028b2:	4823      	ldr	r0, [pc, #140]	@ (8002940 <MX_TIM2_Init+0xe8>)
 80028b4:	f00a f895 	bl	800c9e2 <HAL_TIM_Base_Init>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80028be:	f000 fe71 	bl	80035a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80028cc:	4619      	mov	r1, r3
 80028ce:	481c      	ldr	r0, [pc, #112]	@ (8002940 <MX_TIM2_Init+0xe8>)
 80028d0:	f00a fbc8 	bl	800d064 <HAL_TIM_ConfigClockSource>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80028da:	f000 fe63 	bl	80035a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80028de:	4818      	ldr	r0, [pc, #96]	@ (8002940 <MX_TIM2_Init+0xe8>)
 80028e0:	f00a f94e 	bl	800cb80 <HAL_TIM_PWM_Init>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80028ea:	f000 fe5b 	bl	80035a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028ee:	2300      	movs	r3, #0
 80028f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028f2:	2300      	movs	r3, #0
 80028f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028f6:	f107 031c 	add.w	r3, r7, #28
 80028fa:	4619      	mov	r1, r3
 80028fc:	4810      	ldr	r0, [pc, #64]	@ (8002940 <MX_TIM2_Init+0xe8>)
 80028fe:	f00b f841 	bl	800d984 <HAL_TIMEx_MasterConfigSynchronization>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002908:	f000 fe4c 	bl	80035a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800290c:	2360      	movs	r3, #96	@ 0x60
 800290e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002910:	2300      	movs	r3, #0
 8002912:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002914:	2300      	movs	r3, #0
 8002916:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002918:	2300      	movs	r3, #0
 800291a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800291c:	463b      	mov	r3, r7
 800291e:	2200      	movs	r2, #0
 8002920:	4619      	mov	r1, r3
 8002922:	4807      	ldr	r0, [pc, #28]	@ (8002940 <MX_TIM2_Init+0xe8>)
 8002924:	f00a fa8a 	bl	800ce3c <HAL_TIM_PWM_ConfigChannel>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800292e:	f000 fe39 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002932:	4803      	ldr	r0, [pc, #12]	@ (8002940 <MX_TIM2_Init+0xe8>)
 8002934:	f001 fcaa 	bl	800428c <HAL_TIM_MspPostInit>

}
 8002938:	bf00      	nop
 800293a:	3738      	adds	r7, #56	@ 0x38
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	20000dd8 	.word	0x20000dd8

08002944 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08e      	sub	sp, #56	@ 0x38
 8002948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800294a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	605a      	str	r2, [r3, #4]
 8002954:	609a      	str	r2, [r3, #8]
 8002956:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002958:	f107 031c 	add.w	r3, r7, #28
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002964:	463b      	mov	r3, r7
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	605a      	str	r2, [r3, #4]
 800296c:	609a      	str	r2, [r3, #8]
 800296e:	60da      	str	r2, [r3, #12]
 8002970:	611a      	str	r2, [r3, #16]
 8002972:	615a      	str	r2, [r3, #20]
 8002974:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002976:	4b2d      	ldr	r3, [pc, #180]	@ (8002a2c <MX_TIM3_Init+0xe8>)
 8002978:	4a2d      	ldr	r2, [pc, #180]	@ (8002a30 <MX_TIM3_Init+0xec>)
 800297a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800297c:	4b2b      	ldr	r3, [pc, #172]	@ (8002a2c <MX_TIM3_Init+0xe8>)
 800297e:	2200      	movs	r2, #0
 8002980:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002982:	4b2a      	ldr	r3, [pc, #168]	@ (8002a2c <MX_TIM3_Init+0xe8>)
 8002984:	2200      	movs	r2, #0
 8002986:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002988:	4b28      	ldr	r3, [pc, #160]	@ (8002a2c <MX_TIM3_Init+0xe8>)
 800298a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800298e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002990:	4b26      	ldr	r3, [pc, #152]	@ (8002a2c <MX_TIM3_Init+0xe8>)
 8002992:	2200      	movs	r2, #0
 8002994:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002996:	4b25      	ldr	r3, [pc, #148]	@ (8002a2c <MX_TIM3_Init+0xe8>)
 8002998:	2200      	movs	r2, #0
 800299a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800299c:	4823      	ldr	r0, [pc, #140]	@ (8002a2c <MX_TIM3_Init+0xe8>)
 800299e:	f00a f820 	bl	800c9e2 <HAL_TIM_Base_Init>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80029a8:	f000 fdfc 	bl	80035a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80029b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029b6:	4619      	mov	r1, r3
 80029b8:	481c      	ldr	r0, [pc, #112]	@ (8002a2c <MX_TIM3_Init+0xe8>)
 80029ba:	f00a fb53 	bl	800d064 <HAL_TIM_ConfigClockSource>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80029c4:	f000 fdee 	bl	80035a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80029c8:	4818      	ldr	r0, [pc, #96]	@ (8002a2c <MX_TIM3_Init+0xe8>)
 80029ca:	f00a f8d9 	bl	800cb80 <HAL_TIM_PWM_Init>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80029d4:	f000 fde6 	bl	80035a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029d8:	2300      	movs	r3, #0
 80029da:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029dc:	2300      	movs	r3, #0
 80029de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029e0:	f107 031c 	add.w	r3, r7, #28
 80029e4:	4619      	mov	r1, r3
 80029e6:	4811      	ldr	r0, [pc, #68]	@ (8002a2c <MX_TIM3_Init+0xe8>)
 80029e8:	f00a ffcc 	bl	800d984 <HAL_TIMEx_MasterConfigSynchronization>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80029f2:	f000 fdd7 	bl	80035a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029f6:	2360      	movs	r3, #96	@ 0x60
 80029f8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029fe:	2300      	movs	r3, #0
 8002a00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a02:	2300      	movs	r3, #0
 8002a04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a06:	463b      	mov	r3, r7
 8002a08:	2200      	movs	r2, #0
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4807      	ldr	r0, [pc, #28]	@ (8002a2c <MX_TIM3_Init+0xe8>)
 8002a0e:	f00a fa15 	bl	800ce3c <HAL_TIM_PWM_ConfigChannel>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002a18:	f000 fdc4 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002a1c:	4803      	ldr	r0, [pc, #12]	@ (8002a2c <MX_TIM3_Init+0xe8>)
 8002a1e:	f001 fc35 	bl	800428c <HAL_TIM_MspPostInit>

}
 8002a22:	bf00      	nop
 8002a24:	3738      	adds	r7, #56	@ 0x38
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	20000e24 	.word	0x20000e24
 8002a30:	40000400 	.word	0x40000400

08002a34 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08e      	sub	sp, #56	@ 0x38
 8002a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	605a      	str	r2, [r3, #4]
 8002a44:	609a      	str	r2, [r3, #8]
 8002a46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a48:	f107 031c 	add.w	r3, r7, #28
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a54:	463b      	mov	r3, r7
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	605a      	str	r2, [r3, #4]
 8002a5c:	609a      	str	r2, [r3, #8]
 8002a5e:	60da      	str	r2, [r3, #12]
 8002a60:	611a      	str	r2, [r3, #16]
 8002a62:	615a      	str	r2, [r3, #20]
 8002a64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002a66:	4b2d      	ldr	r3, [pc, #180]	@ (8002b1c <MX_TIM5_Init+0xe8>)
 8002a68:	4a2d      	ldr	r2, [pc, #180]	@ (8002b20 <MX_TIM5_Init+0xec>)
 8002a6a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002a6c:	4b2b      	ldr	r3, [pc, #172]	@ (8002b1c <MX_TIM5_Init+0xe8>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a72:	4b2a      	ldr	r3, [pc, #168]	@ (8002b1c <MX_TIM5_Init+0xe8>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002a78:	4b28      	ldr	r3, [pc, #160]	@ (8002b1c <MX_TIM5_Init+0xe8>)
 8002a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8002a7e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a80:	4b26      	ldr	r3, [pc, #152]	@ (8002b1c <MX_TIM5_Init+0xe8>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a86:	4b25      	ldr	r3, [pc, #148]	@ (8002b1c <MX_TIM5_Init+0xe8>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002a8c:	4823      	ldr	r0, [pc, #140]	@ (8002b1c <MX_TIM5_Init+0xe8>)
 8002a8e:	f009 ffa8 	bl	800c9e2 <HAL_TIM_Base_Init>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002a98:	f000 fd84 	bl	80035a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002aa2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	481c      	ldr	r0, [pc, #112]	@ (8002b1c <MX_TIM5_Init+0xe8>)
 8002aaa:	f00a fadb 	bl	800d064 <HAL_TIM_ConfigClockSource>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002ab4:	f000 fd76 	bl	80035a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002ab8:	4818      	ldr	r0, [pc, #96]	@ (8002b1c <MX_TIM5_Init+0xe8>)
 8002aba:	f00a f861 	bl	800cb80 <HAL_TIM_PWM_Init>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002ac4:	f000 fd6e 	bl	80035a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002acc:	2300      	movs	r3, #0
 8002ace:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002ad0:	f107 031c 	add.w	r3, r7, #28
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4811      	ldr	r0, [pc, #68]	@ (8002b1c <MX_TIM5_Init+0xe8>)
 8002ad8:	f00a ff54 	bl	800d984 <HAL_TIMEx_MasterConfigSynchronization>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002ae2:	f000 fd5f 	bl	80035a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ae6:	2360      	movs	r3, #96	@ 0x60
 8002ae8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002aea:	2300      	movs	r3, #0
 8002aec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aee:	2300      	movs	r3, #0
 8002af0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002af2:	2300      	movs	r3, #0
 8002af4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002af6:	463b      	mov	r3, r7
 8002af8:	220c      	movs	r2, #12
 8002afa:	4619      	mov	r1, r3
 8002afc:	4807      	ldr	r0, [pc, #28]	@ (8002b1c <MX_TIM5_Init+0xe8>)
 8002afe:	f00a f99d 	bl	800ce3c <HAL_TIM_PWM_ConfigChannel>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002b08:	f000 fd4c 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002b0c:	4803      	ldr	r0, [pc, #12]	@ (8002b1c <MX_TIM5_Init+0xe8>)
 8002b0e:	f001 fbbd 	bl	800428c <HAL_TIM_MspPostInit>

}
 8002b12:	bf00      	nop
 8002b14:	3738      	adds	r7, #56	@ 0x38
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20000e70 	.word	0x20000e70
 8002b20:	40000c00 	.word	0x40000c00

08002b24 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b088      	sub	sp, #32
 8002b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b2a:	f107 0310 	add.w	r3, r7, #16
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	605a      	str	r2, [r3, #4]
 8002b34:	609a      	str	r2, [r3, #8]
 8002b36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b38:	1d3b      	adds	r3, r7, #4
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	605a      	str	r2, [r3, #4]
 8002b40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002b42:	4b20      	ldr	r3, [pc, #128]	@ (8002bc4 <MX_TIM8_Init+0xa0>)
 8002b44:	4a20      	ldr	r2, [pc, #128]	@ (8002bc8 <MX_TIM8_Init+0xa4>)
 8002b46:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002b48:	4b1e      	ldr	r3, [pc, #120]	@ (8002bc4 <MX_TIM8_Init+0xa0>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8002bc4 <MX_TIM8_Init+0xa0>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002b54:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc4 <MX_TIM8_Init+0xa0>)
 8002b56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b5a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b5c:	4b19      	ldr	r3, [pc, #100]	@ (8002bc4 <MX_TIM8_Init+0xa0>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002b62:	4b18      	ldr	r3, [pc, #96]	@ (8002bc4 <MX_TIM8_Init+0xa0>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b68:	4b16      	ldr	r3, [pc, #88]	@ (8002bc4 <MX_TIM8_Init+0xa0>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002b6e:	4815      	ldr	r0, [pc, #84]	@ (8002bc4 <MX_TIM8_Init+0xa0>)
 8002b70:	f009 ff37 	bl	800c9e2 <HAL_TIM_Base_Init>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8002b7a:	f000 fd13 	bl	80035a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002b84:	f107 0310 	add.w	r3, r7, #16
 8002b88:	4619      	mov	r1, r3
 8002b8a:	480e      	ldr	r0, [pc, #56]	@ (8002bc4 <MX_TIM8_Init+0xa0>)
 8002b8c:	f00a fa6a 	bl	800d064 <HAL_TIM_ConfigClockSource>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8002b96:	f000 fd05 	bl	80035a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002ba6:	1d3b      	adds	r3, r7, #4
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4806      	ldr	r0, [pc, #24]	@ (8002bc4 <MX_TIM8_Init+0xa0>)
 8002bac:	f00a feea 	bl	800d984 <HAL_TIMEx_MasterConfigSynchronization>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002bb6:	f000 fcf5 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002bba:	bf00      	nop
 8002bbc:	3720      	adds	r7, #32
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20000ebc 	.word	0x20000ebc
 8002bc8:	40010400 	.word	0x40010400

08002bcc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bd2:	1d3b      	adds	r3, r7, #4
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	611a      	str	r2, [r3, #16]
 8002be0:	615a      	str	r2, [r3, #20]
 8002be2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002be4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c50 <MX_TIM12_Init+0x84>)
 8002be6:	4a1b      	ldr	r2, [pc, #108]	@ (8002c54 <MX_TIM12_Init+0x88>)
 8002be8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002bea:	4b19      	ldr	r3, [pc, #100]	@ (8002c50 <MX_TIM12_Init+0x84>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bf0:	4b17      	ldr	r3, [pc, #92]	@ (8002c50 <MX_TIM12_Init+0x84>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002bf6:	4b16      	ldr	r3, [pc, #88]	@ (8002c50 <MX_TIM12_Init+0x84>)
 8002bf8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002bfc:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bfe:	4b14      	ldr	r3, [pc, #80]	@ (8002c50 <MX_TIM12_Init+0x84>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c04:	4b12      	ldr	r3, [pc, #72]	@ (8002c50 <MX_TIM12_Init+0x84>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002c0a:	4811      	ldr	r0, [pc, #68]	@ (8002c50 <MX_TIM12_Init+0x84>)
 8002c0c:	f009 ffb8 	bl	800cb80 <HAL_TIM_PWM_Init>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002c16:	f000 fcc5 	bl	80035a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c1a:	2360      	movs	r3, #96	@ 0x60
 8002c1c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c26:	2300      	movs	r3, #0
 8002c28:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c2a:	1d3b      	adds	r3, r7, #4
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4807      	ldr	r0, [pc, #28]	@ (8002c50 <MX_TIM12_Init+0x84>)
 8002c32:	f00a f903 	bl	800ce3c <HAL_TIM_PWM_ConfigChannel>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002c3c:	f000 fcb2 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002c40:	4803      	ldr	r0, [pc, #12]	@ (8002c50 <MX_TIM12_Init+0x84>)
 8002c42:	f001 fb23 	bl	800428c <HAL_TIM_MspPostInit>

}
 8002c46:	bf00      	nop
 8002c48:	3720      	adds	r7, #32
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20000f08 	.word	0x20000f08
 8002c54:	40001800 	.word	0x40001800

08002c58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c5c:	4b14      	ldr	r3, [pc, #80]	@ (8002cb0 <MX_USART1_UART_Init+0x58>)
 8002c5e:	4a15      	ldr	r2, [pc, #84]	@ (8002cb4 <MX_USART1_UART_Init+0x5c>)
 8002c60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c62:	4b13      	ldr	r3, [pc, #76]	@ (8002cb0 <MX_USART1_UART_Init+0x58>)
 8002c64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c6a:	4b11      	ldr	r3, [pc, #68]	@ (8002cb0 <MX_USART1_UART_Init+0x58>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c70:	4b0f      	ldr	r3, [pc, #60]	@ (8002cb0 <MX_USART1_UART_Init+0x58>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c76:	4b0e      	ldr	r3, [pc, #56]	@ (8002cb0 <MX_USART1_UART_Init+0x58>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb0 <MX_USART1_UART_Init+0x58>)
 8002c7e:	220c      	movs	r2, #12
 8002c80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c82:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb0 <MX_USART1_UART_Init+0x58>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c88:	4b09      	ldr	r3, [pc, #36]	@ (8002cb0 <MX_USART1_UART_Init+0x58>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c8e:	4b08      	ldr	r3, [pc, #32]	@ (8002cb0 <MX_USART1_UART_Init+0x58>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c94:	4b06      	ldr	r3, [pc, #24]	@ (8002cb0 <MX_USART1_UART_Init+0x58>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c9a:	4805      	ldr	r0, [pc, #20]	@ (8002cb0 <MX_USART1_UART_Init+0x58>)
 8002c9c:	f00a ff9c 	bl	800dbd8 <HAL_UART_Init>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002ca6:	f000 fc7d 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000f54 	.word	0x20000f54
 8002cb4:	40011000 	.word	0x40011000

08002cb8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002cbc:	4b14      	ldr	r3, [pc, #80]	@ (8002d10 <MX_USART6_UART_Init+0x58>)
 8002cbe:	4a15      	ldr	r2, [pc, #84]	@ (8002d14 <MX_USART6_UART_Init+0x5c>)
 8002cc0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002cc2:	4b13      	ldr	r3, [pc, #76]	@ (8002d10 <MX_USART6_UART_Init+0x58>)
 8002cc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002cc8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002cca:	4b11      	ldr	r3, [pc, #68]	@ (8002d10 <MX_USART6_UART_Init+0x58>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8002d10 <MX_USART6_UART_Init+0x58>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8002d10 <MX_USART6_UART_Init+0x58>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8002d10 <MX_USART6_UART_Init+0x58>)
 8002cde:	220c      	movs	r2, #12
 8002ce0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8002d10 <MX_USART6_UART_Init+0x58>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ce8:	4b09      	ldr	r3, [pc, #36]	@ (8002d10 <MX_USART6_UART_Init+0x58>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cee:	4b08      	ldr	r3, [pc, #32]	@ (8002d10 <MX_USART6_UART_Init+0x58>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cf4:	4b06      	ldr	r3, [pc, #24]	@ (8002d10 <MX_USART6_UART_Init+0x58>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002cfa:	4805      	ldr	r0, [pc, #20]	@ (8002d10 <MX_USART6_UART_Init+0x58>)
 8002cfc:	f00a ff6c 	bl	800dbd8 <HAL_UART_Init>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002d06:	f000 fc4d 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002d0a:	bf00      	nop
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	20000fdc 	.word	0x20000fdc
 8002d14:	40011400 	.word	0x40011400

08002d18 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b088      	sub	sp, #32
 8002d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002d1e:	1d3b      	adds	r3, r7, #4
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	609a      	str	r2, [r3, #8]
 8002d28:	60da      	str	r2, [r3, #12]
 8002d2a:	611a      	str	r2, [r3, #16]
 8002d2c:	615a      	str	r2, [r3, #20]
 8002d2e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002d30:	4b1f      	ldr	r3, [pc, #124]	@ (8002db0 <MX_FMC_Init+0x98>)
 8002d32:	4a20      	ldr	r2, [pc, #128]	@ (8002db4 <MX_FMC_Init+0x9c>)
 8002d34:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002d36:	4b1e      	ldr	r3, [pc, #120]	@ (8002db0 <MX_FMC_Init+0x98>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002d3c:	4b1c      	ldr	r3, [pc, #112]	@ (8002db0 <MX_FMC_Init+0x98>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002d42:	4b1b      	ldr	r3, [pc, #108]	@ (8002db0 <MX_FMC_Init+0x98>)
 8002d44:	2204      	movs	r2, #4
 8002d46:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002d48:	4b19      	ldr	r3, [pc, #100]	@ (8002db0 <MX_FMC_Init+0x98>)
 8002d4a:	2210      	movs	r2, #16
 8002d4c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002d4e:	4b18      	ldr	r3, [pc, #96]	@ (8002db0 <MX_FMC_Init+0x98>)
 8002d50:	2240      	movs	r2, #64	@ 0x40
 8002d52:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002d54:	4b16      	ldr	r3, [pc, #88]	@ (8002db0 <MX_FMC_Init+0x98>)
 8002d56:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002d5a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002d5c:	4b14      	ldr	r3, [pc, #80]	@ (8002db0 <MX_FMC_Init+0x98>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002d62:	4b13      	ldr	r3, [pc, #76]	@ (8002db0 <MX_FMC_Init+0x98>)
 8002d64:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d68:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002d6a:	4b11      	ldr	r3, [pc, #68]	@ (8002db0 <MX_FMC_Init+0x98>)
 8002d6c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002d70:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002d72:	4b0f      	ldr	r3, [pc, #60]	@ (8002db0 <MX_FMC_Init+0x98>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002d78:	2302      	movs	r3, #2
 8002d7a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002d7c:	2307      	movs	r3, #7
 8002d7e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002d80:	2304      	movs	r3, #4
 8002d82:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002d84:	2307      	movs	r3, #7
 8002d86:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002d90:	2302      	movs	r3, #2
 8002d92:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002d94:	1d3b      	adds	r3, r7, #4
 8002d96:	4619      	mov	r1, r3
 8002d98:	4805      	ldr	r0, [pc, #20]	@ (8002db0 <MX_FMC_Init+0x98>)
 8002d9a:	f009 fce7 	bl	800c76c <HAL_SDRAM_Init>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002da4:	f000 fbfe 	bl	80035a4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002da8:	bf00      	nop
 8002daa:	3720      	adds	r7, #32
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	20001064 	.word	0x20001064
 8002db4:	a0000140 	.word	0xa0000140

08002db8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b090      	sub	sp, #64	@ 0x40
 8002dbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dbe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	605a      	str	r2, [r3, #4]
 8002dc8:	609a      	str	r2, [r3, #8]
 8002dca:	60da      	str	r2, [r3, #12]
 8002dcc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dce:	4bb0      	ldr	r3, [pc, #704]	@ (8003090 <MX_GPIO_Init+0x2d8>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd2:	4aaf      	ldr	r2, [pc, #700]	@ (8003090 <MX_GPIO_Init+0x2d8>)
 8002dd4:	f043 0310 	orr.w	r3, r3, #16
 8002dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dda:	4bad      	ldr	r3, [pc, #692]	@ (8003090 <MX_GPIO_Init+0x2d8>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dde:	f003 0310 	and.w	r3, r3, #16
 8002de2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002de6:	4baa      	ldr	r3, [pc, #680]	@ (8003090 <MX_GPIO_Init+0x2d8>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dea:	4aa9      	ldr	r2, [pc, #676]	@ (8003090 <MX_GPIO_Init+0x2d8>)
 8002dec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002df2:	4ba7      	ldr	r3, [pc, #668]	@ (8003090 <MX_GPIO_Init+0x2d8>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dfe:	4ba4      	ldr	r3, [pc, #656]	@ (8003090 <MX_GPIO_Init+0x2d8>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e02:	4aa3      	ldr	r2, [pc, #652]	@ (8003090 <MX_GPIO_Init+0x2d8>)
 8002e04:	f043 0302 	orr.w	r3, r3, #2
 8002e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e0a:	4ba1      	ldr	r3, [pc, #644]	@ (8003090 <MX_GPIO_Init+0x2d8>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	623b      	str	r3, [r7, #32]
 8002e14:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e16:	4b9e      	ldr	r3, [pc, #632]	@ (8003090 <MX_GPIO_Init+0x2d8>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1a:	4a9d      	ldr	r2, [pc, #628]	@ (8003090 <MX_GPIO_Init+0x2d8>)
 8002e1c:	f043 0308 	orr.w	r3, r3, #8
 8002e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e22:	4b9b      	ldr	r3, [pc, #620]	@ (8003090 <MX_GPIO_Init+0x2d8>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	61fb      	str	r3, [r7, #28]
 8002e2c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e2e:	4b98      	ldr	r3, [pc, #608]	@ (8003090 <MX_GPIO_Init+0x2d8>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e32:	4a97      	ldr	r2, [pc, #604]	@ (8003090 <MX_GPIO_Init+0x2d8>)
 8002e34:	f043 0304 	orr.w	r3, r3, #4
 8002e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e3a:	4b95      	ldr	r3, [pc, #596]	@ (8003090 <MX_GPIO_Init+0x2d8>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3e:	f003 0304 	and.w	r3, r3, #4
 8002e42:	61bb      	str	r3, [r7, #24]
 8002e44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e46:	4b92      	ldr	r3, [pc, #584]	@ (8003090 <MX_GPIO_Init+0x2d8>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4a:	4a91      	ldr	r2, [pc, #580]	@ (8003090 <MX_GPIO_Init+0x2d8>)
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e52:	4b8f      	ldr	r3, [pc, #572]	@ (8003090 <MX_GPIO_Init+0x2d8>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	617b      	str	r3, [r7, #20]
 8002e5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002e5e:	4b8c      	ldr	r3, [pc, #560]	@ (8003090 <MX_GPIO_Init+0x2d8>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e62:	4a8b      	ldr	r2, [pc, #556]	@ (8003090 <MX_GPIO_Init+0x2d8>)
 8002e64:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e6a:	4b89      	ldr	r3, [pc, #548]	@ (8003090 <MX_GPIO_Init+0x2d8>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e72:	613b      	str	r3, [r7, #16]
 8002e74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002e76:	4b86      	ldr	r3, [pc, #536]	@ (8003090 <MX_GPIO_Init+0x2d8>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7a:	4a85      	ldr	r2, [pc, #532]	@ (8003090 <MX_GPIO_Init+0x2d8>)
 8002e7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e82:	4b83      	ldr	r3, [pc, #524]	@ (8003090 <MX_GPIO_Init+0x2d8>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002e8e:	4b80      	ldr	r3, [pc, #512]	@ (8003090 <MX_GPIO_Init+0x2d8>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e92:	4a7f      	ldr	r2, [pc, #508]	@ (8003090 <MX_GPIO_Init+0x2d8>)
 8002e94:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e9a:	4b7d      	ldr	r3, [pc, #500]	@ (8003090 <MX_GPIO_Init+0x2d8>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ea2:	60bb      	str	r3, [r7, #8]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ea6:	4b7a      	ldr	r3, [pc, #488]	@ (8003090 <MX_GPIO_Init+0x2d8>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eaa:	4a79      	ldr	r2, [pc, #484]	@ (8003090 <MX_GPIO_Init+0x2d8>)
 8002eac:	f043 0320 	orr.w	r3, r3, #32
 8002eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eb2:	4b77      	ldr	r3, [pc, #476]	@ (8003090 <MX_GPIO_Init+0x2d8>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb6:	f003 0320 	and.w	r3, r3, #32
 8002eba:	607b      	str	r3, [r7, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ebe:	4b74      	ldr	r3, [pc, #464]	@ (8003090 <MX_GPIO_Init+0x2d8>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec2:	4a73      	ldr	r2, [pc, #460]	@ (8003090 <MX_GPIO_Init+0x2d8>)
 8002ec4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eca:	4b71      	ldr	r3, [pc, #452]	@ (8003090 <MX_GPIO_Init+0x2d8>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ed2:	603b      	str	r3, [r7, #0]
 8002ed4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	2120      	movs	r1, #32
 8002eda:	486e      	ldr	r0, [pc, #440]	@ (8003094 <MX_GPIO_Init+0x2dc>)
 8002edc:	f004 f956 	bl	800718c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	210c      	movs	r1, #12
 8002ee4:	486c      	ldr	r0, [pc, #432]	@ (8003098 <MX_GPIO_Init+0x2e0>)
 8002ee6:	f004 f951 	bl	800718c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002eea:	2201      	movs	r2, #1
 8002eec:	2108      	movs	r1, #8
 8002eee:	486b      	ldr	r0, [pc, #428]	@ (800309c <MX_GPIO_Init+0x2e4>)
 8002ef0:	f004 f94c 	bl	800718c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002efa:	4867      	ldr	r0, [pc, #412]	@ (8003098 <MX_GPIO_Init+0x2e0>)
 8002efc:	f004 f946 	bl	800718c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002f00:	2200      	movs	r2, #0
 8002f02:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002f06:	4866      	ldr	r0, [pc, #408]	@ (80030a0 <MX_GPIO_Init+0x2e8>)
 8002f08:	f004 f940 	bl	800718c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	21c8      	movs	r1, #200	@ 0xc8
 8002f10:	4864      	ldr	r0, [pc, #400]	@ (80030a4 <MX_GPIO_Init+0x2ec>)
 8002f12:	f004 f93b 	bl	800718c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002f16:	2308      	movs	r3, #8
 8002f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002f22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f26:	4619      	mov	r1, r3
 8002f28:	485f      	ldr	r0, [pc, #380]	@ (80030a8 <MX_GPIO_Init+0x2f0>)
 8002f2a:	f003 ff83 	bl	8006e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8002f2e:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8002f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f34:	2302      	movs	r3, #2
 8002f36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002f40:	230a      	movs	r3, #10
 8002f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4858      	ldr	r0, [pc, #352]	@ (80030ac <MX_GPIO_Init+0x2f4>)
 8002f4c:	f003 ff72 	bl	8006e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002f50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f56:	2300      	movs	r3, #0
 8002f58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002f5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f62:	4619      	mov	r1, r3
 8002f64:	4852      	ldr	r0, [pc, #328]	@ (80030b0 <MX_GPIO_Init+0x2f8>)
 8002f66:	f003 ff65 	bl	8006e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002f6a:	2340      	movs	r3, #64	@ 0x40
 8002f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002f6e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002f72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f74:	2300      	movs	r3, #0
 8002f76:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002f78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4845      	ldr	r0, [pc, #276]	@ (8003094 <MX_GPIO_Init+0x2dc>)
 8002f80:	f003 ff58 	bl	8006e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002f84:	2320      	movs	r3, #32
 8002f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f90:	2300      	movs	r3, #0
 8002f92:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002f94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f98:	4619      	mov	r1, r3
 8002f9a:	483e      	ldr	r0, [pc, #248]	@ (8003094 <MX_GPIO_Init+0x2dc>)
 8002f9c:	f003 ff4a 	bl	8006e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8002fa0:	f241 030c 	movw	r3, #4108	@ 0x100c
 8002fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002fb2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4837      	ldr	r0, [pc, #220]	@ (8003098 <MX_GPIO_Init+0x2e0>)
 8002fba:	f003 ff3b 	bl	8006e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002fbe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002fcc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4838      	ldr	r0, [pc, #224]	@ (80030b4 <MX_GPIO_Init+0x2fc>)
 8002fd4:	f003 ff2e 	bl	8006e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002fd8:	2308      	movs	r3, #8
 8002fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002fe8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fec:	4619      	mov	r1, r3
 8002fee:	482b      	ldr	r0, [pc, #172]	@ (800309c <MX_GPIO_Init+0x2e4>)
 8002ff0:	f003 ff20 	bl	8006e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002ff4:	2310      	movs	r3, #16
 8002ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003000:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003004:	4619      	mov	r1, r3
 8003006:	4823      	ldr	r0, [pc, #140]	@ (8003094 <MX_GPIO_Init+0x2dc>)
 8003008:	f003 ff14 	bl	8006e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800300c:	f248 0304 	movw	r3, #32772	@ 0x8004
 8003010:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003012:	2300      	movs	r3, #0
 8003014:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003016:	2300      	movs	r3, #0
 8003018:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800301a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800301e:	4619      	mov	r1, r3
 8003020:	481f      	ldr	r0, [pc, #124]	@ (80030a0 <MX_GPIO_Init+0x2e8>)
 8003022:	f003 ff07 	bl	8006e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8003026:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800302a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800302c:	2301      	movs	r3, #1
 800302e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003030:	2300      	movs	r3, #0
 8003032:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003034:	2300      	movs	r3, #0
 8003036:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8003038:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800303c:	4619      	mov	r1, r3
 800303e:	4818      	ldr	r0, [pc, #96]	@ (80030a0 <MX_GPIO_Init+0x2e8>)
 8003040:	f003 fef8 	bl	8006e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8003044:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003048:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800304a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800304e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003050:	2300      	movs	r3, #0
 8003052:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8003054:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003058:	4619      	mov	r1, r3
 800305a:	480f      	ldr	r0, [pc, #60]	@ (8003098 <MX_GPIO_Init+0x2e0>)
 800305c:	f003 feea 	bl	8006e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8003060:	2310      	movs	r3, #16
 8003062:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003064:	2302      	movs	r3, #2
 8003066:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003068:	2300      	movs	r3, #0
 800306a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800306c:	2303      	movs	r3, #3
 800306e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003070:	230a      	movs	r3, #10
 8003072:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8003074:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003078:	4619      	mov	r1, r3
 800307a:	4809      	ldr	r0, [pc, #36]	@ (80030a0 <MX_GPIO_Init+0x2e8>)
 800307c:	f003 feda 	bl	8006e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8003080:	23c8      	movs	r3, #200	@ 0xc8
 8003082:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003084:	2301      	movs	r3, #1
 8003086:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003088:	2300      	movs	r3, #0
 800308a:	637b      	str	r3, [r7, #52]	@ 0x34
 800308c:	e014      	b.n	80030b8 <MX_GPIO_Init+0x300>
 800308e:	bf00      	nop
 8003090:	40023800 	.word	0x40023800
 8003094:	40020c00 	.word	0x40020c00
 8003098:	40022000 	.word	0x40022000
 800309c:	40022800 	.word	0x40022800
 80030a0:	40021c00 	.word	0x40021c00
 80030a4:	40021800 	.word	0x40021800
 80030a8:	40021000 	.word	0x40021000
 80030ac:	40020400 	.word	0x40020400
 80030b0:	40022400 	.word	0x40022400
 80030b4:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b8:	2300      	movs	r3, #0
 80030ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80030bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030c0:	4619      	mov	r1, r3
 80030c2:	4819      	ldr	r0, [pc, #100]	@ (8003128 <MX_GPIO_Init+0x370>)
 80030c4:	f003 feb6 	bl	8006e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80030c8:	2305      	movs	r3, #5
 80030ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030cc:	2302      	movs	r3, #2
 80030ce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d0:	2300      	movs	r3, #0
 80030d2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d4:	2303      	movs	r3, #3
 80030d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80030d8:	230a      	movs	r3, #10
 80030da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030e0:	4619      	mov	r1, r3
 80030e2:	4812      	ldr	r0, [pc, #72]	@ (800312c <MX_GPIO_Init+0x374>)
 80030e4:	f003 fea6 	bl	8006e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80030e8:	2304      	movs	r3, #4
 80030ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030ec:	2300      	movs	r3, #0
 80030ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f0:	2300      	movs	r3, #0
 80030f2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80030f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030f8:	4619      	mov	r1, r3
 80030fa:	480b      	ldr	r0, [pc, #44]	@ (8003128 <MX_GPIO_Init+0x370>)
 80030fc:	f003 fe9a 	bl	8006e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8003100:	2328      	movs	r3, #40	@ 0x28
 8003102:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003104:	2302      	movs	r3, #2
 8003106:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003108:	2300      	movs	r3, #0
 800310a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800310c:	2303      	movs	r3, #3
 800310e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003110:	230a      	movs	r3, #10
 8003112:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003114:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003118:	4619      	mov	r1, r3
 800311a:	4805      	ldr	r0, [pc, #20]	@ (8003130 <MX_GPIO_Init+0x378>)
 800311c:	f003 fe8a 	bl	8006e34 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003120:	bf00      	nop
 8003122:	3740      	adds	r7, #64	@ 0x40
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40021800 	.word	0x40021800
 800312c:	40020800 	.word	0x40020800
 8003130:	40020000 	.word	0x40020000

08003134 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b0b6      	sub	sp, #216	@ 0xd8
 8003138:	af02      	add	r7, sp, #8
 800313a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST - 임시 비활성화 (SD 카드 테스트용) */
  LOG_WARN("USB Host initialization temporarily disabled to avoid RTOS task conflicts");
 800313c:	49c9      	ldr	r1, [pc, #804]	@ (8003464 <StartDefaultTask+0x330>)
 800313e:	2002      	movs	r0, #2
 8003140:	f001 fcd4 	bl	8004aec <LOGGER_SendFormatted>
  LOG_INFO("This eliminates USBH_Thread vs defaultTask priority conflicts");
 8003144:	49c8      	ldr	r1, [pc, #800]	@ (8003468 <StartDefaultTask+0x334>)
 8003146:	2001      	movs	r0, #1
 8003148:	f001 fcd0 	bl	8004aec <LOGGER_SendFormatted>
  // MX_USB_HOST_Init();  // SD 카드 테스트 완료 후 재활성화 예정
  /* USER CODE BEGIN 5 */
  
  // SD Card 초기화는 이미 main()에서 우선 완료됨
  LOG_INFO("📋 SD card initialization completed in main() - checking status...");
 800314c:	49c7      	ldr	r1, [pc, #796]	@ (800346c <StartDefaultTask+0x338>)
 800314e:	2001      	movs	r0, #1
 8003150:	f001 fccc 	bl	8004aec <LOGGER_SendFormatted>
  
  LOG_INFO("=== STM32F746G-DISCO UART6 Test Started ===");
 8003154:	49c6      	ldr	r1, [pc, #792]	@ (8003470 <StartDefaultTask+0x33c>)
 8003156:	2001      	movs	r0, #1
 8003158:	f001 fcc8 	bl	8004aec <LOGGER_SendFormatted>
  LOG_INFO("System Clock: %lu MHz", SystemCoreClock / 1000000);
 800315c:	4bc5      	ldr	r3, [pc, #788]	@ (8003474 <StartDefaultTask+0x340>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4ac5      	ldr	r2, [pc, #788]	@ (8003478 <StartDefaultTask+0x344>)
 8003162:	fba2 2303 	umull	r2, r3, r2, r3
 8003166:	0c9b      	lsrs	r3, r3, #18
 8003168:	461a      	mov	r2, r3
 800316a:	49c4      	ldr	r1, [pc, #784]	@ (800347c <StartDefaultTask+0x348>)
 800316c:	2001      	movs	r0, #1
 800316e:	f001 fcbd 	bl	8004aec <LOGGER_SendFormatted>
  LOG_INFO("UART6 Configuration: 115200 baud, 8N1");
 8003172:	49c3      	ldr	r1, [pc, #780]	@ (8003480 <StartDefaultTask+0x34c>)
 8003174:	2001      	movs	r0, #1
 8003176:	f001 fcb9 	bl	8004aec <LOGGER_SendFormatted>
  LOG_INFO("📌 CRITICAL: For loopback test, connect PC6(TX) to PC7(RX) with a wire!");
 800317a:	49c2      	ldr	r1, [pc, #776]	@ (8003484 <StartDefaultTask+0x350>)
 800317c:	2001      	movs	r0, #1
 800317e:	f001 fcb5 	bl	8004aec <LOGGER_SendFormatted>
  LOG_INFO("📌 UART6 Pins: PC6(TX) = Arduino D1, PC7(RX) = Arduino D0");
 8003182:	49c1      	ldr	r1, [pc, #772]	@ (8003488 <StartDefaultTask+0x354>)
 8003184:	2001      	movs	r0, #1
 8003186:	f001 fcb1 	bl	8004aec <LOGGER_SendFormatted>
  
  // SD 카드 기본 기능 테스트 (Default Task에서 수행)
  LOG_INFO("📤 [TX_TASK] Starting SD card basic functionality test...");
 800318a:	49c0      	ldr	r1, [pc, #768]	@ (800348c <StartDefaultTask+0x358>)
 800318c:	2001      	movs	r0, #1
 800318e:	f001 fcad 	bl	8004aec <LOGGER_SendFormatted>
  
  // SD 초기화 시도
  LOG_INFO("📤 [TX_TASK] Attempting SD card initialization...");
 8003192:	49bf      	ldr	r1, [pc, #764]	@ (8003490 <StartDefaultTask+0x35c>)
 8003194:	2001      	movs	r0, #1
 8003196:	f001 fca9 	bl	8004aec <LOGGER_SendFormatted>
  g_sd_initialization_result = SDStorage_Init();
 800319a:	f7fd ffa1 	bl	80010e0 <SDStorage_Init>
 800319e:	4603      	mov	r3, r0
 80031a0:	4abc      	ldr	r2, [pc, #752]	@ (8003494 <StartDefaultTask+0x360>)
 80031a2:	6013      	str	r3, [r2, #0]
  
  if (g_sd_initialization_result == SDSTORAGE_OK) {
 80031a4:	4bbb      	ldr	r3, [pc, #748]	@ (8003494 <StartDefaultTask+0x360>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d12a      	bne.n	8003202 <StartDefaultTask+0xce>
    LOG_INFO("✅ [TX_TASK] SD card initialization SUCCESS");
 80031ac:	49ba      	ldr	r1, [pc, #744]	@ (8003498 <StartDefaultTask+0x364>)
 80031ae:	2001      	movs	r0, #1
 80031b0:	f001 fc9c 	bl	8004aec <LOGGER_SendFormatted>
    
    // 기본 쓰기 테스트
    LOG_INFO("📤 [TX_TASK] Testing SD card write operation...");
 80031b4:	49b9      	ldr	r1, [pc, #740]	@ (800349c <StartDefaultTask+0x368>)
 80031b6:	2001      	movs	r0, #1
 80031b8:	f001 fc98 	bl	8004aec <LOGGER_SendFormatted>
    const char* test_message = "SD Card Test - Hello World from FreeRTOS!\n";
 80031bc:	4bb8      	ldr	r3, [pc, #736]	@ (80034a0 <StartDefaultTask+0x36c>)
 80031be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    int write_result = SDStorage_WriteLog(test_message, strlen(test_message));
 80031c2:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 80031c6:	f7fd f82d 	bl	8000224 <strlen>
 80031ca:	4603      	mov	r3, r0
 80031cc:	4619      	mov	r1, r3
 80031ce:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 80031d2:	f7fe f95d 	bl	8001490 <SDStorage_WriteLog>
 80031d6:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
    
    if (write_result == SDSTORAGE_OK) {
 80031da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d108      	bne.n	80031f4 <StartDefaultTask+0xc0>
      LOG_INFO("✅ [TX_TASK] SD card write operation SUCCESS");
 80031e2:	49b0      	ldr	r1, [pc, #704]	@ (80034a4 <StartDefaultTask+0x370>)
 80031e4:	2001      	movs	r0, #1
 80031e6:	f001 fc81 	bl	8004aec <LOGGER_SendFormatted>
      LOG_INFO("🎉 [TX_TASK] SD card functionality confirmed - ready for long-term logging");
 80031ea:	49af      	ldr	r1, [pc, #700]	@ (80034a8 <StartDefaultTask+0x374>)
 80031ec:	2001      	movs	r0, #1
 80031ee:	f001 fc7d 	bl	8004aec <LOGGER_SendFormatted>
 80031f2:	e011      	b.n	8003218 <StartDefaultTask+0xe4>
    } else {
      LOG_ERROR("❌ [TX_TASK] SD card write operation FAILED (code: %d)", write_result);
 80031f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80031f8:	49ac      	ldr	r1, [pc, #688]	@ (80034ac <StartDefaultTask+0x378>)
 80031fa:	2003      	movs	r0, #3
 80031fc:	f001 fc76 	bl	8004aec <LOGGER_SendFormatted>
 8003200:	e00a      	b.n	8003218 <StartDefaultTask+0xe4>
    }
  } else {
    LOG_ERROR("❌ [TX_TASK] SD card initialization FAILED (code: %d)", g_sd_initialization_result);
 8003202:	4ba4      	ldr	r3, [pc, #656]	@ (8003494 <StartDefaultTask+0x360>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	461a      	mov	r2, r3
 8003208:	49a9      	ldr	r1, [pc, #676]	@ (80034b0 <StartDefaultTask+0x37c>)
 800320a:	2003      	movs	r0, #3
 800320c:	f001 fc6e 	bl	8004aec <LOGGER_SendFormatted>
    LOG_INFO("📺 [TX_TASK] Continuing with terminal-only logging");
 8003210:	49a8      	ldr	r1, [pc, #672]	@ (80034b4 <StartDefaultTask+0x380>)
 8003212:	2001      	movs	r0, #1
 8003214:	f001 fc6a 	bl	8004aec <LOGGER_SendFormatted>
  }

  // SD 카드 테스트 완료 - 간단한 주기적 SD 로깅 테스트
  LOG_INFO("📤 [TX_TASK] Starting periodic SD logging test...");
 8003218:	49a7      	ldr	r1, [pc, #668]	@ (80034b8 <StartDefaultTask+0x384>)
 800321a:	2001      	movs	r0, #1
 800321c:	f001 fc66 	bl	8004aec <LOGGER_SendFormatted>
  
  int test_counter = 0;
 8003220:	2300      	movs	r3, #0
 8003222:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  
  for(;;) {
    test_counter++;
 8003226:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800322a:	3301      	adds	r3, #1
 800322c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    
    if (g_sd_initialization_result == SDSTORAGE_OK) {
 8003230:	4b98      	ldr	r3, [pc, #608]	@ (8003494 <StartDefaultTask+0x360>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d12d      	bne.n	8003294 <StartDefaultTask+0x160>
      // SD 카드에 주기적으로 로그 작성
      char test_log[128];
      snprintf(test_log, sizeof(test_log), 
 8003238:	f001 ff96 	bl	8005168 <HAL_GetTick>
 800323c:	4603      	mov	r3, r0
 800323e:	f107 0008 	add.w	r0, r7, #8
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003248:	4a9c      	ldr	r2, [pc, #624]	@ (80034bc <StartDefaultTask+0x388>)
 800324a:	2180      	movs	r1, #128	@ 0x80
 800324c:	f012 f960 	bl	8015510 <sniprintf>
               "Periodic test #%d - Time: %lu ms\n", 
               test_counter, HAL_GetTick());
      
      int write_result = SDStorage_WriteLog(test_log, strlen(test_log));
 8003250:	f107 0308 	add.w	r3, r7, #8
 8003254:	4618      	mov	r0, r3
 8003256:	f7fc ffe5 	bl	8000224 <strlen>
 800325a:	4602      	mov	r2, r0
 800325c:	f107 0308 	add.w	r3, r7, #8
 8003260:	4611      	mov	r1, r2
 8003262:	4618      	mov	r0, r3
 8003264:	f7fe f914 	bl	8001490 <SDStorage_WriteLog>
 8003268:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
      if (write_result == SDSTORAGE_OK) {
 800326c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003270:	2b00      	cmp	r3, #0
 8003272:	d106      	bne.n	8003282 <StartDefaultTask+0x14e>
        LOG_INFO("✅ [TX_TASK] Periodic SD write #%d SUCCESS", test_counter);
 8003274:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8003278:	4991      	ldr	r1, [pc, #580]	@ (80034c0 <StartDefaultTask+0x38c>)
 800327a:	2001      	movs	r0, #1
 800327c:	f001 fc36 	bl	8004aec <LOGGER_SendFormatted>
 8003280:	e00e      	b.n	80032a0 <StartDefaultTask+0x16c>
      } else {
        LOG_ERROR("❌ [TX_TASK] Periodic SD write #%d FAILED (code: %d)", 
 8003282:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003286:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800328a:	498e      	ldr	r1, [pc, #568]	@ (80034c4 <StartDefaultTask+0x390>)
 800328c:	2003      	movs	r0, #3
 800328e:	f001 fc2d 	bl	8004aec <LOGGER_SendFormatted>
 8003292:	e005      	b.n	80032a0 <StartDefaultTask+0x16c>
                  test_counter, write_result);
      }
    } else {
      LOG_INFO("📺 [TX_TASK] Terminal log #%d - SD not available", test_counter);
 8003294:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8003298:	498b      	ldr	r1, [pc, #556]	@ (80034c8 <StartDefaultTask+0x394>)
 800329a:	2001      	movs	r0, #1
 800329c:	f001 fc26 	bl	8004aec <LOGGER_SendFormatted>
    }
    
    // 30초 간격으로 테스트
    osDelay(30000);
 80032a0:	f247 5030 	movw	r0, #30000	@ 0x7530
 80032a4:	f00f fefe 	bl	80130a4 <osDelay>
    
    // 10회 테스트 후 종료
    if (test_counter >= 10) {
 80032a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80032ac:	2b09      	cmp	r3, #9
 80032ae:	ddba      	ble.n	8003226 <StartDefaultTask+0xf2>
      LOG_INFO("🎉 [TX_TASK] SD card testing completed (10 cycles)");
 80032b0:	4986      	ldr	r1, [pc, #536]	@ (80034cc <StartDefaultTask+0x398>)
 80032b2:	2001      	movs	r0, #1
 80032b4:	f001 fc1a 	bl	8004aec <LOGGER_SendFormatted>
      break;
 80032b8:	bf00      	nop
    }
  }
  
  LOG_INFO("📤 [TX_TASK] Starting LoRa initialization and JOIN...");
 80032ba:	4985      	ldr	r1, [pc, #532]	@ (80034d0 <StartDefaultTask+0x39c>)
 80032bc:	2001      	movs	r0, #1
 80032be:	f001 fc15 	bl	8004aec <LOGGER_SendFormatted>
  LOG_INFO("📤 [TX_TASK] Waiting for LoRa module boot-up (5 seconds - optimized for long-term test)...");
 80032c2:	4984      	ldr	r1, [pc, #528]	@ (80034d4 <StartDefaultTask+0x3a0>)
 80032c4:	2001      	movs	r0, #1
 80032c6:	f001 fc11 	bl	8004aec <LOGGER_SendFormatted>
  osDelay(5000); // 5초 대기 (장기 테스트를 위해 단축)
 80032ca:	f241 3088 	movw	r0, #5000	@ 0x1388
 80032ce:	f00f fee9 	bl	80130a4 <osDelay>
  
  // LoraStarter 컨텍스트 초기화 (TDD 검증된 기본 설정 사용)
  LoraStarterContext lora_ctx;
  LoraStarter_InitWithDefaults(&lora_ctx, "TEST");
 80032d2:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80032d6:	4980      	ldr	r1, [pc, #512]	@ (80034d8 <StartDefaultTask+0x3a4>)
 80032d8:	4618      	mov	r0, r3
 80032da:	f7fd fa5d 	bl	8000798 <LoraStarter_InitWithDefaults>
  
  LOG_INFO("=== LoRa Initialization ===");
 80032de:	497f      	ldr	r1, [pc, #508]	@ (80034dc <StartDefaultTask+0x3a8>)
 80032e0:	2001      	movs	r0, #1
 80032e2:	f001 fc03 	bl	8004aec <LOGGER_SendFormatted>
  LOG_INFO("📤 Commands: %d, Message: %s, Max retries: %d", 
 80032e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80032ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80032ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	460b      	mov	r3, r1
 80032f6:	497a      	ldr	r1, [pc, #488]	@ (80034e0 <StartDefaultTask+0x3ac>)
 80032f8:	2001      	movs	r0, #1
 80032fa:	f001 fbf7 	bl	8004aec <LOGGER_SendFormatted>
           lora_ctx.num_commands, lora_ctx.send_message, lora_ctx.max_retry_count);
           
  // SD 테스트 건너뛰기 - 장기 테스트를 위한 블로킹 방지
  LOG_INFO("📤 [TX_TASK] SD card tests bypassed for long-term stability");
 80032fe:	4979      	ldr	r1, [pc, #484]	@ (80034e4 <StartDefaultTask+0x3b0>)
 8003300:	2001      	movs	r0, #1
 8003302:	f001 fbf3 	bl	8004aec <LOGGER_SendFormatted>
      LOG_INFO("🗂️ LoRa logs location: lora_logs/ directory on SD card");
    } else {
      LOG_WARN("⚠️ SD logging setup failed (code: %d) - using terminal only", network_result);
    }
  } else {
    LOG_INFO("📺 LoRa logs will be displayed on terminal only (SD not available)");
 8003306:	4978      	ldr	r1, [pc, #480]	@ (80034e8 <StartDefaultTask+0x3b4>)
 8003308:	2001      	movs	r0, #1
 800330a:	f001 fbef 	bl	8004aec <LOGGER_SendFormatted>
  }
  
  // LoRa 시작 전: 로깅 모드 전환 (터미널 → SD 전용)
  LOG_INFO("🔄 Switching to SD-only logging for LoRa operations...");
 800330e:	4977      	ldr	r1, [pc, #476]	@ (80034ec <StartDefaultTask+0x3b8>)
 8003310:	2001      	movs	r0, #1
 8003312:	f001 fbeb 	bl	8004aec <LOGGER_SendFormatted>
  LOG_INFO("🎯 Only WARN/ERROR level logs will be saved to SD card");
 8003316:	4976      	ldr	r1, [pc, #472]	@ (80034f0 <StartDefaultTask+0x3bc>)
 8003318:	2001      	movs	r0, #1
 800331a:	f001 fbe7 	bl	8004aec <LOGGER_SendFormatted>
  
  // SD 태스크 상태에 따라 로깅 모드 동적 결정 (나중에 SD 준비되면 자동 전환)
  if (g_sd_logging_active) {
 800331e:	4b75      	ldr	r3, [pc, #468]	@ (80034f4 <StartDefaultTask+0x3c0>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00a      	beq.n	800333c <StartDefaultTask+0x208>
    LOGGER_SetMode(LOGGER_MODE_DUAL);
 8003326:	2002      	movs	r0, #2
 8003328:	f001 fbbc 	bl	8004aa4 <LOGGER_SetMode>
    LOGGER_SetFilterLevel(LOG_LEVEL_WARN);  // SD에는 WARN 이상만 저장
 800332c:	2002      	movs	r0, #2
 800332e:	f001 fba9 	bl	8004a84 <LOGGER_SetFilterLevel>
    LOG_WARN("✅ Logger switched to DUAL mode (Terminal + SD async)");
 8003332:	4971      	ldr	r1, [pc, #452]	@ (80034f8 <StartDefaultTask+0x3c4>)
 8003334:	2002      	movs	r0, #2
 8003336:	f001 fbd9 	bl	8004aec <LOGGER_SendFormatted>
 800333a:	e009      	b.n	8003350 <StartDefaultTask+0x21c>
  } else {
    LOGGER_SetMode(LOGGER_MODE_TERMINAL_ONLY);
 800333c:	2000      	movs	r0, #0
 800333e:	f001 fbb1 	bl	8004aa4 <LOGGER_SetMode>
    LOGGER_SetFilterLevel(LOG_LEVEL_INFO);
 8003342:	2001      	movs	r0, #1
 8003344:	f001 fb9e 	bl	8004a84 <LOGGER_SetFilterLevel>
    LOG_INFO("📺 Logger starting in terminal-only mode (SD init in progress)");
 8003348:	496c      	ldr	r1, [pc, #432]	@ (80034fc <StartDefaultTask+0x3c8>)
 800334a:	2001      	movs	r0, #1
 800334c:	f001 fbce 	bl	8004aec <LOGGER_SendFormatted>
  
  // LoRa 프로세스 루프 (초기화 → JOIN → 주기적 전송)
  for(;;)
  {
    // 수신된 응답이 있으면 LoraStarter에 전달
    const char* rx_data = NULL;
 8003350:	2300      	movs	r3, #0
 8003352:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (lora_new_response) {
 8003356:	4b6a      	ldr	r3, [pc, #424]	@ (8003500 <StartDefaultTask+0x3cc>)
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00b      	beq.n	8003378 <StartDefaultTask+0x244>
      rx_data = lora_rx_response;
 8003360:	4b68      	ldr	r3, [pc, #416]	@ (8003504 <StartDefaultTask+0x3d0>)
 8003362:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      lora_new_response = false; // 플래그 클리어
 8003366:	4b66      	ldr	r3, [pc, #408]	@ (8003500 <StartDefaultTask+0x3cc>)
 8003368:	2200      	movs	r2, #0
 800336a:	701a      	strb	r2, [r3, #0]
      LOG_DEBUG("[TX_TASK] Processing LoRa response: %.20s...", rx_data);
 800336c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003370:	4965      	ldr	r1, [pc, #404]	@ (8003508 <StartDefaultTask+0x3d4>)
 8003372:	2000      	movs	r0, #0
 8003374:	f001 fbba 	bl	8004aec <LOGGER_SendFormatted>
    }
    
    // LoraStarter 프로세스 실행
    LoraStarter_Process(&lora_ctx, rx_data);
 8003378:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800337c:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 8003380:	4618      	mov	r0, r3
 8003382:	f7fd fa51 	bl	8000828 <LoraStarter_Process>
    
    // 상태별 처리 간격 및 디버깅
    LOG_DEBUG("[TX_TASK] LoRa State: %d, cmd_index: %d/%d", 
 8003386:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800338a:	4619      	mov	r1, r3
 800338c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003390:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	4613      	mov	r3, r2
 8003398:	460a      	mov	r2, r1
 800339a:	495c      	ldr	r1, [pc, #368]	@ (800350c <StartDefaultTask+0x3d8>)
 800339c:	2000      	movs	r0, #0
 800339e:	f001 fba5 	bl	8004aec <LOGGER_SendFormatted>
              lora_ctx.state, lora_ctx.cmd_index, lora_ctx.num_commands);
    
    switch(lora_ctx.state) {
 80033a2:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 80033a6:	2b0a      	cmp	r3, #10
 80033a8:	f200 80c9 	bhi.w	800353e <StartDefaultTask+0x40a>
 80033ac:	a201      	add	r2, pc, #4	@ (adr r2, 80033b4 <StartDefaultTask+0x280>)
 80033ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b2:	bf00      	nop
 80033b4:	080033e1 	.word	0x080033e1
 80033b8:	080033eb 	.word	0x080033eb
 80033bc:	08003407 	.word	0x08003407
 80033c0:	08003421 	.word	0x08003421
 80033c4:	0800342b 	.word	0x0800342b
 80033c8:	08003421 	.word	0x08003421
 80033cc:	0800342b 	.word	0x0800342b
 80033d0:	08003435 	.word	0x08003435
 80033d4:	0800344d 	.word	0x0800344d
 80033d8:	08003457 	.word	0x08003457
 80033dc:	08003457 	.word	0x08003457
      case LORA_STATE_INIT:
        osDelay(500); // 초기화 상태는 빠르게
 80033e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80033e4:	f00f fe5e 	bl	80130a4 <osDelay>
        break;
 80033e8:	e0ae      	b.n	8003548 <StartDefaultTask+0x414>
      case LORA_STATE_SEND_CMD:
        LOG_INFO("[TX_TASK] 📤 Sending command %d/%d", 
 80033ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033ee:	1c5a      	adds	r2, r3, #1
 80033f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033f4:	4946      	ldr	r1, [pc, #280]	@ (8003510 <StartDefaultTask+0x3dc>)
 80033f6:	2001      	movs	r0, #1
 80033f8:	f001 fb78 	bl	8004aec <LOGGER_SendFormatted>
                lora_ctx.cmd_index + 1, lora_ctx.num_commands);
        osDelay(1000); // 명령어 전송 후 1초 대기
 80033fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003400:	f00f fe50 	bl	80130a4 <osDelay>
        break;
 8003404:	e0a0      	b.n	8003548 <StartDefaultTask+0x414>
      case LORA_STATE_WAIT_OK:
        LOG_DEBUG("[TX_TASK] ⏳ Waiting for OK response to command %d", 
 8003406:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800340a:	3301      	adds	r3, #1
 800340c:	461a      	mov	r2, r3
 800340e:	4941      	ldr	r1, [pc, #260]	@ (8003514 <StartDefaultTask+0x3e0>)
 8003410:	2000      	movs	r0, #0
 8003412:	f001 fb6b 	bl	8004aec <LOGGER_SendFormatted>
                 lora_ctx.cmd_index + 1);
        osDelay(2000); // OK 응답 대기 중 2초 간격
 8003416:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800341a:	f00f fe43 	bl	80130a4 <osDelay>
        break;
 800341e:	e093      	b.n	8003548 <StartDefaultTask+0x414>
      case LORA_STATE_SEND_JOIN:
      case LORA_STATE_SEND_PERIODIC:
        osDelay(2000); // JOIN/SEND 명령어 전송 후 2초 대기
 8003420:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003424:	f00f fe3e 	bl	80130a4 <osDelay>
        break;
 8003428:	e08e      	b.n	8003548 <StartDefaultTask+0x414>
      case LORA_STATE_WAIT_JOIN_OK:
      case LORA_STATE_WAIT_SEND_RESPONSE:
        osDelay(3000); // JOIN/SEND 응답 대기 중 3초 간격
 800342a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800342e:	f00f fe39 	bl	80130a4 <osDelay>
        break;
 8003432:	e089      	b.n	8003548 <StartDefaultTask+0x414>
      case LORA_STATE_WAIT_SEND_INTERVAL:
        LOG_DEBUG("[TX_TASK] ⏳ Waiting for send interval (%u ms)", lora_ctx.send_interval_ms);
 8003434:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003438:	461a      	mov	r2, r3
 800343a:	4937      	ldr	r1, [pc, #220]	@ (8003518 <StartDefaultTask+0x3e4>)
 800343c:	2000      	movs	r0, #0
 800343e:	f001 fb55 	bl	8004aec <LOGGER_SendFormatted>
        osDelay(5000); // 주기적 전송 대기 중 5초 간격으로 체크
 8003442:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003446:	f00f fe2d 	bl	80130a4 <osDelay>
        break;
 800344a:	e07d      	b.n	8003548 <StartDefaultTask+0x414>
      case LORA_STATE_JOIN_RETRY:
        osDelay(5000); // 재시도 대기 5초
 800344c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003450:	f00f fe28 	bl	80130a4 <osDelay>
        break;
 8003454:	e078      	b.n	8003548 <StartDefaultTask+0x414>
      case LORA_STATE_DONE:
      case LORA_STATE_ERROR:
        LOG_INFO("📤 [TX_TASK] LoRa process completed with state: %s", 
 8003456:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800345a:	2b09      	cmp	r3, #9
 800345c:	d160      	bne.n	8003520 <StartDefaultTask+0x3ec>
 800345e:	4b2f      	ldr	r3, [pc, #188]	@ (800351c <StartDefaultTask+0x3e8>)
 8003460:	e05f      	b.n	8003522 <StartDefaultTask+0x3ee>
 8003462:	bf00      	nop
 8003464:	08018014 	.word	0x08018014
 8003468:	08018060 	.word	0x08018060
 800346c:	080180a0 	.word	0x080180a0
 8003470:	080180e8 	.word	0x080180e8
 8003474:	20000018 	.word	0x20000018
 8003478:	431bde83 	.word	0x431bde83
 800347c:	08018114 	.word	0x08018114
 8003480:	0801812c 	.word	0x0801812c
 8003484:	08018154 	.word	0x08018154
 8003488:	080181a0 	.word	0x080181a0
 800348c:	080181dc 	.word	0x080181dc
 8003490:	08018218 	.word	0x08018218
 8003494:	20000014 	.word	0x20000014
 8003498:	0801824c 	.word	0x0801824c
 800349c:	0801827c 	.word	0x0801827c
 80034a0:	080182b0 	.word	0x080182b0
 80034a4:	080182dc 	.word	0x080182dc
 80034a8:	0801830c 	.word	0x0801830c
 80034ac:	0801835c 	.word	0x0801835c
 80034b0:	08018394 	.word	0x08018394
 80034b4:	080183cc 	.word	0x080183cc
 80034b8:	08018404 	.word	0x08018404
 80034bc:	08018438 	.word	0x08018438
 80034c0:	0801845c 	.word	0x0801845c
 80034c4:	08018488 	.word	0x08018488
 80034c8:	080184c0 	.word	0x080184c0
 80034cc:	080184f4 	.word	0x080184f4
 80034d0:	0801852c 	.word	0x0801852c
 80034d4:	08018564 	.word	0x08018564
 80034d8:	080185c4 	.word	0x080185c4
 80034dc:	080185cc 	.word	0x080185cc
 80034e0:	080185e8 	.word	0x080185e8
 80034e4:	08018618 	.word	0x08018618
 80034e8:	08018658 	.word	0x08018658
 80034ec:	080186a0 	.word	0x080186a0
 80034f0:	080186dc 	.word	0x080186dc
 80034f4:	200010a0 	.word	0x200010a0
 80034f8:	08018718 	.word	0x08018718
 80034fc:	08018750 	.word	0x08018750
 8003500:	200012a4 	.word	0x200012a4
 8003504:	200010a4 	.word	0x200010a4
 8003508:	08018794 	.word	0x08018794
 800350c:	080187c4 	.word	0x080187c4
 8003510:	080187f0 	.word	0x080187f0
 8003514:	08018818 	.word	0x08018818
 8003518:	0801884c 	.word	0x0801884c
 800351c:	0801887c 	.word	0x0801887c
 8003520:	4b13      	ldr	r3, [pc, #76]	@ (8003570 <StartDefaultTask+0x43c>)
 8003522:	461a      	mov	r2, r3
 8003524:	4913      	ldr	r1, [pc, #76]	@ (8003574 <StartDefaultTask+0x440>)
 8003526:	2001      	movs	r0, #1
 8003528:	f001 fae0 	bl	8004aec <LOGGER_SendFormatted>
                lora_ctx.state == LORA_STATE_DONE ? "DONE" : "ERROR");
        goto idle_loop;
 800352c:	bf00      	nop
    }
  }

idle_loop:
  /* Infinite idle loop */
  LOG_INFO("📤 [TX_TASK] Entering idle mode...");
 800352e:	4912      	ldr	r1, [pc, #72]	@ (8003578 <StartDefaultTask+0x444>)
 8003530:	2001      	movs	r0, #1
 8003532:	f001 fadb 	bl	8004aec <LOGGER_SendFormatted>
  uint32_t idle_counter = 0;
 8003536:	2300      	movs	r3, #0
 8003538:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800353c:	e005      	b.n	800354a <StartDefaultTask+0x416>
        osDelay(1000);
 800353e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003542:	f00f fdaf 	bl	80130a4 <osDelay>
        break;
 8003546:	bf00      	nop
  {
 8003548:	e702      	b.n	8003350 <StartDefaultTask+0x21c>
  
  for(;;)
  {
    // 30초마다 idle 상태 표시
    osDelay(30000);
 800354a:	f247 5030 	movw	r0, #30000	@ 0x7530
 800354e:	f00f fda9 	bl	80130a4 <osDelay>
    idle_counter++;
 8003552:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003556:	3301      	adds	r3, #1
 8003558:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    LOG_INFO("📤 [TX_TASK] Idle mode: %lu minutes elapsed", idle_counter / 2);
 800355c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003560:	085b      	lsrs	r3, r3, #1
 8003562:	461a      	mov	r2, r3
 8003564:	4905      	ldr	r1, [pc, #20]	@ (800357c <StartDefaultTask+0x448>)
 8003566:	2001      	movs	r0, #1
 8003568:	f001 fac0 	bl	8004aec <LOGGER_SendFormatted>
    osDelay(30000);
 800356c:	bf00      	nop
 800356e:	e7ec      	b.n	800354a <StartDefaultTask+0x416>
 8003570:	08018884 	.word	0x08018884
 8003574:	0801888c 	.word	0x0801888c
 8003578:	080188c4 	.word	0x080188c4
 800357c:	080188ec 	.word	0x080188ec

08003580 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a04      	ldr	r2, [pc, #16]	@ (80035a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d101      	bne.n	8003596 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8003592:	f001 fdd5 	bl	8005140 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003596:	bf00      	nop
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40001000 	.word	0x40001000

080035a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035a8:	b672      	cpsid	i
}
 80035aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035ac:	bf00      	nop
 80035ae:	e7fd      	b.n	80035ac <Error_Handler+0x8>

080035b0 <MX_DMA_Init>:
  * @brief DMA Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA_Init(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80035b6:	4b10      	ldr	r3, [pc, #64]	@ (80035f8 <MX_DMA_Init+0x48>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ba:	4a0f      	ldr	r2, [pc, #60]	@ (80035f8 <MX_DMA_Init+0x48>)
 80035bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80035c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80035c2:	4b0d      	ldr	r3, [pc, #52]	@ (80035f8 <MX_DMA_Init+0x48>)
 80035c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035ca:	607b      	str	r3, [r7, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration - USART6_RX */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80035ce:	2200      	movs	r2, #0
 80035d0:	2105      	movs	r1, #5
 80035d2:	2039      	movs	r0, #57	@ 0x39
 80035d4:	f002 f948 	bl	8005868 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80035d8:	2039      	movs	r0, #57	@ 0x39
 80035da:	f002 f961 	bl	80058a0 <HAL_NVIC_EnableIRQ>
  
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80035de:	2200      	movs	r2, #0
 80035e0:	2105      	movs	r1, #5
 80035e2:	2047      	movs	r0, #71	@ 0x47
 80035e4:	f002 f940 	bl	8005868 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 80035e8:	2047      	movs	r0, #71	@ 0x47
 80035ea:	f002 f959 	bl	80058a0 <HAL_NVIC_EnableIRQ>
}
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	40023800 	.word	0x40023800

080035fc <MX_USART6_DMA_Init>:
  * @brief DMA2 Stream1 DMA configuration for USART6 RX
  * @param None
  * @retval None
  */
void MX_USART6_DMA_Init(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
  // DMA 이미 초기화되었는지 체크
  if (hdma_usart6_rx.Instance != NULL) {
 8003602:	4b1e      	ldr	r3, [pc, #120]	@ (800367c <MX_USART6_DMA_Init+0x80>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d133      	bne.n	8003672 <MX_USART6_DMA_Init+0x76>
    return; // 이미 초기화됨
  }
  
  /* Configure DMA for USART6 RX */
  hdma_usart6_rx.Instance = DMA2_Stream1;
 800360a:	4b1c      	ldr	r3, [pc, #112]	@ (800367c <MX_USART6_DMA_Init+0x80>)
 800360c:	4a1c      	ldr	r2, [pc, #112]	@ (8003680 <MX_USART6_DMA_Init+0x84>)
 800360e:	601a      	str	r2, [r3, #0]
  hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003610:	4b1a      	ldr	r3, [pc, #104]	@ (800367c <MX_USART6_DMA_Init+0x80>)
 8003612:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003616:	605a      	str	r2, [r3, #4]
  hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003618:	4b18      	ldr	r3, [pc, #96]	@ (800367c <MX_USART6_DMA_Init+0x80>)
 800361a:	2200      	movs	r2, #0
 800361c:	609a      	str	r2, [r3, #8]
  hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800361e:	4b17      	ldr	r3, [pc, #92]	@ (800367c <MX_USART6_DMA_Init+0x80>)
 8003620:	2200      	movs	r2, #0
 8003622:	60da      	str	r2, [r3, #12]
  hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003624:	4b15      	ldr	r3, [pc, #84]	@ (800367c <MX_USART6_DMA_Init+0x80>)
 8003626:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800362a:	611a      	str	r2, [r3, #16]
  hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800362c:	4b13      	ldr	r3, [pc, #76]	@ (800367c <MX_USART6_DMA_Init+0x80>)
 800362e:	2200      	movs	r2, #0
 8003630:	615a      	str	r2, [r3, #20]
  hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003632:	4b12      	ldr	r3, [pc, #72]	@ (800367c <MX_USART6_DMA_Init+0x80>)
 8003634:	2200      	movs	r2, #0
 8003636:	619a      	str	r2, [r3, #24]
  hdma_usart6_rx.Init.Mode = DMA_NORMAL;    // 일반 모드로 변경
 8003638:	4b10      	ldr	r3, [pc, #64]	@ (800367c <MX_USART6_DMA_Init+0x80>)
 800363a:	2200      	movs	r2, #0
 800363c:	61da      	str	r2, [r3, #28]
  hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800363e:	4b0f      	ldr	r3, [pc, #60]	@ (800367c <MX_USART6_DMA_Init+0x80>)
 8003640:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003644:	621a      	str	r2, [r3, #32]
  hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003646:	4b0d      	ldr	r3, [pc, #52]	@ (800367c <MX_USART6_DMA_Init+0x80>)
 8003648:	2200      	movs	r2, #0
 800364a:	625a      	str	r2, [r3, #36]	@ 0x24
  
  HAL_StatusTypeDef dma_result = HAL_DMA_Init(&hdma_usart6_rx);
 800364c:	480b      	ldr	r0, [pc, #44]	@ (800367c <MX_USART6_DMA_Init+0x80>)
 800364e:	f002 faa1 	bl	8005b94 <HAL_DMA_Init>
 8003652:	4603      	mov	r3, r0
 8003654:	71fb      	strb	r3, [r7, #7]
  if (dma_result != HAL_OK)
 8003656:	79fb      	ldrb	r3, [r7, #7]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <MX_USART6_DMA_Init+0x68>
  {
    // 에러 처리하되 Error_Handler() 호출하지 않음 (시스템 중단 방지)
    hdma_usart6_rx.Instance = NULL; // 실패 표시
 800365c:	4b07      	ldr	r3, [pc, #28]	@ (800367c <MX_USART6_DMA_Init+0x80>)
 800365e:	2200      	movs	r2, #0
 8003660:	601a      	str	r2, [r3, #0]
    return;
 8003662:	e007      	b.n	8003674 <MX_USART6_DMA_Init+0x78>
  }

  /* Associate the initialized DMA handle to the UART handle */
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8003664:	4b07      	ldr	r3, [pc, #28]	@ (8003684 <MX_USART6_DMA_Init+0x88>)
 8003666:	4a05      	ldr	r2, [pc, #20]	@ (800367c <MX_USART6_DMA_Init+0x80>)
 8003668:	675a      	str	r2, [r3, #116]	@ 0x74
 800366a:	4b04      	ldr	r3, [pc, #16]	@ (800367c <MX_USART6_DMA_Init+0x80>)
 800366c:	4a05      	ldr	r2, [pc, #20]	@ (8003684 <MX_USART6_DMA_Init+0x88>)
 800366e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003670:	e000      	b.n	8003674 <MX_USART6_DMA_Init+0x78>
    return; // 이미 초기화됨
 8003672:	bf00      	nop
}
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	200012a8 	.word	0x200012a8
 8003680:	40026428 	.word	0x40026428
 8003684:	20000fdc 	.word	0x20000fdc

08003688 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800368e:	4b11      	ldr	r3, [pc, #68]	@ (80036d4 <HAL_MspInit+0x4c>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003692:	4a10      	ldr	r2, [pc, #64]	@ (80036d4 <HAL_MspInit+0x4c>)
 8003694:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003698:	6413      	str	r3, [r2, #64]	@ 0x40
 800369a:	4b0e      	ldr	r3, [pc, #56]	@ (80036d4 <HAL_MspInit+0x4c>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036a2:	607b      	str	r3, [r7, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036a6:	4b0b      	ldr	r3, [pc, #44]	@ (80036d4 <HAL_MspInit+0x4c>)
 80036a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036aa:	4a0a      	ldr	r2, [pc, #40]	@ (80036d4 <HAL_MspInit+0x4c>)
 80036ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80036b2:	4b08      	ldr	r3, [pc, #32]	@ (80036d4 <HAL_MspInit+0x4c>)
 80036b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036ba:	603b      	str	r3, [r7, #0]
 80036bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80036be:	2200      	movs	r2, #0
 80036c0:	210f      	movs	r1, #15
 80036c2:	f06f 0001 	mvn.w	r0, #1
 80036c6:	f002 f8cf 	bl	8005868 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036ca:	bf00      	nop
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40023800 	.word	0x40023800

080036d8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08a      	sub	sp, #40	@ 0x28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e0:	f107 0314 	add.w	r3, r7, #20
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	605a      	str	r2, [r3, #4]
 80036ea:	609a      	str	r2, [r3, #8]
 80036ec:	60da      	str	r2, [r3, #12]
 80036ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a21      	ldr	r2, [pc, #132]	@ (800377c <HAL_ADC_MspInit+0xa4>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d13c      	bne.n	8003774 <HAL_ADC_MspInit+0x9c>
  {
    /* USER CODE BEGIN ADC3_MspInit 0 */

    /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80036fa:	4b21      	ldr	r3, [pc, #132]	@ (8003780 <HAL_ADC_MspInit+0xa8>)
 80036fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036fe:	4a20      	ldr	r2, [pc, #128]	@ (8003780 <HAL_ADC_MspInit+0xa8>)
 8003700:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003704:	6453      	str	r3, [r2, #68]	@ 0x44
 8003706:	4b1e      	ldr	r3, [pc, #120]	@ (8003780 <HAL_ADC_MspInit+0xa8>)
 8003708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800370a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800370e:	613b      	str	r3, [r7, #16]
 8003710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003712:	4b1b      	ldr	r3, [pc, #108]	@ (8003780 <HAL_ADC_MspInit+0xa8>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003716:	4a1a      	ldr	r2, [pc, #104]	@ (8003780 <HAL_ADC_MspInit+0xa8>)
 8003718:	f043 0320 	orr.w	r3, r3, #32
 800371c:	6313      	str	r3, [r2, #48]	@ 0x30
 800371e:	4b18      	ldr	r3, [pc, #96]	@ (8003780 <HAL_ADC_MspInit+0xa8>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003722:	f003 0320 	and.w	r3, r3, #32
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800372a:	4b15      	ldr	r3, [pc, #84]	@ (8003780 <HAL_ADC_MspInit+0xa8>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372e:	4a14      	ldr	r2, [pc, #80]	@ (8003780 <HAL_ADC_MspInit+0xa8>)
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	6313      	str	r3, [r2, #48]	@ 0x30
 8003736:	4b12      	ldr	r3, [pc, #72]	@ (8003780 <HAL_ADC_MspInit+0xa8>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	60bb      	str	r3, [r7, #8]
 8003740:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8003742:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8003746:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003748:	2303      	movs	r3, #3
 800374a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374c:	2300      	movs	r3, #0
 800374e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003750:	f107 0314 	add.w	r3, r7, #20
 8003754:	4619      	mov	r1, r3
 8003756:	480b      	ldr	r0, [pc, #44]	@ (8003784 <HAL_ADC_MspInit+0xac>)
 8003758:	f003 fb6c 	bl	8006e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800375c:	2301      	movs	r3, #1
 800375e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003760:	2303      	movs	r3, #3
 8003762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003764:	2300      	movs	r3, #0
 8003766:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8003768:	f107 0314 	add.w	r3, r7, #20
 800376c:	4619      	mov	r1, r3
 800376e:	4806      	ldr	r0, [pc, #24]	@ (8003788 <HAL_ADC_MspInit+0xb0>)
 8003770:	f003 fb60 	bl	8006e34 <HAL_GPIO_Init>

    /* USER CODE END ADC3_MspInit 1 */

  }

}
 8003774:	bf00      	nop
 8003776:	3728      	adds	r7, #40	@ 0x28
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40012200 	.word	0x40012200
 8003780:	40023800 	.word	0x40023800
 8003784:	40021400 	.word	0x40021400
 8003788:	40020000 	.word	0x40020000

0800378c <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a0a      	ldr	r2, [pc, #40]	@ (80037c4 <HAL_CRC_MspInit+0x38>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d10b      	bne.n	80037b6 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800379e:	4b0a      	ldr	r3, [pc, #40]	@ (80037c8 <HAL_CRC_MspInit+0x3c>)
 80037a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a2:	4a09      	ldr	r2, [pc, #36]	@ (80037c8 <HAL_CRC_MspInit+0x3c>)
 80037a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80037a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80037aa:	4b07      	ldr	r3, [pc, #28]	@ (80037c8 <HAL_CRC_MspInit+0x3c>)
 80037ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80037b6:	bf00      	nop
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	40023000 	.word	0x40023000
 80037c8:	40023800 	.word	0x40023800

080037cc <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08e      	sub	sp, #56	@ 0x38
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	605a      	str	r2, [r3, #4]
 80037de:	609a      	str	r2, [r3, #8]
 80037e0:	60da      	str	r2, [r3, #12]
 80037e2:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a50      	ldr	r2, [pc, #320]	@ (800392c <HAL_DCMI_MspInit+0x160>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	f040 809a 	bne.w	8003924 <HAL_DCMI_MspInit+0x158>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80037f0:	4b4f      	ldr	r3, [pc, #316]	@ (8003930 <HAL_DCMI_MspInit+0x164>)
 80037f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037f4:	4a4e      	ldr	r2, [pc, #312]	@ (8003930 <HAL_DCMI_MspInit+0x164>)
 80037f6:	f043 0301 	orr.w	r3, r3, #1
 80037fa:	6353      	str	r3, [r2, #52]	@ 0x34
 80037fc:	4b4c      	ldr	r3, [pc, #304]	@ (8003930 <HAL_DCMI_MspInit+0x164>)
 80037fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	623b      	str	r3, [r7, #32]
 8003806:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003808:	4b49      	ldr	r3, [pc, #292]	@ (8003930 <HAL_DCMI_MspInit+0x164>)
 800380a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380c:	4a48      	ldr	r2, [pc, #288]	@ (8003930 <HAL_DCMI_MspInit+0x164>)
 800380e:	f043 0310 	orr.w	r3, r3, #16
 8003812:	6313      	str	r3, [r2, #48]	@ 0x30
 8003814:	4b46      	ldr	r3, [pc, #280]	@ (8003930 <HAL_DCMI_MspInit+0x164>)
 8003816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003818:	f003 0310 	and.w	r3, r3, #16
 800381c:	61fb      	str	r3, [r7, #28]
 800381e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003820:	4b43      	ldr	r3, [pc, #268]	@ (8003930 <HAL_DCMI_MspInit+0x164>)
 8003822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003824:	4a42      	ldr	r2, [pc, #264]	@ (8003930 <HAL_DCMI_MspInit+0x164>)
 8003826:	f043 0308 	orr.w	r3, r3, #8
 800382a:	6313      	str	r3, [r2, #48]	@ 0x30
 800382c:	4b40      	ldr	r3, [pc, #256]	@ (8003930 <HAL_DCMI_MspInit+0x164>)
 800382e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003830:	f003 0308 	and.w	r3, r3, #8
 8003834:	61bb      	str	r3, [r7, #24]
 8003836:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003838:	4b3d      	ldr	r3, [pc, #244]	@ (8003930 <HAL_DCMI_MspInit+0x164>)
 800383a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383c:	4a3c      	ldr	r2, [pc, #240]	@ (8003930 <HAL_DCMI_MspInit+0x164>)
 800383e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003842:	6313      	str	r3, [r2, #48]	@ 0x30
 8003844:	4b3a      	ldr	r3, [pc, #232]	@ (8003930 <HAL_DCMI_MspInit+0x164>)
 8003846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003850:	4b37      	ldr	r3, [pc, #220]	@ (8003930 <HAL_DCMI_MspInit+0x164>)
 8003852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003854:	4a36      	ldr	r2, [pc, #216]	@ (8003930 <HAL_DCMI_MspInit+0x164>)
 8003856:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800385a:	6313      	str	r3, [r2, #48]	@ 0x30
 800385c:	4b34      	ldr	r3, [pc, #208]	@ (8003930 <HAL_DCMI_MspInit+0x164>)
 800385e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003864:	613b      	str	r3, [r7, #16]
 8003866:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003868:	4b31      	ldr	r3, [pc, #196]	@ (8003930 <HAL_DCMI_MspInit+0x164>)
 800386a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386c:	4a30      	ldr	r2, [pc, #192]	@ (8003930 <HAL_DCMI_MspInit+0x164>)
 800386e:	f043 0301 	orr.w	r3, r3, #1
 8003872:	6313      	str	r3, [r2, #48]	@ 0x30
 8003874:	4b2e      	ldr	r3, [pc, #184]	@ (8003930 <HAL_DCMI_MspInit+0x164>)
 8003876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8003880:	2360      	movs	r3, #96	@ 0x60
 8003882:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003884:	2302      	movs	r3, #2
 8003886:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003888:	2300      	movs	r3, #0
 800388a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800388c:	2300      	movs	r3, #0
 800388e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003890:	230d      	movs	r3, #13
 8003892:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003894:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003898:	4619      	mov	r1, r3
 800389a:	4826      	ldr	r0, [pc, #152]	@ (8003934 <HAL_DCMI_MspInit+0x168>)
 800389c:	f003 faca 	bl	8006e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80038a0:	2308      	movs	r3, #8
 80038a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a4:	2302      	movs	r3, #2
 80038a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ac:	2300      	movs	r3, #0
 80038ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80038b0:	230d      	movs	r3, #13
 80038b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80038b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038b8:	4619      	mov	r1, r3
 80038ba:	481f      	ldr	r0, [pc, #124]	@ (8003938 <HAL_DCMI_MspInit+0x16c>)
 80038bc:	f003 faba 	bl	8006e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80038c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c6:	2302      	movs	r3, #2
 80038c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ca:	2300      	movs	r3, #0
 80038cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ce:	2300      	movs	r3, #0
 80038d0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80038d2:	230d      	movs	r3, #13
 80038d4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80038d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038da:	4619      	mov	r1, r3
 80038dc:	4817      	ldr	r0, [pc, #92]	@ (800393c <HAL_DCMI_MspInit+0x170>)
 80038de:	f003 faa9 	bl	8006e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80038e2:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 80038e6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e8:	2302      	movs	r3, #2
 80038ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ec:	2300      	movs	r3, #0
 80038ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f0:	2300      	movs	r3, #0
 80038f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80038f4:	230d      	movs	r3, #13
 80038f6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80038f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038fc:	4619      	mov	r1, r3
 80038fe:	4810      	ldr	r0, [pc, #64]	@ (8003940 <HAL_DCMI_MspInit+0x174>)
 8003900:	f003 fa98 	bl	8006e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8003904:	2350      	movs	r3, #80	@ 0x50
 8003906:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003908:	2302      	movs	r3, #2
 800390a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390c:	2300      	movs	r3, #0
 800390e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003910:	2300      	movs	r3, #0
 8003912:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003914:	230d      	movs	r3, #13
 8003916:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003918:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800391c:	4619      	mov	r1, r3
 800391e:	4809      	ldr	r0, [pc, #36]	@ (8003944 <HAL_DCMI_MspInit+0x178>)
 8003920:	f003 fa88 	bl	8006e34 <HAL_GPIO_Init>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 8003924:	bf00      	nop
 8003926:	3738      	adds	r7, #56	@ 0x38
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	50050000 	.word	0x50050000
 8003930:	40023800 	.word	0x40023800
 8003934:	40021000 	.word	0x40021000
 8003938:	40020c00 	.word	0x40020c00
 800393c:	40021800 	.word	0x40021800
 8003940:	40021c00 	.word	0x40021c00
 8003944:	40020000 	.word	0x40020000

08003948 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a0d      	ldr	r2, [pc, #52]	@ (800398c <HAL_DMA2D_MspInit+0x44>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d113      	bne.n	8003982 <HAL_DMA2D_MspInit+0x3a>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800395a:	4b0d      	ldr	r3, [pc, #52]	@ (8003990 <HAL_DMA2D_MspInit+0x48>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395e:	4a0c      	ldr	r2, [pc, #48]	@ (8003990 <HAL_DMA2D_MspInit+0x48>)
 8003960:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003964:	6313      	str	r3, [r2, #48]	@ 0x30
 8003966:	4b0a      	ldr	r3, [pc, #40]	@ (8003990 <HAL_DMA2D_MspInit+0x48>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003972:	2200      	movs	r2, #0
 8003974:	2105      	movs	r1, #5
 8003976:	205a      	movs	r0, #90	@ 0x5a
 8003978:	f001 ff76 	bl	8005868 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800397c:	205a      	movs	r0, #90	@ 0x5a
 800397e:	f001 ff8f 	bl	80058a0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8003982:	bf00      	nop
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	4002b000 	.word	0x4002b000
 8003990:	40023800 	.word	0x40023800

08003994 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b08e      	sub	sp, #56	@ 0x38
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800399c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	605a      	str	r2, [r3, #4]
 80039a6:	609a      	str	r2, [r3, #8]
 80039a8:	60da      	str	r2, [r3, #12]
 80039aa:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a3f      	ldr	r2, [pc, #252]	@ (8003ab0 <HAL_ETH_MspInit+0x11c>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d178      	bne.n	8003aa8 <HAL_ETH_MspInit+0x114>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80039b6:	4b3f      	ldr	r3, [pc, #252]	@ (8003ab4 <HAL_ETH_MspInit+0x120>)
 80039b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ba:	4a3e      	ldr	r2, [pc, #248]	@ (8003ab4 <HAL_ETH_MspInit+0x120>)
 80039bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80039c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80039c2:	4b3c      	ldr	r3, [pc, #240]	@ (8003ab4 <HAL_ETH_MspInit+0x120>)
 80039c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ca:	623b      	str	r3, [r7, #32]
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	4b39      	ldr	r3, [pc, #228]	@ (8003ab4 <HAL_ETH_MspInit+0x120>)
 80039d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d2:	4a38      	ldr	r2, [pc, #224]	@ (8003ab4 <HAL_ETH_MspInit+0x120>)
 80039d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80039d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80039da:	4b36      	ldr	r3, [pc, #216]	@ (8003ab4 <HAL_ETH_MspInit+0x120>)
 80039dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80039e2:	61fb      	str	r3, [r7, #28]
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	4b33      	ldr	r3, [pc, #204]	@ (8003ab4 <HAL_ETH_MspInit+0x120>)
 80039e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ea:	4a32      	ldr	r2, [pc, #200]	@ (8003ab4 <HAL_ETH_MspInit+0x120>)
 80039ec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80039f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80039f2:	4b30      	ldr	r3, [pc, #192]	@ (8003ab4 <HAL_ETH_MspInit+0x120>)
 80039f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039fa:	61bb      	str	r3, [r7, #24]
 80039fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80039fe:	4b2d      	ldr	r3, [pc, #180]	@ (8003ab4 <HAL_ETH_MspInit+0x120>)
 8003a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a02:	4a2c      	ldr	r2, [pc, #176]	@ (8003ab4 <HAL_ETH_MspInit+0x120>)
 8003a04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a0a:	4b2a      	ldr	r3, [pc, #168]	@ (8003ab4 <HAL_ETH_MspInit+0x120>)
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a12:	617b      	str	r3, [r7, #20]
 8003a14:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a16:	4b27      	ldr	r3, [pc, #156]	@ (8003ab4 <HAL_ETH_MspInit+0x120>)
 8003a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1a:	4a26      	ldr	r2, [pc, #152]	@ (8003ab4 <HAL_ETH_MspInit+0x120>)
 8003a1c:	f043 0304 	orr.w	r3, r3, #4
 8003a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a22:	4b24      	ldr	r3, [pc, #144]	@ (8003ab4 <HAL_ETH_MspInit+0x120>)
 8003a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a26:	f003 0304 	and.w	r3, r3, #4
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a2e:	4b21      	ldr	r3, [pc, #132]	@ (8003ab4 <HAL_ETH_MspInit+0x120>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a32:	4a20      	ldr	r2, [pc, #128]	@ (8003ab4 <HAL_ETH_MspInit+0x120>)
 8003a34:	f043 0301 	orr.w	r3, r3, #1
 8003a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a3a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ab4 <HAL_ETH_MspInit+0x120>)
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8003a46:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8003a4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a50:	2300      	movs	r3, #0
 8003a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a54:	2303      	movs	r3, #3
 8003a56:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a58:	230b      	movs	r3, #11
 8003a5a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a60:	4619      	mov	r1, r3
 8003a62:	4815      	ldr	r0, [pc, #84]	@ (8003ab8 <HAL_ETH_MspInit+0x124>)
 8003a64:	f003 f9e6 	bl	8006e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003a68:	2332      	movs	r3, #50	@ 0x32
 8003a6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a70:	2300      	movs	r3, #0
 8003a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a74:	2303      	movs	r3, #3
 8003a76:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a78:	230b      	movs	r3, #11
 8003a7a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a80:	4619      	mov	r1, r3
 8003a82:	480e      	ldr	r0, [pc, #56]	@ (8003abc <HAL_ETH_MspInit+0x128>)
 8003a84:	f003 f9d6 	bl	8006e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003a88:	2386      	movs	r3, #134	@ 0x86
 8003a8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a90:	2300      	movs	r3, #0
 8003a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a94:	2303      	movs	r3, #3
 8003a96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a98:	230b      	movs	r3, #11
 8003a9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	4807      	ldr	r0, [pc, #28]	@ (8003ac0 <HAL_ETH_MspInit+0x12c>)
 8003aa4:	f003 f9c6 	bl	8006e34 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8003aa8:	bf00      	nop
 8003aaa:	3738      	adds	r7, #56	@ 0x38
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40028000 	.word	0x40028000
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	40021800 	.word	0x40021800
 8003abc:	40020800 	.word	0x40020800
 8003ac0:	40020000 	.word	0x40020000

08003ac4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b0ac      	sub	sp, #176	@ 0xb0
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003acc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	605a      	str	r2, [r3, #4]
 8003ad6:	609a      	str	r2, [r3, #8]
 8003ad8:	60da      	str	r2, [r3, #12]
 8003ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003adc:	f107 0318 	add.w	r3, r7, #24
 8003ae0:	2284      	movs	r2, #132	@ 0x84
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f011 fda7 	bl	8015638 <memset>
  if(hi2c->Instance==I2C1)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a44      	ldr	r2, [pc, #272]	@ (8003c00 <HAL_I2C_MspInit+0x13c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d13d      	bne.n	8003b70 <HAL_I2C_MspInit+0xac>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003af4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003af8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003afa:	2300      	movs	r3, #0
 8003afc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003afe:	f107 0318 	add.w	r3, r7, #24
 8003b02:	4618      	mov	r0, r3
 8003b04:	f006 fb26 	bl	800a154 <HAL_RCCEx_PeriphCLKConfig>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003b0e:	f7ff fd49 	bl	80035a4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b12:	4b3c      	ldr	r3, [pc, #240]	@ (8003c04 <HAL_I2C_MspInit+0x140>)
 8003b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b16:	4a3b      	ldr	r2, [pc, #236]	@ (8003c04 <HAL_I2C_MspInit+0x140>)
 8003b18:	f043 0302 	orr.w	r3, r3, #2
 8003b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b1e:	4b39      	ldr	r3, [pc, #228]	@ (8003c04 <HAL_I2C_MspInit+0x140>)
 8003b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	617b      	str	r3, [r7, #20]
 8003b28:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8003b2a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003b2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b32:	2312      	movs	r3, #18
 8003b34:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b44:	2304      	movs	r3, #4
 8003b46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b4a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003b4e:	4619      	mov	r1, r3
 8003b50:	482d      	ldr	r0, [pc, #180]	@ (8003c08 <HAL_I2C_MspInit+0x144>)
 8003b52:	f003 f96f 	bl	8006e34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b56:	4b2b      	ldr	r3, [pc, #172]	@ (8003c04 <HAL_I2C_MspInit+0x140>)
 8003b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5a:	4a2a      	ldr	r2, [pc, #168]	@ (8003c04 <HAL_I2C_MspInit+0x140>)
 8003b5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003b60:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b62:	4b28      	ldr	r3, [pc, #160]	@ (8003c04 <HAL_I2C_MspInit+0x140>)
 8003b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b6a:	613b      	str	r3, [r7, #16]
 8003b6c:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003b6e:	e042      	b.n	8003bf6 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a25      	ldr	r2, [pc, #148]	@ (8003c0c <HAL_I2C_MspInit+0x148>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d13d      	bne.n	8003bf6 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003b7a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b7e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003b80:	2300      	movs	r3, #0
 8003b82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b86:	f107 0318 	add.w	r3, r7, #24
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f006 fae2 	bl	800a154 <HAL_RCCEx_PeriphCLKConfig>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8003b96:	f7ff fd05 	bl	80035a4 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8003c04 <HAL_I2C_MspInit+0x140>)
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9e:	4a19      	ldr	r2, [pc, #100]	@ (8003c04 <HAL_I2C_MspInit+0x140>)
 8003ba0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ba6:	4b17      	ldr	r3, [pc, #92]	@ (8003c04 <HAL_I2C_MspInit+0x140>)
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003bb2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003bb6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003bba:	2312      	movs	r3, #18
 8003bbc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003bcc:	2304      	movs	r3, #4
 8003bce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003bd2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	480d      	ldr	r0, [pc, #52]	@ (8003c10 <HAL_I2C_MspInit+0x14c>)
 8003bda:	f003 f92b 	bl	8006e34 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003bde:	4b09      	ldr	r3, [pc, #36]	@ (8003c04 <HAL_I2C_MspInit+0x140>)
 8003be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be2:	4a08      	ldr	r2, [pc, #32]	@ (8003c04 <HAL_I2C_MspInit+0x140>)
 8003be4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003be8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bea:	4b06      	ldr	r3, [pc, #24]	@ (8003c04 <HAL_I2C_MspInit+0x140>)
 8003bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003bf2:	60bb      	str	r3, [r7, #8]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
}
 8003bf6:	bf00      	nop
 8003bf8:	37b0      	adds	r7, #176	@ 0xb0
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	40005400 	.word	0x40005400
 8003c04:	40023800 	.word	0x40023800
 8003c08:	40020400 	.word	0x40020400
 8003c0c:	40005c00 	.word	0x40005c00
 8003c10:	40021c00 	.word	0x40021c00

08003c14 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b08e      	sub	sp, #56	@ 0x38
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c20:	2200      	movs	r2, #0
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	605a      	str	r2, [r3, #4]
 8003c26:	609a      	str	r2, [r3, #8]
 8003c28:	60da      	str	r2, [r3, #12]
 8003c2a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a55      	ldr	r2, [pc, #340]	@ (8003d88 <HAL_LTDC_MspInit+0x174>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	f040 80a3 	bne.w	8003d7e <HAL_LTDC_MspInit+0x16a>
  {
    /* USER CODE BEGIN LTDC_MspInit 0 */

    /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003c38:	4b54      	ldr	r3, [pc, #336]	@ (8003d8c <HAL_LTDC_MspInit+0x178>)
 8003c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c3c:	4a53      	ldr	r2, [pc, #332]	@ (8003d8c <HAL_LTDC_MspInit+0x178>)
 8003c3e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c42:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c44:	4b51      	ldr	r3, [pc, #324]	@ (8003d8c <HAL_LTDC_MspInit+0x178>)
 8003c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c48:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c4c:	623b      	str	r3, [r7, #32]
 8003c4e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c50:	4b4e      	ldr	r3, [pc, #312]	@ (8003d8c <HAL_LTDC_MspInit+0x178>)
 8003c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c54:	4a4d      	ldr	r2, [pc, #308]	@ (8003d8c <HAL_LTDC_MspInit+0x178>)
 8003c56:	f043 0310 	orr.w	r3, r3, #16
 8003c5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c5c:	4b4b      	ldr	r3, [pc, #300]	@ (8003d8c <HAL_LTDC_MspInit+0x178>)
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c60:	f003 0310 	and.w	r3, r3, #16
 8003c64:	61fb      	str	r3, [r7, #28]
 8003c66:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003c68:	4b48      	ldr	r3, [pc, #288]	@ (8003d8c <HAL_LTDC_MspInit+0x178>)
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6c:	4a47      	ldr	r2, [pc, #284]	@ (8003d8c <HAL_LTDC_MspInit+0x178>)
 8003c6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c72:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c74:	4b45      	ldr	r3, [pc, #276]	@ (8003d8c <HAL_LTDC_MspInit+0x178>)
 8003c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c7c:	61bb      	str	r3, [r7, #24]
 8003c7e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003c80:	4b42      	ldr	r3, [pc, #264]	@ (8003d8c <HAL_LTDC_MspInit+0x178>)
 8003c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c84:	4a41      	ldr	r2, [pc, #260]	@ (8003d8c <HAL_LTDC_MspInit+0x178>)
 8003c86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c8c:	4b3f      	ldr	r3, [pc, #252]	@ (8003d8c <HAL_LTDC_MspInit+0x178>)
 8003c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c94:	617b      	str	r3, [r7, #20]
 8003c96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c98:	4b3c      	ldr	r3, [pc, #240]	@ (8003d8c <HAL_LTDC_MspInit+0x178>)
 8003c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9c:	4a3b      	ldr	r2, [pc, #236]	@ (8003d8c <HAL_LTDC_MspInit+0x178>)
 8003c9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ca2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ca4:	4b39      	ldr	r3, [pc, #228]	@ (8003d8c <HAL_LTDC_MspInit+0x178>)
 8003ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cac:	613b      	str	r3, [r7, #16]
 8003cae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003cb0:	4b36      	ldr	r3, [pc, #216]	@ (8003d8c <HAL_LTDC_MspInit+0x178>)
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb4:	4a35      	ldr	r2, [pc, #212]	@ (8003d8c <HAL_LTDC_MspInit+0x178>)
 8003cb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cba:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cbc:	4b33      	ldr	r3, [pc, #204]	@ (8003d8c <HAL_LTDC_MspInit+0x178>)
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003cc8:	2310      	movs	r3, #16
 8003cca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ccc:	2302      	movs	r3, #2
 8003cce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003cd8:	230e      	movs	r3, #14
 8003cda:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003cdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	482b      	ldr	r0, [pc, #172]	@ (8003d90 <HAL_LTDC_MspInit+0x17c>)
 8003ce4:	f003 f8a6 	bl	8006e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003ce8:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8003cec:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cee:	2302      	movs	r3, #2
 8003cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003cfa:	230e      	movs	r3, #14
 8003cfc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003cfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d02:	4619      	mov	r1, r3
 8003d04:	4823      	ldr	r0, [pc, #140]	@ (8003d94 <HAL_LTDC_MspInit+0x180>)
 8003d06:	f003 f895 	bl	8006e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8003d0a:	23f7      	movs	r3, #247	@ 0xf7
 8003d0c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d0e:	2302      	movs	r3, #2
 8003d10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d16:	2300      	movs	r3, #0
 8003d18:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003d1a:	230e      	movs	r3, #14
 8003d1c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003d1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d22:	4619      	mov	r1, r3
 8003d24:	481c      	ldr	r0, [pc, #112]	@ (8003d98 <HAL_LTDC_MspInit+0x184>)
 8003d26:	f003 f885 	bl	8006e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003d2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d30:	2302      	movs	r3, #2
 8003d32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d34:	2300      	movs	r3, #0
 8003d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003d3c:	2309      	movs	r3, #9
 8003d3e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003d40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d44:	4619      	mov	r1, r3
 8003d46:	4815      	ldr	r0, [pc, #84]	@ (8003d9c <HAL_LTDC_MspInit+0x188>)
 8003d48:	f003 f874 	bl	8006e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003d4c:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8003d50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d52:	2302      	movs	r3, #2
 8003d54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003d5e:	230e      	movs	r3, #14
 8003d60:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003d62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d66:	4619      	mov	r1, r3
 8003d68:	480d      	ldr	r0, [pc, #52]	@ (8003da0 <HAL_LTDC_MspInit+0x18c>)
 8003d6a:	f003 f863 	bl	8006e34 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003d6e:	2200      	movs	r2, #0
 8003d70:	2105      	movs	r1, #5
 8003d72:	2058      	movs	r0, #88	@ 0x58
 8003d74:	f001 fd78 	bl	8005868 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003d78:	2058      	movs	r0, #88	@ 0x58
 8003d7a:	f001 fd91 	bl	80058a0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 8003d7e:	bf00      	nop
 8003d80:	3738      	adds	r7, #56	@ 0x38
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40016800 	.word	0x40016800
 8003d8c:	40023800 	.word	0x40023800
 8003d90:	40021000 	.word	0x40021000
 8003d94:	40022400 	.word	0x40022400
 8003d98:	40022800 	.word	0x40022800
 8003d9c:	40021800 	.word	0x40021800
 8003da0:	40022000 	.word	0x40022000

08003da4 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b08c      	sub	sp, #48	@ 0x30
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dac:	f107 031c 	add.w	r3, r7, #28
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	605a      	str	r2, [r3, #4]
 8003db6:	609a      	str	r2, [r3, #8]
 8003db8:	60da      	str	r2, [r3, #12]
 8003dba:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a3b      	ldr	r2, [pc, #236]	@ (8003eb0 <HAL_QSPI_MspInit+0x10c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d170      	bne.n	8003ea8 <HAL_QSPI_MspInit+0x104>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003dc6:	4b3b      	ldr	r3, [pc, #236]	@ (8003eb4 <HAL_QSPI_MspInit+0x110>)
 8003dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dca:	4a3a      	ldr	r2, [pc, #232]	@ (8003eb4 <HAL_QSPI_MspInit+0x110>)
 8003dcc:	f043 0302 	orr.w	r3, r3, #2
 8003dd0:	6393      	str	r3, [r2, #56]	@ 0x38
 8003dd2:	4b38      	ldr	r3, [pc, #224]	@ (8003eb4 <HAL_QSPI_MspInit+0x110>)
 8003dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	61bb      	str	r3, [r7, #24]
 8003ddc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003dde:	4b35      	ldr	r3, [pc, #212]	@ (8003eb4 <HAL_QSPI_MspInit+0x110>)
 8003de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de2:	4a34      	ldr	r2, [pc, #208]	@ (8003eb4 <HAL_QSPI_MspInit+0x110>)
 8003de4:	f043 0310 	orr.w	r3, r3, #16
 8003de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dea:	4b32      	ldr	r3, [pc, #200]	@ (8003eb4 <HAL_QSPI_MspInit+0x110>)
 8003dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dee:	f003 0310 	and.w	r3, r3, #16
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003df6:	4b2f      	ldr	r3, [pc, #188]	@ (8003eb4 <HAL_QSPI_MspInit+0x110>)
 8003df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfa:	4a2e      	ldr	r2, [pc, #184]	@ (8003eb4 <HAL_QSPI_MspInit+0x110>)
 8003dfc:	f043 0302 	orr.w	r3, r3, #2
 8003e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e02:	4b2c      	ldr	r3, [pc, #176]	@ (8003eb4 <HAL_QSPI_MspInit+0x110>)
 8003e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	613b      	str	r3, [r7, #16]
 8003e0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e0e:	4b29      	ldr	r3, [pc, #164]	@ (8003eb4 <HAL_QSPI_MspInit+0x110>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e12:	4a28      	ldr	r2, [pc, #160]	@ (8003eb4 <HAL_QSPI_MspInit+0x110>)
 8003e14:	f043 0308 	orr.w	r3, r3, #8
 8003e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e1a:	4b26      	ldr	r3, [pc, #152]	@ (8003eb4 <HAL_QSPI_MspInit+0x110>)
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8003e26:	2304      	movs	r3, #4
 8003e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e32:	2303      	movs	r3, #3
 8003e34:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003e36:	2309      	movs	r3, #9
 8003e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8003e3a:	f107 031c 	add.w	r3, r7, #28
 8003e3e:	4619      	mov	r1, r3
 8003e40:	481d      	ldr	r0, [pc, #116]	@ (8003eb8 <HAL_QSPI_MspInit+0x114>)
 8003e42:	f002 fff7 	bl	8006e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8003e46:	2340      	movs	r3, #64	@ 0x40
 8003e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e52:	2303      	movs	r3, #3
 8003e54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003e56:	230a      	movs	r3, #10
 8003e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8003e5a:	f107 031c 	add.w	r3, r7, #28
 8003e5e:	4619      	mov	r1, r3
 8003e60:	4816      	ldr	r0, [pc, #88]	@ (8003ebc <HAL_QSPI_MspInit+0x118>)
 8003e62:	f002 ffe7 	bl	8006e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003e66:	2304      	movs	r3, #4
 8003e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e72:	2303      	movs	r3, #3
 8003e74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003e76:	2309      	movs	r3, #9
 8003e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e7a:	f107 031c 	add.w	r3, r7, #28
 8003e7e:	4619      	mov	r1, r3
 8003e80:	480e      	ldr	r0, [pc, #56]	@ (8003ebc <HAL_QSPI_MspInit+0x118>)
 8003e82:	f002 ffd7 	bl	8006e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8003e86:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e90:	2300      	movs	r3, #0
 8003e92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e94:	2303      	movs	r3, #3
 8003e96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003e98:	2309      	movs	r3, #9
 8003e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e9c:	f107 031c 	add.w	r3, r7, #28
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4807      	ldr	r0, [pc, #28]	@ (8003ec0 <HAL_QSPI_MspInit+0x11c>)
 8003ea4:	f002 ffc6 	bl	8006e34 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8003ea8:	bf00      	nop
 8003eaa:	3730      	adds	r7, #48	@ 0x30
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	a0001000 	.word	0xa0001000
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	40020400 	.word	0x40020400
 8003ec0:	40020c00 	.word	0x40020c00

08003ec4 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b0a4      	sub	sp, #144	@ 0x90
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ecc:	f107 030c 	add.w	r3, r7, #12
 8003ed0:	2284      	movs	r2, #132	@ 0x84
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f011 fbaf 	bl	8015638 <memset>
  if(hrtc->Instance==RTC)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a0e      	ldr	r2, [pc, #56]	@ (8003f18 <HAL_RTC_MspInit+0x54>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d114      	bne.n	8003f0e <HAL_RTC_MspInit+0x4a>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003ee4:	2320      	movs	r3, #32
 8003ee6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003ee8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003eee:	f107 030c 	add.w	r3, r7, #12
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f006 f92e 	bl	800a154 <HAL_RCCEx_PeriphCLKConfig>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8003efe:	f7ff fb51 	bl	80035a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003f02:	4b06      	ldr	r3, [pc, #24]	@ (8003f1c <HAL_RTC_MspInit+0x58>)
 8003f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f06:	4a05      	ldr	r2, [pc, #20]	@ (8003f1c <HAL_RTC_MspInit+0x58>)
 8003f08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f0c:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8003f0e:	bf00      	nop
 8003f10:	3790      	adds	r7, #144	@ 0x90
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	40002800 	.word	0x40002800
 8003f1c:	40023800 	.word	0x40023800

08003f20 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b08a      	sub	sp, #40	@ 0x28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f28:	f107 0314 	add.w	r3, r7, #20
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	605a      	str	r2, [r3, #4]
 8003f32:	609a      	str	r2, [r3, #8]
 8003f34:	60da      	str	r2, [r3, #12]
 8003f36:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a25      	ldr	r2, [pc, #148]	@ (8003fd4 <HAL_SD_MspInit+0xb4>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d144      	bne.n	8003fcc <HAL_SD_MspInit+0xac>
  {
    /* USER CODE BEGIN SDMMC1_MspInit 0 */

    /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003f42:	4b25      	ldr	r3, [pc, #148]	@ (8003fd8 <HAL_SD_MspInit+0xb8>)
 8003f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f46:	4a24      	ldr	r2, [pc, #144]	@ (8003fd8 <HAL_SD_MspInit+0xb8>)
 8003f48:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003f4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f4e:	4b22      	ldr	r3, [pc, #136]	@ (8003fd8 <HAL_SD_MspInit+0xb8>)
 8003f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f56:	613b      	str	r3, [r7, #16]
 8003f58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f5a:	4b1f      	ldr	r3, [pc, #124]	@ (8003fd8 <HAL_SD_MspInit+0xb8>)
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f5e:	4a1e      	ldr	r2, [pc, #120]	@ (8003fd8 <HAL_SD_MspInit+0xb8>)
 8003f60:	f043 0304 	orr.w	r3, r3, #4
 8003f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f66:	4b1c      	ldr	r3, [pc, #112]	@ (8003fd8 <HAL_SD_MspInit+0xb8>)
 8003f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6a:	f003 0304 	and.w	r3, r3, #4
 8003f6e:	60fb      	str	r3, [r7, #12]
 8003f70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f72:	4b19      	ldr	r3, [pc, #100]	@ (8003fd8 <HAL_SD_MspInit+0xb8>)
 8003f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f76:	4a18      	ldr	r2, [pc, #96]	@ (8003fd8 <HAL_SD_MspInit+0xb8>)
 8003f78:	f043 0308 	orr.w	r3, r3, #8
 8003f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f7e:	4b16      	ldr	r3, [pc, #88]	@ (8003fd8 <HAL_SD_MspInit+0xb8>)
 8003f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	60bb      	str	r3, [r7, #8]
 8003f88:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8003f8a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8003f8e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f90:	2302      	movs	r3, #2
 8003f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f94:	2300      	movs	r3, #0
 8003f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003f9c:	230c      	movs	r3, #12
 8003f9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fa0:	f107 0314 	add.w	r3, r7, #20
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	480d      	ldr	r0, [pc, #52]	@ (8003fdc <HAL_SD_MspInit+0xbc>)
 8003fa8:	f002 ff44 	bl	8006e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8003fac:	2304      	movs	r3, #4
 8003fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003fbc:	230c      	movs	r3, #12
 8003fbe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8003fc0:	f107 0314 	add.w	r3, r7, #20
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4806      	ldr	r0, [pc, #24]	@ (8003fe0 <HAL_SD_MspInit+0xc0>)
 8003fc8:	f002 ff34 	bl	8006e34 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8003fcc:	bf00      	nop
 8003fce:	3728      	adds	r7, #40	@ 0x28
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40012c00 	.word	0x40012c00
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	40020800 	.word	0x40020800
 8003fe0:	40020c00 	.word	0x40020c00

08003fe4 <HAL_SPDIFRX_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspdifrx: SPDIFRX handle pointer
  * @retval None
  */
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b0aa      	sub	sp, #168	@ 0xa8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fec:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	605a      	str	r2, [r3, #4]
 8003ff6:	609a      	str	r2, [r3, #8]
 8003ff8:	60da      	str	r2, [r3, #12]
 8003ffa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ffc:	f107 0310 	add.w	r3, r7, #16
 8004000:	2284      	movs	r2, #132	@ 0x84
 8004002:	2100      	movs	r1, #0
 8004004:	4618      	mov	r0, r3
 8004006:	f011 fb17 	bl	8015638 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8004012:	d143      	bne.n	800409c <HAL_SPDIFRX_MspInit+0xb8>

    /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8004014:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004018:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 800401a:	2364      	movs	r3, #100	@ 0x64
 800401c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800401e:	2302      	movs	r3, #2
 8004020:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8004022:	2302      	movs	r3, #2
 8004024:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8004026:	2302      	movs	r3, #2
 8004028:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 800402a:	2301      	movs	r3, #1
 800402c:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800402e:	f107 0310 	add.w	r3, r7, #16
 8004032:	4618      	mov	r0, r3
 8004034:	f006 f88e 	bl	800a154 <HAL_RCCEx_PeriphCLKConfig>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 800403e:	f7ff fab1 	bl	80035a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8004042:	4b18      	ldr	r3, [pc, #96]	@ (80040a4 <HAL_SPDIFRX_MspInit+0xc0>)
 8004044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004046:	4a17      	ldr	r2, [pc, #92]	@ (80040a4 <HAL_SPDIFRX_MspInit+0xc0>)
 8004048:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800404c:	6413      	str	r3, [r2, #64]	@ 0x40
 800404e:	4b15      	ldr	r3, [pc, #84]	@ (80040a4 <HAL_SPDIFRX_MspInit+0xc0>)
 8004050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004052:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800405a:	4b12      	ldr	r3, [pc, #72]	@ (80040a4 <HAL_SPDIFRX_MspInit+0xc0>)
 800405c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800405e:	4a11      	ldr	r2, [pc, #68]	@ (80040a4 <HAL_SPDIFRX_MspInit+0xc0>)
 8004060:	f043 0308 	orr.w	r3, r3, #8
 8004064:	6313      	str	r3, [r2, #48]	@ 0x30
 8004066:	4b0f      	ldr	r3, [pc, #60]	@ (80040a4 <HAL_SPDIFRX_MspInit+0xc0>)
 8004068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	60bb      	str	r3, [r7, #8]
 8004070:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8004072:	2380      	movs	r3, #128	@ 0x80
 8004074:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004078:	2302      	movs	r3, #2
 800407a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800407e:	2300      	movs	r3, #0
 8004080:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004084:	2300      	movs	r3, #0
 8004086:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800408a:	2308      	movs	r3, #8
 800408c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8004090:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004094:	4619      	mov	r1, r3
 8004096:	4804      	ldr	r0, [pc, #16]	@ (80040a8 <HAL_SPDIFRX_MspInit+0xc4>)
 8004098:	f002 fecc 	bl	8006e34 <HAL_GPIO_Init>

    /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 800409c:	bf00      	nop
 800409e:	37a8      	adds	r7, #168	@ 0xa8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40023800 	.word	0x40023800
 80040a8:	40020c00 	.word	0x40020c00

080040ac <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b08a      	sub	sp, #40	@ 0x28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040b4:	f107 0314 	add.w	r3, r7, #20
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	605a      	str	r2, [r3, #4]
 80040be:	609a      	str	r2, [r3, #8]
 80040c0:	60da      	str	r2, [r3, #12]
 80040c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a25      	ldr	r2, [pc, #148]	@ (8004160 <HAL_SPI_MspInit+0xb4>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d144      	bne.n	8004158 <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80040ce:	4b25      	ldr	r3, [pc, #148]	@ (8004164 <HAL_SPI_MspInit+0xb8>)
 80040d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d2:	4a24      	ldr	r2, [pc, #144]	@ (8004164 <HAL_SPI_MspInit+0xb8>)
 80040d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80040da:	4b22      	ldr	r3, [pc, #136]	@ (8004164 <HAL_SPI_MspInit+0xb8>)
 80040dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040e2:	613b      	str	r3, [r7, #16]
 80040e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80040e6:	4b1f      	ldr	r3, [pc, #124]	@ (8004164 <HAL_SPI_MspInit+0xb8>)
 80040e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ea:	4a1e      	ldr	r2, [pc, #120]	@ (8004164 <HAL_SPI_MspInit+0xb8>)
 80040ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80040f2:	4b1c      	ldr	r3, [pc, #112]	@ (8004164 <HAL_SPI_MspInit+0xb8>)
 80040f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040fe:	4b19      	ldr	r3, [pc, #100]	@ (8004164 <HAL_SPI_MspInit+0xb8>)
 8004100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004102:	4a18      	ldr	r2, [pc, #96]	@ (8004164 <HAL_SPI_MspInit+0xb8>)
 8004104:	f043 0302 	orr.w	r3, r3, #2
 8004108:	6313      	str	r3, [r2, #48]	@ 0x30
 800410a:	4b16      	ldr	r3, [pc, #88]	@ (8004164 <HAL_SPI_MspInit+0xb8>)
 800410c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	60bb      	str	r3, [r7, #8]
 8004114:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8004116:	2302      	movs	r3, #2
 8004118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800411a:	2302      	movs	r3, #2
 800411c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800411e:	2300      	movs	r3, #0
 8004120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004122:	2300      	movs	r3, #0
 8004124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004126:	2305      	movs	r3, #5
 8004128:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800412a:	f107 0314 	add.w	r3, r7, #20
 800412e:	4619      	mov	r1, r3
 8004130:	480d      	ldr	r0, [pc, #52]	@ (8004168 <HAL_SPI_MspInit+0xbc>)
 8004132:	f002 fe7f 	bl	8006e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8004136:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800413a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800413c:	2302      	movs	r3, #2
 800413e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004140:	2300      	movs	r3, #0
 8004142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004144:	2300      	movs	r3, #0
 8004146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004148:	2305      	movs	r3, #5
 800414a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800414c:	f107 0314 	add.w	r3, r7, #20
 8004150:	4619      	mov	r1, r3
 8004152:	4806      	ldr	r0, [pc, #24]	@ (800416c <HAL_SPI_MspInit+0xc0>)
 8004154:	f002 fe6e 	bl	8006e34 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8004158:	bf00      	nop
 800415a:	3728      	adds	r7, #40	@ 0x28
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	40003800 	.word	0x40003800
 8004164:	40023800 	.word	0x40023800
 8004168:	40022000 	.word	0x40022000
 800416c:	40020400 	.word	0x40020400

08004170 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004170:	b480      	push	{r7}
 8004172:	b089      	sub	sp, #36	@ 0x24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a2e      	ldr	r2, [pc, #184]	@ (8004238 <HAL_TIM_Base_MspInit+0xc8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d10c      	bne.n	800419c <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004182:	4b2e      	ldr	r3, [pc, #184]	@ (800423c <HAL_TIM_Base_MspInit+0xcc>)
 8004184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004186:	4a2d      	ldr	r2, [pc, #180]	@ (800423c <HAL_TIM_Base_MspInit+0xcc>)
 8004188:	f043 0301 	orr.w	r3, r3, #1
 800418c:	6453      	str	r3, [r2, #68]	@ 0x44
 800418e:	4b2b      	ldr	r3, [pc, #172]	@ (800423c <HAL_TIM_Base_MspInit+0xcc>)
 8004190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	61fb      	str	r3, [r7, #28]
 8004198:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 800419a:	e046      	b.n	800422a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041a4:	d10c      	bne.n	80041c0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80041a6:	4b25      	ldr	r3, [pc, #148]	@ (800423c <HAL_TIM_Base_MspInit+0xcc>)
 80041a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041aa:	4a24      	ldr	r2, [pc, #144]	@ (800423c <HAL_TIM_Base_MspInit+0xcc>)
 80041ac:	f043 0301 	orr.w	r3, r3, #1
 80041b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80041b2:	4b22      	ldr	r3, [pc, #136]	@ (800423c <HAL_TIM_Base_MspInit+0xcc>)
 80041b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	61bb      	str	r3, [r7, #24]
 80041bc:	69bb      	ldr	r3, [r7, #24]
}
 80041be:	e034      	b.n	800422a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a1e      	ldr	r2, [pc, #120]	@ (8004240 <HAL_TIM_Base_MspInit+0xd0>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d10c      	bne.n	80041e4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80041ca:	4b1c      	ldr	r3, [pc, #112]	@ (800423c <HAL_TIM_Base_MspInit+0xcc>)
 80041cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ce:	4a1b      	ldr	r2, [pc, #108]	@ (800423c <HAL_TIM_Base_MspInit+0xcc>)
 80041d0:	f043 0302 	orr.w	r3, r3, #2
 80041d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80041d6:	4b19      	ldr	r3, [pc, #100]	@ (800423c <HAL_TIM_Base_MspInit+0xcc>)
 80041d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	697b      	ldr	r3, [r7, #20]
}
 80041e2:	e022      	b.n	800422a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a16      	ldr	r2, [pc, #88]	@ (8004244 <HAL_TIM_Base_MspInit+0xd4>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d10c      	bne.n	8004208 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80041ee:	4b13      	ldr	r3, [pc, #76]	@ (800423c <HAL_TIM_Base_MspInit+0xcc>)
 80041f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f2:	4a12      	ldr	r2, [pc, #72]	@ (800423c <HAL_TIM_Base_MspInit+0xcc>)
 80041f4:	f043 0308 	orr.w	r3, r3, #8
 80041f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80041fa:	4b10      	ldr	r3, [pc, #64]	@ (800423c <HAL_TIM_Base_MspInit+0xcc>)
 80041fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fe:	f003 0308 	and.w	r3, r3, #8
 8004202:	613b      	str	r3, [r7, #16]
 8004204:	693b      	ldr	r3, [r7, #16]
}
 8004206:	e010      	b.n	800422a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a0e      	ldr	r2, [pc, #56]	@ (8004248 <HAL_TIM_Base_MspInit+0xd8>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d10b      	bne.n	800422a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004212:	4b0a      	ldr	r3, [pc, #40]	@ (800423c <HAL_TIM_Base_MspInit+0xcc>)
 8004214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004216:	4a09      	ldr	r2, [pc, #36]	@ (800423c <HAL_TIM_Base_MspInit+0xcc>)
 8004218:	f043 0302 	orr.w	r3, r3, #2
 800421c:	6453      	str	r3, [r2, #68]	@ 0x44
 800421e:	4b07      	ldr	r3, [pc, #28]	@ (800423c <HAL_TIM_Base_MspInit+0xcc>)
 8004220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	68fb      	ldr	r3, [r7, #12]
}
 800422a:	bf00      	nop
 800422c:	3724      	adds	r7, #36	@ 0x24
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	40010000 	.word	0x40010000
 800423c:	40023800 	.word	0x40023800
 8004240:	40000400 	.word	0x40000400
 8004244:	40000c00 	.word	0x40000c00
 8004248:	40010400 	.word	0x40010400

0800424c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a0a      	ldr	r2, [pc, #40]	@ (8004284 <HAL_TIM_PWM_MspInit+0x38>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d10b      	bne.n	8004276 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM12_MspInit 0 */

    /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800425e:	4b0a      	ldr	r3, [pc, #40]	@ (8004288 <HAL_TIM_PWM_MspInit+0x3c>)
 8004260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004262:	4a09      	ldr	r2, [pc, #36]	@ (8004288 <HAL_TIM_PWM_MspInit+0x3c>)
 8004264:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004268:	6413      	str	r3, [r2, #64]	@ 0x40
 800426a:	4b07      	ldr	r3, [pc, #28]	@ (8004288 <HAL_TIM_PWM_MspInit+0x3c>)
 800426c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM12_MspInit 1 */

  }

}
 8004276:	bf00      	nop
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	40001800 	.word	0x40001800
 8004288:	40023800 	.word	0x40023800

0800428c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b08c      	sub	sp, #48	@ 0x30
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004294:	f107 031c 	add.w	r3, r7, #28
 8004298:	2200      	movs	r2, #0
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	605a      	str	r2, [r3, #4]
 800429e:	609a      	str	r2, [r3, #8]
 80042a0:	60da      	str	r2, [r3, #12]
 80042a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a56      	ldr	r2, [pc, #344]	@ (8004404 <HAL_TIM_MspPostInit+0x178>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d11d      	bne.n	80042ea <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ae:	4b56      	ldr	r3, [pc, #344]	@ (8004408 <HAL_TIM_MspPostInit+0x17c>)
 80042b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b2:	4a55      	ldr	r2, [pc, #340]	@ (8004408 <HAL_TIM_MspPostInit+0x17c>)
 80042b4:	f043 0301 	orr.w	r3, r3, #1
 80042b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80042ba:	4b53      	ldr	r3, [pc, #332]	@ (8004408 <HAL_TIM_MspPostInit+0x17c>)
 80042bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	61bb      	str	r3, [r7, #24]
 80042c4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80042c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80042ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042cc:	2302      	movs	r3, #2
 80042ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042d0:	2300      	movs	r3, #0
 80042d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042d4:	2300      	movs	r3, #0
 80042d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80042d8:	2301      	movs	r3, #1
 80042da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80042dc:	f107 031c 	add.w	r3, r7, #28
 80042e0:	4619      	mov	r1, r3
 80042e2:	484a      	ldr	r0, [pc, #296]	@ (800440c <HAL_TIM_MspPostInit+0x180>)
 80042e4:	f002 fda6 	bl	8006e34 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80042e8:	e087      	b.n	80043fa <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042f2:	d11d      	bne.n	8004330 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042f4:	4b44      	ldr	r3, [pc, #272]	@ (8004408 <HAL_TIM_MspPostInit+0x17c>)
 80042f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f8:	4a43      	ldr	r2, [pc, #268]	@ (8004408 <HAL_TIM_MspPostInit+0x17c>)
 80042fa:	f043 0301 	orr.w	r3, r3, #1
 80042fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8004300:	4b41      	ldr	r3, [pc, #260]	@ (8004408 <HAL_TIM_MspPostInit+0x17c>)
 8004302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	617b      	str	r3, [r7, #20]
 800430a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800430c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004312:	2302      	movs	r3, #2
 8004314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004316:	2300      	movs	r3, #0
 8004318:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800431a:	2300      	movs	r3, #0
 800431c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800431e:	2301      	movs	r3, #1
 8004320:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8004322:	f107 031c 	add.w	r3, r7, #28
 8004326:	4619      	mov	r1, r3
 8004328:	4838      	ldr	r0, [pc, #224]	@ (800440c <HAL_TIM_MspPostInit+0x180>)
 800432a:	f002 fd83 	bl	8006e34 <HAL_GPIO_Init>
}
 800432e:	e064      	b.n	80043fa <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a36      	ldr	r2, [pc, #216]	@ (8004410 <HAL_TIM_MspPostInit+0x184>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d11c      	bne.n	8004374 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800433a:	4b33      	ldr	r3, [pc, #204]	@ (8004408 <HAL_TIM_MspPostInit+0x17c>)
 800433c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800433e:	4a32      	ldr	r2, [pc, #200]	@ (8004408 <HAL_TIM_MspPostInit+0x17c>)
 8004340:	f043 0302 	orr.w	r3, r3, #2
 8004344:	6313      	str	r3, [r2, #48]	@ 0x30
 8004346:	4b30      	ldr	r3, [pc, #192]	@ (8004408 <HAL_TIM_MspPostInit+0x17c>)
 8004348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	613b      	str	r3, [r7, #16]
 8004350:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8004352:	2310      	movs	r3, #16
 8004354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004356:	2302      	movs	r3, #2
 8004358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800435a:	2300      	movs	r3, #0
 800435c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800435e:	2300      	movs	r3, #0
 8004360:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004362:	2302      	movs	r3, #2
 8004364:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8004366:	f107 031c 	add.w	r3, r7, #28
 800436a:	4619      	mov	r1, r3
 800436c:	4829      	ldr	r0, [pc, #164]	@ (8004414 <HAL_TIM_MspPostInit+0x188>)
 800436e:	f002 fd61 	bl	8006e34 <HAL_GPIO_Init>
}
 8004372:	e042      	b.n	80043fa <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a27      	ldr	r2, [pc, #156]	@ (8004418 <HAL_TIM_MspPostInit+0x18c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d11c      	bne.n	80043b8 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800437e:	4b22      	ldr	r3, [pc, #136]	@ (8004408 <HAL_TIM_MspPostInit+0x17c>)
 8004380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004382:	4a21      	ldr	r2, [pc, #132]	@ (8004408 <HAL_TIM_MspPostInit+0x17c>)
 8004384:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004388:	6313      	str	r3, [r2, #48]	@ 0x30
 800438a:	4b1f      	ldr	r3, [pc, #124]	@ (8004408 <HAL_TIM_MspPostInit+0x17c>)
 800438c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8004396:	2301      	movs	r3, #1
 8004398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800439a:	2302      	movs	r3, #2
 800439c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800439e:	2300      	movs	r3, #0
 80043a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043a2:	2300      	movs	r3, #0
 80043a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80043a6:	2302      	movs	r3, #2
 80043a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80043aa:	f107 031c 	add.w	r3, r7, #28
 80043ae:	4619      	mov	r1, r3
 80043b0:	481a      	ldr	r0, [pc, #104]	@ (800441c <HAL_TIM_MspPostInit+0x190>)
 80043b2:	f002 fd3f 	bl	8006e34 <HAL_GPIO_Init>
}
 80043b6:	e020      	b.n	80043fa <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a18      	ldr	r2, [pc, #96]	@ (8004420 <HAL_TIM_MspPostInit+0x194>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d11b      	bne.n	80043fa <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80043c2:	4b11      	ldr	r3, [pc, #68]	@ (8004408 <HAL_TIM_MspPostInit+0x17c>)
 80043c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c6:	4a10      	ldr	r2, [pc, #64]	@ (8004408 <HAL_TIM_MspPostInit+0x17c>)
 80043c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80043ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004408 <HAL_TIM_MspPostInit+0x17c>)
 80043d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043d6:	60bb      	str	r3, [r7, #8]
 80043d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80043da:	2340      	movs	r3, #64	@ 0x40
 80043dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043de:	2302      	movs	r3, #2
 80043e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e2:	2300      	movs	r3, #0
 80043e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043e6:	2300      	movs	r3, #0
 80043e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80043ea:	2309      	movs	r3, #9
 80043ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80043ee:	f107 031c 	add.w	r3, r7, #28
 80043f2:	4619      	mov	r1, r3
 80043f4:	480b      	ldr	r0, [pc, #44]	@ (8004424 <HAL_TIM_MspPostInit+0x198>)
 80043f6:	f002 fd1d 	bl	8006e34 <HAL_GPIO_Init>
}
 80043fa:	bf00      	nop
 80043fc:	3730      	adds	r7, #48	@ 0x30
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	40010000 	.word	0x40010000
 8004408:	40023800 	.word	0x40023800
 800440c:	40020000 	.word	0x40020000
 8004410:	40000400 	.word	0x40000400
 8004414:	40020400 	.word	0x40020400
 8004418:	40000c00 	.word	0x40000c00
 800441c:	40022000 	.word	0x40022000
 8004420:	40001800 	.word	0x40001800
 8004424:	40021c00 	.word	0x40021c00

08004428 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b0ae      	sub	sp, #184	@ 0xb8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004430:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	605a      	str	r2, [r3, #4]
 800443a:	609a      	str	r2, [r3, #8]
 800443c:	60da      	str	r2, [r3, #12]
 800443e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004440:	f107 0320 	add.w	r3, r7, #32
 8004444:	2284      	movs	r2, #132	@ 0x84
 8004446:	2100      	movs	r1, #0
 8004448:	4618      	mov	r0, r3
 800444a:	f011 f8f5 	bl	8015638 <memset>
  if(huart->Instance==USART1)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a53      	ldr	r2, [pc, #332]	@ (80045a0 <HAL_UART_MspInit+0x178>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d15d      	bne.n	8004514 <HAL_UART_MspInit+0xec>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004458:	2340      	movs	r3, #64	@ 0x40
 800445a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800445c:	2300      	movs	r3, #0
 800445e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004460:	f107 0320 	add.w	r3, r7, #32
 8004464:	4618      	mov	r0, r3
 8004466:	f005 fe75 	bl	800a154 <HAL_RCCEx_PeriphCLKConfig>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004470:	f7ff f898 	bl	80035a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004474:	4b4b      	ldr	r3, [pc, #300]	@ (80045a4 <HAL_UART_MspInit+0x17c>)
 8004476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004478:	4a4a      	ldr	r2, [pc, #296]	@ (80045a4 <HAL_UART_MspInit+0x17c>)
 800447a:	f043 0310 	orr.w	r3, r3, #16
 800447e:	6453      	str	r3, [r2, #68]	@ 0x44
 8004480:	4b48      	ldr	r3, [pc, #288]	@ (80045a4 <HAL_UART_MspInit+0x17c>)
 8004482:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004484:	f003 0310 	and.w	r3, r3, #16
 8004488:	61fb      	str	r3, [r7, #28]
 800448a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800448c:	4b45      	ldr	r3, [pc, #276]	@ (80045a4 <HAL_UART_MspInit+0x17c>)
 800448e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004490:	4a44      	ldr	r2, [pc, #272]	@ (80045a4 <HAL_UART_MspInit+0x17c>)
 8004492:	f043 0302 	orr.w	r3, r3, #2
 8004496:	6313      	str	r3, [r2, #48]	@ 0x30
 8004498:	4b42      	ldr	r3, [pc, #264]	@ (80045a4 <HAL_UART_MspInit+0x17c>)
 800449a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	61bb      	str	r3, [r7, #24]
 80044a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044a4:	4b3f      	ldr	r3, [pc, #252]	@ (80045a4 <HAL_UART_MspInit+0x17c>)
 80044a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a8:	4a3e      	ldr	r2, [pc, #248]	@ (80045a4 <HAL_UART_MspInit+0x17c>)
 80044aa:	f043 0301 	orr.w	r3, r3, #1
 80044ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80044b0:	4b3c      	ldr	r3, [pc, #240]	@ (80045a4 <HAL_UART_MspInit+0x17c>)
 80044b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	617b      	str	r3, [r7, #20]
 80044ba:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80044bc:	2380      	movs	r3, #128	@ 0x80
 80044be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c2:	2302      	movs	r3, #2
 80044c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c8:	2300      	movs	r3, #0
 80044ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ce:	2300      	movs	r3, #0
 80044d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80044d4:	2307      	movs	r3, #7
 80044d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80044da:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80044de:	4619      	mov	r1, r3
 80044e0:	4831      	ldr	r0, [pc, #196]	@ (80045a8 <HAL_UART_MspInit+0x180>)
 80044e2:	f002 fca7 	bl	8006e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80044e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80044ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ee:	2302      	movs	r3, #2
 80044f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f4:	2300      	movs	r3, #0
 80044f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044fa:	2300      	movs	r3, #0
 80044fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004500:	2307      	movs	r3, #7
 8004502:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8004506:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800450a:	4619      	mov	r1, r3
 800450c:	4827      	ldr	r0, [pc, #156]	@ (80045ac <HAL_UART_MspInit+0x184>)
 800450e:	f002 fc91 	bl	8006e34 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8004512:	e040      	b.n	8004596 <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a25      	ldr	r2, [pc, #148]	@ (80045b0 <HAL_UART_MspInit+0x188>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d13b      	bne.n	8004596 <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800451e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004522:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8004524:	2300      	movs	r3, #0
 8004526:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004528:	f107 0320 	add.w	r3, r7, #32
 800452c:	4618      	mov	r0, r3
 800452e:	f005 fe11 	bl	800a154 <HAL_RCCEx_PeriphCLKConfig>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <HAL_UART_MspInit+0x114>
      Error_Handler();
 8004538:	f7ff f834 	bl	80035a4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800453c:	4b19      	ldr	r3, [pc, #100]	@ (80045a4 <HAL_UART_MspInit+0x17c>)
 800453e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004540:	4a18      	ldr	r2, [pc, #96]	@ (80045a4 <HAL_UART_MspInit+0x17c>)
 8004542:	f043 0320 	orr.w	r3, r3, #32
 8004546:	6453      	str	r3, [r2, #68]	@ 0x44
 8004548:	4b16      	ldr	r3, [pc, #88]	@ (80045a4 <HAL_UART_MspInit+0x17c>)
 800454a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800454c:	f003 0320 	and.w	r3, r3, #32
 8004550:	613b      	str	r3, [r7, #16]
 8004552:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004554:	4b13      	ldr	r3, [pc, #76]	@ (80045a4 <HAL_UART_MspInit+0x17c>)
 8004556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004558:	4a12      	ldr	r2, [pc, #72]	@ (80045a4 <HAL_UART_MspInit+0x17c>)
 800455a:	f043 0304 	orr.w	r3, r3, #4
 800455e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004560:	4b10      	ldr	r3, [pc, #64]	@ (80045a4 <HAL_UART_MspInit+0x17c>)
 8004562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800456c:	23c0      	movs	r3, #192	@ 0xc0
 800456e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004572:	2302      	movs	r3, #2
 8004574:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004578:	2300      	movs	r3, #0
 800457a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800457e:	2303      	movs	r3, #3
 8004580:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004584:	2308      	movs	r3, #8
 8004586:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800458a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800458e:	4619      	mov	r1, r3
 8004590:	4808      	ldr	r0, [pc, #32]	@ (80045b4 <HAL_UART_MspInit+0x18c>)
 8004592:	f002 fc4f 	bl	8006e34 <HAL_GPIO_Init>
}
 8004596:	bf00      	nop
 8004598:	37b8      	adds	r7, #184	@ 0xb8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	40011000 	.word	0x40011000
 80045a4:	40023800 	.word	0x40023800
 80045a8:	40020400 	.word	0x40020400
 80045ac:	40020000 	.word	0x40020000
 80045b0:	40011400 	.word	0x40011400
 80045b4:	40020800 	.word	0x40020800

080045b8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80045be:	1d3b      	adds	r3, r7, #4
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	605a      	str	r2, [r3, #4]
 80045c6:	609a      	str	r2, [r3, #8]
 80045c8:	60da      	str	r2, [r3, #12]
 80045ca:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80045cc:	4b3a      	ldr	r3, [pc, #232]	@ (80046b8 <HAL_FMC_MspInit+0x100>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d16d      	bne.n	80046b0 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80045d4:	4b38      	ldr	r3, [pc, #224]	@ (80046b8 <HAL_FMC_MspInit+0x100>)
 80045d6:	2201      	movs	r2, #1
 80045d8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80045da:	4b38      	ldr	r3, [pc, #224]	@ (80046bc <HAL_FMC_MspInit+0x104>)
 80045dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045de:	4a37      	ldr	r2, [pc, #220]	@ (80046bc <HAL_FMC_MspInit+0x104>)
 80045e0:	f043 0301 	orr.w	r3, r3, #1
 80045e4:	6393      	str	r3, [r2, #56]	@ 0x38
 80045e6:	4b35      	ldr	r3, [pc, #212]	@ (80046bc <HAL_FMC_MspInit+0x104>)
 80045e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	603b      	str	r3, [r7, #0]
 80045f0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80045f2:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80045f6:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f8:	2302      	movs	r3, #2
 80045fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045fc:	2300      	movs	r3, #0
 80045fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004600:	2303      	movs	r3, #3
 8004602:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004604:	230c      	movs	r3, #12
 8004606:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004608:	1d3b      	adds	r3, r7, #4
 800460a:	4619      	mov	r1, r3
 800460c:	482c      	ldr	r0, [pc, #176]	@ (80046c0 <HAL_FMC_MspInit+0x108>)
 800460e:	f002 fc11 	bl	8006e34 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8004612:	f248 1333 	movw	r3, #33075	@ 0x8133
 8004616:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004618:	2302      	movs	r3, #2
 800461a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800461c:	2300      	movs	r3, #0
 800461e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004620:	2303      	movs	r3, #3
 8004622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004624:	230c      	movs	r3, #12
 8004626:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004628:	1d3b      	adds	r3, r7, #4
 800462a:	4619      	mov	r1, r3
 800462c:	4825      	ldr	r0, [pc, #148]	@ (80046c4 <HAL_FMC_MspInit+0x10c>)
 800462e:	f002 fc01 	bl	8006e34 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8004632:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8004636:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004638:	2302      	movs	r3, #2
 800463a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800463c:	2300      	movs	r3, #0
 800463e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004640:	2303      	movs	r3, #3
 8004642:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004644:	230c      	movs	r3, #12
 8004646:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004648:	1d3b      	adds	r3, r7, #4
 800464a:	4619      	mov	r1, r3
 800464c:	481e      	ldr	r0, [pc, #120]	@ (80046c8 <HAL_FMC_MspInit+0x110>)
 800464e:	f002 fbf1 	bl	8006e34 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8004652:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8004656:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004658:	2302      	movs	r3, #2
 800465a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800465c:	2300      	movs	r3, #0
 800465e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004660:	2303      	movs	r3, #3
 8004662:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004664:	230c      	movs	r3, #12
 8004666:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004668:	1d3b      	adds	r3, r7, #4
 800466a:	4619      	mov	r1, r3
 800466c:	4817      	ldr	r0, [pc, #92]	@ (80046cc <HAL_FMC_MspInit+0x114>)
 800466e:	f002 fbe1 	bl	8006e34 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8004672:	2328      	movs	r3, #40	@ 0x28
 8004674:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004676:	2302      	movs	r3, #2
 8004678:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800467a:	2300      	movs	r3, #0
 800467c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800467e:	2303      	movs	r3, #3
 8004680:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004682:	230c      	movs	r3, #12
 8004684:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004686:	1d3b      	adds	r3, r7, #4
 8004688:	4619      	mov	r1, r3
 800468a:	4811      	ldr	r0, [pc, #68]	@ (80046d0 <HAL_FMC_MspInit+0x118>)
 800468c:	f002 fbd2 	bl	8006e34 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8004690:	2308      	movs	r3, #8
 8004692:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004694:	2302      	movs	r3, #2
 8004696:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004698:	2300      	movs	r3, #0
 800469a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800469c:	2303      	movs	r3, #3
 800469e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80046a0:	230c      	movs	r3, #12
 80046a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80046a4:	1d3b      	adds	r3, r7, #4
 80046a6:	4619      	mov	r1, r3
 80046a8:	480a      	ldr	r0, [pc, #40]	@ (80046d4 <HAL_FMC_MspInit+0x11c>)
 80046aa:	f002 fbc3 	bl	8006e34 <HAL_GPIO_Init>
 80046ae:	e000      	b.n	80046b2 <HAL_FMC_MspInit+0xfa>
    return;
 80046b0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80046b2:	3718      	adds	r7, #24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	20001314 	.word	0x20001314
 80046bc:	40023800 	.word	0x40023800
 80046c0:	40021000 	.word	0x40021000
 80046c4:	40021800 	.word	0x40021800
 80046c8:	40020c00 	.word	0x40020c00
 80046cc:	40021400 	.word	0x40021400
 80046d0:	40021c00 	.word	0x40021c00
 80046d4:	40020800 	.word	0x40020800

080046d8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80046e0:	f7ff ff6a 	bl	80045b8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80046e4:	bf00      	nop
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08a      	sub	sp, #40	@ 0x28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a2b      	ldr	r2, [pc, #172]	@ (80047a8 <HAL_SAI_MspInit+0xbc>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d124      	bne.n	8004748 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80046fe:	4b2b      	ldr	r3, [pc, #172]	@ (80047ac <HAL_SAI_MspInit+0xc0>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10b      	bne.n	800471e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8004706:	4b2a      	ldr	r3, [pc, #168]	@ (80047b0 <HAL_SAI_MspInit+0xc4>)
 8004708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800470a:	4a29      	ldr	r2, [pc, #164]	@ (80047b0 <HAL_SAI_MspInit+0xc4>)
 800470c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004710:	6453      	str	r3, [r2, #68]	@ 0x44
 8004712:	4b27      	ldr	r3, [pc, #156]	@ (80047b0 <HAL_SAI_MspInit+0xc4>)
 8004714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004716:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800471a:	613b      	str	r3, [r7, #16]
 800471c:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800471e:	4b23      	ldr	r3, [pc, #140]	@ (80047ac <HAL_SAI_MspInit+0xc0>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	3301      	adds	r3, #1
 8004724:	4a21      	ldr	r2, [pc, #132]	@ (80047ac <HAL_SAI_MspInit+0xc0>)
 8004726:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8004728:	23f0      	movs	r3, #240	@ 0xf0
 800472a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800472c:	2302      	movs	r3, #2
 800472e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004730:	2300      	movs	r3, #0
 8004732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004734:	2300      	movs	r3, #0
 8004736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8004738:	230a      	movs	r3, #10
 800473a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800473c:	f107 0314 	add.w	r3, r7, #20
 8004740:	4619      	mov	r1, r3
 8004742:	481c      	ldr	r0, [pc, #112]	@ (80047b4 <HAL_SAI_MspInit+0xc8>)
 8004744:	f002 fb76 	bl	8006e34 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a1a      	ldr	r2, [pc, #104]	@ (80047b8 <HAL_SAI_MspInit+0xcc>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d125      	bne.n	800479e <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8004752:	4b16      	ldr	r3, [pc, #88]	@ (80047ac <HAL_SAI_MspInit+0xc0>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10b      	bne.n	8004772 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800475a:	4b15      	ldr	r3, [pc, #84]	@ (80047b0 <HAL_SAI_MspInit+0xc4>)
 800475c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800475e:	4a14      	ldr	r2, [pc, #80]	@ (80047b0 <HAL_SAI_MspInit+0xc4>)
 8004760:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004764:	6453      	str	r3, [r2, #68]	@ 0x44
 8004766:	4b12      	ldr	r3, [pc, #72]	@ (80047b0 <HAL_SAI_MspInit+0xc4>)
 8004768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800476a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8004772:	4b0e      	ldr	r3, [pc, #56]	@ (80047ac <HAL_SAI_MspInit+0xc0>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	3301      	adds	r3, #1
 8004778:	4a0c      	ldr	r2, [pc, #48]	@ (80047ac <HAL_SAI_MspInit+0xc0>)
 800477a:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800477c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004782:	2302      	movs	r3, #2
 8004784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004786:	2300      	movs	r3, #0
 8004788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800478a:	2300      	movs	r3, #0
 800478c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800478e:	230a      	movs	r3, #10
 8004790:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8004792:	f107 0314 	add.w	r3, r7, #20
 8004796:	4619      	mov	r1, r3
 8004798:	4808      	ldr	r0, [pc, #32]	@ (80047bc <HAL_SAI_MspInit+0xd0>)
 800479a:	f002 fb4b 	bl	8006e34 <HAL_GPIO_Init>

    }
}
 800479e:	bf00      	nop
 80047a0:	3728      	adds	r7, #40	@ 0x28
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	40015c04 	.word	0x40015c04
 80047ac:	20001318 	.word	0x20001318
 80047b0:	40023800 	.word	0x40023800
 80047b4:	40022000 	.word	0x40022000
 80047b8:	40015c24 	.word	0x40015c24
 80047bc:	40021800 	.word	0x40021800

080047c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b08e      	sub	sp, #56	@ 0x38
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80047d0:	4b33      	ldr	r3, [pc, #204]	@ (80048a0 <HAL_InitTick+0xe0>)
 80047d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d4:	4a32      	ldr	r2, [pc, #200]	@ (80048a0 <HAL_InitTick+0xe0>)
 80047d6:	f043 0310 	orr.w	r3, r3, #16
 80047da:	6413      	str	r3, [r2, #64]	@ 0x40
 80047dc:	4b30      	ldr	r3, [pc, #192]	@ (80048a0 <HAL_InitTick+0xe0>)
 80047de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e0:	f003 0310 	and.w	r3, r3, #16
 80047e4:	60fb      	str	r3, [r7, #12]
 80047e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80047e8:	f107 0210 	add.w	r2, r7, #16
 80047ec:	f107 0314 	add.w	r3, r7, #20
 80047f0:	4611      	mov	r1, r2
 80047f2:	4618      	mov	r0, r3
 80047f4:	f005 fc7c 	bl	800a0f0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80047fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d103      	bne.n	800480a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004802:	f005 fc4d 	bl	800a0a0 <HAL_RCC_GetPCLK1Freq>
 8004806:	6378      	str	r0, [r7, #52]	@ 0x34
 8004808:	e004      	b.n	8004814 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800480a:	f005 fc49 	bl	800a0a0 <HAL_RCC_GetPCLK1Freq>
 800480e:	4603      	mov	r3, r0
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004816:	4a23      	ldr	r2, [pc, #140]	@ (80048a4 <HAL_InitTick+0xe4>)
 8004818:	fba2 2303 	umull	r2, r3, r2, r3
 800481c:	0c9b      	lsrs	r3, r3, #18
 800481e:	3b01      	subs	r3, #1
 8004820:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004822:	4b21      	ldr	r3, [pc, #132]	@ (80048a8 <HAL_InitTick+0xe8>)
 8004824:	4a21      	ldr	r2, [pc, #132]	@ (80048ac <HAL_InitTick+0xec>)
 8004826:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004828:	4b1f      	ldr	r3, [pc, #124]	@ (80048a8 <HAL_InitTick+0xe8>)
 800482a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800482e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004830:	4a1d      	ldr	r2, [pc, #116]	@ (80048a8 <HAL_InitTick+0xe8>)
 8004832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004834:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004836:	4b1c      	ldr	r3, [pc, #112]	@ (80048a8 <HAL_InitTick+0xe8>)
 8004838:	2200      	movs	r2, #0
 800483a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800483c:	4b1a      	ldr	r3, [pc, #104]	@ (80048a8 <HAL_InitTick+0xe8>)
 800483e:	2200      	movs	r2, #0
 8004840:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004842:	4b19      	ldr	r3, [pc, #100]	@ (80048a8 <HAL_InitTick+0xe8>)
 8004844:	2200      	movs	r2, #0
 8004846:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004848:	4817      	ldr	r0, [pc, #92]	@ (80048a8 <HAL_InitTick+0xe8>)
 800484a:	f008 f8ca 	bl	800c9e2 <HAL_TIM_Base_Init>
 800484e:	4603      	mov	r3, r0
 8004850:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8004854:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004858:	2b00      	cmp	r3, #0
 800485a:	d11b      	bne.n	8004894 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800485c:	4812      	ldr	r0, [pc, #72]	@ (80048a8 <HAL_InitTick+0xe8>)
 800485e:	f008 f917 	bl	800ca90 <HAL_TIM_Base_Start_IT>
 8004862:	4603      	mov	r3, r0
 8004864:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004868:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800486c:	2b00      	cmp	r3, #0
 800486e:	d111      	bne.n	8004894 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004870:	2036      	movs	r0, #54	@ 0x36
 8004872:	f001 f815 	bl	80058a0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b0f      	cmp	r3, #15
 800487a:	d808      	bhi.n	800488e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800487c:	2200      	movs	r2, #0
 800487e:	6879      	ldr	r1, [r7, #4]
 8004880:	2036      	movs	r0, #54	@ 0x36
 8004882:	f000 fff1 	bl	8005868 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004886:	4a0a      	ldr	r2, [pc, #40]	@ (80048b0 <HAL_InitTick+0xf0>)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6013      	str	r3, [r2, #0]
 800488c:	e002      	b.n	8004894 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004894:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004898:	4618      	mov	r0, r3
 800489a:	3738      	adds	r7, #56	@ 0x38
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40023800 	.word	0x40023800
 80048a4:	431bde83 	.word	0x431bde83
 80048a8:	2000131c 	.word	0x2000131c
 80048ac:	40001000 	.word	0x40001000
 80048b0:	20000064 	.word	0x20000064

080048b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80048b8:	bf00      	nop
 80048ba:	e7fd      	b.n	80048b8 <NMI_Handler+0x4>

080048bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048c0:	bf00      	nop
 80048c2:	e7fd      	b.n	80048c0 <HardFault_Handler+0x4>

080048c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80048c4:	b480      	push	{r7}
 80048c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80048c8:	bf00      	nop
 80048ca:	e7fd      	b.n	80048c8 <MemManage_Handler+0x4>

080048cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80048d0:	bf00      	nop
 80048d2:	e7fd      	b.n	80048d0 <BusFault_Handler+0x4>

080048d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80048d8:	bf00      	nop
 80048da:	e7fd      	b.n	80048d8 <UsageFault_Handler+0x4>

080048dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048e0:	bf00      	nop
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
	...

080048ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80048f0:	4802      	ldr	r0, [pc, #8]	@ (80048fc <TIM6_DAC_IRQHandler+0x10>)
 80048f2:	f008 f99c 	bl	800cc2e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80048f6:	bf00      	nop
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	2000131c 	.word	0x2000131c

08004900 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8004904:	4802      	ldr	r0, [pc, #8]	@ (8004910 <OTG_FS_IRQHandler+0x10>)
 8004906:	f002 fc5a 	bl	80071be <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800490a:	bf00      	nop
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	20011938 	.word	0x20011938

08004914 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004918:	4802      	ldr	r0, [pc, #8]	@ (8004924 <LTDC_IRQHandler+0x10>)
 800491a:	f004 fbc7 	bl	80090ac <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800491e:	bf00      	nop
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	20000a3c 	.word	0x20000a3c

08004928 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800492c:	4802      	ldr	r0, [pc, #8]	@ (8004938 <DMA2D_IRQHandler+0x10>)
 800492e:	f001 fd91 	bl	8006454 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8004932:	bf00      	nop
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	200008a4 	.word	0x200008a4

0800493c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt (USART6_RX).
  */
void DMA2_Stream1_IRQHandler(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004940:	4802      	ldr	r0, [pc, #8]	@ (800494c <DMA2_Stream1_IRQHandler+0x10>)
 8004942:	f001 fac7 	bl	8005ed4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004946:	bf00      	nop
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	200012a8 	.word	0x200012a8

08004950 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  
  // IDLE 인터럽트 체크 (메시지 끝 감지)
  if (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE)) {
 8004954:	4b09      	ldr	r3, [pc, #36]	@ (800497c <USART6_IRQHandler+0x2c>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	f003 0310 	and.w	r3, r3, #16
 800495e:	2b10      	cmp	r3, #16
 8004960:	d106      	bne.n	8004970 <USART6_IRQHandler+0x20>
    __HAL_UART_CLEAR_IDLEFLAG(&huart6);  // IDLE 플래그 클리어
 8004962:	4b06      	ldr	r3, [pc, #24]	@ (800497c <USART6_IRQHandler+0x2c>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2210      	movs	r2, #16
 8004968:	621a      	str	r2, [r3, #32]
    
    // 외부 함수 호출
    extern void USER_UART_IDLECallback(UART_HandleTypeDef *huart);
    USER_UART_IDLECallback(&huart6);
 800496a:	4804      	ldr	r0, [pc, #16]	@ (800497c <USART6_IRQHandler+0x2c>)
 800496c:	f000 fb1e 	bl	8004fac <USER_UART_IDLECallback>
  }

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004970:	4802      	ldr	r0, [pc, #8]	@ (800497c <USART6_IRQHandler+0x2c>)
 8004972:	f009 fba7 	bl	800e0c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004976:	bf00      	nop
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	20000fdc 	.word	0x20000fdc

08004980 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004988:	4a14      	ldr	r2, [pc, #80]	@ (80049dc <_sbrk+0x5c>)
 800498a:	4b15      	ldr	r3, [pc, #84]	@ (80049e0 <_sbrk+0x60>)
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004994:	4b13      	ldr	r3, [pc, #76]	@ (80049e4 <_sbrk+0x64>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d102      	bne.n	80049a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800499c:	4b11      	ldr	r3, [pc, #68]	@ (80049e4 <_sbrk+0x64>)
 800499e:	4a12      	ldr	r2, [pc, #72]	@ (80049e8 <_sbrk+0x68>)
 80049a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80049a2:	4b10      	ldr	r3, [pc, #64]	@ (80049e4 <_sbrk+0x64>)
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4413      	add	r3, r2
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d207      	bcs.n	80049c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80049b0:	f010 fe84 	bl	80156bc <__errno>
 80049b4:	4603      	mov	r3, r0
 80049b6:	220c      	movs	r2, #12
 80049b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80049ba:	f04f 33ff 	mov.w	r3, #4294967295
 80049be:	e009      	b.n	80049d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80049c0:	4b08      	ldr	r3, [pc, #32]	@ (80049e4 <_sbrk+0x64>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80049c6:	4b07      	ldr	r3, [pc, #28]	@ (80049e4 <_sbrk+0x64>)
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4413      	add	r3, r2
 80049ce:	4a05      	ldr	r2, [pc, #20]	@ (80049e4 <_sbrk+0x64>)
 80049d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80049d2:	68fb      	ldr	r3, [r7, #12]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3718      	adds	r7, #24
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	20050000 	.word	0x20050000
 80049e0:	00000400 	.word	0x00000400
 80049e4:	20001368 	.word	0x20001368
 80049e8:	20011e60 	.word	0x20011e60

080049ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80049f0:	4b06      	ldr	r3, [pc, #24]	@ (8004a0c <SystemInit+0x20>)
 80049f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049f6:	4a05      	ldr	r2, [pc, #20]	@ (8004a0c <SystemInit+0x20>)
 80049f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80049fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a00:	bf00      	nop
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	e000ed00 	.word	0xe000ed00

08004a10 <TIME_GetCurrentMs>:
// ============================================================================
// 기본 시간 함수
// ============================================================================

uint32_t TIME_GetCurrentMs(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0
    return TIME_Platform_GetCurrentMs();
 8004a14:	f000 f803 	bl	8004a1e <TIME_Platform_GetCurrentMs>
 8004a18:	4603      	mov	r3, r0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <TIME_Platform_GetCurrentMs>:
#include "time.h"
#include "stm32f7xx_hal.h"

// STM32용 플랫폼 함수들
uint32_t TIME_Platform_GetCurrentMs(void)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	af00      	add	r7, sp, #0
    return HAL_GetTick();  // HAL_GetTick()은 1ms 단위로 시간을 반환
 8004a22:	f000 fba1 	bl	8005168 <HAL_GetTick>
 8004a26:	4603      	mov	r3, r0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <LOGGER_Connect>:
    .enable_network = true,
    .server_ip = "",
    .server_port = 0
};

LoggerStatus LOGGER_Connect(const char* server_ip, int port) {
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
    if (server_ip == NULL) return LOGGER_STATUS_ERROR;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d102      	bne.n	8004a42 <LOGGER_Connect+0x16>
 8004a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a40:	e016      	b.n	8004a70 <LOGGER_Connect+0x44>
    strncpy(current_config.server_ip, server_ip, sizeof(current_config.server_ip) - 1);
 8004a42:	223f      	movs	r2, #63	@ 0x3f
 8004a44:	6879      	ldr	r1, [r7, #4]
 8004a46:	480c      	ldr	r0, [pc, #48]	@ (8004a78 <LOGGER_Connect+0x4c>)
 8004a48:	f010 fdfe 	bl	8015648 <strncpy>
    current_config.server_port = port;
 8004a4c:	4a0b      	ldr	r2, [pc, #44]	@ (8004a7c <LOGGER_Connect+0x50>)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	6453      	str	r3, [r2, #68]	@ 0x44
    LoggerStatus status = LOGGER_Platform_Connect(server_ip, port);
 8004a52:	6839      	ldr	r1, [r7, #0]
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 f8f1 	bl	8004c3c <LOGGER_Platform_Connect>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	73fb      	strb	r3, [r7, #15]
    if (status == LOGGER_STATUS_OK) {
 8004a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d102      	bne.n	8004a6c <LOGGER_Connect+0x40>
        logger_connected = true;
 8004a66:	4b06      	ldr	r3, [pc, #24]	@ (8004a80 <LOGGER_Connect+0x54>)
 8004a68:	2201      	movs	r2, #1
 8004a6a:	701a      	strb	r2, [r3, #0]
    }
    return status;
 8004a6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	2000001f 	.word	0x2000001f
 8004a7c:	2000001c 	.word	0x2000001c
 8004a80:	2000136c 	.word	0x2000136c

08004a84 <LOGGER_SetFilterLevel>:
bool LOGGER_IsConnected(void) {
    return logger_connected;
}

// Logger 제어 함수들
void LOGGER_SetFilterLevel(LogLevel min_level) {
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	71fb      	strb	r3, [r7, #7]
    filter_level = min_level;
 8004a8e:	4a04      	ldr	r2, [pc, #16]	@ (8004aa0 <LOGGER_SetFilterLevel+0x1c>)
 8004a90:	79fb      	ldrb	r3, [r7, #7]
 8004a92:	7013      	strb	r3, [r2, #0]
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	2000136e 	.word	0x2000136e

08004aa4 <LOGGER_SetMode>:

void LOGGER_SetMode(LoggerMode_t mode) {
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	4603      	mov	r3, r0
 8004aac:	71fb      	strb	r3, [r7, #7]
    current_mode = mode;
 8004aae:	4a0d      	ldr	r2, [pc, #52]	@ (8004ae4 <LOGGER_SetMode+0x40>)
 8004ab0:	79fb      	ldrb	r3, [r7, #7]
 8004ab2:	7013      	strb	r3, [r2, #0]
    
    // 모드에 따른 연결 상태 설정
    if (mode == LOGGER_MODE_TERMINAL_ONLY) {
 8004ab4:	79fb      	ldrb	r3, [r7, #7]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d103      	bne.n	8004ac2 <LOGGER_SetMode+0x1e>
        logger_connected = true;  // 터미널은 항상 연결됨
 8004aba:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae8 <LOGGER_SetMode+0x44>)
 8004abc:	2201      	movs	r2, #1
 8004abe:	701a      	strb	r2, [r3, #0]
    } else if (mode == LOGGER_MODE_SD_ONLY || mode == LOGGER_MODE_DUAL) {
        // SD 백엔드 사용 시 Network 연결 상태에 따라 결정
        logger_connected = Network_IsConnected();
    }
}
 8004ac0:	e00b      	b.n	8004ada <LOGGER_SetMode+0x36>
    } else if (mode == LOGGER_MODE_SD_ONLY || mode == LOGGER_MODE_DUAL) {
 8004ac2:	79fb      	ldrb	r3, [r7, #7]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d002      	beq.n	8004ace <LOGGER_SetMode+0x2a>
 8004ac8:	79fb      	ldrb	r3, [r7, #7]
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d105      	bne.n	8004ada <LOGGER_SetMode+0x36>
        logger_connected = Network_IsConnected();
 8004ace:	f7fc f9a7 	bl	8000e20 <Network_IsConnected>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	4b04      	ldr	r3, [pc, #16]	@ (8004ae8 <LOGGER_SetMode+0x44>)
 8004ad8:	701a      	strb	r2, [r3, #0]
}
 8004ada:	bf00      	nop
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	2000136d 	.word	0x2000136d
 8004ae8:	2000136c 	.word	0x2000136c

08004aec <LOGGER_SendFormatted>:

LoggerMode_t LOGGER_GetMode(void) {
    return current_mode;
}

void LOGGER_SendFormatted(LogLevel level, const char* format, ...) {
 8004aec:	b40e      	push	{r1, r2, r3}
 8004aee:	b590      	push	{r4, r7, lr}
 8004af0:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	4602      	mov	r2, r0
 8004af8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004afc:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8004b00:	701a      	strb	r2, [r3, #0]
    // 필터 레벨 체크
    if (level < filter_level) return;
 8004b02:	4b49      	ldr	r3, [pc, #292]	@ (8004c28 <LOGGER_SendFormatted+0x13c>)
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004b0a:	f2a2 2219 	subw	r2, r2, #537	@ 0x219
 8004b0e:	7812      	ldrb	r2, [r2, #0]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d37b      	bcc.n	8004c0c <LOGGER_SendFormatted+0x120>
    if (level < current_config.level) return;
 8004b14:	4b45      	ldr	r3, [pc, #276]	@ (8004c2c <LOGGER_SendFormatted+0x140>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004b1c:	f2a2 2219 	subw	r2, r2, #537	@ 0x219
 8004b20:	7812      	ldrb	r2, [r2, #0]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d374      	bcc.n	8004c10 <LOGGER_SendFormatted+0x124>
    
    char buffer[512];
    const char* level_str[] = {"[DEBUG]", "[INFO]", "[WARN]", "[ERROR]"};
 8004b26:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b2a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004b2e:	4a40      	ldr	r2, [pc, #256]	@ (8004c30 <LOGGER_SendFormatted+0x144>)
 8004b30:	461c      	mov	r4, r3
 8004b32:	4613      	mov	r3, r2
 8004b34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    // 레벨 문자열 추가
    int offset = snprintf(buffer, sizeof(buffer), "%s ", level_str[level]);
 8004b3a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b3e:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8004b42:	781a      	ldrb	r2, [r3, #0]
 8004b44:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b48:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b50:	f107 001c 	add.w	r0, r7, #28
 8004b54:	4a37      	ldr	r2, [pc, #220]	@ (8004c34 <LOGGER_SendFormatted+0x148>)
 8004b56:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004b5a:	f010 fcd9 	bl	8015510 <sniprintf>
 8004b5e:	f8c7 021c 	str.w	r0, [r7, #540]	@ 0x21c
    
    // 가변 인수 처리
    va_list args;
    va_start(args, format);
 8004b62:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8004b66:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b6a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004b6e:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer + offset, sizeof(buffer) - offset, format, args);
 8004b70:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004b74:	f107 021c 	add.w	r2, r7, #28
 8004b78:	18d0      	adds	r0, r2, r3
 8004b7a:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004b7e:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 8004b82:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b86:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8004b90:	f010 fd44 	bl	801561c <vsniprintf>
    va_end(args);
    
    // 모드에 따른 출력 처리
    switch (current_mode) {
 8004b94:	4b28      	ldr	r3, [pc, #160]	@ (8004c38 <LOGGER_SendFormatted+0x14c>)
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d01f      	beq.n	8004bdc <LOGGER_SendFormatted+0xf0>
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	dc3c      	bgt.n	8004c1a <LOGGER_SendFormatted+0x12e>
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d002      	beq.n	8004baa <LOGGER_SendFormatted+0xbe>
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d006      	beq.n	8004bb6 <LOGGER_SendFormatted+0xca>
 8004ba8:	e037      	b.n	8004c1a <LOGGER_SendFormatted+0x12e>
        case LOGGER_MODE_TERMINAL_ONLY:
            LOGGER_Platform_Send(buffer);
 8004baa:	f107 031c 	add.w	r3, r7, #28
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 f850 	bl	8004c54 <LOGGER_Platform_Send>
            break;
 8004bb4:	e031      	b.n	8004c1a <LOGGER_SendFormatted+0x12e>
            
        case LOGGER_MODE_SD_ONLY:
            if (Network_IsConnected()) {
 8004bb6:	f7fc f933 	bl	8000e20 <Network_IsConnected>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d029      	beq.n	8004c14 <LOGGER_SendFormatted+0x128>
                Network_SendBinary(buffer, strlen(buffer) + 1);
 8004bc0:	f107 031c 	add.w	r3, r7, #28
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7fb fb2d 	bl	8000224 <strlen>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	1c5a      	adds	r2, r3, #1
 8004bce:	f107 031c 	add.w	r3, r7, #28
 8004bd2:	4611      	mov	r1, r2
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7fc f8d9 	bl	8000d8c <Network_SendBinary>
            }
            break;
 8004bda:	e01b      	b.n	8004c14 <LOGGER_SendFormatted+0x128>
            
        case LOGGER_MODE_DUAL:
            // 터미널 출력 (실시간)
            LOGGER_Platform_Send(buffer);
 8004bdc:	f107 031c 	add.w	r3, r7, #28
 8004be0:	4618      	mov	r0, r3
 8004be2:	f000 f837 	bl	8004c54 <LOGGER_Platform_Send>
            // SD 출력 (에러 무시)
            if (Network_IsConnected()) {
 8004be6:	f7fc f91b 	bl	8000e20 <Network_IsConnected>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d013      	beq.n	8004c18 <LOGGER_SendFormatted+0x12c>
                Network_SendBinary(buffer, strlen(buffer) + 1);
 8004bf0:	f107 031c 	add.w	r3, r7, #28
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7fb fb15 	bl	8000224 <strlen>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	1c5a      	adds	r2, r3, #1
 8004bfe:	f107 031c 	add.w	r3, r7, #28
 8004c02:	4611      	mov	r1, r2
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7fc f8c1 	bl	8000d8c <Network_SendBinary>
            }
            break;
 8004c0a:	e005      	b.n	8004c18 <LOGGER_SendFormatted+0x12c>
    if (level < filter_level) return;
 8004c0c:	bf00      	nop
 8004c0e:	e004      	b.n	8004c1a <LOGGER_SendFormatted+0x12e>
    if (level < current_config.level) return;
 8004c10:	bf00      	nop
 8004c12:	e002      	b.n	8004c1a <LOGGER_SendFormatted+0x12e>
            break;
 8004c14:	bf00      	nop
 8004c16:	e000      	b.n	8004c1a <LOGGER_SendFormatted+0x12e>
            break;
 8004c18:	bf00      	nop
    }
}
 8004c1a:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004c24:	b003      	add	sp, #12
 8004c26:	4770      	bx	lr
 8004c28:	2000136e 	.word	0x2000136e
 8004c2c:	2000001c 	.word	0x2000001c
 8004c30:	08018d68 	.word	0x08018d68
 8004c34:	08018d78 	.word	0x08018d78
 8004c38:	2000136d 	.word	0x2000136d

08004c3c <LOGGER_Platform_Connect>:
#include "stm32f7xx_hal.h"
#include <string.h>

extern UART_HandleTypeDef huart1; // CubeMX가 생성한 UART1 (Virtual COM Port)

LoggerStatus LOGGER_Platform_Connect(const char* server_ip, int port) {
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
    (void)server_ip; (void)port;
    // STM32에서는 UART1이 이미 초기화되어 있으므로 추가 설정 불필요
    return LOGGER_STATUS_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <LOGGER_Platform_Send>:

LoggerStatus LOGGER_Platform_Disconnect(void) {
    return LOGGER_STATUS_OK;
}

LoggerStatus LOGGER_Platform_Send(const char* message) {
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
    if (message == NULL) return LOGGER_STATUS_ERROR;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d102      	bne.n	8004c68 <LOGGER_Platform_Send+0x14>
 8004c62:	f04f 33ff 	mov.w	r3, #4294967295
 8004c66:	e01c      	b.n	8004ca2 <LOGGER_Platform_Send+0x4e>
    
    // UART1을 통해 메시지 전송 (Virtual COM Port)
    int len = strlen(message);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f7fb fadb 	bl	8000224 <strlen>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	60fb      	str	r3, [r7, #12]
    if (len > 0) {
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	dd12      	ble.n	8004c9e <LOGGER_Platform_Send+0x4a>
        if (HAL_UART_Transmit(&huart1, (uint8_t*)message, len, 1000) == HAL_OK) {
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c80:	6879      	ldr	r1, [r7, #4]
 8004c82:	480a      	ldr	r0, [pc, #40]	@ (8004cac <LOGGER_Platform_Send+0x58>)
 8004c84:	f008 fff6 	bl	800dc74 <HAL_UART_Transmit>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d107      	bne.n	8004c9e <LOGGER_Platform_Send+0x4a>
            // 줄바꿈 추가
            HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 100);
 8004c8e:	2364      	movs	r3, #100	@ 0x64
 8004c90:	2202      	movs	r2, #2
 8004c92:	4907      	ldr	r1, [pc, #28]	@ (8004cb0 <LOGGER_Platform_Send+0x5c>)
 8004c94:	4805      	ldr	r0, [pc, #20]	@ (8004cac <LOGGER_Platform_Send+0x58>)
 8004c96:	f008 ffed 	bl	800dc74 <HAL_UART_Transmit>
            return LOGGER_STATUS_OK;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	e001      	b.n	8004ca2 <LOGGER_Platform_Send+0x4e>
        }
    }
    return LOGGER_STATUS_ERROR;
 8004c9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	20000f54 	.word	0x20000f54
 8004cb0:	08018d7c 	.word	0x08018d7c

08004cb4 <UART_Send>:

    return status;
}

UartStatus UART_Send(const char* data)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
    if (!uart_connected) {
 8004cbc:	4b19      	ldr	r3, [pc, #100]	@ (8004d24 <UART_Send+0x70>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	f083 0301 	eor.w	r3, r3, #1
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d005      	beq.n	8004cd6 <UART_Send+0x22>
        LOG_ERROR("[UART] Send failed: not connected");
 8004cca:	4917      	ldr	r1, [pc, #92]	@ (8004d28 <UART_Send+0x74>)
 8004ccc:	2003      	movs	r0, #3
 8004cce:	f7ff ff0d 	bl	8004aec <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e022      	b.n	8004d1c <UART_Send+0x68>
    }

    if (data == NULL) {
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d105      	bne.n	8004ce8 <UART_Send+0x34>
        LOG_ERROR("[UART] Send failed: NULL data");
 8004cdc:	4913      	ldr	r1, [pc, #76]	@ (8004d2c <UART_Send+0x78>)
 8004cde:	2003      	movs	r0, #3
 8004ce0:	f7ff ff04 	bl	8004aec <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e019      	b.n	8004d1c <UART_Send+0x68>
    }

    LOG_DEBUG("[UART] Sending data: %s", data);
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	4911      	ldr	r1, [pc, #68]	@ (8004d30 <UART_Send+0x7c>)
 8004cec:	2000      	movs	r0, #0
 8004cee:	f7ff fefd 	bl	8004aec <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Send(data);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f850 	bl	8004d98 <UART_Platform_Send>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d105      	bne.n	8004d0e <UART_Send+0x5a>
        LOG_DEBUG("[UART] Send successful: %s", data);
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	490b      	ldr	r1, [pc, #44]	@ (8004d34 <UART_Send+0x80>)
 8004d06:	2000      	movs	r0, #0
 8004d08:	f7ff fef0 	bl	8004aec <LOGGER_SendFormatted>
 8004d0c:	e005      	b.n	8004d1a <UART_Send+0x66>
    } else {
        LOG_ERROR("[UART] Send failed: %s (status: %d)", data, status);
 8004d0e:	7bfb      	ldrb	r3, [r7, #15]
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	4909      	ldr	r1, [pc, #36]	@ (8004d38 <UART_Send+0x84>)
 8004d14:	2003      	movs	r0, #3
 8004d16:	f7ff fee9 	bl	8004aec <LOGGER_SendFormatted>
    }

    return status;
 8004d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	2000136f 	.word	0x2000136f
 8004d28:	08018e0c 	.word	0x08018e0c
 8004d2c:	08018e30 	.word	0x08018e30
 8004d30:	08018e50 	.word	0x08018e50
 8004d34:	08018e68 	.word	0x08018e68
 8004d38:	08018e84 	.word	0x08018e84

08004d3c <flush_rx_buffer>:
// 내부 상태 변수들
static bool uart_initialized = false;
static bool dma_receiving = false;

// 수신 버퍼 플러시 함수
static void flush_rx_buffer(void) {
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
    uint8_t dummy;
    int flush_count = 0;
 8004d42:	2300      	movs	r3, #0
 8004d44:	607b      	str	r3, [r7, #4]
    
    // 방법 1: 직접 레지스터 체크로 기존 데이터 클리어
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 8004d46:	e007      	b.n	8004d58 <flush_rx_buffer+0x1c>
        dummy = (uint8_t)(huart6.Instance->RDR & 0xFF);
 8004d48:	4b12      	ldr	r3, [pc, #72]	@ (8004d94 <flush_rx_buffer+0x58>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	70fb      	strb	r3, [r7, #3]
        flush_count++;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	3301      	adds	r3, #1
 8004d56:	607b      	str	r3, [r7, #4]
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 8004d58:	4b0e      	ldr	r3, [pc, #56]	@ (8004d94 <flush_rx_buffer+0x58>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	f003 0320 	and.w	r3, r3, #32
 8004d62:	2b20      	cmp	r3, #32
 8004d64:	d106      	bne.n	8004d74 <flush_rx_buffer+0x38>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b63      	cmp	r3, #99	@ 0x63
 8004d6a:	dded      	ble.n	8004d48 <flush_rx_buffer+0xc>
    }
    
    // 방법 2: HAL로 남은 데이터 클리어 (타임아웃 1ms)
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 8004d6c:	e002      	b.n	8004d74 <flush_rx_buffer+0x38>
        flush_count++;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	3301      	adds	r3, #1
 8004d72:	607b      	str	r3, [r7, #4]
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 8004d74:	1cf9      	adds	r1, r7, #3
 8004d76:	2301      	movs	r3, #1
 8004d78:	2201      	movs	r2, #1
 8004d7a:	4806      	ldr	r0, [pc, #24]	@ (8004d94 <flush_rx_buffer+0x58>)
 8004d7c:	f009 f803 	bl	800dd86 <HAL_UART_Receive>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d102      	bne.n	8004d8c <flush_rx_buffer+0x50>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b63      	cmp	r3, #99	@ 0x63
 8004d8a:	ddf0      	ble.n	8004d6e <flush_rx_buffer+0x32>
    }
}
 8004d8c:	bf00      	nop
 8004d8e:	3708      	adds	r7, #8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	20000fdc 	.word	0x20000fdc

08004d98 <UART_Platform_Send>:
    uart_initialized = false;
    
    return UART_STATUS_OK;
}

UartStatus UART_Platform_Send(const char* data) {
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
    if (data == NULL || !uart_initialized) return UART_STATUS_ERROR;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d006      	beq.n	8004db4 <UART_Platform_Send+0x1c>
 8004da6:	4b17      	ldr	r3, [pc, #92]	@ (8004e04 <UART_Platform_Send+0x6c>)
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	f083 0301 	eor.w	r3, r3, #1
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <UART_Platform_Send+0x20>
 8004db4:	2301      	movs	r3, #1
 8004db6:	e021      	b.n	8004dfc <UART_Platform_Send+0x64>
    
    int len = strlen(data);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f7fb fa33 	bl	8000224 <strlen>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	60fb      	str	r3, [r7, #12]
    if (len == 0) return UART_STATUS_OK;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d101      	bne.n	8004dcc <UART_Platform_Send+0x34>
 8004dc8:	2300      	movs	r3, #0
 8004dca:	e017      	b.n	8004dfc <UART_Platform_Send+0x64>
    
    // 송신 전 수신 버퍼 플러시 (깨끗한 상태에서 시작)
    flush_rx_buffer();
 8004dcc:	f7ff ffb6 	bl	8004d3c <flush_rx_buffer>
    
    // 단순한 송신
    HAL_StatusTypeDef tx_status = HAL_UART_Transmit(&huart6, (uint8_t*)data, len, 1000);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004dd8:	6879      	ldr	r1, [r7, #4]
 8004dda:	480b      	ldr	r0, [pc, #44]	@ (8004e08 <UART_Platform_Send+0x70>)
 8004ddc:	f008 ff4a 	bl	800dc74 <HAL_UART_Transmit>
 8004de0:	4603      	mov	r3, r0
 8004de2:	72fb      	strb	r3, [r7, #11]
    
    if (tx_status == HAL_OK) {
 8004de4:	7afb      	ldrb	r3, [r7, #11]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <UART_Platform_Send+0x56>
        return UART_STATUS_OK;
 8004dea:	2300      	movs	r3, #0
 8004dec:	e006      	b.n	8004dfc <UART_Platform_Send+0x64>
    } else {
        LOG_ERROR("[UART_STM32] ✗ Transmission failed (HAL status: %d)", tx_status);
 8004dee:	7afb      	ldrb	r3, [r7, #11]
 8004df0:	461a      	mov	r2, r3
 8004df2:	4906      	ldr	r1, [pc, #24]	@ (8004e0c <UART_Platform_Send+0x74>)
 8004df4:	2003      	movs	r0, #3
 8004df6:	f7ff fe79 	bl	8004aec <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004dfa:	2301      	movs	r3, #1
    }
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	20001574 	.word	0x20001574
 8004e08:	20000fdc 	.word	0x20000fdc
 8004e0c:	08019418 	.word	0x08019418

08004e10 <HAL_UART_RxCpltCallback>:
// ============================================================================
// HAL UART 콜백 함수들 - main.c에서 이동됨
// ============================================================================

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8004e48 <HAL_UART_RxCpltCallback+0x38>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d10e      	bne.n	8004e40 <HAL_UART_RxCpltCallback+0x30>
  {
    // DMA 수신 완료 (전체 버퍼) - 거의 발생하지 않음
    uart_rx_complete_flag = 1;
 8004e22:	4b0a      	ldr	r3, [pc, #40]	@ (8004e4c <HAL_UART_RxCpltCallback+0x3c>)
 8004e24:	2201      	movs	r2, #1
 8004e26:	701a      	strb	r2, [r3, #0]
    uart_rx_length = sizeof(rx_buffer);
 8004e28:	4b09      	ldr	r3, [pc, #36]	@ (8004e50 <HAL_UART_RxCpltCallback+0x40>)
 8004e2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e2e:	801a      	strh	r2, [r3, #0]
    LOG_INFO("[DMA] RxCpltCallback: Full buffer received (%d bytes)", uart_rx_length);
 8004e30:	4b07      	ldr	r3, [pc, #28]	@ (8004e50 <HAL_UART_RxCpltCallback+0x40>)
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	461a      	mov	r2, r3
 8004e38:	4906      	ldr	r1, [pc, #24]	@ (8004e54 <HAL_UART_RxCpltCallback+0x44>)
 8004e3a:	2001      	movs	r0, #1
 8004e3c:	f7ff fe56 	bl	8004aec <LOGGER_SendFormatted>
  }
}
 8004e40:	bf00      	nop
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	40011400 	.word	0x40011400
 8004e4c:	20001370 	.word	0x20001370
 8004e50:	20001372 	.word	0x20001372
 8004e54:	080195dc 	.word	0x080195dc

08004e58 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a05      	ldr	r2, [pc, #20]	@ (8004e7c <HAL_UART_RxHalfCpltCallback+0x24>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d103      	bne.n	8004e72 <HAL_UART_RxHalfCpltCallback+0x1a>
  {
    // DMA 수신 절반 완료 - NORMAL 모드에서는 처리하지 않음 (IDLE 인터럽트가 처리)
    LOG_WARN("[DMA] RxHalfCpltCallback: Half buffer reached but ignoring in NORMAL mode");
 8004e6a:	4905      	ldr	r1, [pc, #20]	@ (8004e80 <HAL_UART_RxHalfCpltCallback+0x28>)
 8004e6c:	2002      	movs	r0, #2
 8004e6e:	f7ff fe3d 	bl	8004aec <LOGGER_SendFormatted>
    // uart_rx_complete_flag는 설정하지 않음 - IDLE 인터럽트에서만 설정
  }
}
 8004e72:	bf00      	nop
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	40011400 	.word	0x40011400
 8004e80:	08019614 	.word	0x08019614

08004e84 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a3c      	ldr	r2, [pc, #240]	@ (8004f84 <HAL_UART_ErrorCallback+0x100>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d171      	bne.n	8004f7a <HAL_UART_ErrorCallback+0xf6>
  {
    // UART 에러 발생
    uart_rx_error_flag = 1;
 8004e96:	4b3c      	ldr	r3, [pc, #240]	@ (8004f88 <HAL_UART_ErrorCallback+0x104>)
 8004e98:	2201      	movs	r2, #1
 8004e9a:	701a      	strb	r2, [r3, #0]
    LOG_WARN("[DMA] ErrorCallback: UART error occurred");
 8004e9c:	493b      	ldr	r1, [pc, #236]	@ (8004f8c <HAL_UART_ErrorCallback+0x108>)
 8004e9e:	2002      	movs	r0, #2
 8004ea0:	f7ff fe24 	bl	8004aec <LOGGER_SendFormatted>
    
    // 모든 에러 플래그 클리어
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) {
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	f003 0308 	and.w	r3, r3, #8
 8004eae:	2b08      	cmp	r3, #8
 8004eb0:	d107      	bne.n	8004ec2 <HAL_UART_ErrorCallback+0x3e>
      __HAL_UART_CLEAR_OREFLAG(huart);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2208      	movs	r2, #8
 8004eb8:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Overrun error cleared");
 8004eba:	4935      	ldr	r1, [pc, #212]	@ (8004f90 <HAL_UART_ErrorCallback+0x10c>)
 8004ebc:	2002      	movs	r0, #2
 8004ebe:	f7ff fe15 	bl	8004aec <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) {
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	69db      	ldr	r3, [r3, #28]
 8004ec8:	f003 0304 	and.w	r3, r3, #4
 8004ecc:	2b04      	cmp	r3, #4
 8004ece:	d107      	bne.n	8004ee0 <HAL_UART_ErrorCallback+0x5c>
      __HAL_UART_CLEAR_NEFLAG(huart);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2204      	movs	r2, #4
 8004ed6:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Noise error cleared");
 8004ed8:	492e      	ldr	r1, [pc, #184]	@ (8004f94 <HAL_UART_ErrorCallback+0x110>)
 8004eda:	2002      	movs	r0, #2
 8004edc:	f7ff fe06 	bl	8004aec <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) {
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d107      	bne.n	8004efe <HAL_UART_ErrorCallback+0x7a>
      __HAL_UART_CLEAR_FEFLAG(huart);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Frame error cleared");
 8004ef6:	4928      	ldr	r1, [pc, #160]	@ (8004f98 <HAL_UART_ErrorCallback+0x114>)
 8004ef8:	2002      	movs	r0, #2
 8004efa:	f7ff fdf7 	bl	8004aec <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) {
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	69db      	ldr	r3, [r3, #28]
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d107      	bne.n	8004f1c <HAL_UART_ErrorCallback+0x98>
      __HAL_UART_CLEAR_PEFLAG(huart);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2201      	movs	r2, #1
 8004f12:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Parity error cleared");
 8004f14:	4921      	ldr	r1, [pc, #132]	@ (8004f9c <HAL_UART_ErrorCallback+0x118>)
 8004f16:	2002      	movs	r0, #2
 8004f18:	f7ff fde8 	bl	8004aec <LOGGER_SendFormatted>
    }
    
    // UART와 DMA 상태 강제 리셋
    HAL_UART_DMAStop(huart);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f009 f83e 	bl	800df9e <HAL_UART_DMAStop>
    huart->gState = HAL_UART_STATE_READY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2220      	movs	r2, #32
 8004f26:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->RxState = HAL_UART_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (huart->hdmarx != NULL) {
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d004      	beq.n	8004f42 <HAL_UART_ErrorCallback+0xbe>
      huart->hdmarx->State = HAL_DMA_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 버퍼 클리어 후 DMA 재시작 (일반 모드)
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8004f42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f46:	2100      	movs	r1, #0
 8004f48:	4815      	ldr	r0, [pc, #84]	@ (8004fa0 <HAL_UART_ErrorCallback+0x11c>)
 8004f4a:	f010 fb75 	bl	8015638 <memset>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(huart, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8004f4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f52:	4913      	ldr	r1, [pc, #76]	@ (8004fa0 <HAL_UART_ErrorCallback+0x11c>)
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f008 ffde 	bl	800df16 <HAL_UART_Receive_DMA>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d104      	bne.n	8004f6e <HAL_UART_ErrorCallback+0xea>
      LOG_INFO("[DMA] Error recovery: DMA restarted successfully");
 8004f64:	490f      	ldr	r1, [pc, #60]	@ (8004fa4 <HAL_UART_ErrorCallback+0x120>)
 8004f66:	2001      	movs	r0, #1
 8004f68:	f7ff fdc0 	bl	8004aec <LOGGER_SendFormatted>
    } else {
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
    }
  }
}
 8004f6c:	e005      	b.n	8004f7a <HAL_UART_ErrorCallback+0xf6>
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
 8004f6e:	7bfb      	ldrb	r3, [r7, #15]
 8004f70:	461a      	mov	r2, r3
 8004f72:	490d      	ldr	r1, [pc, #52]	@ (8004fa8 <HAL_UART_ErrorCallback+0x124>)
 8004f74:	2003      	movs	r0, #3
 8004f76:	f7ff fdb9 	bl	8004aec <LOGGER_SendFormatted>
}
 8004f7a:	bf00      	nop
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	40011400 	.word	0x40011400
 8004f88:	20001371 	.word	0x20001371
 8004f8c:	08019660 	.word	0x08019660
 8004f90:	0801968c 	.word	0x0801968c
 8004f94:	080196a8 	.word	0x080196a8
 8004f98:	080196c4 	.word	0x080196c4
 8004f9c:	080196e0 	.word	0x080196e0
 8004fa0:	20001374 	.word	0x20001374
 8004fa4:	080196fc 	.word	0x080196fc
 8004fa8:	08019730 	.word	0x08019730

08004fac <USER_UART_IDLECallback>:

// UART IDLE 인터럽트 콜백 (메시지 끝 감지)
void USER_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af02      	add	r7, sp, #8
 8004fb2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a3e      	ldr	r2, [pc, #248]	@ (80050b4 <USER_UART_IDLECallback+0x108>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d175      	bne.n	80050aa <USER_UART_IDLECallback+0xfe>
  {
    // UART 에러 상태 체크
    uint32_t error_flags = 0;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) error_flags |= 0x01;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	69db      	ldr	r3, [r3, #28]
 8004fc8:	f003 0308 	and.w	r3, r3, #8
 8004fcc:	2b08      	cmp	r3, #8
 8004fce:	d103      	bne.n	8004fd8 <USER_UART_IDLECallback+0x2c>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f043 0301 	orr.w	r3, r3, #1
 8004fd6:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) error_flags |= 0x02;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d103      	bne.n	8004fee <USER_UART_IDLECallback+0x42>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f043 0302 	orr.w	r3, r3, #2
 8004fec:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) error_flags |= 0x04;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	69db      	ldr	r3, [r3, #28]
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b04      	cmp	r3, #4
 8004ffa:	d103      	bne.n	8005004 <USER_UART_IDLECallback+0x58>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f043 0304 	orr.w	r3, r3, #4
 8005002:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) error_flags |= 0x08;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	69db      	ldr	r3, [r3, #28]
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b01      	cmp	r3, #1
 8005010:	d103      	bne.n	800501a <USER_UART_IDLECallback+0x6e>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f043 0308 	orr.w	r3, r3, #8
 8005018:	60fb      	str	r3, [r7, #12]
    
    // IDLE 감지 - 메시지 끝
    uint16_t remaining = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	817b      	strh	r3, [r7, #10]
    uart_rx_length = sizeof(rx_buffer) - remaining;
 8005024:	897b      	ldrh	r3, [r7, #10]
 8005026:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800502a:	b29a      	uxth	r2, r3
 800502c:	4b22      	ldr	r3, [pc, #136]	@ (80050b8 <USER_UART_IDLECallback+0x10c>)
 800502e:	801a      	strh	r2, [r3, #0]
    
    if (uart_rx_length > 0) {
 8005030:	4b21      	ldr	r3, [pc, #132]	@ (80050b8 <USER_UART_IDLECallback+0x10c>)
 8005032:	881b      	ldrh	r3, [r3, #0]
 8005034:	b29b      	uxth	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d033      	beq.n	80050a2 <USER_UART_IDLECallback+0xf6>
      uart_rx_complete_flag = 1;
 800503a:	4b20      	ldr	r3, [pc, #128]	@ (80050bc <USER_UART_IDLECallback+0x110>)
 800503c:	2201      	movs	r2, #1
 800503e:	701a      	strb	r2, [r3, #0]
      if (error_flags != 0) {
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d009      	beq.n	800505a <USER_UART_IDLECallback+0xae>
        LOG_WARN("[DMA] IDLE detected: %d bytes received (UART errors: 0x%02lX)", uart_rx_length, error_flags);
 8005046:	4b1c      	ldr	r3, [pc, #112]	@ (80050b8 <USER_UART_IDLECallback+0x10c>)
 8005048:	881b      	ldrh	r3, [r3, #0]
 800504a:	b29b      	uxth	r3, r3
 800504c:	461a      	mov	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	491b      	ldr	r1, [pc, #108]	@ (80050c0 <USER_UART_IDLECallback+0x114>)
 8005052:	2002      	movs	r0, #2
 8005054:	f7ff fd4a 	bl	8004aec <LOGGER_SendFormatted>
 8005058:	e007      	b.n	800506a <USER_UART_IDLECallback+0xbe>
      } else {
        LOG_INFO("[DMA] IDLE detected: %d bytes received", uart_rx_length);
 800505a:	4b17      	ldr	r3, [pc, #92]	@ (80050b8 <USER_UART_IDLECallback+0x10c>)
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	b29b      	uxth	r3, r3
 8005060:	461a      	mov	r2, r3
 8005062:	4918      	ldr	r1, [pc, #96]	@ (80050c4 <USER_UART_IDLECallback+0x118>)
 8005064:	2001      	movs	r0, #1
 8005066:	f7ff fd41 	bl	8004aec <LOGGER_SendFormatted>
      }
      
      // 첫 몇 바이트 확인 (디버깅용)
      if (uart_rx_length >= 4) {
 800506a:	4b13      	ldr	r3, [pc, #76]	@ (80050b8 <USER_UART_IDLECallback+0x10c>)
 800506c:	881b      	ldrh	r3, [r3, #0]
 800506e:	b29b      	uxth	r3, r3
 8005070:	2b03      	cmp	r3, #3
 8005072:	d912      	bls.n	800509a <USER_UART_IDLECallback+0xee>
        LOG_DEBUG("[DMA] First 4 bytes: %02X %02X %02X %02X", 
 8005074:	4b14      	ldr	r3, [pc, #80]	@ (80050c8 <USER_UART_IDLECallback+0x11c>)
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	4619      	mov	r1, r3
 800507a:	4b13      	ldr	r3, [pc, #76]	@ (80050c8 <USER_UART_IDLECallback+0x11c>)
 800507c:	785b      	ldrb	r3, [r3, #1]
 800507e:	4618      	mov	r0, r3
 8005080:	4b11      	ldr	r3, [pc, #68]	@ (80050c8 <USER_UART_IDLECallback+0x11c>)
 8005082:	789b      	ldrb	r3, [r3, #2]
 8005084:	461a      	mov	r2, r3
 8005086:	4b10      	ldr	r3, [pc, #64]	@ (80050c8 <USER_UART_IDLECallback+0x11c>)
 8005088:	78db      	ldrb	r3, [r3, #3]
 800508a:	9301      	str	r3, [sp, #4]
 800508c:	9200      	str	r2, [sp, #0]
 800508e:	4603      	mov	r3, r0
 8005090:	460a      	mov	r2, r1
 8005092:	490e      	ldr	r1, [pc, #56]	@ (80050cc <USER_UART_IDLECallback+0x120>)
 8005094:	2000      	movs	r0, #0
 8005096:	f7ff fd29 	bl	8004aec <LOGGER_SendFormatted>
                  rx_buffer[0], rx_buffer[1], rx_buffer[2], rx_buffer[3]);
      }
      
      // DMA 중지 (일반 모드에서는 자동으로 완료됨)
      HAL_UART_DMAStop(huart);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f008 ff7f 	bl	800df9e <HAL_UART_DMAStop>
      // 다음 수신을 위해 즉시 재시작하지 않음 - uart_stm32.c에서 처리
    } else {
      LOG_DEBUG("[DMA] IDLE detected but no data");
    }
  }
}
 80050a0:	e003      	b.n	80050aa <USER_UART_IDLECallback+0xfe>
      LOG_DEBUG("[DMA] IDLE detected but no data");
 80050a2:	490b      	ldr	r1, [pc, #44]	@ (80050d0 <USER_UART_IDLECallback+0x124>)
 80050a4:	2000      	movs	r0, #0
 80050a6:	f7ff fd21 	bl	8004aec <LOGGER_SendFormatted>
}
 80050aa:	bf00      	nop
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	40011400 	.word	0x40011400
 80050b8:	20001372 	.word	0x20001372
 80050bc:	20001370 	.word	0x20001370
 80050c0:	08019768 	.word	0x08019768
 80050c4:	080197a8 	.word	0x080197a8
 80050c8:	20001374 	.word	0x20001374
 80050cc:	080197d0 	.word	0x080197d0
 80050d0:	080197fc 	.word	0x080197fc

080050d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80050d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800510c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80050d8:	f7ff fc88 	bl	80049ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80050dc:	480c      	ldr	r0, [pc, #48]	@ (8005110 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80050de:	490d      	ldr	r1, [pc, #52]	@ (8005114 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80050e0:	4a0d      	ldr	r2, [pc, #52]	@ (8005118 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80050e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80050e4:	e002      	b.n	80050ec <LoopCopyDataInit>

080050e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80050e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80050ea:	3304      	adds	r3, #4

080050ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80050ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80050ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80050f0:	d3f9      	bcc.n	80050e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80050f2:	4a0a      	ldr	r2, [pc, #40]	@ (800511c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80050f4:	4c0a      	ldr	r4, [pc, #40]	@ (8005120 <LoopFillZerobss+0x22>)
  movs r3, #0
 80050f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050f8:	e001      	b.n	80050fe <LoopFillZerobss>

080050fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050fc:	3204      	adds	r2, #4

080050fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80050fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005100:	d3fb      	bcc.n	80050fa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005102:	f010 fae1 	bl	80156c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005106:	f7fc fcd1 	bl	8001aac <main>
  bx  lr    
 800510a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800510c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005114:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8005118:	08019e04 	.word	0x08019e04
  ldr r2, =_sbss
 800511c:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8005120:	20011e60 	.word	0x20011e60

08005124 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005124:	e7fe      	b.n	8005124 <ADC_IRQHandler>

08005126 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800512a:	2003      	movs	r0, #3
 800512c:	f000 fb91 	bl	8005852 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005130:	2000      	movs	r0, #0
 8005132:	f7ff fb45 	bl	80047c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005136:	f7fe faa7 	bl	8003688 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	bd80      	pop	{r7, pc}

08005140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005140:	b480      	push	{r7}
 8005142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005144:	4b06      	ldr	r3, [pc, #24]	@ (8005160 <HAL_IncTick+0x20>)
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	461a      	mov	r2, r3
 800514a:	4b06      	ldr	r3, [pc, #24]	@ (8005164 <HAL_IncTick+0x24>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4413      	add	r3, r2
 8005150:	4a04      	ldr	r2, [pc, #16]	@ (8005164 <HAL_IncTick+0x24>)
 8005152:	6013      	str	r3, [r2, #0]
}
 8005154:	bf00      	nop
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	20000068 	.word	0x20000068
 8005164:	20001578 	.word	0x20001578

08005168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005168:	b480      	push	{r7}
 800516a:	af00      	add	r7, sp, #0
  return uwTick;
 800516c:	4b03      	ldr	r3, [pc, #12]	@ (800517c <HAL_GetTick+0x14>)
 800516e:	681b      	ldr	r3, [r3, #0]
}
 8005170:	4618      	mov	r0, r3
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	20001578 	.word	0x20001578

08005180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005188:	f7ff ffee 	bl	8005168 <HAL_GetTick>
 800518c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005198:	d005      	beq.n	80051a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800519a:	4b0a      	ldr	r3, [pc, #40]	@ (80051c4 <HAL_Delay+0x44>)
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	461a      	mov	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4413      	add	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80051a6:	bf00      	nop
 80051a8:	f7ff ffde 	bl	8005168 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d8f7      	bhi.n	80051a8 <HAL_Delay+0x28>
  {
  }
}
 80051b8:	bf00      	nop
 80051ba:	bf00      	nop
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	20000068 	.word	0x20000068

080051c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051d0:	2300      	movs	r3, #0
 80051d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e031      	b.n	8005242 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d109      	bne.n	80051fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7fe fa76 	bl	80036d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051fe:	f003 0310 	and.w	r3, r3, #16
 8005202:	2b00      	cmp	r3, #0
 8005204:	d116      	bne.n	8005234 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800520a:	4b10      	ldr	r3, [pc, #64]	@ (800524c <HAL_ADC_Init+0x84>)
 800520c:	4013      	ands	r3, r2
 800520e:	f043 0202 	orr.w	r2, r3, #2
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f974 	bl	8005504 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005226:	f023 0303 	bic.w	r3, r3, #3
 800522a:	f043 0201 	orr.w	r2, r3, #1
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	641a      	str	r2, [r3, #64]	@ 0x40
 8005232:	e001      	b.n	8005238 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005240:	7bfb      	ldrb	r3, [r7, #15]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	ffffeefd 	.word	0xffffeefd

08005250 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800525a:	2300      	movs	r3, #0
 800525c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005264:	2b01      	cmp	r3, #1
 8005266:	d101      	bne.n	800526c <HAL_ADC_ConfigChannel+0x1c>
 8005268:	2302      	movs	r3, #2
 800526a:	e13a      	b.n	80054e2 <HAL_ADC_ConfigChannel+0x292>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b09      	cmp	r3, #9
 800527a:	d93a      	bls.n	80052f2 <HAL_ADC_ConfigChannel+0xa2>
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005284:	d035      	beq.n	80052f2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68d9      	ldr	r1, [r3, #12]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	b29b      	uxth	r3, r3
 8005292:	461a      	mov	r2, r3
 8005294:	4613      	mov	r3, r2
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	4413      	add	r3, r2
 800529a:	3b1e      	subs	r3, #30
 800529c:	2207      	movs	r2, #7
 800529e:	fa02 f303 	lsl.w	r3, r2, r3
 80052a2:	43da      	mvns	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	400a      	ands	r2, r1
 80052aa:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a8f      	ldr	r2, [pc, #572]	@ (80054f0 <HAL_ADC_ConfigChannel+0x2a0>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d10a      	bne.n	80052cc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68d9      	ldr	r1, [r3, #12]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	061a      	lsls	r2, r3, #24
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80052ca:	e039      	b.n	8005340 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68d9      	ldr	r1, [r3, #12]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	689a      	ldr	r2, [r3, #8]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	b29b      	uxth	r3, r3
 80052dc:	4618      	mov	r0, r3
 80052de:	4603      	mov	r3, r0
 80052e0:	005b      	lsls	r3, r3, #1
 80052e2:	4403      	add	r3, r0
 80052e4:	3b1e      	subs	r3, #30
 80052e6:	409a      	lsls	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	430a      	orrs	r2, r1
 80052ee:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80052f0:	e026      	b.n	8005340 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6919      	ldr	r1, [r3, #16]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	461a      	mov	r2, r3
 8005300:	4613      	mov	r3, r2
 8005302:	005b      	lsls	r3, r3, #1
 8005304:	4413      	add	r3, r2
 8005306:	f003 031f 	and.w	r3, r3, #31
 800530a:	2207      	movs	r2, #7
 800530c:	fa02 f303 	lsl.w	r3, r2, r3
 8005310:	43da      	mvns	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	400a      	ands	r2, r1
 8005318:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6919      	ldr	r1, [r3, #16]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	689a      	ldr	r2, [r3, #8]
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	b29b      	uxth	r3, r3
 800532a:	4618      	mov	r0, r3
 800532c:	4603      	mov	r3, r0
 800532e:	005b      	lsls	r3, r3, #1
 8005330:	4403      	add	r3, r0
 8005332:	f003 031f 	and.w	r3, r3, #31
 8005336:	409a      	lsls	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	2b06      	cmp	r3, #6
 8005346:	d824      	bhi.n	8005392 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	685a      	ldr	r2, [r3, #4]
 8005352:	4613      	mov	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	4413      	add	r3, r2
 8005358:	3b05      	subs	r3, #5
 800535a:	221f      	movs	r2, #31
 800535c:	fa02 f303 	lsl.w	r3, r2, r3
 8005360:	43da      	mvns	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	400a      	ands	r2, r1
 8005368:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	b29b      	uxth	r3, r3
 8005376:	4618      	mov	r0, r3
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	4613      	mov	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	3b05      	subs	r3, #5
 8005384:	fa00 f203 	lsl.w	r2, r0, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	430a      	orrs	r2, r1
 800538e:	635a      	str	r2, [r3, #52]	@ 0x34
 8005390:	e04c      	b.n	800542c <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	2b0c      	cmp	r3, #12
 8005398:	d824      	bhi.n	80053e4 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	4613      	mov	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	3b23      	subs	r3, #35	@ 0x23
 80053ac:	221f      	movs	r2, #31
 80053ae:	fa02 f303 	lsl.w	r3, r2, r3
 80053b2:	43da      	mvns	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	400a      	ands	r2, r1
 80053ba:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	4618      	mov	r0, r3
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	685a      	ldr	r2, [r3, #4]
 80053ce:	4613      	mov	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	3b23      	subs	r3, #35	@ 0x23
 80053d6:	fa00 f203 	lsl.w	r2, r0, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80053e2:	e023      	b.n	800542c <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	4613      	mov	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4413      	add	r3, r2
 80053f4:	3b41      	subs	r3, #65	@ 0x41
 80053f6:	221f      	movs	r2, #31
 80053f8:	fa02 f303 	lsl.w	r3, r2, r3
 80053fc:	43da      	mvns	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	400a      	ands	r2, r1
 8005404:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	b29b      	uxth	r3, r3
 8005412:	4618      	mov	r0, r3
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	4613      	mov	r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	4413      	add	r3, r2
 800541e:	3b41      	subs	r3, #65	@ 0x41
 8005420:	fa00 f203 	lsl.w	r2, r0, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a30      	ldr	r2, [pc, #192]	@ (80054f4 <HAL_ADC_ConfigChannel+0x2a4>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d10a      	bne.n	800544c <HAL_ADC_ConfigChannel+0x1fc>
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800543e:	d105      	bne.n	800544c <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005440:	4b2d      	ldr	r3, [pc, #180]	@ (80054f8 <HAL_ADC_ConfigChannel+0x2a8>)
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	4a2c      	ldr	r2, [pc, #176]	@ (80054f8 <HAL_ADC_ConfigChannel+0x2a8>)
 8005446:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800544a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a28      	ldr	r2, [pc, #160]	@ (80054f4 <HAL_ADC_ConfigChannel+0x2a4>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d10f      	bne.n	8005476 <HAL_ADC_ConfigChannel+0x226>
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b12      	cmp	r3, #18
 800545c:	d10b      	bne.n	8005476 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800545e:	4b26      	ldr	r3, [pc, #152]	@ (80054f8 <HAL_ADC_ConfigChannel+0x2a8>)
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	4a25      	ldr	r2, [pc, #148]	@ (80054f8 <HAL_ADC_ConfigChannel+0x2a8>)
 8005464:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005468:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800546a:	4b23      	ldr	r3, [pc, #140]	@ (80054f8 <HAL_ADC_ConfigChannel+0x2a8>)
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	4a22      	ldr	r2, [pc, #136]	@ (80054f8 <HAL_ADC_ConfigChannel+0x2a8>)
 8005470:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005474:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a1e      	ldr	r2, [pc, #120]	@ (80054f4 <HAL_ADC_ConfigChannel+0x2a4>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d12b      	bne.n	80054d8 <HAL_ADC_ConfigChannel+0x288>
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a1a      	ldr	r2, [pc, #104]	@ (80054f0 <HAL_ADC_ConfigChannel+0x2a0>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d003      	beq.n	8005492 <HAL_ADC_ConfigChannel+0x242>
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2b11      	cmp	r3, #17
 8005490:	d122      	bne.n	80054d8 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8005492:	4b19      	ldr	r3, [pc, #100]	@ (80054f8 <HAL_ADC_ConfigChannel+0x2a8>)
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	4a18      	ldr	r2, [pc, #96]	@ (80054f8 <HAL_ADC_ConfigChannel+0x2a8>)
 8005498:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800549c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800549e:	4b16      	ldr	r3, [pc, #88]	@ (80054f8 <HAL_ADC_ConfigChannel+0x2a8>)
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	4a15      	ldr	r2, [pc, #84]	@ (80054f8 <HAL_ADC_ConfigChannel+0x2a8>)
 80054a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80054a8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a10      	ldr	r2, [pc, #64]	@ (80054f0 <HAL_ADC_ConfigChannel+0x2a0>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d111      	bne.n	80054d8 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80054b4:	4b11      	ldr	r3, [pc, #68]	@ (80054fc <HAL_ADC_ConfigChannel+0x2ac>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a11      	ldr	r2, [pc, #68]	@ (8005500 <HAL_ADC_ConfigChannel+0x2b0>)
 80054ba:	fba2 2303 	umull	r2, r3, r2, r3
 80054be:	0c9a      	lsrs	r2, r3, #18
 80054c0:	4613      	mov	r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4413      	add	r3, r2
 80054c6:	005b      	lsls	r3, r3, #1
 80054c8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80054ca:	e002      	b.n	80054d2 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	3b01      	subs	r3, #1
 80054d0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1f9      	bne.n	80054cc <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	10000012 	.word	0x10000012
 80054f4:	40012000 	.word	0x40012000
 80054f8:	40012300 	.word	0x40012300
 80054fc:	20000018 	.word	0x20000018
 8005500:	431bde83 	.word	0x431bde83

08005504 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800550c:	4b78      	ldr	r3, [pc, #480]	@ (80056f0 <ADC_Init+0x1ec>)
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	4a77      	ldr	r2, [pc, #476]	@ (80056f0 <ADC_Init+0x1ec>)
 8005512:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8005516:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005518:	4b75      	ldr	r3, [pc, #468]	@ (80056f0 <ADC_Init+0x1ec>)
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	4973      	ldr	r1, [pc, #460]	@ (80056f0 <ADC_Init+0x1ec>)
 8005522:	4313      	orrs	r3, r2
 8005524:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005534:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6859      	ldr	r1, [r3, #4]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	021a      	lsls	r2, r3, #8
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	430a      	orrs	r2, r1
 8005548:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005558:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6859      	ldr	r1, [r3, #4]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689a      	ldr	r2, [r3, #8]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	430a      	orrs	r2, r1
 800556a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689a      	ldr	r2, [r3, #8]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800557a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6899      	ldr	r1, [r3, #8]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68da      	ldr	r2, [r3, #12]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	430a      	orrs	r2, r1
 800558c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005592:	4a58      	ldr	r2, [pc, #352]	@ (80056f4 <ADC_Init+0x1f0>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d022      	beq.n	80055de <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	689a      	ldr	r2, [r3, #8]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80055a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6899      	ldr	r1, [r3, #8]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	430a      	orrs	r2, r1
 80055b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	689a      	ldr	r2, [r3, #8]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80055c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6899      	ldr	r1, [r3, #8]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	430a      	orrs	r2, r1
 80055da:	609a      	str	r2, [r3, #8]
 80055dc:	e00f      	b.n	80055fe <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80055ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80055fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	689a      	ldr	r2, [r3, #8]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 0202 	bic.w	r2, r2, #2
 800560c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6899      	ldr	r1, [r3, #8]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	005a      	lsls	r2, r3, #1
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d01b      	beq.n	8005664 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800563a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800564a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6859      	ldr	r1, [r3, #4]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005656:	3b01      	subs	r3, #1
 8005658:	035a      	lsls	r2, r3, #13
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	430a      	orrs	r2, r1
 8005660:	605a      	str	r2, [r3, #4]
 8005662:	e007      	b.n	8005674 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005672:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005682:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	3b01      	subs	r3, #1
 8005690:	051a      	lsls	r2, r3, #20
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	430a      	orrs	r2, r1
 8005698:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	689a      	ldr	r2, [r3, #8]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80056a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6899      	ldr	r1, [r3, #8]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80056b6:	025a      	lsls	r2, r3, #9
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	430a      	orrs	r2, r1
 80056be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	689a      	ldr	r2, [r3, #8]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6899      	ldr	r1, [r3, #8]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	029a      	lsls	r2, r3, #10
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	609a      	str	r2, [r3, #8]
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	40012300 	.word	0x40012300
 80056f4:	0f000001 	.word	0x0f000001

080056f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f003 0307 	and.w	r3, r3, #7
 8005706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005708:	4b0b      	ldr	r3, [pc, #44]	@ (8005738 <__NVIC_SetPriorityGrouping+0x40>)
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005714:	4013      	ands	r3, r2
 8005716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005720:	4b06      	ldr	r3, [pc, #24]	@ (800573c <__NVIC_SetPriorityGrouping+0x44>)
 8005722:	4313      	orrs	r3, r2
 8005724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005726:	4a04      	ldr	r2, [pc, #16]	@ (8005738 <__NVIC_SetPriorityGrouping+0x40>)
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	60d3      	str	r3, [r2, #12]
}
 800572c:	bf00      	nop
 800572e:	3714      	adds	r7, #20
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	e000ed00 	.word	0xe000ed00
 800573c:	05fa0000 	.word	0x05fa0000

08005740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005740:	b480      	push	{r7}
 8005742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005744:	4b04      	ldr	r3, [pc, #16]	@ (8005758 <__NVIC_GetPriorityGrouping+0x18>)
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	0a1b      	lsrs	r3, r3, #8
 800574a:	f003 0307 	and.w	r3, r3, #7
}
 800574e:	4618      	mov	r0, r3
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	e000ed00 	.word	0xe000ed00

0800575c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	4603      	mov	r3, r0
 8005764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800576a:	2b00      	cmp	r3, #0
 800576c:	db0b      	blt.n	8005786 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800576e:	79fb      	ldrb	r3, [r7, #7]
 8005770:	f003 021f 	and.w	r2, r3, #31
 8005774:	4907      	ldr	r1, [pc, #28]	@ (8005794 <__NVIC_EnableIRQ+0x38>)
 8005776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800577a:	095b      	lsrs	r3, r3, #5
 800577c:	2001      	movs	r0, #1
 800577e:	fa00 f202 	lsl.w	r2, r0, r2
 8005782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005786:	bf00      	nop
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	e000e100 	.word	0xe000e100

08005798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	4603      	mov	r3, r0
 80057a0:	6039      	str	r1, [r7, #0]
 80057a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	db0a      	blt.n	80057c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	490c      	ldr	r1, [pc, #48]	@ (80057e4 <__NVIC_SetPriority+0x4c>)
 80057b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057b6:	0112      	lsls	r2, r2, #4
 80057b8:	b2d2      	uxtb	r2, r2
 80057ba:	440b      	add	r3, r1
 80057bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80057c0:	e00a      	b.n	80057d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	4908      	ldr	r1, [pc, #32]	@ (80057e8 <__NVIC_SetPriority+0x50>)
 80057c8:	79fb      	ldrb	r3, [r7, #7]
 80057ca:	f003 030f 	and.w	r3, r3, #15
 80057ce:	3b04      	subs	r3, #4
 80057d0:	0112      	lsls	r2, r2, #4
 80057d2:	b2d2      	uxtb	r2, r2
 80057d4:	440b      	add	r3, r1
 80057d6:	761a      	strb	r2, [r3, #24]
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	e000e100 	.word	0xe000e100
 80057e8:	e000ed00 	.word	0xe000ed00

080057ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b089      	sub	sp, #36	@ 0x24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f003 0307 	and.w	r3, r3, #7
 80057fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	f1c3 0307 	rsb	r3, r3, #7
 8005806:	2b04      	cmp	r3, #4
 8005808:	bf28      	it	cs
 800580a:	2304      	movcs	r3, #4
 800580c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	3304      	adds	r3, #4
 8005812:	2b06      	cmp	r3, #6
 8005814:	d902      	bls.n	800581c <NVIC_EncodePriority+0x30>
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	3b03      	subs	r3, #3
 800581a:	e000      	b.n	800581e <NVIC_EncodePriority+0x32>
 800581c:	2300      	movs	r3, #0
 800581e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005820:	f04f 32ff 	mov.w	r2, #4294967295
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	fa02 f303 	lsl.w	r3, r2, r3
 800582a:	43da      	mvns	r2, r3
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	401a      	ands	r2, r3
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005834:	f04f 31ff 	mov.w	r1, #4294967295
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	fa01 f303 	lsl.w	r3, r1, r3
 800583e:	43d9      	mvns	r1, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005844:	4313      	orrs	r3, r2
         );
}
 8005846:	4618      	mov	r0, r3
 8005848:	3724      	adds	r7, #36	@ 0x24
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b082      	sub	sp, #8
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7ff ff4c 	bl	80056f8 <__NVIC_SetPriorityGrouping>
}
 8005860:	bf00      	nop
 8005862:	3708      	adds	r7, #8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0
 800586e:	4603      	mov	r3, r0
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
 8005874:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005876:	2300      	movs	r3, #0
 8005878:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800587a:	f7ff ff61 	bl	8005740 <__NVIC_GetPriorityGrouping>
 800587e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	68b9      	ldr	r1, [r7, #8]
 8005884:	6978      	ldr	r0, [r7, #20]
 8005886:	f7ff ffb1 	bl	80057ec <NVIC_EncodePriority>
 800588a:	4602      	mov	r2, r0
 800588c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005890:	4611      	mov	r1, r2
 8005892:	4618      	mov	r0, r3
 8005894:	f7ff ff80 	bl	8005798 <__NVIC_SetPriority>
}
 8005898:	bf00      	nop
 800589a:	3718      	adds	r7, #24
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	4603      	mov	r3, r0
 80058a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80058aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7ff ff54 	bl	800575c <__NVIC_EnableIRQ>
}
 80058b4:	bf00      	nop
 80058b6:	3708      	adds	r7, #8
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e054      	b.n	8005978 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	7f5b      	ldrb	r3, [r3, #29]
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d105      	bne.n	80058e4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7fd ff54 	bl	800378c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2202      	movs	r2, #2
 80058e8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	791b      	ldrb	r3, [r3, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10c      	bne.n	800590c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a22      	ldr	r2, [pc, #136]	@ (8005980 <HAL_CRC_Init+0xc4>)
 80058f8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	689a      	ldr	r2, [r3, #8]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f022 0218 	bic.w	r2, r2, #24
 8005908:	609a      	str	r2, [r3, #8]
 800590a:	e00c      	b.n	8005926 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6899      	ldr	r1, [r3, #8]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	461a      	mov	r2, r3
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f834 	bl	8005984 <HAL_CRCEx_Polynomial_Set>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e028      	b.n	8005978 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	795b      	ldrb	r3, [r3, #5]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d105      	bne.n	800593a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f04f 32ff 	mov.w	r2, #4294967295
 8005936:	611a      	str	r2, [r3, #16]
 8005938:	e004      	b.n	8005944 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	6912      	ldr	r2, [r2, #16]
 8005942:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	695a      	ldr	r2, [r3, #20]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	699a      	ldr	r2, [r3, #24]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3708      	adds	r7, #8
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	04c11db7 	.word	0x04c11db7

08005984 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005984:	b480      	push	{r7}
 8005986:	b087      	sub	sp, #28
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005990:	2300      	movs	r3, #0
 8005992:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005994:	231f      	movs	r3, #31
 8005996:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d102      	bne.n	80059a8 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	75fb      	strb	r3, [r7, #23]
 80059a6:	e063      	b.n	8005a70 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80059a8:	bf00      	nop
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	1e5a      	subs	r2, r3, #1
 80059ae:	613a      	str	r2, [r7, #16]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d009      	beq.n	80059c8 <HAL_CRCEx_Polynomial_Set+0x44>
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	f003 031f 	and.w	r3, r3, #31
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	fa22 f303 	lsr.w	r3, r2, r3
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d0f0      	beq.n	80059aa <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b18      	cmp	r3, #24
 80059cc:	d846      	bhi.n	8005a5c <HAL_CRCEx_Polynomial_Set+0xd8>
 80059ce:	a201      	add	r2, pc, #4	@ (adr r2, 80059d4 <HAL_CRCEx_Polynomial_Set+0x50>)
 80059d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d4:	08005a63 	.word	0x08005a63
 80059d8:	08005a5d 	.word	0x08005a5d
 80059dc:	08005a5d 	.word	0x08005a5d
 80059e0:	08005a5d 	.word	0x08005a5d
 80059e4:	08005a5d 	.word	0x08005a5d
 80059e8:	08005a5d 	.word	0x08005a5d
 80059ec:	08005a5d 	.word	0x08005a5d
 80059f0:	08005a5d 	.word	0x08005a5d
 80059f4:	08005a51 	.word	0x08005a51
 80059f8:	08005a5d 	.word	0x08005a5d
 80059fc:	08005a5d 	.word	0x08005a5d
 8005a00:	08005a5d 	.word	0x08005a5d
 8005a04:	08005a5d 	.word	0x08005a5d
 8005a08:	08005a5d 	.word	0x08005a5d
 8005a0c:	08005a5d 	.word	0x08005a5d
 8005a10:	08005a5d 	.word	0x08005a5d
 8005a14:	08005a45 	.word	0x08005a45
 8005a18:	08005a5d 	.word	0x08005a5d
 8005a1c:	08005a5d 	.word	0x08005a5d
 8005a20:	08005a5d 	.word	0x08005a5d
 8005a24:	08005a5d 	.word	0x08005a5d
 8005a28:	08005a5d 	.word	0x08005a5d
 8005a2c:	08005a5d 	.word	0x08005a5d
 8005a30:	08005a5d 	.word	0x08005a5d
 8005a34:	08005a39 	.word	0x08005a39
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	2b06      	cmp	r3, #6
 8005a3c:	d913      	bls.n	8005a66 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005a42:	e010      	b.n	8005a66 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	2b07      	cmp	r3, #7
 8005a48:	d90f      	bls.n	8005a6a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005a4e:	e00c      	b.n	8005a6a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	2b0f      	cmp	r3, #15
 8005a54:	d90b      	bls.n	8005a6e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005a5a:	e008      	b.n	8005a6e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	75fb      	strb	r3, [r7, #23]
        break;
 8005a60:	e006      	b.n	8005a70 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005a62:	bf00      	nop
 8005a64:	e004      	b.n	8005a70 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005a66:	bf00      	nop
 8005a68:	e002      	b.n	8005a70 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005a6a:	bf00      	nop
 8005a6c:	e000      	b.n	8005a70 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005a6e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8005a70:	7dfb      	ldrb	r3, [r7, #23]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10d      	bne.n	8005a92 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f023 0118 	bic.w	r1, r3, #24
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	371c      	adds	r7, #28
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e069      	b.n	8005b86 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d102      	bne.n	8005ac4 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7fd fe84 	bl	80037cc <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6819      	ldr	r1, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	4b2a      	ldr	r3, [pc, #168]	@ (8005b90 <HAL_DCMI_Init+0xf0>)
 8005ae6:	400b      	ands	r3, r1
 8005ae8:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	6819      	ldr	r1, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685a      	ldr	r2, [r3, #4]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005afe:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005b0a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005b16:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b1c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005b22:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b28:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005b2e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	430a      	orrs	r2, r1
 8005b36:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	2b10      	cmp	r3, #16
 8005b3e:	d112      	bne.n	8005b66 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	7f1b      	ldrb	r3, [r3, #28]
 8005b44:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	7f5b      	ldrb	r3, [r3, #29]
 8005b4a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005b4c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	7f9b      	ldrb	r3, [r3, #30]
 8005b52:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8005b54:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	7fdb      	ldrb	r3, [r3, #31]
 8005b5c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8005b62:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005b64:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68da      	ldr	r2, [r3, #12]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f042 021e 	orr.w	r2, r2, #30
 8005b74:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3708      	adds	r7, #8
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	ffe0f007 	.word	0xffe0f007

08005b94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005ba0:	f7ff fae2 	bl	8005168 <HAL_GetTick>
 8005ba4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d101      	bne.n	8005bb0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e099      	b.n	8005ce4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f022 0201 	bic.w	r2, r2, #1
 8005bce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005bd0:	e00f      	b.n	8005bf2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005bd2:	f7ff fac9 	bl	8005168 <HAL_GetTick>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	2b05      	cmp	r3, #5
 8005bde:	d908      	bls.n	8005bf2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2220      	movs	r2, #32
 8005be4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2203      	movs	r2, #3
 8005bea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e078      	b.n	8005ce4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1e8      	bne.n	8005bd2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	4b38      	ldr	r3, [pc, #224]	@ (8005cec <HAL_DMA_Init+0x158>)
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685a      	ldr	r2, [r3, #4]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c48:	2b04      	cmp	r3, #4
 8005c4a:	d107      	bne.n	8005c5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c54:	4313      	orrs	r3, r2
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	f023 0307 	bic.w	r3, r3, #7
 8005c72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	d117      	bne.n	8005cb6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00e      	beq.n	8005cb6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 fb15 	bl	80062c8 <DMA_CheckFifoParam>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d008      	beq.n	8005cb6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2240      	movs	r2, #64	@ 0x40
 8005ca8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e016      	b.n	8005ce4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 facc 	bl	800625c <DMA_CalcBaseAndBitshift>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ccc:	223f      	movs	r2, #63	@ 0x3f
 8005cce:	409a      	lsls	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3718      	adds	r7, #24
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	f010803f 	.word	0xf010803f

08005cf0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
 8005cfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d101      	bne.n	8005d16 <HAL_DMA_Start_IT+0x26>
 8005d12:	2302      	movs	r3, #2
 8005d14:	e048      	b.n	8005da8 <HAL_DMA_Start_IT+0xb8>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d137      	bne.n	8005d9a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	68b9      	ldr	r1, [r7, #8]
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f000 fa5e 	bl	8006200 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d48:	223f      	movs	r2, #63	@ 0x3f
 8005d4a:	409a      	lsls	r2, r3
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f042 0216 	orr.w	r2, r2, #22
 8005d5e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	695a      	ldr	r2, [r3, #20]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005d6e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d007      	beq.n	8005d88 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f042 0208 	orr.w	r2, r2, #8
 8005d86:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0201 	orr.w	r2, r2, #1
 8005d96:	601a      	str	r2, [r3, #0]
 8005d98:	e005      	b.n	8005da6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005da2:	2302      	movs	r3, #2
 8005da4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3718      	adds	r7, #24
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dbc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005dbe:	f7ff f9d3 	bl	8005168 <HAL_GetTick>
 8005dc2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d008      	beq.n	8005de2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2280      	movs	r2, #128	@ 0x80
 8005dd4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e052      	b.n	8005e88 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f022 0216 	bic.w	r2, r2, #22
 8005df0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	695a      	ldr	r2, [r3, #20]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e00:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d103      	bne.n	8005e12 <HAL_DMA_Abort+0x62>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d007      	beq.n	8005e22 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 0208 	bic.w	r2, r2, #8
 8005e20:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 0201 	bic.w	r2, r2, #1
 8005e30:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e32:	e013      	b.n	8005e5c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e34:	f7ff f998 	bl	8005168 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	2b05      	cmp	r3, #5
 8005e40:	d90c      	bls.n	8005e5c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2220      	movs	r2, #32
 8005e46:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2203      	movs	r2, #3
 8005e4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e015      	b.n	8005e88 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1e4      	bne.n	8005e34 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e6e:	223f      	movs	r2, #63	@ 0x3f
 8005e70:	409a      	lsls	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d004      	beq.n	8005eae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2280      	movs	r2, #128	@ 0x80
 8005ea8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e00c      	b.n	8005ec8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2205      	movs	r2, #5
 8005eb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f022 0201 	bic.w	r2, r2, #1
 8005ec4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005edc:	2300      	movs	r3, #0
 8005ede:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005ee0:	4b8e      	ldr	r3, [pc, #568]	@ (800611c <HAL_DMA_IRQHandler+0x248>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a8e      	ldr	r2, [pc, #568]	@ (8006120 <HAL_DMA_IRQHandler+0x24c>)
 8005ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eea:	0a9b      	lsrs	r3, r3, #10
 8005eec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ef2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005efe:	2208      	movs	r2, #8
 8005f00:	409a      	lsls	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	4013      	ands	r3, r2
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d01a      	beq.n	8005f40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0304 	and.w	r3, r3, #4
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d013      	beq.n	8005f40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f022 0204 	bic.w	r2, r2, #4
 8005f26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f2c:	2208      	movs	r2, #8
 8005f2e:	409a      	lsls	r2, r3
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f38:	f043 0201 	orr.w	r2, r3, #1
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f44:	2201      	movs	r2, #1
 8005f46:	409a      	lsls	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d012      	beq.n	8005f76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00b      	beq.n	8005f76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f62:	2201      	movs	r2, #1
 8005f64:	409a      	lsls	r2, r3
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f6e:	f043 0202 	orr.w	r2, r3, #2
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f7a:	2204      	movs	r2, #4
 8005f7c:	409a      	lsls	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	4013      	ands	r3, r2
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d012      	beq.n	8005fac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0302 	and.w	r3, r3, #2
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00b      	beq.n	8005fac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f98:	2204      	movs	r2, #4
 8005f9a:	409a      	lsls	r2, r3
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fa4:	f043 0204 	orr.w	r2, r3, #4
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fb0:	2210      	movs	r2, #16
 8005fb2:	409a      	lsls	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d043      	beq.n	8006044 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0308 	and.w	r3, r3, #8
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d03c      	beq.n	8006044 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fce:	2210      	movs	r2, #16
 8005fd0:	409a      	lsls	r2, r3
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d018      	beq.n	8006016 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d108      	bne.n	8006004 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d024      	beq.n	8006044 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	4798      	blx	r3
 8006002:	e01f      	b.n	8006044 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006008:	2b00      	cmp	r3, #0
 800600a:	d01b      	beq.n	8006044 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	4798      	blx	r3
 8006014:	e016      	b.n	8006044 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006020:	2b00      	cmp	r3, #0
 8006022:	d107      	bne.n	8006034 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f022 0208 	bic.w	r2, r2, #8
 8006032:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006038:	2b00      	cmp	r3, #0
 800603a:	d003      	beq.n	8006044 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006048:	2220      	movs	r2, #32
 800604a:	409a      	lsls	r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	4013      	ands	r3, r2
 8006050:	2b00      	cmp	r3, #0
 8006052:	f000 808f 	beq.w	8006174 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0310 	and.w	r3, r3, #16
 8006060:	2b00      	cmp	r3, #0
 8006062:	f000 8087 	beq.w	8006174 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800606a:	2220      	movs	r2, #32
 800606c:	409a      	lsls	r2, r3
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b05      	cmp	r3, #5
 800607c:	d136      	bne.n	80060ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f022 0216 	bic.w	r2, r2, #22
 800608c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	695a      	ldr	r2, [r3, #20]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800609c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d103      	bne.n	80060ae <HAL_DMA_IRQHandler+0x1da>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d007      	beq.n	80060be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 0208 	bic.w	r2, r2, #8
 80060bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060c2:	223f      	movs	r2, #63	@ 0x3f
 80060c4:	409a      	lsls	r2, r3
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d07e      	beq.n	80061e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	4798      	blx	r3
        }
        return;
 80060ea:	e079      	b.n	80061e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d01d      	beq.n	8006136 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10d      	bne.n	8006124 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800610c:	2b00      	cmp	r3, #0
 800610e:	d031      	beq.n	8006174 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	4798      	blx	r3
 8006118:	e02c      	b.n	8006174 <HAL_DMA_IRQHandler+0x2a0>
 800611a:	bf00      	nop
 800611c:	20000018 	.word	0x20000018
 8006120:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006128:	2b00      	cmp	r3, #0
 800612a:	d023      	beq.n	8006174 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	4798      	blx	r3
 8006134:	e01e      	b.n	8006174 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006140:	2b00      	cmp	r3, #0
 8006142:	d10f      	bne.n	8006164 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f022 0210 	bic.w	r2, r2, #16
 8006152:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006168:	2b00      	cmp	r3, #0
 800616a:	d003      	beq.n	8006174 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006178:	2b00      	cmp	r3, #0
 800617a:	d032      	beq.n	80061e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	2b00      	cmp	r3, #0
 8006186:	d022      	beq.n	80061ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2205      	movs	r2, #5
 800618c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f022 0201 	bic.w	r2, r2, #1
 800619e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	3301      	adds	r3, #1
 80061a4:	60bb      	str	r3, [r7, #8]
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d307      	bcc.n	80061bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1f2      	bne.n	80061a0 <HAL_DMA_IRQHandler+0x2cc>
 80061ba:	e000      	b.n	80061be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80061bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d005      	beq.n	80061e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	4798      	blx	r3
 80061de:	e000      	b.n	80061e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80061e0:	bf00      	nop
    }
  }
}
 80061e2:	3718      	adds	r7, #24
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]
 800620c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800621c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	683a      	ldr	r2, [r7, #0]
 8006224:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	2b40      	cmp	r3, #64	@ 0x40
 800622c:	d108      	bne.n	8006240 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800623e:	e007      	b.n	8006250 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	60da      	str	r2, [r3, #12]
}
 8006250:	bf00      	nop
 8006252:	3714      	adds	r7, #20
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	b2db      	uxtb	r3, r3
 800626a:	3b10      	subs	r3, #16
 800626c:	4a13      	ldr	r2, [pc, #76]	@ (80062bc <DMA_CalcBaseAndBitshift+0x60>)
 800626e:	fba2 2303 	umull	r2, r3, r2, r3
 8006272:	091b      	lsrs	r3, r3, #4
 8006274:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006276:	4a12      	ldr	r2, [pc, #72]	@ (80062c0 <DMA_CalcBaseAndBitshift+0x64>)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	4413      	add	r3, r2
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	461a      	mov	r2, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2b03      	cmp	r3, #3
 8006288:	d908      	bls.n	800629c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	461a      	mov	r2, r3
 8006290:	4b0c      	ldr	r3, [pc, #48]	@ (80062c4 <DMA_CalcBaseAndBitshift+0x68>)
 8006292:	4013      	ands	r3, r2
 8006294:	1d1a      	adds	r2, r3, #4
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	659a      	str	r2, [r3, #88]	@ 0x58
 800629a:	e006      	b.n	80062aa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	461a      	mov	r2, r3
 80062a2:	4b08      	ldr	r3, [pc, #32]	@ (80062c4 <DMA_CalcBaseAndBitshift+0x68>)
 80062a4:	4013      	ands	r3, r2
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3714      	adds	r7, #20
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	aaaaaaab 	.word	0xaaaaaaab
 80062c0:	08019d24 	.word	0x08019d24
 80062c4:	fffffc00 	.word	0xfffffc00

080062c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062d0:	2300      	movs	r3, #0
 80062d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d11f      	bne.n	8006322 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	2b03      	cmp	r3, #3
 80062e6:	d856      	bhi.n	8006396 <DMA_CheckFifoParam+0xce>
 80062e8:	a201      	add	r2, pc, #4	@ (adr r2, 80062f0 <DMA_CheckFifoParam+0x28>)
 80062ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ee:	bf00      	nop
 80062f0:	08006301 	.word	0x08006301
 80062f4:	08006313 	.word	0x08006313
 80062f8:	08006301 	.word	0x08006301
 80062fc:	08006397 	.word	0x08006397
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006304:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d046      	beq.n	800639a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006310:	e043      	b.n	800639a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006316:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800631a:	d140      	bne.n	800639e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006320:	e03d      	b.n	800639e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800632a:	d121      	bne.n	8006370 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	2b03      	cmp	r3, #3
 8006330:	d837      	bhi.n	80063a2 <DMA_CheckFifoParam+0xda>
 8006332:	a201      	add	r2, pc, #4	@ (adr r2, 8006338 <DMA_CheckFifoParam+0x70>)
 8006334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006338:	08006349 	.word	0x08006349
 800633c:	0800634f 	.word	0x0800634f
 8006340:	08006349 	.word	0x08006349
 8006344:	08006361 	.word	0x08006361
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	73fb      	strb	r3, [r7, #15]
      break;
 800634c:	e030      	b.n	80063b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006352:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d025      	beq.n	80063a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800635e:	e022      	b.n	80063a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006364:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006368:	d11f      	bne.n	80063aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800636e:	e01c      	b.n	80063aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	2b02      	cmp	r3, #2
 8006374:	d903      	bls.n	800637e <DMA_CheckFifoParam+0xb6>
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	2b03      	cmp	r3, #3
 800637a:	d003      	beq.n	8006384 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800637c:	e018      	b.n	80063b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	73fb      	strb	r3, [r7, #15]
      break;
 8006382:	e015      	b.n	80063b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006388:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00e      	beq.n	80063ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	73fb      	strb	r3, [r7, #15]
      break;
 8006394:	e00b      	b.n	80063ae <DMA_CheckFifoParam+0xe6>
      break;
 8006396:	bf00      	nop
 8006398:	e00a      	b.n	80063b0 <DMA_CheckFifoParam+0xe8>
      break;
 800639a:	bf00      	nop
 800639c:	e008      	b.n	80063b0 <DMA_CheckFifoParam+0xe8>
      break;
 800639e:	bf00      	nop
 80063a0:	e006      	b.n	80063b0 <DMA_CheckFifoParam+0xe8>
      break;
 80063a2:	bf00      	nop
 80063a4:	e004      	b.n	80063b0 <DMA_CheckFifoParam+0xe8>
      break;
 80063a6:	bf00      	nop
 80063a8:	e002      	b.n	80063b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80063aa:	bf00      	nop
 80063ac:	e000      	b.n	80063b0 <DMA_CheckFifoParam+0xe8>
      break;
 80063ae:	bf00      	nop
    }
  } 
  
  return status; 
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop

080063c0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e039      	b.n	8006446 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d106      	bne.n	80063ec <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7fd faae 	bl	8003948 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2202      	movs	r2, #2
 80063f0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	430a      	orrs	r2, r1
 8006408:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006410:	f023 0107 	bic.w	r1, r3, #7
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	689a      	ldr	r2, [r3, #8]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	430a      	orrs	r2, r1
 800641e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006426:	4b0a      	ldr	r3, [pc, #40]	@ (8006450 <HAL_DMA2D_Init+0x90>)
 8006428:	4013      	ands	r3, r2
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	68d1      	ldr	r1, [r2, #12]
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	6812      	ldr	r2, [r2, #0]
 8006432:	430b      	orrs	r3, r1
 8006434:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3708      	adds	r7, #8
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	ffffc000 	.word	0xffffc000

08006454 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	2b00      	cmp	r3, #0
 8006474:	d026      	beq.n	80064c4 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800647c:	2b00      	cmp	r3, #0
 800647e:	d021      	beq.n	80064c4 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800648e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006494:	f043 0201 	orr.w	r2, r3, #1
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2201      	movs	r2, #1
 80064a2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2204      	movs	r2, #4
 80064a8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d003      	beq.n	80064c4 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f003 0320 	and.w	r3, r3, #32
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d026      	beq.n	800651c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d021      	beq.n	800651c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064e6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2220      	movs	r2, #32
 80064ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064f4:	f043 0202 	orr.w	r2, r3, #2
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2204      	movs	r2, #4
 8006500:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d003      	beq.n	800651c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	695b      	ldr	r3, [r3, #20]
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f003 0308 	and.w	r3, r3, #8
 8006522:	2b00      	cmp	r3, #0
 8006524:	d026      	beq.n	8006574 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800652c:	2b00      	cmp	r3, #0
 800652e:	d021      	beq.n	8006574 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800653e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2208      	movs	r2, #8
 8006546:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800654c:	f043 0204 	orr.w	r2, r3, #4
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2204      	movs	r2, #4
 8006558:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d003      	beq.n	8006574 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	695b      	ldr	r3, [r3, #20]
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f003 0304 	and.w	r3, r3, #4
 800657a:	2b00      	cmp	r3, #0
 800657c:	d013      	beq.n	80065a6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00e      	beq.n	80065a6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006596:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2204      	movs	r2, #4
 800659e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 f853 	bl	800664c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f003 0302 	and.w	r3, r3, #2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d024      	beq.n	80065fa <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d01f      	beq.n	80065fa <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80065c8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2202      	movs	r2, #2
 80065d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f003 0310 	and.w	r3, r3, #16
 8006600:	2b00      	cmp	r3, #0
 8006602:	d01f      	beq.n	8006644 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d01a      	beq.n	8006644 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800661c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2210      	movs	r2, #16
 8006624:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f80e 	bl	8006660 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8006644:	bf00      	nop
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8006668:	bf00      	nop
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006674:	b480      	push	{r7}
 8006676:	b087      	sub	sp, #28
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800668c:	2b01      	cmp	r3, #1
 800668e:	d101      	bne.n	8006694 <HAL_DMA2D_ConfigLayer+0x20>
 8006690:	2302      	movs	r3, #2
 8006692:	e079      	b.n	8006788 <HAL_DMA2D_ConfigLayer+0x114>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2202      	movs	r2, #2
 80066a0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	011b      	lsls	r3, r3, #4
 80066a8:	3318      	adds	r3, #24
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	4413      	add	r3, r2
 80066ae:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	685a      	ldr	r2, [r3, #4]
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	041b      	lsls	r3, r3, #16
 80066ba:	4313      	orrs	r3, r2
 80066bc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80066be:	4b35      	ldr	r3, [pc, #212]	@ (8006794 <HAL_DMA2D_ConfigLayer+0x120>)
 80066c0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	2b0a      	cmp	r3, #10
 80066c8:	d003      	beq.n	80066d2 <HAL_DMA2D_ConfigLayer+0x5e>
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	2b09      	cmp	r3, #9
 80066d0:	d107      	bne.n	80066e2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	4313      	orrs	r3, r2
 80066de:	617b      	str	r3, [r7, #20]
 80066e0:	e005      	b.n	80066ee <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	061b      	lsls	r3, r3, #24
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d120      	bne.n	8006736 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	43db      	mvns	r3, r3
 80066fe:	ea02 0103 	and.w	r1, r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	430a      	orrs	r2, r1
 800670a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	6812      	ldr	r2, [r2, #0]
 8006714:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	2b0a      	cmp	r3, #10
 800671c:	d003      	beq.n	8006726 <HAL_DMA2D_ConfigLayer+0xb2>
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	2b09      	cmp	r3, #9
 8006724:	d127      	bne.n	8006776 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	68da      	ldr	r2, [r3, #12]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006732:	629a      	str	r2, [r3, #40]	@ 0x28
 8006734:	e01f      	b.n	8006776 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	69da      	ldr	r2, [r3, #28]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	43db      	mvns	r3, r3
 8006740:	ea02 0103 	and.w	r1, r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	430a      	orrs	r2, r1
 800674c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	6812      	ldr	r2, [r2, #0]
 8006756:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	2b0a      	cmp	r3, #10
 800675e:	d003      	beq.n	8006768 <HAL_DMA2D_ConfigLayer+0xf4>
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	2b09      	cmp	r3, #9
 8006766:	d106      	bne.n	8006776 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	68da      	ldr	r2, [r3, #12]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006774:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	371c      	adds	r7, #28
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr
 8006794:	ff03000f 	.word	0xff03000f

08006798 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d101      	bne.n	80067aa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e086      	b.n	80068b8 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d106      	bne.n	80067c2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2220      	movs	r2, #32
 80067b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f7fd f8e9 	bl	8003994 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067c2:	4b3f      	ldr	r3, [pc, #252]	@ (80068c0 <HAL_ETH_Init+0x128>)
 80067c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067c6:	4a3e      	ldr	r2, [pc, #248]	@ (80068c0 <HAL_ETH_Init+0x128>)
 80067c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80067cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80067ce:	4b3c      	ldr	r3, [pc, #240]	@ (80068c0 <HAL_ETH_Init+0x128>)
 80067d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067d6:	60bb      	str	r3, [r7, #8]
 80067d8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80067da:	4b3a      	ldr	r3, [pc, #232]	@ (80068c4 <HAL_ETH_Init+0x12c>)
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	4a39      	ldr	r2, [pc, #228]	@ (80068c4 <HAL_ETH_Init+0x12c>)
 80067e0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80067e4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80067e6:	4b37      	ldr	r3, [pc, #220]	@ (80068c4 <HAL_ETH_Init+0x12c>)
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	4935      	ldr	r1, [pc, #212]	@ (80068c4 <HAL_ETH_Init+0x12c>)
 80067f0:	4313      	orrs	r3, r2
 80067f2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80067f4:	4b33      	ldr	r3, [pc, #204]	@ (80068c4 <HAL_ETH_Init+0x12c>)
 80067f6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	6812      	ldr	r2, [r2, #0]
 8006806:	f043 0301 	orr.w	r3, r3, #1
 800680a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800680e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006810:	f7fe fcaa 	bl	8005168 <HAL_GetTick>
 8006814:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8006816:	e011      	b.n	800683c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8006818:	f7fe fca6 	bl	8005168 <HAL_GetTick>
 800681c:	4602      	mov	r2, r0
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006826:	d909      	bls.n	800683c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2204      	movs	r2, #4
 800682c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	22e0      	movs	r2, #224	@ 0xe0
 8006834:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e03d      	b.n	80068b8 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0301 	and.w	r3, r3, #1
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1e4      	bne.n	8006818 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 f97a 	bl	8006b48 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 fa25 	bl	8006ca4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fa7b 	bl	8006d56 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	461a      	mov	r2, r3
 8006866:	2100      	movs	r1, #0
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 f9e3 	bl	8006c34 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 800687c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	4b0f      	ldr	r3, [pc, #60]	@ (80068c8 <HAL_ETH_Init+0x130>)
 800688c:	430b      	orrs	r3, r1
 800688e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80068a2:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2210      	movs	r2, #16
 80068b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	40023800 	.word	0x40023800
 80068c4:	40013800 	.word	0x40013800
 80068c8:	00020060 	.word	0x00020060

080068cc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	4b53      	ldr	r3, [pc, #332]	@ (8006a30 <ETH_SetMACConfig+0x164>)
 80068e2:	4013      	ands	r3, r2
 80068e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	7b9b      	ldrb	r3, [r3, #14]
 80068ea:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80068ec:	683a      	ldr	r2, [r7, #0]
 80068ee:	7c12      	ldrb	r2, [r2, #16]
 80068f0:	2a00      	cmp	r2, #0
 80068f2:	d102      	bne.n	80068fa <ETH_SetMACConfig+0x2e>
 80068f4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80068f8:	e000      	b.n	80068fc <ETH_SetMACConfig+0x30>
 80068fa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80068fc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80068fe:	683a      	ldr	r2, [r7, #0]
 8006900:	7c52      	ldrb	r2, [r2, #17]
 8006902:	2a00      	cmp	r2, #0
 8006904:	d102      	bne.n	800690c <ETH_SetMACConfig+0x40>
 8006906:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800690a:	e000      	b.n	800690e <ETH_SetMACConfig+0x42>
 800690c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800690e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8006914:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	7fdb      	ldrb	r3, [r3, #31]
 800691a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800691c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8006922:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8006924:	683a      	ldr	r2, [r7, #0]
 8006926:	7f92      	ldrb	r2, [r2, #30]
 8006928:	2a00      	cmp	r2, #0
 800692a:	d102      	bne.n	8006932 <ETH_SetMACConfig+0x66>
 800692c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006930:	e000      	b.n	8006934 <ETH_SetMACConfig+0x68>
 8006932:	2200      	movs	r2, #0
                        macconf->Speed |
 8006934:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	7f1b      	ldrb	r3, [r3, #28]
 800693a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800693c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8006942:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	791b      	ldrb	r3, [r3, #4]
 8006948:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800694a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800694c:	683a      	ldr	r2, [r7, #0]
 800694e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006952:	2a00      	cmp	r2, #0
 8006954:	d102      	bne.n	800695c <ETH_SetMACConfig+0x90>
 8006956:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800695a:	e000      	b.n	800695e <ETH_SetMACConfig+0x92>
 800695c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800695e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	7bdb      	ldrb	r3, [r3, #15]
 8006964:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8006966:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800696c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006974:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8006976:	4313      	orrs	r3, r2
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	4313      	orrs	r3, r2
 800697c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800698e:	2001      	movs	r0, #1
 8006990:	f7fe fbf6 	bl	8005180 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80069aa:	4013      	ands	r3, r2
 80069ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069b2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80069b4:	683a      	ldr	r2, [r7, #0]
 80069b6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80069ba:	2a00      	cmp	r2, #0
 80069bc:	d101      	bne.n	80069c2 <ETH_SetMACConfig+0xf6>
 80069be:	2280      	movs	r2, #128	@ 0x80
 80069c0:	e000      	b.n	80069c4 <ETH_SetMACConfig+0xf8>
 80069c2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80069c4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80069ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80069cc:	683a      	ldr	r2, [r7, #0]
 80069ce:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80069d2:	2a01      	cmp	r2, #1
 80069d4:	d101      	bne.n	80069da <ETH_SetMACConfig+0x10e>
 80069d6:	2208      	movs	r2, #8
 80069d8:	e000      	b.n	80069dc <ETH_SetMACConfig+0x110>
 80069da:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80069dc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80069e4:	2a01      	cmp	r2, #1
 80069e6:	d101      	bne.n	80069ec <ETH_SetMACConfig+0x120>
 80069e8:	2204      	movs	r2, #4
 80069ea:	e000      	b.n	80069ee <ETH_SetMACConfig+0x122>
 80069ec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80069ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80069f0:	683a      	ldr	r2, [r7, #0]
 80069f2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80069f6:	2a01      	cmp	r2, #1
 80069f8:	d101      	bne.n	80069fe <ETH_SetMACConfig+0x132>
 80069fa:	2202      	movs	r2, #2
 80069fc:	e000      	b.n	8006a00 <ETH_SetMACConfig+0x134>
 80069fe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8006a00:	4313      	orrs	r3, r2
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006a18:	2001      	movs	r0, #1
 8006a1a:	f7fe fbb1 	bl	8005180 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	619a      	str	r2, [r3, #24]
}
 8006a26:	bf00      	nop
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	fd20810f 	.word	0xfd20810f

08006a34 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	4b3d      	ldr	r3, [pc, #244]	@ (8006b44 <ETH_SetDMAConfig+0x110>)
 8006a4e:	4013      	ands	r3, r2
 8006a50:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	7b1b      	ldrb	r3, [r3, #12]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d102      	bne.n	8006a60 <ETH_SetDMAConfig+0x2c>
 8006a5a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8006a5e:	e000      	b.n	8006a62 <ETH_SetDMAConfig+0x2e>
 8006a60:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	7b5b      	ldrb	r3, [r3, #13]
 8006a66:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006a68:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	7f52      	ldrb	r2, [r2, #29]
 8006a6e:	2a00      	cmp	r2, #0
 8006a70:	d102      	bne.n	8006a78 <ETH_SetDMAConfig+0x44>
 8006a72:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006a76:	e000      	b.n	8006a7a <ETH_SetDMAConfig+0x46>
 8006a78:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8006a7a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	7b9b      	ldrb	r3, [r3, #14]
 8006a80:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8006a82:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8006a88:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	7f1b      	ldrb	r3, [r3, #28]
 8006a8e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8006a90:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	7f9b      	ldrb	r3, [r3, #30]
 8006a96:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8006a98:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8006a9e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006aa6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ab8:	461a      	mov	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ac6:	699b      	ldr	r3, [r3, #24]
 8006ac8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006aca:	2001      	movs	r0, #1
 8006acc:	f7fe fb58 	bl	8005180 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ad8:	461a      	mov	r2, r3
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	791b      	ldrb	r3, [r3, #4]
 8006ae2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006ae8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8006aee:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8006af4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006afc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8006afe:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b04:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8006b06:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8006b0c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	6812      	ldr	r2, [r2, #0]
 8006b12:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006b16:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006b1a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006b28:	2001      	movs	r0, #1
 8006b2a:	f7fe fb29 	bl	8005180 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b36:	461a      	mov	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6013      	str	r3, [r2, #0]
}
 8006b3c:	bf00      	nop
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	f8de3f23 	.word	0xf8de3f23

08006b48 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b0a6      	sub	sp, #152	@ 0x98
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8006b50:	2301      	movs	r3, #1
 8006b52:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8006b56:	2301      	movs	r3, #1
 8006b58:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006b60:	2300      	movs	r3, #0
 8006b62:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8006b66:	2301      	movs	r3, #1
 8006b68:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8006b72:	2301      	movs	r3, #1
 8006b74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8006b84:	2300      	movs	r3, #0
 8006b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8006b94:	2300      	movs	r3, #0
 8006b96:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8006baa:	2300      	movs	r3, #0
 8006bac:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8006bb0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006bb4:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8006bb6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006bba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006bc2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f7ff fe7f 	bl	80068cc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8006be0:	2300      	movs	r3, #0
 8006be2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8006be4:	2300      	movs	r3, #0
 8006be6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8006bea:	2300      	movs	r3, #0
 8006bec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006bfe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006c02:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8006c04:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006c08:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006c0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006c0e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8006c10:	2301      	movs	r3, #1
 8006c12:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8006c16:	2300      	movs	r3, #0
 8006c18:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8006c1e:	f107 0308 	add.w	r3, r7, #8
 8006c22:	4619      	mov	r1, r3
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f7ff ff05 	bl	8006a34 <ETH_SetDMAConfig>
}
 8006c2a:	bf00      	nop
 8006c2c:	3798      	adds	r7, #152	@ 0x98
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
	...

08006c34 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b087      	sub	sp, #28
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	3305      	adds	r3, #5
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	021b      	lsls	r3, r3, #8
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	3204      	adds	r2, #4
 8006c4c:	7812      	ldrb	r2, [r2, #0]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8006c52:	68ba      	ldr	r2, [r7, #8]
 8006c54:	4b11      	ldr	r3, [pc, #68]	@ (8006c9c <ETH_MACAddressConfig+0x68>)
 8006c56:	4413      	add	r3, r2
 8006c58:	461a      	mov	r2, r3
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	3303      	adds	r3, #3
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	061a      	lsls	r2, r3, #24
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	3302      	adds	r3, #2
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	041b      	lsls	r3, r3, #16
 8006c6e:	431a      	orrs	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	3301      	adds	r3, #1
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	021b      	lsls	r3, r3, #8
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	7812      	ldrb	r2, [r2, #0]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	4b06      	ldr	r3, [pc, #24]	@ (8006ca0 <ETH_MACAddressConfig+0x6c>)
 8006c86:	4413      	add	r3, r2
 8006c88:	461a      	mov	r2, r3
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	6013      	str	r3, [r2, #0]
}
 8006c8e:	bf00      	nop
 8006c90:	371c      	adds	r7, #28
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	40028040 	.word	0x40028040
 8006ca0:	40028044 	.word	0x40028044

08006ca4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006cac:	2300      	movs	r3, #0
 8006cae:	60fb      	str	r3, [r7, #12]
 8006cb0:	e03e      	b.n	8006d30 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	68d9      	ldr	r1, [r3, #12]
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4413      	add	r3, r2
 8006cbe:	00db      	lsls	r3, r3, #3
 8006cc0:	440b      	add	r3, r1
 8006cc2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006cdc:	68b9      	ldr	r1, [r7, #8]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	3206      	adds	r2, #6
 8006ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	d80c      	bhi.n	8006d14 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	68d9      	ldr	r1, [r3, #12]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	1c5a      	adds	r2, r3, #1
 8006d02:	4613      	mov	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	00db      	lsls	r3, r3, #3
 8006d0a:	440b      	add	r3, r1
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	60da      	str	r2, [r3, #12]
 8006d12:	e004      	b.n	8006d1e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	461a      	mov	r2, r3
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	60fb      	str	r3, [r7, #12]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2b03      	cmp	r3, #3
 8006d34:	d9bd      	bls.n	8006cb2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	68da      	ldr	r2, [r3, #12]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d48:	611a      	str	r2, [r3, #16]
}
 8006d4a:	bf00      	nop
 8006d4c:	3714      	adds	r7, #20
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b085      	sub	sp, #20
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006d5e:	2300      	movs	r3, #0
 8006d60:	60fb      	str	r3, [r7, #12]
 8006d62:	e048      	b.n	8006df6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6919      	ldr	r1, [r3, #16]
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	4413      	add	r3, r2
 8006d70:	00db      	lsls	r3, r3, #3
 8006d72:	440b      	add	r3, r1
 8006d74:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	2200      	movs	r2, #0
 8006d86:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2200      	movs	r2, #0
 8006d92:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	2200      	movs	r2, #0
 8006d98:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006da0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006dba:	68b9      	ldr	r1, [r7, #8]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	3212      	adds	r2, #18
 8006dc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d80c      	bhi.n	8006de6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6919      	ldr	r1, [r3, #16]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	1c5a      	adds	r2, r3, #1
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	4413      	add	r3, r2
 8006dda:	00db      	lsls	r3, r3, #3
 8006ddc:	440b      	add	r3, r1
 8006dde:	461a      	mov	r2, r3
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	60da      	str	r2, [r3, #12]
 8006de4:	e004      	b.n	8006df0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	461a      	mov	r2, r3
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	3301      	adds	r3, #1
 8006df4:	60fb      	str	r3, [r7, #12]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2b03      	cmp	r3, #3
 8006dfa:	d9b3      	bls.n	8006d64 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	691a      	ldr	r2, [r3, #16]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e26:	60da      	str	r2, [r3, #12]
}
 8006e28:	bf00      	nop
 8006e2a:	3714      	adds	r7, #20
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b089      	sub	sp, #36	@ 0x24
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006e42:	2300      	movs	r3, #0
 8006e44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006e46:	2300      	movs	r3, #0
 8006e48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8006e4e:	2300      	movs	r3, #0
 8006e50:	61fb      	str	r3, [r7, #28]
 8006e52:	e175      	b.n	8007140 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006e54:	2201      	movs	r2, #1
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	fa02 f303 	lsl.w	r3, r2, r3
 8006e5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	4013      	ands	r3, r2
 8006e66:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	f040 8164 	bne.w	800713a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	f003 0303 	and.w	r3, r3, #3
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d005      	beq.n	8006e8a <HAL_GPIO_Init+0x56>
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	f003 0303 	and.w	r3, r3, #3
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d130      	bne.n	8006eec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	005b      	lsls	r3, r3, #1
 8006e94:	2203      	movs	r2, #3
 8006e96:	fa02 f303 	lsl.w	r3, r2, r3
 8006e9a:	43db      	mvns	r3, r3
 8006e9c:	69ba      	ldr	r2, [r7, #24]
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	68da      	ldr	r2, [r3, #12]
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	005b      	lsls	r3, r3, #1
 8006eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8006eae:	69ba      	ldr	r2, [r7, #24]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	69ba      	ldr	r2, [r7, #24]
 8006eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec8:	43db      	mvns	r3, r3
 8006eca:	69ba      	ldr	r2, [r7, #24]
 8006ecc:	4013      	ands	r3, r2
 8006ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	091b      	lsrs	r3, r3, #4
 8006ed6:	f003 0201 	and.w	r2, r3, #1
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee0:	69ba      	ldr	r2, [r7, #24]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	69ba      	ldr	r2, [r7, #24]
 8006eea:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	f003 0303 	and.w	r3, r3, #3
 8006ef4:	2b03      	cmp	r3, #3
 8006ef6:	d017      	beq.n	8006f28 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	005b      	lsls	r3, r3, #1
 8006f02:	2203      	movs	r2, #3
 8006f04:	fa02 f303 	lsl.w	r3, r2, r3
 8006f08:	43db      	mvns	r3, r3
 8006f0a:	69ba      	ldr	r2, [r7, #24]
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	689a      	ldr	r2, [r3, #8]
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	005b      	lsls	r3, r3, #1
 8006f18:	fa02 f303 	lsl.w	r3, r2, r3
 8006f1c:	69ba      	ldr	r2, [r7, #24]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	69ba      	ldr	r2, [r7, #24]
 8006f26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	f003 0303 	and.w	r3, r3, #3
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d123      	bne.n	8006f7c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	08da      	lsrs	r2, r3, #3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	3208      	adds	r2, #8
 8006f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	f003 0307 	and.w	r3, r3, #7
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	220f      	movs	r2, #15
 8006f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f50:	43db      	mvns	r3, r3
 8006f52:	69ba      	ldr	r2, [r7, #24]
 8006f54:	4013      	ands	r3, r2
 8006f56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	691a      	ldr	r2, [r3, #16]
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	f003 0307 	and.w	r3, r3, #7
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	fa02 f303 	lsl.w	r3, r2, r3
 8006f68:	69ba      	ldr	r2, [r7, #24]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	08da      	lsrs	r2, r3, #3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	3208      	adds	r2, #8
 8006f76:	69b9      	ldr	r1, [r7, #24]
 8006f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	005b      	lsls	r3, r3, #1
 8006f86:	2203      	movs	r2, #3
 8006f88:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8c:	43db      	mvns	r3, r3
 8006f8e:	69ba      	ldr	r2, [r7, #24]
 8006f90:	4013      	ands	r3, r2
 8006f92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	f003 0203 	and.w	r2, r3, #3
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	005b      	lsls	r3, r3, #1
 8006fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa4:	69ba      	ldr	r2, [r7, #24]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	69ba      	ldr	r2, [r7, #24]
 8006fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f000 80be 	beq.w	800713a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fbe:	4b66      	ldr	r3, [pc, #408]	@ (8007158 <HAL_GPIO_Init+0x324>)
 8006fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fc2:	4a65      	ldr	r2, [pc, #404]	@ (8007158 <HAL_GPIO_Init+0x324>)
 8006fc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006fc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8006fca:	4b63      	ldr	r3, [pc, #396]	@ (8007158 <HAL_GPIO_Init+0x324>)
 8006fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fd2:	60fb      	str	r3, [r7, #12]
 8006fd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006fd6:	4a61      	ldr	r2, [pc, #388]	@ (800715c <HAL_GPIO_Init+0x328>)
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	089b      	lsrs	r3, r3, #2
 8006fdc:	3302      	adds	r3, #2
 8006fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	f003 0303 	and.w	r3, r3, #3
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	220f      	movs	r2, #15
 8006fee:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff2:	43db      	mvns	r3, r3
 8006ff4:	69ba      	ldr	r2, [r7, #24]
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a58      	ldr	r2, [pc, #352]	@ (8007160 <HAL_GPIO_Init+0x32c>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d037      	beq.n	8007072 <HAL_GPIO_Init+0x23e>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a57      	ldr	r2, [pc, #348]	@ (8007164 <HAL_GPIO_Init+0x330>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d031      	beq.n	800706e <HAL_GPIO_Init+0x23a>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a56      	ldr	r2, [pc, #344]	@ (8007168 <HAL_GPIO_Init+0x334>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d02b      	beq.n	800706a <HAL_GPIO_Init+0x236>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a55      	ldr	r2, [pc, #340]	@ (800716c <HAL_GPIO_Init+0x338>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d025      	beq.n	8007066 <HAL_GPIO_Init+0x232>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a54      	ldr	r2, [pc, #336]	@ (8007170 <HAL_GPIO_Init+0x33c>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d01f      	beq.n	8007062 <HAL_GPIO_Init+0x22e>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a53      	ldr	r2, [pc, #332]	@ (8007174 <HAL_GPIO_Init+0x340>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d019      	beq.n	800705e <HAL_GPIO_Init+0x22a>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a52      	ldr	r2, [pc, #328]	@ (8007178 <HAL_GPIO_Init+0x344>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d013      	beq.n	800705a <HAL_GPIO_Init+0x226>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a51      	ldr	r2, [pc, #324]	@ (800717c <HAL_GPIO_Init+0x348>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d00d      	beq.n	8007056 <HAL_GPIO_Init+0x222>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a50      	ldr	r2, [pc, #320]	@ (8007180 <HAL_GPIO_Init+0x34c>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d007      	beq.n	8007052 <HAL_GPIO_Init+0x21e>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a4f      	ldr	r2, [pc, #316]	@ (8007184 <HAL_GPIO_Init+0x350>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d101      	bne.n	800704e <HAL_GPIO_Init+0x21a>
 800704a:	2309      	movs	r3, #9
 800704c:	e012      	b.n	8007074 <HAL_GPIO_Init+0x240>
 800704e:	230a      	movs	r3, #10
 8007050:	e010      	b.n	8007074 <HAL_GPIO_Init+0x240>
 8007052:	2308      	movs	r3, #8
 8007054:	e00e      	b.n	8007074 <HAL_GPIO_Init+0x240>
 8007056:	2307      	movs	r3, #7
 8007058:	e00c      	b.n	8007074 <HAL_GPIO_Init+0x240>
 800705a:	2306      	movs	r3, #6
 800705c:	e00a      	b.n	8007074 <HAL_GPIO_Init+0x240>
 800705e:	2305      	movs	r3, #5
 8007060:	e008      	b.n	8007074 <HAL_GPIO_Init+0x240>
 8007062:	2304      	movs	r3, #4
 8007064:	e006      	b.n	8007074 <HAL_GPIO_Init+0x240>
 8007066:	2303      	movs	r3, #3
 8007068:	e004      	b.n	8007074 <HAL_GPIO_Init+0x240>
 800706a:	2302      	movs	r3, #2
 800706c:	e002      	b.n	8007074 <HAL_GPIO_Init+0x240>
 800706e:	2301      	movs	r3, #1
 8007070:	e000      	b.n	8007074 <HAL_GPIO_Init+0x240>
 8007072:	2300      	movs	r3, #0
 8007074:	69fa      	ldr	r2, [r7, #28]
 8007076:	f002 0203 	and.w	r2, r2, #3
 800707a:	0092      	lsls	r2, r2, #2
 800707c:	4093      	lsls	r3, r2
 800707e:	69ba      	ldr	r2, [r7, #24]
 8007080:	4313      	orrs	r3, r2
 8007082:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007084:	4935      	ldr	r1, [pc, #212]	@ (800715c <HAL_GPIO_Init+0x328>)
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	089b      	lsrs	r3, r3, #2
 800708a:	3302      	adds	r3, #2
 800708c:	69ba      	ldr	r2, [r7, #24]
 800708e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007092:	4b3d      	ldr	r3, [pc, #244]	@ (8007188 <HAL_GPIO_Init+0x354>)
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	43db      	mvns	r3, r3
 800709c:	69ba      	ldr	r2, [r7, #24]
 800709e:	4013      	ands	r3, r2
 80070a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d003      	beq.n	80070b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80070ae:	69ba      	ldr	r2, [r7, #24]
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80070b6:	4a34      	ldr	r2, [pc, #208]	@ (8007188 <HAL_GPIO_Init+0x354>)
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80070bc:	4b32      	ldr	r3, [pc, #200]	@ (8007188 <HAL_GPIO_Init+0x354>)
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	43db      	mvns	r3, r3
 80070c6:	69ba      	ldr	r2, [r7, #24]
 80070c8:	4013      	ands	r3, r2
 80070ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d003      	beq.n	80070e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80070d8:	69ba      	ldr	r2, [r7, #24]
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	4313      	orrs	r3, r2
 80070de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80070e0:	4a29      	ldr	r2, [pc, #164]	@ (8007188 <HAL_GPIO_Init+0x354>)
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80070e6:	4b28      	ldr	r3, [pc, #160]	@ (8007188 <HAL_GPIO_Init+0x354>)
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	43db      	mvns	r3, r3
 80070f0:	69ba      	ldr	r2, [r7, #24]
 80070f2:	4013      	ands	r3, r2
 80070f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d003      	beq.n	800710a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007102:	69ba      	ldr	r2, [r7, #24]
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	4313      	orrs	r3, r2
 8007108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800710a:	4a1f      	ldr	r2, [pc, #124]	@ (8007188 <HAL_GPIO_Init+0x354>)
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007110:	4b1d      	ldr	r3, [pc, #116]	@ (8007188 <HAL_GPIO_Init+0x354>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	43db      	mvns	r3, r3
 800711a:	69ba      	ldr	r2, [r7, #24]
 800711c:	4013      	ands	r3, r2
 800711e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007128:	2b00      	cmp	r3, #0
 800712a:	d003      	beq.n	8007134 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800712c:	69ba      	ldr	r2, [r7, #24]
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	4313      	orrs	r3, r2
 8007132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007134:	4a14      	ldr	r2, [pc, #80]	@ (8007188 <HAL_GPIO_Init+0x354>)
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	3301      	adds	r3, #1
 800713e:	61fb      	str	r3, [r7, #28]
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	2b0f      	cmp	r3, #15
 8007144:	f67f ae86 	bls.w	8006e54 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007148:	bf00      	nop
 800714a:	bf00      	nop
 800714c:	3724      	adds	r7, #36	@ 0x24
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	40023800 	.word	0x40023800
 800715c:	40013800 	.word	0x40013800
 8007160:	40020000 	.word	0x40020000
 8007164:	40020400 	.word	0x40020400
 8007168:	40020800 	.word	0x40020800
 800716c:	40020c00 	.word	0x40020c00
 8007170:	40021000 	.word	0x40021000
 8007174:	40021400 	.word	0x40021400
 8007178:	40021800 	.word	0x40021800
 800717c:	40021c00 	.word	0x40021c00
 8007180:	40022000 	.word	0x40022000
 8007184:	40022400 	.word	0x40022400
 8007188:	40013c00 	.word	0x40013c00

0800718c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	460b      	mov	r3, r1
 8007196:	807b      	strh	r3, [r7, #2]
 8007198:	4613      	mov	r3, r2
 800719a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800719c:	787b      	ldrb	r3, [r7, #1]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d003      	beq.n	80071aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80071a2:	887a      	ldrh	r2, [r7, #2]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80071a8:	e003      	b.n	80071b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80071aa:	887b      	ldrh	r3, [r7, #2]
 80071ac:	041a      	lsls	r2, r3, #16
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	619a      	str	r2, [r3, #24]
}
 80071b2:	bf00      	nop
 80071b4:	370c      	adds	r7, #12
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr

080071be <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b086      	sub	sp, #24
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4618      	mov	r0, r3
 80071d6:	f008 ffd5 	bl	8010184 <USB_GetMode>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b01      	cmp	r3, #1
 80071de:	f040 80fb 	bne.w	80073d8 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4618      	mov	r0, r3
 80071e8:	f008 ff98 	bl	801011c <USB_ReadInterrupts>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f000 80f1 	beq.w	80073d6 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4618      	mov	r0, r3
 80071fa:	f008 ff8f 	bl	801011c <USB_ReadInterrupts>
 80071fe:	4603      	mov	r3, r0
 8007200:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007204:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007208:	d104      	bne.n	8007214 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8007212:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4618      	mov	r0, r3
 800721a:	f008 ff7f 	bl	801011c <USB_ReadInterrupts>
 800721e:	4603      	mov	r3, r0
 8007220:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007224:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007228:	d104      	bne.n	8007234 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007232:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4618      	mov	r0, r3
 800723a:	f008 ff6f 	bl	801011c <USB_ReadInterrupts>
 800723e:	4603      	mov	r3, r0
 8007240:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007244:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007248:	d104      	bne.n	8007254 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007252:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4618      	mov	r0, r3
 800725a:	f008 ff5f 	bl	801011c <USB_ReadInterrupts>
 800725e:	4603      	mov	r3, r0
 8007260:	f003 0302 	and.w	r3, r3, #2
 8007264:	2b02      	cmp	r3, #2
 8007266:	d103      	bne.n	8007270 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2202      	movs	r2, #2
 800726e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4618      	mov	r0, r3
 8007276:	f008 ff51 	bl	801011c <USB_ReadInterrupts>
 800727a:	4603      	mov	r3, r0
 800727c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007280:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007284:	d120      	bne.n	80072c8 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800728e:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 0301 	and.w	r3, r3, #1
 800729c:	2b00      	cmp	r3, #0
 800729e:	d113      	bne.n	80072c8 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80072a0:	2110      	movs	r1, #16
 80072a2:	6938      	ldr	r0, [r7, #16]
 80072a4:	f008 fe82 	bl	800ffac <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80072a8:	6938      	ldr	r0, [r7, #16]
 80072aa:	f008 feb1 	bl	8010010 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	7a5b      	ldrb	r3, [r3, #9]
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d105      	bne.n	80072c2 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2101      	movs	r1, #1
 80072bc:	4618      	mov	r0, r3
 80072be:	f008 ff6f 	bl	80101a0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f00d fff2 	bl	80152ac <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4618      	mov	r0, r3
 80072ce:	f008 ff25 	bl	801011c <USB_ReadInterrupts>
 80072d2:	4603      	mov	r3, r0
 80072d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80072d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80072dc:	d102      	bne.n	80072e4 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f001 fca1 	bl	8008c26 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4618      	mov	r0, r3
 80072ea:	f008 ff17 	bl	801011c <USB_ReadInterrupts>
 80072ee:	4603      	mov	r3, r0
 80072f0:	f003 0308 	and.w	r3, r3, #8
 80072f4:	2b08      	cmp	r3, #8
 80072f6:	d106      	bne.n	8007306 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f00d ffbb 	bl	8015274 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2208      	movs	r2, #8
 8007304:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4618      	mov	r0, r3
 800730c:	f008 ff06 	bl	801011c <USB_ReadInterrupts>
 8007310:	4603      	mov	r3, r0
 8007312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007316:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800731a:	d139      	bne.n	8007390 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4618      	mov	r0, r3
 8007322:	f008 ff7a 	bl	801021a <USB_HC_ReadInterrupt>
 8007326:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007328:	2300      	movs	r3, #0
 800732a:	617b      	str	r3, [r7, #20]
 800732c:	e025      	b.n	800737a <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	f003 030f 	and.w	r3, r3, #15
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	fa22 f303 	lsr.w	r3, r2, r3
 800733a:	f003 0301 	and.w	r3, r3, #1
 800733e:	2b00      	cmp	r3, #0
 8007340:	d018      	beq.n	8007374 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	015a      	lsls	r2, r3, #5
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	4413      	add	r3, r2
 800734a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007354:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007358:	d106      	bne.n	8007368 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	b2db      	uxtb	r3, r3
 800735e:	4619      	mov	r1, r3
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f859 	bl	8007418 <HCD_HC_IN_IRQHandler>
 8007366:	e005      	b.n	8007374 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	b2db      	uxtb	r3, r3
 800736c:	4619      	mov	r1, r3
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 febb 	bl	80080ea <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	3301      	adds	r3, #1
 8007378:	617b      	str	r3, [r7, #20]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	795b      	ldrb	r3, [r3, #5]
 800737e:	461a      	mov	r2, r3
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	4293      	cmp	r3, r2
 8007384:	d3d3      	bcc.n	800732e <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800738e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4618      	mov	r0, r3
 8007396:	f008 fec1 	bl	801011c <USB_ReadInterrupts>
 800739a:	4603      	mov	r3, r0
 800739c:	f003 0310 	and.w	r3, r3, #16
 80073a0:	2b10      	cmp	r3, #16
 80073a2:	d101      	bne.n	80073a8 <HAL_HCD_IRQHandler+0x1ea>
 80073a4:	2301      	movs	r3, #1
 80073a6:	e000      	b.n	80073aa <HAL_HCD_IRQHandler+0x1ec>
 80073a8:	2300      	movs	r3, #0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d014      	beq.n	80073d8 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	699a      	ldr	r2, [r3, #24]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f022 0210 	bic.w	r2, r2, #16
 80073bc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f001 fb52 	bl	8008a68 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	699a      	ldr	r2, [r3, #24]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f042 0210 	orr.w	r2, r2, #16
 80073d2:	619a      	str	r2, [r3, #24]
 80073d4:	e000      	b.n	80073d8 <HAL_HCD_IRQHandler+0x21a>
      return;
 80073d6:	bf00      	nop
    }
  }
}
 80073d8:	3718      	adds	r7, #24
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b082      	sub	sp, #8
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d101      	bne.n	80073f4 <HAL_HCD_Stop+0x16>
 80073f0:	2302      	movs	r3, #2
 80073f2:	e00d      	b.n	8007410 <HAL_HCD_Stop+0x32>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4618      	mov	r0, r3
 8007402:	f009 f83b 	bl	801047c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	460b      	mov	r3, r1
 8007422:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	78fa      	ldrb	r2, [r7, #3]
 8007434:	4611      	mov	r1, r2
 8007436:	4618      	mov	r0, r3
 8007438:	f008 fe83 	bl	8010142 <USB_ReadChInterrupts>
 800743c:	4603      	mov	r3, r0
 800743e:	f003 0304 	and.w	r3, r3, #4
 8007442:	2b04      	cmp	r3, #4
 8007444:	d11a      	bne.n	800747c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8007446:	78fb      	ldrb	r3, [r7, #3]
 8007448:	015a      	lsls	r2, r3, #5
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	4413      	add	r3, r2
 800744e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007452:	461a      	mov	r2, r3
 8007454:	2304      	movs	r3, #4
 8007456:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8007458:	78fa      	ldrb	r2, [r7, #3]
 800745a:	6879      	ldr	r1, [r7, #4]
 800745c:	4613      	mov	r3, r2
 800745e:	011b      	lsls	r3, r3, #4
 8007460:	1a9b      	subs	r3, r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	440b      	add	r3, r1
 8007466:	334d      	adds	r3, #77	@ 0x4d
 8007468:	2207      	movs	r2, #7
 800746a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	78fa      	ldrb	r2, [r7, #3]
 8007472:	4611      	mov	r1, r2
 8007474:	4618      	mov	r0, r3
 8007476:	f008 fee1 	bl	801023c <USB_HC_Halt>
 800747a:	e09e      	b.n	80075ba <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	78fa      	ldrb	r2, [r7, #3]
 8007482:	4611      	mov	r1, r2
 8007484:	4618      	mov	r0, r3
 8007486:	f008 fe5c 	bl	8010142 <USB_ReadChInterrupts>
 800748a:	4603      	mov	r3, r0
 800748c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007490:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007494:	d11b      	bne.n	80074ce <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8007496:	78fb      	ldrb	r3, [r7, #3]
 8007498:	015a      	lsls	r2, r3, #5
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	4413      	add	r3, r2
 800749e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074a2:	461a      	mov	r2, r3
 80074a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80074a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80074aa:	78fa      	ldrb	r2, [r7, #3]
 80074ac:	6879      	ldr	r1, [r7, #4]
 80074ae:	4613      	mov	r3, r2
 80074b0:	011b      	lsls	r3, r3, #4
 80074b2:	1a9b      	subs	r3, r3, r2
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	440b      	add	r3, r1
 80074b8:	334d      	adds	r3, #77	@ 0x4d
 80074ba:	2208      	movs	r2, #8
 80074bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	78fa      	ldrb	r2, [r7, #3]
 80074c4:	4611      	mov	r1, r2
 80074c6:	4618      	mov	r0, r3
 80074c8:	f008 feb8 	bl	801023c <USB_HC_Halt>
 80074cc:	e075      	b.n	80075ba <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	78fa      	ldrb	r2, [r7, #3]
 80074d4:	4611      	mov	r1, r2
 80074d6:	4618      	mov	r0, r3
 80074d8:	f008 fe33 	bl	8010142 <USB_ReadChInterrupts>
 80074dc:	4603      	mov	r3, r0
 80074de:	f003 0308 	and.w	r3, r3, #8
 80074e2:	2b08      	cmp	r3, #8
 80074e4:	d11a      	bne.n	800751c <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80074e6:	78fb      	ldrb	r3, [r7, #3]
 80074e8:	015a      	lsls	r2, r3, #5
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	4413      	add	r3, r2
 80074ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074f2:	461a      	mov	r2, r3
 80074f4:	2308      	movs	r3, #8
 80074f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80074f8:	78fa      	ldrb	r2, [r7, #3]
 80074fa:	6879      	ldr	r1, [r7, #4]
 80074fc:	4613      	mov	r3, r2
 80074fe:	011b      	lsls	r3, r3, #4
 8007500:	1a9b      	subs	r3, r3, r2
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	440b      	add	r3, r1
 8007506:	334d      	adds	r3, #77	@ 0x4d
 8007508:	2206      	movs	r2, #6
 800750a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	78fa      	ldrb	r2, [r7, #3]
 8007512:	4611      	mov	r1, r2
 8007514:	4618      	mov	r0, r3
 8007516:	f008 fe91 	bl	801023c <USB_HC_Halt>
 800751a:	e04e      	b.n	80075ba <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	78fa      	ldrb	r2, [r7, #3]
 8007522:	4611      	mov	r1, r2
 8007524:	4618      	mov	r0, r3
 8007526:	f008 fe0c 	bl	8010142 <USB_ReadChInterrupts>
 800752a:	4603      	mov	r3, r0
 800752c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007530:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007534:	d11b      	bne.n	800756e <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8007536:	78fb      	ldrb	r3, [r7, #3]
 8007538:	015a      	lsls	r2, r3, #5
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	4413      	add	r3, r2
 800753e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007542:	461a      	mov	r2, r3
 8007544:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007548:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800754a:	78fa      	ldrb	r2, [r7, #3]
 800754c:	6879      	ldr	r1, [r7, #4]
 800754e:	4613      	mov	r3, r2
 8007550:	011b      	lsls	r3, r3, #4
 8007552:	1a9b      	subs	r3, r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	440b      	add	r3, r1
 8007558:	334d      	adds	r3, #77	@ 0x4d
 800755a:	2209      	movs	r2, #9
 800755c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	78fa      	ldrb	r2, [r7, #3]
 8007564:	4611      	mov	r1, r2
 8007566:	4618      	mov	r0, r3
 8007568:	f008 fe68 	bl	801023c <USB_HC_Halt>
 800756c:	e025      	b.n	80075ba <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	78fa      	ldrb	r2, [r7, #3]
 8007574:	4611      	mov	r1, r2
 8007576:	4618      	mov	r0, r3
 8007578:	f008 fde3 	bl	8010142 <USB_ReadChInterrupts>
 800757c:	4603      	mov	r3, r0
 800757e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007582:	2b80      	cmp	r3, #128	@ 0x80
 8007584:	d119      	bne.n	80075ba <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8007586:	78fb      	ldrb	r3, [r7, #3]
 8007588:	015a      	lsls	r2, r3, #5
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	4413      	add	r3, r2
 800758e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007592:	461a      	mov	r2, r3
 8007594:	2380      	movs	r3, #128	@ 0x80
 8007596:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8007598:	78fa      	ldrb	r2, [r7, #3]
 800759a:	6879      	ldr	r1, [r7, #4]
 800759c:	4613      	mov	r3, r2
 800759e:	011b      	lsls	r3, r3, #4
 80075a0:	1a9b      	subs	r3, r3, r2
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	440b      	add	r3, r1
 80075a6:	334d      	adds	r3, #77	@ 0x4d
 80075a8:	2207      	movs	r2, #7
 80075aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	78fa      	ldrb	r2, [r7, #3]
 80075b2:	4611      	mov	r1, r2
 80075b4:	4618      	mov	r0, r3
 80075b6:	f008 fe41 	bl	801023c <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	78fa      	ldrb	r2, [r7, #3]
 80075c0:	4611      	mov	r1, r2
 80075c2:	4618      	mov	r0, r3
 80075c4:	f008 fdbd 	bl	8010142 <USB_ReadChInterrupts>
 80075c8:	4603      	mov	r3, r0
 80075ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075d2:	d112      	bne.n	80075fa <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	78fa      	ldrb	r2, [r7, #3]
 80075da:	4611      	mov	r1, r2
 80075dc:	4618      	mov	r0, r3
 80075de:	f008 fe2d 	bl	801023c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80075e2:	78fb      	ldrb	r3, [r7, #3]
 80075e4:	015a      	lsls	r2, r3, #5
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	4413      	add	r3, r2
 80075ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075ee:	461a      	mov	r2, r3
 80075f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80075f4:	6093      	str	r3, [r2, #8]
 80075f6:	f000 bd75 	b.w	80080e4 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	78fa      	ldrb	r2, [r7, #3]
 8007600:	4611      	mov	r1, r2
 8007602:	4618      	mov	r0, r3
 8007604:	f008 fd9d 	bl	8010142 <USB_ReadChInterrupts>
 8007608:	4603      	mov	r3, r0
 800760a:	f003 0301 	and.w	r3, r3, #1
 800760e:	2b01      	cmp	r3, #1
 8007610:	f040 8128 	bne.w	8007864 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8007614:	78fb      	ldrb	r3, [r7, #3]
 8007616:	015a      	lsls	r2, r3, #5
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	4413      	add	r3, r2
 800761c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007620:	461a      	mov	r2, r3
 8007622:	2320      	movs	r3, #32
 8007624:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8007626:	78fa      	ldrb	r2, [r7, #3]
 8007628:	6879      	ldr	r1, [r7, #4]
 800762a:	4613      	mov	r3, r2
 800762c:	011b      	lsls	r3, r3, #4
 800762e:	1a9b      	subs	r3, r3, r2
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	440b      	add	r3, r1
 8007634:	331b      	adds	r3, #27
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d119      	bne.n	8007670 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800763c:	78fa      	ldrb	r2, [r7, #3]
 800763e:	6879      	ldr	r1, [r7, #4]
 8007640:	4613      	mov	r3, r2
 8007642:	011b      	lsls	r3, r3, #4
 8007644:	1a9b      	subs	r3, r3, r2
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	440b      	add	r3, r1
 800764a:	331b      	adds	r3, #27
 800764c:	2200      	movs	r2, #0
 800764e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007650:	78fb      	ldrb	r3, [r7, #3]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	4413      	add	r3, r2
 8007658:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	78fa      	ldrb	r2, [r7, #3]
 8007660:	0151      	lsls	r1, r2, #5
 8007662:	693a      	ldr	r2, [r7, #16]
 8007664:	440a      	add	r2, r1
 8007666:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800766a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800766e:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	799b      	ldrb	r3, [r3, #6]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d01b      	beq.n	80076b0 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8007678:	78fa      	ldrb	r2, [r7, #3]
 800767a:	6879      	ldr	r1, [r7, #4]
 800767c:	4613      	mov	r3, r2
 800767e:	011b      	lsls	r3, r3, #4
 8007680:	1a9b      	subs	r3, r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	440b      	add	r3, r1
 8007686:	3330      	adds	r3, #48	@ 0x30
 8007688:	6819      	ldr	r1, [r3, #0]
 800768a:	78fb      	ldrb	r3, [r7, #3]
 800768c:	015a      	lsls	r2, r3, #5
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	4413      	add	r3, r2
 8007692:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800769c:	78fa      	ldrb	r2, [r7, #3]
 800769e:	1ac9      	subs	r1, r1, r3
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	4613      	mov	r3, r2
 80076a4:	011b      	lsls	r3, r3, #4
 80076a6:	1a9b      	subs	r3, r3, r2
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	4403      	add	r3, r0
 80076ac:	3338      	adds	r3, #56	@ 0x38
 80076ae:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80076b0:	78fa      	ldrb	r2, [r7, #3]
 80076b2:	6879      	ldr	r1, [r7, #4]
 80076b4:	4613      	mov	r3, r2
 80076b6:	011b      	lsls	r3, r3, #4
 80076b8:	1a9b      	subs	r3, r3, r2
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	440b      	add	r3, r1
 80076be:	334d      	adds	r3, #77	@ 0x4d
 80076c0:	2201      	movs	r2, #1
 80076c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80076c4:	78fa      	ldrb	r2, [r7, #3]
 80076c6:	6879      	ldr	r1, [r7, #4]
 80076c8:	4613      	mov	r3, r2
 80076ca:	011b      	lsls	r3, r3, #4
 80076cc:	1a9b      	subs	r3, r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	440b      	add	r3, r1
 80076d2:	3344      	adds	r3, #68	@ 0x44
 80076d4:	2200      	movs	r2, #0
 80076d6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80076d8:	78fb      	ldrb	r3, [r7, #3]
 80076da:	015a      	lsls	r2, r3, #5
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	4413      	add	r3, r2
 80076e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076e4:	461a      	mov	r2, r3
 80076e6:	2301      	movs	r3, #1
 80076e8:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80076ea:	78fa      	ldrb	r2, [r7, #3]
 80076ec:	6879      	ldr	r1, [r7, #4]
 80076ee:	4613      	mov	r3, r2
 80076f0:	011b      	lsls	r3, r3, #4
 80076f2:	1a9b      	subs	r3, r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	440b      	add	r3, r1
 80076f8:	3326      	adds	r3, #38	@ 0x26
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00a      	beq.n	8007716 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007700:	78fa      	ldrb	r2, [r7, #3]
 8007702:	6879      	ldr	r1, [r7, #4]
 8007704:	4613      	mov	r3, r2
 8007706:	011b      	lsls	r3, r3, #4
 8007708:	1a9b      	subs	r3, r3, r2
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	440b      	add	r3, r1
 800770e:	3326      	adds	r3, #38	@ 0x26
 8007710:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007712:	2b02      	cmp	r3, #2
 8007714:	d110      	bne.n	8007738 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	78fa      	ldrb	r2, [r7, #3]
 800771c:	4611      	mov	r1, r2
 800771e:	4618      	mov	r0, r3
 8007720:	f008 fd8c 	bl	801023c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8007724:	78fb      	ldrb	r3, [r7, #3]
 8007726:	015a      	lsls	r2, r3, #5
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	4413      	add	r3, r2
 800772c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007730:	461a      	mov	r2, r3
 8007732:	2310      	movs	r3, #16
 8007734:	6093      	str	r3, [r2, #8]
 8007736:	e03d      	b.n	80077b4 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8007738:	78fa      	ldrb	r2, [r7, #3]
 800773a:	6879      	ldr	r1, [r7, #4]
 800773c:	4613      	mov	r3, r2
 800773e:	011b      	lsls	r3, r3, #4
 8007740:	1a9b      	subs	r3, r3, r2
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	440b      	add	r3, r1
 8007746:	3326      	adds	r3, #38	@ 0x26
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	2b03      	cmp	r3, #3
 800774c:	d00a      	beq.n	8007764 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800774e:	78fa      	ldrb	r2, [r7, #3]
 8007750:	6879      	ldr	r1, [r7, #4]
 8007752:	4613      	mov	r3, r2
 8007754:	011b      	lsls	r3, r3, #4
 8007756:	1a9b      	subs	r3, r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	440b      	add	r3, r1
 800775c:	3326      	adds	r3, #38	@ 0x26
 800775e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8007760:	2b01      	cmp	r3, #1
 8007762:	d127      	bne.n	80077b4 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007764:	78fb      	ldrb	r3, [r7, #3]
 8007766:	015a      	lsls	r2, r3, #5
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	4413      	add	r3, r2
 800776c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	78fa      	ldrb	r2, [r7, #3]
 8007774:	0151      	lsls	r1, r2, #5
 8007776:	693a      	ldr	r2, [r7, #16]
 8007778:	440a      	add	r2, r1
 800777a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800777e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007782:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8007784:	78fa      	ldrb	r2, [r7, #3]
 8007786:	6879      	ldr	r1, [r7, #4]
 8007788:	4613      	mov	r3, r2
 800778a:	011b      	lsls	r3, r3, #4
 800778c:	1a9b      	subs	r3, r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	440b      	add	r3, r1
 8007792:	334c      	adds	r3, #76	@ 0x4c
 8007794:	2201      	movs	r2, #1
 8007796:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8007798:	78fa      	ldrb	r2, [r7, #3]
 800779a:	6879      	ldr	r1, [r7, #4]
 800779c:	4613      	mov	r3, r2
 800779e:	011b      	lsls	r3, r3, #4
 80077a0:	1a9b      	subs	r3, r3, r2
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	440b      	add	r3, r1
 80077a6:	334c      	adds	r3, #76	@ 0x4c
 80077a8:	781a      	ldrb	r2, [r3, #0]
 80077aa:	78fb      	ldrb	r3, [r7, #3]
 80077ac:	4619      	mov	r1, r3
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f00d fd8a 	bl	80152c8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	799b      	ldrb	r3, [r3, #6]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d13b      	bne.n	8007834 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80077bc:	78fa      	ldrb	r2, [r7, #3]
 80077be:	6879      	ldr	r1, [r7, #4]
 80077c0:	4613      	mov	r3, r2
 80077c2:	011b      	lsls	r3, r3, #4
 80077c4:	1a9b      	subs	r3, r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	440b      	add	r3, r1
 80077ca:	3338      	adds	r3, #56	@ 0x38
 80077cc:	6819      	ldr	r1, [r3, #0]
 80077ce:	78fa      	ldrb	r2, [r7, #3]
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	4613      	mov	r3, r2
 80077d4:	011b      	lsls	r3, r3, #4
 80077d6:	1a9b      	subs	r3, r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	4403      	add	r3, r0
 80077dc:	3328      	adds	r3, #40	@ 0x28
 80077de:	881b      	ldrh	r3, [r3, #0]
 80077e0:	440b      	add	r3, r1
 80077e2:	1e59      	subs	r1, r3, #1
 80077e4:	78fa      	ldrb	r2, [r7, #3]
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	4613      	mov	r3, r2
 80077ea:	011b      	lsls	r3, r3, #4
 80077ec:	1a9b      	subs	r3, r3, r2
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	4403      	add	r3, r0
 80077f2:	3328      	adds	r3, #40	@ 0x28
 80077f4:	881b      	ldrh	r3, [r3, #0]
 80077f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80077fa:	f003 0301 	and.w	r3, r3, #1
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f000 8470 	beq.w	80080e4 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8007804:	78fa      	ldrb	r2, [r7, #3]
 8007806:	6879      	ldr	r1, [r7, #4]
 8007808:	4613      	mov	r3, r2
 800780a:	011b      	lsls	r3, r3, #4
 800780c:	1a9b      	subs	r3, r3, r2
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	440b      	add	r3, r1
 8007812:	333c      	adds	r3, #60	@ 0x3c
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	78fa      	ldrb	r2, [r7, #3]
 8007818:	f083 0301 	eor.w	r3, r3, #1
 800781c:	b2d8      	uxtb	r0, r3
 800781e:	6879      	ldr	r1, [r7, #4]
 8007820:	4613      	mov	r3, r2
 8007822:	011b      	lsls	r3, r3, #4
 8007824:	1a9b      	subs	r3, r3, r2
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	440b      	add	r3, r1
 800782a:	333c      	adds	r3, #60	@ 0x3c
 800782c:	4602      	mov	r2, r0
 800782e:	701a      	strb	r2, [r3, #0]
 8007830:	f000 bc58 	b.w	80080e4 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8007834:	78fa      	ldrb	r2, [r7, #3]
 8007836:	6879      	ldr	r1, [r7, #4]
 8007838:	4613      	mov	r3, r2
 800783a:	011b      	lsls	r3, r3, #4
 800783c:	1a9b      	subs	r3, r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	440b      	add	r3, r1
 8007842:	333c      	adds	r3, #60	@ 0x3c
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	78fa      	ldrb	r2, [r7, #3]
 8007848:	f083 0301 	eor.w	r3, r3, #1
 800784c:	b2d8      	uxtb	r0, r3
 800784e:	6879      	ldr	r1, [r7, #4]
 8007850:	4613      	mov	r3, r2
 8007852:	011b      	lsls	r3, r3, #4
 8007854:	1a9b      	subs	r3, r3, r2
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	440b      	add	r3, r1
 800785a:	333c      	adds	r3, #60	@ 0x3c
 800785c:	4602      	mov	r2, r0
 800785e:	701a      	strb	r2, [r3, #0]
 8007860:	f000 bc40 	b.w	80080e4 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	78fa      	ldrb	r2, [r7, #3]
 800786a:	4611      	mov	r1, r2
 800786c:	4618      	mov	r0, r3
 800786e:	f008 fc68 	bl	8010142 <USB_ReadChInterrupts>
 8007872:	4603      	mov	r3, r0
 8007874:	f003 0320 	and.w	r3, r3, #32
 8007878:	2b20      	cmp	r3, #32
 800787a:	d131      	bne.n	80078e0 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800787c:	78fb      	ldrb	r3, [r7, #3]
 800787e:	015a      	lsls	r2, r3, #5
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	4413      	add	r3, r2
 8007884:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007888:	461a      	mov	r2, r3
 800788a:	2320      	movs	r3, #32
 800788c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800788e:	78fa      	ldrb	r2, [r7, #3]
 8007890:	6879      	ldr	r1, [r7, #4]
 8007892:	4613      	mov	r3, r2
 8007894:	011b      	lsls	r3, r3, #4
 8007896:	1a9b      	subs	r3, r3, r2
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	440b      	add	r3, r1
 800789c:	331a      	adds	r3, #26
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	f040 841f 	bne.w	80080e4 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80078a6:	78fa      	ldrb	r2, [r7, #3]
 80078a8:	6879      	ldr	r1, [r7, #4]
 80078aa:	4613      	mov	r3, r2
 80078ac:	011b      	lsls	r3, r3, #4
 80078ae:	1a9b      	subs	r3, r3, r2
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	440b      	add	r3, r1
 80078b4:	331b      	adds	r3, #27
 80078b6:	2201      	movs	r2, #1
 80078b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80078ba:	78fa      	ldrb	r2, [r7, #3]
 80078bc:	6879      	ldr	r1, [r7, #4]
 80078be:	4613      	mov	r3, r2
 80078c0:	011b      	lsls	r3, r3, #4
 80078c2:	1a9b      	subs	r3, r3, r2
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	440b      	add	r3, r1
 80078c8:	334d      	adds	r3, #77	@ 0x4d
 80078ca:	2203      	movs	r2, #3
 80078cc:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	78fa      	ldrb	r2, [r7, #3]
 80078d4:	4611      	mov	r1, r2
 80078d6:	4618      	mov	r0, r3
 80078d8:	f008 fcb0 	bl	801023c <USB_HC_Halt>
 80078dc:	f000 bc02 	b.w	80080e4 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	78fa      	ldrb	r2, [r7, #3]
 80078e6:	4611      	mov	r1, r2
 80078e8:	4618      	mov	r0, r3
 80078ea:	f008 fc2a 	bl	8010142 <USB_ReadChInterrupts>
 80078ee:	4603      	mov	r3, r0
 80078f0:	f003 0302 	and.w	r3, r3, #2
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	f040 8305 	bne.w	8007f04 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80078fa:	78fb      	ldrb	r3, [r7, #3]
 80078fc:	015a      	lsls	r2, r3, #5
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	4413      	add	r3, r2
 8007902:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007906:	461a      	mov	r2, r3
 8007908:	2302      	movs	r3, #2
 800790a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800790c:	78fa      	ldrb	r2, [r7, #3]
 800790e:	6879      	ldr	r1, [r7, #4]
 8007910:	4613      	mov	r3, r2
 8007912:	011b      	lsls	r3, r3, #4
 8007914:	1a9b      	subs	r3, r3, r2
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	440b      	add	r3, r1
 800791a:	334d      	adds	r3, #77	@ 0x4d
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d114      	bne.n	800794c <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007922:	78fa      	ldrb	r2, [r7, #3]
 8007924:	6879      	ldr	r1, [r7, #4]
 8007926:	4613      	mov	r3, r2
 8007928:	011b      	lsls	r3, r3, #4
 800792a:	1a9b      	subs	r3, r3, r2
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	440b      	add	r3, r1
 8007930:	334d      	adds	r3, #77	@ 0x4d
 8007932:	2202      	movs	r2, #2
 8007934:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8007936:	78fa      	ldrb	r2, [r7, #3]
 8007938:	6879      	ldr	r1, [r7, #4]
 800793a:	4613      	mov	r3, r2
 800793c:	011b      	lsls	r3, r3, #4
 800793e:	1a9b      	subs	r3, r3, r2
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	440b      	add	r3, r1
 8007944:	334c      	adds	r3, #76	@ 0x4c
 8007946:	2201      	movs	r2, #1
 8007948:	701a      	strb	r2, [r3, #0]
 800794a:	e2cc      	b.n	8007ee6 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800794c:	78fa      	ldrb	r2, [r7, #3]
 800794e:	6879      	ldr	r1, [r7, #4]
 8007950:	4613      	mov	r3, r2
 8007952:	011b      	lsls	r3, r3, #4
 8007954:	1a9b      	subs	r3, r3, r2
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	440b      	add	r3, r1
 800795a:	334d      	adds	r3, #77	@ 0x4d
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	2b06      	cmp	r3, #6
 8007960:	d114      	bne.n	800798c <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007962:	78fa      	ldrb	r2, [r7, #3]
 8007964:	6879      	ldr	r1, [r7, #4]
 8007966:	4613      	mov	r3, r2
 8007968:	011b      	lsls	r3, r3, #4
 800796a:	1a9b      	subs	r3, r3, r2
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	440b      	add	r3, r1
 8007970:	334d      	adds	r3, #77	@ 0x4d
 8007972:	2202      	movs	r2, #2
 8007974:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8007976:	78fa      	ldrb	r2, [r7, #3]
 8007978:	6879      	ldr	r1, [r7, #4]
 800797a:	4613      	mov	r3, r2
 800797c:	011b      	lsls	r3, r3, #4
 800797e:	1a9b      	subs	r3, r3, r2
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	440b      	add	r3, r1
 8007984:	334c      	adds	r3, #76	@ 0x4c
 8007986:	2205      	movs	r2, #5
 8007988:	701a      	strb	r2, [r3, #0]
 800798a:	e2ac      	b.n	8007ee6 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800798c:	78fa      	ldrb	r2, [r7, #3]
 800798e:	6879      	ldr	r1, [r7, #4]
 8007990:	4613      	mov	r3, r2
 8007992:	011b      	lsls	r3, r3, #4
 8007994:	1a9b      	subs	r3, r3, r2
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	440b      	add	r3, r1
 800799a:	334d      	adds	r3, #77	@ 0x4d
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	2b07      	cmp	r3, #7
 80079a0:	d00b      	beq.n	80079ba <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80079a2:	78fa      	ldrb	r2, [r7, #3]
 80079a4:	6879      	ldr	r1, [r7, #4]
 80079a6:	4613      	mov	r3, r2
 80079a8:	011b      	lsls	r3, r3, #4
 80079aa:	1a9b      	subs	r3, r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	440b      	add	r3, r1
 80079b0:	334d      	adds	r3, #77	@ 0x4d
 80079b2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80079b4:	2b09      	cmp	r3, #9
 80079b6:	f040 80a6 	bne.w	8007b06 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80079ba:	78fa      	ldrb	r2, [r7, #3]
 80079bc:	6879      	ldr	r1, [r7, #4]
 80079be:	4613      	mov	r3, r2
 80079c0:	011b      	lsls	r3, r3, #4
 80079c2:	1a9b      	subs	r3, r3, r2
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	440b      	add	r3, r1
 80079c8:	334d      	adds	r3, #77	@ 0x4d
 80079ca:	2202      	movs	r2, #2
 80079cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80079ce:	78fa      	ldrb	r2, [r7, #3]
 80079d0:	6879      	ldr	r1, [r7, #4]
 80079d2:	4613      	mov	r3, r2
 80079d4:	011b      	lsls	r3, r3, #4
 80079d6:	1a9b      	subs	r3, r3, r2
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	440b      	add	r3, r1
 80079dc:	3344      	adds	r3, #68	@ 0x44
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	1c59      	adds	r1, r3, #1
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	4613      	mov	r3, r2
 80079e6:	011b      	lsls	r3, r3, #4
 80079e8:	1a9b      	subs	r3, r3, r2
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	4403      	add	r3, r0
 80079ee:	3344      	adds	r3, #68	@ 0x44
 80079f0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80079f2:	78fa      	ldrb	r2, [r7, #3]
 80079f4:	6879      	ldr	r1, [r7, #4]
 80079f6:	4613      	mov	r3, r2
 80079f8:	011b      	lsls	r3, r3, #4
 80079fa:	1a9b      	subs	r3, r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	440b      	add	r3, r1
 8007a00:	3344      	adds	r3, #68	@ 0x44
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d943      	bls.n	8007a90 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8007a08:	78fa      	ldrb	r2, [r7, #3]
 8007a0a:	6879      	ldr	r1, [r7, #4]
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	011b      	lsls	r3, r3, #4
 8007a10:	1a9b      	subs	r3, r3, r2
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	440b      	add	r3, r1
 8007a16:	3344      	adds	r3, #68	@ 0x44
 8007a18:	2200      	movs	r2, #0
 8007a1a:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8007a1c:	78fa      	ldrb	r2, [r7, #3]
 8007a1e:	6879      	ldr	r1, [r7, #4]
 8007a20:	4613      	mov	r3, r2
 8007a22:	011b      	lsls	r3, r3, #4
 8007a24:	1a9b      	subs	r3, r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	440b      	add	r3, r1
 8007a2a:	331a      	adds	r3, #26
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d123      	bne.n	8007a7a <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8007a32:	78fa      	ldrb	r2, [r7, #3]
 8007a34:	6879      	ldr	r1, [r7, #4]
 8007a36:	4613      	mov	r3, r2
 8007a38:	011b      	lsls	r3, r3, #4
 8007a3a:	1a9b      	subs	r3, r3, r2
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	440b      	add	r3, r1
 8007a40:	331b      	adds	r3, #27
 8007a42:	2200      	movs	r2, #0
 8007a44:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8007a46:	78fa      	ldrb	r2, [r7, #3]
 8007a48:	6879      	ldr	r1, [r7, #4]
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	011b      	lsls	r3, r3, #4
 8007a4e:	1a9b      	subs	r3, r3, r2
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	440b      	add	r3, r1
 8007a54:	331c      	adds	r3, #28
 8007a56:	2200      	movs	r2, #0
 8007a58:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007a5a:	78fb      	ldrb	r3, [r7, #3]
 8007a5c:	015a      	lsls	r2, r3, #5
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	4413      	add	r3, r2
 8007a62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	78fa      	ldrb	r2, [r7, #3]
 8007a6a:	0151      	lsls	r1, r2, #5
 8007a6c:	693a      	ldr	r2, [r7, #16]
 8007a6e:	440a      	add	r2, r1
 8007a70:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a78:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8007a7a:	78fa      	ldrb	r2, [r7, #3]
 8007a7c:	6879      	ldr	r1, [r7, #4]
 8007a7e:	4613      	mov	r3, r2
 8007a80:	011b      	lsls	r3, r3, #4
 8007a82:	1a9b      	subs	r3, r3, r2
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	440b      	add	r3, r1
 8007a88:	334c      	adds	r3, #76	@ 0x4c
 8007a8a:	2204      	movs	r2, #4
 8007a8c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007a8e:	e229      	b.n	8007ee4 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007a90:	78fa      	ldrb	r2, [r7, #3]
 8007a92:	6879      	ldr	r1, [r7, #4]
 8007a94:	4613      	mov	r3, r2
 8007a96:	011b      	lsls	r3, r3, #4
 8007a98:	1a9b      	subs	r3, r3, r2
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	440b      	add	r3, r1
 8007a9e:	334c      	adds	r3, #76	@ 0x4c
 8007aa0:	2202      	movs	r2, #2
 8007aa2:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007aa4:	78fa      	ldrb	r2, [r7, #3]
 8007aa6:	6879      	ldr	r1, [r7, #4]
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	011b      	lsls	r3, r3, #4
 8007aac:	1a9b      	subs	r3, r3, r2
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	440b      	add	r3, r1
 8007ab2:	3326      	adds	r3, #38	@ 0x26
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00b      	beq.n	8007ad2 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007aba:	78fa      	ldrb	r2, [r7, #3]
 8007abc:	6879      	ldr	r1, [r7, #4]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	011b      	lsls	r3, r3, #4
 8007ac2:	1a9b      	subs	r3, r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	440b      	add	r3, r1
 8007ac8:	3326      	adds	r3, #38	@ 0x26
 8007aca:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	f040 8209 	bne.w	8007ee4 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8007ad2:	78fb      	ldrb	r3, [r7, #3]
 8007ad4:	015a      	lsls	r2, r3, #5
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	4413      	add	r3, r2
 8007ada:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007ae8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007af0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8007af2:	78fb      	ldrb	r3, [r7, #3]
 8007af4:	015a      	lsls	r2, r3, #5
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	4413      	add	r3, r2
 8007afa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007afe:	461a      	mov	r2, r3
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007b04:	e1ee      	b.n	8007ee4 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8007b06:	78fa      	ldrb	r2, [r7, #3]
 8007b08:	6879      	ldr	r1, [r7, #4]
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	011b      	lsls	r3, r3, #4
 8007b0e:	1a9b      	subs	r3, r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	440b      	add	r3, r1
 8007b14:	334d      	adds	r3, #77	@ 0x4d
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	2b05      	cmp	r3, #5
 8007b1a:	f040 80c8 	bne.w	8007cae <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007b1e:	78fa      	ldrb	r2, [r7, #3]
 8007b20:	6879      	ldr	r1, [r7, #4]
 8007b22:	4613      	mov	r3, r2
 8007b24:	011b      	lsls	r3, r3, #4
 8007b26:	1a9b      	subs	r3, r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	440b      	add	r3, r1
 8007b2c:	334d      	adds	r3, #77	@ 0x4d
 8007b2e:	2202      	movs	r2, #2
 8007b30:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8007b32:	78fa      	ldrb	r2, [r7, #3]
 8007b34:	6879      	ldr	r1, [r7, #4]
 8007b36:	4613      	mov	r3, r2
 8007b38:	011b      	lsls	r3, r3, #4
 8007b3a:	1a9b      	subs	r3, r3, r2
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	440b      	add	r3, r1
 8007b40:	331b      	adds	r3, #27
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	f040 81ce 	bne.w	8007ee6 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8007b4a:	78fa      	ldrb	r2, [r7, #3]
 8007b4c:	6879      	ldr	r1, [r7, #4]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	011b      	lsls	r3, r3, #4
 8007b52:	1a9b      	subs	r3, r3, r2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	440b      	add	r3, r1
 8007b58:	3326      	adds	r3, #38	@ 0x26
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	2b03      	cmp	r3, #3
 8007b5e:	d16b      	bne.n	8007c38 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8007b60:	78fa      	ldrb	r2, [r7, #3]
 8007b62:	6879      	ldr	r1, [r7, #4]
 8007b64:	4613      	mov	r3, r2
 8007b66:	011b      	lsls	r3, r3, #4
 8007b68:	1a9b      	subs	r3, r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	440b      	add	r3, r1
 8007b6e:	3348      	adds	r3, #72	@ 0x48
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	1c59      	adds	r1, r3, #1
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	4613      	mov	r3, r2
 8007b78:	011b      	lsls	r3, r3, #4
 8007b7a:	1a9b      	subs	r3, r3, r2
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	4403      	add	r3, r0
 8007b80:	3348      	adds	r3, #72	@ 0x48
 8007b82:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8007b84:	78fa      	ldrb	r2, [r7, #3]
 8007b86:	6879      	ldr	r1, [r7, #4]
 8007b88:	4613      	mov	r3, r2
 8007b8a:	011b      	lsls	r3, r3, #4
 8007b8c:	1a9b      	subs	r3, r3, r2
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	440b      	add	r3, r1
 8007b92:	3348      	adds	r3, #72	@ 0x48
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	d943      	bls.n	8007c22 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8007b9a:	78fa      	ldrb	r2, [r7, #3]
 8007b9c:	6879      	ldr	r1, [r7, #4]
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	011b      	lsls	r3, r3, #4
 8007ba2:	1a9b      	subs	r3, r3, r2
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	440b      	add	r3, r1
 8007ba8:	3348      	adds	r3, #72	@ 0x48
 8007baa:	2200      	movs	r2, #0
 8007bac:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8007bae:	78fa      	ldrb	r2, [r7, #3]
 8007bb0:	6879      	ldr	r1, [r7, #4]
 8007bb2:	4613      	mov	r3, r2
 8007bb4:	011b      	lsls	r3, r3, #4
 8007bb6:	1a9b      	subs	r3, r3, r2
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	440b      	add	r3, r1
 8007bbc:	331b      	adds	r3, #27
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8007bc2:	78fa      	ldrb	r2, [r7, #3]
 8007bc4:	6879      	ldr	r1, [r7, #4]
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	011b      	lsls	r3, r3, #4
 8007bca:	1a9b      	subs	r3, r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	440b      	add	r3, r1
 8007bd0:	3344      	adds	r3, #68	@ 0x44
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d809      	bhi.n	8007bec <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8007bd8:	78fa      	ldrb	r2, [r7, #3]
 8007bda:	6879      	ldr	r1, [r7, #4]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	011b      	lsls	r3, r3, #4
 8007be0:	1a9b      	subs	r3, r3, r2
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	440b      	add	r3, r1
 8007be6:	331c      	adds	r3, #28
 8007be8:	2201      	movs	r2, #1
 8007bea:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007bec:	78fb      	ldrb	r3, [r7, #3]
 8007bee:	015a      	lsls	r2, r3, #5
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	78fa      	ldrb	r2, [r7, #3]
 8007bfc:	0151      	lsls	r1, r2, #5
 8007bfe:	693a      	ldr	r2, [r7, #16]
 8007c00:	440a      	add	r2, r1
 8007c02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c0a:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8007c0c:	78fa      	ldrb	r2, [r7, #3]
 8007c0e:	6879      	ldr	r1, [r7, #4]
 8007c10:	4613      	mov	r3, r2
 8007c12:	011b      	lsls	r3, r3, #4
 8007c14:	1a9b      	subs	r3, r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	440b      	add	r3, r1
 8007c1a:	334c      	adds	r3, #76	@ 0x4c
 8007c1c:	2204      	movs	r2, #4
 8007c1e:	701a      	strb	r2, [r3, #0]
 8007c20:	e014      	b.n	8007c4c <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007c22:	78fa      	ldrb	r2, [r7, #3]
 8007c24:	6879      	ldr	r1, [r7, #4]
 8007c26:	4613      	mov	r3, r2
 8007c28:	011b      	lsls	r3, r3, #4
 8007c2a:	1a9b      	subs	r3, r3, r2
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	440b      	add	r3, r1
 8007c30:	334c      	adds	r3, #76	@ 0x4c
 8007c32:	2202      	movs	r2, #2
 8007c34:	701a      	strb	r2, [r3, #0]
 8007c36:	e009      	b.n	8007c4c <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007c38:	78fa      	ldrb	r2, [r7, #3]
 8007c3a:	6879      	ldr	r1, [r7, #4]
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	011b      	lsls	r3, r3, #4
 8007c40:	1a9b      	subs	r3, r3, r2
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	440b      	add	r3, r1
 8007c46:	334c      	adds	r3, #76	@ 0x4c
 8007c48:	2202      	movs	r2, #2
 8007c4a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007c4c:	78fa      	ldrb	r2, [r7, #3]
 8007c4e:	6879      	ldr	r1, [r7, #4]
 8007c50:	4613      	mov	r3, r2
 8007c52:	011b      	lsls	r3, r3, #4
 8007c54:	1a9b      	subs	r3, r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	440b      	add	r3, r1
 8007c5a:	3326      	adds	r3, #38	@ 0x26
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00b      	beq.n	8007c7a <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007c62:	78fa      	ldrb	r2, [r7, #3]
 8007c64:	6879      	ldr	r1, [r7, #4]
 8007c66:	4613      	mov	r3, r2
 8007c68:	011b      	lsls	r3, r3, #4
 8007c6a:	1a9b      	subs	r3, r3, r2
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	440b      	add	r3, r1
 8007c70:	3326      	adds	r3, #38	@ 0x26
 8007c72:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	f040 8136 	bne.w	8007ee6 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8007c7a:	78fb      	ldrb	r3, [r7, #3]
 8007c7c:	015a      	lsls	r2, r3, #5
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	4413      	add	r3, r2
 8007c82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007c90:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007c98:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8007c9a:	78fb      	ldrb	r3, [r7, #3]
 8007c9c:	015a      	lsls	r2, r3, #5
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6013      	str	r3, [r2, #0]
 8007cac:	e11b      	b.n	8007ee6 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8007cae:	78fa      	ldrb	r2, [r7, #3]
 8007cb0:	6879      	ldr	r1, [r7, #4]
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	011b      	lsls	r3, r3, #4
 8007cb6:	1a9b      	subs	r3, r3, r2
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	440b      	add	r3, r1
 8007cbc:	334d      	adds	r3, #77	@ 0x4d
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	2b03      	cmp	r3, #3
 8007cc2:	f040 8081 	bne.w	8007dc8 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007cc6:	78fa      	ldrb	r2, [r7, #3]
 8007cc8:	6879      	ldr	r1, [r7, #4]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	011b      	lsls	r3, r3, #4
 8007cce:	1a9b      	subs	r3, r3, r2
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	440b      	add	r3, r1
 8007cd4:	334d      	adds	r3, #77	@ 0x4d
 8007cd6:	2202      	movs	r2, #2
 8007cd8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8007cda:	78fa      	ldrb	r2, [r7, #3]
 8007cdc:	6879      	ldr	r1, [r7, #4]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	011b      	lsls	r3, r3, #4
 8007ce2:	1a9b      	subs	r3, r3, r2
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	440b      	add	r3, r1
 8007ce8:	331b      	adds	r3, #27
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	f040 80fa 	bne.w	8007ee6 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007cf2:	78fa      	ldrb	r2, [r7, #3]
 8007cf4:	6879      	ldr	r1, [r7, #4]
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	011b      	lsls	r3, r3, #4
 8007cfa:	1a9b      	subs	r3, r3, r2
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	440b      	add	r3, r1
 8007d00:	334c      	adds	r3, #76	@ 0x4c
 8007d02:	2202      	movs	r2, #2
 8007d04:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007d06:	78fb      	ldrb	r3, [r7, #3]
 8007d08:	015a      	lsls	r2, r3, #5
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	78fa      	ldrb	r2, [r7, #3]
 8007d16:	0151      	lsls	r1, r2, #5
 8007d18:	693a      	ldr	r2, [r7, #16]
 8007d1a:	440a      	add	r2, r1
 8007d1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d24:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007d26:	78fb      	ldrb	r3, [r7, #3]
 8007d28:	015a      	lsls	r2, r3, #5
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	78fa      	ldrb	r2, [r7, #3]
 8007d36:	0151      	lsls	r1, r2, #5
 8007d38:	693a      	ldr	r2, [r7, #16]
 8007d3a:	440a      	add	r2, r1
 8007d3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d44:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8007d46:	78fb      	ldrb	r3, [r7, #3]
 8007d48:	015a      	lsls	r2, r3, #5
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	78fa      	ldrb	r2, [r7, #3]
 8007d56:	0151      	lsls	r1, r2, #5
 8007d58:	693a      	ldr	r2, [r7, #16]
 8007d5a:	440a      	add	r2, r1
 8007d5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d60:	f023 0320 	bic.w	r3, r3, #32
 8007d64:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007d66:	78fa      	ldrb	r2, [r7, #3]
 8007d68:	6879      	ldr	r1, [r7, #4]
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	011b      	lsls	r3, r3, #4
 8007d6e:	1a9b      	subs	r3, r3, r2
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	440b      	add	r3, r1
 8007d74:	3326      	adds	r3, #38	@ 0x26
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00b      	beq.n	8007d94 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007d7c:	78fa      	ldrb	r2, [r7, #3]
 8007d7e:	6879      	ldr	r1, [r7, #4]
 8007d80:	4613      	mov	r3, r2
 8007d82:	011b      	lsls	r3, r3, #4
 8007d84:	1a9b      	subs	r3, r3, r2
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	440b      	add	r3, r1
 8007d8a:	3326      	adds	r3, #38	@ 0x26
 8007d8c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	f040 80a9 	bne.w	8007ee6 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8007d94:	78fb      	ldrb	r3, [r7, #3]
 8007d96:	015a      	lsls	r2, r3, #5
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007daa:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007db2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8007db4:	78fb      	ldrb	r3, [r7, #3]
 8007db6:	015a      	lsls	r2, r3, #5
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	4413      	add	r3, r2
 8007dbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6013      	str	r3, [r2, #0]
 8007dc6:	e08e      	b.n	8007ee6 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8007dc8:	78fa      	ldrb	r2, [r7, #3]
 8007dca:	6879      	ldr	r1, [r7, #4]
 8007dcc:	4613      	mov	r3, r2
 8007dce:	011b      	lsls	r3, r3, #4
 8007dd0:	1a9b      	subs	r3, r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	440b      	add	r3, r1
 8007dd6:	334d      	adds	r3, #77	@ 0x4d
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	2b04      	cmp	r3, #4
 8007ddc:	d143      	bne.n	8007e66 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007dde:	78fa      	ldrb	r2, [r7, #3]
 8007de0:	6879      	ldr	r1, [r7, #4]
 8007de2:	4613      	mov	r3, r2
 8007de4:	011b      	lsls	r3, r3, #4
 8007de6:	1a9b      	subs	r3, r3, r2
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	440b      	add	r3, r1
 8007dec:	334d      	adds	r3, #77	@ 0x4d
 8007dee:	2202      	movs	r2, #2
 8007df0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007df2:	78fa      	ldrb	r2, [r7, #3]
 8007df4:	6879      	ldr	r1, [r7, #4]
 8007df6:	4613      	mov	r3, r2
 8007df8:	011b      	lsls	r3, r3, #4
 8007dfa:	1a9b      	subs	r3, r3, r2
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	440b      	add	r3, r1
 8007e00:	334c      	adds	r3, #76	@ 0x4c
 8007e02:	2202      	movs	r2, #2
 8007e04:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007e06:	78fa      	ldrb	r2, [r7, #3]
 8007e08:	6879      	ldr	r1, [r7, #4]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	011b      	lsls	r3, r3, #4
 8007e0e:	1a9b      	subs	r3, r3, r2
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	440b      	add	r3, r1
 8007e14:	3326      	adds	r3, #38	@ 0x26
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00a      	beq.n	8007e32 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007e1c:	78fa      	ldrb	r2, [r7, #3]
 8007e1e:	6879      	ldr	r1, [r7, #4]
 8007e20:	4613      	mov	r3, r2
 8007e22:	011b      	lsls	r3, r3, #4
 8007e24:	1a9b      	subs	r3, r3, r2
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	440b      	add	r3, r1
 8007e2a:	3326      	adds	r3, #38	@ 0x26
 8007e2c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	d159      	bne.n	8007ee6 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8007e32:	78fb      	ldrb	r3, [r7, #3]
 8007e34:	015a      	lsls	r2, r3, #5
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	4413      	add	r3, r2
 8007e3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007e48:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007e50:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8007e52:	78fb      	ldrb	r3, [r7, #3]
 8007e54:	015a      	lsls	r2, r3, #5
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	4413      	add	r3, r2
 8007e5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e5e:	461a      	mov	r2, r3
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6013      	str	r3, [r2, #0]
 8007e64:	e03f      	b.n	8007ee6 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8007e66:	78fa      	ldrb	r2, [r7, #3]
 8007e68:	6879      	ldr	r1, [r7, #4]
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	011b      	lsls	r3, r3, #4
 8007e6e:	1a9b      	subs	r3, r3, r2
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	440b      	add	r3, r1
 8007e74:	334d      	adds	r3, #77	@ 0x4d
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	2b08      	cmp	r3, #8
 8007e7a:	d126      	bne.n	8007eca <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007e7c:	78fa      	ldrb	r2, [r7, #3]
 8007e7e:	6879      	ldr	r1, [r7, #4]
 8007e80:	4613      	mov	r3, r2
 8007e82:	011b      	lsls	r3, r3, #4
 8007e84:	1a9b      	subs	r3, r3, r2
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	440b      	add	r3, r1
 8007e8a:	334d      	adds	r3, #77	@ 0x4d
 8007e8c:	2202      	movs	r2, #2
 8007e8e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8007e90:	78fa      	ldrb	r2, [r7, #3]
 8007e92:	6879      	ldr	r1, [r7, #4]
 8007e94:	4613      	mov	r3, r2
 8007e96:	011b      	lsls	r3, r3, #4
 8007e98:	1a9b      	subs	r3, r3, r2
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	440b      	add	r3, r1
 8007e9e:	3344      	adds	r3, #68	@ 0x44
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	1c59      	adds	r1, r3, #1
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	011b      	lsls	r3, r3, #4
 8007eaa:	1a9b      	subs	r3, r3, r2
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	4403      	add	r3, r0
 8007eb0:	3344      	adds	r3, #68	@ 0x44
 8007eb2:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8007eb4:	78fa      	ldrb	r2, [r7, #3]
 8007eb6:	6879      	ldr	r1, [r7, #4]
 8007eb8:	4613      	mov	r3, r2
 8007eba:	011b      	lsls	r3, r3, #4
 8007ebc:	1a9b      	subs	r3, r3, r2
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	440b      	add	r3, r1
 8007ec2:	334c      	adds	r3, #76	@ 0x4c
 8007ec4:	2204      	movs	r2, #4
 8007ec6:	701a      	strb	r2, [r3, #0]
 8007ec8:	e00d      	b.n	8007ee6 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8007eca:	78fa      	ldrb	r2, [r7, #3]
 8007ecc:	6879      	ldr	r1, [r7, #4]
 8007ece:	4613      	mov	r3, r2
 8007ed0:	011b      	lsls	r3, r3, #4
 8007ed2:	1a9b      	subs	r3, r3, r2
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	440b      	add	r3, r1
 8007ed8:	334d      	adds	r3, #77	@ 0x4d
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	f000 8100 	beq.w	80080e2 <HCD_HC_IN_IRQHandler+0xcca>
 8007ee2:	e000      	b.n	8007ee6 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007ee4:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8007ee6:	78fa      	ldrb	r2, [r7, #3]
 8007ee8:	6879      	ldr	r1, [r7, #4]
 8007eea:	4613      	mov	r3, r2
 8007eec:	011b      	lsls	r3, r3, #4
 8007eee:	1a9b      	subs	r3, r3, r2
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	440b      	add	r3, r1
 8007ef4:	334c      	adds	r3, #76	@ 0x4c
 8007ef6:	781a      	ldrb	r2, [r3, #0]
 8007ef8:	78fb      	ldrb	r3, [r7, #3]
 8007efa:	4619      	mov	r1, r3
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f00d f9e3 	bl	80152c8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007f02:	e0ef      	b.n	80080e4 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	78fa      	ldrb	r2, [r7, #3]
 8007f0a:	4611      	mov	r1, r2
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f008 f918 	bl	8010142 <USB_ReadChInterrupts>
 8007f12:	4603      	mov	r3, r0
 8007f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f18:	2b40      	cmp	r3, #64	@ 0x40
 8007f1a:	d12f      	bne.n	8007f7c <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8007f1c:	78fb      	ldrb	r3, [r7, #3]
 8007f1e:	015a      	lsls	r2, r3, #5
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	4413      	add	r3, r2
 8007f24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f28:	461a      	mov	r2, r3
 8007f2a:	2340      	movs	r3, #64	@ 0x40
 8007f2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8007f2e:	78fa      	ldrb	r2, [r7, #3]
 8007f30:	6879      	ldr	r1, [r7, #4]
 8007f32:	4613      	mov	r3, r2
 8007f34:	011b      	lsls	r3, r3, #4
 8007f36:	1a9b      	subs	r3, r3, r2
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	440b      	add	r3, r1
 8007f3c:	334d      	adds	r3, #77	@ 0x4d
 8007f3e:	2205      	movs	r2, #5
 8007f40:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8007f42:	78fa      	ldrb	r2, [r7, #3]
 8007f44:	6879      	ldr	r1, [r7, #4]
 8007f46:	4613      	mov	r3, r2
 8007f48:	011b      	lsls	r3, r3, #4
 8007f4a:	1a9b      	subs	r3, r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	440b      	add	r3, r1
 8007f50:	331a      	adds	r3, #26
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d109      	bne.n	8007f6c <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8007f58:	78fa      	ldrb	r2, [r7, #3]
 8007f5a:	6879      	ldr	r1, [r7, #4]
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	011b      	lsls	r3, r3, #4
 8007f60:	1a9b      	subs	r3, r3, r2
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	440b      	add	r3, r1
 8007f66:	3344      	adds	r3, #68	@ 0x44
 8007f68:	2200      	movs	r2, #0
 8007f6a:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	78fa      	ldrb	r2, [r7, #3]
 8007f72:	4611      	mov	r1, r2
 8007f74:	4618      	mov	r0, r3
 8007f76:	f008 f961 	bl	801023c <USB_HC_Halt>
 8007f7a:	e0b3      	b.n	80080e4 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	78fa      	ldrb	r2, [r7, #3]
 8007f82:	4611      	mov	r1, r2
 8007f84:	4618      	mov	r0, r3
 8007f86:	f008 f8dc 	bl	8010142 <USB_ReadChInterrupts>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	f003 0310 	and.w	r3, r3, #16
 8007f90:	2b10      	cmp	r3, #16
 8007f92:	f040 80a7 	bne.w	80080e4 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8007f96:	78fa      	ldrb	r2, [r7, #3]
 8007f98:	6879      	ldr	r1, [r7, #4]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	011b      	lsls	r3, r3, #4
 8007f9e:	1a9b      	subs	r3, r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	440b      	add	r3, r1
 8007fa4:	3326      	adds	r3, #38	@ 0x26
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	2b03      	cmp	r3, #3
 8007faa:	d11b      	bne.n	8007fe4 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8007fac:	78fa      	ldrb	r2, [r7, #3]
 8007fae:	6879      	ldr	r1, [r7, #4]
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	011b      	lsls	r3, r3, #4
 8007fb4:	1a9b      	subs	r3, r3, r2
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	440b      	add	r3, r1
 8007fba:	3344      	adds	r3, #68	@ 0x44
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8007fc0:	78fa      	ldrb	r2, [r7, #3]
 8007fc2:	6879      	ldr	r1, [r7, #4]
 8007fc4:	4613      	mov	r3, r2
 8007fc6:	011b      	lsls	r3, r3, #4
 8007fc8:	1a9b      	subs	r3, r3, r2
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	440b      	add	r3, r1
 8007fce:	334d      	adds	r3, #77	@ 0x4d
 8007fd0:	2204      	movs	r2, #4
 8007fd2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	78fa      	ldrb	r2, [r7, #3]
 8007fda:	4611      	mov	r1, r2
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f008 f92d 	bl	801023c <USB_HC_Halt>
 8007fe2:	e03f      	b.n	8008064 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007fe4:	78fa      	ldrb	r2, [r7, #3]
 8007fe6:	6879      	ldr	r1, [r7, #4]
 8007fe8:	4613      	mov	r3, r2
 8007fea:	011b      	lsls	r3, r3, #4
 8007fec:	1a9b      	subs	r3, r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	440b      	add	r3, r1
 8007ff2:	3326      	adds	r3, #38	@ 0x26
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00a      	beq.n	8008010 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007ffa:	78fa      	ldrb	r2, [r7, #3]
 8007ffc:	6879      	ldr	r1, [r7, #4]
 8007ffe:	4613      	mov	r3, r2
 8008000:	011b      	lsls	r3, r3, #4
 8008002:	1a9b      	subs	r3, r3, r2
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	440b      	add	r3, r1
 8008008:	3326      	adds	r3, #38	@ 0x26
 800800a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800800c:	2b02      	cmp	r3, #2
 800800e:	d129      	bne.n	8008064 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8008010:	78fa      	ldrb	r2, [r7, #3]
 8008012:	6879      	ldr	r1, [r7, #4]
 8008014:	4613      	mov	r3, r2
 8008016:	011b      	lsls	r3, r3, #4
 8008018:	1a9b      	subs	r3, r3, r2
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	440b      	add	r3, r1
 800801e:	3344      	adds	r3, #68	@ 0x44
 8008020:	2200      	movs	r2, #0
 8008022:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	799b      	ldrb	r3, [r3, #6]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00a      	beq.n	8008042 <HCD_HC_IN_IRQHandler+0xc2a>
 800802c:	78fa      	ldrb	r2, [r7, #3]
 800802e:	6879      	ldr	r1, [r7, #4]
 8008030:	4613      	mov	r3, r2
 8008032:	011b      	lsls	r3, r3, #4
 8008034:	1a9b      	subs	r3, r3, r2
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	440b      	add	r3, r1
 800803a:	331b      	adds	r3, #27
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	2b01      	cmp	r3, #1
 8008040:	d110      	bne.n	8008064 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8008042:	78fa      	ldrb	r2, [r7, #3]
 8008044:	6879      	ldr	r1, [r7, #4]
 8008046:	4613      	mov	r3, r2
 8008048:	011b      	lsls	r3, r3, #4
 800804a:	1a9b      	subs	r3, r3, r2
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	440b      	add	r3, r1
 8008050:	334d      	adds	r3, #77	@ 0x4d
 8008052:	2204      	movs	r2, #4
 8008054:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	78fa      	ldrb	r2, [r7, #3]
 800805c:	4611      	mov	r1, r2
 800805e:	4618      	mov	r0, r3
 8008060:	f008 f8ec 	bl	801023c <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8008064:	78fa      	ldrb	r2, [r7, #3]
 8008066:	6879      	ldr	r1, [r7, #4]
 8008068:	4613      	mov	r3, r2
 800806a:	011b      	lsls	r3, r3, #4
 800806c:	1a9b      	subs	r3, r3, r2
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	440b      	add	r3, r1
 8008072:	331b      	adds	r3, #27
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d129      	bne.n	80080ce <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800807a:	78fa      	ldrb	r2, [r7, #3]
 800807c:	6879      	ldr	r1, [r7, #4]
 800807e:	4613      	mov	r3, r2
 8008080:	011b      	lsls	r3, r3, #4
 8008082:	1a9b      	subs	r3, r3, r2
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	440b      	add	r3, r1
 8008088:	331b      	adds	r3, #27
 800808a:	2200      	movs	r2, #0
 800808c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800808e:	78fb      	ldrb	r3, [r7, #3]
 8008090:	015a      	lsls	r2, r3, #5
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	4413      	add	r3, r2
 8008096:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	78fa      	ldrb	r2, [r7, #3]
 800809e:	0151      	lsls	r1, r2, #5
 80080a0:	693a      	ldr	r2, [r7, #16]
 80080a2:	440a      	add	r2, r1
 80080a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080ac:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80080ae:	78fb      	ldrb	r3, [r7, #3]
 80080b0:	015a      	lsls	r2, r3, #5
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	4413      	add	r3, r2
 80080b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	78fa      	ldrb	r2, [r7, #3]
 80080be:	0151      	lsls	r1, r2, #5
 80080c0:	693a      	ldr	r2, [r7, #16]
 80080c2:	440a      	add	r2, r1
 80080c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080c8:	f043 0320 	orr.w	r3, r3, #32
 80080cc:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80080ce:	78fb      	ldrb	r3, [r7, #3]
 80080d0:	015a      	lsls	r2, r3, #5
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	4413      	add	r3, r2
 80080d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080da:	461a      	mov	r2, r3
 80080dc:	2310      	movs	r3, #16
 80080de:	6093      	str	r3, [r2, #8]
 80080e0:	e000      	b.n	80080e4 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80080e2:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80080e4:	3718      	adds	r7, #24
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b086      	sub	sp, #24
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	460b      	mov	r3, r1
 80080f4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	78fa      	ldrb	r2, [r7, #3]
 8008106:	4611      	mov	r1, r2
 8008108:	4618      	mov	r0, r3
 800810a:	f008 f81a 	bl	8010142 <USB_ReadChInterrupts>
 800810e:	4603      	mov	r3, r0
 8008110:	f003 0304 	and.w	r3, r3, #4
 8008114:	2b04      	cmp	r3, #4
 8008116:	d11b      	bne.n	8008150 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8008118:	78fb      	ldrb	r3, [r7, #3]
 800811a:	015a      	lsls	r2, r3, #5
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	4413      	add	r3, r2
 8008120:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008124:	461a      	mov	r2, r3
 8008126:	2304      	movs	r3, #4
 8008128:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800812a:	78fa      	ldrb	r2, [r7, #3]
 800812c:	6879      	ldr	r1, [r7, #4]
 800812e:	4613      	mov	r3, r2
 8008130:	011b      	lsls	r3, r3, #4
 8008132:	1a9b      	subs	r3, r3, r2
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	440b      	add	r3, r1
 8008138:	334d      	adds	r3, #77	@ 0x4d
 800813a:	2207      	movs	r2, #7
 800813c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	78fa      	ldrb	r2, [r7, #3]
 8008144:	4611      	mov	r1, r2
 8008146:	4618      	mov	r0, r3
 8008148:	f008 f878 	bl	801023c <USB_HC_Halt>
 800814c:	f000 bc89 	b.w	8008a62 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	78fa      	ldrb	r2, [r7, #3]
 8008156:	4611      	mov	r1, r2
 8008158:	4618      	mov	r0, r3
 800815a:	f007 fff2 	bl	8010142 <USB_ReadChInterrupts>
 800815e:	4603      	mov	r3, r0
 8008160:	f003 0320 	and.w	r3, r3, #32
 8008164:	2b20      	cmp	r3, #32
 8008166:	f040 8082 	bne.w	800826e <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800816a:	78fb      	ldrb	r3, [r7, #3]
 800816c:	015a      	lsls	r2, r3, #5
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	4413      	add	r3, r2
 8008172:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008176:	461a      	mov	r2, r3
 8008178:	2320      	movs	r3, #32
 800817a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800817c:	78fa      	ldrb	r2, [r7, #3]
 800817e:	6879      	ldr	r1, [r7, #4]
 8008180:	4613      	mov	r3, r2
 8008182:	011b      	lsls	r3, r3, #4
 8008184:	1a9b      	subs	r3, r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	440b      	add	r3, r1
 800818a:	3319      	adds	r3, #25
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	2b01      	cmp	r3, #1
 8008190:	d124      	bne.n	80081dc <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8008192:	78fa      	ldrb	r2, [r7, #3]
 8008194:	6879      	ldr	r1, [r7, #4]
 8008196:	4613      	mov	r3, r2
 8008198:	011b      	lsls	r3, r3, #4
 800819a:	1a9b      	subs	r3, r3, r2
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	440b      	add	r3, r1
 80081a0:	3319      	adds	r3, #25
 80081a2:	2200      	movs	r2, #0
 80081a4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80081a6:	78fa      	ldrb	r2, [r7, #3]
 80081a8:	6879      	ldr	r1, [r7, #4]
 80081aa:	4613      	mov	r3, r2
 80081ac:	011b      	lsls	r3, r3, #4
 80081ae:	1a9b      	subs	r3, r3, r2
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	440b      	add	r3, r1
 80081b4:	334c      	adds	r3, #76	@ 0x4c
 80081b6:	2202      	movs	r2, #2
 80081b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80081ba:	78fa      	ldrb	r2, [r7, #3]
 80081bc:	6879      	ldr	r1, [r7, #4]
 80081be:	4613      	mov	r3, r2
 80081c0:	011b      	lsls	r3, r3, #4
 80081c2:	1a9b      	subs	r3, r3, r2
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	440b      	add	r3, r1
 80081c8:	334d      	adds	r3, #77	@ 0x4d
 80081ca:	2203      	movs	r2, #3
 80081cc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	78fa      	ldrb	r2, [r7, #3]
 80081d4:	4611      	mov	r1, r2
 80081d6:	4618      	mov	r0, r3
 80081d8:	f008 f830 	bl	801023c <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80081dc:	78fa      	ldrb	r2, [r7, #3]
 80081de:	6879      	ldr	r1, [r7, #4]
 80081e0:	4613      	mov	r3, r2
 80081e2:	011b      	lsls	r3, r3, #4
 80081e4:	1a9b      	subs	r3, r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	440b      	add	r3, r1
 80081ea:	331a      	adds	r3, #26
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	f040 8437 	bne.w	8008a62 <HCD_HC_OUT_IRQHandler+0x978>
 80081f4:	78fa      	ldrb	r2, [r7, #3]
 80081f6:	6879      	ldr	r1, [r7, #4]
 80081f8:	4613      	mov	r3, r2
 80081fa:	011b      	lsls	r3, r3, #4
 80081fc:	1a9b      	subs	r3, r3, r2
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	440b      	add	r3, r1
 8008202:	331b      	adds	r3, #27
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	f040 842b 	bne.w	8008a62 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800820c:	78fa      	ldrb	r2, [r7, #3]
 800820e:	6879      	ldr	r1, [r7, #4]
 8008210:	4613      	mov	r3, r2
 8008212:	011b      	lsls	r3, r3, #4
 8008214:	1a9b      	subs	r3, r3, r2
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	440b      	add	r3, r1
 800821a:	3326      	adds	r3, #38	@ 0x26
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	2b01      	cmp	r3, #1
 8008220:	d009      	beq.n	8008236 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8008222:	78fa      	ldrb	r2, [r7, #3]
 8008224:	6879      	ldr	r1, [r7, #4]
 8008226:	4613      	mov	r3, r2
 8008228:	011b      	lsls	r3, r3, #4
 800822a:	1a9b      	subs	r3, r3, r2
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	440b      	add	r3, r1
 8008230:	331b      	adds	r3, #27
 8008232:	2201      	movs	r2, #1
 8008234:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8008236:	78fa      	ldrb	r2, [r7, #3]
 8008238:	6879      	ldr	r1, [r7, #4]
 800823a:	4613      	mov	r3, r2
 800823c:	011b      	lsls	r3, r3, #4
 800823e:	1a9b      	subs	r3, r3, r2
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	440b      	add	r3, r1
 8008244:	334d      	adds	r3, #77	@ 0x4d
 8008246:	2203      	movs	r2, #3
 8008248:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	78fa      	ldrb	r2, [r7, #3]
 8008250:	4611      	mov	r1, r2
 8008252:	4618      	mov	r0, r3
 8008254:	f007 fff2 	bl	801023c <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8008258:	78fa      	ldrb	r2, [r7, #3]
 800825a:	6879      	ldr	r1, [r7, #4]
 800825c:	4613      	mov	r3, r2
 800825e:	011b      	lsls	r3, r3, #4
 8008260:	1a9b      	subs	r3, r3, r2
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	440b      	add	r3, r1
 8008266:	3344      	adds	r3, #68	@ 0x44
 8008268:	2200      	movs	r2, #0
 800826a:	601a      	str	r2, [r3, #0]
 800826c:	e3f9      	b.n	8008a62 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	78fa      	ldrb	r2, [r7, #3]
 8008274:	4611      	mov	r1, r2
 8008276:	4618      	mov	r0, r3
 8008278:	f007 ff63 	bl	8010142 <USB_ReadChInterrupts>
 800827c:	4603      	mov	r3, r0
 800827e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008282:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008286:	d111      	bne.n	80082ac <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8008288:	78fb      	ldrb	r3, [r7, #3]
 800828a:	015a      	lsls	r2, r3, #5
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	4413      	add	r3, r2
 8008290:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008294:	461a      	mov	r2, r3
 8008296:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800829a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	78fa      	ldrb	r2, [r7, #3]
 80082a2:	4611      	mov	r1, r2
 80082a4:	4618      	mov	r0, r3
 80082a6:	f007 ffc9 	bl	801023c <USB_HC_Halt>
 80082aa:	e3da      	b.n	8008a62 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	78fa      	ldrb	r2, [r7, #3]
 80082b2:	4611      	mov	r1, r2
 80082b4:	4618      	mov	r0, r3
 80082b6:	f007 ff44 	bl	8010142 <USB_ReadChInterrupts>
 80082ba:	4603      	mov	r3, r0
 80082bc:	f003 0301 	and.w	r3, r3, #1
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d168      	bne.n	8008396 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80082c4:	78fa      	ldrb	r2, [r7, #3]
 80082c6:	6879      	ldr	r1, [r7, #4]
 80082c8:	4613      	mov	r3, r2
 80082ca:	011b      	lsls	r3, r3, #4
 80082cc:	1a9b      	subs	r3, r3, r2
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	440b      	add	r3, r1
 80082d2:	3344      	adds	r3, #68	@ 0x44
 80082d4:	2200      	movs	r2, #0
 80082d6:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	78fa      	ldrb	r2, [r7, #3]
 80082de:	4611      	mov	r1, r2
 80082e0:	4618      	mov	r0, r3
 80082e2:	f007 ff2e 	bl	8010142 <USB_ReadChInterrupts>
 80082e6:	4603      	mov	r3, r0
 80082e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082ec:	2b40      	cmp	r3, #64	@ 0x40
 80082ee:	d112      	bne.n	8008316 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80082f0:	78fa      	ldrb	r2, [r7, #3]
 80082f2:	6879      	ldr	r1, [r7, #4]
 80082f4:	4613      	mov	r3, r2
 80082f6:	011b      	lsls	r3, r3, #4
 80082f8:	1a9b      	subs	r3, r3, r2
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	440b      	add	r3, r1
 80082fe:	3319      	adds	r3, #25
 8008300:	2201      	movs	r2, #1
 8008302:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8008304:	78fb      	ldrb	r3, [r7, #3]
 8008306:	015a      	lsls	r2, r3, #5
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	4413      	add	r3, r2
 800830c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008310:	461a      	mov	r2, r3
 8008312:	2340      	movs	r3, #64	@ 0x40
 8008314:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8008316:	78fa      	ldrb	r2, [r7, #3]
 8008318:	6879      	ldr	r1, [r7, #4]
 800831a:	4613      	mov	r3, r2
 800831c:	011b      	lsls	r3, r3, #4
 800831e:	1a9b      	subs	r3, r3, r2
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	440b      	add	r3, r1
 8008324:	331b      	adds	r3, #27
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d019      	beq.n	8008360 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800832c:	78fa      	ldrb	r2, [r7, #3]
 800832e:	6879      	ldr	r1, [r7, #4]
 8008330:	4613      	mov	r3, r2
 8008332:	011b      	lsls	r3, r3, #4
 8008334:	1a9b      	subs	r3, r3, r2
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	440b      	add	r3, r1
 800833a:	331b      	adds	r3, #27
 800833c:	2200      	movs	r2, #0
 800833e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008340:	78fb      	ldrb	r3, [r7, #3]
 8008342:	015a      	lsls	r2, r3, #5
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	4413      	add	r3, r2
 8008348:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	78fa      	ldrb	r2, [r7, #3]
 8008350:	0151      	lsls	r1, r2, #5
 8008352:	693a      	ldr	r2, [r7, #16]
 8008354:	440a      	add	r2, r1
 8008356:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800835a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800835e:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8008360:	78fb      	ldrb	r3, [r7, #3]
 8008362:	015a      	lsls	r2, r3, #5
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	4413      	add	r3, r2
 8008368:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800836c:	461a      	mov	r2, r3
 800836e:	2301      	movs	r3, #1
 8008370:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8008372:	78fa      	ldrb	r2, [r7, #3]
 8008374:	6879      	ldr	r1, [r7, #4]
 8008376:	4613      	mov	r3, r2
 8008378:	011b      	lsls	r3, r3, #4
 800837a:	1a9b      	subs	r3, r3, r2
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	440b      	add	r3, r1
 8008380:	334d      	adds	r3, #77	@ 0x4d
 8008382:	2201      	movs	r2, #1
 8008384:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	78fa      	ldrb	r2, [r7, #3]
 800838c:	4611      	mov	r1, r2
 800838e:	4618      	mov	r0, r3
 8008390:	f007 ff54 	bl	801023c <USB_HC_Halt>
 8008394:	e365      	b.n	8008a62 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	78fa      	ldrb	r2, [r7, #3]
 800839c:	4611      	mov	r1, r2
 800839e:	4618      	mov	r0, r3
 80083a0:	f007 fecf 	bl	8010142 <USB_ReadChInterrupts>
 80083a4:	4603      	mov	r3, r0
 80083a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083aa:	2b40      	cmp	r3, #64	@ 0x40
 80083ac:	d139      	bne.n	8008422 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80083ae:	78fa      	ldrb	r2, [r7, #3]
 80083b0:	6879      	ldr	r1, [r7, #4]
 80083b2:	4613      	mov	r3, r2
 80083b4:	011b      	lsls	r3, r3, #4
 80083b6:	1a9b      	subs	r3, r3, r2
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	440b      	add	r3, r1
 80083bc:	334d      	adds	r3, #77	@ 0x4d
 80083be:	2205      	movs	r2, #5
 80083c0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80083c2:	78fa      	ldrb	r2, [r7, #3]
 80083c4:	6879      	ldr	r1, [r7, #4]
 80083c6:	4613      	mov	r3, r2
 80083c8:	011b      	lsls	r3, r3, #4
 80083ca:	1a9b      	subs	r3, r3, r2
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	440b      	add	r3, r1
 80083d0:	331a      	adds	r3, #26
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d109      	bne.n	80083ec <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80083d8:	78fa      	ldrb	r2, [r7, #3]
 80083da:	6879      	ldr	r1, [r7, #4]
 80083dc:	4613      	mov	r3, r2
 80083de:	011b      	lsls	r3, r3, #4
 80083e0:	1a9b      	subs	r3, r3, r2
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	440b      	add	r3, r1
 80083e6:	3319      	adds	r3, #25
 80083e8:	2201      	movs	r2, #1
 80083ea:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80083ec:	78fa      	ldrb	r2, [r7, #3]
 80083ee:	6879      	ldr	r1, [r7, #4]
 80083f0:	4613      	mov	r3, r2
 80083f2:	011b      	lsls	r3, r3, #4
 80083f4:	1a9b      	subs	r3, r3, r2
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	440b      	add	r3, r1
 80083fa:	3344      	adds	r3, #68	@ 0x44
 80083fc:	2200      	movs	r2, #0
 80083fe:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	78fa      	ldrb	r2, [r7, #3]
 8008406:	4611      	mov	r1, r2
 8008408:	4618      	mov	r0, r3
 800840a:	f007 ff17 	bl	801023c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800840e:	78fb      	ldrb	r3, [r7, #3]
 8008410:	015a      	lsls	r2, r3, #5
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	4413      	add	r3, r2
 8008416:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800841a:	461a      	mov	r2, r3
 800841c:	2340      	movs	r3, #64	@ 0x40
 800841e:	6093      	str	r3, [r2, #8]
 8008420:	e31f      	b.n	8008a62 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	78fa      	ldrb	r2, [r7, #3]
 8008428:	4611      	mov	r1, r2
 800842a:	4618      	mov	r0, r3
 800842c:	f007 fe89 	bl	8010142 <USB_ReadChInterrupts>
 8008430:	4603      	mov	r3, r0
 8008432:	f003 0308 	and.w	r3, r3, #8
 8008436:	2b08      	cmp	r3, #8
 8008438:	d11a      	bne.n	8008470 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800843a:	78fb      	ldrb	r3, [r7, #3]
 800843c:	015a      	lsls	r2, r3, #5
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	4413      	add	r3, r2
 8008442:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008446:	461a      	mov	r2, r3
 8008448:	2308      	movs	r3, #8
 800844a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800844c:	78fa      	ldrb	r2, [r7, #3]
 800844e:	6879      	ldr	r1, [r7, #4]
 8008450:	4613      	mov	r3, r2
 8008452:	011b      	lsls	r3, r3, #4
 8008454:	1a9b      	subs	r3, r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	440b      	add	r3, r1
 800845a:	334d      	adds	r3, #77	@ 0x4d
 800845c:	2206      	movs	r2, #6
 800845e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	78fa      	ldrb	r2, [r7, #3]
 8008466:	4611      	mov	r1, r2
 8008468:	4618      	mov	r0, r3
 800846a:	f007 fee7 	bl	801023c <USB_HC_Halt>
 800846e:	e2f8      	b.n	8008a62 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	78fa      	ldrb	r2, [r7, #3]
 8008476:	4611      	mov	r1, r2
 8008478:	4618      	mov	r0, r3
 800847a:	f007 fe62 	bl	8010142 <USB_ReadChInterrupts>
 800847e:	4603      	mov	r3, r0
 8008480:	f003 0310 	and.w	r3, r3, #16
 8008484:	2b10      	cmp	r3, #16
 8008486:	d144      	bne.n	8008512 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8008488:	78fa      	ldrb	r2, [r7, #3]
 800848a:	6879      	ldr	r1, [r7, #4]
 800848c:	4613      	mov	r3, r2
 800848e:	011b      	lsls	r3, r3, #4
 8008490:	1a9b      	subs	r3, r3, r2
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	440b      	add	r3, r1
 8008496:	3344      	adds	r3, #68	@ 0x44
 8008498:	2200      	movs	r2, #0
 800849a:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800849c:	78fa      	ldrb	r2, [r7, #3]
 800849e:	6879      	ldr	r1, [r7, #4]
 80084a0:	4613      	mov	r3, r2
 80084a2:	011b      	lsls	r3, r3, #4
 80084a4:	1a9b      	subs	r3, r3, r2
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	440b      	add	r3, r1
 80084aa:	334d      	adds	r3, #77	@ 0x4d
 80084ac:	2204      	movs	r2, #4
 80084ae:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80084b0:	78fa      	ldrb	r2, [r7, #3]
 80084b2:	6879      	ldr	r1, [r7, #4]
 80084b4:	4613      	mov	r3, r2
 80084b6:	011b      	lsls	r3, r3, #4
 80084b8:	1a9b      	subs	r3, r3, r2
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	440b      	add	r3, r1
 80084be:	3319      	adds	r3, #25
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d114      	bne.n	80084f0 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80084c6:	78fa      	ldrb	r2, [r7, #3]
 80084c8:	6879      	ldr	r1, [r7, #4]
 80084ca:	4613      	mov	r3, r2
 80084cc:	011b      	lsls	r3, r3, #4
 80084ce:	1a9b      	subs	r3, r3, r2
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	440b      	add	r3, r1
 80084d4:	3318      	adds	r3, #24
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d109      	bne.n	80084f0 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80084dc:	78fa      	ldrb	r2, [r7, #3]
 80084de:	6879      	ldr	r1, [r7, #4]
 80084e0:	4613      	mov	r3, r2
 80084e2:	011b      	lsls	r3, r3, #4
 80084e4:	1a9b      	subs	r3, r3, r2
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	440b      	add	r3, r1
 80084ea:	3319      	adds	r3, #25
 80084ec:	2201      	movs	r2, #1
 80084ee:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	78fa      	ldrb	r2, [r7, #3]
 80084f6:	4611      	mov	r1, r2
 80084f8:	4618      	mov	r0, r3
 80084fa:	f007 fe9f 	bl	801023c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80084fe:	78fb      	ldrb	r3, [r7, #3]
 8008500:	015a      	lsls	r2, r3, #5
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	4413      	add	r3, r2
 8008506:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800850a:	461a      	mov	r2, r3
 800850c:	2310      	movs	r3, #16
 800850e:	6093      	str	r3, [r2, #8]
 8008510:	e2a7      	b.n	8008a62 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	78fa      	ldrb	r2, [r7, #3]
 8008518:	4611      	mov	r1, r2
 800851a:	4618      	mov	r0, r3
 800851c:	f007 fe11 	bl	8010142 <USB_ReadChInterrupts>
 8008520:	4603      	mov	r3, r0
 8008522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008526:	2b80      	cmp	r3, #128	@ 0x80
 8008528:	f040 8083 	bne.w	8008632 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	799b      	ldrb	r3, [r3, #6]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d111      	bne.n	8008558 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8008534:	78fa      	ldrb	r2, [r7, #3]
 8008536:	6879      	ldr	r1, [r7, #4]
 8008538:	4613      	mov	r3, r2
 800853a:	011b      	lsls	r3, r3, #4
 800853c:	1a9b      	subs	r3, r3, r2
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	440b      	add	r3, r1
 8008542:	334d      	adds	r3, #77	@ 0x4d
 8008544:	2207      	movs	r2, #7
 8008546:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	78fa      	ldrb	r2, [r7, #3]
 800854e:	4611      	mov	r1, r2
 8008550:	4618      	mov	r0, r3
 8008552:	f007 fe73 	bl	801023c <USB_HC_Halt>
 8008556:	e062      	b.n	800861e <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8008558:	78fa      	ldrb	r2, [r7, #3]
 800855a:	6879      	ldr	r1, [r7, #4]
 800855c:	4613      	mov	r3, r2
 800855e:	011b      	lsls	r3, r3, #4
 8008560:	1a9b      	subs	r3, r3, r2
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	440b      	add	r3, r1
 8008566:	3344      	adds	r3, #68	@ 0x44
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	1c59      	adds	r1, r3, #1
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	4613      	mov	r3, r2
 8008570:	011b      	lsls	r3, r3, #4
 8008572:	1a9b      	subs	r3, r3, r2
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	4403      	add	r3, r0
 8008578:	3344      	adds	r3, #68	@ 0x44
 800857a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800857c:	78fa      	ldrb	r2, [r7, #3]
 800857e:	6879      	ldr	r1, [r7, #4]
 8008580:	4613      	mov	r3, r2
 8008582:	011b      	lsls	r3, r3, #4
 8008584:	1a9b      	subs	r3, r3, r2
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	440b      	add	r3, r1
 800858a:	3344      	adds	r3, #68	@ 0x44
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2b02      	cmp	r3, #2
 8008590:	d922      	bls.n	80085d8 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8008592:	78fa      	ldrb	r2, [r7, #3]
 8008594:	6879      	ldr	r1, [r7, #4]
 8008596:	4613      	mov	r3, r2
 8008598:	011b      	lsls	r3, r3, #4
 800859a:	1a9b      	subs	r3, r3, r2
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	440b      	add	r3, r1
 80085a0:	3344      	adds	r3, #68	@ 0x44
 80085a2:	2200      	movs	r2, #0
 80085a4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80085a6:	78fa      	ldrb	r2, [r7, #3]
 80085a8:	6879      	ldr	r1, [r7, #4]
 80085aa:	4613      	mov	r3, r2
 80085ac:	011b      	lsls	r3, r3, #4
 80085ae:	1a9b      	subs	r3, r3, r2
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	440b      	add	r3, r1
 80085b4:	334c      	adds	r3, #76	@ 0x4c
 80085b6:	2204      	movs	r2, #4
 80085b8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80085ba:	78fa      	ldrb	r2, [r7, #3]
 80085bc:	6879      	ldr	r1, [r7, #4]
 80085be:	4613      	mov	r3, r2
 80085c0:	011b      	lsls	r3, r3, #4
 80085c2:	1a9b      	subs	r3, r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	440b      	add	r3, r1
 80085c8:	334c      	adds	r3, #76	@ 0x4c
 80085ca:	781a      	ldrb	r2, [r3, #0]
 80085cc:	78fb      	ldrb	r3, [r7, #3]
 80085ce:	4619      	mov	r1, r3
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f00c fe79 	bl	80152c8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80085d6:	e022      	b.n	800861e <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80085d8:	78fa      	ldrb	r2, [r7, #3]
 80085da:	6879      	ldr	r1, [r7, #4]
 80085dc:	4613      	mov	r3, r2
 80085de:	011b      	lsls	r3, r3, #4
 80085e0:	1a9b      	subs	r3, r3, r2
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	440b      	add	r3, r1
 80085e6:	334c      	adds	r3, #76	@ 0x4c
 80085e8:	2202      	movs	r2, #2
 80085ea:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80085ec:	78fb      	ldrb	r3, [r7, #3]
 80085ee:	015a      	lsls	r2, r3, #5
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	4413      	add	r3, r2
 80085f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008602:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800860a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800860c:	78fb      	ldrb	r3, [r7, #3]
 800860e:	015a      	lsls	r2, r3, #5
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	4413      	add	r3, r2
 8008614:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008618:	461a      	mov	r2, r3
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800861e:	78fb      	ldrb	r3, [r7, #3]
 8008620:	015a      	lsls	r2, r3, #5
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	4413      	add	r3, r2
 8008626:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800862a:	461a      	mov	r2, r3
 800862c:	2380      	movs	r3, #128	@ 0x80
 800862e:	6093      	str	r3, [r2, #8]
 8008630:	e217      	b.n	8008a62 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	78fa      	ldrb	r2, [r7, #3]
 8008638:	4611      	mov	r1, r2
 800863a:	4618      	mov	r0, r3
 800863c:	f007 fd81 	bl	8010142 <USB_ReadChInterrupts>
 8008640:	4603      	mov	r3, r0
 8008642:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008646:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800864a:	d11b      	bne.n	8008684 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800864c:	78fa      	ldrb	r2, [r7, #3]
 800864e:	6879      	ldr	r1, [r7, #4]
 8008650:	4613      	mov	r3, r2
 8008652:	011b      	lsls	r3, r3, #4
 8008654:	1a9b      	subs	r3, r3, r2
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	440b      	add	r3, r1
 800865a:	334d      	adds	r3, #77	@ 0x4d
 800865c:	2209      	movs	r2, #9
 800865e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	78fa      	ldrb	r2, [r7, #3]
 8008666:	4611      	mov	r1, r2
 8008668:	4618      	mov	r0, r3
 800866a:	f007 fde7 	bl	801023c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800866e:	78fb      	ldrb	r3, [r7, #3]
 8008670:	015a      	lsls	r2, r3, #5
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	4413      	add	r3, r2
 8008676:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800867a:	461a      	mov	r2, r3
 800867c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008680:	6093      	str	r3, [r2, #8]
 8008682:	e1ee      	b.n	8008a62 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	78fa      	ldrb	r2, [r7, #3]
 800868a:	4611      	mov	r1, r2
 800868c:	4618      	mov	r0, r3
 800868e:	f007 fd58 	bl	8010142 <USB_ReadChInterrupts>
 8008692:	4603      	mov	r3, r0
 8008694:	f003 0302 	and.w	r3, r3, #2
 8008698:	2b02      	cmp	r3, #2
 800869a:	f040 81df 	bne.w	8008a5c <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800869e:	78fb      	ldrb	r3, [r7, #3]
 80086a0:	015a      	lsls	r2, r3, #5
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	4413      	add	r3, r2
 80086a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086aa:	461a      	mov	r2, r3
 80086ac:	2302      	movs	r3, #2
 80086ae:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80086b0:	78fa      	ldrb	r2, [r7, #3]
 80086b2:	6879      	ldr	r1, [r7, #4]
 80086b4:	4613      	mov	r3, r2
 80086b6:	011b      	lsls	r3, r3, #4
 80086b8:	1a9b      	subs	r3, r3, r2
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	440b      	add	r3, r1
 80086be:	334d      	adds	r3, #77	@ 0x4d
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	f040 8093 	bne.w	80087ee <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80086c8:	78fa      	ldrb	r2, [r7, #3]
 80086ca:	6879      	ldr	r1, [r7, #4]
 80086cc:	4613      	mov	r3, r2
 80086ce:	011b      	lsls	r3, r3, #4
 80086d0:	1a9b      	subs	r3, r3, r2
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	440b      	add	r3, r1
 80086d6:	334d      	adds	r3, #77	@ 0x4d
 80086d8:	2202      	movs	r2, #2
 80086da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80086dc:	78fa      	ldrb	r2, [r7, #3]
 80086de:	6879      	ldr	r1, [r7, #4]
 80086e0:	4613      	mov	r3, r2
 80086e2:	011b      	lsls	r3, r3, #4
 80086e4:	1a9b      	subs	r3, r3, r2
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	440b      	add	r3, r1
 80086ea:	334c      	adds	r3, #76	@ 0x4c
 80086ec:	2201      	movs	r2, #1
 80086ee:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80086f0:	78fa      	ldrb	r2, [r7, #3]
 80086f2:	6879      	ldr	r1, [r7, #4]
 80086f4:	4613      	mov	r3, r2
 80086f6:	011b      	lsls	r3, r3, #4
 80086f8:	1a9b      	subs	r3, r3, r2
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	440b      	add	r3, r1
 80086fe:	3326      	adds	r3, #38	@ 0x26
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	2b02      	cmp	r3, #2
 8008704:	d00b      	beq.n	800871e <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8008706:	78fa      	ldrb	r2, [r7, #3]
 8008708:	6879      	ldr	r1, [r7, #4]
 800870a:	4613      	mov	r3, r2
 800870c:	011b      	lsls	r3, r3, #4
 800870e:	1a9b      	subs	r3, r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	440b      	add	r3, r1
 8008714:	3326      	adds	r3, #38	@ 0x26
 8008716:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8008718:	2b03      	cmp	r3, #3
 800871a:	f040 8190 	bne.w	8008a3e <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	799b      	ldrb	r3, [r3, #6]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d115      	bne.n	8008752 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8008726:	78fa      	ldrb	r2, [r7, #3]
 8008728:	6879      	ldr	r1, [r7, #4]
 800872a:	4613      	mov	r3, r2
 800872c:	011b      	lsls	r3, r3, #4
 800872e:	1a9b      	subs	r3, r3, r2
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	440b      	add	r3, r1
 8008734:	333d      	adds	r3, #61	@ 0x3d
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	78fa      	ldrb	r2, [r7, #3]
 800873a:	f083 0301 	eor.w	r3, r3, #1
 800873e:	b2d8      	uxtb	r0, r3
 8008740:	6879      	ldr	r1, [r7, #4]
 8008742:	4613      	mov	r3, r2
 8008744:	011b      	lsls	r3, r3, #4
 8008746:	1a9b      	subs	r3, r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	440b      	add	r3, r1
 800874c:	333d      	adds	r3, #61	@ 0x3d
 800874e:	4602      	mov	r2, r0
 8008750:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	799b      	ldrb	r3, [r3, #6]
 8008756:	2b01      	cmp	r3, #1
 8008758:	f040 8171 	bne.w	8008a3e <HCD_HC_OUT_IRQHandler+0x954>
 800875c:	78fa      	ldrb	r2, [r7, #3]
 800875e:	6879      	ldr	r1, [r7, #4]
 8008760:	4613      	mov	r3, r2
 8008762:	011b      	lsls	r3, r3, #4
 8008764:	1a9b      	subs	r3, r3, r2
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	440b      	add	r3, r1
 800876a:	3334      	adds	r3, #52	@ 0x34
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	f000 8165 	beq.w	8008a3e <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8008774:	78fa      	ldrb	r2, [r7, #3]
 8008776:	6879      	ldr	r1, [r7, #4]
 8008778:	4613      	mov	r3, r2
 800877a:	011b      	lsls	r3, r3, #4
 800877c:	1a9b      	subs	r3, r3, r2
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	440b      	add	r3, r1
 8008782:	3334      	adds	r3, #52	@ 0x34
 8008784:	6819      	ldr	r1, [r3, #0]
 8008786:	78fa      	ldrb	r2, [r7, #3]
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	4613      	mov	r3, r2
 800878c:	011b      	lsls	r3, r3, #4
 800878e:	1a9b      	subs	r3, r3, r2
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	4403      	add	r3, r0
 8008794:	3328      	adds	r3, #40	@ 0x28
 8008796:	881b      	ldrh	r3, [r3, #0]
 8008798:	440b      	add	r3, r1
 800879a:	1e59      	subs	r1, r3, #1
 800879c:	78fa      	ldrb	r2, [r7, #3]
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	4613      	mov	r3, r2
 80087a2:	011b      	lsls	r3, r3, #4
 80087a4:	1a9b      	subs	r3, r3, r2
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	4403      	add	r3, r0
 80087aa:	3328      	adds	r3, #40	@ 0x28
 80087ac:	881b      	ldrh	r3, [r3, #0]
 80087ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80087b2:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	f003 0301 	and.w	r3, r3, #1
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	f000 813f 	beq.w	8008a3e <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80087c0:	78fa      	ldrb	r2, [r7, #3]
 80087c2:	6879      	ldr	r1, [r7, #4]
 80087c4:	4613      	mov	r3, r2
 80087c6:	011b      	lsls	r3, r3, #4
 80087c8:	1a9b      	subs	r3, r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	440b      	add	r3, r1
 80087ce:	333d      	adds	r3, #61	@ 0x3d
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	78fa      	ldrb	r2, [r7, #3]
 80087d4:	f083 0301 	eor.w	r3, r3, #1
 80087d8:	b2d8      	uxtb	r0, r3
 80087da:	6879      	ldr	r1, [r7, #4]
 80087dc:	4613      	mov	r3, r2
 80087de:	011b      	lsls	r3, r3, #4
 80087e0:	1a9b      	subs	r3, r3, r2
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	440b      	add	r3, r1
 80087e6:	333d      	adds	r3, #61	@ 0x3d
 80087e8:	4602      	mov	r2, r0
 80087ea:	701a      	strb	r2, [r3, #0]
 80087ec:	e127      	b.n	8008a3e <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80087ee:	78fa      	ldrb	r2, [r7, #3]
 80087f0:	6879      	ldr	r1, [r7, #4]
 80087f2:	4613      	mov	r3, r2
 80087f4:	011b      	lsls	r3, r3, #4
 80087f6:	1a9b      	subs	r3, r3, r2
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	440b      	add	r3, r1
 80087fc:	334d      	adds	r3, #77	@ 0x4d
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	2b03      	cmp	r3, #3
 8008802:	d120      	bne.n	8008846 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008804:	78fa      	ldrb	r2, [r7, #3]
 8008806:	6879      	ldr	r1, [r7, #4]
 8008808:	4613      	mov	r3, r2
 800880a:	011b      	lsls	r3, r3, #4
 800880c:	1a9b      	subs	r3, r3, r2
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	440b      	add	r3, r1
 8008812:	334d      	adds	r3, #77	@ 0x4d
 8008814:	2202      	movs	r2, #2
 8008816:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008818:	78fa      	ldrb	r2, [r7, #3]
 800881a:	6879      	ldr	r1, [r7, #4]
 800881c:	4613      	mov	r3, r2
 800881e:	011b      	lsls	r3, r3, #4
 8008820:	1a9b      	subs	r3, r3, r2
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	440b      	add	r3, r1
 8008826:	331b      	adds	r3, #27
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	2b01      	cmp	r3, #1
 800882c:	f040 8107 	bne.w	8008a3e <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008830:	78fa      	ldrb	r2, [r7, #3]
 8008832:	6879      	ldr	r1, [r7, #4]
 8008834:	4613      	mov	r3, r2
 8008836:	011b      	lsls	r3, r3, #4
 8008838:	1a9b      	subs	r3, r3, r2
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	440b      	add	r3, r1
 800883e:	334c      	adds	r3, #76	@ 0x4c
 8008840:	2202      	movs	r2, #2
 8008842:	701a      	strb	r2, [r3, #0]
 8008844:	e0fb      	b.n	8008a3e <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8008846:	78fa      	ldrb	r2, [r7, #3]
 8008848:	6879      	ldr	r1, [r7, #4]
 800884a:	4613      	mov	r3, r2
 800884c:	011b      	lsls	r3, r3, #4
 800884e:	1a9b      	subs	r3, r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	440b      	add	r3, r1
 8008854:	334d      	adds	r3, #77	@ 0x4d
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	2b04      	cmp	r3, #4
 800885a:	d13a      	bne.n	80088d2 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800885c:	78fa      	ldrb	r2, [r7, #3]
 800885e:	6879      	ldr	r1, [r7, #4]
 8008860:	4613      	mov	r3, r2
 8008862:	011b      	lsls	r3, r3, #4
 8008864:	1a9b      	subs	r3, r3, r2
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	440b      	add	r3, r1
 800886a:	334d      	adds	r3, #77	@ 0x4d
 800886c:	2202      	movs	r2, #2
 800886e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008870:	78fa      	ldrb	r2, [r7, #3]
 8008872:	6879      	ldr	r1, [r7, #4]
 8008874:	4613      	mov	r3, r2
 8008876:	011b      	lsls	r3, r3, #4
 8008878:	1a9b      	subs	r3, r3, r2
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	440b      	add	r3, r1
 800887e:	334c      	adds	r3, #76	@ 0x4c
 8008880:	2202      	movs	r2, #2
 8008882:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008884:	78fa      	ldrb	r2, [r7, #3]
 8008886:	6879      	ldr	r1, [r7, #4]
 8008888:	4613      	mov	r3, r2
 800888a:	011b      	lsls	r3, r3, #4
 800888c:	1a9b      	subs	r3, r3, r2
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	440b      	add	r3, r1
 8008892:	331b      	adds	r3, #27
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	2b01      	cmp	r3, #1
 8008898:	f040 80d1 	bne.w	8008a3e <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800889c:	78fa      	ldrb	r2, [r7, #3]
 800889e:	6879      	ldr	r1, [r7, #4]
 80088a0:	4613      	mov	r3, r2
 80088a2:	011b      	lsls	r3, r3, #4
 80088a4:	1a9b      	subs	r3, r3, r2
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	440b      	add	r3, r1
 80088aa:	331b      	adds	r3, #27
 80088ac:	2200      	movs	r2, #0
 80088ae:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80088b0:	78fb      	ldrb	r3, [r7, #3]
 80088b2:	015a      	lsls	r2, r3, #5
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	4413      	add	r3, r2
 80088b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	78fa      	ldrb	r2, [r7, #3]
 80088c0:	0151      	lsls	r1, r2, #5
 80088c2:	693a      	ldr	r2, [r7, #16]
 80088c4:	440a      	add	r2, r1
 80088c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80088ce:	6053      	str	r3, [r2, #4]
 80088d0:	e0b5      	b.n	8008a3e <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80088d2:	78fa      	ldrb	r2, [r7, #3]
 80088d4:	6879      	ldr	r1, [r7, #4]
 80088d6:	4613      	mov	r3, r2
 80088d8:	011b      	lsls	r3, r3, #4
 80088da:	1a9b      	subs	r3, r3, r2
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	440b      	add	r3, r1
 80088e0:	334d      	adds	r3, #77	@ 0x4d
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	2b05      	cmp	r3, #5
 80088e6:	d114      	bne.n	8008912 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80088e8:	78fa      	ldrb	r2, [r7, #3]
 80088ea:	6879      	ldr	r1, [r7, #4]
 80088ec:	4613      	mov	r3, r2
 80088ee:	011b      	lsls	r3, r3, #4
 80088f0:	1a9b      	subs	r3, r3, r2
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	440b      	add	r3, r1
 80088f6:	334d      	adds	r3, #77	@ 0x4d
 80088f8:	2202      	movs	r2, #2
 80088fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80088fc:	78fa      	ldrb	r2, [r7, #3]
 80088fe:	6879      	ldr	r1, [r7, #4]
 8008900:	4613      	mov	r3, r2
 8008902:	011b      	lsls	r3, r3, #4
 8008904:	1a9b      	subs	r3, r3, r2
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	440b      	add	r3, r1
 800890a:	334c      	adds	r3, #76	@ 0x4c
 800890c:	2202      	movs	r2, #2
 800890e:	701a      	strb	r2, [r3, #0]
 8008910:	e095      	b.n	8008a3e <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8008912:	78fa      	ldrb	r2, [r7, #3]
 8008914:	6879      	ldr	r1, [r7, #4]
 8008916:	4613      	mov	r3, r2
 8008918:	011b      	lsls	r3, r3, #4
 800891a:	1a9b      	subs	r3, r3, r2
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	440b      	add	r3, r1
 8008920:	334d      	adds	r3, #77	@ 0x4d
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	2b06      	cmp	r3, #6
 8008926:	d114      	bne.n	8008952 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008928:	78fa      	ldrb	r2, [r7, #3]
 800892a:	6879      	ldr	r1, [r7, #4]
 800892c:	4613      	mov	r3, r2
 800892e:	011b      	lsls	r3, r3, #4
 8008930:	1a9b      	subs	r3, r3, r2
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	440b      	add	r3, r1
 8008936:	334d      	adds	r3, #77	@ 0x4d
 8008938:	2202      	movs	r2, #2
 800893a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800893c:	78fa      	ldrb	r2, [r7, #3]
 800893e:	6879      	ldr	r1, [r7, #4]
 8008940:	4613      	mov	r3, r2
 8008942:	011b      	lsls	r3, r3, #4
 8008944:	1a9b      	subs	r3, r3, r2
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	440b      	add	r3, r1
 800894a:	334c      	adds	r3, #76	@ 0x4c
 800894c:	2205      	movs	r2, #5
 800894e:	701a      	strb	r2, [r3, #0]
 8008950:	e075      	b.n	8008a3e <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8008952:	78fa      	ldrb	r2, [r7, #3]
 8008954:	6879      	ldr	r1, [r7, #4]
 8008956:	4613      	mov	r3, r2
 8008958:	011b      	lsls	r3, r3, #4
 800895a:	1a9b      	subs	r3, r3, r2
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	440b      	add	r3, r1
 8008960:	334d      	adds	r3, #77	@ 0x4d
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	2b07      	cmp	r3, #7
 8008966:	d00a      	beq.n	800897e <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8008968:	78fa      	ldrb	r2, [r7, #3]
 800896a:	6879      	ldr	r1, [r7, #4]
 800896c:	4613      	mov	r3, r2
 800896e:	011b      	lsls	r3, r3, #4
 8008970:	1a9b      	subs	r3, r3, r2
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	440b      	add	r3, r1
 8008976:	334d      	adds	r3, #77	@ 0x4d
 8008978:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800897a:	2b09      	cmp	r3, #9
 800897c:	d170      	bne.n	8008a60 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800897e:	78fa      	ldrb	r2, [r7, #3]
 8008980:	6879      	ldr	r1, [r7, #4]
 8008982:	4613      	mov	r3, r2
 8008984:	011b      	lsls	r3, r3, #4
 8008986:	1a9b      	subs	r3, r3, r2
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	440b      	add	r3, r1
 800898c:	334d      	adds	r3, #77	@ 0x4d
 800898e:	2202      	movs	r2, #2
 8008990:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8008992:	78fa      	ldrb	r2, [r7, #3]
 8008994:	6879      	ldr	r1, [r7, #4]
 8008996:	4613      	mov	r3, r2
 8008998:	011b      	lsls	r3, r3, #4
 800899a:	1a9b      	subs	r3, r3, r2
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	440b      	add	r3, r1
 80089a0:	3344      	adds	r3, #68	@ 0x44
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	1c59      	adds	r1, r3, #1
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	4613      	mov	r3, r2
 80089aa:	011b      	lsls	r3, r3, #4
 80089ac:	1a9b      	subs	r3, r3, r2
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	4403      	add	r3, r0
 80089b2:	3344      	adds	r3, #68	@ 0x44
 80089b4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80089b6:	78fa      	ldrb	r2, [r7, #3]
 80089b8:	6879      	ldr	r1, [r7, #4]
 80089ba:	4613      	mov	r3, r2
 80089bc:	011b      	lsls	r3, r3, #4
 80089be:	1a9b      	subs	r3, r3, r2
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	440b      	add	r3, r1
 80089c4:	3344      	adds	r3, #68	@ 0x44
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	d914      	bls.n	80089f6 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80089cc:	78fa      	ldrb	r2, [r7, #3]
 80089ce:	6879      	ldr	r1, [r7, #4]
 80089d0:	4613      	mov	r3, r2
 80089d2:	011b      	lsls	r3, r3, #4
 80089d4:	1a9b      	subs	r3, r3, r2
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	440b      	add	r3, r1
 80089da:	3344      	adds	r3, #68	@ 0x44
 80089dc:	2200      	movs	r2, #0
 80089de:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80089e0:	78fa      	ldrb	r2, [r7, #3]
 80089e2:	6879      	ldr	r1, [r7, #4]
 80089e4:	4613      	mov	r3, r2
 80089e6:	011b      	lsls	r3, r3, #4
 80089e8:	1a9b      	subs	r3, r3, r2
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	440b      	add	r3, r1
 80089ee:	334c      	adds	r3, #76	@ 0x4c
 80089f0:	2204      	movs	r2, #4
 80089f2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80089f4:	e022      	b.n	8008a3c <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80089f6:	78fa      	ldrb	r2, [r7, #3]
 80089f8:	6879      	ldr	r1, [r7, #4]
 80089fa:	4613      	mov	r3, r2
 80089fc:	011b      	lsls	r3, r3, #4
 80089fe:	1a9b      	subs	r3, r3, r2
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	440b      	add	r3, r1
 8008a04:	334c      	adds	r3, #76	@ 0x4c
 8008a06:	2202      	movs	r2, #2
 8008a08:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8008a0a:	78fb      	ldrb	r3, [r7, #3]
 8008a0c:	015a      	lsls	r2, r3, #5
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	4413      	add	r3, r2
 8008a12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008a20:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008a28:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8008a2a:	78fb      	ldrb	r3, [r7, #3]
 8008a2c:	015a      	lsls	r2, r3, #5
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	4413      	add	r3, r2
 8008a32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a36:	461a      	mov	r2, r3
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008a3c:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8008a3e:	78fa      	ldrb	r2, [r7, #3]
 8008a40:	6879      	ldr	r1, [r7, #4]
 8008a42:	4613      	mov	r3, r2
 8008a44:	011b      	lsls	r3, r3, #4
 8008a46:	1a9b      	subs	r3, r3, r2
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	440b      	add	r3, r1
 8008a4c:	334c      	adds	r3, #76	@ 0x4c
 8008a4e:	781a      	ldrb	r2, [r3, #0]
 8008a50:	78fb      	ldrb	r3, [r7, #3]
 8008a52:	4619      	mov	r1, r3
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f00c fc37 	bl	80152c8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8008a5a:	e002      	b.n	8008a62 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8008a5c:	bf00      	nop
 8008a5e:	e000      	b.n	8008a62 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8008a60:	bf00      	nop
  }
}
 8008a62:	3718      	adds	r7, #24
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b08a      	sub	sp, #40	@ 0x28
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a78:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	6a1b      	ldr	r3, [r3, #32]
 8008a80:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	f003 030f 	and.w	r3, r3, #15
 8008a88:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	0c5b      	lsrs	r3, r3, #17
 8008a8e:	f003 030f 	and.w	r3, r3, #15
 8008a92:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	091b      	lsrs	r3, r3, #4
 8008a98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a9c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	2b02      	cmp	r3, #2
 8008aa2:	d004      	beq.n	8008aae <HCD_RXQLVL_IRQHandler+0x46>
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	2b05      	cmp	r3, #5
 8008aa8:	f000 80b6 	beq.w	8008c18 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8008aac:	e0b7      	b.n	8008c1e <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f000 80b3 	beq.w	8008c1c <HCD_RXQLVL_IRQHandler+0x1b4>
 8008ab6:	6879      	ldr	r1, [r7, #4]
 8008ab8:	69ba      	ldr	r2, [r7, #24]
 8008aba:	4613      	mov	r3, r2
 8008abc:	011b      	lsls	r3, r3, #4
 8008abe:	1a9b      	subs	r3, r3, r2
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	440b      	add	r3, r1
 8008ac4:	332c      	adds	r3, #44	@ 0x2c
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f000 80a7 	beq.w	8008c1c <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8008ace:	6879      	ldr	r1, [r7, #4]
 8008ad0:	69ba      	ldr	r2, [r7, #24]
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	011b      	lsls	r3, r3, #4
 8008ad6:	1a9b      	subs	r3, r3, r2
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	440b      	add	r3, r1
 8008adc:	3338      	adds	r3, #56	@ 0x38
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	18d1      	adds	r1, r2, r3
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	69ba      	ldr	r2, [r7, #24]
 8008ae8:	4613      	mov	r3, r2
 8008aea:	011b      	lsls	r3, r3, #4
 8008aec:	1a9b      	subs	r3, r3, r2
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	4403      	add	r3, r0
 8008af2:	3334      	adds	r3, #52	@ 0x34
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4299      	cmp	r1, r3
 8008af8:	f200 8083 	bhi.w	8008c02 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6818      	ldr	r0, [r3, #0]
 8008b00:	6879      	ldr	r1, [r7, #4]
 8008b02:	69ba      	ldr	r2, [r7, #24]
 8008b04:	4613      	mov	r3, r2
 8008b06:	011b      	lsls	r3, r3, #4
 8008b08:	1a9b      	subs	r3, r3, r2
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	440b      	add	r3, r1
 8008b0e:	332c      	adds	r3, #44	@ 0x2c
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	693a      	ldr	r2, [r7, #16]
 8008b14:	b292      	uxth	r2, r2
 8008b16:	4619      	mov	r1, r3
 8008b18:	f007 faa8 	bl	801006c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8008b1c:	6879      	ldr	r1, [r7, #4]
 8008b1e:	69ba      	ldr	r2, [r7, #24]
 8008b20:	4613      	mov	r3, r2
 8008b22:	011b      	lsls	r3, r3, #4
 8008b24:	1a9b      	subs	r3, r3, r2
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	440b      	add	r3, r1
 8008b2a:	332c      	adds	r3, #44	@ 0x2c
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	18d1      	adds	r1, r2, r3
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	69ba      	ldr	r2, [r7, #24]
 8008b36:	4613      	mov	r3, r2
 8008b38:	011b      	lsls	r3, r3, #4
 8008b3a:	1a9b      	subs	r3, r3, r2
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	4403      	add	r3, r0
 8008b40:	332c      	adds	r3, #44	@ 0x2c
 8008b42:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8008b44:	6879      	ldr	r1, [r7, #4]
 8008b46:	69ba      	ldr	r2, [r7, #24]
 8008b48:	4613      	mov	r3, r2
 8008b4a:	011b      	lsls	r3, r3, #4
 8008b4c:	1a9b      	subs	r3, r3, r2
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	440b      	add	r3, r1
 8008b52:	3338      	adds	r3, #56	@ 0x38
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	18d1      	adds	r1, r2, r3
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	69ba      	ldr	r2, [r7, #24]
 8008b5e:	4613      	mov	r3, r2
 8008b60:	011b      	lsls	r3, r3, #4
 8008b62:	1a9b      	subs	r3, r3, r2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	4403      	add	r3, r0
 8008b68:	3338      	adds	r3, #56	@ 0x38
 8008b6a:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	015a      	lsls	r2, r3, #5
 8008b70:	6a3b      	ldr	r3, [r7, #32]
 8008b72:	4413      	add	r3, r2
 8008b74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b78:	691b      	ldr	r3, [r3, #16]
 8008b7a:	0cdb      	lsrs	r3, r3, #19
 8008b7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b80:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8008b82:	6879      	ldr	r1, [r7, #4]
 8008b84:	69ba      	ldr	r2, [r7, #24]
 8008b86:	4613      	mov	r3, r2
 8008b88:	011b      	lsls	r3, r3, #4
 8008b8a:	1a9b      	subs	r3, r3, r2
 8008b8c:	009b      	lsls	r3, r3, #2
 8008b8e:	440b      	add	r3, r1
 8008b90:	3328      	adds	r3, #40	@ 0x28
 8008b92:	881b      	ldrh	r3, [r3, #0]
 8008b94:	461a      	mov	r2, r3
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d13f      	bne.n	8008c1c <HCD_RXQLVL_IRQHandler+0x1b4>
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d03c      	beq.n	8008c1c <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	015a      	lsls	r2, r3, #5
 8008ba6:	6a3b      	ldr	r3, [r7, #32]
 8008ba8:	4413      	add	r3, r2
 8008baa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008bb8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008bc0:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	015a      	lsls	r2, r3, #5
 8008bc6:	6a3b      	ldr	r3, [r7, #32]
 8008bc8:	4413      	add	r3, r2
 8008bca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bce:	461a      	mov	r2, r3
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8008bd4:	6879      	ldr	r1, [r7, #4]
 8008bd6:	69ba      	ldr	r2, [r7, #24]
 8008bd8:	4613      	mov	r3, r2
 8008bda:	011b      	lsls	r3, r3, #4
 8008bdc:	1a9b      	subs	r3, r3, r2
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	440b      	add	r3, r1
 8008be2:	333c      	adds	r3, #60	@ 0x3c
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	f083 0301 	eor.w	r3, r3, #1
 8008bea:	b2d8      	uxtb	r0, r3
 8008bec:	6879      	ldr	r1, [r7, #4]
 8008bee:	69ba      	ldr	r2, [r7, #24]
 8008bf0:	4613      	mov	r3, r2
 8008bf2:	011b      	lsls	r3, r3, #4
 8008bf4:	1a9b      	subs	r3, r3, r2
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	440b      	add	r3, r1
 8008bfa:	333c      	adds	r3, #60	@ 0x3c
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	701a      	strb	r2, [r3, #0]
      break;
 8008c00:	e00c      	b.n	8008c1c <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8008c02:	6879      	ldr	r1, [r7, #4]
 8008c04:	69ba      	ldr	r2, [r7, #24]
 8008c06:	4613      	mov	r3, r2
 8008c08:	011b      	lsls	r3, r3, #4
 8008c0a:	1a9b      	subs	r3, r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	440b      	add	r3, r1
 8008c10:	334c      	adds	r3, #76	@ 0x4c
 8008c12:	2204      	movs	r2, #4
 8008c14:	701a      	strb	r2, [r3, #0]
      break;
 8008c16:	e001      	b.n	8008c1c <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8008c18:	bf00      	nop
 8008c1a:	e000      	b.n	8008c1e <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8008c1c:	bf00      	nop
  }
}
 8008c1e:	bf00      	nop
 8008c20:	3728      	adds	r7, #40	@ 0x28
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b086      	sub	sp, #24
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008c52:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f003 0302 	and.w	r3, r3, #2
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	d10b      	bne.n	8008c76 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f003 0301 	and.w	r3, r3, #1
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d102      	bne.n	8008c6e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f00c fb11 	bl	8015290 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	f043 0302 	orr.w	r3, r3, #2
 8008c74:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f003 0308 	and.w	r3, r3, #8
 8008c7c:	2b08      	cmp	r3, #8
 8008c7e:	d132      	bne.n	8008ce6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	f043 0308 	orr.w	r3, r3, #8
 8008c86:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f003 0304 	and.w	r3, r3, #4
 8008c8e:	2b04      	cmp	r3, #4
 8008c90:	d126      	bne.n	8008ce0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	7a5b      	ldrb	r3, [r3, #9]
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	d113      	bne.n	8008cc2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8008ca0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008ca4:	d106      	bne.n	8008cb4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2102      	movs	r1, #2
 8008cac:	4618      	mov	r0, r3
 8008cae:	f007 fa77 	bl	80101a0 <USB_InitFSLSPClkSel>
 8008cb2:	e011      	b.n	8008cd8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2101      	movs	r1, #1
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f007 fa70 	bl	80101a0 <USB_InitFSLSPClkSel>
 8008cc0:	e00a      	b.n	8008cd8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	79db      	ldrb	r3, [r3, #7]
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d106      	bne.n	8008cd8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8008cd6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f00c fb07 	bl	80152ec <HAL_HCD_PortEnabled_Callback>
 8008cde:	e002      	b.n	8008ce6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f00c fb11 	bl	8015308 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f003 0320 	and.w	r3, r3, #32
 8008cec:	2b20      	cmp	r3, #32
 8008cee:	d103      	bne.n	8008cf8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	f043 0320 	orr.w	r3, r3, #32
 8008cf6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008cfe:	461a      	mov	r2, r3
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	6013      	str	r3, [r2, #0]
}
 8008d04:	bf00      	nop
 8008d06:	3718      	adds	r7, #24
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d101      	bne.n	8008d1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e08b      	b.n	8008e36 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d106      	bne.n	8008d38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f7fa fec6 	bl	8003ac4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2224      	movs	r2, #36	@ 0x24
 8008d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f022 0201 	bic.w	r2, r2, #1
 8008d4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	685a      	ldr	r2, [r3, #4]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008d5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	689a      	ldr	r2, [r3, #8]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008d6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d107      	bne.n	8008d86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	689a      	ldr	r2, [r3, #8]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008d82:	609a      	str	r2, [r3, #8]
 8008d84:	e006      	b.n	8008d94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	689a      	ldr	r2, [r3, #8]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008d92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	68db      	ldr	r3, [r3, #12]
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d108      	bne.n	8008dae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	685a      	ldr	r2, [r3, #4]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008daa:	605a      	str	r2, [r3, #4]
 8008dac:	e007      	b.n	8008dbe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	685a      	ldr	r2, [r3, #4]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008dbc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	6859      	ldr	r1, [r3, #4]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8008e40 <HAL_I2C_Init+0x134>)
 8008dca:	430b      	orrs	r3, r1
 8008dcc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	68da      	ldr	r2, [r3, #12]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008ddc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	691a      	ldr	r2, [r3, #16]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	695b      	ldr	r3, [r3, #20]
 8008de6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	699b      	ldr	r3, [r3, #24]
 8008dee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	430a      	orrs	r2, r1
 8008df6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	69d9      	ldr	r1, [r3, #28]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6a1a      	ldr	r2, [r3, #32]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	430a      	orrs	r2, r1
 8008e06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f042 0201 	orr.w	r2, r2, #1
 8008e16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2220      	movs	r2, #32
 8008e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3708      	adds	r7, #8
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	02008000 	.word	0x02008000

08008e44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	2b20      	cmp	r3, #32
 8008e58:	d138      	bne.n	8008ecc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d101      	bne.n	8008e68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008e64:	2302      	movs	r3, #2
 8008e66:	e032      	b.n	8008ece <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2224      	movs	r2, #36	@ 0x24
 8008e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f022 0201 	bic.w	r2, r2, #1
 8008e86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008e96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	6819      	ldr	r1, [r3, #0]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	683a      	ldr	r2, [r7, #0]
 8008ea4:	430a      	orrs	r2, r1
 8008ea6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f042 0201 	orr.w	r2, r2, #1
 8008eb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2220      	movs	r2, #32
 8008ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	e000      	b.n	8008ece <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008ecc:	2302      	movs	r3, #2
  }
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	370c      	adds	r7, #12
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr

08008eda <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008eda:	b480      	push	{r7}
 8008edc:	b085      	sub	sp, #20
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
 8008ee2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	2b20      	cmp	r3, #32
 8008eee:	d139      	bne.n	8008f64 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d101      	bne.n	8008efe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008efa:	2302      	movs	r3, #2
 8008efc:	e033      	b.n	8008f66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2201      	movs	r2, #1
 8008f02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2224      	movs	r2, #36	@ 0x24
 8008f0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f022 0201 	bic.w	r2, r2, #1
 8008f1c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008f2c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	021b      	lsls	r3, r3, #8
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68fa      	ldr	r2, [r7, #12]
 8008f3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f042 0201 	orr.w	r2, r2, #1
 8008f4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2220      	movs	r2, #32
 8008f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008f60:	2300      	movs	r3, #0
 8008f62:	e000      	b.n	8008f66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008f64:	2302      	movs	r3, #2
  }
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3714      	adds	r7, #20
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr

08008f72 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b084      	sub	sp, #16
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d101      	bne.n	8008f84 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	e08f      	b.n	80090a4 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d106      	bne.n	8008f9e <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f7fa fe3b 	bl	8003c14 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2202      	movs	r2, #2
 8008fa2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	699a      	ldr	r2, [r3, #24]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8008fb4:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	6999      	ldr	r1, [r3, #24]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	685a      	ldr	r2, [r3, #4]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008fca:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	430a      	orrs	r2, r1
 8008fd8:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	695b      	ldr	r3, [r3, #20]
 8008fde:	041b      	lsls	r3, r3, #16
 8008fe0:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6999      	ldr	r1, [r3, #24]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	430a      	orrs	r2, r1
 8008fee:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	69db      	ldr	r3, [r3, #28]
 8008ff4:	041b      	lsls	r3, r3, #16
 8008ff6:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6a19      	ldr	r1, [r3, #32]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68fa      	ldr	r2, [r7, #12]
 8009002:	430a      	orrs	r2, r1
 8009004:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800900a:	041b      	lsls	r3, r3, #16
 800900c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	68fa      	ldr	r2, [r7, #12]
 8009018:	430a      	orrs	r2, r1
 800901a:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009020:	041b      	lsls	r3, r3, #16
 8009022:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	68fa      	ldr	r2, [r7, #12]
 800902e:	430a      	orrs	r2, r1
 8009030:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009038:	021b      	lsls	r3, r3, #8
 800903a:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8009042:	041b      	lsls	r3, r3, #16
 8009044:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8009054:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800905c:	68ba      	ldr	r2, [r7, #8]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	4313      	orrs	r3, r2
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8009068:	431a      	orrs	r2, r3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	430a      	orrs	r2, r1
 8009070:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f042 0206 	orr.w	r2, r2, #6
 8009080:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	699a      	ldr	r2, [r3, #24]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f042 0201 	orr.w	r2, r2, #1
 8009090:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2201      	movs	r2, #1
 800909e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3710      	adds	r7, #16
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ba:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090c2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f003 0304 	and.w	r3, r3, #4
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d023      	beq.n	8009116 <HAL_LTDC_IRQHandler+0x6a>
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	f003 0304 	and.w	r3, r3, #4
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d01e      	beq.n	8009116 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f022 0204 	bic.w	r2, r2, #4
 80090e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	2204      	movs	r2, #4
 80090ee:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80090f6:	f043 0201 	orr.w	r2, r3, #1
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2204      	movs	r2, #4
 8009104:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 f86f 	bl	80091f4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f003 0302 	and.w	r3, r3, #2
 800911c:	2b00      	cmp	r3, #0
 800911e:	d023      	beq.n	8009168 <HAL_LTDC_IRQHandler+0xbc>
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	f003 0302 	and.w	r3, r3, #2
 8009126:	2b00      	cmp	r3, #0
 8009128:	d01e      	beq.n	8009168 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f022 0202 	bic.w	r2, r2, #2
 8009138:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	2202      	movs	r2, #2
 8009140:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009148:	f043 0202 	orr.w	r2, r3, #2
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2204      	movs	r2, #4
 8009156:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 f846 	bl	80091f4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f003 0301 	and.w	r3, r3, #1
 800916e:	2b00      	cmp	r3, #0
 8009170:	d01b      	beq.n	80091aa <HAL_LTDC_IRQHandler+0xfe>
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	f003 0301 	and.w	r3, r3, #1
 8009178:	2b00      	cmp	r3, #0
 800917a:	d016      	beq.n	80091aa <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f022 0201 	bic.w	r2, r2, #1
 800918a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2201      	movs	r2, #1
 8009192:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 f82f 	bl	8009208 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f003 0308 	and.w	r3, r3, #8
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d01b      	beq.n	80091ec <HAL_LTDC_IRQHandler+0x140>
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	f003 0308 	and.w	r3, r3, #8
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d016      	beq.n	80091ec <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f022 0208 	bic.w	r2, r2, #8
 80091cc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	2208      	movs	r2, #8
 80091d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2201      	movs	r2, #1
 80091da:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 f818 	bl	800921c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80091ec:	bf00      	nop
 80091ee:	3710      	adds	r7, #16
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80091fc:	bf00      	nop
 80091fe:	370c      	adds	r7, #12
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr

08009208 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8009210:	bf00      	nop
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009224:	bf00      	nop
 8009226:	370c      	adds	r7, #12
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009230:	b5b0      	push	{r4, r5, r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8009242:	2b01      	cmp	r3, #1
 8009244:	d101      	bne.n	800924a <HAL_LTDC_ConfigLayer+0x1a>
 8009246:	2302      	movs	r3, #2
 8009248:	e02c      	b.n	80092a4 <HAL_LTDC_ConfigLayer+0x74>
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2201      	movs	r2, #1
 800924e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2202      	movs	r2, #2
 8009256:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800925a:	68fa      	ldr	r2, [r7, #12]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2134      	movs	r1, #52	@ 0x34
 8009260:	fb01 f303 	mul.w	r3, r1, r3
 8009264:	4413      	add	r3, r2
 8009266:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	4614      	mov	r4, r2
 800926e:	461d      	mov	r5, r3
 8009270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800927a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800927c:	682b      	ldr	r3, [r5, #0]
 800927e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	68b9      	ldr	r1, [r7, #8]
 8009284:	68f8      	ldr	r0, [r7, #12]
 8009286:	f000 f811 	bl	80092ac <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	2201      	movs	r2, #1
 8009290:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2201      	movs	r2, #1
 8009296:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2200      	movs	r2, #0
 800929e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80092a2:	2300      	movs	r3, #0
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bdb0      	pop	{r4, r5, r7, pc}

080092ac <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b089      	sub	sp, #36	@ 0x24
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	685a      	ldr	r2, [r3, #4]
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	0c1b      	lsrs	r3, r3, #16
 80092c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092c8:	4413      	add	r3, r2
 80092ca:	041b      	lsls	r3, r3, #16
 80092cc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	461a      	mov	r2, r3
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	01db      	lsls	r3, r3, #7
 80092d8:	4413      	add	r3, r2
 80092da:	3384      	adds	r3, #132	@ 0x84
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	68fa      	ldr	r2, [r7, #12]
 80092e0:	6812      	ldr	r2, [r2, #0]
 80092e2:	4611      	mov	r1, r2
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	01d2      	lsls	r2, r2, #7
 80092e8:	440a      	add	r2, r1
 80092ea:	3284      	adds	r2, #132	@ 0x84
 80092ec:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80092f0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	0c1b      	lsrs	r3, r3, #16
 80092fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009302:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009304:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4619      	mov	r1, r3
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	01db      	lsls	r3, r3, #7
 8009310:	440b      	add	r3, r1
 8009312:	3384      	adds	r3, #132	@ 0x84
 8009314:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009316:	69fb      	ldr	r3, [r7, #28]
 8009318:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800931a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	68da      	ldr	r2, [r3, #12]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	68db      	ldr	r3, [r3, #12]
 8009326:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800932a:	4413      	add	r3, r2
 800932c:	041b      	lsls	r3, r3, #16
 800932e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	461a      	mov	r2, r3
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	01db      	lsls	r3, r3, #7
 800933a:	4413      	add	r3, r2
 800933c:	3384      	adds	r3, #132	@ 0x84
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	68fa      	ldr	r2, [r7, #12]
 8009342:	6812      	ldr	r2, [r2, #0]
 8009344:	4611      	mov	r1, r2
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	01d2      	lsls	r2, r2, #7
 800934a:	440a      	add	r2, r1
 800934c:	3284      	adds	r2, #132	@ 0x84
 800934e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8009352:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	689a      	ldr	r2, [r3, #8]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009362:	4413      	add	r3, r2
 8009364:	1c5a      	adds	r2, r3, #1
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4619      	mov	r1, r3
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	01db      	lsls	r3, r3, #7
 8009370:	440b      	add	r3, r1
 8009372:	3384      	adds	r3, #132	@ 0x84
 8009374:	4619      	mov	r1, r3
 8009376:	69fb      	ldr	r3, [r7, #28]
 8009378:	4313      	orrs	r3, r2
 800937a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	461a      	mov	r2, r3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	01db      	lsls	r3, r3, #7
 8009386:	4413      	add	r3, r2
 8009388:	3384      	adds	r3, #132	@ 0x84
 800938a:	691b      	ldr	r3, [r3, #16]
 800938c:	68fa      	ldr	r2, [r7, #12]
 800938e:	6812      	ldr	r2, [r2, #0]
 8009390:	4611      	mov	r1, r2
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	01d2      	lsls	r2, r2, #7
 8009396:	440a      	add	r2, r1
 8009398:	3284      	adds	r2, #132	@ 0x84
 800939a:	f023 0307 	bic.w	r3, r3, #7
 800939e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	461a      	mov	r2, r3
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	01db      	lsls	r3, r3, #7
 80093aa:	4413      	add	r3, r2
 80093ac:	3384      	adds	r3, #132	@ 0x84
 80093ae:	461a      	mov	r2, r3
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	691b      	ldr	r3, [r3, #16]
 80093b4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80093bc:	021b      	lsls	r3, r3, #8
 80093be:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80093c6:	041b      	lsls	r3, r3, #16
 80093c8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	699b      	ldr	r3, [r3, #24]
 80093ce:	061b      	lsls	r3, r3, #24
 80093d0:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80093d8:	461a      	mov	r2, r3
 80093da:	69fb      	ldr	r3, [r7, #28]
 80093dc:	431a      	orrs	r2, r3
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	431a      	orrs	r2, r3
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4619      	mov	r1, r3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	01db      	lsls	r3, r3, #7
 80093ec:	440b      	add	r3, r1
 80093ee:	3384      	adds	r3, #132	@ 0x84
 80093f0:	4619      	mov	r1, r3
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	4313      	orrs	r3, r2
 80093f6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	461a      	mov	r2, r3
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	01db      	lsls	r3, r3, #7
 8009402:	4413      	add	r3, r2
 8009404:	3384      	adds	r3, #132	@ 0x84
 8009406:	695b      	ldr	r3, [r3, #20]
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	6812      	ldr	r2, [r2, #0]
 800940c:	4611      	mov	r1, r2
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	01d2      	lsls	r2, r2, #7
 8009412:	440a      	add	r2, r1
 8009414:	3284      	adds	r2, #132	@ 0x84
 8009416:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800941a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	461a      	mov	r2, r3
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	01db      	lsls	r3, r3, #7
 8009426:	4413      	add	r3, r2
 8009428:	3384      	adds	r3, #132	@ 0x84
 800942a:	461a      	mov	r2, r3
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	695b      	ldr	r3, [r3, #20]
 8009430:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	461a      	mov	r2, r3
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	01db      	lsls	r3, r3, #7
 800943c:	4413      	add	r3, r2
 800943e:	3384      	adds	r3, #132	@ 0x84
 8009440:	69da      	ldr	r2, [r3, #28]
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4619      	mov	r1, r3
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	01db      	lsls	r3, r3, #7
 800944c:	440b      	add	r3, r1
 800944e:	3384      	adds	r3, #132	@ 0x84
 8009450:	4619      	mov	r1, r3
 8009452:	4b4f      	ldr	r3, [pc, #316]	@ (8009590 <LTDC_SetConfig+0x2e4>)
 8009454:	4013      	ands	r3, r2
 8009456:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	69da      	ldr	r2, [r3, #28]
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	6a1b      	ldr	r3, [r3, #32]
 8009460:	68f9      	ldr	r1, [r7, #12]
 8009462:	6809      	ldr	r1, [r1, #0]
 8009464:	4608      	mov	r0, r1
 8009466:	6879      	ldr	r1, [r7, #4]
 8009468:	01c9      	lsls	r1, r1, #7
 800946a:	4401      	add	r1, r0
 800946c:	3184      	adds	r1, #132	@ 0x84
 800946e:	4313      	orrs	r3, r2
 8009470:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	461a      	mov	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	01db      	lsls	r3, r3, #7
 800947c:	4413      	add	r3, r2
 800947e:	3384      	adds	r3, #132	@ 0x84
 8009480:	461a      	mov	r2, r3
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009486:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	691b      	ldr	r3, [r3, #16]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d102      	bne.n	8009496 <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 8009490:	2304      	movs	r3, #4
 8009492:	61fb      	str	r3, [r7, #28]
 8009494:	e01b      	b.n	80094ce <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	691b      	ldr	r3, [r3, #16]
 800949a:	2b01      	cmp	r3, #1
 800949c:	d102      	bne.n	80094a4 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 800949e:	2303      	movs	r3, #3
 80094a0:	61fb      	str	r3, [r7, #28]
 80094a2:	e014      	b.n	80094ce <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	691b      	ldr	r3, [r3, #16]
 80094a8:	2b04      	cmp	r3, #4
 80094aa:	d00b      	beq.n	80094c4 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80094b0:	2b02      	cmp	r3, #2
 80094b2:	d007      	beq.n	80094c4 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80094b8:	2b03      	cmp	r3, #3
 80094ba:	d003      	beq.n	80094c4 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80094c0:	2b07      	cmp	r3, #7
 80094c2:	d102      	bne.n	80094ca <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 80094c4:	2302      	movs	r3, #2
 80094c6:	61fb      	str	r3, [r7, #28]
 80094c8:	e001      	b.n	80094ce <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 80094ca:	2301      	movs	r3, #1
 80094cc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	461a      	mov	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	01db      	lsls	r3, r3, #7
 80094d8:	4413      	add	r3, r2
 80094da:	3384      	adds	r3, #132	@ 0x84
 80094dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094de:	68fa      	ldr	r2, [r7, #12]
 80094e0:	6812      	ldr	r2, [r2, #0]
 80094e2:	4611      	mov	r1, r2
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	01d2      	lsls	r2, r2, #7
 80094e8:	440a      	add	r2, r1
 80094ea:	3284      	adds	r2, #132	@ 0x84
 80094ec:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80094f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094f6:	69fa      	ldr	r2, [r7, #28]
 80094f8:	fb02 f303 	mul.w	r3, r2, r3
 80094fc:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	6859      	ldr	r1, [r3, #4]
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	1acb      	subs	r3, r1, r3
 8009508:	69f9      	ldr	r1, [r7, #28]
 800950a:	fb01 f303 	mul.w	r3, r1, r3
 800950e:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009510:	68f9      	ldr	r1, [r7, #12]
 8009512:	6809      	ldr	r1, [r1, #0]
 8009514:	4608      	mov	r0, r1
 8009516:	6879      	ldr	r1, [r7, #4]
 8009518:	01c9      	lsls	r1, r1, #7
 800951a:	4401      	add	r1, r0
 800951c:	3184      	adds	r1, #132	@ 0x84
 800951e:	4313      	orrs	r3, r2
 8009520:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	461a      	mov	r2, r3
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	01db      	lsls	r3, r3, #7
 800952c:	4413      	add	r3, r2
 800952e:	3384      	adds	r3, #132	@ 0x84
 8009530:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4619      	mov	r1, r3
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	01db      	lsls	r3, r3, #7
 800953c:	440b      	add	r3, r1
 800953e:	3384      	adds	r3, #132	@ 0x84
 8009540:	4619      	mov	r1, r3
 8009542:	4b14      	ldr	r3, [pc, #80]	@ (8009594 <LTDC_SetConfig+0x2e8>)
 8009544:	4013      	ands	r3, r2
 8009546:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	461a      	mov	r2, r3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	01db      	lsls	r3, r3, #7
 8009552:	4413      	add	r3, r2
 8009554:	3384      	adds	r3, #132	@ 0x84
 8009556:	461a      	mov	r2, r3
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800955c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	461a      	mov	r2, r3
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	01db      	lsls	r3, r3, #7
 8009568:	4413      	add	r3, r2
 800956a:	3384      	adds	r3, #132	@ 0x84
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	68fa      	ldr	r2, [r7, #12]
 8009570:	6812      	ldr	r2, [r2, #0]
 8009572:	4611      	mov	r1, r2
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	01d2      	lsls	r2, r2, #7
 8009578:	440a      	add	r2, r1
 800957a:	3284      	adds	r2, #132	@ 0x84
 800957c:	f043 0301 	orr.w	r3, r3, #1
 8009580:	6013      	str	r3, [r2, #0]
}
 8009582:	bf00      	nop
 8009584:	3724      	adds	r7, #36	@ 0x24
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr
 800958e:	bf00      	nop
 8009590:	fffff8f8 	.word	0xfffff8f8
 8009594:	fffff800 	.word	0xfffff800

08009598 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009598:	b480      	push	{r7}
 800959a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800959c:	4b05      	ldr	r3, [pc, #20]	@ (80095b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a04      	ldr	r2, [pc, #16]	@ (80095b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80095a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80095a6:	6013      	str	r3, [r2, #0]
}
 80095a8:	bf00      	nop
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	40007000 	.word	0x40007000

080095b8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80095be:	2300      	movs	r3, #0
 80095c0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80095c2:	4b23      	ldr	r3, [pc, #140]	@ (8009650 <HAL_PWREx_EnableOverDrive+0x98>)
 80095c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095c6:	4a22      	ldr	r2, [pc, #136]	@ (8009650 <HAL_PWREx_EnableOverDrive+0x98>)
 80095c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80095cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80095ce:	4b20      	ldr	r3, [pc, #128]	@ (8009650 <HAL_PWREx_EnableOverDrive+0x98>)
 80095d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80095d6:	603b      	str	r3, [r7, #0]
 80095d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80095da:	4b1e      	ldr	r3, [pc, #120]	@ (8009654 <HAL_PWREx_EnableOverDrive+0x9c>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a1d      	ldr	r2, [pc, #116]	@ (8009654 <HAL_PWREx_EnableOverDrive+0x9c>)
 80095e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80095e4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80095e6:	f7fb fdbf 	bl	8005168 <HAL_GetTick>
 80095ea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80095ec:	e009      	b.n	8009602 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80095ee:	f7fb fdbb 	bl	8005168 <HAL_GetTick>
 80095f2:	4602      	mov	r2, r0
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	1ad3      	subs	r3, r2, r3
 80095f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80095fc:	d901      	bls.n	8009602 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80095fe:	2303      	movs	r3, #3
 8009600:	e022      	b.n	8009648 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009602:	4b14      	ldr	r3, [pc, #80]	@ (8009654 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800960a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800960e:	d1ee      	bne.n	80095ee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009610:	4b10      	ldr	r3, [pc, #64]	@ (8009654 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a0f      	ldr	r2, [pc, #60]	@ (8009654 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009616:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800961a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800961c:	f7fb fda4 	bl	8005168 <HAL_GetTick>
 8009620:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009622:	e009      	b.n	8009638 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009624:	f7fb fda0 	bl	8005168 <HAL_GetTick>
 8009628:	4602      	mov	r2, r0
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	1ad3      	subs	r3, r2, r3
 800962e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009632:	d901      	bls.n	8009638 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8009634:	2303      	movs	r3, #3
 8009636:	e007      	b.n	8009648 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009638:	4b06      	ldr	r3, [pc, #24]	@ (8009654 <HAL_PWREx_EnableOverDrive+0x9c>)
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009640:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009644:	d1ee      	bne.n	8009624 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	3708      	adds	r7, #8
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}
 8009650:	40023800 	.word	0x40023800
 8009654:	40007000 	.word	0x40007000

08009658 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b086      	sub	sp, #24
 800965c:	af02      	add	r7, sp, #8
 800965e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8009660:	f7fb fd82 	bl	8005168 <HAL_GetTick>
 8009664:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d101      	bne.n	8009670 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800966c:	2301      	movs	r3, #1
 800966e:	e067      	b.n	8009740 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009676:	b2db      	uxtb	r3, r3
 8009678:	2b00      	cmp	r3, #0
 800967a:	d10b      	bne.n	8009694 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f7fa fb8d 	bl	8003da4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800968a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 f85e 	bl	8009750 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	3b01      	subs	r3, #1
 80096a4:	021a      	lsls	r2, r3, #8
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	430a      	orrs	r2, r1
 80096ac:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096b2:	9300      	str	r3, [sp, #0]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2200      	movs	r2, #0
 80096b8:	2120      	movs	r1, #32
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 f856 	bl	800976c <QSPI_WaitFlagStateUntilTimeout>
 80096c0:	4603      	mov	r3, r0
 80096c2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80096c4:	7afb      	ldrb	r3, [r7, #11]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d135      	bne.n	8009736 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	4b1d      	ldr	r3, [pc, #116]	@ (8009748 <HAL_QSPI_Init+0xf0>)
 80096d2:	4013      	ands	r3, r2
 80096d4:	687a      	ldr	r2, [r7, #4]
 80096d6:	6852      	ldr	r2, [r2, #4]
 80096d8:	0611      	lsls	r1, r2, #24
 80096da:	687a      	ldr	r2, [r7, #4]
 80096dc:	68d2      	ldr	r2, [r2, #12]
 80096de:	4311      	orrs	r1, r2
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	69d2      	ldr	r2, [r2, #28]
 80096e4:	4311      	orrs	r1, r2
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	6a12      	ldr	r2, [r2, #32]
 80096ea:	4311      	orrs	r1, r2
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	6812      	ldr	r2, [r2, #0]
 80096f0:	430b      	orrs	r3, r1
 80096f2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	685a      	ldr	r2, [r3, #4]
 80096fa:	4b14      	ldr	r3, [pc, #80]	@ (800974c <HAL_QSPI_Init+0xf4>)
 80096fc:	4013      	ands	r3, r2
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	6912      	ldr	r2, [r2, #16]
 8009702:	0411      	lsls	r1, r2, #16
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	6952      	ldr	r2, [r2, #20]
 8009708:	4311      	orrs	r1, r2
 800970a:	687a      	ldr	r2, [r7, #4]
 800970c:	6992      	ldr	r2, [r2, #24]
 800970e:	4311      	orrs	r1, r2
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	6812      	ldr	r2, [r2, #0]
 8009714:	430b      	orrs	r3, r1
 8009716:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f042 0201 	orr.w	r2, r2, #1
 8009726:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2200      	movs	r2, #0
 800972c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2201      	movs	r2, #1
 8009732:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800973e:	7afb      	ldrb	r3, [r7, #11]
}
 8009740:	4618      	mov	r0, r3
 8009742:	3710      	adds	r7, #16
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}
 8009748:	00ffff2f 	.word	0x00ffff2f
 800974c:	ffe0f8fe 	.word	0xffe0f8fe

08009750 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8009750:	b480      	push	{r7}
 8009752:	b083      	sub	sp, #12
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	683a      	ldr	r2, [r7, #0]
 800975e:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8009760:	bf00      	nop
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	603b      	str	r3, [r7, #0]
 8009778:	4613      	mov	r3, r2
 800977a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800977c:	e01a      	b.n	80097b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800977e:	69bb      	ldr	r3, [r7, #24]
 8009780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009784:	d016      	beq.n	80097b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009786:	f7fb fcef 	bl	8005168 <HAL_GetTick>
 800978a:	4602      	mov	r2, r0
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	1ad3      	subs	r3, r2, r3
 8009790:	69ba      	ldr	r2, [r7, #24]
 8009792:	429a      	cmp	r2, r3
 8009794:	d302      	bcc.n	800979c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8009796:	69bb      	ldr	r3, [r7, #24]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d10b      	bne.n	80097b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2204      	movs	r2, #4
 80097a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097a8:	f043 0201 	orr.w	r2, r3, #1
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	e00e      	b.n	80097d2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	689a      	ldr	r2, [r3, #8]
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	4013      	ands	r3, r2
 80097be:	2b00      	cmp	r3, #0
 80097c0:	bf14      	ite	ne
 80097c2:	2301      	movne	r3, #1
 80097c4:	2300      	moveq	r3, #0
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	461a      	mov	r2, r3
 80097ca:	79fb      	ldrb	r3, [r7, #7]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d1d6      	bne.n	800977e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80097d0:	2300      	movs	r3, #0
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
	...

080097dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b086      	sub	sp, #24
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80097e4:	2300      	movs	r3, #0
 80097e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d101      	bne.n	80097f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80097ee:	2301      	movs	r3, #1
 80097f0:	e291      	b.n	8009d16 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f003 0301 	and.w	r3, r3, #1
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	f000 8087 	beq.w	800990e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009800:	4b96      	ldr	r3, [pc, #600]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 8009802:	689b      	ldr	r3, [r3, #8]
 8009804:	f003 030c 	and.w	r3, r3, #12
 8009808:	2b04      	cmp	r3, #4
 800980a:	d00c      	beq.n	8009826 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800980c:	4b93      	ldr	r3, [pc, #588]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	f003 030c 	and.w	r3, r3, #12
 8009814:	2b08      	cmp	r3, #8
 8009816:	d112      	bne.n	800983e <HAL_RCC_OscConfig+0x62>
 8009818:	4b90      	ldr	r3, [pc, #576]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009820:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009824:	d10b      	bne.n	800983e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009826:	4b8d      	ldr	r3, [pc, #564]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800982e:	2b00      	cmp	r3, #0
 8009830:	d06c      	beq.n	800990c <HAL_RCC_OscConfig+0x130>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d168      	bne.n	800990c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800983a:	2301      	movs	r3, #1
 800983c:	e26b      	b.n	8009d16 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009846:	d106      	bne.n	8009856 <HAL_RCC_OscConfig+0x7a>
 8009848:	4b84      	ldr	r3, [pc, #528]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a83      	ldr	r2, [pc, #524]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 800984e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009852:	6013      	str	r3, [r2, #0]
 8009854:	e02e      	b.n	80098b4 <HAL_RCC_OscConfig+0xd8>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d10c      	bne.n	8009878 <HAL_RCC_OscConfig+0x9c>
 800985e:	4b7f      	ldr	r3, [pc, #508]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a7e      	ldr	r2, [pc, #504]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 8009864:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009868:	6013      	str	r3, [r2, #0]
 800986a:	4b7c      	ldr	r3, [pc, #496]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a7b      	ldr	r2, [pc, #492]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 8009870:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009874:	6013      	str	r3, [r2, #0]
 8009876:	e01d      	b.n	80098b4 <HAL_RCC_OscConfig+0xd8>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009880:	d10c      	bne.n	800989c <HAL_RCC_OscConfig+0xc0>
 8009882:	4b76      	ldr	r3, [pc, #472]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a75      	ldr	r2, [pc, #468]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 8009888:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800988c:	6013      	str	r3, [r2, #0]
 800988e:	4b73      	ldr	r3, [pc, #460]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a72      	ldr	r2, [pc, #456]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 8009894:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009898:	6013      	str	r3, [r2, #0]
 800989a:	e00b      	b.n	80098b4 <HAL_RCC_OscConfig+0xd8>
 800989c:	4b6f      	ldr	r3, [pc, #444]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a6e      	ldr	r2, [pc, #440]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 80098a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80098a6:	6013      	str	r3, [r2, #0]
 80098a8:	4b6c      	ldr	r3, [pc, #432]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a6b      	ldr	r2, [pc, #428]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 80098ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80098b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d013      	beq.n	80098e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098bc:	f7fb fc54 	bl	8005168 <HAL_GetTick>
 80098c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80098c2:	e008      	b.n	80098d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80098c4:	f7fb fc50 	bl	8005168 <HAL_GetTick>
 80098c8:	4602      	mov	r2, r0
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	1ad3      	subs	r3, r2, r3
 80098ce:	2b64      	cmp	r3, #100	@ 0x64
 80098d0:	d901      	bls.n	80098d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80098d2:	2303      	movs	r3, #3
 80098d4:	e21f      	b.n	8009d16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80098d6:	4b61      	ldr	r3, [pc, #388]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d0f0      	beq.n	80098c4 <HAL_RCC_OscConfig+0xe8>
 80098e2:	e014      	b.n	800990e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098e4:	f7fb fc40 	bl	8005168 <HAL_GetTick>
 80098e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80098ea:	e008      	b.n	80098fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80098ec:	f7fb fc3c 	bl	8005168 <HAL_GetTick>
 80098f0:	4602      	mov	r2, r0
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	1ad3      	subs	r3, r2, r3
 80098f6:	2b64      	cmp	r3, #100	@ 0x64
 80098f8:	d901      	bls.n	80098fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80098fa:	2303      	movs	r3, #3
 80098fc:	e20b      	b.n	8009d16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80098fe:	4b57      	ldr	r3, [pc, #348]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009906:	2b00      	cmp	r3, #0
 8009908:	d1f0      	bne.n	80098ec <HAL_RCC_OscConfig+0x110>
 800990a:	e000      	b.n	800990e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800990c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f003 0302 	and.w	r3, r3, #2
 8009916:	2b00      	cmp	r3, #0
 8009918:	d069      	beq.n	80099ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800991a:	4b50      	ldr	r3, [pc, #320]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	f003 030c 	and.w	r3, r3, #12
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00b      	beq.n	800993e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009926:	4b4d      	ldr	r3, [pc, #308]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	f003 030c 	and.w	r3, r3, #12
 800992e:	2b08      	cmp	r3, #8
 8009930:	d11c      	bne.n	800996c <HAL_RCC_OscConfig+0x190>
 8009932:	4b4a      	ldr	r3, [pc, #296]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800993a:	2b00      	cmp	r3, #0
 800993c:	d116      	bne.n	800996c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800993e:	4b47      	ldr	r3, [pc, #284]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f003 0302 	and.w	r3, r3, #2
 8009946:	2b00      	cmp	r3, #0
 8009948:	d005      	beq.n	8009956 <HAL_RCC_OscConfig+0x17a>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	2b01      	cmp	r3, #1
 8009950:	d001      	beq.n	8009956 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009952:	2301      	movs	r3, #1
 8009954:	e1df      	b.n	8009d16 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009956:	4b41      	ldr	r3, [pc, #260]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	691b      	ldr	r3, [r3, #16]
 8009962:	00db      	lsls	r3, r3, #3
 8009964:	493d      	ldr	r1, [pc, #244]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 8009966:	4313      	orrs	r3, r2
 8009968:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800996a:	e040      	b.n	80099ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d023      	beq.n	80099bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009974:	4b39      	ldr	r3, [pc, #228]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4a38      	ldr	r2, [pc, #224]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 800997a:	f043 0301 	orr.w	r3, r3, #1
 800997e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009980:	f7fb fbf2 	bl	8005168 <HAL_GetTick>
 8009984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009986:	e008      	b.n	800999a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009988:	f7fb fbee 	bl	8005168 <HAL_GetTick>
 800998c:	4602      	mov	r2, r0
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	1ad3      	subs	r3, r2, r3
 8009992:	2b02      	cmp	r3, #2
 8009994:	d901      	bls.n	800999a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8009996:	2303      	movs	r3, #3
 8009998:	e1bd      	b.n	8009d16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800999a:	4b30      	ldr	r3, [pc, #192]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f003 0302 	and.w	r3, r3, #2
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d0f0      	beq.n	8009988 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099a6:	4b2d      	ldr	r3, [pc, #180]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	691b      	ldr	r3, [r3, #16]
 80099b2:	00db      	lsls	r3, r3, #3
 80099b4:	4929      	ldr	r1, [pc, #164]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 80099b6:	4313      	orrs	r3, r2
 80099b8:	600b      	str	r3, [r1, #0]
 80099ba:	e018      	b.n	80099ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80099bc:	4b27      	ldr	r3, [pc, #156]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a26      	ldr	r2, [pc, #152]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 80099c2:	f023 0301 	bic.w	r3, r3, #1
 80099c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099c8:	f7fb fbce 	bl	8005168 <HAL_GetTick>
 80099cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80099ce:	e008      	b.n	80099e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099d0:	f7fb fbca 	bl	8005168 <HAL_GetTick>
 80099d4:	4602      	mov	r2, r0
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	1ad3      	subs	r3, r2, r3
 80099da:	2b02      	cmp	r3, #2
 80099dc:	d901      	bls.n	80099e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80099de:	2303      	movs	r3, #3
 80099e0:	e199      	b.n	8009d16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80099e2:	4b1e      	ldr	r3, [pc, #120]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f003 0302 	and.w	r3, r3, #2
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d1f0      	bne.n	80099d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f003 0308 	and.w	r3, r3, #8
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d038      	beq.n	8009a6c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	695b      	ldr	r3, [r3, #20]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d019      	beq.n	8009a36 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009a02:	4b16      	ldr	r3, [pc, #88]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 8009a04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a06:	4a15      	ldr	r2, [pc, #84]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 8009a08:	f043 0301 	orr.w	r3, r3, #1
 8009a0c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a0e:	f7fb fbab 	bl	8005168 <HAL_GetTick>
 8009a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a14:	e008      	b.n	8009a28 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a16:	f7fb fba7 	bl	8005168 <HAL_GetTick>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	1ad3      	subs	r3, r2, r3
 8009a20:	2b02      	cmp	r3, #2
 8009a22:	d901      	bls.n	8009a28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009a24:	2303      	movs	r3, #3
 8009a26:	e176      	b.n	8009d16 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a28:	4b0c      	ldr	r3, [pc, #48]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 8009a2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a2c:	f003 0302 	and.w	r3, r3, #2
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d0f0      	beq.n	8009a16 <HAL_RCC_OscConfig+0x23a>
 8009a34:	e01a      	b.n	8009a6c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009a36:	4b09      	ldr	r3, [pc, #36]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 8009a38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a3a:	4a08      	ldr	r2, [pc, #32]	@ (8009a5c <HAL_RCC_OscConfig+0x280>)
 8009a3c:	f023 0301 	bic.w	r3, r3, #1
 8009a40:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a42:	f7fb fb91 	bl	8005168 <HAL_GetTick>
 8009a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a48:	e00a      	b.n	8009a60 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a4a:	f7fb fb8d 	bl	8005168 <HAL_GetTick>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	1ad3      	subs	r3, r2, r3
 8009a54:	2b02      	cmp	r3, #2
 8009a56:	d903      	bls.n	8009a60 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009a58:	2303      	movs	r3, #3
 8009a5a:	e15c      	b.n	8009d16 <HAL_RCC_OscConfig+0x53a>
 8009a5c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a60:	4b91      	ldr	r3, [pc, #580]	@ (8009ca8 <HAL_RCC_OscConfig+0x4cc>)
 8009a62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a64:	f003 0302 	and.w	r3, r3, #2
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d1ee      	bne.n	8009a4a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f003 0304 	and.w	r3, r3, #4
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	f000 80a4 	beq.w	8009bc2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009a7a:	4b8b      	ldr	r3, [pc, #556]	@ (8009ca8 <HAL_RCC_OscConfig+0x4cc>)
 8009a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d10d      	bne.n	8009aa2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a86:	4b88      	ldr	r3, [pc, #544]	@ (8009ca8 <HAL_RCC_OscConfig+0x4cc>)
 8009a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a8a:	4a87      	ldr	r2, [pc, #540]	@ (8009ca8 <HAL_RCC_OscConfig+0x4cc>)
 8009a8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8009a92:	4b85      	ldr	r3, [pc, #532]	@ (8009ca8 <HAL_RCC_OscConfig+0x4cc>)
 8009a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a9a:	60bb      	str	r3, [r7, #8]
 8009a9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009aa2:	4b82      	ldr	r3, [pc, #520]	@ (8009cac <HAL_RCC_OscConfig+0x4d0>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d118      	bne.n	8009ae0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8009aae:	4b7f      	ldr	r3, [pc, #508]	@ (8009cac <HAL_RCC_OscConfig+0x4d0>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a7e      	ldr	r2, [pc, #504]	@ (8009cac <HAL_RCC_OscConfig+0x4d0>)
 8009ab4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ab8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009aba:	f7fb fb55 	bl	8005168 <HAL_GetTick>
 8009abe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009ac0:	e008      	b.n	8009ad4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ac2:	f7fb fb51 	bl	8005168 <HAL_GetTick>
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	1ad3      	subs	r3, r2, r3
 8009acc:	2b64      	cmp	r3, #100	@ 0x64
 8009ace:	d901      	bls.n	8009ad4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8009ad0:	2303      	movs	r3, #3
 8009ad2:	e120      	b.n	8009d16 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009ad4:	4b75      	ldr	r3, [pc, #468]	@ (8009cac <HAL_RCC_OscConfig+0x4d0>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d0f0      	beq.n	8009ac2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d106      	bne.n	8009af6 <HAL_RCC_OscConfig+0x31a>
 8009ae8:	4b6f      	ldr	r3, [pc, #444]	@ (8009ca8 <HAL_RCC_OscConfig+0x4cc>)
 8009aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009aec:	4a6e      	ldr	r2, [pc, #440]	@ (8009ca8 <HAL_RCC_OscConfig+0x4cc>)
 8009aee:	f043 0301 	orr.w	r3, r3, #1
 8009af2:	6713      	str	r3, [r2, #112]	@ 0x70
 8009af4:	e02d      	b.n	8009b52 <HAL_RCC_OscConfig+0x376>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d10c      	bne.n	8009b18 <HAL_RCC_OscConfig+0x33c>
 8009afe:	4b6a      	ldr	r3, [pc, #424]	@ (8009ca8 <HAL_RCC_OscConfig+0x4cc>)
 8009b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b02:	4a69      	ldr	r2, [pc, #420]	@ (8009ca8 <HAL_RCC_OscConfig+0x4cc>)
 8009b04:	f023 0301 	bic.w	r3, r3, #1
 8009b08:	6713      	str	r3, [r2, #112]	@ 0x70
 8009b0a:	4b67      	ldr	r3, [pc, #412]	@ (8009ca8 <HAL_RCC_OscConfig+0x4cc>)
 8009b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b0e:	4a66      	ldr	r2, [pc, #408]	@ (8009ca8 <HAL_RCC_OscConfig+0x4cc>)
 8009b10:	f023 0304 	bic.w	r3, r3, #4
 8009b14:	6713      	str	r3, [r2, #112]	@ 0x70
 8009b16:	e01c      	b.n	8009b52 <HAL_RCC_OscConfig+0x376>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	2b05      	cmp	r3, #5
 8009b1e:	d10c      	bne.n	8009b3a <HAL_RCC_OscConfig+0x35e>
 8009b20:	4b61      	ldr	r3, [pc, #388]	@ (8009ca8 <HAL_RCC_OscConfig+0x4cc>)
 8009b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b24:	4a60      	ldr	r2, [pc, #384]	@ (8009ca8 <HAL_RCC_OscConfig+0x4cc>)
 8009b26:	f043 0304 	orr.w	r3, r3, #4
 8009b2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8009b2c:	4b5e      	ldr	r3, [pc, #376]	@ (8009ca8 <HAL_RCC_OscConfig+0x4cc>)
 8009b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b30:	4a5d      	ldr	r2, [pc, #372]	@ (8009ca8 <HAL_RCC_OscConfig+0x4cc>)
 8009b32:	f043 0301 	orr.w	r3, r3, #1
 8009b36:	6713      	str	r3, [r2, #112]	@ 0x70
 8009b38:	e00b      	b.n	8009b52 <HAL_RCC_OscConfig+0x376>
 8009b3a:	4b5b      	ldr	r3, [pc, #364]	@ (8009ca8 <HAL_RCC_OscConfig+0x4cc>)
 8009b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b3e:	4a5a      	ldr	r2, [pc, #360]	@ (8009ca8 <HAL_RCC_OscConfig+0x4cc>)
 8009b40:	f023 0301 	bic.w	r3, r3, #1
 8009b44:	6713      	str	r3, [r2, #112]	@ 0x70
 8009b46:	4b58      	ldr	r3, [pc, #352]	@ (8009ca8 <HAL_RCC_OscConfig+0x4cc>)
 8009b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b4a:	4a57      	ldr	r2, [pc, #348]	@ (8009ca8 <HAL_RCC_OscConfig+0x4cc>)
 8009b4c:	f023 0304 	bic.w	r3, r3, #4
 8009b50:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	689b      	ldr	r3, [r3, #8]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d015      	beq.n	8009b86 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b5a:	f7fb fb05 	bl	8005168 <HAL_GetTick>
 8009b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b60:	e00a      	b.n	8009b78 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b62:	f7fb fb01 	bl	8005168 <HAL_GetTick>
 8009b66:	4602      	mov	r2, r0
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	1ad3      	subs	r3, r2, r3
 8009b6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d901      	bls.n	8009b78 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8009b74:	2303      	movs	r3, #3
 8009b76:	e0ce      	b.n	8009d16 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b78:	4b4b      	ldr	r3, [pc, #300]	@ (8009ca8 <HAL_RCC_OscConfig+0x4cc>)
 8009b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b7c:	f003 0302 	and.w	r3, r3, #2
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d0ee      	beq.n	8009b62 <HAL_RCC_OscConfig+0x386>
 8009b84:	e014      	b.n	8009bb0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b86:	f7fb faef 	bl	8005168 <HAL_GetTick>
 8009b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009b8c:	e00a      	b.n	8009ba4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b8e:	f7fb faeb 	bl	8005168 <HAL_GetTick>
 8009b92:	4602      	mov	r2, r0
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	1ad3      	subs	r3, r2, r3
 8009b98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d901      	bls.n	8009ba4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8009ba0:	2303      	movs	r3, #3
 8009ba2:	e0b8      	b.n	8009d16 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009ba4:	4b40      	ldr	r3, [pc, #256]	@ (8009ca8 <HAL_RCC_OscConfig+0x4cc>)
 8009ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ba8:	f003 0302 	and.w	r3, r3, #2
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d1ee      	bne.n	8009b8e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009bb0:	7dfb      	ldrb	r3, [r7, #23]
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d105      	bne.n	8009bc2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009bb6:	4b3c      	ldr	r3, [pc, #240]	@ (8009ca8 <HAL_RCC_OscConfig+0x4cc>)
 8009bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bba:	4a3b      	ldr	r2, [pc, #236]	@ (8009ca8 <HAL_RCC_OscConfig+0x4cc>)
 8009bbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009bc0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	699b      	ldr	r3, [r3, #24]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	f000 80a4 	beq.w	8009d14 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009bcc:	4b36      	ldr	r3, [pc, #216]	@ (8009ca8 <HAL_RCC_OscConfig+0x4cc>)
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	f003 030c 	and.w	r3, r3, #12
 8009bd4:	2b08      	cmp	r3, #8
 8009bd6:	d06b      	beq.n	8009cb0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	699b      	ldr	r3, [r3, #24]
 8009bdc:	2b02      	cmp	r3, #2
 8009bde:	d149      	bne.n	8009c74 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009be0:	4b31      	ldr	r3, [pc, #196]	@ (8009ca8 <HAL_RCC_OscConfig+0x4cc>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a30      	ldr	r2, [pc, #192]	@ (8009ca8 <HAL_RCC_OscConfig+0x4cc>)
 8009be6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009bea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bec:	f7fb fabc 	bl	8005168 <HAL_GetTick>
 8009bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009bf2:	e008      	b.n	8009c06 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009bf4:	f7fb fab8 	bl	8005168 <HAL_GetTick>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	1ad3      	subs	r3, r2, r3
 8009bfe:	2b02      	cmp	r3, #2
 8009c00:	d901      	bls.n	8009c06 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8009c02:	2303      	movs	r3, #3
 8009c04:	e087      	b.n	8009d16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c06:	4b28      	ldr	r3, [pc, #160]	@ (8009ca8 <HAL_RCC_OscConfig+0x4cc>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d1f0      	bne.n	8009bf4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	69da      	ldr	r2, [r3, #28]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6a1b      	ldr	r3, [r3, #32]
 8009c1a:	431a      	orrs	r2, r3
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c20:	019b      	lsls	r3, r3, #6
 8009c22:	431a      	orrs	r2, r3
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c28:	085b      	lsrs	r3, r3, #1
 8009c2a:	3b01      	subs	r3, #1
 8009c2c:	041b      	lsls	r3, r3, #16
 8009c2e:	431a      	orrs	r2, r3
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c34:	061b      	lsls	r3, r3, #24
 8009c36:	4313      	orrs	r3, r2
 8009c38:	4a1b      	ldr	r2, [pc, #108]	@ (8009ca8 <HAL_RCC_OscConfig+0x4cc>)
 8009c3a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009c3e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009c40:	4b19      	ldr	r3, [pc, #100]	@ (8009ca8 <HAL_RCC_OscConfig+0x4cc>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4a18      	ldr	r2, [pc, #96]	@ (8009ca8 <HAL_RCC_OscConfig+0x4cc>)
 8009c46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009c4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c4c:	f7fb fa8c 	bl	8005168 <HAL_GetTick>
 8009c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c52:	e008      	b.n	8009c66 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c54:	f7fb fa88 	bl	8005168 <HAL_GetTick>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	1ad3      	subs	r3, r2, r3
 8009c5e:	2b02      	cmp	r3, #2
 8009c60:	d901      	bls.n	8009c66 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8009c62:	2303      	movs	r3, #3
 8009c64:	e057      	b.n	8009d16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c66:	4b10      	ldr	r3, [pc, #64]	@ (8009ca8 <HAL_RCC_OscConfig+0x4cc>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d0f0      	beq.n	8009c54 <HAL_RCC_OscConfig+0x478>
 8009c72:	e04f      	b.n	8009d14 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c74:	4b0c      	ldr	r3, [pc, #48]	@ (8009ca8 <HAL_RCC_OscConfig+0x4cc>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4a0b      	ldr	r2, [pc, #44]	@ (8009ca8 <HAL_RCC_OscConfig+0x4cc>)
 8009c7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c80:	f7fb fa72 	bl	8005168 <HAL_GetTick>
 8009c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c86:	e008      	b.n	8009c9a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c88:	f7fb fa6e 	bl	8005168 <HAL_GetTick>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	1ad3      	subs	r3, r2, r3
 8009c92:	2b02      	cmp	r3, #2
 8009c94:	d901      	bls.n	8009c9a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8009c96:	2303      	movs	r3, #3
 8009c98:	e03d      	b.n	8009d16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c9a:	4b03      	ldr	r3, [pc, #12]	@ (8009ca8 <HAL_RCC_OscConfig+0x4cc>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d1f0      	bne.n	8009c88 <HAL_RCC_OscConfig+0x4ac>
 8009ca6:	e035      	b.n	8009d14 <HAL_RCC_OscConfig+0x538>
 8009ca8:	40023800 	.word	0x40023800
 8009cac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8009cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8009d20 <HAL_RCC_OscConfig+0x544>)
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	699b      	ldr	r3, [r3, #24]
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d028      	beq.n	8009d10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d121      	bne.n	8009d10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d11a      	bne.n	8009d10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009ce0:	4013      	ands	r3, r2
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009ce6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d111      	bne.n	8009d10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cf6:	085b      	lsrs	r3, r3, #1
 8009cf8:	3b01      	subs	r3, #1
 8009cfa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d107      	bne.n	8009d10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d0a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d001      	beq.n	8009d14 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8009d10:	2301      	movs	r3, #1
 8009d12:	e000      	b.n	8009d16 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3718      	adds	r7, #24
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	40023800 	.word	0x40023800

08009d24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d101      	bne.n	8009d3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	e0d0      	b.n	8009ede <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009d3c:	4b6a      	ldr	r3, [pc, #424]	@ (8009ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f003 030f 	and.w	r3, r3, #15
 8009d44:	683a      	ldr	r2, [r7, #0]
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d910      	bls.n	8009d6c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d4a:	4b67      	ldr	r3, [pc, #412]	@ (8009ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f023 020f 	bic.w	r2, r3, #15
 8009d52:	4965      	ldr	r1, [pc, #404]	@ (8009ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	4313      	orrs	r3, r2
 8009d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d5a:	4b63      	ldr	r3, [pc, #396]	@ (8009ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f003 030f 	and.w	r3, r3, #15
 8009d62:	683a      	ldr	r2, [r7, #0]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d001      	beq.n	8009d6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	e0b8      	b.n	8009ede <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f003 0302 	and.w	r3, r3, #2
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d020      	beq.n	8009dba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f003 0304 	and.w	r3, r3, #4
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d005      	beq.n	8009d90 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009d84:	4b59      	ldr	r3, [pc, #356]	@ (8009eec <HAL_RCC_ClockConfig+0x1c8>)
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	4a58      	ldr	r2, [pc, #352]	@ (8009eec <HAL_RCC_ClockConfig+0x1c8>)
 8009d8a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009d8e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f003 0308 	and.w	r3, r3, #8
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d005      	beq.n	8009da8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009d9c:	4b53      	ldr	r3, [pc, #332]	@ (8009eec <HAL_RCC_ClockConfig+0x1c8>)
 8009d9e:	689b      	ldr	r3, [r3, #8]
 8009da0:	4a52      	ldr	r2, [pc, #328]	@ (8009eec <HAL_RCC_ClockConfig+0x1c8>)
 8009da2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009da6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009da8:	4b50      	ldr	r3, [pc, #320]	@ (8009eec <HAL_RCC_ClockConfig+0x1c8>)
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	494d      	ldr	r1, [pc, #308]	@ (8009eec <HAL_RCC_ClockConfig+0x1c8>)
 8009db6:	4313      	orrs	r3, r2
 8009db8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f003 0301 	and.w	r3, r3, #1
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d040      	beq.n	8009e48 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d107      	bne.n	8009dde <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009dce:	4b47      	ldr	r3, [pc, #284]	@ (8009eec <HAL_RCC_ClockConfig+0x1c8>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d115      	bne.n	8009e06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e07f      	b.n	8009ede <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	2b02      	cmp	r3, #2
 8009de4:	d107      	bne.n	8009df6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009de6:	4b41      	ldr	r3, [pc, #260]	@ (8009eec <HAL_RCC_ClockConfig+0x1c8>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d109      	bne.n	8009e06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	e073      	b.n	8009ede <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009df6:	4b3d      	ldr	r3, [pc, #244]	@ (8009eec <HAL_RCC_ClockConfig+0x1c8>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f003 0302 	and.w	r3, r3, #2
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d101      	bne.n	8009e06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009e02:	2301      	movs	r3, #1
 8009e04:	e06b      	b.n	8009ede <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009e06:	4b39      	ldr	r3, [pc, #228]	@ (8009eec <HAL_RCC_ClockConfig+0x1c8>)
 8009e08:	689b      	ldr	r3, [r3, #8]
 8009e0a:	f023 0203 	bic.w	r2, r3, #3
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	4936      	ldr	r1, [pc, #216]	@ (8009eec <HAL_RCC_ClockConfig+0x1c8>)
 8009e14:	4313      	orrs	r3, r2
 8009e16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e18:	f7fb f9a6 	bl	8005168 <HAL_GetTick>
 8009e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e1e:	e00a      	b.n	8009e36 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e20:	f7fb f9a2 	bl	8005168 <HAL_GetTick>
 8009e24:	4602      	mov	r2, r0
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	1ad3      	subs	r3, r2, r3
 8009e2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d901      	bls.n	8009e36 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8009e32:	2303      	movs	r3, #3
 8009e34:	e053      	b.n	8009ede <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e36:	4b2d      	ldr	r3, [pc, #180]	@ (8009eec <HAL_RCC_ClockConfig+0x1c8>)
 8009e38:	689b      	ldr	r3, [r3, #8]
 8009e3a:	f003 020c 	and.w	r2, r3, #12
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d1eb      	bne.n	8009e20 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009e48:	4b27      	ldr	r3, [pc, #156]	@ (8009ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f003 030f 	and.w	r3, r3, #15
 8009e50:	683a      	ldr	r2, [r7, #0]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d210      	bcs.n	8009e78 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e56:	4b24      	ldr	r3, [pc, #144]	@ (8009ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f023 020f 	bic.w	r2, r3, #15
 8009e5e:	4922      	ldr	r1, [pc, #136]	@ (8009ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	4313      	orrs	r3, r2
 8009e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e66:	4b20      	ldr	r3, [pc, #128]	@ (8009ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f003 030f 	and.w	r3, r3, #15
 8009e6e:	683a      	ldr	r2, [r7, #0]
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d001      	beq.n	8009e78 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009e74:	2301      	movs	r3, #1
 8009e76:	e032      	b.n	8009ede <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f003 0304 	and.w	r3, r3, #4
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d008      	beq.n	8009e96 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009e84:	4b19      	ldr	r3, [pc, #100]	@ (8009eec <HAL_RCC_ClockConfig+0x1c8>)
 8009e86:	689b      	ldr	r3, [r3, #8]
 8009e88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	4916      	ldr	r1, [pc, #88]	@ (8009eec <HAL_RCC_ClockConfig+0x1c8>)
 8009e92:	4313      	orrs	r3, r2
 8009e94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f003 0308 	and.w	r3, r3, #8
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d009      	beq.n	8009eb6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009ea2:	4b12      	ldr	r3, [pc, #72]	@ (8009eec <HAL_RCC_ClockConfig+0x1c8>)
 8009ea4:	689b      	ldr	r3, [r3, #8]
 8009ea6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	691b      	ldr	r3, [r3, #16]
 8009eae:	00db      	lsls	r3, r3, #3
 8009eb0:	490e      	ldr	r1, [pc, #56]	@ (8009eec <HAL_RCC_ClockConfig+0x1c8>)
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009eb6:	f000 f821 	bl	8009efc <HAL_RCC_GetSysClockFreq>
 8009eba:	4602      	mov	r2, r0
 8009ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8009eec <HAL_RCC_ClockConfig+0x1c8>)
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	091b      	lsrs	r3, r3, #4
 8009ec2:	f003 030f 	and.w	r3, r3, #15
 8009ec6:	490a      	ldr	r1, [pc, #40]	@ (8009ef0 <HAL_RCC_ClockConfig+0x1cc>)
 8009ec8:	5ccb      	ldrb	r3, [r1, r3]
 8009eca:	fa22 f303 	lsr.w	r3, r2, r3
 8009ece:	4a09      	ldr	r2, [pc, #36]	@ (8009ef4 <HAL_RCC_ClockConfig+0x1d0>)
 8009ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009ed2:	4b09      	ldr	r3, [pc, #36]	@ (8009ef8 <HAL_RCC_ClockConfig+0x1d4>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7fa fc72 	bl	80047c0 <HAL_InitTick>

  return HAL_OK;
 8009edc:	2300      	movs	r3, #0
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3710      	adds	r7, #16
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	40023c00 	.word	0x40023c00
 8009eec:	40023800 	.word	0x40023800
 8009ef0:	08019d0c 	.word	0x08019d0c
 8009ef4:	20000018 	.word	0x20000018
 8009ef8:	20000064 	.word	0x20000064

08009efc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f00:	b090      	sub	sp, #64	@ 0x40
 8009f02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8009f04:	2300      	movs	r3, #0
 8009f06:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f08:	2300      	movs	r3, #0
 8009f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8009f10:	2300      	movs	r3, #0
 8009f12:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009f14:	4b59      	ldr	r3, [pc, #356]	@ (800a07c <HAL_RCC_GetSysClockFreq+0x180>)
 8009f16:	689b      	ldr	r3, [r3, #8]
 8009f18:	f003 030c 	and.w	r3, r3, #12
 8009f1c:	2b08      	cmp	r3, #8
 8009f1e:	d00d      	beq.n	8009f3c <HAL_RCC_GetSysClockFreq+0x40>
 8009f20:	2b08      	cmp	r3, #8
 8009f22:	f200 80a1 	bhi.w	800a068 <HAL_RCC_GetSysClockFreq+0x16c>
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d002      	beq.n	8009f30 <HAL_RCC_GetSysClockFreq+0x34>
 8009f2a:	2b04      	cmp	r3, #4
 8009f2c:	d003      	beq.n	8009f36 <HAL_RCC_GetSysClockFreq+0x3a>
 8009f2e:	e09b      	b.n	800a068 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009f30:	4b53      	ldr	r3, [pc, #332]	@ (800a080 <HAL_RCC_GetSysClockFreq+0x184>)
 8009f32:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009f34:	e09b      	b.n	800a06e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009f36:	4b53      	ldr	r3, [pc, #332]	@ (800a084 <HAL_RCC_GetSysClockFreq+0x188>)
 8009f38:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009f3a:	e098      	b.n	800a06e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009f3c:	4b4f      	ldr	r3, [pc, #316]	@ (800a07c <HAL_RCC_GetSysClockFreq+0x180>)
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009f44:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009f46:	4b4d      	ldr	r3, [pc, #308]	@ (800a07c <HAL_RCC_GetSysClockFreq+0x180>)
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d028      	beq.n	8009fa4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009f52:	4b4a      	ldr	r3, [pc, #296]	@ (800a07c <HAL_RCC_GetSysClockFreq+0x180>)
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	099b      	lsrs	r3, r3, #6
 8009f58:	2200      	movs	r2, #0
 8009f5a:	623b      	str	r3, [r7, #32]
 8009f5c:	627a      	str	r2, [r7, #36]	@ 0x24
 8009f5e:	6a3b      	ldr	r3, [r7, #32]
 8009f60:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009f64:	2100      	movs	r1, #0
 8009f66:	4b47      	ldr	r3, [pc, #284]	@ (800a084 <HAL_RCC_GetSysClockFreq+0x188>)
 8009f68:	fb03 f201 	mul.w	r2, r3, r1
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	fb00 f303 	mul.w	r3, r0, r3
 8009f72:	4413      	add	r3, r2
 8009f74:	4a43      	ldr	r2, [pc, #268]	@ (800a084 <HAL_RCC_GetSysClockFreq+0x188>)
 8009f76:	fba0 1202 	umull	r1, r2, r0, r2
 8009f7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009f7c:	460a      	mov	r2, r1
 8009f7e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009f80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f82:	4413      	add	r3, r2
 8009f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f88:	2200      	movs	r2, #0
 8009f8a:	61bb      	str	r3, [r7, #24]
 8009f8c:	61fa      	str	r2, [r7, #28]
 8009f8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009f92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009f96:	f7f6 f9a3 	bl	80002e0 <__aeabi_uldivmod>
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fa2:	e053      	b.n	800a04c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009fa4:	4b35      	ldr	r3, [pc, #212]	@ (800a07c <HAL_RCC_GetSysClockFreq+0x180>)
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	099b      	lsrs	r3, r3, #6
 8009faa:	2200      	movs	r2, #0
 8009fac:	613b      	str	r3, [r7, #16]
 8009fae:	617a      	str	r2, [r7, #20]
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009fb6:	f04f 0b00 	mov.w	fp, #0
 8009fba:	4652      	mov	r2, sl
 8009fbc:	465b      	mov	r3, fp
 8009fbe:	f04f 0000 	mov.w	r0, #0
 8009fc2:	f04f 0100 	mov.w	r1, #0
 8009fc6:	0159      	lsls	r1, r3, #5
 8009fc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009fcc:	0150      	lsls	r0, r2, #5
 8009fce:	4602      	mov	r2, r0
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	ebb2 080a 	subs.w	r8, r2, sl
 8009fd6:	eb63 090b 	sbc.w	r9, r3, fp
 8009fda:	f04f 0200 	mov.w	r2, #0
 8009fde:	f04f 0300 	mov.w	r3, #0
 8009fe2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009fe6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009fea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009fee:	ebb2 0408 	subs.w	r4, r2, r8
 8009ff2:	eb63 0509 	sbc.w	r5, r3, r9
 8009ff6:	f04f 0200 	mov.w	r2, #0
 8009ffa:	f04f 0300 	mov.w	r3, #0
 8009ffe:	00eb      	lsls	r3, r5, #3
 800a000:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a004:	00e2      	lsls	r2, r4, #3
 800a006:	4614      	mov	r4, r2
 800a008:	461d      	mov	r5, r3
 800a00a:	eb14 030a 	adds.w	r3, r4, sl
 800a00e:	603b      	str	r3, [r7, #0]
 800a010:	eb45 030b 	adc.w	r3, r5, fp
 800a014:	607b      	str	r3, [r7, #4]
 800a016:	f04f 0200 	mov.w	r2, #0
 800a01a:	f04f 0300 	mov.w	r3, #0
 800a01e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a022:	4629      	mov	r1, r5
 800a024:	028b      	lsls	r3, r1, #10
 800a026:	4621      	mov	r1, r4
 800a028:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a02c:	4621      	mov	r1, r4
 800a02e:	028a      	lsls	r2, r1, #10
 800a030:	4610      	mov	r0, r2
 800a032:	4619      	mov	r1, r3
 800a034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a036:	2200      	movs	r2, #0
 800a038:	60bb      	str	r3, [r7, #8]
 800a03a:	60fa      	str	r2, [r7, #12]
 800a03c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a040:	f7f6 f94e 	bl	80002e0 <__aeabi_uldivmod>
 800a044:	4602      	mov	r2, r0
 800a046:	460b      	mov	r3, r1
 800a048:	4613      	mov	r3, r2
 800a04a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800a04c:	4b0b      	ldr	r3, [pc, #44]	@ (800a07c <HAL_RCC_GetSysClockFreq+0x180>)
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	0c1b      	lsrs	r3, r3, #16
 800a052:	f003 0303 	and.w	r3, r3, #3
 800a056:	3301      	adds	r3, #1
 800a058:	005b      	lsls	r3, r3, #1
 800a05a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800a05c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a05e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a060:	fbb2 f3f3 	udiv	r3, r2, r3
 800a064:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a066:	e002      	b.n	800a06e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a068:	4b05      	ldr	r3, [pc, #20]	@ (800a080 <HAL_RCC_GetSysClockFreq+0x184>)
 800a06a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a06c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a06e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800a070:	4618      	mov	r0, r3
 800a072:	3740      	adds	r7, #64	@ 0x40
 800a074:	46bd      	mov	sp, r7
 800a076:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a07a:	bf00      	nop
 800a07c:	40023800 	.word	0x40023800
 800a080:	00f42400 	.word	0x00f42400
 800a084:	017d7840 	.word	0x017d7840

0800a088 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a088:	b480      	push	{r7}
 800a08a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a08c:	4b03      	ldr	r3, [pc, #12]	@ (800a09c <HAL_RCC_GetHCLKFreq+0x14>)
 800a08e:	681b      	ldr	r3, [r3, #0]
}
 800a090:	4618      	mov	r0, r3
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr
 800a09a:	bf00      	nop
 800a09c:	20000018 	.word	0x20000018

0800a0a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a0a4:	f7ff fff0 	bl	800a088 <HAL_RCC_GetHCLKFreq>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	4b05      	ldr	r3, [pc, #20]	@ (800a0c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	0a9b      	lsrs	r3, r3, #10
 800a0b0:	f003 0307 	and.w	r3, r3, #7
 800a0b4:	4903      	ldr	r1, [pc, #12]	@ (800a0c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a0b6:	5ccb      	ldrb	r3, [r1, r3]
 800a0b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	bd80      	pop	{r7, pc}
 800a0c0:	40023800 	.word	0x40023800
 800a0c4:	08019d1c 	.word	0x08019d1c

0800a0c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a0cc:	f7ff ffdc 	bl	800a088 <HAL_RCC_GetHCLKFreq>
 800a0d0:	4602      	mov	r2, r0
 800a0d2:	4b05      	ldr	r3, [pc, #20]	@ (800a0e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a0d4:	689b      	ldr	r3, [r3, #8]
 800a0d6:	0b5b      	lsrs	r3, r3, #13
 800a0d8:	f003 0307 	and.w	r3, r3, #7
 800a0dc:	4903      	ldr	r1, [pc, #12]	@ (800a0ec <HAL_RCC_GetPCLK2Freq+0x24>)
 800a0de:	5ccb      	ldrb	r3, [r1, r3]
 800a0e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	40023800 	.word	0x40023800
 800a0ec:	08019d1c 	.word	0x08019d1c

0800a0f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	220f      	movs	r2, #15
 800a0fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a100:	4b12      	ldr	r3, [pc, #72]	@ (800a14c <HAL_RCC_GetClockConfig+0x5c>)
 800a102:	689b      	ldr	r3, [r3, #8]
 800a104:	f003 0203 	and.w	r2, r3, #3
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a10c:	4b0f      	ldr	r3, [pc, #60]	@ (800a14c <HAL_RCC_GetClockConfig+0x5c>)
 800a10e:	689b      	ldr	r3, [r3, #8]
 800a110:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a118:	4b0c      	ldr	r3, [pc, #48]	@ (800a14c <HAL_RCC_GetClockConfig+0x5c>)
 800a11a:	689b      	ldr	r3, [r3, #8]
 800a11c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800a124:	4b09      	ldr	r3, [pc, #36]	@ (800a14c <HAL_RCC_GetClockConfig+0x5c>)
 800a126:	689b      	ldr	r3, [r3, #8]
 800a128:	08db      	lsrs	r3, r3, #3
 800a12a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a132:	4b07      	ldr	r3, [pc, #28]	@ (800a150 <HAL_RCC_GetClockConfig+0x60>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f003 020f 	and.w	r2, r3, #15
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	601a      	str	r2, [r3, #0]
}
 800a13e:	bf00      	nop
 800a140:	370c      	adds	r7, #12
 800a142:	46bd      	mov	sp, r7
 800a144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a148:	4770      	bx	lr
 800a14a:	bf00      	nop
 800a14c:	40023800 	.word	0x40023800
 800a150:	40023c00 	.word	0x40023c00

0800a154 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b088      	sub	sp, #32
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a15c:	2300      	movs	r3, #0
 800a15e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800a160:	2300      	movs	r3, #0
 800a162:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800a164:	2300      	movs	r3, #0
 800a166:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800a168:	2300      	movs	r3, #0
 800a16a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800a16c:	2300      	movs	r3, #0
 800a16e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f003 0301 	and.w	r3, r3, #1
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d012      	beq.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a17c:	4b69      	ldr	r3, [pc, #420]	@ (800a324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a17e:	689b      	ldr	r3, [r3, #8]
 800a180:	4a68      	ldr	r2, [pc, #416]	@ (800a324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a182:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a186:	6093      	str	r3, [r2, #8]
 800a188:	4b66      	ldr	r3, [pc, #408]	@ (800a324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a18a:	689a      	ldr	r2, [r3, #8]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a190:	4964      	ldr	r1, [pc, #400]	@ (800a324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a192:	4313      	orrs	r3, r2
 800a194:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d101      	bne.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d017      	beq.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a1ae:	4b5d      	ldr	r3, [pc, #372]	@ (800a324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a1b4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1bc:	4959      	ldr	r1, [pc, #356]	@ (800a324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a1cc:	d101      	bne.n	800a1d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d101      	bne.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d017      	beq.n	800a21a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a1ea:	4b4e      	ldr	r3, [pc, #312]	@ (800a324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a1f0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1f8:	494a      	ldr	r1, [pc, #296]	@ (800a324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a204:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a208:	d101      	bne.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800a20a:	2301      	movs	r3, #1
 800a20c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a212:	2b00      	cmp	r3, #0
 800a214:	d101      	bne.n	800a21a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800a216:	2301      	movs	r3, #1
 800a218:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a222:	2b00      	cmp	r3, #0
 800a224:	d001      	beq.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800a226:	2301      	movs	r3, #1
 800a228:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f003 0320 	and.w	r3, r3, #32
 800a232:	2b00      	cmp	r3, #0
 800a234:	f000 808b 	beq.w	800a34e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a238:	4b3a      	ldr	r3, [pc, #232]	@ (800a324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a23a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a23c:	4a39      	ldr	r2, [pc, #228]	@ (800a324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a23e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a242:	6413      	str	r3, [r2, #64]	@ 0x40
 800a244:	4b37      	ldr	r3, [pc, #220]	@ (800a324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a248:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a24c:	60bb      	str	r3, [r7, #8]
 800a24e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a250:	4b35      	ldr	r3, [pc, #212]	@ (800a328 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a34      	ldr	r2, [pc, #208]	@ (800a328 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a256:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a25a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a25c:	f7fa ff84 	bl	8005168 <HAL_GetTick>
 800a260:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a262:	e008      	b.n	800a276 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a264:	f7fa ff80 	bl	8005168 <HAL_GetTick>
 800a268:	4602      	mov	r2, r0
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	1ad3      	subs	r3, r2, r3
 800a26e:	2b64      	cmp	r3, #100	@ 0x64
 800a270:	d901      	bls.n	800a276 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800a272:	2303      	movs	r3, #3
 800a274:	e357      	b.n	800a926 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a276:	4b2c      	ldr	r3, [pc, #176]	@ (800a328 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d0f0      	beq.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a282:	4b28      	ldr	r3, [pc, #160]	@ (800a324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a286:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a28a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d035      	beq.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a296:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a29a:	693a      	ldr	r2, [r7, #16]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d02e      	beq.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a2a0:	4b20      	ldr	r3, [pc, #128]	@ (800a324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a2a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a2aa:	4b1e      	ldr	r3, [pc, #120]	@ (800a324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2ae:	4a1d      	ldr	r2, [pc, #116]	@ (800a324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a2b4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a2b6:	4b1b      	ldr	r3, [pc, #108]	@ (800a324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2ba:	4a1a      	ldr	r2, [pc, #104]	@ (800a324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a2c0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800a2c2:	4a18      	ldr	r2, [pc, #96]	@ (800a324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a2c8:	4b16      	ldr	r3, [pc, #88]	@ (800a324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2cc:	f003 0301 	and.w	r3, r3, #1
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d114      	bne.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2d4:	f7fa ff48 	bl	8005168 <HAL_GetTick>
 800a2d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a2da:	e00a      	b.n	800a2f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a2dc:	f7fa ff44 	bl	8005168 <HAL_GetTick>
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	1ad3      	subs	r3, r2, r3
 800a2e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d901      	bls.n	800a2f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800a2ee:	2303      	movs	r3, #3
 800a2f0:	e319      	b.n	800a926 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a2f2:	4b0c      	ldr	r3, [pc, #48]	@ (800a324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2f6:	f003 0302 	and.w	r3, r3, #2
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d0ee      	beq.n	800a2dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a302:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a306:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a30a:	d111      	bne.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800a30c:	4b05      	ldr	r3, [pc, #20]	@ (800a324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a30e:	689b      	ldr	r3, [r3, #8]
 800a310:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800a318:	4b04      	ldr	r3, [pc, #16]	@ (800a32c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800a31a:	400b      	ands	r3, r1
 800a31c:	4901      	ldr	r1, [pc, #4]	@ (800a324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a31e:	4313      	orrs	r3, r2
 800a320:	608b      	str	r3, [r1, #8]
 800a322:	e00b      	b.n	800a33c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800a324:	40023800 	.word	0x40023800
 800a328:	40007000 	.word	0x40007000
 800a32c:	0ffffcff 	.word	0x0ffffcff
 800a330:	4baa      	ldr	r3, [pc, #680]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	4aa9      	ldr	r2, [pc, #676]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a336:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800a33a:	6093      	str	r3, [r2, #8]
 800a33c:	4ba7      	ldr	r3, [pc, #668]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a33e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a348:	49a4      	ldr	r1, [pc, #656]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a34a:	4313      	orrs	r3, r2
 800a34c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f003 0310 	and.w	r3, r3, #16
 800a356:	2b00      	cmp	r3, #0
 800a358:	d010      	beq.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a35a:	4ba0      	ldr	r3, [pc, #640]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a35c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a360:	4a9e      	ldr	r2, [pc, #632]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a362:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a366:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800a36a:	4b9c      	ldr	r3, [pc, #624]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a36c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a374:	4999      	ldr	r1, [pc, #612]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a376:	4313      	orrs	r3, r2
 800a378:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a384:	2b00      	cmp	r3, #0
 800a386:	d00a      	beq.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a388:	4b94      	ldr	r3, [pc, #592]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a38a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a38e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a396:	4991      	ldr	r1, [pc, #580]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a398:	4313      	orrs	r3, r2
 800a39a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d00a      	beq.n	800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a3aa:	4b8c      	ldr	r3, [pc, #560]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a3ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a3b8:	4988      	ldr	r1, [pc, #544]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d00a      	beq.n	800a3e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a3cc:	4b83      	ldr	r3, [pc, #524]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a3ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a3da:	4980      	ldr	r1, [pc, #512]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d00a      	beq.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a3ee:	4b7b      	ldr	r3, [pc, #492]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a3f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3f4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3fc:	4977      	ldr	r1, [pc, #476]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a3fe:	4313      	orrs	r3, r2
 800a400:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d00a      	beq.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a410:	4b72      	ldr	r3, [pc, #456]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a416:	f023 0203 	bic.w	r2, r3, #3
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a41e:	496f      	ldr	r1, [pc, #444]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a420:	4313      	orrs	r3, r2
 800a422:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d00a      	beq.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a432:	4b6a      	ldr	r3, [pc, #424]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a434:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a438:	f023 020c 	bic.w	r2, r3, #12
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a440:	4966      	ldr	r1, [pc, #408]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a442:	4313      	orrs	r3, r2
 800a444:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a450:	2b00      	cmp	r3, #0
 800a452:	d00a      	beq.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a454:	4b61      	ldr	r3, [pc, #388]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a45a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a462:	495e      	ldr	r1, [pc, #376]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a464:	4313      	orrs	r3, r2
 800a466:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a472:	2b00      	cmp	r3, #0
 800a474:	d00a      	beq.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a476:	4b59      	ldr	r3, [pc, #356]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a47c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a484:	4955      	ldr	r1, [pc, #340]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a486:	4313      	orrs	r3, r2
 800a488:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a494:	2b00      	cmp	r3, #0
 800a496:	d00a      	beq.n	800a4ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a498:	4b50      	ldr	r3, [pc, #320]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a49a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a49e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4a6:	494d      	ldr	r1, [pc, #308]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d00a      	beq.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800a4ba:	4b48      	ldr	r3, [pc, #288]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a4bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4c0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4c8:	4944      	ldr	r1, [pc, #272]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d00a      	beq.n	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800a4dc:	4b3f      	ldr	r3, [pc, #252]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a4de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4e2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4ea:	493c      	ldr	r1, [pc, #240]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d00a      	beq.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800a4fe:	4b37      	ldr	r3, [pc, #220]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a504:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a50c:	4933      	ldr	r1, [pc, #204]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a50e:	4313      	orrs	r3, r2
 800a510:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d00a      	beq.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a520:	4b2e      	ldr	r3, [pc, #184]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a526:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a52e:	492b      	ldr	r1, [pc, #172]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a530:	4313      	orrs	r3, r2
 800a532:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d011      	beq.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a542:	4b26      	ldr	r3, [pc, #152]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a548:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a550:	4922      	ldr	r1, [pc, #136]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a552:	4313      	orrs	r3, r2
 800a554:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a55c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a560:	d101      	bne.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800a562:	2301      	movs	r3, #1
 800a564:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f003 0308 	and.w	r3, r3, #8
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d001      	beq.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800a572:	2301      	movs	r3, #1
 800a574:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d00a      	beq.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a582:	4b16      	ldr	r3, [pc, #88]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a588:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a590:	4912      	ldr	r1, [pc, #72]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a592:	4313      	orrs	r3, r2
 800a594:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d00b      	beq.n	800a5bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a5a4:	4b0d      	ldr	r3, [pc, #52]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a5a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5aa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5b4:	4909      	ldr	r1, [pc, #36]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a5bc:	69fb      	ldr	r3, [r7, #28]
 800a5be:	2b01      	cmp	r3, #1
 800a5c0:	d006      	beq.n	800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	f000 80d9 	beq.w	800a782 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a5d0:	4b02      	ldr	r3, [pc, #8]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a01      	ldr	r2, [pc, #4]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a5d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a5da:	e001      	b.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800a5dc:	40023800 	.word	0x40023800
 800a5e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5e2:	f7fa fdc1 	bl	8005168 <HAL_GetTick>
 800a5e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a5e8:	e008      	b.n	800a5fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a5ea:	f7fa fdbd 	bl	8005168 <HAL_GetTick>
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	1ad3      	subs	r3, r2, r3
 800a5f4:	2b64      	cmp	r3, #100	@ 0x64
 800a5f6:	d901      	bls.n	800a5fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a5f8:	2303      	movs	r3, #3
 800a5fa:	e194      	b.n	800a926 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a5fc:	4b6c      	ldr	r3, [pc, #432]	@ (800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a604:	2b00      	cmp	r3, #0
 800a606:	d1f0      	bne.n	800a5ea <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f003 0301 	and.w	r3, r3, #1
 800a610:	2b00      	cmp	r3, #0
 800a612:	d021      	beq.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d11d      	bne.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a61c:	4b64      	ldr	r3, [pc, #400]	@ (800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a61e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a622:	0c1b      	lsrs	r3, r3, #16
 800a624:	f003 0303 	and.w	r3, r3, #3
 800a628:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a62a:	4b61      	ldr	r3, [pc, #388]	@ (800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a62c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a630:	0e1b      	lsrs	r3, r3, #24
 800a632:	f003 030f 	and.w	r3, r3, #15
 800a636:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	019a      	lsls	r2, r3, #6
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	041b      	lsls	r3, r3, #16
 800a642:	431a      	orrs	r2, r3
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	061b      	lsls	r3, r3, #24
 800a648:	431a      	orrs	r2, r3
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	689b      	ldr	r3, [r3, #8]
 800a64e:	071b      	lsls	r3, r3, #28
 800a650:	4957      	ldr	r1, [pc, #348]	@ (800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a652:	4313      	orrs	r3, r2
 800a654:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a660:	2b00      	cmp	r3, #0
 800a662:	d004      	beq.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a668:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a66c:	d00a      	beq.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a676:	2b00      	cmp	r3, #0
 800a678:	d02e      	beq.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a67e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a682:	d129      	bne.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a684:	4b4a      	ldr	r3, [pc, #296]	@ (800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a686:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a68a:	0c1b      	lsrs	r3, r3, #16
 800a68c:	f003 0303 	and.w	r3, r3, #3
 800a690:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a692:	4b47      	ldr	r3, [pc, #284]	@ (800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a694:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a698:	0f1b      	lsrs	r3, r3, #28
 800a69a:	f003 0307 	and.w	r3, r3, #7
 800a69e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	019a      	lsls	r2, r3, #6
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	041b      	lsls	r3, r3, #16
 800a6aa:	431a      	orrs	r2, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	68db      	ldr	r3, [r3, #12]
 800a6b0:	061b      	lsls	r3, r3, #24
 800a6b2:	431a      	orrs	r2, r3
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	071b      	lsls	r3, r3, #28
 800a6b8:	493d      	ldr	r1, [pc, #244]	@ (800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a6c0:	4b3b      	ldr	r3, [pc, #236]	@ (800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a6c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a6c6:	f023 021f 	bic.w	r2, r3, #31
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6ce:	3b01      	subs	r3, #1
 800a6d0:	4937      	ldr	r1, [pc, #220]	@ (800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d01d      	beq.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a6e4:	4b32      	ldr	r3, [pc, #200]	@ (800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a6e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6ea:	0e1b      	lsrs	r3, r3, #24
 800a6ec:	f003 030f 	and.w	r3, r3, #15
 800a6f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a6f2:	4b2f      	ldr	r3, [pc, #188]	@ (800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a6f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6f8:	0f1b      	lsrs	r3, r3, #28
 800a6fa:	f003 0307 	and.w	r3, r3, #7
 800a6fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	019a      	lsls	r2, r3, #6
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	691b      	ldr	r3, [r3, #16]
 800a70a:	041b      	lsls	r3, r3, #16
 800a70c:	431a      	orrs	r2, r3
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	061b      	lsls	r3, r3, #24
 800a712:	431a      	orrs	r2, r3
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	071b      	lsls	r3, r3, #28
 800a718:	4925      	ldr	r1, [pc, #148]	@ (800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a71a:	4313      	orrs	r3, r2
 800a71c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d011      	beq.n	800a750 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	019a      	lsls	r2, r3, #6
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	691b      	ldr	r3, [r3, #16]
 800a736:	041b      	lsls	r3, r3, #16
 800a738:	431a      	orrs	r2, r3
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	061b      	lsls	r3, r3, #24
 800a740:	431a      	orrs	r2, r3
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	689b      	ldr	r3, [r3, #8]
 800a746:	071b      	lsls	r3, r3, #28
 800a748:	4919      	ldr	r1, [pc, #100]	@ (800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a74a:	4313      	orrs	r3, r2
 800a74c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a750:	4b17      	ldr	r3, [pc, #92]	@ (800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a16      	ldr	r2, [pc, #88]	@ (800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a756:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a75a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a75c:	f7fa fd04 	bl	8005168 <HAL_GetTick>
 800a760:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a762:	e008      	b.n	800a776 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a764:	f7fa fd00 	bl	8005168 <HAL_GetTick>
 800a768:	4602      	mov	r2, r0
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	1ad3      	subs	r3, r2, r3
 800a76e:	2b64      	cmp	r3, #100	@ 0x64
 800a770:	d901      	bls.n	800a776 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a772:	2303      	movs	r3, #3
 800a774:	e0d7      	b.n	800a926 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a776:	4b0e      	ldr	r3, [pc, #56]	@ (800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d0f0      	beq.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800a782:	69bb      	ldr	r3, [r7, #24]
 800a784:	2b01      	cmp	r3, #1
 800a786:	f040 80cd 	bne.w	800a924 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a78a:	4b09      	ldr	r3, [pc, #36]	@ (800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4a08      	ldr	r2, [pc, #32]	@ (800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a790:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a794:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a796:	f7fa fce7 	bl	8005168 <HAL_GetTick>
 800a79a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a79c:	e00a      	b.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a79e:	f7fa fce3 	bl	8005168 <HAL_GetTick>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	1ad3      	subs	r3, r2, r3
 800a7a8:	2b64      	cmp	r3, #100	@ 0x64
 800a7aa:	d903      	bls.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a7ac:	2303      	movs	r3, #3
 800a7ae:	e0ba      	b.n	800a926 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800a7b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a7b4:	4b5e      	ldr	r3, [pc, #376]	@ (800a930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7c0:	d0ed      	beq.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d003      	beq.n	800a7d6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d009      	beq.n	800a7ea <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d02e      	beq.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d12a      	bne.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a7ea:	4b51      	ldr	r3, [pc, #324]	@ (800a930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a7ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7f0:	0c1b      	lsrs	r3, r3, #16
 800a7f2:	f003 0303 	and.w	r3, r3, #3
 800a7f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a7f8:	4b4d      	ldr	r3, [pc, #308]	@ (800a930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a7fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7fe:	0f1b      	lsrs	r3, r3, #28
 800a800:	f003 0307 	and.w	r3, r3, #7
 800a804:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	695b      	ldr	r3, [r3, #20]
 800a80a:	019a      	lsls	r2, r3, #6
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	041b      	lsls	r3, r3, #16
 800a810:	431a      	orrs	r2, r3
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	699b      	ldr	r3, [r3, #24]
 800a816:	061b      	lsls	r3, r3, #24
 800a818:	431a      	orrs	r2, r3
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	071b      	lsls	r3, r3, #28
 800a81e:	4944      	ldr	r1, [pc, #272]	@ (800a930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a820:	4313      	orrs	r3, r2
 800a822:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a826:	4b42      	ldr	r3, [pc, #264]	@ (800a930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a828:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a82c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a834:	3b01      	subs	r3, #1
 800a836:	021b      	lsls	r3, r3, #8
 800a838:	493d      	ldr	r1, [pc, #244]	@ (800a930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a83a:	4313      	orrs	r3, r2
 800a83c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d022      	beq.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a850:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a854:	d11d      	bne.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a856:	4b36      	ldr	r3, [pc, #216]	@ (800a930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a85c:	0e1b      	lsrs	r3, r3, #24
 800a85e:	f003 030f 	and.w	r3, r3, #15
 800a862:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a864:	4b32      	ldr	r3, [pc, #200]	@ (800a930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a86a:	0f1b      	lsrs	r3, r3, #28
 800a86c:	f003 0307 	and.w	r3, r3, #7
 800a870:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	695b      	ldr	r3, [r3, #20]
 800a876:	019a      	lsls	r2, r3, #6
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6a1b      	ldr	r3, [r3, #32]
 800a87c:	041b      	lsls	r3, r3, #16
 800a87e:	431a      	orrs	r2, r3
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	061b      	lsls	r3, r3, #24
 800a884:	431a      	orrs	r2, r3
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	071b      	lsls	r3, r3, #28
 800a88a:	4929      	ldr	r1, [pc, #164]	@ (800a930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a88c:	4313      	orrs	r3, r2
 800a88e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f003 0308 	and.w	r3, r3, #8
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d028      	beq.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a89e:	4b24      	ldr	r3, [pc, #144]	@ (800a930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a8a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8a4:	0e1b      	lsrs	r3, r3, #24
 800a8a6:	f003 030f 	and.w	r3, r3, #15
 800a8aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a8ac:	4b20      	ldr	r3, [pc, #128]	@ (800a930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a8ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8b2:	0c1b      	lsrs	r3, r3, #16
 800a8b4:	f003 0303 	and.w	r3, r3, #3
 800a8b8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	695b      	ldr	r3, [r3, #20]
 800a8be:	019a      	lsls	r2, r3, #6
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	041b      	lsls	r3, r3, #16
 800a8c4:	431a      	orrs	r2, r3
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	061b      	lsls	r3, r3, #24
 800a8ca:	431a      	orrs	r2, r3
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	69db      	ldr	r3, [r3, #28]
 800a8d0:	071b      	lsls	r3, r3, #28
 800a8d2:	4917      	ldr	r1, [pc, #92]	@ (800a930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a8da:	4b15      	ldr	r3, [pc, #84]	@ (800a930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a8dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a8e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8e8:	4911      	ldr	r1, [pc, #68]	@ (800a930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a8f0:	4b0f      	ldr	r3, [pc, #60]	@ (800a930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4a0e      	ldr	r2, [pc, #56]	@ (800a930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a8f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a8fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a8fc:	f7fa fc34 	bl	8005168 <HAL_GetTick>
 800a900:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a902:	e008      	b.n	800a916 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a904:	f7fa fc30 	bl	8005168 <HAL_GetTick>
 800a908:	4602      	mov	r2, r0
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	1ad3      	subs	r3, r2, r3
 800a90e:	2b64      	cmp	r3, #100	@ 0x64
 800a910:	d901      	bls.n	800a916 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a912:	2303      	movs	r3, #3
 800a914:	e007      	b.n	800a926 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a916:	4b06      	ldr	r3, [pc, #24]	@ (800a930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a91e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a922:	d1ef      	bne.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800a924:	2300      	movs	r3, #0
}
 800a926:	4618      	mov	r0, r3
 800a928:	3720      	adds	r7, #32
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	bf00      	nop
 800a930:	40023800 	.word	0x40023800

0800a934 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a934:	b480      	push	{r7}
 800a936:	b087      	sub	sp, #28
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800a93c:	2300      	movs	r3, #0
 800a93e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800a940:	2300      	movs	r3, #0
 800a942:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800a944:	2300      	movs	r3, #0
 800a946:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800a948:	2300      	movs	r3, #0
 800a94a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a952:	f040 808d 	bne.w	800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800a956:	4b93      	ldr	r3, [pc, #588]	@ (800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a958:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a95c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800a964:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a96c:	d07c      	beq.n	800aa68 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a974:	d87b      	bhi.n	800aa6e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d004      	beq.n	800a986 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a982:	d039      	beq.n	800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800a984:	e073      	b.n	800aa6e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800a986:	4b87      	ldr	r3, [pc, #540]	@ (800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d108      	bne.n	800a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a992:	4b84      	ldr	r3, [pc, #528]	@ (800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a994:	685b      	ldr	r3, [r3, #4]
 800a996:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a99a:	4a83      	ldr	r2, [pc, #524]	@ (800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a99c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9a0:	613b      	str	r3, [r7, #16]
 800a9a2:	e007      	b.n	800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800a9a4:	4b7f      	ldr	r3, [pc, #508]	@ (800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a9ac:	4a7f      	ldr	r2, [pc, #508]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a9ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9b2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800a9b4:	4b7b      	ldr	r3, [pc, #492]	@ (800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a9b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9ba:	0e1b      	lsrs	r3, r3, #24
 800a9bc:	f003 030f 	and.w	r3, r3, #15
 800a9c0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800a9c2:	4b78      	ldr	r3, [pc, #480]	@ (800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a9c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9c8:	099b      	lsrs	r3, r3, #6
 800a9ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9ce:	693a      	ldr	r2, [r7, #16]
 800a9d0:	fb03 f202 	mul.w	r2, r3, r2
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9da:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800a9dc:	4b71      	ldr	r3, [pc, #452]	@ (800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a9de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a9e2:	0a1b      	lsrs	r3, r3, #8
 800a9e4:	f003 031f 	and.w	r3, r3, #31
 800a9e8:	3301      	adds	r3, #1
 800a9ea:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800a9ec:	697a      	ldr	r2, [r7, #20]
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9f4:	617b      	str	r3, [r7, #20]
        break;
 800a9f6:	e03b      	b.n	800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800a9f8:	4b6a      	ldr	r3, [pc, #424]	@ (800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a9fa:	685b      	ldr	r3, [r3, #4]
 800a9fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d108      	bne.n	800aa16 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800aa04:	4b67      	ldr	r3, [pc, #412]	@ (800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aa0c:	4a66      	ldr	r2, [pc, #408]	@ (800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800aa0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa12:	613b      	str	r3, [r7, #16]
 800aa14:	e007      	b.n	800aa26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800aa16:	4b63      	ldr	r3, [pc, #396]	@ (800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aa1e:	4a63      	ldr	r2, [pc, #396]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aa20:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa24:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800aa26:	4b5f      	ldr	r3, [pc, #380]	@ (800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aa28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa2c:	0e1b      	lsrs	r3, r3, #24
 800aa2e:	f003 030f 	and.w	r3, r3, #15
 800aa32:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800aa34:	4b5b      	ldr	r3, [pc, #364]	@ (800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aa36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa3a:	099b      	lsrs	r3, r3, #6
 800aa3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa40:	693a      	ldr	r2, [r7, #16]
 800aa42:	fb03 f202 	mul.w	r2, r3, r2
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa4c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800aa4e:	4b55      	ldr	r3, [pc, #340]	@ (800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aa50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aa54:	f003 031f 	and.w	r3, r3, #31
 800aa58:	3301      	adds	r3, #1
 800aa5a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800aa5c:	697a      	ldr	r2, [r7, #20]
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa64:	617b      	str	r3, [r7, #20]
        break;
 800aa66:	e003      	b.n	800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800aa68:	4b51      	ldr	r3, [pc, #324]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800aa6a:	617b      	str	r3, [r7, #20]
        break;
 800aa6c:	e000      	b.n	800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800aa6e:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa76:	f040 808d 	bne.w	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800aa7a:	4b4a      	ldr	r3, [pc, #296]	@ (800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aa7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aa80:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800aa88:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800aa90:	d07c      	beq.n	800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800aa98:	d87b      	bhi.n	800ab92 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d004      	beq.n	800aaaa <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aaa6:	d039      	beq.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800aaa8:	e073      	b.n	800ab92 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800aaaa:	4b3e      	ldr	r3, [pc, #248]	@ (800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d108      	bne.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800aab6:	4b3b      	ldr	r3, [pc, #236]	@ (800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aabe:	4a3a      	ldr	r2, [pc, #232]	@ (800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800aac0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aac4:	613b      	str	r3, [r7, #16]
 800aac6:	e007      	b.n	800aad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800aac8:	4b36      	ldr	r3, [pc, #216]	@ (800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aad0:	4a36      	ldr	r2, [pc, #216]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aad2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aad6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800aad8:	4b32      	ldr	r3, [pc, #200]	@ (800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aade:	0e1b      	lsrs	r3, r3, #24
 800aae0:	f003 030f 	and.w	r3, r3, #15
 800aae4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800aae6:	4b2f      	ldr	r3, [pc, #188]	@ (800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aaec:	099b      	lsrs	r3, r3, #6
 800aaee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaf2:	693a      	ldr	r2, [r7, #16]
 800aaf4:	fb03 f202 	mul.w	r2, r3, r2
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	fbb2 f3f3 	udiv	r3, r2, r3
 800aafe:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800ab00:	4b28      	ldr	r3, [pc, #160]	@ (800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ab02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ab06:	0a1b      	lsrs	r3, r3, #8
 800ab08:	f003 031f 	and.w	r3, r3, #31
 800ab0c:	3301      	adds	r3, #1
 800ab0e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800ab10:	697a      	ldr	r2, [r7, #20]
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab18:	617b      	str	r3, [r7, #20]
        break;
 800ab1a:	e03b      	b.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800ab1c:	4b21      	ldr	r3, [pc, #132]	@ (800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ab1e:	685b      	ldr	r3, [r3, #4]
 800ab20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d108      	bne.n	800ab3a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800ab28:	4b1e      	ldr	r3, [pc, #120]	@ (800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ab2a:	685b      	ldr	r3, [r3, #4]
 800ab2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ab30:	4a1d      	ldr	r2, [pc, #116]	@ (800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800ab32:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab36:	613b      	str	r3, [r7, #16]
 800ab38:	e007      	b.n	800ab4a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800ab3a:	4b1a      	ldr	r3, [pc, #104]	@ (800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ab42:	4a1a      	ldr	r2, [pc, #104]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ab44:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab48:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800ab4a:	4b16      	ldr	r3, [pc, #88]	@ (800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ab4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab50:	0e1b      	lsrs	r3, r3, #24
 800ab52:	f003 030f 	and.w	r3, r3, #15
 800ab56:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800ab58:	4b12      	ldr	r3, [pc, #72]	@ (800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ab5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab5e:	099b      	lsrs	r3, r3, #6
 800ab60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab64:	693a      	ldr	r2, [r7, #16]
 800ab66:	fb03 f202 	mul.w	r2, r3, r2
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab70:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800ab72:	4b0c      	ldr	r3, [pc, #48]	@ (800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ab74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ab78:	f003 031f 	and.w	r3, r3, #31
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800ab80:	697a      	ldr	r2, [r7, #20]
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab88:	617b      	str	r3, [r7, #20]
        break;
 800ab8a:	e003      	b.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 800ab8c:	4b08      	ldr	r3, [pc, #32]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800ab8e:	617b      	str	r3, [r7, #20]
        break;
 800ab90:	e000      	b.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800ab92:	bf00      	nop
      }
    }
  }

  return frequency;
 800ab94:	697b      	ldr	r3, [r7, #20]
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	371c      	adds	r7, #28
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr
 800aba2:	bf00      	nop
 800aba4:	40023800 	.word	0x40023800
 800aba8:	00f42400 	.word	0x00f42400
 800abac:	017d7840 	.word	0x017d7840
 800abb0:	00bb8000 	.word	0x00bb8000

0800abb4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b084      	sub	sp, #16
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d101      	bne.n	800abc6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800abc2:	2301      	movs	r3, #1
 800abc4:	e071      	b.n	800acaa <HAL_RTC_Init+0xf6>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	7f5b      	ldrb	r3, [r3, #29]
 800abca:	b2db      	uxtb	r3, r3
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d105      	bne.n	800abdc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2200      	movs	r2, #0
 800abd4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f7f9 f974 	bl	8003ec4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2202      	movs	r2, #2
 800abe0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	68db      	ldr	r3, [r3, #12]
 800abe8:	f003 0310 	and.w	r3, r3, #16
 800abec:	2b10      	cmp	r3, #16
 800abee:	d053      	beq.n	800ac98 <HAL_RTC_Init+0xe4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	22ca      	movs	r2, #202	@ 0xca
 800abf6:	625a      	str	r2, [r3, #36]	@ 0x24
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	2253      	movs	r2, #83	@ 0x53
 800abfe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f000 fb75 	bl	800b2f0 <RTC_EnterInitMode>
 800ac06:	4603      	mov	r3, r0
 800ac08:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800ac0a:	7bfb      	ldrb	r3, [r7, #15]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d12a      	bne.n	800ac66 <HAL_RTC_Init+0xb2>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	6899      	ldr	r1, [r3, #8]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681a      	ldr	r2, [r3, #0]
 800ac1a:	4b26      	ldr	r3, [pc, #152]	@ (800acb4 <HAL_RTC_Init+0x100>)
 800ac1c:	400b      	ands	r3, r1
 800ac1e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	6899      	ldr	r1, [r3, #8]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	685a      	ldr	r2, [r3, #4]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	691b      	ldr	r3, [r3, #16]
 800ac2e:	431a      	orrs	r2, r3
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	695b      	ldr	r3, [r3, #20]
 800ac34:	431a      	orrs	r2, r3
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	430a      	orrs	r2, r1
 800ac3c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	68d2      	ldr	r2, [r2, #12]
 800ac46:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	6919      	ldr	r1, [r3, #16]
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	041a      	lsls	r2, r3, #16
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	430a      	orrs	r2, r1
 800ac5a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f000 fb7e 	bl	800b35e <RTC_ExitInitMode>
 800ac62:	4603      	mov	r3, r0
 800ac64:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800ac66:	7bfb      	ldrb	r3, [r7, #15]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d110      	bne.n	800ac8e <HAL_RTC_Init+0xda>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f022 0208 	bic.w	r2, r2, #8
 800ac7a:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	699a      	ldr	r2, [r3, #24]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	430a      	orrs	r2, r1
 800ac8c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	22ff      	movs	r2, #255	@ 0xff
 800ac94:	625a      	str	r2, [r3, #36]	@ 0x24
 800ac96:	e001      	b.n	800ac9c <HAL_RTC_Init+0xe8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800ac9c:	7bfb      	ldrb	r3, [r7, #15]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d102      	bne.n	800aca8 <HAL_RTC_Init+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2201      	movs	r2, #1
 800aca6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800aca8:	7bfb      	ldrb	r3, [r7, #15]
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3710      	adds	r7, #16
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop
 800acb4:	ff8fffbf 	.word	0xff8fffbf

0800acb8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800acb8:	b590      	push	{r4, r7, lr}
 800acba:	b087      	sub	sp, #28
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	60f8      	str	r0, [r7, #12]
 800acc0:	60b9      	str	r1, [r7, #8]
 800acc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800acc4:	2300      	movs	r3, #0
 800acc6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	7f1b      	ldrb	r3, [r3, #28]
 800accc:	2b01      	cmp	r3, #1
 800acce:	d101      	bne.n	800acd4 <HAL_RTC_SetTime+0x1c>
 800acd0:	2302      	movs	r3, #2
 800acd2:	e085      	b.n	800ade0 <HAL_RTC_SetTime+0x128>
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	2201      	movs	r2, #1
 800acd8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	2202      	movs	r2, #2
 800acde:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d126      	bne.n	800ad34 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	689b      	ldr	r3, [r3, #8]
 800acec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d102      	bne.n	800acfa <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	2200      	movs	r2, #0
 800acf8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	4618      	mov	r0, r3
 800ad00:	f000 fb52 	bl	800b3a8 <RTC_ByteToBcd2>
 800ad04:	4603      	mov	r3, r0
 800ad06:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	785b      	ldrb	r3, [r3, #1]
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f000 fb4b 	bl	800b3a8 <RTC_ByteToBcd2>
 800ad12:	4603      	mov	r3, r0
 800ad14:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ad16:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	789b      	ldrb	r3, [r3, #2]
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f000 fb43 	bl	800b3a8 <RTC_ByteToBcd2>
 800ad22:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ad24:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	78db      	ldrb	r3, [r3, #3]
 800ad2c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	617b      	str	r3, [r7, #20]
 800ad32:	e018      	b.n	800ad66 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	689b      	ldr	r3, [r3, #8]
 800ad3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d102      	bne.n	800ad48 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	2200      	movs	r2, #0
 800ad46:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	785b      	ldrb	r3, [r3, #1]
 800ad52:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800ad54:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800ad56:	68ba      	ldr	r2, [r7, #8]
 800ad58:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800ad5a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	78db      	ldrb	r3, [r3, #3]
 800ad60:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800ad62:	4313      	orrs	r3, r2
 800ad64:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	22ca      	movs	r2, #202	@ 0xca
 800ad6c:	625a      	str	r2, [r3, #36]	@ 0x24
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	2253      	movs	r2, #83	@ 0x53
 800ad74:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ad76:	68f8      	ldr	r0, [r7, #12]
 800ad78:	f000 faba 	bl	800b2f0 <RTC_EnterInitMode>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800ad80:	7cfb      	ldrb	r3, [r7, #19]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d11e      	bne.n	800adc4 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681a      	ldr	r2, [r3, #0]
 800ad8a:	6979      	ldr	r1, [r7, #20]
 800ad8c:	4b16      	ldr	r3, [pc, #88]	@ (800ade8 <HAL_RTC_SetTime+0x130>)
 800ad8e:	400b      	ands	r3, r1
 800ad90:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	689a      	ldr	r2, [r3, #8]
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800ada0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	6899      	ldr	r1, [r3, #8]
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	68da      	ldr	r2, [r3, #12]
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	691b      	ldr	r3, [r3, #16]
 800adb0:	431a      	orrs	r2, r3
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	430a      	orrs	r2, r1
 800adb8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800adba:	68f8      	ldr	r0, [r7, #12]
 800adbc:	f000 facf 	bl	800b35e <RTC_ExitInitMode>
 800adc0:	4603      	mov	r3, r0
 800adc2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800adc4:	7cfb      	ldrb	r3, [r7, #19]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d102      	bne.n	800add0 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2201      	movs	r2, #1
 800adce:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	22ff      	movs	r2, #255	@ 0xff
 800add6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2200      	movs	r2, #0
 800addc:	771a      	strb	r2, [r3, #28]

  return status;
 800adde:	7cfb      	ldrb	r3, [r7, #19]
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	371c      	adds	r7, #28
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd90      	pop	{r4, r7, pc}
 800ade8:	007f7f7f 	.word	0x007f7f7f

0800adec <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b086      	sub	sp, #24
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	60f8      	str	r0, [r7, #12]
 800adf4:	60b9      	str	r1, [r7, #8]
 800adf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800adf8:	2300      	movs	r3, #0
 800adfa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	691b      	ldr	r3, [r3, #16]
 800ae0c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	681a      	ldr	r2, [r3, #0]
 800ae1a:	4b22      	ldr	r3, [pc, #136]	@ (800aea4 <HAL_RTC_GetTime+0xb8>)
 800ae1c:	4013      	ands	r3, r2
 800ae1e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	0c1b      	lsrs	r3, r3, #16
 800ae24:	b2db      	uxtb	r3, r3
 800ae26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ae2a:	b2da      	uxtb	r2, r3
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	0a1b      	lsrs	r3, r3, #8
 800ae34:	b2db      	uxtb	r3, r3
 800ae36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae3a:	b2da      	uxtb	r2, r3
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	b2db      	uxtb	r3, r3
 800ae44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae48:	b2da      	uxtb	r2, r3
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	0d9b      	lsrs	r3, r3, #22
 800ae52:	b2db      	uxtb	r3, r3
 800ae54:	f003 0301 	and.w	r3, r3, #1
 800ae58:	b2da      	uxtb	r2, r3
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d11a      	bne.n	800ae9a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f000 fabb 	bl	800b3e4 <RTC_Bcd2ToByte>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	461a      	mov	r2, r3
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	785b      	ldrb	r3, [r3, #1]
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f000 fab2 	bl	800b3e4 <RTC_Bcd2ToByte>
 800ae80:	4603      	mov	r3, r0
 800ae82:	461a      	mov	r2, r3
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	789b      	ldrb	r3, [r3, #2]
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f000 faa9 	bl	800b3e4 <RTC_Bcd2ToByte>
 800ae92:	4603      	mov	r3, r0
 800ae94:	461a      	mov	r2, r3
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800ae9a:	2300      	movs	r3, #0
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3718      	adds	r7, #24
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}
 800aea4:	007f7f7f 	.word	0x007f7f7f

0800aea8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800aea8:	b590      	push	{r4, r7, lr}
 800aeaa:	b087      	sub	sp, #28
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	60f8      	str	r0, [r7, #12]
 800aeb0:	60b9      	str	r1, [r7, #8]
 800aeb2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	7f1b      	ldrb	r3, [r3, #28]
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d101      	bne.n	800aec4 <HAL_RTC_SetDate+0x1c>
 800aec0:	2302      	movs	r3, #2
 800aec2:	e06f      	b.n	800afa4 <HAL_RTC_SetDate+0xfc>
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2201      	movs	r2, #1
 800aec8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2202      	movs	r2, #2
 800aece:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d10e      	bne.n	800aef4 <HAL_RTC_SetDate+0x4c>
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	785b      	ldrb	r3, [r3, #1]
 800aeda:	f003 0310 	and.w	r3, r3, #16
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d008      	beq.n	800aef4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	785b      	ldrb	r3, [r3, #1]
 800aee6:	f023 0310 	bic.w	r3, r3, #16
 800aeea:	b2db      	uxtb	r3, r3
 800aeec:	330a      	adds	r3, #10
 800aeee:	b2da      	uxtb	r2, r3
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d11c      	bne.n	800af34 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	78db      	ldrb	r3, [r3, #3]
 800aefe:	4618      	mov	r0, r3
 800af00:	f000 fa52 	bl	800b3a8 <RTC_ByteToBcd2>
 800af04:	4603      	mov	r3, r0
 800af06:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	785b      	ldrb	r3, [r3, #1]
 800af0c:	4618      	mov	r0, r3
 800af0e:	f000 fa4b 	bl	800b3a8 <RTC_ByteToBcd2>
 800af12:	4603      	mov	r3, r0
 800af14:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800af16:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	789b      	ldrb	r3, [r3, #2]
 800af1c:	4618      	mov	r0, r3
 800af1e:	f000 fa43 	bl	800b3a8 <RTC_ByteToBcd2>
 800af22:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800af24:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800af2e:	4313      	orrs	r3, r2
 800af30:	617b      	str	r3, [r7, #20]
 800af32:	e00e      	b.n	800af52 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	78db      	ldrb	r3, [r3, #3]
 800af38:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	785b      	ldrb	r3, [r3, #1]
 800af3e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800af40:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800af42:	68ba      	ldr	r2, [r7, #8]
 800af44:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800af46:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	781b      	ldrb	r3, [r3, #0]
 800af4c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800af4e:	4313      	orrs	r3, r2
 800af50:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	22ca      	movs	r2, #202	@ 0xca
 800af58:	625a      	str	r2, [r3, #36]	@ 0x24
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	2253      	movs	r2, #83	@ 0x53
 800af60:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800af62:	68f8      	ldr	r0, [r7, #12]
 800af64:	f000 f9c4 	bl	800b2f0 <RTC_EnterInitMode>
 800af68:	4603      	mov	r3, r0
 800af6a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800af6c:	7cfb      	ldrb	r3, [r7, #19]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d10a      	bne.n	800af88 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681a      	ldr	r2, [r3, #0]
 800af76:	6979      	ldr	r1, [r7, #20]
 800af78:	4b0c      	ldr	r3, [pc, #48]	@ (800afac <HAL_RTC_SetDate+0x104>)
 800af7a:	400b      	ands	r3, r1
 800af7c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800af7e:	68f8      	ldr	r0, [r7, #12]
 800af80:	f000 f9ed 	bl	800b35e <RTC_ExitInitMode>
 800af84:	4603      	mov	r3, r0
 800af86:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800af88:	7cfb      	ldrb	r3, [r7, #19]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d102      	bne.n	800af94 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2201      	movs	r2, #1
 800af92:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	22ff      	movs	r2, #255	@ 0xff
 800af9a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	2200      	movs	r2, #0
 800afa0:	771a      	strb	r2, [r3, #28]

  return status;
 800afa2:	7cfb      	ldrb	r3, [r7, #19]
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	371c      	adds	r7, #28
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd90      	pop	{r4, r7, pc}
 800afac:	00ffff3f 	.word	0x00ffff3f

0800afb0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b086      	sub	sp, #24
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	60f8      	str	r0, [r7, #12]
 800afb8:	60b9      	str	r1, [r7, #8]
 800afba:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800afbc:	2300      	movs	r3, #0
 800afbe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	685a      	ldr	r2, [r3, #4]
 800afc6:	4b21      	ldr	r3, [pc, #132]	@ (800b04c <HAL_RTC_GetDate+0x9c>)
 800afc8:	4013      	ands	r3, r2
 800afca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	0c1b      	lsrs	r3, r3, #16
 800afd0:	b2da      	uxtb	r2, r3
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	0a1b      	lsrs	r3, r3, #8
 800afda:	b2db      	uxtb	r3, r3
 800afdc:	f003 031f 	and.w	r3, r3, #31
 800afe0:	b2da      	uxtb	r2, r3
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800afee:	b2da      	uxtb	r2, r3
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	0b5b      	lsrs	r3, r3, #13
 800aff8:	b2db      	uxtb	r3, r3
 800affa:	f003 0307 	and.w	r3, r3, #7
 800affe:	b2da      	uxtb	r2, r3
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d11a      	bne.n	800b040 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	78db      	ldrb	r3, [r3, #3]
 800b00e:	4618      	mov	r0, r3
 800b010:	f000 f9e8 	bl	800b3e4 <RTC_Bcd2ToByte>
 800b014:	4603      	mov	r3, r0
 800b016:	461a      	mov	r2, r3
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	785b      	ldrb	r3, [r3, #1]
 800b020:	4618      	mov	r0, r3
 800b022:	f000 f9df 	bl	800b3e4 <RTC_Bcd2ToByte>
 800b026:	4603      	mov	r3, r0
 800b028:	461a      	mov	r2, r3
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	789b      	ldrb	r3, [r3, #2]
 800b032:	4618      	mov	r0, r3
 800b034:	f000 f9d6 	bl	800b3e4 <RTC_Bcd2ToByte>
 800b038:	4603      	mov	r3, r0
 800b03a:	461a      	mov	r2, r3
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800b040:	2300      	movs	r3, #0
}
 800b042:	4618      	mov	r0, r3
 800b044:	3718      	adds	r7, #24
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}
 800b04a:	bf00      	nop
 800b04c:	00ffff3f 	.word	0x00ffff3f

0800b050 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800b050:	b590      	push	{r4, r7, lr}
 800b052:	b089      	sub	sp, #36	@ 0x24
 800b054:	af00      	add	r7, sp, #0
 800b056:	60f8      	str	r0, [r7, #12]
 800b058:	60b9      	str	r1, [r7, #8]
 800b05a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800b05c:	2300      	movs	r3, #0
 800b05e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800b060:	2300      	movs	r3, #0
 800b062:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800b064:	2300      	movs	r3, #0
 800b066:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	7f1b      	ldrb	r3, [r3, #28]
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	d101      	bne.n	800b074 <HAL_RTC_SetAlarm+0x24>
 800b070:	2302      	movs	r3, #2
 800b072:	e113      	b.n	800b29c <HAL_RTC_SetAlarm+0x24c>
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2201      	movs	r2, #1
 800b078:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	2202      	movs	r2, #2
 800b07e:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d137      	bne.n	800b0f6 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	689b      	ldr	r3, [r3, #8]
 800b08c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b090:	2b00      	cmp	r3, #0
 800b092:	d102      	bne.n	800b09a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	2200      	movs	r2, #0
 800b098:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	781b      	ldrb	r3, [r3, #0]
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f000 f982 	bl	800b3a8 <RTC_ByteToBcd2>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	785b      	ldrb	r3, [r3, #1]
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f000 f97b 	bl	800b3a8 <RTC_ByteToBcd2>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800b0b6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	789b      	ldrb	r3, [r3, #2]
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f000 f973 	bl	800b3a8 <RTC_ByteToBcd2>
 800b0c2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800b0c4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	78db      	ldrb	r3, [r3, #3]
 800b0cc:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800b0ce:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f000 f965 	bl	800b3a8 <RTC_ByteToBcd2>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800b0e2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800b0ea:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800b0f0:	4313      	orrs	r3, r2
 800b0f2:	61fb      	str	r3, [r7, #28]
 800b0f4:	e023      	b.n	800b13e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	689b      	ldr	r3, [r3, #8]
 800b0fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b100:	2b00      	cmp	r3, #0
 800b102:	d102      	bne.n	800b10a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	2200      	movs	r2, #0
 800b108:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	785b      	ldrb	r3, [r3, #1]
 800b114:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800b116:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800b118:	68ba      	ldr	r2, [r7, #8]
 800b11a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800b11c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	78db      	ldrb	r3, [r3, #3]
 800b122:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800b124:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b12c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800b12e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800b134:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800b13a:	4313      	orrs	r3, r2
 800b13c:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800b146:	4313      	orrs	r3, r2
 800b148:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	22ca      	movs	r2, #202	@ 0xca
 800b150:	625a      	str	r2, [r3, #36]	@ 0x24
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	2253      	movs	r2, #83	@ 0x53
 800b158:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b15e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b162:	d148      	bne.n	800b1f6 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	689a      	ldr	r2, [r3, #8]
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b172:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	689a      	ldr	r2, [r3, #8]
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b182:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	68db      	ldr	r3, [r3, #12]
 800b18a:	b2da      	uxtb	r2, r3
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800b194:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b196:	f7f9 ffe7 	bl	8005168 <HAL_GetTick>
 800b19a:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800b19c:	e013      	b.n	800b1c6 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b19e:	f7f9 ffe3 	bl	8005168 <HAL_GetTick>
 800b1a2:	4602      	mov	r2, r0
 800b1a4:	69bb      	ldr	r3, [r7, #24]
 800b1a6:	1ad3      	subs	r3, r2, r3
 800b1a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b1ac:	d90b      	bls.n	800b1c6 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	22ff      	movs	r2, #255	@ 0xff
 800b1b4:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2203      	movs	r2, #3
 800b1ba:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800b1c2:	2303      	movs	r3, #3
 800b1c4:	e06a      	b.n	800b29c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	68db      	ldr	r3, [r3, #12]
 800b1cc:	f003 0301 	and.w	r3, r3, #1
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d0e4      	beq.n	800b19e <HAL_RTC_SetAlarm+0x14e>
      }
    }

    /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	69fa      	ldr	r2, [r7, #28]
 800b1da:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	697a      	ldr	r2, [r7, #20]
 800b1e2:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	689a      	ldr	r2, [r3, #8]
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b1f2:	609a      	str	r2, [r3, #8]
 800b1f4:	e047      	b.n	800b286 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	689a      	ldr	r2, [r3, #8]
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800b204:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	689a      	ldr	r2, [r3, #8]
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b214:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	68db      	ldr	r3, [r3, #12]
 800b21c:	b2da      	uxtb	r2, r3
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800b226:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b228:	f7f9 ff9e 	bl	8005168 <HAL_GetTick>
 800b22c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800b22e:	e013      	b.n	800b258 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b230:	f7f9 ff9a 	bl	8005168 <HAL_GetTick>
 800b234:	4602      	mov	r2, r0
 800b236:	69bb      	ldr	r3, [r7, #24]
 800b238:	1ad3      	subs	r3, r2, r3
 800b23a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b23e:	d90b      	bls.n	800b258 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	22ff      	movs	r2, #255	@ 0xff
 800b246:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2203      	movs	r2, #3
 800b24c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2200      	movs	r2, #0
 800b252:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800b254:	2303      	movs	r3, #3
 800b256:	e021      	b.n	800b29c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	68db      	ldr	r3, [r3, #12]
 800b25e:	f003 0302 	and.w	r3, r3, #2
 800b262:	2b00      	cmp	r3, #0
 800b264:	d0e4      	beq.n	800b230 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	69fa      	ldr	r2, [r7, #28]
 800b26c:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	697a      	ldr	r2, [r7, #20]
 800b274:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	689a      	ldr	r2, [r3, #8]
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b284:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	22ff      	movs	r2, #255	@ 0xff
 800b28c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2201      	movs	r2, #1
 800b292:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	2200      	movs	r2, #0
 800b298:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800b29a:	2300      	movs	r3, #0
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3724      	adds	r7, #36	@ 0x24
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd90      	pop	{r4, r7, pc}

0800b2a4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b084      	sub	sp, #16
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	4a0d      	ldr	r2, [pc, #52]	@ (800b2ec <HAL_RTC_WaitForSynchro+0x48>)
 800b2b6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b2b8:	f7f9 ff56 	bl	8005168 <HAL_GetTick>
 800b2bc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b2be:	e009      	b.n	800b2d4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b2c0:	f7f9 ff52 	bl	8005168 <HAL_GetTick>
 800b2c4:	4602      	mov	r2, r0
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	1ad3      	subs	r3, r2, r3
 800b2ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b2ce:	d901      	bls.n	800b2d4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800b2d0:	2303      	movs	r3, #3
 800b2d2:	e007      	b.n	800b2e4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	68db      	ldr	r3, [r3, #12]
 800b2da:	f003 0320 	and.w	r3, r3, #32
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d0ee      	beq.n	800b2c0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800b2e2:	2300      	movs	r3, #0
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3710      	adds	r7, #16
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}
 800b2ec:	0001ff5f 	.word	0x0001ff5f

0800b2f0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b084      	sub	sp, #16
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	68db      	ldr	r3, [r3, #12]
 800b306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d122      	bne.n	800b354 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	68da      	ldr	r2, [r3, #12]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800b31c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b31e:	f7f9 ff23 	bl	8005168 <HAL_GetTick>
 800b322:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800b324:	e00c      	b.n	800b340 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b326:	f7f9 ff1f 	bl	8005168 <HAL_GetTick>
 800b32a:	4602      	mov	r2, r0
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	1ad3      	subs	r3, r2, r3
 800b330:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b334:	d904      	bls.n	800b340 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2204      	movs	r2, #4
 800b33a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800b33c:	2301      	movs	r3, #1
 800b33e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	68db      	ldr	r3, [r3, #12]
 800b346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d102      	bne.n	800b354 <RTC_EnterInitMode+0x64>
 800b34e:	7bfb      	ldrb	r3, [r7, #15]
 800b350:	2b01      	cmp	r3, #1
 800b352:	d1e8      	bne.n	800b326 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800b354:	7bfb      	ldrb	r3, [r7, #15]
}
 800b356:	4618      	mov	r0, r3
 800b358:	3710      	adds	r7, #16
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}

0800b35e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b35e:	b580      	push	{r7, lr}
 800b360:	b084      	sub	sp, #16
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b366:	2300      	movs	r3, #0
 800b368:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	68da      	ldr	r2, [r3, #12]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b378:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	689b      	ldr	r3, [r3, #8]
 800b380:	f003 0320 	and.w	r3, r3, #32
 800b384:	2b00      	cmp	r3, #0
 800b386:	d10a      	bne.n	800b39e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f7ff ff8b 	bl	800b2a4 <HAL_RTC_WaitForSynchro>
 800b38e:	4603      	mov	r3, r0
 800b390:	2b00      	cmp	r3, #0
 800b392:	d004      	beq.n	800b39e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2204      	movs	r2, #4
 800b398:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800b39a:	2301      	movs	r3, #1
 800b39c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800b39e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3710      	adds	r7, #16
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b085      	sub	sp, #20
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800b3b6:	e005      	b.n	800b3c4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800b3be:	79fb      	ldrb	r3, [r7, #7]
 800b3c0:	3b0a      	subs	r3, #10
 800b3c2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800b3c4:	79fb      	ldrb	r3, [r7, #7]
 800b3c6:	2b09      	cmp	r3, #9
 800b3c8:	d8f6      	bhi.n	800b3b8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	b2db      	uxtb	r3, r3
 800b3ce:	011b      	lsls	r3, r3, #4
 800b3d0:	b2da      	uxtb	r2, r3
 800b3d2:	79fb      	ldrb	r3, [r7, #7]
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	b2db      	uxtb	r3, r3
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3714      	adds	r7, #20
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr

0800b3e4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b085      	sub	sp, #20
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800b3f2:	79fb      	ldrb	r3, [r7, #7]
 800b3f4:	091b      	lsrs	r3, r3, #4
 800b3f6:	b2db      	uxtb	r3, r3
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	4613      	mov	r3, r2
 800b3fc:	009b      	lsls	r3, r3, #2
 800b3fe:	4413      	add	r3, r2
 800b400:	005b      	lsls	r3, r3, #1
 800b402:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	b2da      	uxtb	r2, r3
 800b408:	79fb      	ldrb	r3, [r7, #7]
 800b40a:	f003 030f 	and.w	r3, r3, #15
 800b40e:	b2db      	uxtb	r3, r3
 800b410:	4413      	add	r3, r2
 800b412:	b2db      	uxtb	r3, r3
}
 800b414:	4618      	mov	r0, r3
 800b416:	3714      	adds	r7, #20
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr

0800b420 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800b420:	b480      	push	{r7}
 800b422:	b087      	sub	sp, #28
 800b424:	af00      	add	r7, sp, #0
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	60b9      	str	r1, [r7, #8]
 800b42a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b42c:	2300      	movs	r3, #0
 800b42e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	7f1b      	ldrb	r3, [r3, #28]
 800b434:	2b01      	cmp	r3, #1
 800b436:	d101      	bne.n	800b43c <HAL_RTCEx_SetTimeStamp+0x1c>
 800b438:	2302      	movs	r3, #2
 800b43a:	e050      	b.n	800b4de <HAL_RTCEx_SetTimeStamp+0xbe>
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2201      	movs	r2, #1
 800b440:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2202      	movs	r2, #2
 800b446:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f022 0206 	bic.w	r2, r2, #6
 800b456:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	687a      	ldr	r2, [r7, #4]
 800b464:	430a      	orrs	r2, r1
 800b466:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	689a      	ldr	r2, [r3, #8]
 800b46e:	4b1f      	ldr	r3, [pc, #124]	@ (800b4ec <HAL_RTCEx_SetTimeStamp+0xcc>)
 800b470:	4013      	ands	r3, r2
 800b472:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800b474:	697a      	ldr	r2, [r7, #20]
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	4313      	orrs	r3, r2
 800b47a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	22ca      	movs	r2, #202	@ 0xca
 800b482:	625a      	str	r2, [r3, #36]	@ 0x24
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	2253      	movs	r2, #83	@ 0x53
 800b48a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	697a      	ldr	r2, [r7, #20]
 800b492:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	68db      	ldr	r3, [r3, #12]
 800b49a:	b2da      	uxtb	r2, r3
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 800b4a4:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	68db      	ldr	r3, [r3, #12]
 800b4ac:	b2da      	uxtb	r2, r3
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 800b4b6:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	689a      	ldr	r2, [r3, #8]
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b4c6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	22ff      	movs	r2, #255	@ 0xff
 800b4ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800b4dc:	2300      	movs	r3, #0
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	371c      	adds	r7, #28
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e8:	4770      	bx	lr
 800b4ea:	bf00      	nop
 800b4ec:	fffff7f7 	.word	0xfffff7f7

0800b4f0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b088      	sub	sp, #32
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800b500:	2300      	movs	r3, #0
 800b502:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d101      	bne.n	800b50e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800b50a:	2301      	movs	r3, #1
 800b50c:	e156      	b.n	800b7bc <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800b514:	b2db      	uxtb	r3, r3
 800b516:	2b00      	cmp	r3, #0
 800b518:	d106      	bne.n	800b528 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2200      	movs	r2, #0
 800b51e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f7f9 f8e2 	bl	80046ec <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2202      	movs	r2, #2
 800b52c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f000 f95b 	bl	800b7ec <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	68db      	ldr	r3, [r3, #12]
 800b53a:	2b02      	cmp	r3, #2
 800b53c:	d00c      	beq.n	800b558 <HAL_SAI_Init+0x68>
 800b53e:	2b02      	cmp	r3, #2
 800b540:	d80d      	bhi.n	800b55e <HAL_SAI_Init+0x6e>
 800b542:	2b00      	cmp	r3, #0
 800b544:	d002      	beq.n	800b54c <HAL_SAI_Init+0x5c>
 800b546:	2b01      	cmp	r3, #1
 800b548:	d003      	beq.n	800b552 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800b54a:	e008      	b.n	800b55e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800b54c:	2300      	movs	r3, #0
 800b54e:	61fb      	str	r3, [r7, #28]
      break;
 800b550:	e006      	b.n	800b560 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800b552:	2310      	movs	r3, #16
 800b554:	61fb      	str	r3, [r7, #28]
      break;
 800b556:	e003      	b.n	800b560 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800b558:	2320      	movs	r3, #32
 800b55a:	61fb      	str	r3, [r7, #28]
      break;
 800b55c:	e000      	b.n	800b560 <HAL_SAI_Init+0x70>
      break;
 800b55e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	689b      	ldr	r3, [r3, #8]
 800b564:	2b03      	cmp	r3, #3
 800b566:	d81e      	bhi.n	800b5a6 <HAL_SAI_Init+0xb6>
 800b568:	a201      	add	r2, pc, #4	@ (adr r2, 800b570 <HAL_SAI_Init+0x80>)
 800b56a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b56e:	bf00      	nop
 800b570:	0800b581 	.word	0x0800b581
 800b574:	0800b587 	.word	0x0800b587
 800b578:	0800b58f 	.word	0x0800b58f
 800b57c:	0800b597 	.word	0x0800b597
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800b580:	2300      	movs	r3, #0
 800b582:	617b      	str	r3, [r7, #20]
    }
    break;
 800b584:	e010      	b.n	800b5a8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800b586:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b58a:	617b      	str	r3, [r7, #20]
    }
    break;
 800b58c:	e00c      	b.n	800b5a8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b58e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b592:	617b      	str	r3, [r7, #20]
    }
    break;
 800b594:	e008      	b.n	800b5a8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b596:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b59a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800b59c:	69fb      	ldr	r3, [r7, #28]
 800b59e:	f043 0301 	orr.w	r3, r3, #1
 800b5a2:	61fb      	str	r3, [r7, #28]
    }
    break;
 800b5a4:	e000      	b.n	800b5a8 <HAL_SAI_Init+0xb8>
    default:
      break;
 800b5a6:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4a85      	ldr	r2, [pc, #532]	@ (800b7c4 <HAL_SAI_Init+0x2d4>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d004      	beq.n	800b5bc <HAL_SAI_Init+0xcc>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	4a84      	ldr	r2, [pc, #528]	@ (800b7c8 <HAL_SAI_Init+0x2d8>)
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d103      	bne.n	800b5c4 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800b5bc:	4a83      	ldr	r2, [pc, #524]	@ (800b7cc <HAL_SAI_Init+0x2dc>)
 800b5be:	69fb      	ldr	r3, [r7, #28]
 800b5c0:	6013      	str	r3, [r2, #0]
 800b5c2:	e002      	b.n	800b5ca <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800b5c4:	4a82      	ldr	r2, [pc, #520]	@ (800b7d0 <HAL_SAI_Init+0x2e0>)
 800b5c6:	69fb      	ldr	r3, [r7, #28]
 800b5c8:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	69db      	ldr	r3, [r3, #28]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d04c      	beq.n	800b66c <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4a7a      	ldr	r2, [pc, #488]	@ (800b7c4 <HAL_SAI_Init+0x2d4>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d004      	beq.n	800b5ea <HAL_SAI_Init+0xfa>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4a78      	ldr	r2, [pc, #480]	@ (800b7c8 <HAL_SAI_Init+0x2d8>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d104      	bne.n	800b5f4 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800b5ea:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800b5ee:	f7ff f9a1 	bl	800a934 <HAL_RCCEx_GetPeriphCLKFreq>
 800b5f2:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	4a76      	ldr	r2, [pc, #472]	@ (800b7d4 <HAL_SAI_Init+0x2e4>)
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d004      	beq.n	800b608 <HAL_SAI_Init+0x118>
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	4a75      	ldr	r2, [pc, #468]	@ (800b7d8 <HAL_SAI_Init+0x2e8>)
 800b604:	4293      	cmp	r3, r2
 800b606:	d104      	bne.n	800b612 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800b608:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800b60c:	f7ff f992 	bl	800a934 <HAL_RCCEx_GetPeriphCLKFreq>
 800b610:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800b612:	693a      	ldr	r2, [r7, #16]
 800b614:	4613      	mov	r3, r2
 800b616:	009b      	lsls	r3, r3, #2
 800b618:	4413      	add	r3, r2
 800b61a:	005b      	lsls	r3, r3, #1
 800b61c:	461a      	mov	r2, r3
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	69db      	ldr	r3, [r3, #28]
 800b622:	025b      	lsls	r3, r3, #9
 800b624:	fbb2 f3f3 	udiv	r3, r2, r3
 800b628:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	4a6b      	ldr	r2, [pc, #428]	@ (800b7dc <HAL_SAI_Init+0x2ec>)
 800b62e:	fba2 2303 	umull	r2, r3, r2, r3
 800b632:	08da      	lsrs	r2, r3, #3
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800b638:	68f9      	ldr	r1, [r7, #12]
 800b63a:	4b68      	ldr	r3, [pc, #416]	@ (800b7dc <HAL_SAI_Init+0x2ec>)
 800b63c:	fba3 2301 	umull	r2, r3, r3, r1
 800b640:	08da      	lsrs	r2, r3, #3
 800b642:	4613      	mov	r3, r2
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	4413      	add	r3, r2
 800b648:	005b      	lsls	r3, r3, #1
 800b64a:	1aca      	subs	r2, r1, r3
 800b64c:	2a08      	cmp	r2, #8
 800b64e:	d904      	bls.n	800b65a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6a1b      	ldr	r3, [r3, #32]
 800b654:	1c5a      	adds	r2, r3, #1
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b65e:	2b04      	cmp	r3, #4
 800b660:	d104      	bne.n	800b66c <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6a1b      	ldr	r3, [r3, #32]
 800b666:	085a      	lsrs	r2, r3, #1
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	685b      	ldr	r3, [r3, #4]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d003      	beq.n	800b67c <HAL_SAI_Init+0x18c>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	685b      	ldr	r3, [r3, #4]
 800b678:	2b02      	cmp	r3, #2
 800b67a:	d109      	bne.n	800b690 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b680:	2b01      	cmp	r3, #1
 800b682:	d101      	bne.n	800b688 <HAL_SAI_Init+0x198>
 800b684:	2300      	movs	r3, #0
 800b686:	e001      	b.n	800b68c <HAL_SAI_Init+0x19c>
 800b688:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b68c:	61bb      	str	r3, [r7, #24]
 800b68e:	e008      	b.n	800b6a2 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b694:	2b01      	cmp	r3, #1
 800b696:	d102      	bne.n	800b69e <HAL_SAI_Init+0x1ae>
 800b698:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b69c:	e000      	b.n	800b6a0 <HAL_SAI_Init+0x1b0>
 800b69e:	2300      	movs	r3, #0
 800b6a0:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	6819      	ldr	r1, [r3, #0]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681a      	ldr	r2, [r3, #0]
 800b6ac:	4b4c      	ldr	r3, [pc, #304]	@ (800b7e0 <HAL_SAI_Init+0x2f0>)
 800b6ae:	400b      	ands	r3, r1
 800b6b0:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	6819      	ldr	r1, [r3, #0]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	685a      	ldr	r2, [r3, #4]
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6c0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b6c6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6cc:	431a      	orrs	r2, r3
 800b6ce:	69bb      	ldr	r3, [r7, #24]
 800b6d0:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800b6da:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	691b      	ldr	r3, [r3, #16]
 800b6e0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b6e6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6a1b      	ldr	r3, [r3, #32]
 800b6ec:	051b      	lsls	r3, r3, #20
 800b6ee:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	430a      	orrs	r2, r1
 800b6f6:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	6859      	ldr	r1, [r3, #4]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681a      	ldr	r2, [r3, #0]
 800b702:	4b38      	ldr	r3, [pc, #224]	@ (800b7e4 <HAL_SAI_Init+0x2f4>)
 800b704:	400b      	ands	r3, r1
 800b706:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	6859      	ldr	r1, [r3, #4]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	699a      	ldr	r2, [r3, #24]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b716:	431a      	orrs	r2, r3
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b71c:	431a      	orrs	r2, r3
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	430a      	orrs	r2, r1
 800b724:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	6899      	ldr	r1, [r3, #8]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681a      	ldr	r2, [r3, #0]
 800b730:	4b2d      	ldr	r3, [pc, #180]	@ (800b7e8 <HAL_SAI_Init+0x2f8>)
 800b732:	400b      	ands	r3, r1
 800b734:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	6899      	ldr	r1, [r3, #8]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b740:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800b746:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800b74c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800b752:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b758:	3b01      	subs	r3, #1
 800b75a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800b75c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	430a      	orrs	r2, r1
 800b764:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	68d9      	ldr	r1, [r3, #12]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681a      	ldr	r2, [r3, #0]
 800b770:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800b774:	400b      	ands	r3, r1
 800b776:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	68d9      	ldr	r1, [r3, #12]
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b786:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b78c:	041b      	lsls	r3, r3, #16
 800b78e:	431a      	orrs	r2, r3
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b794:	3b01      	subs	r3, #1
 800b796:	021b      	lsls	r3, r3, #8
 800b798:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	430a      	orrs	r2, r1
 800b7a0:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800b7ba:	2300      	movs	r3, #0
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3720      	adds	r7, #32
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}
 800b7c4:	40015804 	.word	0x40015804
 800b7c8:	40015824 	.word	0x40015824
 800b7cc:	40015800 	.word	0x40015800
 800b7d0:	40015c00 	.word	0x40015c00
 800b7d4:	40015c04 	.word	0x40015c04
 800b7d8:	40015c24 	.word	0x40015c24
 800b7dc:	cccccccd 	.word	0xcccccccd
 800b7e0:	ff05c010 	.word	0xff05c010
 800b7e4:	ffff1ff0 	.word	0xffff1ff0
 800b7e8:	fff88000 	.word	0xfff88000

0800b7ec <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b085      	sub	sp, #20
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800b7f4:	4b17      	ldr	r3, [pc, #92]	@ (800b854 <SAI_Disable+0x68>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	4a17      	ldr	r2, [pc, #92]	@ (800b858 <SAI_Disable+0x6c>)
 800b7fa:	fba2 2303 	umull	r2, r3, r2, r3
 800b7fe:	0b1b      	lsrs	r3, r3, #12
 800b800:	009b      	lsls	r3, r3, #2
 800b802:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800b804:	2300      	movs	r3, #0
 800b806:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	681a      	ldr	r2, [r3, #0]
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800b816:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	1e5a      	subs	r2, r3, #1
 800b81c:	60fa      	str	r2, [r7, #12]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d10a      	bne.n	800b838 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b828:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800b832:	2303      	movs	r3, #3
 800b834:	72fb      	strb	r3, [r7, #11]
      break;
 800b836:	e006      	b.n	800b846 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b842:	2b00      	cmp	r3, #0
 800b844:	d1e8      	bne.n	800b818 <SAI_Disable+0x2c>

  return status;
 800b846:	7afb      	ldrb	r3, [r7, #11]
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3714      	adds	r7, #20
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr
 800b854:	20000018 	.word	0x20000018
 800b858:	95cbec1b 	.word	0x95cbec1b

0800b85c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b082      	sub	sp, #8
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d101      	bne.n	800b86e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b86a:	2301      	movs	r3, #1
 800b86c:	e022      	b.n	800b8b4 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b874:	b2db      	uxtb	r3, r3
 800b876:	2b00      	cmp	r3, #0
 800b878:	d105      	bne.n	800b886 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2200      	movs	r2, #0
 800b87e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f7f8 fb4d 	bl	8003f20 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2203      	movs	r2, #3
 800b88a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f000 f814 	bl	800b8bc <HAL_SD_InitCard>
 800b894:	4603      	mov	r3, r0
 800b896:	2b00      	cmp	r3, #0
 800b898:	d001      	beq.n	800b89e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b89a:	2301      	movs	r3, #1
 800b89c:	e00a      	b.n	800b8b4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b8b2:	2300      	movs	r3, #0
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3708      	adds	r7, #8
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b8bc:	b5b0      	push	{r4, r5, r7, lr}
 800b8be:	b08e      	sub	sp, #56	@ 0x38
 800b8c0:	af04      	add	r7, sp, #16
 800b8c2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800b8d8:	2376      	movs	r3, #118	@ 0x76
 800b8da:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681d      	ldr	r5, [r3, #0]
 800b8e0:	466c      	mov	r4, sp
 800b8e2:	f107 0318 	add.w	r3, r7, #24
 800b8e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b8ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b8ee:	f107 030c 	add.w	r3, r7, #12
 800b8f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b8f4:	4628      	mov	r0, r5
 800b8f6:	f003 fe05 	bl	800f504 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	685a      	ldr	r2, [r3, #4]
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b908:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	4618      	mov	r0, r3
 800b910:	f003 fe42 	bl	800f598 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	685a      	ldr	r2, [r3, #4]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b922:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800b924:	2002      	movs	r0, #2
 800b926:	f7f9 fc2b 	bl	8005180 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f000 fe68 	bl	800c600 <SD_PowerON>
 800b930:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800b932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b934:	2b00      	cmp	r3, #0
 800b936:	d00b      	beq.n	800b950 <HAL_SD_InitCard+0x94>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2201      	movs	r2, #1
 800b93c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b946:	431a      	orrs	r2, r3
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800b94c:	2301      	movs	r3, #1
 800b94e:	e02e      	b.n	800b9ae <HAL_SD_InitCard+0xf2>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 fd87 	bl	800c464 <SD_InitCard>
 800b956:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800b958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d00b      	beq.n	800b976 <HAL_SD_InitCard+0xba>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2201      	movs	r2, #1
 800b962:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b96a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b96c:	431a      	orrs	r2, r3
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800b972:	2301      	movs	r3, #1
 800b974:	e01b      	b.n	800b9ae <HAL_SD_InitCard+0xf2>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b97e:	4618      	mov	r0, r3
 800b980:	f003 fe9c 	bl	800f6bc <SDMMC_CmdBlockLength>
 800b984:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800b986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d00f      	beq.n	800b9ac <HAL_SD_InitCard+0xf0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	4a09      	ldr	r2, [pc, #36]	@ (800b9b8 <HAL_SD_InitCard+0xfc>)
 800b992:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b99a:	431a      	orrs	r2, r3
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	e000      	b.n	800b9ae <HAL_SD_InitCard+0xf2>
  }

  return HAL_OK;
 800b9ac:	2300      	movs	r3, #0
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3728      	adds	r7, #40	@ 0x28
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bdb0      	pop	{r4, r5, r7, pc}
 800b9b6:	bf00      	nop
 800b9b8:	004005ff 	.word	0x004005ff

0800b9bc <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b092      	sub	sp, #72	@ 0x48
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	60f8      	str	r0, [r7, #12]
 800b9c4:	60b9      	str	r1, [r7, #8]
 800b9c6:	607a      	str	r2, [r7, #4]
 800b9c8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b9ca:	f7f9 fbcd 	bl	8005168 <HAL_GetTick>
 800b9ce:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d107      	bne.n	800b9ee <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9e2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	e1bd      	b.n	800bd6a <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b9f4:	b2db      	uxtb	r3, r3
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	f040 81b0 	bne.w	800bd5c <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ba02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	441a      	add	r2, r3
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	d907      	bls.n	800ba20 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba14:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	e1a4      	b.n	800bd6a <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2203      	movs	r2, #3
 800ba24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba34:	2b01      	cmp	r3, #1
 800ba36:	d002      	beq.n	800ba3e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800ba38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba3a:	025b      	lsls	r3, r3, #9
 800ba3c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ba3e:	f04f 33ff 	mov.w	r3, #4294967295
 800ba42:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	025b      	lsls	r3, r3, #9
 800ba48:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ba4a:	2390      	movs	r3, #144	@ 0x90
 800ba4c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ba4e:	2302      	movs	r3, #2
 800ba50:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ba52:	2300      	movs	r3, #0
 800ba54:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800ba56:	2301      	movs	r3, #1
 800ba58:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f107 0214 	add.w	r2, r7, #20
 800ba62:	4611      	mov	r1, r2
 800ba64:	4618      	mov	r0, r3
 800ba66:	f003 fdfd 	bl	800f664 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	2b01      	cmp	r3, #1
 800ba6e:	d90a      	bls.n	800ba86 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	2202      	movs	r2, #2
 800ba74:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f003 fe61 	bl	800f744 <SDMMC_CmdReadMultiBlock>
 800ba82:	6478      	str	r0, [r7, #68]	@ 0x44
 800ba84:	e009      	b.n	800ba9a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2201      	movs	r2, #1
 800ba8a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ba92:	4618      	mov	r0, r3
 800ba94:	f003 fe34 	bl	800f700 <SDMMC_CmdReadSingleBlock>
 800ba98:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800ba9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d012      	beq.n	800bac6 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	4a7a      	ldr	r2, [pc, #488]	@ (800bc90 <HAL_SD_ReadBlocks+0x2d4>)
 800baa6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800baac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800baae:	431a      	orrs	r2, r3
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	2201      	movs	r2, #1
 800bab8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	2200      	movs	r2, #0
 800bac0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800bac2:	2301      	movs	r3, #1
 800bac4:	e151      	b.n	800bd6a <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800bac6:	69bb      	ldr	r3, [r7, #24]
 800bac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800baca:	e061      	b.n	800bb90 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bad2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d03c      	beq.n	800bb54 <HAL_SD_ReadBlocks+0x198>
 800bada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800badc:	2b00      	cmp	r3, #0
 800bade:	d039      	beq.n	800bb54 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800bae0:	2300      	movs	r3, #0
 800bae2:	643b      	str	r3, [r7, #64]	@ 0x40
 800bae4:	e033      	b.n	800bb4e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	4618      	mov	r0, r3
 800baec:	f003 fd36 	bl	800f55c <SDMMC_ReadFIFO>
 800baf0:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800baf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baf4:	b2da      	uxtb	r2, r3
 800baf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baf8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800bafa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bafc:	3301      	adds	r3, #1
 800bafe:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800bb00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb02:	3b01      	subs	r3, #1
 800bb04:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800bb06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb08:	0a1b      	lsrs	r3, r3, #8
 800bb0a:	b2da      	uxtb	r2, r3
 800bb0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb0e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800bb10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb12:	3301      	adds	r3, #1
 800bb14:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800bb16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb18:	3b01      	subs	r3, #1
 800bb1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800bb1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb1e:	0c1b      	lsrs	r3, r3, #16
 800bb20:	b2da      	uxtb	r2, r3
 800bb22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb24:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800bb26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb28:	3301      	adds	r3, #1
 800bb2a:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800bb2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb2e:	3b01      	subs	r3, #1
 800bb30:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800bb32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb34:	0e1b      	lsrs	r3, r3, #24
 800bb36:	b2da      	uxtb	r2, r3
 800bb38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb3a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800bb3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb3e:	3301      	adds	r3, #1
 800bb40:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800bb42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb44:	3b01      	subs	r3, #1
 800bb46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800bb48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	643b      	str	r3, [r7, #64]	@ 0x40
 800bb4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb50:	2b07      	cmp	r3, #7
 800bb52:	d9c8      	bls.n	800bae6 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800bb54:	f7f9 fb08 	bl	8005168 <HAL_GetTick>
 800bb58:	4602      	mov	r2, r0
 800bb5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb5c:	1ad3      	subs	r3, r2, r3
 800bb5e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d902      	bls.n	800bb6a <HAL_SD_ReadBlocks+0x1ae>
 800bb64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d112      	bne.n	800bb90 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	4a48      	ldr	r2, [pc, #288]	@ (800bc90 <HAL_SD_ReadBlocks+0x2d4>)
 800bb70:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb76:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	2201      	movs	r2, #1
 800bb82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800bb8c:	2303      	movs	r3, #3
 800bb8e:	e0ec      	b.n	800bd6a <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb96:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d096      	beq.n	800bacc <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d022      	beq.n	800bbf2 <HAL_SD_ReadBlocks+0x236>
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	2b01      	cmp	r3, #1
 800bbb0:	d91f      	bls.n	800bbf2 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbb6:	2b03      	cmp	r3, #3
 800bbb8:	d01b      	beq.n	800bbf2 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f003 fe26 	bl	800f810 <SDMMC_CmdStopTransfer>
 800bbc4:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800bbc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d012      	beq.n	800bbf2 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	4a2f      	ldr	r2, [pc, #188]	@ (800bc90 <HAL_SD_ReadBlocks+0x2d4>)
 800bbd2:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bbd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bbda:	431a      	orrs	r2, r3
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	2201      	movs	r2, #1
 800bbe4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	2200      	movs	r2, #0
 800bbec:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800bbee:	2301      	movs	r3, #1
 800bbf0:	e0bb      	b.n	800bd6a <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbf8:	f003 0308 	and.w	r3, r3, #8
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d012      	beq.n	800bc26 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	4a22      	ldr	r2, [pc, #136]	@ (800bc90 <HAL_SD_ReadBlocks+0x2d4>)
 800bc06:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc0c:	f043 0208 	orr.w	r2, r3, #8
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	2201      	movs	r2, #1
 800bc18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800bc22:	2301      	movs	r3, #1
 800bc24:	e0a1      	b.n	800bd6a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc2c:	f003 0302 	and.w	r3, r3, #2
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d012      	beq.n	800bc5a <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	4a15      	ldr	r2, [pc, #84]	@ (800bc90 <HAL_SD_ReadBlocks+0x2d4>)
 800bc3a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc40:	f043 0202 	orr.w	r2, r3, #2
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	2200      	movs	r2, #0
 800bc54:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800bc56:	2301      	movs	r3, #1
 800bc58:	e087      	b.n	800bd6a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc60:	f003 0320 	and.w	r3, r3, #32
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d064      	beq.n	800bd32 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	4a08      	ldr	r2, [pc, #32]	@ (800bc90 <HAL_SD_ReadBlocks+0x2d4>)
 800bc6e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc74:	f043 0220 	orr.w	r2, r3, #32
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	2201      	movs	r2, #1
 800bc80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	2200      	movs	r2, #0
 800bc88:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	e06d      	b.n	800bd6a <HAL_SD_ReadBlocks+0x3ae>
 800bc8e:	bf00      	nop
 800bc90:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f003 fc5f 	bl	800f55c <SDMMC_ReadFIFO>
 800bc9e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800bca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bca2:	b2da      	uxtb	r2, r3
 800bca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bca6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800bca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcaa:	3301      	adds	r3, #1
 800bcac:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800bcae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcb0:	3b01      	subs	r3, #1
 800bcb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800bcb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcb6:	0a1b      	lsrs	r3, r3, #8
 800bcb8:	b2da      	uxtb	r2, r3
 800bcba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcbc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800bcbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcc0:	3301      	adds	r3, #1
 800bcc2:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800bcc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcc6:	3b01      	subs	r3, #1
 800bcc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800bcca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bccc:	0c1b      	lsrs	r3, r3, #16
 800bcce:	b2da      	uxtb	r2, r3
 800bcd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcd2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800bcd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800bcda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcdc:	3b01      	subs	r3, #1
 800bcde:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800bce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bce2:	0e1b      	lsrs	r3, r3, #24
 800bce4:	b2da      	uxtb	r2, r3
 800bce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bce8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800bcea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcec:	3301      	adds	r3, #1
 800bcee:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800bcf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcf2:	3b01      	subs	r3, #1
 800bcf4:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800bcf6:	f7f9 fa37 	bl	8005168 <HAL_GetTick>
 800bcfa:	4602      	mov	r2, r0
 800bcfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcfe:	1ad3      	subs	r3, r2, r3
 800bd00:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bd02:	429a      	cmp	r2, r3
 800bd04:	d902      	bls.n	800bd0c <HAL_SD_ReadBlocks+0x350>
 800bd06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d112      	bne.n	800bd32 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	4a18      	ldr	r2, [pc, #96]	@ (800bd74 <HAL_SD_ReadBlocks+0x3b8>)
 800bd12:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd18:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	2201      	movs	r2, #1
 800bd24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800bd2e:	2301      	movs	r3, #1
 800bd30:	e01b      	b.n	800bd6a <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d002      	beq.n	800bd46 <HAL_SD_ReadBlocks+0x38a>
 800bd40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d1a6      	bne.n	800bc94 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800bd4e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	2201      	movs	r2, #1
 800bd54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	e006      	b.n	800bd6a <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd60:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800bd68:	2301      	movs	r3, #1
  }
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3748      	adds	r7, #72	@ 0x48
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
 800bd72:	bf00      	nop
 800bd74:	004005ff 	.word	0x004005ff

0800bd78 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b092      	sub	sp, #72	@ 0x48
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	60b9      	str	r1, [r7, #8]
 800bd82:	607a      	str	r2, [r7, #4]
 800bd84:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bd86:	f7f9 f9ef 	bl	8005168 <HAL_GetTick>
 800bd8a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d107      	bne.n	800bdaa <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd9e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800bda6:	2301      	movs	r3, #1
 800bda8:	e165      	b.n	800c076 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800bdb0:	b2db      	uxtb	r3, r3
 800bdb2:	2b01      	cmp	r3, #1
 800bdb4:	f040 8158 	bne.w	800c068 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bdbe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	441a      	add	r2, r3
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d907      	bls.n	800bddc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdd0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800bdd8:	2301      	movs	r3, #1
 800bdda:	e14c      	b.n	800c076 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2203      	movs	r2, #3
 800bde0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	2200      	movs	r2, #0
 800bdea:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdf0:	2b01      	cmp	r3, #1
 800bdf2:	d002      	beq.n	800bdfa <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800bdf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdf6:	025b      	lsls	r3, r3, #9
 800bdf8:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bdfa:	f04f 33ff 	mov.w	r3, #4294967295
 800bdfe:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	025b      	lsls	r3, r3, #9
 800be04:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800be06:	2390      	movs	r3, #144	@ 0x90
 800be08:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800be0a:	2300      	movs	r3, #0
 800be0c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800be0e:	2300      	movs	r3, #0
 800be10:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800be12:	2301      	movs	r3, #1
 800be14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	f107 0218 	add.w	r2, r7, #24
 800be1e:	4611      	mov	r1, r2
 800be20:	4618      	mov	r0, r3
 800be22:	f003 fc1f 	bl	800f664 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d90a      	bls.n	800be42 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	2220      	movs	r2, #32
 800be30:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800be38:	4618      	mov	r0, r3
 800be3a:	f003 fcc7 	bl	800f7cc <SDMMC_CmdWriteMultiBlock>
 800be3e:	6478      	str	r0, [r7, #68]	@ 0x44
 800be40:	e009      	b.n	800be56 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	2210      	movs	r2, #16
 800be46:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800be4e:	4618      	mov	r0, r3
 800be50:	f003 fc9a 	bl	800f788 <SDMMC_CmdWriteSingleBlock>
 800be54:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800be56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d012      	beq.n	800be82 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	4a87      	ldr	r2, [pc, #540]	@ (800c080 <HAL_SD_WriteBlocks+0x308>)
 800be62:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800be68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be6a:	431a      	orrs	r2, r3
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2201      	movs	r2, #1
 800be74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	2200      	movs	r2, #0
 800be7c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800be7e:	2301      	movs	r3, #1
 800be80:	e0f9      	b.n	800c076 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800be82:	69fb      	ldr	r3, [r7, #28]
 800be84:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800be86:	e065      	b.n	800bf54 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800be92:	2b00      	cmp	r3, #0
 800be94:	d040      	beq.n	800bf18 <HAL_SD_WriteBlocks+0x1a0>
 800be96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d03d      	beq.n	800bf18 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800be9c:	2300      	movs	r3, #0
 800be9e:	643b      	str	r3, [r7, #64]	@ 0x40
 800bea0:	e037      	b.n	800bf12 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800bea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bea4:	781b      	ldrb	r3, [r3, #0]
 800bea6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800beaa:	3301      	adds	r3, #1
 800beac:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800beae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800beb0:	3b01      	subs	r3, #1
 800beb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800beb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	021a      	lsls	r2, r3, #8
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	4313      	orrs	r3, r2
 800bebe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bec2:	3301      	adds	r3, #1
 800bec4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800bec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bec8:	3b01      	subs	r3, #1
 800beca:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800becc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bece:	781b      	ldrb	r3, [r3, #0]
 800bed0:	041a      	lsls	r2, r3, #16
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	4313      	orrs	r3, r2
 800bed6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800beda:	3301      	adds	r3, #1
 800bedc:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800bede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bee0:	3b01      	subs	r3, #1
 800bee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800bee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bee6:	781b      	ldrb	r3, [r3, #0]
 800bee8:	061a      	lsls	r2, r3, #24
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	4313      	orrs	r3, r2
 800beee:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bef2:	3301      	adds	r3, #1
 800bef4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800bef6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bef8:	3b01      	subs	r3, #1
 800befa:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f107 0214 	add.w	r2, r7, #20
 800bf04:	4611      	mov	r1, r2
 800bf06:	4618      	mov	r0, r3
 800bf08:	f003 fb35 	bl	800f576 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800bf0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf0e:	3301      	adds	r3, #1
 800bf10:	643b      	str	r3, [r7, #64]	@ 0x40
 800bf12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf14:	2b07      	cmp	r3, #7
 800bf16:	d9c4      	bls.n	800bea2 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800bf18:	f7f9 f926 	bl	8005168 <HAL_GetTick>
 800bf1c:	4602      	mov	r2, r0
 800bf1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf20:	1ad3      	subs	r3, r2, r3
 800bf22:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d902      	bls.n	800bf2e <HAL_SD_WriteBlocks+0x1b6>
 800bf28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d112      	bne.n	800bf54 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	4a53      	ldr	r2, [pc, #332]	@ (800c080 <HAL_SD_WriteBlocks+0x308>)
 800bf34:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bf3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf3c:	431a      	orrs	r2, r3
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	2201      	movs	r2, #1
 800bf46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800bf50:	2303      	movs	r3, #3
 800bf52:	e090      	b.n	800c076 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf5a:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d092      	beq.n	800be88 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d022      	beq.n	800bfb6 <HAL_SD_WriteBlocks+0x23e>
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	d91f      	bls.n	800bfb6 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf7a:	2b03      	cmp	r3, #3
 800bf7c:	d01b      	beq.n	800bfb6 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	4618      	mov	r0, r3
 800bf84:	f003 fc44 	bl	800f810 <SDMMC_CmdStopTransfer>
 800bf88:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800bf8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d012      	beq.n	800bfb6 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	4a3a      	ldr	r2, [pc, #232]	@ (800c080 <HAL_SD_WriteBlocks+0x308>)
 800bf96:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bf9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf9e:	431a      	orrs	r2, r3
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	e05f      	b.n	800c076 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfbc:	f003 0308 	and.w	r3, r3, #8
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d012      	beq.n	800bfea <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4a2d      	ldr	r2, [pc, #180]	@ (800c080 <HAL_SD_WriteBlocks+0x308>)
 800bfca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfd0:	f043 0208 	orr.w	r2, r3, #8
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	2201      	movs	r2, #1
 800bfdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	e045      	b.n	800c076 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bff0:	f003 0302 	and.w	r3, r3, #2
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d012      	beq.n	800c01e <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	4a20      	ldr	r2, [pc, #128]	@ (800c080 <HAL_SD_WriteBlocks+0x308>)
 800bffe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c004:	f043 0202 	orr.w	r2, r3, #2
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	2201      	movs	r2, #1
 800c010:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	2200      	movs	r2, #0
 800c018:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c01a:	2301      	movs	r3, #1
 800c01c:	e02b      	b.n	800c076 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c024:	f003 0310 	and.w	r3, r3, #16
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d012      	beq.n	800c052 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	4a13      	ldr	r2, [pc, #76]	@ (800c080 <HAL_SD_WriteBlocks+0x308>)
 800c032:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c038:	f043 0210 	orr.w	r2, r3, #16
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	2201      	movs	r2, #1
 800c044:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	2200      	movs	r2, #0
 800c04c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c04e:	2301      	movs	r3, #1
 800c050:	e011      	b.n	800c076 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f240 523a 	movw	r2, #1338	@ 0x53a
 800c05a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	2201      	movs	r2, #1
 800c060:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800c064:	2300      	movs	r3, #0
 800c066:	e006      	b.n	800c076 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c06c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c074:	2301      	movs	r3, #1
  }
}
 800c076:	4618      	mov	r0, r3
 800c078:	3748      	adds	r7, #72	@ 0x48
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}
 800c07e:	bf00      	nop
 800c080:	004005ff 	.word	0x004005ff

0800c084 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c084:	b480      	push	{r7}
 800c086:	b083      	sub	sp, #12
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c092:	0f9b      	lsrs	r3, r3, #30
 800c094:	b2da      	uxtb	r2, r3
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c09e:	0e9b      	lsrs	r3, r3, #26
 800c0a0:	b2db      	uxtb	r3, r3
 800c0a2:	f003 030f 	and.w	r3, r3, #15
 800c0a6:	b2da      	uxtb	r2, r3
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c0b0:	0e1b      	lsrs	r3, r3, #24
 800c0b2:	b2db      	uxtb	r3, r3
 800c0b4:	f003 0303 	and.w	r3, r3, #3
 800c0b8:	b2da      	uxtb	r2, r3
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c0c2:	0c1b      	lsrs	r3, r3, #16
 800c0c4:	b2da      	uxtb	r2, r3
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c0ce:	0a1b      	lsrs	r3, r3, #8
 800c0d0:	b2da      	uxtb	r2, r3
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c0da:	b2da      	uxtb	r2, r3
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c0e4:	0d1b      	lsrs	r3, r3, #20
 800c0e6:	b29a      	uxth	r2, r3
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c0f0:	0c1b      	lsrs	r3, r3, #16
 800c0f2:	b2db      	uxtb	r3, r3
 800c0f4:	f003 030f 	and.w	r3, r3, #15
 800c0f8:	b2da      	uxtb	r2, r3
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c102:	0bdb      	lsrs	r3, r3, #15
 800c104:	b2db      	uxtb	r3, r3
 800c106:	f003 0301 	and.w	r3, r3, #1
 800c10a:	b2da      	uxtb	r2, r3
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c114:	0b9b      	lsrs	r3, r3, #14
 800c116:	b2db      	uxtb	r3, r3
 800c118:	f003 0301 	and.w	r3, r3, #1
 800c11c:	b2da      	uxtb	r2, r3
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c126:	0b5b      	lsrs	r3, r3, #13
 800c128:	b2db      	uxtb	r3, r3
 800c12a:	f003 0301 	and.w	r3, r3, #1
 800c12e:	b2da      	uxtb	r2, r3
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c138:	0b1b      	lsrs	r3, r3, #12
 800c13a:	b2db      	uxtb	r3, r3
 800c13c:	f003 0301 	and.w	r3, r3, #1
 800c140:	b2da      	uxtb	r2, r3
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	2200      	movs	r2, #0
 800c14a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c150:	2b00      	cmp	r3, #0
 800c152:	d163      	bne.n	800c21c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c158:	009a      	lsls	r2, r3, #2
 800c15a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800c15e:	4013      	ands	r3, r2
 800c160:	687a      	ldr	r2, [r7, #4]
 800c162:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800c164:	0f92      	lsrs	r2, r2, #30
 800c166:	431a      	orrs	r2, r3
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c170:	0edb      	lsrs	r3, r3, #27
 800c172:	b2db      	uxtb	r3, r3
 800c174:	f003 0307 	and.w	r3, r3, #7
 800c178:	b2da      	uxtb	r2, r3
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c182:	0e1b      	lsrs	r3, r3, #24
 800c184:	b2db      	uxtb	r3, r3
 800c186:	f003 0307 	and.w	r3, r3, #7
 800c18a:	b2da      	uxtb	r2, r3
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c194:	0d5b      	lsrs	r3, r3, #21
 800c196:	b2db      	uxtb	r3, r3
 800c198:	f003 0307 	and.w	r3, r3, #7
 800c19c:	b2da      	uxtb	r2, r3
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c1a6:	0c9b      	lsrs	r3, r3, #18
 800c1a8:	b2db      	uxtb	r3, r3
 800c1aa:	f003 0307 	and.w	r3, r3, #7
 800c1ae:	b2da      	uxtb	r2, r3
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c1b8:	0bdb      	lsrs	r3, r3, #15
 800c1ba:	b2db      	uxtb	r3, r3
 800c1bc:	f003 0307 	and.w	r3, r3, #7
 800c1c0:	b2da      	uxtb	r2, r3
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	691b      	ldr	r3, [r3, #16]
 800c1ca:	1c5a      	adds	r2, r3, #1
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	7e1b      	ldrb	r3, [r3, #24]
 800c1d4:	b2db      	uxtb	r3, r3
 800c1d6:	f003 0307 	and.w	r3, r3, #7
 800c1da:	3302      	adds	r3, #2
 800c1dc:	2201      	movs	r2, #1
 800c1de:	fa02 f303 	lsl.w	r3, r2, r3
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800c1e6:	fb03 f202 	mul.w	r2, r3, r2
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	7a1b      	ldrb	r3, [r3, #8]
 800c1f2:	b2db      	uxtb	r3, r3
 800c1f4:	f003 030f 	and.w	r3, r3, #15
 800c1f8:	2201      	movs	r2, #1
 800c1fa:	409a      	lsls	r2, r3
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c204:	687a      	ldr	r2, [r7, #4]
 800c206:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800c208:	0a52      	lsrs	r2, r2, #9
 800c20a:	fb03 f202 	mul.w	r2, r3, r2
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c218:	661a      	str	r2, [r3, #96]	@ 0x60
 800c21a:	e031      	b.n	800c280 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c220:	2b01      	cmp	r3, #1
 800c222:	d11d      	bne.n	800c260 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c228:	041b      	lsls	r3, r3, #16
 800c22a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c232:	0c1b      	lsrs	r3, r3, #16
 800c234:	431a      	orrs	r2, r3
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	691b      	ldr	r3, [r3, #16]
 800c23e:	3301      	adds	r3, #1
 800c240:	029a      	lsls	r2, r3, #10
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c254:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	661a      	str	r2, [r3, #96]	@ 0x60
 800c25e:	e00f      	b.n	800c280 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4a58      	ldr	r2, [pc, #352]	@ (800c3c8 <HAL_SD_GetCardCSD+0x344>)
 800c266:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c26c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2201      	movs	r2, #1
 800c278:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c27c:	2301      	movs	r3, #1
 800c27e:	e09d      	b.n	800c3bc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c284:	0b9b      	lsrs	r3, r3, #14
 800c286:	b2db      	uxtb	r3, r3
 800c288:	f003 0301 	and.w	r3, r3, #1
 800c28c:	b2da      	uxtb	r2, r3
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c296:	09db      	lsrs	r3, r3, #7
 800c298:	b2db      	uxtb	r3, r3
 800c29a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c29e:	b2da      	uxtb	r2, r3
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2a8:	b2db      	uxtb	r3, r3
 800c2aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c2ae:	b2da      	uxtb	r2, r3
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c2b8:	0fdb      	lsrs	r3, r3, #31
 800c2ba:	b2da      	uxtb	r2, r3
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c2c4:	0f5b      	lsrs	r3, r3, #29
 800c2c6:	b2db      	uxtb	r3, r3
 800c2c8:	f003 0303 	and.w	r3, r3, #3
 800c2cc:	b2da      	uxtb	r2, r3
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c2d6:	0e9b      	lsrs	r3, r3, #26
 800c2d8:	b2db      	uxtb	r3, r3
 800c2da:	f003 0307 	and.w	r3, r3, #7
 800c2de:	b2da      	uxtb	r2, r3
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c2e8:	0d9b      	lsrs	r3, r3, #22
 800c2ea:	b2db      	uxtb	r3, r3
 800c2ec:	f003 030f 	and.w	r3, r3, #15
 800c2f0:	b2da      	uxtb	r2, r3
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c2fa:	0d5b      	lsrs	r3, r3, #21
 800c2fc:	b2db      	uxtb	r3, r3
 800c2fe:	f003 0301 	and.w	r3, r3, #1
 800c302:	b2da      	uxtb	r2, r3
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	2200      	movs	r2, #0
 800c30e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c316:	0c1b      	lsrs	r3, r3, #16
 800c318:	b2db      	uxtb	r3, r3
 800c31a:	f003 0301 	and.w	r3, r3, #1
 800c31e:	b2da      	uxtb	r2, r3
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c32a:	0bdb      	lsrs	r3, r3, #15
 800c32c:	b2db      	uxtb	r3, r3
 800c32e:	f003 0301 	and.w	r3, r3, #1
 800c332:	b2da      	uxtb	r2, r3
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c33e:	0b9b      	lsrs	r3, r3, #14
 800c340:	b2db      	uxtb	r3, r3
 800c342:	f003 0301 	and.w	r3, r3, #1
 800c346:	b2da      	uxtb	r2, r3
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c352:	0b5b      	lsrs	r3, r3, #13
 800c354:	b2db      	uxtb	r3, r3
 800c356:	f003 0301 	and.w	r3, r3, #1
 800c35a:	b2da      	uxtb	r2, r3
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c366:	0b1b      	lsrs	r3, r3, #12
 800c368:	b2db      	uxtb	r3, r3
 800c36a:	f003 0301 	and.w	r3, r3, #1
 800c36e:	b2da      	uxtb	r2, r3
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c37a:	0a9b      	lsrs	r3, r3, #10
 800c37c:	b2db      	uxtb	r3, r3
 800c37e:	f003 0303 	and.w	r3, r3, #3
 800c382:	b2da      	uxtb	r2, r3
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c38e:	0a1b      	lsrs	r3, r3, #8
 800c390:	b2db      	uxtb	r3, r3
 800c392:	f003 0303 	and.w	r3, r3, #3
 800c396:	b2da      	uxtb	r2, r3
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c3a2:	085b      	lsrs	r3, r3, #1
 800c3a4:	b2db      	uxtb	r3, r3
 800c3a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c3aa:	b2da      	uxtb	r2, r3
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	2201      	movs	r2, #1
 800c3b6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800c3ba:	2300      	movs	r3, #0
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	370c      	adds	r7, #12
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr
 800c3c8:	004005ff 	.word	0x004005ff

0800c3cc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b083      	sub	sp, #12
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c416:	2300      	movs	r3, #0
}
 800c418:	4618      	mov	r0, r3
 800c41a:	370c      	adds	r7, #12
 800c41c:	46bd      	mov	sp, r7
 800c41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c422:	4770      	bx	lr

0800c424 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b086      	sub	sp, #24
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c42c:	2300      	movs	r3, #0
 800c42e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c430:	f107 030c 	add.w	r3, r7, #12
 800c434:	4619      	mov	r1, r3
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f000 f970 	bl	800c71c <SD_SendStatus>
 800c43c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d005      	beq.n	800c450 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	431a      	orrs	r2, r3
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	0a5b      	lsrs	r3, r3, #9
 800c454:	f003 030f 	and.w	r3, r3, #15
 800c458:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c45a:	693b      	ldr	r3, [r7, #16]
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3718      	adds	r7, #24
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}

0800c464 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c464:	b5b0      	push	{r4, r5, r7, lr}
 800c466:	b094      	sub	sp, #80	@ 0x50
 800c468:	af04      	add	r7, sp, #16
 800c46a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800c46c:	2301      	movs	r3, #1
 800c46e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	4618      	mov	r0, r3
 800c476:	f003 f89d 	bl	800f5b4 <SDMMC_GetPowerState>
 800c47a:	4603      	mov	r3, r0
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d102      	bne.n	800c486 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c480:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800c484:	e0b8      	b.n	800c5f8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c48a:	2b03      	cmp	r3, #3
 800c48c:	d02f      	beq.n	800c4ee <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	4618      	mov	r0, r3
 800c494:	f003 fa84 	bl	800f9a0 <SDMMC_CmdSendCID>
 800c498:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c49a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d001      	beq.n	800c4a4 <SD_InitCard+0x40>
    {
      return errorstate;
 800c4a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4a2:	e0a9      	b.n	800c5f8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	2100      	movs	r1, #0
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f003 f8c7 	bl	800f63e <SDMMC_GetResponse>
 800c4b0:	4602      	mov	r2, r0
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	2104      	movs	r1, #4
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f003 f8be 	bl	800f63e <SDMMC_GetResponse>
 800c4c2:	4602      	mov	r2, r0
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	2108      	movs	r1, #8
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f003 f8b5 	bl	800f63e <SDMMC_GetResponse>
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	210c      	movs	r1, #12
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f003 f8ac 	bl	800f63e <SDMMC_GetResponse>
 800c4e6:	4602      	mov	r2, r0
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4f2:	2b03      	cmp	r3, #3
 800c4f4:	d00d      	beq.n	800c512 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f107 020e 	add.w	r2, r7, #14
 800c4fe:	4611      	mov	r1, r2
 800c500:	4618      	mov	r0, r3
 800c502:	f003 fa8a 	bl	800fa1a <SDMMC_CmdSetRelAdd>
 800c506:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d001      	beq.n	800c512 <SD_InitCard+0xae>
    {
      return errorstate;
 800c50e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c510:	e072      	b.n	800c5f8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c516:	2b03      	cmp	r3, #3
 800c518:	d036      	beq.n	800c588 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c51a:	89fb      	ldrh	r3, [r7, #14]
 800c51c:	461a      	mov	r2, r3
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681a      	ldr	r2, [r3, #0]
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c52a:	041b      	lsls	r3, r3, #16
 800c52c:	4619      	mov	r1, r3
 800c52e:	4610      	mov	r0, r2
 800c530:	f003 fa54 	bl	800f9dc <SDMMC_CmdSendCSD>
 800c534:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d001      	beq.n	800c540 <SD_InitCard+0xdc>
    {
      return errorstate;
 800c53c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c53e:	e05b      	b.n	800c5f8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	2100      	movs	r1, #0
 800c546:	4618      	mov	r0, r3
 800c548:	f003 f879 	bl	800f63e <SDMMC_GetResponse>
 800c54c:	4602      	mov	r2, r0
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	2104      	movs	r1, #4
 800c558:	4618      	mov	r0, r3
 800c55a:	f003 f870 	bl	800f63e <SDMMC_GetResponse>
 800c55e:	4602      	mov	r2, r0
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	2108      	movs	r1, #8
 800c56a:	4618      	mov	r0, r3
 800c56c:	f003 f867 	bl	800f63e <SDMMC_GetResponse>
 800c570:	4602      	mov	r2, r0
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	210c      	movs	r1, #12
 800c57c:	4618      	mov	r0, r3
 800c57e:	f003 f85e 	bl	800f63e <SDMMC_GetResponse>
 800c582:	4602      	mov	r2, r0
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	2104      	movs	r1, #4
 800c58e:	4618      	mov	r0, r3
 800c590:	f003 f855 	bl	800f63e <SDMMC_GetResponse>
 800c594:	4603      	mov	r3, r0
 800c596:	0d1a      	lsrs	r2, r3, #20
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c59c:	f107 0310 	add.w	r3, r7, #16
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f7ff fd6e 	bl	800c084 <HAL_SD_GetCardCSD>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d002      	beq.n	800c5b4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c5ae:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c5b2:	e021      	b.n	800c5f8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6819      	ldr	r1, [r3, #0]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5bc:	041b      	lsls	r3, r3, #16
 800c5be:	2200      	movs	r2, #0
 800c5c0:	461c      	mov	r4, r3
 800c5c2:	4615      	mov	r5, r2
 800c5c4:	4622      	mov	r2, r4
 800c5c6:	462b      	mov	r3, r5
 800c5c8:	4608      	mov	r0, r1
 800c5ca:	f003 f943 	bl	800f854 <SDMMC_CmdSelDesel>
 800c5ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800c5d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d001      	beq.n	800c5da <SD_InitCard+0x176>
  {
    return errorstate;
 800c5d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5d8:	e00e      	b.n	800c5f8 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681d      	ldr	r5, [r3, #0]
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	466c      	mov	r4, sp
 800c5e2:	f103 0210 	add.w	r2, r3, #16
 800c5e6:	ca07      	ldmia	r2, {r0, r1, r2}
 800c5e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c5ec:	3304      	adds	r3, #4
 800c5ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c5f0:	4628      	mov	r0, r5
 800c5f2:	f002 ff87 	bl	800f504 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c5f6:	2300      	movs	r3, #0
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3740      	adds	r7, #64	@ 0x40
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bdb0      	pop	{r4, r5, r7, pc}

0800c600 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b086      	sub	sp, #24
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c608:	2300      	movs	r3, #0
 800c60a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800c60c:	2300      	movs	r3, #0
 800c60e:	617b      	str	r3, [r7, #20]
 800c610:	2300      	movs	r3, #0
 800c612:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	4618      	mov	r0, r3
 800c61a:	f003 f93e 	bl	800f89a <SDMMC_CmdGoIdleState>
 800c61e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d001      	beq.n	800c62a <SD_PowerON+0x2a>
  {
    return errorstate;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	e072      	b.n	800c710 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	4618      	mov	r0, r3
 800c630:	f003 f951 	bl	800f8d6 <SDMMC_CmdOperCond>
 800c634:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d00d      	beq.n	800c658 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2200      	movs	r2, #0
 800c640:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	4618      	mov	r0, r3
 800c648:	f003 f927 	bl	800f89a <SDMMC_CmdGoIdleState>
 800c64c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d004      	beq.n	800c65e <SD_PowerON+0x5e>
    {
      return errorstate;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	e05b      	b.n	800c710 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2201      	movs	r2, #1
 800c65c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c662:	2b01      	cmp	r3, #1
 800c664:	d137      	bne.n	800c6d6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	2100      	movs	r1, #0
 800c66c:	4618      	mov	r0, r3
 800c66e:	f003 f951 	bl	800f914 <SDMMC_CmdAppCommand>
 800c672:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d02d      	beq.n	800c6d6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c67a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c67e:	e047      	b.n	800c710 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	2100      	movs	r1, #0
 800c686:	4618      	mov	r0, r3
 800c688:	f003 f944 	bl	800f914 <SDMMC_CmdAppCommand>
 800c68c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d001      	beq.n	800c698 <SD_PowerON+0x98>
    {
      return errorstate;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	e03b      	b.n	800c710 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	491e      	ldr	r1, [pc, #120]	@ (800c718 <SD_PowerON+0x118>)
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f003 f95a 	bl	800f958 <SDMMC_CmdAppOperCommand>
 800c6a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d002      	beq.n	800c6b2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c6ac:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c6b0:	e02e      	b.n	800c710 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	2100      	movs	r1, #0
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f002 ffc0 	bl	800f63e <SDMMC_GetResponse>
 800c6be:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	0fdb      	lsrs	r3, r3, #31
 800c6c4:	2b01      	cmp	r3, #1
 800c6c6:	d101      	bne.n	800c6cc <SD_PowerON+0xcc>
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	e000      	b.n	800c6ce <SD_PowerON+0xce>
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	613b      	str	r3, [r7, #16]

    count++;
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	3301      	adds	r3, #1
 800c6d4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	d802      	bhi.n	800c6e6 <SD_PowerON+0xe6>
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d0cc      	beq.n	800c680 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d902      	bls.n	800c6f6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c6f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c6f4:	e00c      	b.n	800c710 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d003      	beq.n	800c708 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2201      	movs	r2, #1
 800c704:	645a      	str	r2, [r3, #68]	@ 0x44
 800c706:	e002      	b.n	800c70e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2200      	movs	r2, #0
 800c70c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800c70e:	2300      	movs	r3, #0
}
 800c710:	4618      	mov	r0, r3
 800c712:	3718      	adds	r7, #24
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}
 800c718:	c1100000 	.word	0xc1100000

0800c71c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b084      	sub	sp, #16
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
 800c724:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d102      	bne.n	800c732 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800c72c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c730:	e018      	b.n	800c764 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681a      	ldr	r2, [r3, #0]
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c73a:	041b      	lsls	r3, r3, #16
 800c73c:	4619      	mov	r1, r3
 800c73e:	4610      	mov	r0, r2
 800c740:	f003 f98c 	bl	800fa5c <SDMMC_CmdSendStatus>
 800c744:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d001      	beq.n	800c750 <SD_SendStatus+0x34>
  {
    return errorstate;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	e009      	b.n	800c764 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	2100      	movs	r1, #0
 800c756:	4618      	mov	r0, r3
 800c758:	f002 ff71 	bl	800f63e <SDMMC_GetResponse>
 800c75c:	4602      	mov	r2, r0
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800c762:	2300      	movs	r3, #0
}
 800c764:	4618      	mov	r0, r3
 800c766:	3710      	adds	r7, #16
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}

0800c76c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b082      	sub	sp, #8
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d101      	bne.n	800c780 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800c77c:	2301      	movs	r3, #1
 800c77e:	e025      	b.n	800c7cc <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c786:	b2db      	uxtb	r3, r3
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d106      	bne.n	800c79a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2200      	movs	r2, #0
 800c790:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f7f7 ff9f 	bl	80046d8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2202      	movs	r2, #2
 800c79e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681a      	ldr	r2, [r3, #0]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	3304      	adds	r3, #4
 800c7aa:	4619      	mov	r1, r3
 800c7ac:	4610      	mov	r0, r2
 800c7ae:	f002 fde3 	bl	800f378 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6818      	ldr	r0, [r3, #0]
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	685b      	ldr	r3, [r3, #4]
 800c7ba:	461a      	mov	r2, r3
 800c7bc:	6839      	ldr	r1, [r7, #0]
 800c7be:	f002 fe37 	bl	800f430 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2201      	movs	r2, #1
 800c7c6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800c7ca:	2300      	movs	r3, #0
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3708      	adds	r7, #8
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b084      	sub	sp, #16
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d101      	bne.n	800c7e6 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	e04c      	b.n	800c880 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c7ec:	b2db      	uxtb	r3, r3
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d106      	bne.n	800c800 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f7f7 fbf2 	bl	8003fe4 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2202      	movs	r2, #2
 800c804:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	681a      	ldr	r2, [r3, #0]
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	f022 0203 	bic.w	r2, r2, #3
 800c816:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800c820:	68fa      	ldr	r2, [r7, #12]
 800c822:	4b19      	ldr	r3, [pc, #100]	@ (800c888 <HAL_SPDIFRX_Init+0xb4>)
 800c824:	4013      	ands	r3, r2
 800c826:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800c830:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800c836:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800c83c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800c842:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800c848:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800c84e:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800c854:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800c85a:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800c860:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800c862:	68fa      	ldr	r2, [r7, #12]
 800c864:	4313      	orrs	r3, r2
 800c866:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	68fa      	ldr	r2, [r7, #12]
 800c86e:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2200      	movs	r2, #0
 800c874:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2201      	movs	r2, #1
 800c87a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800c87e:	2300      	movs	r3, #0
}
 800c880:	4618      	mov	r0, r3
 800c882:	3710      	adds	r7, #16
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}
 800c888:	fff88407 	.word	0xfff88407

0800c88c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b084      	sub	sp, #16
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d101      	bne.n	800c89e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c89a:	2301      	movs	r3, #1
 800c89c:	e09d      	b.n	800c9da <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d108      	bne.n	800c8b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	685b      	ldr	r3, [r3, #4]
 800c8aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c8ae:	d009      	beq.n	800c8c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	61da      	str	r2, [r3, #28]
 800c8b6:	e005      	b.n	800c8c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c8d0:	b2db      	uxtb	r3, r3
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d106      	bne.n	800c8e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2200      	movs	r2, #0
 800c8da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f7f7 fbe4 	bl	80040ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2202      	movs	r2, #2
 800c8e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	681a      	ldr	r2, [r3, #0]
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c8fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	68db      	ldr	r3, [r3, #12]
 800c900:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c904:	d902      	bls.n	800c90c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c906:	2300      	movs	r3, #0
 800c908:	60fb      	str	r3, [r7, #12]
 800c90a:	e002      	b.n	800c912 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c90c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c910:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	68db      	ldr	r3, [r3, #12]
 800c916:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800c91a:	d007      	beq.n	800c92c <HAL_SPI_Init+0xa0>
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	68db      	ldr	r3, [r3, #12]
 800c920:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c924:	d002      	beq.n	800c92c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2200      	movs	r2, #0
 800c92a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	685b      	ldr	r3, [r3, #4]
 800c930:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	689b      	ldr	r3, [r3, #8]
 800c938:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800c93c:	431a      	orrs	r2, r3
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	691b      	ldr	r3, [r3, #16]
 800c942:	f003 0302 	and.w	r3, r3, #2
 800c946:	431a      	orrs	r2, r3
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	695b      	ldr	r3, [r3, #20]
 800c94c:	f003 0301 	and.w	r3, r3, #1
 800c950:	431a      	orrs	r2, r3
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	699b      	ldr	r3, [r3, #24]
 800c956:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c95a:	431a      	orrs	r2, r3
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	69db      	ldr	r3, [r3, #28]
 800c960:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c964:	431a      	orrs	r2, r3
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6a1b      	ldr	r3, [r3, #32]
 800c96a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c96e:	ea42 0103 	orr.w	r1, r2, r3
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c976:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	430a      	orrs	r2, r1
 800c980:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	699b      	ldr	r3, [r3, #24]
 800c986:	0c1b      	lsrs	r3, r3, #16
 800c988:	f003 0204 	and.w	r2, r3, #4
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c990:	f003 0310 	and.w	r3, r3, #16
 800c994:	431a      	orrs	r2, r3
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c99a:	f003 0308 	and.w	r3, r3, #8
 800c99e:	431a      	orrs	r2, r3
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	68db      	ldr	r3, [r3, #12]
 800c9a4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800c9a8:	ea42 0103 	orr.w	r1, r2, r3
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	430a      	orrs	r2, r1
 800c9b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	69da      	ldr	r2, [r3, #28]
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c9c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800c9d8:	2300      	movs	r3, #0
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3710      	adds	r7, #16
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}

0800c9e2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c9e2:	b580      	push	{r7, lr}
 800c9e4:	b082      	sub	sp, #8
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d101      	bne.n	800c9f4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	e049      	b.n	800ca88 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c9fa:	b2db      	uxtb	r3, r3
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d106      	bne.n	800ca0e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2200      	movs	r2, #0
 800ca04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f7f7 fbb1 	bl	8004170 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2202      	movs	r2, #2
 800ca12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681a      	ldr	r2, [r3, #0]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	3304      	adds	r3, #4
 800ca1e:	4619      	mov	r1, r3
 800ca20:	4610      	mov	r0, r2
 800ca22:	f000 fc11 	bl	800d248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2201      	movs	r2, #1
 800ca2a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2201      	movs	r2, #1
 800ca32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2201      	movs	r2, #1
 800ca3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2201      	movs	r2, #1
 800ca42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2201      	movs	r2, #1
 800ca4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2201      	movs	r2, #1
 800ca52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2201      	movs	r2, #1
 800ca5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2201      	movs	r2, #1
 800ca62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2201      	movs	r2, #1
 800ca6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2201      	movs	r2, #1
 800ca72:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2201      	movs	r2, #1
 800ca7a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2201      	movs	r2, #1
 800ca82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ca86:	2300      	movs	r3, #0
}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	3708      	adds	r7, #8
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}

0800ca90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ca90:	b480      	push	{r7}
 800ca92:	b085      	sub	sp, #20
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ca9e:	b2db      	uxtb	r3, r3
 800caa0:	2b01      	cmp	r3, #1
 800caa2:	d001      	beq.n	800caa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800caa4:	2301      	movs	r3, #1
 800caa6:	e054      	b.n	800cb52 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2202      	movs	r2, #2
 800caac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	68da      	ldr	r2, [r3, #12]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f042 0201 	orr.w	r2, r2, #1
 800cabe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	4a26      	ldr	r2, [pc, #152]	@ (800cb60 <HAL_TIM_Base_Start_IT+0xd0>)
 800cac6:	4293      	cmp	r3, r2
 800cac8:	d022      	beq.n	800cb10 <HAL_TIM_Base_Start_IT+0x80>
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cad2:	d01d      	beq.n	800cb10 <HAL_TIM_Base_Start_IT+0x80>
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	4a22      	ldr	r2, [pc, #136]	@ (800cb64 <HAL_TIM_Base_Start_IT+0xd4>)
 800cada:	4293      	cmp	r3, r2
 800cadc:	d018      	beq.n	800cb10 <HAL_TIM_Base_Start_IT+0x80>
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	4a21      	ldr	r2, [pc, #132]	@ (800cb68 <HAL_TIM_Base_Start_IT+0xd8>)
 800cae4:	4293      	cmp	r3, r2
 800cae6:	d013      	beq.n	800cb10 <HAL_TIM_Base_Start_IT+0x80>
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	4a1f      	ldr	r2, [pc, #124]	@ (800cb6c <HAL_TIM_Base_Start_IT+0xdc>)
 800caee:	4293      	cmp	r3, r2
 800caf0:	d00e      	beq.n	800cb10 <HAL_TIM_Base_Start_IT+0x80>
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	4a1e      	ldr	r2, [pc, #120]	@ (800cb70 <HAL_TIM_Base_Start_IT+0xe0>)
 800caf8:	4293      	cmp	r3, r2
 800cafa:	d009      	beq.n	800cb10 <HAL_TIM_Base_Start_IT+0x80>
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	4a1c      	ldr	r2, [pc, #112]	@ (800cb74 <HAL_TIM_Base_Start_IT+0xe4>)
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d004      	beq.n	800cb10 <HAL_TIM_Base_Start_IT+0x80>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	4a1b      	ldr	r2, [pc, #108]	@ (800cb78 <HAL_TIM_Base_Start_IT+0xe8>)
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d115      	bne.n	800cb3c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	689a      	ldr	r2, [r3, #8]
 800cb16:	4b19      	ldr	r3, [pc, #100]	@ (800cb7c <HAL_TIM_Base_Start_IT+0xec>)
 800cb18:	4013      	ands	r3, r2
 800cb1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2b06      	cmp	r3, #6
 800cb20:	d015      	beq.n	800cb4e <HAL_TIM_Base_Start_IT+0xbe>
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cb28:	d011      	beq.n	800cb4e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	681a      	ldr	r2, [r3, #0]
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f042 0201 	orr.w	r2, r2, #1
 800cb38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb3a:	e008      	b.n	800cb4e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	681a      	ldr	r2, [r3, #0]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	f042 0201 	orr.w	r2, r2, #1
 800cb4a:	601a      	str	r2, [r3, #0]
 800cb4c:	e000      	b.n	800cb50 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cb50:	2300      	movs	r3, #0
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3714      	adds	r7, #20
 800cb56:	46bd      	mov	sp, r7
 800cb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5c:	4770      	bx	lr
 800cb5e:	bf00      	nop
 800cb60:	40010000 	.word	0x40010000
 800cb64:	40000400 	.word	0x40000400
 800cb68:	40000800 	.word	0x40000800
 800cb6c:	40000c00 	.word	0x40000c00
 800cb70:	40010400 	.word	0x40010400
 800cb74:	40014000 	.word	0x40014000
 800cb78:	40001800 	.word	0x40001800
 800cb7c:	00010007 	.word	0x00010007

0800cb80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b082      	sub	sp, #8
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d101      	bne.n	800cb92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cb8e:	2301      	movs	r3, #1
 800cb90:	e049      	b.n	800cc26 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cb98:	b2db      	uxtb	r3, r3
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d106      	bne.n	800cbac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2200      	movs	r2, #0
 800cba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f7f7 fb50 	bl	800424c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2202      	movs	r2, #2
 800cbb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681a      	ldr	r2, [r3, #0]
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	3304      	adds	r3, #4
 800cbbc:	4619      	mov	r1, r3
 800cbbe:	4610      	mov	r0, r2
 800cbc0:	f000 fb42 	bl	800d248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2201      	movs	r2, #1
 800cbc8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2201      	movs	r2, #1
 800cbd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2201      	movs	r2, #1
 800cbd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2201      	movs	r2, #1
 800cbe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2201      	movs	r2, #1
 800cbf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2201      	movs	r2, #1
 800cbf8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2201      	movs	r2, #1
 800cc00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2201      	movs	r2, #1
 800cc08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2201      	movs	r2, #1
 800cc10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2201      	movs	r2, #1
 800cc18:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2201      	movs	r2, #1
 800cc20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800cc24:	2300      	movs	r3, #0
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3708      	adds	r7, #8
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}

0800cc2e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cc2e:	b580      	push	{r7, lr}
 800cc30:	b084      	sub	sp, #16
 800cc32:	af00      	add	r7, sp, #0
 800cc34:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	68db      	ldr	r3, [r3, #12]
 800cc3c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	691b      	ldr	r3, [r3, #16]
 800cc44:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800cc46:	68bb      	ldr	r3, [r7, #8]
 800cc48:	f003 0302 	and.w	r3, r3, #2
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d020      	beq.n	800cc92 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	f003 0302 	and.w	r3, r3, #2
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d01b      	beq.n	800cc92 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	f06f 0202 	mvn.w	r2, #2
 800cc62:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2201      	movs	r2, #1
 800cc68:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	699b      	ldr	r3, [r3, #24]
 800cc70:	f003 0303 	and.w	r3, r3, #3
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d003      	beq.n	800cc80 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f000 fac7 	bl	800d20c <HAL_TIM_IC_CaptureCallback>
 800cc7e:	e005      	b.n	800cc8c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f000 fab9 	bl	800d1f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f000 faca 	bl	800d220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	f003 0304 	and.w	r3, r3, #4
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d020      	beq.n	800ccde <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	f003 0304 	and.w	r3, r3, #4
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d01b      	beq.n	800ccde <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f06f 0204 	mvn.w	r2, #4
 800ccae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2202      	movs	r2, #2
 800ccb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	699b      	ldr	r3, [r3, #24]
 800ccbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d003      	beq.n	800cccc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f000 faa1 	bl	800d20c <HAL_TIM_IC_CaptureCallback>
 800ccca:	e005      	b.n	800ccd8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f000 fa93 	bl	800d1f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f000 faa4 	bl	800d220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	f003 0308 	and.w	r3, r3, #8
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d020      	beq.n	800cd2a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	f003 0308 	and.w	r3, r3, #8
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d01b      	beq.n	800cd2a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	f06f 0208 	mvn.w	r2, #8
 800ccfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2204      	movs	r2, #4
 800cd00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	69db      	ldr	r3, [r3, #28]
 800cd08:	f003 0303 	and.w	r3, r3, #3
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d003      	beq.n	800cd18 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f000 fa7b 	bl	800d20c <HAL_TIM_IC_CaptureCallback>
 800cd16:	e005      	b.n	800cd24 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f000 fa6d 	bl	800d1f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f000 fa7e 	bl	800d220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2200      	movs	r2, #0
 800cd28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	f003 0310 	and.w	r3, r3, #16
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d020      	beq.n	800cd76 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	f003 0310 	and.w	r3, r3, #16
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d01b      	beq.n	800cd76 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f06f 0210 	mvn.w	r2, #16
 800cd46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2208      	movs	r2, #8
 800cd4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	69db      	ldr	r3, [r3, #28]
 800cd54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d003      	beq.n	800cd64 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f000 fa55 	bl	800d20c <HAL_TIM_IC_CaptureCallback>
 800cd62:	e005      	b.n	800cd70 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f000 fa47 	bl	800d1f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f000 fa58 	bl	800d220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2200      	movs	r2, #0
 800cd74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	f003 0301 	and.w	r3, r3, #1
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d00c      	beq.n	800cd9a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	f003 0301 	and.w	r3, r3, #1
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d007      	beq.n	800cd9a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	f06f 0201 	mvn.w	r2, #1
 800cd92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f7f6 fbf3 	bl	8003580 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d104      	bne.n	800cdae <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d00c      	beq.n	800cdc8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d007      	beq.n	800cdc8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800cdc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f000 fef4 	bl	800dbb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d00c      	beq.n	800cdec <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d007      	beq.n	800cdec <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800cde4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	f000 feec 	bl	800dbc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d00c      	beq.n	800ce10 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d007      	beq.n	800ce10 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ce08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f000 fa12 	bl	800d234 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	f003 0320 	and.w	r3, r3, #32
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d00c      	beq.n	800ce34 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	f003 0320 	and.w	r3, r3, #32
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d007      	beq.n	800ce34 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	f06f 0220 	mvn.w	r2, #32
 800ce2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f000 feb4 	bl	800db9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ce34:	bf00      	nop
 800ce36:	3710      	adds	r7, #16
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}

0800ce3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b086      	sub	sp, #24
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	60f8      	str	r0, [r7, #12]
 800ce44:	60b9      	str	r1, [r7, #8]
 800ce46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ce52:	2b01      	cmp	r3, #1
 800ce54:	d101      	bne.n	800ce5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ce56:	2302      	movs	r3, #2
 800ce58:	e0ff      	b.n	800d05a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	2201      	movs	r2, #1
 800ce5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2b14      	cmp	r3, #20
 800ce66:	f200 80f0 	bhi.w	800d04a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ce6a:	a201      	add	r2, pc, #4	@ (adr r2, 800ce70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ce6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce70:	0800cec5 	.word	0x0800cec5
 800ce74:	0800d04b 	.word	0x0800d04b
 800ce78:	0800d04b 	.word	0x0800d04b
 800ce7c:	0800d04b 	.word	0x0800d04b
 800ce80:	0800cf05 	.word	0x0800cf05
 800ce84:	0800d04b 	.word	0x0800d04b
 800ce88:	0800d04b 	.word	0x0800d04b
 800ce8c:	0800d04b 	.word	0x0800d04b
 800ce90:	0800cf47 	.word	0x0800cf47
 800ce94:	0800d04b 	.word	0x0800d04b
 800ce98:	0800d04b 	.word	0x0800d04b
 800ce9c:	0800d04b 	.word	0x0800d04b
 800cea0:	0800cf87 	.word	0x0800cf87
 800cea4:	0800d04b 	.word	0x0800d04b
 800cea8:	0800d04b 	.word	0x0800d04b
 800ceac:	0800d04b 	.word	0x0800d04b
 800ceb0:	0800cfc9 	.word	0x0800cfc9
 800ceb4:	0800d04b 	.word	0x0800d04b
 800ceb8:	0800d04b 	.word	0x0800d04b
 800cebc:	0800d04b 	.word	0x0800d04b
 800cec0:	0800d009 	.word	0x0800d009
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	68b9      	ldr	r1, [r7, #8]
 800ceca:	4618      	mov	r0, r3
 800cecc:	f000 fa62 	bl	800d394 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	699a      	ldr	r2, [r3, #24]
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f042 0208 	orr.w	r2, r2, #8
 800cede:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	699a      	ldr	r2, [r3, #24]
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	f022 0204 	bic.w	r2, r2, #4
 800ceee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	6999      	ldr	r1, [r3, #24]
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	691a      	ldr	r2, [r3, #16]
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	430a      	orrs	r2, r1
 800cf00:	619a      	str	r2, [r3, #24]
      break;
 800cf02:	e0a5      	b.n	800d050 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	68b9      	ldr	r1, [r7, #8]
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f000 fab4 	bl	800d478 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	699a      	ldr	r2, [r3, #24]
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cf1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	699a      	ldr	r2, [r3, #24]
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cf2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	6999      	ldr	r1, [r3, #24]
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	691b      	ldr	r3, [r3, #16]
 800cf3a:	021a      	lsls	r2, r3, #8
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	430a      	orrs	r2, r1
 800cf42:	619a      	str	r2, [r3, #24]
      break;
 800cf44:	e084      	b.n	800d050 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	68b9      	ldr	r1, [r7, #8]
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f000 fb0b 	bl	800d568 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	69da      	ldr	r2, [r3, #28]
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	f042 0208 	orr.w	r2, r2, #8
 800cf60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	69da      	ldr	r2, [r3, #28]
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	f022 0204 	bic.w	r2, r2, #4
 800cf70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	69d9      	ldr	r1, [r3, #28]
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	691a      	ldr	r2, [r3, #16]
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	430a      	orrs	r2, r1
 800cf82:	61da      	str	r2, [r3, #28]
      break;
 800cf84:	e064      	b.n	800d050 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	68b9      	ldr	r1, [r7, #8]
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f000 fb61 	bl	800d654 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	69da      	ldr	r2, [r3, #28]
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cfa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	69da      	ldr	r2, [r3, #28]
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cfb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	69d9      	ldr	r1, [r3, #28]
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	691b      	ldr	r3, [r3, #16]
 800cfbc:	021a      	lsls	r2, r3, #8
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	430a      	orrs	r2, r1
 800cfc4:	61da      	str	r2, [r3, #28]
      break;
 800cfc6:	e043      	b.n	800d050 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	68b9      	ldr	r1, [r7, #8]
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f000 fb98 	bl	800d704 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	f042 0208 	orr.w	r2, r2, #8
 800cfe2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f022 0204 	bic.w	r2, r2, #4
 800cff2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	691a      	ldr	r2, [r3, #16]
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	430a      	orrs	r2, r1
 800d004:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d006:	e023      	b.n	800d050 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	68b9      	ldr	r1, [r7, #8]
 800d00e:	4618      	mov	r0, r3
 800d010:	f000 fbca 	bl	800d7a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d022:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d032:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	691b      	ldr	r3, [r3, #16]
 800d03e:	021a      	lsls	r2, r3, #8
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	430a      	orrs	r2, r1
 800d046:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d048:	e002      	b.n	800d050 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d04a:	2301      	movs	r3, #1
 800d04c:	75fb      	strb	r3, [r7, #23]
      break;
 800d04e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	2200      	movs	r2, #0
 800d054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d058:	7dfb      	ldrb	r3, [r7, #23]
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3718      	adds	r7, #24
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
 800d062:	bf00      	nop

0800d064 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b084      	sub	sp, #16
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
 800d06c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d06e:	2300      	movs	r3, #0
 800d070:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d078:	2b01      	cmp	r3, #1
 800d07a:	d101      	bne.n	800d080 <HAL_TIM_ConfigClockSource+0x1c>
 800d07c:	2302      	movs	r3, #2
 800d07e:	e0b4      	b.n	800d1ea <HAL_TIM_ConfigClockSource+0x186>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2201      	movs	r2, #1
 800d084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2202      	movs	r2, #2
 800d08c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	689b      	ldr	r3, [r3, #8]
 800d096:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d098:	68ba      	ldr	r2, [r7, #8]
 800d09a:	4b56      	ldr	r3, [pc, #344]	@ (800d1f4 <HAL_TIM_ConfigClockSource+0x190>)
 800d09c:	4013      	ands	r3, r2
 800d09e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d0a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	68ba      	ldr	r2, [r7, #8]
 800d0ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d0b8:	d03e      	beq.n	800d138 <HAL_TIM_ConfigClockSource+0xd4>
 800d0ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d0be:	f200 8087 	bhi.w	800d1d0 <HAL_TIM_ConfigClockSource+0x16c>
 800d0c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d0c6:	f000 8086 	beq.w	800d1d6 <HAL_TIM_ConfigClockSource+0x172>
 800d0ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d0ce:	d87f      	bhi.n	800d1d0 <HAL_TIM_ConfigClockSource+0x16c>
 800d0d0:	2b70      	cmp	r3, #112	@ 0x70
 800d0d2:	d01a      	beq.n	800d10a <HAL_TIM_ConfigClockSource+0xa6>
 800d0d4:	2b70      	cmp	r3, #112	@ 0x70
 800d0d6:	d87b      	bhi.n	800d1d0 <HAL_TIM_ConfigClockSource+0x16c>
 800d0d8:	2b60      	cmp	r3, #96	@ 0x60
 800d0da:	d050      	beq.n	800d17e <HAL_TIM_ConfigClockSource+0x11a>
 800d0dc:	2b60      	cmp	r3, #96	@ 0x60
 800d0de:	d877      	bhi.n	800d1d0 <HAL_TIM_ConfigClockSource+0x16c>
 800d0e0:	2b50      	cmp	r3, #80	@ 0x50
 800d0e2:	d03c      	beq.n	800d15e <HAL_TIM_ConfigClockSource+0xfa>
 800d0e4:	2b50      	cmp	r3, #80	@ 0x50
 800d0e6:	d873      	bhi.n	800d1d0 <HAL_TIM_ConfigClockSource+0x16c>
 800d0e8:	2b40      	cmp	r3, #64	@ 0x40
 800d0ea:	d058      	beq.n	800d19e <HAL_TIM_ConfigClockSource+0x13a>
 800d0ec:	2b40      	cmp	r3, #64	@ 0x40
 800d0ee:	d86f      	bhi.n	800d1d0 <HAL_TIM_ConfigClockSource+0x16c>
 800d0f0:	2b30      	cmp	r3, #48	@ 0x30
 800d0f2:	d064      	beq.n	800d1be <HAL_TIM_ConfigClockSource+0x15a>
 800d0f4:	2b30      	cmp	r3, #48	@ 0x30
 800d0f6:	d86b      	bhi.n	800d1d0 <HAL_TIM_ConfigClockSource+0x16c>
 800d0f8:	2b20      	cmp	r3, #32
 800d0fa:	d060      	beq.n	800d1be <HAL_TIM_ConfigClockSource+0x15a>
 800d0fc:	2b20      	cmp	r3, #32
 800d0fe:	d867      	bhi.n	800d1d0 <HAL_TIM_ConfigClockSource+0x16c>
 800d100:	2b00      	cmp	r3, #0
 800d102:	d05c      	beq.n	800d1be <HAL_TIM_ConfigClockSource+0x15a>
 800d104:	2b10      	cmp	r3, #16
 800d106:	d05a      	beq.n	800d1be <HAL_TIM_ConfigClockSource+0x15a>
 800d108:	e062      	b.n	800d1d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d11a:	f000 fc13 	bl	800d944 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	689b      	ldr	r3, [r3, #8]
 800d124:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d12c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	68ba      	ldr	r2, [r7, #8]
 800d134:	609a      	str	r2, [r3, #8]
      break;
 800d136:	e04f      	b.n	800d1d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d148:	f000 fbfc 	bl	800d944 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	689a      	ldr	r2, [r3, #8]
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d15a:	609a      	str	r2, [r3, #8]
      break;
 800d15c:	e03c      	b.n	800d1d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d16a:	461a      	mov	r2, r3
 800d16c:	f000 fb70 	bl	800d850 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	2150      	movs	r1, #80	@ 0x50
 800d176:	4618      	mov	r0, r3
 800d178:	f000 fbc9 	bl	800d90e <TIM_ITRx_SetConfig>
      break;
 800d17c:	e02c      	b.n	800d1d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d18a:	461a      	mov	r2, r3
 800d18c:	f000 fb8f 	bl	800d8ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	2160      	movs	r1, #96	@ 0x60
 800d196:	4618      	mov	r0, r3
 800d198:	f000 fbb9 	bl	800d90e <TIM_ITRx_SetConfig>
      break;
 800d19c:	e01c      	b.n	800d1d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d1aa:	461a      	mov	r2, r3
 800d1ac:	f000 fb50 	bl	800d850 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	2140      	movs	r1, #64	@ 0x40
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f000 fba9 	bl	800d90e <TIM_ITRx_SetConfig>
      break;
 800d1bc:	e00c      	b.n	800d1d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681a      	ldr	r2, [r3, #0]
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	4619      	mov	r1, r3
 800d1c8:	4610      	mov	r0, r2
 800d1ca:	f000 fba0 	bl	800d90e <TIM_ITRx_SetConfig>
      break;
 800d1ce:	e003      	b.n	800d1d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	73fb      	strb	r3, [r7, #15]
      break;
 800d1d4:	e000      	b.n	800d1d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d1d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2201      	movs	r2, #1
 800d1dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d1e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3710      	adds	r7, #16
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}
 800d1f2:	bf00      	nop
 800d1f4:	fffeff88 	.word	0xfffeff88

0800d1f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d1f8:	b480      	push	{r7}
 800d1fa:	b083      	sub	sp, #12
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d200:	bf00      	nop
 800d202:	370c      	adds	r7, #12
 800d204:	46bd      	mov	sp, r7
 800d206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20a:	4770      	bx	lr

0800d20c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d20c:	b480      	push	{r7}
 800d20e:	b083      	sub	sp, #12
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d214:	bf00      	nop
 800d216:	370c      	adds	r7, #12
 800d218:	46bd      	mov	sp, r7
 800d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21e:	4770      	bx	lr

0800d220 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d220:	b480      	push	{r7}
 800d222:	b083      	sub	sp, #12
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d228:	bf00      	nop
 800d22a:	370c      	adds	r7, #12
 800d22c:	46bd      	mov	sp, r7
 800d22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d232:	4770      	bx	lr

0800d234 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d234:	b480      	push	{r7}
 800d236:	b083      	sub	sp, #12
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d23c:	bf00      	nop
 800d23e:	370c      	adds	r7, #12
 800d240:	46bd      	mov	sp, r7
 800d242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d246:	4770      	bx	lr

0800d248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d248:	b480      	push	{r7}
 800d24a:	b085      	sub	sp, #20
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	4a43      	ldr	r2, [pc, #268]	@ (800d368 <TIM_Base_SetConfig+0x120>)
 800d25c:	4293      	cmp	r3, r2
 800d25e:	d013      	beq.n	800d288 <TIM_Base_SetConfig+0x40>
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d266:	d00f      	beq.n	800d288 <TIM_Base_SetConfig+0x40>
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	4a40      	ldr	r2, [pc, #256]	@ (800d36c <TIM_Base_SetConfig+0x124>)
 800d26c:	4293      	cmp	r3, r2
 800d26e:	d00b      	beq.n	800d288 <TIM_Base_SetConfig+0x40>
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	4a3f      	ldr	r2, [pc, #252]	@ (800d370 <TIM_Base_SetConfig+0x128>)
 800d274:	4293      	cmp	r3, r2
 800d276:	d007      	beq.n	800d288 <TIM_Base_SetConfig+0x40>
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	4a3e      	ldr	r2, [pc, #248]	@ (800d374 <TIM_Base_SetConfig+0x12c>)
 800d27c:	4293      	cmp	r3, r2
 800d27e:	d003      	beq.n	800d288 <TIM_Base_SetConfig+0x40>
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	4a3d      	ldr	r2, [pc, #244]	@ (800d378 <TIM_Base_SetConfig+0x130>)
 800d284:	4293      	cmp	r3, r2
 800d286:	d108      	bne.n	800d29a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d28e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	685b      	ldr	r3, [r3, #4]
 800d294:	68fa      	ldr	r2, [r7, #12]
 800d296:	4313      	orrs	r3, r2
 800d298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	4a32      	ldr	r2, [pc, #200]	@ (800d368 <TIM_Base_SetConfig+0x120>)
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d02b      	beq.n	800d2fa <TIM_Base_SetConfig+0xb2>
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d2a8:	d027      	beq.n	800d2fa <TIM_Base_SetConfig+0xb2>
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	4a2f      	ldr	r2, [pc, #188]	@ (800d36c <TIM_Base_SetConfig+0x124>)
 800d2ae:	4293      	cmp	r3, r2
 800d2b0:	d023      	beq.n	800d2fa <TIM_Base_SetConfig+0xb2>
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	4a2e      	ldr	r2, [pc, #184]	@ (800d370 <TIM_Base_SetConfig+0x128>)
 800d2b6:	4293      	cmp	r3, r2
 800d2b8:	d01f      	beq.n	800d2fa <TIM_Base_SetConfig+0xb2>
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	4a2d      	ldr	r2, [pc, #180]	@ (800d374 <TIM_Base_SetConfig+0x12c>)
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d01b      	beq.n	800d2fa <TIM_Base_SetConfig+0xb2>
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	4a2c      	ldr	r2, [pc, #176]	@ (800d378 <TIM_Base_SetConfig+0x130>)
 800d2c6:	4293      	cmp	r3, r2
 800d2c8:	d017      	beq.n	800d2fa <TIM_Base_SetConfig+0xb2>
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	4a2b      	ldr	r2, [pc, #172]	@ (800d37c <TIM_Base_SetConfig+0x134>)
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	d013      	beq.n	800d2fa <TIM_Base_SetConfig+0xb2>
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	4a2a      	ldr	r2, [pc, #168]	@ (800d380 <TIM_Base_SetConfig+0x138>)
 800d2d6:	4293      	cmp	r3, r2
 800d2d8:	d00f      	beq.n	800d2fa <TIM_Base_SetConfig+0xb2>
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	4a29      	ldr	r2, [pc, #164]	@ (800d384 <TIM_Base_SetConfig+0x13c>)
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d00b      	beq.n	800d2fa <TIM_Base_SetConfig+0xb2>
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	4a28      	ldr	r2, [pc, #160]	@ (800d388 <TIM_Base_SetConfig+0x140>)
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d007      	beq.n	800d2fa <TIM_Base_SetConfig+0xb2>
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	4a27      	ldr	r2, [pc, #156]	@ (800d38c <TIM_Base_SetConfig+0x144>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d003      	beq.n	800d2fa <TIM_Base_SetConfig+0xb2>
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	4a26      	ldr	r2, [pc, #152]	@ (800d390 <TIM_Base_SetConfig+0x148>)
 800d2f6:	4293      	cmp	r3, r2
 800d2f8:	d108      	bne.n	800d30c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	68db      	ldr	r3, [r3, #12]
 800d306:	68fa      	ldr	r2, [r7, #12]
 800d308:	4313      	orrs	r3, r2
 800d30a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	695b      	ldr	r3, [r3, #20]
 800d316:	4313      	orrs	r3, r2
 800d318:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	689a      	ldr	r2, [r3, #8]
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	681a      	ldr	r2, [r3, #0]
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	4a0e      	ldr	r2, [pc, #56]	@ (800d368 <TIM_Base_SetConfig+0x120>)
 800d32e:	4293      	cmp	r3, r2
 800d330:	d003      	beq.n	800d33a <TIM_Base_SetConfig+0xf2>
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	4a10      	ldr	r2, [pc, #64]	@ (800d378 <TIM_Base_SetConfig+0x130>)
 800d336:	4293      	cmp	r3, r2
 800d338:	d103      	bne.n	800d342 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	691a      	ldr	r2, [r3, #16]
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	f043 0204 	orr.w	r2, r3, #4
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2201      	movs	r2, #1
 800d352:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	68fa      	ldr	r2, [r7, #12]
 800d358:	601a      	str	r2, [r3, #0]
}
 800d35a:	bf00      	nop
 800d35c:	3714      	adds	r7, #20
 800d35e:	46bd      	mov	sp, r7
 800d360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d364:	4770      	bx	lr
 800d366:	bf00      	nop
 800d368:	40010000 	.word	0x40010000
 800d36c:	40000400 	.word	0x40000400
 800d370:	40000800 	.word	0x40000800
 800d374:	40000c00 	.word	0x40000c00
 800d378:	40010400 	.word	0x40010400
 800d37c:	40014000 	.word	0x40014000
 800d380:	40014400 	.word	0x40014400
 800d384:	40014800 	.word	0x40014800
 800d388:	40001800 	.word	0x40001800
 800d38c:	40001c00 	.word	0x40001c00
 800d390:	40002000 	.word	0x40002000

0800d394 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d394:	b480      	push	{r7}
 800d396:	b087      	sub	sp, #28
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
 800d39c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6a1b      	ldr	r3, [r3, #32]
 800d3a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	6a1b      	ldr	r3, [r3, #32]
 800d3a8:	f023 0201 	bic.w	r2, r3, #1
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	685b      	ldr	r3, [r3, #4]
 800d3b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	699b      	ldr	r3, [r3, #24]
 800d3ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d3bc:	68fa      	ldr	r2, [r7, #12]
 800d3be:	4b2b      	ldr	r3, [pc, #172]	@ (800d46c <TIM_OC1_SetConfig+0xd8>)
 800d3c0:	4013      	ands	r3, r2
 800d3c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	f023 0303 	bic.w	r3, r3, #3
 800d3ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	68fa      	ldr	r2, [r7, #12]
 800d3d2:	4313      	orrs	r3, r2
 800d3d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d3d6:	697b      	ldr	r3, [r7, #20]
 800d3d8:	f023 0302 	bic.w	r3, r3, #2
 800d3dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	689b      	ldr	r3, [r3, #8]
 800d3e2:	697a      	ldr	r2, [r7, #20]
 800d3e4:	4313      	orrs	r3, r2
 800d3e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	4a21      	ldr	r2, [pc, #132]	@ (800d470 <TIM_OC1_SetConfig+0xdc>)
 800d3ec:	4293      	cmp	r3, r2
 800d3ee:	d003      	beq.n	800d3f8 <TIM_OC1_SetConfig+0x64>
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	4a20      	ldr	r2, [pc, #128]	@ (800d474 <TIM_OC1_SetConfig+0xe0>)
 800d3f4:	4293      	cmp	r3, r2
 800d3f6:	d10c      	bne.n	800d412 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d3f8:	697b      	ldr	r3, [r7, #20]
 800d3fa:	f023 0308 	bic.w	r3, r3, #8
 800d3fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	68db      	ldr	r3, [r3, #12]
 800d404:	697a      	ldr	r2, [r7, #20]
 800d406:	4313      	orrs	r3, r2
 800d408:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	f023 0304 	bic.w	r3, r3, #4
 800d410:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	4a16      	ldr	r2, [pc, #88]	@ (800d470 <TIM_OC1_SetConfig+0xdc>)
 800d416:	4293      	cmp	r3, r2
 800d418:	d003      	beq.n	800d422 <TIM_OC1_SetConfig+0x8e>
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	4a15      	ldr	r2, [pc, #84]	@ (800d474 <TIM_OC1_SetConfig+0xe0>)
 800d41e:	4293      	cmp	r3, r2
 800d420:	d111      	bne.n	800d446 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d422:	693b      	ldr	r3, [r7, #16]
 800d424:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d428:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d430:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	695b      	ldr	r3, [r3, #20]
 800d436:	693a      	ldr	r2, [r7, #16]
 800d438:	4313      	orrs	r3, r2
 800d43a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	699b      	ldr	r3, [r3, #24]
 800d440:	693a      	ldr	r2, [r7, #16]
 800d442:	4313      	orrs	r3, r2
 800d444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	693a      	ldr	r2, [r7, #16]
 800d44a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	68fa      	ldr	r2, [r7, #12]
 800d450:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	685a      	ldr	r2, [r3, #4]
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	697a      	ldr	r2, [r7, #20]
 800d45e:	621a      	str	r2, [r3, #32]
}
 800d460:	bf00      	nop
 800d462:	371c      	adds	r7, #28
 800d464:	46bd      	mov	sp, r7
 800d466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46a:	4770      	bx	lr
 800d46c:	fffeff8f 	.word	0xfffeff8f
 800d470:	40010000 	.word	0x40010000
 800d474:	40010400 	.word	0x40010400

0800d478 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d478:	b480      	push	{r7}
 800d47a:	b087      	sub	sp, #28
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
 800d480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6a1b      	ldr	r3, [r3, #32]
 800d486:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	6a1b      	ldr	r3, [r3, #32]
 800d48c:	f023 0210 	bic.w	r2, r3, #16
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	685b      	ldr	r3, [r3, #4]
 800d498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	699b      	ldr	r3, [r3, #24]
 800d49e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d4a0:	68fa      	ldr	r2, [r7, #12]
 800d4a2:	4b2e      	ldr	r3, [pc, #184]	@ (800d55c <TIM_OC2_SetConfig+0xe4>)
 800d4a4:	4013      	ands	r3, r2
 800d4a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d4ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	021b      	lsls	r3, r3, #8
 800d4b6:	68fa      	ldr	r2, [r7, #12]
 800d4b8:	4313      	orrs	r3, r2
 800d4ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	f023 0320 	bic.w	r3, r3, #32
 800d4c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	689b      	ldr	r3, [r3, #8]
 800d4c8:	011b      	lsls	r3, r3, #4
 800d4ca:	697a      	ldr	r2, [r7, #20]
 800d4cc:	4313      	orrs	r3, r2
 800d4ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	4a23      	ldr	r2, [pc, #140]	@ (800d560 <TIM_OC2_SetConfig+0xe8>)
 800d4d4:	4293      	cmp	r3, r2
 800d4d6:	d003      	beq.n	800d4e0 <TIM_OC2_SetConfig+0x68>
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	4a22      	ldr	r2, [pc, #136]	@ (800d564 <TIM_OC2_SetConfig+0xec>)
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	d10d      	bne.n	800d4fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d4e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	68db      	ldr	r3, [r3, #12]
 800d4ec:	011b      	lsls	r3, r3, #4
 800d4ee:	697a      	ldr	r2, [r7, #20]
 800d4f0:	4313      	orrs	r3, r2
 800d4f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d4fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	4a18      	ldr	r2, [pc, #96]	@ (800d560 <TIM_OC2_SetConfig+0xe8>)
 800d500:	4293      	cmp	r3, r2
 800d502:	d003      	beq.n	800d50c <TIM_OC2_SetConfig+0x94>
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	4a17      	ldr	r2, [pc, #92]	@ (800d564 <TIM_OC2_SetConfig+0xec>)
 800d508:	4293      	cmp	r3, r2
 800d50a:	d113      	bne.n	800d534 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d50c:	693b      	ldr	r3, [r7, #16]
 800d50e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d512:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d514:	693b      	ldr	r3, [r7, #16]
 800d516:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d51a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	695b      	ldr	r3, [r3, #20]
 800d520:	009b      	lsls	r3, r3, #2
 800d522:	693a      	ldr	r2, [r7, #16]
 800d524:	4313      	orrs	r3, r2
 800d526:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	699b      	ldr	r3, [r3, #24]
 800d52c:	009b      	lsls	r3, r3, #2
 800d52e:	693a      	ldr	r2, [r7, #16]
 800d530:	4313      	orrs	r3, r2
 800d532:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	693a      	ldr	r2, [r7, #16]
 800d538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	68fa      	ldr	r2, [r7, #12]
 800d53e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	685a      	ldr	r2, [r3, #4]
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	697a      	ldr	r2, [r7, #20]
 800d54c:	621a      	str	r2, [r3, #32]
}
 800d54e:	bf00      	nop
 800d550:	371c      	adds	r7, #28
 800d552:	46bd      	mov	sp, r7
 800d554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d558:	4770      	bx	lr
 800d55a:	bf00      	nop
 800d55c:	feff8fff 	.word	0xfeff8fff
 800d560:	40010000 	.word	0x40010000
 800d564:	40010400 	.word	0x40010400

0800d568 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d568:	b480      	push	{r7}
 800d56a:	b087      	sub	sp, #28
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
 800d570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6a1b      	ldr	r3, [r3, #32]
 800d576:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	6a1b      	ldr	r3, [r3, #32]
 800d57c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	685b      	ldr	r3, [r3, #4]
 800d588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	69db      	ldr	r3, [r3, #28]
 800d58e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d590:	68fa      	ldr	r2, [r7, #12]
 800d592:	4b2d      	ldr	r3, [pc, #180]	@ (800d648 <TIM_OC3_SetConfig+0xe0>)
 800d594:	4013      	ands	r3, r2
 800d596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	f023 0303 	bic.w	r3, r3, #3
 800d59e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	68fa      	ldr	r2, [r7, #12]
 800d5a6:	4313      	orrs	r3, r2
 800d5a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d5aa:	697b      	ldr	r3, [r7, #20]
 800d5ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d5b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	689b      	ldr	r3, [r3, #8]
 800d5b6:	021b      	lsls	r3, r3, #8
 800d5b8:	697a      	ldr	r2, [r7, #20]
 800d5ba:	4313      	orrs	r3, r2
 800d5bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	4a22      	ldr	r2, [pc, #136]	@ (800d64c <TIM_OC3_SetConfig+0xe4>)
 800d5c2:	4293      	cmp	r3, r2
 800d5c4:	d003      	beq.n	800d5ce <TIM_OC3_SetConfig+0x66>
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	4a21      	ldr	r2, [pc, #132]	@ (800d650 <TIM_OC3_SetConfig+0xe8>)
 800d5ca:	4293      	cmp	r3, r2
 800d5cc:	d10d      	bne.n	800d5ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d5d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	68db      	ldr	r3, [r3, #12]
 800d5da:	021b      	lsls	r3, r3, #8
 800d5dc:	697a      	ldr	r2, [r7, #20]
 800d5de:	4313      	orrs	r3, r2
 800d5e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d5e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	4a17      	ldr	r2, [pc, #92]	@ (800d64c <TIM_OC3_SetConfig+0xe4>)
 800d5ee:	4293      	cmp	r3, r2
 800d5f0:	d003      	beq.n	800d5fa <TIM_OC3_SetConfig+0x92>
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	4a16      	ldr	r2, [pc, #88]	@ (800d650 <TIM_OC3_SetConfig+0xe8>)
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	d113      	bne.n	800d622 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d5fa:	693b      	ldr	r3, [r7, #16]
 800d5fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d602:	693b      	ldr	r3, [r7, #16]
 800d604:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	695b      	ldr	r3, [r3, #20]
 800d60e:	011b      	lsls	r3, r3, #4
 800d610:	693a      	ldr	r2, [r7, #16]
 800d612:	4313      	orrs	r3, r2
 800d614:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	699b      	ldr	r3, [r3, #24]
 800d61a:	011b      	lsls	r3, r3, #4
 800d61c:	693a      	ldr	r2, [r7, #16]
 800d61e:	4313      	orrs	r3, r2
 800d620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	693a      	ldr	r2, [r7, #16]
 800d626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	68fa      	ldr	r2, [r7, #12]
 800d62c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	685a      	ldr	r2, [r3, #4]
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	697a      	ldr	r2, [r7, #20]
 800d63a:	621a      	str	r2, [r3, #32]
}
 800d63c:	bf00      	nop
 800d63e:	371c      	adds	r7, #28
 800d640:	46bd      	mov	sp, r7
 800d642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d646:	4770      	bx	lr
 800d648:	fffeff8f 	.word	0xfffeff8f
 800d64c:	40010000 	.word	0x40010000
 800d650:	40010400 	.word	0x40010400

0800d654 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d654:	b480      	push	{r7}
 800d656:	b087      	sub	sp, #28
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
 800d65c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6a1b      	ldr	r3, [r3, #32]
 800d662:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	6a1b      	ldr	r3, [r3, #32]
 800d668:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	685b      	ldr	r3, [r3, #4]
 800d674:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	69db      	ldr	r3, [r3, #28]
 800d67a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d67c:	68fa      	ldr	r2, [r7, #12]
 800d67e:	4b1e      	ldr	r3, [pc, #120]	@ (800d6f8 <TIM_OC4_SetConfig+0xa4>)
 800d680:	4013      	ands	r3, r2
 800d682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d68a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	021b      	lsls	r3, r3, #8
 800d692:	68fa      	ldr	r2, [r7, #12]
 800d694:	4313      	orrs	r3, r2
 800d696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d69e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	689b      	ldr	r3, [r3, #8]
 800d6a4:	031b      	lsls	r3, r3, #12
 800d6a6:	693a      	ldr	r2, [r7, #16]
 800d6a8:	4313      	orrs	r3, r2
 800d6aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	4a13      	ldr	r2, [pc, #76]	@ (800d6fc <TIM_OC4_SetConfig+0xa8>)
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d003      	beq.n	800d6bc <TIM_OC4_SetConfig+0x68>
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	4a12      	ldr	r2, [pc, #72]	@ (800d700 <TIM_OC4_SetConfig+0xac>)
 800d6b8:	4293      	cmp	r3, r2
 800d6ba:	d109      	bne.n	800d6d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d6bc:	697b      	ldr	r3, [r7, #20]
 800d6be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d6c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	695b      	ldr	r3, [r3, #20]
 800d6c8:	019b      	lsls	r3, r3, #6
 800d6ca:	697a      	ldr	r2, [r7, #20]
 800d6cc:	4313      	orrs	r3, r2
 800d6ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	697a      	ldr	r2, [r7, #20]
 800d6d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	68fa      	ldr	r2, [r7, #12]
 800d6da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	685a      	ldr	r2, [r3, #4]
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	693a      	ldr	r2, [r7, #16]
 800d6e8:	621a      	str	r2, [r3, #32]
}
 800d6ea:	bf00      	nop
 800d6ec:	371c      	adds	r7, #28
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f4:	4770      	bx	lr
 800d6f6:	bf00      	nop
 800d6f8:	feff8fff 	.word	0xfeff8fff
 800d6fc:	40010000 	.word	0x40010000
 800d700:	40010400 	.word	0x40010400

0800d704 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d704:	b480      	push	{r7}
 800d706:	b087      	sub	sp, #28
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
 800d70c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6a1b      	ldr	r3, [r3, #32]
 800d712:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	6a1b      	ldr	r3, [r3, #32]
 800d718:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	685b      	ldr	r3, [r3, #4]
 800d724:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d72a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d72c:	68fa      	ldr	r2, [r7, #12]
 800d72e:	4b1b      	ldr	r3, [pc, #108]	@ (800d79c <TIM_OC5_SetConfig+0x98>)
 800d730:	4013      	ands	r3, r2
 800d732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	68fa      	ldr	r2, [r7, #12]
 800d73a:	4313      	orrs	r3, r2
 800d73c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d744:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	689b      	ldr	r3, [r3, #8]
 800d74a:	041b      	lsls	r3, r3, #16
 800d74c:	693a      	ldr	r2, [r7, #16]
 800d74e:	4313      	orrs	r3, r2
 800d750:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	4a12      	ldr	r2, [pc, #72]	@ (800d7a0 <TIM_OC5_SetConfig+0x9c>)
 800d756:	4293      	cmp	r3, r2
 800d758:	d003      	beq.n	800d762 <TIM_OC5_SetConfig+0x5e>
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	4a11      	ldr	r2, [pc, #68]	@ (800d7a4 <TIM_OC5_SetConfig+0xa0>)
 800d75e:	4293      	cmp	r3, r2
 800d760:	d109      	bne.n	800d776 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d762:	697b      	ldr	r3, [r7, #20]
 800d764:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d768:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	695b      	ldr	r3, [r3, #20]
 800d76e:	021b      	lsls	r3, r3, #8
 800d770:	697a      	ldr	r2, [r7, #20]
 800d772:	4313      	orrs	r3, r2
 800d774:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	697a      	ldr	r2, [r7, #20]
 800d77a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	68fa      	ldr	r2, [r7, #12]
 800d780:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	685a      	ldr	r2, [r3, #4]
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	693a      	ldr	r2, [r7, #16]
 800d78e:	621a      	str	r2, [r3, #32]
}
 800d790:	bf00      	nop
 800d792:	371c      	adds	r7, #28
 800d794:	46bd      	mov	sp, r7
 800d796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79a:	4770      	bx	lr
 800d79c:	fffeff8f 	.word	0xfffeff8f
 800d7a0:	40010000 	.word	0x40010000
 800d7a4:	40010400 	.word	0x40010400

0800d7a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d7a8:	b480      	push	{r7}
 800d7aa:	b087      	sub	sp, #28
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
 800d7b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	6a1b      	ldr	r3, [r3, #32]
 800d7b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	6a1b      	ldr	r3, [r3, #32]
 800d7bc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	685b      	ldr	r3, [r3, #4]
 800d7c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d7d0:	68fa      	ldr	r2, [r7, #12]
 800d7d2:	4b1c      	ldr	r3, [pc, #112]	@ (800d844 <TIM_OC6_SetConfig+0x9c>)
 800d7d4:	4013      	ands	r3, r2
 800d7d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	021b      	lsls	r3, r3, #8
 800d7de:	68fa      	ldr	r2, [r7, #12]
 800d7e0:	4313      	orrs	r3, r2
 800d7e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d7e4:	693b      	ldr	r3, [r7, #16]
 800d7e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d7ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	689b      	ldr	r3, [r3, #8]
 800d7f0:	051b      	lsls	r3, r3, #20
 800d7f2:	693a      	ldr	r2, [r7, #16]
 800d7f4:	4313      	orrs	r3, r2
 800d7f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	4a13      	ldr	r2, [pc, #76]	@ (800d848 <TIM_OC6_SetConfig+0xa0>)
 800d7fc:	4293      	cmp	r3, r2
 800d7fe:	d003      	beq.n	800d808 <TIM_OC6_SetConfig+0x60>
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	4a12      	ldr	r2, [pc, #72]	@ (800d84c <TIM_OC6_SetConfig+0xa4>)
 800d804:	4293      	cmp	r3, r2
 800d806:	d109      	bne.n	800d81c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d808:	697b      	ldr	r3, [r7, #20]
 800d80a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d80e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	695b      	ldr	r3, [r3, #20]
 800d814:	029b      	lsls	r3, r3, #10
 800d816:	697a      	ldr	r2, [r7, #20]
 800d818:	4313      	orrs	r3, r2
 800d81a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	697a      	ldr	r2, [r7, #20]
 800d820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	68fa      	ldr	r2, [r7, #12]
 800d826:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	685a      	ldr	r2, [r3, #4]
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	693a      	ldr	r2, [r7, #16]
 800d834:	621a      	str	r2, [r3, #32]
}
 800d836:	bf00      	nop
 800d838:	371c      	adds	r7, #28
 800d83a:	46bd      	mov	sp, r7
 800d83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d840:	4770      	bx	lr
 800d842:	bf00      	nop
 800d844:	feff8fff 	.word	0xfeff8fff
 800d848:	40010000 	.word	0x40010000
 800d84c:	40010400 	.word	0x40010400

0800d850 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d850:	b480      	push	{r7}
 800d852:	b087      	sub	sp, #28
 800d854:	af00      	add	r7, sp, #0
 800d856:	60f8      	str	r0, [r7, #12]
 800d858:	60b9      	str	r1, [r7, #8]
 800d85a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	6a1b      	ldr	r3, [r3, #32]
 800d860:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	6a1b      	ldr	r3, [r3, #32]
 800d866:	f023 0201 	bic.w	r2, r3, #1
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	699b      	ldr	r3, [r3, #24]
 800d872:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d874:	693b      	ldr	r3, [r7, #16]
 800d876:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d87a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	011b      	lsls	r3, r3, #4
 800d880:	693a      	ldr	r2, [r7, #16]
 800d882:	4313      	orrs	r3, r2
 800d884:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	f023 030a 	bic.w	r3, r3, #10
 800d88c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d88e:	697a      	ldr	r2, [r7, #20]
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	4313      	orrs	r3, r2
 800d894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	693a      	ldr	r2, [r7, #16]
 800d89a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	697a      	ldr	r2, [r7, #20]
 800d8a0:	621a      	str	r2, [r3, #32]
}
 800d8a2:	bf00      	nop
 800d8a4:	371c      	adds	r7, #28
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ac:	4770      	bx	lr

0800d8ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d8ae:	b480      	push	{r7}
 800d8b0:	b087      	sub	sp, #28
 800d8b2:	af00      	add	r7, sp, #0
 800d8b4:	60f8      	str	r0, [r7, #12]
 800d8b6:	60b9      	str	r1, [r7, #8]
 800d8b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	6a1b      	ldr	r3, [r3, #32]
 800d8be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	6a1b      	ldr	r3, [r3, #32]
 800d8c4:	f023 0210 	bic.w	r2, r3, #16
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	699b      	ldr	r3, [r3, #24]
 800d8d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d8d2:	693b      	ldr	r3, [r7, #16]
 800d8d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d8d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	031b      	lsls	r3, r3, #12
 800d8de:	693a      	ldr	r2, [r7, #16]
 800d8e0:	4313      	orrs	r3, r2
 800d8e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d8ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	011b      	lsls	r3, r3, #4
 800d8f0:	697a      	ldr	r2, [r7, #20]
 800d8f2:	4313      	orrs	r3, r2
 800d8f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	693a      	ldr	r2, [r7, #16]
 800d8fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	697a      	ldr	r2, [r7, #20]
 800d900:	621a      	str	r2, [r3, #32]
}
 800d902:	bf00      	nop
 800d904:	371c      	adds	r7, #28
 800d906:	46bd      	mov	sp, r7
 800d908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90c:	4770      	bx	lr

0800d90e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d90e:	b480      	push	{r7}
 800d910:	b085      	sub	sp, #20
 800d912:	af00      	add	r7, sp, #0
 800d914:	6078      	str	r0, [r7, #4]
 800d916:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	689b      	ldr	r3, [r3, #8]
 800d91c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d924:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d926:	683a      	ldr	r2, [r7, #0]
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	4313      	orrs	r3, r2
 800d92c:	f043 0307 	orr.w	r3, r3, #7
 800d930:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	68fa      	ldr	r2, [r7, #12]
 800d936:	609a      	str	r2, [r3, #8]
}
 800d938:	bf00      	nop
 800d93a:	3714      	adds	r7, #20
 800d93c:	46bd      	mov	sp, r7
 800d93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d942:	4770      	bx	lr

0800d944 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d944:	b480      	push	{r7}
 800d946:	b087      	sub	sp, #28
 800d948:	af00      	add	r7, sp, #0
 800d94a:	60f8      	str	r0, [r7, #12]
 800d94c:	60b9      	str	r1, [r7, #8]
 800d94e:	607a      	str	r2, [r7, #4]
 800d950:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	689b      	ldr	r3, [r3, #8]
 800d956:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d95e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	021a      	lsls	r2, r3, #8
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	431a      	orrs	r2, r3
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	4313      	orrs	r3, r2
 800d96c:	697a      	ldr	r2, [r7, #20]
 800d96e:	4313      	orrs	r3, r2
 800d970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	697a      	ldr	r2, [r7, #20]
 800d976:	609a      	str	r2, [r3, #8]
}
 800d978:	bf00      	nop
 800d97a:	371c      	adds	r7, #28
 800d97c:	46bd      	mov	sp, r7
 800d97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d982:	4770      	bx	lr

0800d984 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d984:	b480      	push	{r7}
 800d986:	b085      	sub	sp, #20
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
 800d98c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d994:	2b01      	cmp	r3, #1
 800d996:	d101      	bne.n	800d99c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d998:	2302      	movs	r3, #2
 800d99a:	e06d      	b.n	800da78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2201      	movs	r2, #1
 800d9a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2202      	movs	r2, #2
 800d9a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	685b      	ldr	r3, [r3, #4]
 800d9b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	689b      	ldr	r3, [r3, #8]
 800d9ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	4a30      	ldr	r2, [pc, #192]	@ (800da84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d9c2:	4293      	cmp	r3, r2
 800d9c4:	d004      	beq.n	800d9d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	4a2f      	ldr	r2, [pc, #188]	@ (800da88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d9cc:	4293      	cmp	r3, r2
 800d9ce:	d108      	bne.n	800d9e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d9d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	685b      	ldr	r3, [r3, #4]
 800d9dc:	68fa      	ldr	r2, [r7, #12]
 800d9de:	4313      	orrs	r3, r2
 800d9e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d9e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	68fa      	ldr	r2, [r7, #12]
 800d9f0:	4313      	orrs	r3, r2
 800d9f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	68fa      	ldr	r2, [r7, #12]
 800d9fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	4a20      	ldr	r2, [pc, #128]	@ (800da84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800da02:	4293      	cmp	r3, r2
 800da04:	d022      	beq.n	800da4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da0e:	d01d      	beq.n	800da4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	4a1d      	ldr	r2, [pc, #116]	@ (800da8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800da16:	4293      	cmp	r3, r2
 800da18:	d018      	beq.n	800da4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	4a1c      	ldr	r2, [pc, #112]	@ (800da90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800da20:	4293      	cmp	r3, r2
 800da22:	d013      	beq.n	800da4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	4a1a      	ldr	r2, [pc, #104]	@ (800da94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800da2a:	4293      	cmp	r3, r2
 800da2c:	d00e      	beq.n	800da4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	4a15      	ldr	r2, [pc, #84]	@ (800da88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800da34:	4293      	cmp	r3, r2
 800da36:	d009      	beq.n	800da4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	4a16      	ldr	r2, [pc, #88]	@ (800da98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800da3e:	4293      	cmp	r3, r2
 800da40:	d004      	beq.n	800da4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	4a15      	ldr	r2, [pc, #84]	@ (800da9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800da48:	4293      	cmp	r3, r2
 800da4a:	d10c      	bne.n	800da66 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800da52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	689b      	ldr	r3, [r3, #8]
 800da58:	68ba      	ldr	r2, [r7, #8]
 800da5a:	4313      	orrs	r3, r2
 800da5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	68ba      	ldr	r2, [r7, #8]
 800da64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2201      	movs	r2, #1
 800da6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2200      	movs	r2, #0
 800da72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800da76:	2300      	movs	r3, #0
}
 800da78:	4618      	mov	r0, r3
 800da7a:	3714      	adds	r7, #20
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr
 800da84:	40010000 	.word	0x40010000
 800da88:	40010400 	.word	0x40010400
 800da8c:	40000400 	.word	0x40000400
 800da90:	40000800 	.word	0x40000800
 800da94:	40000c00 	.word	0x40000c00
 800da98:	40014000 	.word	0x40014000
 800da9c:	40001800 	.word	0x40001800

0800daa0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800daa0:	b480      	push	{r7}
 800daa2:	b085      	sub	sp, #20
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
 800daa8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800daaa:	2300      	movs	r3, #0
 800daac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dab4:	2b01      	cmp	r3, #1
 800dab6:	d101      	bne.n	800dabc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800dab8:	2302      	movs	r3, #2
 800daba:	e065      	b.n	800db88 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2201      	movs	r2, #1
 800dac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	68db      	ldr	r3, [r3, #12]
 800dace:	4313      	orrs	r3, r2
 800dad0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	689b      	ldr	r3, [r3, #8]
 800dadc:	4313      	orrs	r3, r2
 800dade:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	685b      	ldr	r3, [r3, #4]
 800daea:	4313      	orrs	r3, r2
 800daec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	4313      	orrs	r3, r2
 800dafa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	691b      	ldr	r3, [r3, #16]
 800db06:	4313      	orrs	r3, r2
 800db08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	695b      	ldr	r3, [r3, #20]
 800db14:	4313      	orrs	r3, r2
 800db16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db22:	4313      	orrs	r3, r2
 800db24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	699b      	ldr	r3, [r3, #24]
 800db30:	041b      	lsls	r3, r3, #16
 800db32:	4313      	orrs	r3, r2
 800db34:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	4a16      	ldr	r2, [pc, #88]	@ (800db94 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800db3c:	4293      	cmp	r3, r2
 800db3e:	d004      	beq.n	800db4a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	4a14      	ldr	r2, [pc, #80]	@ (800db98 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800db46:	4293      	cmp	r3, r2
 800db48:	d115      	bne.n	800db76 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db54:	051b      	lsls	r3, r3, #20
 800db56:	4313      	orrs	r3, r2
 800db58:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	69db      	ldr	r3, [r3, #28]
 800db64:	4313      	orrs	r3, r2
 800db66:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	6a1b      	ldr	r3, [r3, #32]
 800db72:	4313      	orrs	r3, r2
 800db74:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	68fa      	ldr	r2, [r7, #12]
 800db7c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2200      	movs	r2, #0
 800db82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800db86:	2300      	movs	r3, #0
}
 800db88:	4618      	mov	r0, r3
 800db8a:	3714      	adds	r7, #20
 800db8c:	46bd      	mov	sp, r7
 800db8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db92:	4770      	bx	lr
 800db94:	40010000 	.word	0x40010000
 800db98:	40010400 	.word	0x40010400

0800db9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800db9c:	b480      	push	{r7}
 800db9e:	b083      	sub	sp, #12
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dba4:	bf00      	nop
 800dba6:	370c      	adds	r7, #12
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbae:	4770      	bx	lr

0800dbb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	b083      	sub	sp, #12
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dbb8:	bf00      	nop
 800dbba:	370c      	adds	r7, #12
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc2:	4770      	bx	lr

0800dbc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	b083      	sub	sp, #12
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dbcc:	bf00      	nop
 800dbce:	370c      	adds	r7, #12
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd6:	4770      	bx	lr

0800dbd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b082      	sub	sp, #8
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d101      	bne.n	800dbea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	e040      	b.n	800dc6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d106      	bne.n	800dc00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f7f6 fc14 	bl	8004428 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2224      	movs	r2, #36	@ 0x24
 800dc04:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	681a      	ldr	r2, [r3, #0]
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	f022 0201 	bic.w	r2, r2, #1
 800dc14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d002      	beq.n	800dc24 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f000 ffb6 	bl	800eb90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f000 fd4f 	bl	800e6c8 <UART_SetConfig>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	2b01      	cmp	r3, #1
 800dc2e:	d101      	bne.n	800dc34 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800dc30:	2301      	movs	r3, #1
 800dc32:	e01b      	b.n	800dc6c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	685a      	ldr	r2, [r3, #4]
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800dc42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	689a      	ldr	r2, [r3, #8]
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800dc52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	681a      	ldr	r2, [r3, #0]
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	f042 0201 	orr.w	r2, r2, #1
 800dc62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dc64:	6878      	ldr	r0, [r7, #4]
 800dc66:	f001 f835 	bl	800ecd4 <UART_CheckIdleState>
 800dc6a:	4603      	mov	r3, r0
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3708      	adds	r7, #8
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}

0800dc74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b08a      	sub	sp, #40	@ 0x28
 800dc78:	af02      	add	r7, sp, #8
 800dc7a:	60f8      	str	r0, [r7, #12]
 800dc7c:	60b9      	str	r1, [r7, #8]
 800dc7e:	603b      	str	r3, [r7, #0]
 800dc80:	4613      	mov	r3, r2
 800dc82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dc88:	2b20      	cmp	r3, #32
 800dc8a:	d177      	bne.n	800dd7c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d002      	beq.n	800dc98 <HAL_UART_Transmit+0x24>
 800dc92:	88fb      	ldrh	r3, [r7, #6]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d101      	bne.n	800dc9c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800dc98:	2301      	movs	r3, #1
 800dc9a:	e070      	b.n	800dd7e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	2200      	movs	r2, #0
 800dca0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	2221      	movs	r2, #33	@ 0x21
 800dca8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dcaa:	f7f7 fa5d 	bl	8005168 <HAL_GetTick>
 800dcae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	88fa      	ldrh	r2, [r7, #6]
 800dcb4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	88fa      	ldrh	r2, [r7, #6]
 800dcbc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	689b      	ldr	r3, [r3, #8]
 800dcc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dcc8:	d108      	bne.n	800dcdc <HAL_UART_Transmit+0x68>
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	691b      	ldr	r3, [r3, #16]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d104      	bne.n	800dcdc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	61bb      	str	r3, [r7, #24]
 800dcda:	e003      	b.n	800dce4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dce0:	2300      	movs	r3, #0
 800dce2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800dce4:	e02f      	b.n	800dd46 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	9300      	str	r3, [sp, #0]
 800dcea:	697b      	ldr	r3, [r7, #20]
 800dcec:	2200      	movs	r2, #0
 800dcee:	2180      	movs	r1, #128	@ 0x80
 800dcf0:	68f8      	ldr	r0, [r7, #12]
 800dcf2:	f001 f846 	bl	800ed82 <UART_WaitOnFlagUntilTimeout>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d004      	beq.n	800dd06 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	2220      	movs	r2, #32
 800dd00:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800dd02:	2303      	movs	r3, #3
 800dd04:	e03b      	b.n	800dd7e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800dd06:	69fb      	ldr	r3, [r7, #28]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d10b      	bne.n	800dd24 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800dd0c:	69bb      	ldr	r3, [r7, #24]
 800dd0e:	881b      	ldrh	r3, [r3, #0]
 800dd10:	461a      	mov	r2, r3
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dd1a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800dd1c:	69bb      	ldr	r3, [r7, #24]
 800dd1e:	3302      	adds	r3, #2
 800dd20:	61bb      	str	r3, [r7, #24]
 800dd22:	e007      	b.n	800dd34 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800dd24:	69fb      	ldr	r3, [r7, #28]
 800dd26:	781a      	ldrb	r2, [r3, #0]
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800dd2e:	69fb      	ldr	r3, [r7, #28]
 800dd30:	3301      	adds	r3, #1
 800dd32:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800dd3a:	b29b      	uxth	r3, r3
 800dd3c:	3b01      	subs	r3, #1
 800dd3e:	b29a      	uxth	r2, r3
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800dd4c:	b29b      	uxth	r3, r3
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d1c9      	bne.n	800dce6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	9300      	str	r3, [sp, #0]
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	2200      	movs	r2, #0
 800dd5a:	2140      	movs	r1, #64	@ 0x40
 800dd5c:	68f8      	ldr	r0, [r7, #12]
 800dd5e:	f001 f810 	bl	800ed82 <UART_WaitOnFlagUntilTimeout>
 800dd62:	4603      	mov	r3, r0
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d004      	beq.n	800dd72 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	2220      	movs	r2, #32
 800dd6c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800dd6e:	2303      	movs	r3, #3
 800dd70:	e005      	b.n	800dd7e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	2220      	movs	r2, #32
 800dd76:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	e000      	b.n	800dd7e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800dd7c:	2302      	movs	r3, #2
  }
}
 800dd7e:	4618      	mov	r0, r3
 800dd80:	3720      	adds	r7, #32
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd80      	pop	{r7, pc}

0800dd86 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dd86:	b580      	push	{r7, lr}
 800dd88:	b08a      	sub	sp, #40	@ 0x28
 800dd8a:	af02      	add	r7, sp, #8
 800dd8c:	60f8      	str	r0, [r7, #12]
 800dd8e:	60b9      	str	r1, [r7, #8]
 800dd90:	603b      	str	r3, [r7, #0]
 800dd92:	4613      	mov	r3, r2
 800dd94:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd9c:	2b20      	cmp	r3, #32
 800dd9e:	f040 80b5 	bne.w	800df0c <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d002      	beq.n	800ddae <HAL_UART_Receive+0x28>
 800dda8:	88fb      	ldrh	r3, [r7, #6]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d101      	bne.n	800ddb2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800ddae:	2301      	movs	r3, #1
 800ddb0:	e0ad      	b.n	800df0e <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	2222      	movs	r2, #34	@ 0x22
 800ddbe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ddc8:	f7f7 f9ce 	bl	8005168 <HAL_GetTick>
 800ddcc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	88fa      	ldrh	r2, [r7, #6]
 800ddd2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	88fa      	ldrh	r2, [r7, #6]
 800ddda:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	689b      	ldr	r3, [r3, #8]
 800dde2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dde6:	d10e      	bne.n	800de06 <HAL_UART_Receive+0x80>
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	691b      	ldr	r3, [r3, #16]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d105      	bne.n	800ddfc <HAL_UART_Receive+0x76>
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800ddf6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ddfa:	e02d      	b.n	800de58 <HAL_UART_Receive+0xd2>
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	22ff      	movs	r2, #255	@ 0xff
 800de00:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800de04:	e028      	b.n	800de58 <HAL_UART_Receive+0xd2>
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	689b      	ldr	r3, [r3, #8]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d10d      	bne.n	800de2a <HAL_UART_Receive+0xa4>
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	691b      	ldr	r3, [r3, #16]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d104      	bne.n	800de20 <HAL_UART_Receive+0x9a>
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	22ff      	movs	r2, #255	@ 0xff
 800de1a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800de1e:	e01b      	b.n	800de58 <HAL_UART_Receive+0xd2>
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	227f      	movs	r2, #127	@ 0x7f
 800de24:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800de28:	e016      	b.n	800de58 <HAL_UART_Receive+0xd2>
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	689b      	ldr	r3, [r3, #8]
 800de2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800de32:	d10d      	bne.n	800de50 <HAL_UART_Receive+0xca>
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	691b      	ldr	r3, [r3, #16]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d104      	bne.n	800de46 <HAL_UART_Receive+0xc0>
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	227f      	movs	r2, #127	@ 0x7f
 800de40:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800de44:	e008      	b.n	800de58 <HAL_UART_Receive+0xd2>
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	223f      	movs	r2, #63	@ 0x3f
 800de4a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800de4e:	e003      	b.n	800de58 <HAL_UART_Receive+0xd2>
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	2200      	movs	r2, #0
 800de54:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800de5e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	689b      	ldr	r3, [r3, #8]
 800de64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800de68:	d108      	bne.n	800de7c <HAL_UART_Receive+0xf6>
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	691b      	ldr	r3, [r3, #16]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d104      	bne.n	800de7c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800de72:	2300      	movs	r3, #0
 800de74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800de76:	68bb      	ldr	r3, [r7, #8]
 800de78:	61bb      	str	r3, [r7, #24]
 800de7a:	e003      	b.n	800de84 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800de80:	2300      	movs	r3, #0
 800de82:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800de84:	e036      	b.n	800def4 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	9300      	str	r3, [sp, #0]
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	2200      	movs	r2, #0
 800de8e:	2120      	movs	r1, #32
 800de90:	68f8      	ldr	r0, [r7, #12]
 800de92:	f000 ff76 	bl	800ed82 <UART_WaitOnFlagUntilTimeout>
 800de96:	4603      	mov	r3, r0
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d005      	beq.n	800dea8 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	2220      	movs	r2, #32
 800dea0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800dea4:	2303      	movs	r3, #3
 800dea6:	e032      	b.n	800df0e <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800dea8:	69fb      	ldr	r3, [r7, #28]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d10c      	bne.n	800dec8 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800deb4:	b29a      	uxth	r2, r3
 800deb6:	8a7b      	ldrh	r3, [r7, #18]
 800deb8:	4013      	ands	r3, r2
 800deba:	b29a      	uxth	r2, r3
 800debc:	69bb      	ldr	r3, [r7, #24]
 800debe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800dec0:	69bb      	ldr	r3, [r7, #24]
 800dec2:	3302      	adds	r3, #2
 800dec4:	61bb      	str	r3, [r7, #24]
 800dec6:	e00c      	b.n	800dee2 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dece:	b2da      	uxtb	r2, r3
 800ded0:	8a7b      	ldrh	r3, [r7, #18]
 800ded2:	b2db      	uxtb	r3, r3
 800ded4:	4013      	ands	r3, r2
 800ded6:	b2da      	uxtb	r2, r3
 800ded8:	69fb      	ldr	r3, [r7, #28]
 800deda:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800dedc:	69fb      	ldr	r3, [r7, #28]
 800dede:	3301      	adds	r3, #1
 800dee0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800dee8:	b29b      	uxth	r3, r3
 800deea:	3b01      	subs	r3, #1
 800deec:	b29a      	uxth	r2, r3
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800defa:	b29b      	uxth	r3, r3
 800defc:	2b00      	cmp	r3, #0
 800defe:	d1c2      	bne.n	800de86 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	2220      	movs	r2, #32
 800df04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800df08:	2300      	movs	r3, #0
 800df0a:	e000      	b.n	800df0e <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800df0c:	2302      	movs	r3, #2
  }
}
 800df0e:	4618      	mov	r0, r3
 800df10:	3720      	adds	r7, #32
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}

0800df16 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800df16:	b580      	push	{r7, lr}
 800df18:	b08a      	sub	sp, #40	@ 0x28
 800df1a:	af00      	add	r7, sp, #0
 800df1c:	60f8      	str	r0, [r7, #12]
 800df1e:	60b9      	str	r1, [r7, #8]
 800df20:	4613      	mov	r3, r2
 800df22:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800df2a:	2b20      	cmp	r3, #32
 800df2c:	d132      	bne.n	800df94 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d002      	beq.n	800df3a <HAL_UART_Receive_DMA+0x24>
 800df34:	88fb      	ldrh	r3, [r7, #6]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d101      	bne.n	800df3e <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800df3a:	2301      	movs	r3, #1
 800df3c:	e02b      	b.n	800df96 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	2200      	movs	r2, #0
 800df42:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	685b      	ldr	r3, [r3, #4]
 800df4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d018      	beq.n	800df84 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df58:	697b      	ldr	r3, [r7, #20]
 800df5a:	e853 3f00 	ldrex	r3, [r3]
 800df5e:	613b      	str	r3, [r7, #16]
   return(result);
 800df60:	693b      	ldr	r3, [r7, #16]
 800df62:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800df66:	627b      	str	r3, [r7, #36]	@ 0x24
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	461a      	mov	r2, r3
 800df6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df70:	623b      	str	r3, [r7, #32]
 800df72:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df74:	69f9      	ldr	r1, [r7, #28]
 800df76:	6a3a      	ldr	r2, [r7, #32]
 800df78:	e841 2300 	strex	r3, r2, [r1]
 800df7c:	61bb      	str	r3, [r7, #24]
   return(result);
 800df7e:	69bb      	ldr	r3, [r7, #24]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d1e6      	bne.n	800df52 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800df84:	88fb      	ldrh	r3, [r7, #6]
 800df86:	461a      	mov	r2, r3
 800df88:	68b9      	ldr	r1, [r7, #8]
 800df8a:	68f8      	ldr	r0, [r7, #12]
 800df8c:	f000 ff66 	bl	800ee5c <UART_Start_Receive_DMA>
 800df90:	4603      	mov	r3, r0
 800df92:	e000      	b.n	800df96 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800df94:	2302      	movs	r3, #2
  }
}
 800df96:	4618      	mov	r0, r3
 800df98:	3728      	adds	r7, #40	@ 0x28
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bd80      	pop	{r7, pc}

0800df9e <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800df9e:	b580      	push	{r7, lr}
 800dfa0:	b090      	sub	sp, #64	@ 0x40
 800dfa2:	af00      	add	r7, sp, #0
 800dfa4:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dfaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dfb2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	689b      	ldr	r3, [r3, #8]
 800dfba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dfbe:	2b80      	cmp	r3, #128	@ 0x80
 800dfc0:	d139      	bne.n	800e036 <HAL_UART_DMAStop+0x98>
 800dfc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfc4:	2b21      	cmp	r3, #33	@ 0x21
 800dfc6:	d136      	bne.n	800e036 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	3308      	adds	r3, #8
 800dfce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfd0:	6a3b      	ldr	r3, [r7, #32]
 800dfd2:	e853 3f00 	ldrex	r3, [r3]
 800dfd6:	61fb      	str	r3, [r7, #28]
   return(result);
 800dfd8:	69fb      	ldr	r3, [r7, #28]
 800dfda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dfde:	637b      	str	r3, [r7, #52]	@ 0x34
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	3308      	adds	r3, #8
 800dfe6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dfe8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dfea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dfee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dff0:	e841 2300 	strex	r3, r2, [r1]
 800dff4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d1e5      	bne.n	800dfc8 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e000:	2b00      	cmp	r3, #0
 800e002:	d015      	beq.n	800e030 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e008:	4618      	mov	r0, r3
 800e00a:	f7f7 fed1 	bl	8005db0 <HAL_DMA_Abort>
 800e00e:	4603      	mov	r3, r0
 800e010:	2b00      	cmp	r3, #0
 800e012:	d00d      	beq.n	800e030 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e018:	4618      	mov	r0, r3
 800e01a:	f7f8 f8e5 	bl	80061e8 <HAL_DMA_GetError>
 800e01e:	4603      	mov	r3, r0
 800e020:	2b20      	cmp	r3, #32
 800e022:	d105      	bne.n	800e030 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2210      	movs	r2, #16
 800e028:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e02c:	2303      	movs	r3, #3
 800e02e:	e044      	b.n	800e0ba <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f000 ffb3 	bl	800ef9c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	689b      	ldr	r3, [r3, #8]
 800e03c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e040:	2b40      	cmp	r3, #64	@ 0x40
 800e042:	d139      	bne.n	800e0b8 <HAL_UART_DMAStop+0x11a>
 800e044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e046:	2b22      	cmp	r3, #34	@ 0x22
 800e048:	d136      	bne.n	800e0b8 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	3308      	adds	r3, #8
 800e050:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	e853 3f00 	ldrex	r3, [r3]
 800e058:	60bb      	str	r3, [r7, #8]
   return(result);
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e060:	633b      	str	r3, [r7, #48]	@ 0x30
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	3308      	adds	r3, #8
 800e068:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e06a:	61ba      	str	r2, [r7, #24]
 800e06c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e06e:	6979      	ldr	r1, [r7, #20]
 800e070:	69ba      	ldr	r2, [r7, #24]
 800e072:	e841 2300 	strex	r3, r2, [r1]
 800e076:	613b      	str	r3, [r7, #16]
   return(result);
 800e078:	693b      	ldr	r3, [r7, #16]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d1e5      	bne.n	800e04a <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e082:	2b00      	cmp	r3, #0
 800e084:	d015      	beq.n	800e0b2 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7f7 fe90 	bl	8005db0 <HAL_DMA_Abort>
 800e090:	4603      	mov	r3, r0
 800e092:	2b00      	cmp	r3, #0
 800e094:	d00d      	beq.n	800e0b2 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e09a:	4618      	mov	r0, r3
 800e09c:	f7f8 f8a4 	bl	80061e8 <HAL_DMA_GetError>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	2b20      	cmp	r3, #32
 800e0a4:	d105      	bne.n	800e0b2 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	2210      	movs	r2, #16
 800e0aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e0ae:	2303      	movs	r3, #3
 800e0b0:	e003      	b.n	800e0ba <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	f000 ff98 	bl	800efe8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800e0b8:	2300      	movs	r3, #0
}
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	3740      	adds	r7, #64	@ 0x40
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}
	...

0800e0c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b0ba      	sub	sp, #232	@ 0xe8
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	69db      	ldr	r3, [r3, #28]
 800e0d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	689b      	ldr	r3, [r3, #8]
 800e0e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e0ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e0ee:	f640 030f 	movw	r3, #2063	@ 0x80f
 800e0f2:	4013      	ands	r3, r2
 800e0f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800e0f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d115      	bne.n	800e12c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800e100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e104:	f003 0320 	and.w	r3, r3, #32
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d00f      	beq.n	800e12c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e10c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e110:	f003 0320 	and.w	r3, r3, #32
 800e114:	2b00      	cmp	r3, #0
 800e116:	d009      	beq.n	800e12c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	f000 82b1 	beq.w	800e684 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e126:	6878      	ldr	r0, [r7, #4]
 800e128:	4798      	blx	r3
      }
      return;
 800e12a:	e2ab      	b.n	800e684 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e12c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e130:	2b00      	cmp	r3, #0
 800e132:	f000 8117 	beq.w	800e364 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800e136:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e13a:	f003 0301 	and.w	r3, r3, #1
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d106      	bne.n	800e150 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800e142:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e146:	4b85      	ldr	r3, [pc, #532]	@ (800e35c <HAL_UART_IRQHandler+0x298>)
 800e148:	4013      	ands	r3, r2
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	f000 810a 	beq.w	800e364 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e154:	f003 0301 	and.w	r3, r3, #1
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d011      	beq.n	800e180 <HAL_UART_IRQHandler+0xbc>
 800e15c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e164:	2b00      	cmp	r3, #0
 800e166:	d00b      	beq.n	800e180 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	2201      	movs	r2, #1
 800e16e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e176:	f043 0201 	orr.w	r2, r3, #1
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e184:	f003 0302 	and.w	r3, r3, #2
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d011      	beq.n	800e1b0 <HAL_UART_IRQHandler+0xec>
 800e18c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e190:	f003 0301 	and.w	r3, r3, #1
 800e194:	2b00      	cmp	r3, #0
 800e196:	d00b      	beq.n	800e1b0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	2202      	movs	r2, #2
 800e19e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e1a6:	f043 0204 	orr.w	r2, r3, #4
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e1b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e1b4:	f003 0304 	and.w	r3, r3, #4
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d011      	beq.n	800e1e0 <HAL_UART_IRQHandler+0x11c>
 800e1bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e1c0:	f003 0301 	and.w	r3, r3, #1
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d00b      	beq.n	800e1e0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	2204      	movs	r2, #4
 800e1ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e1d6:	f043 0202 	orr.w	r2, r3, #2
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e1e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e1e4:	f003 0308 	and.w	r3, r3, #8
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d017      	beq.n	800e21c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e1ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e1f0:	f003 0320 	and.w	r3, r3, #32
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d105      	bne.n	800e204 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800e1f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e1fc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e200:	2b00      	cmp	r3, #0
 800e202:	d00b      	beq.n	800e21c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	2208      	movs	r2, #8
 800e20a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e212:	f043 0208 	orr.w	r2, r3, #8
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e21c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e220:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e224:	2b00      	cmp	r3, #0
 800e226:	d012      	beq.n	800e24e <HAL_UART_IRQHandler+0x18a>
 800e228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e22c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e230:	2b00      	cmp	r3, #0
 800e232:	d00c      	beq.n	800e24e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e23c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e244:	f043 0220 	orr.w	r2, r3, #32
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e254:	2b00      	cmp	r3, #0
 800e256:	f000 8217 	beq.w	800e688 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800e25a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e25e:	f003 0320 	and.w	r3, r3, #32
 800e262:	2b00      	cmp	r3, #0
 800e264:	d00d      	beq.n	800e282 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e26a:	f003 0320 	and.w	r3, r3, #32
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d007      	beq.n	800e282 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e276:	2b00      	cmp	r3, #0
 800e278:	d003      	beq.n	800e282 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e288:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	689b      	ldr	r3, [r3, #8]
 800e292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e296:	2b40      	cmp	r3, #64	@ 0x40
 800e298:	d005      	beq.n	800e2a6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e29a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e29e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d04f      	beq.n	800e346 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f000 fe9e 	bl	800efe8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	689b      	ldr	r3, [r3, #8]
 800e2b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e2b6:	2b40      	cmp	r3, #64	@ 0x40
 800e2b8:	d141      	bne.n	800e33e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	3308      	adds	r3, #8
 800e2c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e2c8:	e853 3f00 	ldrex	r3, [r3]
 800e2cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e2d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e2d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e2d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	3308      	adds	r3, #8
 800e2e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e2e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e2ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e2f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e2f6:	e841 2300 	strex	r3, r2, [r1]
 800e2fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e2fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e302:	2b00      	cmp	r3, #0
 800e304:	d1d9      	bne.n	800e2ba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d013      	beq.n	800e336 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e312:	4a13      	ldr	r2, [pc, #76]	@ (800e360 <HAL_UART_IRQHandler+0x29c>)
 800e314:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e31a:	4618      	mov	r0, r3
 800e31c:	f7f7 fdb8 	bl	8005e90 <HAL_DMA_Abort_IT>
 800e320:	4603      	mov	r3, r0
 800e322:	2b00      	cmp	r3, #0
 800e324:	d017      	beq.n	800e356 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e32a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e32c:	687a      	ldr	r2, [r7, #4]
 800e32e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800e330:	4610      	mov	r0, r2
 800e332:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e334:	e00f      	b.n	800e356 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f7f6 fda4 	bl	8004e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e33c:	e00b      	b.n	800e356 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f7f6 fda0 	bl	8004e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e344:	e007      	b.n	800e356 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f7f6 fd9c 	bl	8004e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2200      	movs	r2, #0
 800e350:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800e354:	e198      	b.n	800e688 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e356:	bf00      	nop
    return;
 800e358:	e196      	b.n	800e688 <HAL_UART_IRQHandler+0x5c4>
 800e35a:	bf00      	nop
 800e35c:	04000120 	.word	0x04000120
 800e360:	0800f2ff 	.word	0x0800f2ff

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e368:	2b01      	cmp	r3, #1
 800e36a:	f040 8166 	bne.w	800e63a <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e36e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e372:	f003 0310 	and.w	r3, r3, #16
 800e376:	2b00      	cmp	r3, #0
 800e378:	f000 815f 	beq.w	800e63a <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e37c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e380:	f003 0310 	and.w	r3, r3, #16
 800e384:	2b00      	cmp	r3, #0
 800e386:	f000 8158 	beq.w	800e63a <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	2210      	movs	r2, #16
 800e390:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	689b      	ldr	r3, [r3, #8]
 800e398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e39c:	2b40      	cmp	r3, #64	@ 0x40
 800e39e:	f040 80d0 	bne.w	800e542 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	685b      	ldr	r3, [r3, #4]
 800e3aa:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e3ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	f000 80ab 	beq.w	800e50e <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e3be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	f080 80a3 	bcs.w	800e50e <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e3ce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e3d6:	69db      	ldr	r3, [r3, #28]
 800e3d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e3dc:	f000 8086 	beq.w	800e4ec <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e3ec:	e853 3f00 	ldrex	r3, [r3]
 800e3f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e3f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e3f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e3fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	461a      	mov	r2, r3
 800e406:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e40a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e40e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e412:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e416:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e41a:	e841 2300 	strex	r3, r2, [r1]
 800e41e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e422:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e426:	2b00      	cmp	r3, #0
 800e428:	d1da      	bne.n	800e3e0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	3308      	adds	r3, #8
 800e430:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e432:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e434:	e853 3f00 	ldrex	r3, [r3]
 800e438:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e43a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e43c:	f023 0301 	bic.w	r3, r3, #1
 800e440:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	3308      	adds	r3, #8
 800e44a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e44e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e452:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e454:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e456:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e45a:	e841 2300 	strex	r3, r2, [r1]
 800e45e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e460:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e462:	2b00      	cmp	r3, #0
 800e464:	d1e1      	bne.n	800e42a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	3308      	adds	r3, #8
 800e46c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e46e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e470:	e853 3f00 	ldrex	r3, [r3]
 800e474:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e476:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e478:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e47c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	3308      	adds	r3, #8
 800e486:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e48a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e48c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e48e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e490:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e492:	e841 2300 	strex	r3, r2, [r1]
 800e496:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e498:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d1e3      	bne.n	800e466 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	2220      	movs	r2, #32
 800e4a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e4b4:	e853 3f00 	ldrex	r3, [r3]
 800e4b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e4ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e4bc:	f023 0310 	bic.w	r3, r3, #16
 800e4c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	461a      	mov	r2, r3
 800e4ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e4ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e4d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e4d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e4d6:	e841 2300 	strex	r3, r2, [r1]
 800e4da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e4dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d1e4      	bne.n	800e4ac <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f7f7 fc62 	bl	8005db0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2202      	movs	r2, #2
 800e4f0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e4fe:	b29b      	uxth	r3, r3
 800e500:	1ad3      	subs	r3, r2, r3
 800e502:	b29b      	uxth	r3, r3
 800e504:	4619      	mov	r1, r3
 800e506:	6878      	ldr	r0, [r7, #4]
 800e508:	f000 f8d2 	bl	800e6b0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800e50c:	e0be      	b.n	800e68c <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e514:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e518:	429a      	cmp	r2, r3
 800e51a:	f040 80b7 	bne.w	800e68c <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e522:	69db      	ldr	r3, [r3, #28]
 800e524:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e528:	f040 80b0 	bne.w	800e68c <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2202      	movs	r2, #2
 800e530:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e538:	4619      	mov	r1, r3
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f000 f8b8 	bl	800e6b0 <HAL_UARTEx_RxEventCallback>
      return;
 800e540:	e0a4      	b.n	800e68c <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e54e:	b29b      	uxth	r3, r3
 800e550:	1ad3      	subs	r3, r2, r3
 800e552:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e55c:	b29b      	uxth	r3, r3
 800e55e:	2b00      	cmp	r3, #0
 800e560:	f000 8096 	beq.w	800e690 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800e564:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e568:	2b00      	cmp	r3, #0
 800e56a:	f000 8091 	beq.w	800e690 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e576:	e853 3f00 	ldrex	r3, [r3]
 800e57a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e57c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e57e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e582:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	461a      	mov	r2, r3
 800e58c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e590:	647b      	str	r3, [r7, #68]	@ 0x44
 800e592:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e594:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e596:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e598:	e841 2300 	strex	r3, r2, [r1]
 800e59c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e59e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d1e4      	bne.n	800e56e <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	3308      	adds	r3, #8
 800e5aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5ae:	e853 3f00 	ldrex	r3, [r3]
 800e5b2:	623b      	str	r3, [r7, #32]
   return(result);
 800e5b4:	6a3b      	ldr	r3, [r7, #32]
 800e5b6:	f023 0301 	bic.w	r3, r3, #1
 800e5ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	3308      	adds	r3, #8
 800e5c4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800e5c8:	633a      	str	r2, [r7, #48]	@ 0x30
 800e5ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e5ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e5d0:	e841 2300 	strex	r3, r2, [r1]
 800e5d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e5d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d1e3      	bne.n	800e5a4 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2220      	movs	r2, #32
 800e5e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5f6:	693b      	ldr	r3, [r7, #16]
 800e5f8:	e853 3f00 	ldrex	r3, [r3]
 800e5fc:	60fb      	str	r3, [r7, #12]
   return(result);
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	f023 0310 	bic.w	r3, r3, #16
 800e604:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	461a      	mov	r2, r3
 800e60e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e612:	61fb      	str	r3, [r7, #28]
 800e614:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e616:	69b9      	ldr	r1, [r7, #24]
 800e618:	69fa      	ldr	r2, [r7, #28]
 800e61a:	e841 2300 	strex	r3, r2, [r1]
 800e61e:	617b      	str	r3, [r7, #20]
   return(result);
 800e620:	697b      	ldr	r3, [r7, #20]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d1e4      	bne.n	800e5f0 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2202      	movs	r2, #2
 800e62a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e62c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e630:	4619      	mov	r1, r3
 800e632:	6878      	ldr	r0, [r7, #4]
 800e634:	f000 f83c 	bl	800e6b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e638:	e02a      	b.n	800e690 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800e63a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e63e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e642:	2b00      	cmp	r3, #0
 800e644:	d00e      	beq.n	800e664 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800e646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e64a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d008      	beq.n	800e664 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e656:	2b00      	cmp	r3, #0
 800e658:	d01c      	beq.n	800e694 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e65e:	6878      	ldr	r0, [r7, #4]
 800e660:	4798      	blx	r3
    }
    return;
 800e662:	e017      	b.n	800e694 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d012      	beq.n	800e696 <HAL_UART_IRQHandler+0x5d2>
 800e670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d00c      	beq.n	800e696 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f000 fe50 	bl	800f322 <UART_EndTransmit_IT>
    return;
 800e682:	e008      	b.n	800e696 <HAL_UART_IRQHandler+0x5d2>
      return;
 800e684:	bf00      	nop
 800e686:	e006      	b.n	800e696 <HAL_UART_IRQHandler+0x5d2>
    return;
 800e688:	bf00      	nop
 800e68a:	e004      	b.n	800e696 <HAL_UART_IRQHandler+0x5d2>
      return;
 800e68c:	bf00      	nop
 800e68e:	e002      	b.n	800e696 <HAL_UART_IRQHandler+0x5d2>
      return;
 800e690:	bf00      	nop
 800e692:	e000      	b.n	800e696 <HAL_UART_IRQHandler+0x5d2>
    return;
 800e694:	bf00      	nop
  }

}
 800e696:	37e8      	adds	r7, #232	@ 0xe8
 800e698:	46bd      	mov	sp, r7
 800e69a:	bd80      	pop	{r7, pc}

0800e69c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e69c:	b480      	push	{r7}
 800e69e:	b083      	sub	sp, #12
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e6a4:	bf00      	nop
 800e6a6:	370c      	adds	r7, #12
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ae:	4770      	bx	lr

0800e6b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e6b0:	b480      	push	{r7}
 800e6b2:	b083      	sub	sp, #12
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
 800e6b8:	460b      	mov	r3, r1
 800e6ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e6bc:	bf00      	nop
 800e6be:	370c      	adds	r7, #12
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c6:	4770      	bx	lr

0800e6c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b088      	sub	sp, #32
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	689a      	ldr	r2, [r3, #8]
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	691b      	ldr	r3, [r3, #16]
 800e6dc:	431a      	orrs	r2, r3
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	695b      	ldr	r3, [r3, #20]
 800e6e2:	431a      	orrs	r2, r3
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	69db      	ldr	r3, [r3, #28]
 800e6e8:	4313      	orrs	r3, r2
 800e6ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	681a      	ldr	r2, [r3, #0]
 800e6f2:	4ba6      	ldr	r3, [pc, #664]	@ (800e98c <UART_SetConfig+0x2c4>)
 800e6f4:	4013      	ands	r3, r2
 800e6f6:	687a      	ldr	r2, [r7, #4]
 800e6f8:	6812      	ldr	r2, [r2, #0]
 800e6fa:	6979      	ldr	r1, [r7, #20]
 800e6fc:	430b      	orrs	r3, r1
 800e6fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	685b      	ldr	r3, [r3, #4]
 800e706:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	68da      	ldr	r2, [r3, #12]
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	430a      	orrs	r2, r1
 800e714:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	699b      	ldr	r3, [r3, #24]
 800e71a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	6a1b      	ldr	r3, [r3, #32]
 800e720:	697a      	ldr	r2, [r7, #20]
 800e722:	4313      	orrs	r3, r2
 800e724:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	689b      	ldr	r3, [r3, #8]
 800e72c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	697a      	ldr	r2, [r7, #20]
 800e736:	430a      	orrs	r2, r1
 800e738:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	4a94      	ldr	r2, [pc, #592]	@ (800e990 <UART_SetConfig+0x2c8>)
 800e740:	4293      	cmp	r3, r2
 800e742:	d120      	bne.n	800e786 <UART_SetConfig+0xbe>
 800e744:	4b93      	ldr	r3, [pc, #588]	@ (800e994 <UART_SetConfig+0x2cc>)
 800e746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e74a:	f003 0303 	and.w	r3, r3, #3
 800e74e:	2b03      	cmp	r3, #3
 800e750:	d816      	bhi.n	800e780 <UART_SetConfig+0xb8>
 800e752:	a201      	add	r2, pc, #4	@ (adr r2, 800e758 <UART_SetConfig+0x90>)
 800e754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e758:	0800e769 	.word	0x0800e769
 800e75c:	0800e775 	.word	0x0800e775
 800e760:	0800e76f 	.word	0x0800e76f
 800e764:	0800e77b 	.word	0x0800e77b
 800e768:	2301      	movs	r3, #1
 800e76a:	77fb      	strb	r3, [r7, #31]
 800e76c:	e150      	b.n	800ea10 <UART_SetConfig+0x348>
 800e76e:	2302      	movs	r3, #2
 800e770:	77fb      	strb	r3, [r7, #31]
 800e772:	e14d      	b.n	800ea10 <UART_SetConfig+0x348>
 800e774:	2304      	movs	r3, #4
 800e776:	77fb      	strb	r3, [r7, #31]
 800e778:	e14a      	b.n	800ea10 <UART_SetConfig+0x348>
 800e77a:	2308      	movs	r3, #8
 800e77c:	77fb      	strb	r3, [r7, #31]
 800e77e:	e147      	b.n	800ea10 <UART_SetConfig+0x348>
 800e780:	2310      	movs	r3, #16
 800e782:	77fb      	strb	r3, [r7, #31]
 800e784:	e144      	b.n	800ea10 <UART_SetConfig+0x348>
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	4a83      	ldr	r2, [pc, #524]	@ (800e998 <UART_SetConfig+0x2d0>)
 800e78c:	4293      	cmp	r3, r2
 800e78e:	d132      	bne.n	800e7f6 <UART_SetConfig+0x12e>
 800e790:	4b80      	ldr	r3, [pc, #512]	@ (800e994 <UART_SetConfig+0x2cc>)
 800e792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e796:	f003 030c 	and.w	r3, r3, #12
 800e79a:	2b0c      	cmp	r3, #12
 800e79c:	d828      	bhi.n	800e7f0 <UART_SetConfig+0x128>
 800e79e:	a201      	add	r2, pc, #4	@ (adr r2, 800e7a4 <UART_SetConfig+0xdc>)
 800e7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7a4:	0800e7d9 	.word	0x0800e7d9
 800e7a8:	0800e7f1 	.word	0x0800e7f1
 800e7ac:	0800e7f1 	.word	0x0800e7f1
 800e7b0:	0800e7f1 	.word	0x0800e7f1
 800e7b4:	0800e7e5 	.word	0x0800e7e5
 800e7b8:	0800e7f1 	.word	0x0800e7f1
 800e7bc:	0800e7f1 	.word	0x0800e7f1
 800e7c0:	0800e7f1 	.word	0x0800e7f1
 800e7c4:	0800e7df 	.word	0x0800e7df
 800e7c8:	0800e7f1 	.word	0x0800e7f1
 800e7cc:	0800e7f1 	.word	0x0800e7f1
 800e7d0:	0800e7f1 	.word	0x0800e7f1
 800e7d4:	0800e7eb 	.word	0x0800e7eb
 800e7d8:	2300      	movs	r3, #0
 800e7da:	77fb      	strb	r3, [r7, #31]
 800e7dc:	e118      	b.n	800ea10 <UART_SetConfig+0x348>
 800e7de:	2302      	movs	r3, #2
 800e7e0:	77fb      	strb	r3, [r7, #31]
 800e7e2:	e115      	b.n	800ea10 <UART_SetConfig+0x348>
 800e7e4:	2304      	movs	r3, #4
 800e7e6:	77fb      	strb	r3, [r7, #31]
 800e7e8:	e112      	b.n	800ea10 <UART_SetConfig+0x348>
 800e7ea:	2308      	movs	r3, #8
 800e7ec:	77fb      	strb	r3, [r7, #31]
 800e7ee:	e10f      	b.n	800ea10 <UART_SetConfig+0x348>
 800e7f0:	2310      	movs	r3, #16
 800e7f2:	77fb      	strb	r3, [r7, #31]
 800e7f4:	e10c      	b.n	800ea10 <UART_SetConfig+0x348>
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	4a68      	ldr	r2, [pc, #416]	@ (800e99c <UART_SetConfig+0x2d4>)
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	d120      	bne.n	800e842 <UART_SetConfig+0x17a>
 800e800:	4b64      	ldr	r3, [pc, #400]	@ (800e994 <UART_SetConfig+0x2cc>)
 800e802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e806:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800e80a:	2b30      	cmp	r3, #48	@ 0x30
 800e80c:	d013      	beq.n	800e836 <UART_SetConfig+0x16e>
 800e80e:	2b30      	cmp	r3, #48	@ 0x30
 800e810:	d814      	bhi.n	800e83c <UART_SetConfig+0x174>
 800e812:	2b20      	cmp	r3, #32
 800e814:	d009      	beq.n	800e82a <UART_SetConfig+0x162>
 800e816:	2b20      	cmp	r3, #32
 800e818:	d810      	bhi.n	800e83c <UART_SetConfig+0x174>
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d002      	beq.n	800e824 <UART_SetConfig+0x15c>
 800e81e:	2b10      	cmp	r3, #16
 800e820:	d006      	beq.n	800e830 <UART_SetConfig+0x168>
 800e822:	e00b      	b.n	800e83c <UART_SetConfig+0x174>
 800e824:	2300      	movs	r3, #0
 800e826:	77fb      	strb	r3, [r7, #31]
 800e828:	e0f2      	b.n	800ea10 <UART_SetConfig+0x348>
 800e82a:	2302      	movs	r3, #2
 800e82c:	77fb      	strb	r3, [r7, #31]
 800e82e:	e0ef      	b.n	800ea10 <UART_SetConfig+0x348>
 800e830:	2304      	movs	r3, #4
 800e832:	77fb      	strb	r3, [r7, #31]
 800e834:	e0ec      	b.n	800ea10 <UART_SetConfig+0x348>
 800e836:	2308      	movs	r3, #8
 800e838:	77fb      	strb	r3, [r7, #31]
 800e83a:	e0e9      	b.n	800ea10 <UART_SetConfig+0x348>
 800e83c:	2310      	movs	r3, #16
 800e83e:	77fb      	strb	r3, [r7, #31]
 800e840:	e0e6      	b.n	800ea10 <UART_SetConfig+0x348>
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	4a56      	ldr	r2, [pc, #344]	@ (800e9a0 <UART_SetConfig+0x2d8>)
 800e848:	4293      	cmp	r3, r2
 800e84a:	d120      	bne.n	800e88e <UART_SetConfig+0x1c6>
 800e84c:	4b51      	ldr	r3, [pc, #324]	@ (800e994 <UART_SetConfig+0x2cc>)
 800e84e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e852:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800e856:	2bc0      	cmp	r3, #192	@ 0xc0
 800e858:	d013      	beq.n	800e882 <UART_SetConfig+0x1ba>
 800e85a:	2bc0      	cmp	r3, #192	@ 0xc0
 800e85c:	d814      	bhi.n	800e888 <UART_SetConfig+0x1c0>
 800e85e:	2b80      	cmp	r3, #128	@ 0x80
 800e860:	d009      	beq.n	800e876 <UART_SetConfig+0x1ae>
 800e862:	2b80      	cmp	r3, #128	@ 0x80
 800e864:	d810      	bhi.n	800e888 <UART_SetConfig+0x1c0>
 800e866:	2b00      	cmp	r3, #0
 800e868:	d002      	beq.n	800e870 <UART_SetConfig+0x1a8>
 800e86a:	2b40      	cmp	r3, #64	@ 0x40
 800e86c:	d006      	beq.n	800e87c <UART_SetConfig+0x1b4>
 800e86e:	e00b      	b.n	800e888 <UART_SetConfig+0x1c0>
 800e870:	2300      	movs	r3, #0
 800e872:	77fb      	strb	r3, [r7, #31]
 800e874:	e0cc      	b.n	800ea10 <UART_SetConfig+0x348>
 800e876:	2302      	movs	r3, #2
 800e878:	77fb      	strb	r3, [r7, #31]
 800e87a:	e0c9      	b.n	800ea10 <UART_SetConfig+0x348>
 800e87c:	2304      	movs	r3, #4
 800e87e:	77fb      	strb	r3, [r7, #31]
 800e880:	e0c6      	b.n	800ea10 <UART_SetConfig+0x348>
 800e882:	2308      	movs	r3, #8
 800e884:	77fb      	strb	r3, [r7, #31]
 800e886:	e0c3      	b.n	800ea10 <UART_SetConfig+0x348>
 800e888:	2310      	movs	r3, #16
 800e88a:	77fb      	strb	r3, [r7, #31]
 800e88c:	e0c0      	b.n	800ea10 <UART_SetConfig+0x348>
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	4a44      	ldr	r2, [pc, #272]	@ (800e9a4 <UART_SetConfig+0x2dc>)
 800e894:	4293      	cmp	r3, r2
 800e896:	d125      	bne.n	800e8e4 <UART_SetConfig+0x21c>
 800e898:	4b3e      	ldr	r3, [pc, #248]	@ (800e994 <UART_SetConfig+0x2cc>)
 800e89a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e89e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e8a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e8a6:	d017      	beq.n	800e8d8 <UART_SetConfig+0x210>
 800e8a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e8ac:	d817      	bhi.n	800e8de <UART_SetConfig+0x216>
 800e8ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e8b2:	d00b      	beq.n	800e8cc <UART_SetConfig+0x204>
 800e8b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e8b8:	d811      	bhi.n	800e8de <UART_SetConfig+0x216>
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d003      	beq.n	800e8c6 <UART_SetConfig+0x1fe>
 800e8be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e8c2:	d006      	beq.n	800e8d2 <UART_SetConfig+0x20a>
 800e8c4:	e00b      	b.n	800e8de <UART_SetConfig+0x216>
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	77fb      	strb	r3, [r7, #31]
 800e8ca:	e0a1      	b.n	800ea10 <UART_SetConfig+0x348>
 800e8cc:	2302      	movs	r3, #2
 800e8ce:	77fb      	strb	r3, [r7, #31]
 800e8d0:	e09e      	b.n	800ea10 <UART_SetConfig+0x348>
 800e8d2:	2304      	movs	r3, #4
 800e8d4:	77fb      	strb	r3, [r7, #31]
 800e8d6:	e09b      	b.n	800ea10 <UART_SetConfig+0x348>
 800e8d8:	2308      	movs	r3, #8
 800e8da:	77fb      	strb	r3, [r7, #31]
 800e8dc:	e098      	b.n	800ea10 <UART_SetConfig+0x348>
 800e8de:	2310      	movs	r3, #16
 800e8e0:	77fb      	strb	r3, [r7, #31]
 800e8e2:	e095      	b.n	800ea10 <UART_SetConfig+0x348>
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	4a2f      	ldr	r2, [pc, #188]	@ (800e9a8 <UART_SetConfig+0x2e0>)
 800e8ea:	4293      	cmp	r3, r2
 800e8ec:	d125      	bne.n	800e93a <UART_SetConfig+0x272>
 800e8ee:	4b29      	ldr	r3, [pc, #164]	@ (800e994 <UART_SetConfig+0x2cc>)
 800e8f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e8f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800e8f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e8fc:	d017      	beq.n	800e92e <UART_SetConfig+0x266>
 800e8fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e902:	d817      	bhi.n	800e934 <UART_SetConfig+0x26c>
 800e904:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e908:	d00b      	beq.n	800e922 <UART_SetConfig+0x25a>
 800e90a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e90e:	d811      	bhi.n	800e934 <UART_SetConfig+0x26c>
 800e910:	2b00      	cmp	r3, #0
 800e912:	d003      	beq.n	800e91c <UART_SetConfig+0x254>
 800e914:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e918:	d006      	beq.n	800e928 <UART_SetConfig+0x260>
 800e91a:	e00b      	b.n	800e934 <UART_SetConfig+0x26c>
 800e91c:	2301      	movs	r3, #1
 800e91e:	77fb      	strb	r3, [r7, #31]
 800e920:	e076      	b.n	800ea10 <UART_SetConfig+0x348>
 800e922:	2302      	movs	r3, #2
 800e924:	77fb      	strb	r3, [r7, #31]
 800e926:	e073      	b.n	800ea10 <UART_SetConfig+0x348>
 800e928:	2304      	movs	r3, #4
 800e92a:	77fb      	strb	r3, [r7, #31]
 800e92c:	e070      	b.n	800ea10 <UART_SetConfig+0x348>
 800e92e:	2308      	movs	r3, #8
 800e930:	77fb      	strb	r3, [r7, #31]
 800e932:	e06d      	b.n	800ea10 <UART_SetConfig+0x348>
 800e934:	2310      	movs	r3, #16
 800e936:	77fb      	strb	r3, [r7, #31]
 800e938:	e06a      	b.n	800ea10 <UART_SetConfig+0x348>
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	4a1b      	ldr	r2, [pc, #108]	@ (800e9ac <UART_SetConfig+0x2e4>)
 800e940:	4293      	cmp	r3, r2
 800e942:	d138      	bne.n	800e9b6 <UART_SetConfig+0x2ee>
 800e944:	4b13      	ldr	r3, [pc, #76]	@ (800e994 <UART_SetConfig+0x2cc>)
 800e946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e94a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800e94e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e952:	d017      	beq.n	800e984 <UART_SetConfig+0x2bc>
 800e954:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e958:	d82a      	bhi.n	800e9b0 <UART_SetConfig+0x2e8>
 800e95a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e95e:	d00b      	beq.n	800e978 <UART_SetConfig+0x2b0>
 800e960:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e964:	d824      	bhi.n	800e9b0 <UART_SetConfig+0x2e8>
 800e966:	2b00      	cmp	r3, #0
 800e968:	d003      	beq.n	800e972 <UART_SetConfig+0x2aa>
 800e96a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e96e:	d006      	beq.n	800e97e <UART_SetConfig+0x2b6>
 800e970:	e01e      	b.n	800e9b0 <UART_SetConfig+0x2e8>
 800e972:	2300      	movs	r3, #0
 800e974:	77fb      	strb	r3, [r7, #31]
 800e976:	e04b      	b.n	800ea10 <UART_SetConfig+0x348>
 800e978:	2302      	movs	r3, #2
 800e97a:	77fb      	strb	r3, [r7, #31]
 800e97c:	e048      	b.n	800ea10 <UART_SetConfig+0x348>
 800e97e:	2304      	movs	r3, #4
 800e980:	77fb      	strb	r3, [r7, #31]
 800e982:	e045      	b.n	800ea10 <UART_SetConfig+0x348>
 800e984:	2308      	movs	r3, #8
 800e986:	77fb      	strb	r3, [r7, #31]
 800e988:	e042      	b.n	800ea10 <UART_SetConfig+0x348>
 800e98a:	bf00      	nop
 800e98c:	efff69f3 	.word	0xefff69f3
 800e990:	40011000 	.word	0x40011000
 800e994:	40023800 	.word	0x40023800
 800e998:	40004400 	.word	0x40004400
 800e99c:	40004800 	.word	0x40004800
 800e9a0:	40004c00 	.word	0x40004c00
 800e9a4:	40005000 	.word	0x40005000
 800e9a8:	40011400 	.word	0x40011400
 800e9ac:	40007800 	.word	0x40007800
 800e9b0:	2310      	movs	r3, #16
 800e9b2:	77fb      	strb	r3, [r7, #31]
 800e9b4:	e02c      	b.n	800ea10 <UART_SetConfig+0x348>
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	4a72      	ldr	r2, [pc, #456]	@ (800eb84 <UART_SetConfig+0x4bc>)
 800e9bc:	4293      	cmp	r3, r2
 800e9be:	d125      	bne.n	800ea0c <UART_SetConfig+0x344>
 800e9c0:	4b71      	ldr	r3, [pc, #452]	@ (800eb88 <UART_SetConfig+0x4c0>)
 800e9c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e9c6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800e9ca:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800e9ce:	d017      	beq.n	800ea00 <UART_SetConfig+0x338>
 800e9d0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800e9d4:	d817      	bhi.n	800ea06 <UART_SetConfig+0x33e>
 800e9d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e9da:	d00b      	beq.n	800e9f4 <UART_SetConfig+0x32c>
 800e9dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e9e0:	d811      	bhi.n	800ea06 <UART_SetConfig+0x33e>
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d003      	beq.n	800e9ee <UART_SetConfig+0x326>
 800e9e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e9ea:	d006      	beq.n	800e9fa <UART_SetConfig+0x332>
 800e9ec:	e00b      	b.n	800ea06 <UART_SetConfig+0x33e>
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	77fb      	strb	r3, [r7, #31]
 800e9f2:	e00d      	b.n	800ea10 <UART_SetConfig+0x348>
 800e9f4:	2302      	movs	r3, #2
 800e9f6:	77fb      	strb	r3, [r7, #31]
 800e9f8:	e00a      	b.n	800ea10 <UART_SetConfig+0x348>
 800e9fa:	2304      	movs	r3, #4
 800e9fc:	77fb      	strb	r3, [r7, #31]
 800e9fe:	e007      	b.n	800ea10 <UART_SetConfig+0x348>
 800ea00:	2308      	movs	r3, #8
 800ea02:	77fb      	strb	r3, [r7, #31]
 800ea04:	e004      	b.n	800ea10 <UART_SetConfig+0x348>
 800ea06:	2310      	movs	r3, #16
 800ea08:	77fb      	strb	r3, [r7, #31]
 800ea0a:	e001      	b.n	800ea10 <UART_SetConfig+0x348>
 800ea0c:	2310      	movs	r3, #16
 800ea0e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	69db      	ldr	r3, [r3, #28]
 800ea14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ea18:	d15b      	bne.n	800ead2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800ea1a:	7ffb      	ldrb	r3, [r7, #31]
 800ea1c:	2b08      	cmp	r3, #8
 800ea1e:	d828      	bhi.n	800ea72 <UART_SetConfig+0x3aa>
 800ea20:	a201      	add	r2, pc, #4	@ (adr r2, 800ea28 <UART_SetConfig+0x360>)
 800ea22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea26:	bf00      	nop
 800ea28:	0800ea4d 	.word	0x0800ea4d
 800ea2c:	0800ea55 	.word	0x0800ea55
 800ea30:	0800ea5d 	.word	0x0800ea5d
 800ea34:	0800ea73 	.word	0x0800ea73
 800ea38:	0800ea63 	.word	0x0800ea63
 800ea3c:	0800ea73 	.word	0x0800ea73
 800ea40:	0800ea73 	.word	0x0800ea73
 800ea44:	0800ea73 	.word	0x0800ea73
 800ea48:	0800ea6b 	.word	0x0800ea6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ea4c:	f7fb fb28 	bl	800a0a0 <HAL_RCC_GetPCLK1Freq>
 800ea50:	61b8      	str	r0, [r7, #24]
        break;
 800ea52:	e013      	b.n	800ea7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ea54:	f7fb fb38 	bl	800a0c8 <HAL_RCC_GetPCLK2Freq>
 800ea58:	61b8      	str	r0, [r7, #24]
        break;
 800ea5a:	e00f      	b.n	800ea7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ea5c:	4b4b      	ldr	r3, [pc, #300]	@ (800eb8c <UART_SetConfig+0x4c4>)
 800ea5e:	61bb      	str	r3, [r7, #24]
        break;
 800ea60:	e00c      	b.n	800ea7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ea62:	f7fb fa4b 	bl	8009efc <HAL_RCC_GetSysClockFreq>
 800ea66:	61b8      	str	r0, [r7, #24]
        break;
 800ea68:	e008      	b.n	800ea7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ea6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ea6e:	61bb      	str	r3, [r7, #24]
        break;
 800ea70:	e004      	b.n	800ea7c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800ea72:	2300      	movs	r3, #0
 800ea74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ea76:	2301      	movs	r3, #1
 800ea78:	77bb      	strb	r3, [r7, #30]
        break;
 800ea7a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ea7c:	69bb      	ldr	r3, [r7, #24]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d074      	beq.n	800eb6c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ea82:	69bb      	ldr	r3, [r7, #24]
 800ea84:	005a      	lsls	r2, r3, #1
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	685b      	ldr	r3, [r3, #4]
 800ea8a:	085b      	lsrs	r3, r3, #1
 800ea8c:	441a      	add	r2, r3
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	685b      	ldr	r3, [r3, #4]
 800ea92:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea96:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ea98:	693b      	ldr	r3, [r7, #16]
 800ea9a:	2b0f      	cmp	r3, #15
 800ea9c:	d916      	bls.n	800eacc <UART_SetConfig+0x404>
 800ea9e:	693b      	ldr	r3, [r7, #16]
 800eaa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eaa4:	d212      	bcs.n	800eacc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800eaa6:	693b      	ldr	r3, [r7, #16]
 800eaa8:	b29b      	uxth	r3, r3
 800eaaa:	f023 030f 	bic.w	r3, r3, #15
 800eaae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800eab0:	693b      	ldr	r3, [r7, #16]
 800eab2:	085b      	lsrs	r3, r3, #1
 800eab4:	b29b      	uxth	r3, r3
 800eab6:	f003 0307 	and.w	r3, r3, #7
 800eaba:	b29a      	uxth	r2, r3
 800eabc:	89fb      	ldrh	r3, [r7, #14]
 800eabe:	4313      	orrs	r3, r2
 800eac0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	89fa      	ldrh	r2, [r7, #14]
 800eac8:	60da      	str	r2, [r3, #12]
 800eaca:	e04f      	b.n	800eb6c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800eacc:	2301      	movs	r3, #1
 800eace:	77bb      	strb	r3, [r7, #30]
 800ead0:	e04c      	b.n	800eb6c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ead2:	7ffb      	ldrb	r3, [r7, #31]
 800ead4:	2b08      	cmp	r3, #8
 800ead6:	d828      	bhi.n	800eb2a <UART_SetConfig+0x462>
 800ead8:	a201      	add	r2, pc, #4	@ (adr r2, 800eae0 <UART_SetConfig+0x418>)
 800eada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eade:	bf00      	nop
 800eae0:	0800eb05 	.word	0x0800eb05
 800eae4:	0800eb0d 	.word	0x0800eb0d
 800eae8:	0800eb15 	.word	0x0800eb15
 800eaec:	0800eb2b 	.word	0x0800eb2b
 800eaf0:	0800eb1b 	.word	0x0800eb1b
 800eaf4:	0800eb2b 	.word	0x0800eb2b
 800eaf8:	0800eb2b 	.word	0x0800eb2b
 800eafc:	0800eb2b 	.word	0x0800eb2b
 800eb00:	0800eb23 	.word	0x0800eb23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eb04:	f7fb facc 	bl	800a0a0 <HAL_RCC_GetPCLK1Freq>
 800eb08:	61b8      	str	r0, [r7, #24]
        break;
 800eb0a:	e013      	b.n	800eb34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eb0c:	f7fb fadc 	bl	800a0c8 <HAL_RCC_GetPCLK2Freq>
 800eb10:	61b8      	str	r0, [r7, #24]
        break;
 800eb12:	e00f      	b.n	800eb34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800eb14:	4b1d      	ldr	r3, [pc, #116]	@ (800eb8c <UART_SetConfig+0x4c4>)
 800eb16:	61bb      	str	r3, [r7, #24]
        break;
 800eb18:	e00c      	b.n	800eb34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800eb1a:	f7fb f9ef 	bl	8009efc <HAL_RCC_GetSysClockFreq>
 800eb1e:	61b8      	str	r0, [r7, #24]
        break;
 800eb20:	e008      	b.n	800eb34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eb22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800eb26:	61bb      	str	r3, [r7, #24]
        break;
 800eb28:	e004      	b.n	800eb34 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800eb2e:	2301      	movs	r3, #1
 800eb30:	77bb      	strb	r3, [r7, #30]
        break;
 800eb32:	bf00      	nop
    }

    if (pclk != 0U)
 800eb34:	69bb      	ldr	r3, [r7, #24]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d018      	beq.n	800eb6c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	685b      	ldr	r3, [r3, #4]
 800eb3e:	085a      	lsrs	r2, r3, #1
 800eb40:	69bb      	ldr	r3, [r7, #24]
 800eb42:	441a      	add	r2, r3
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	685b      	ldr	r3, [r3, #4]
 800eb48:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb4c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eb4e:	693b      	ldr	r3, [r7, #16]
 800eb50:	2b0f      	cmp	r3, #15
 800eb52:	d909      	bls.n	800eb68 <UART_SetConfig+0x4a0>
 800eb54:	693b      	ldr	r3, [r7, #16]
 800eb56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eb5a:	d205      	bcs.n	800eb68 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800eb5c:	693b      	ldr	r3, [r7, #16]
 800eb5e:	b29a      	uxth	r2, r3
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	60da      	str	r2, [r3, #12]
 800eb66:	e001      	b.n	800eb6c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800eb68:	2301      	movs	r3, #1
 800eb6a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2200      	movs	r2, #0
 800eb70:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2200      	movs	r2, #0
 800eb76:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800eb78:	7fbb      	ldrb	r3, [r7, #30]
}
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	3720      	adds	r7, #32
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}
 800eb82:	bf00      	nop
 800eb84:	40007c00 	.word	0x40007c00
 800eb88:	40023800 	.word	0x40023800
 800eb8c:	00f42400 	.word	0x00f42400

0800eb90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800eb90:	b480      	push	{r7}
 800eb92:	b083      	sub	sp, #12
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb9c:	f003 0308 	and.w	r3, r3, #8
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d00a      	beq.n	800ebba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	685b      	ldr	r3, [r3, #4]
 800ebaa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	430a      	orrs	r2, r1
 800ebb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebbe:	f003 0301 	and.w	r3, r3, #1
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d00a      	beq.n	800ebdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	685b      	ldr	r3, [r3, #4]
 800ebcc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	430a      	orrs	r2, r1
 800ebda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebe0:	f003 0302 	and.w	r3, r3, #2
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d00a      	beq.n	800ebfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	685b      	ldr	r3, [r3, #4]
 800ebee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	430a      	orrs	r2, r1
 800ebfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec02:	f003 0304 	and.w	r3, r3, #4
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d00a      	beq.n	800ec20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	685b      	ldr	r3, [r3, #4]
 800ec10:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	430a      	orrs	r2, r1
 800ec1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec24:	f003 0310 	and.w	r3, r3, #16
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d00a      	beq.n	800ec42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	689b      	ldr	r3, [r3, #8]
 800ec32:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	430a      	orrs	r2, r1
 800ec40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec46:	f003 0320 	and.w	r3, r3, #32
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d00a      	beq.n	800ec64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	689b      	ldr	r3, [r3, #8]
 800ec54:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	430a      	orrs	r2, r1
 800ec62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d01a      	beq.n	800eca6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	685b      	ldr	r3, [r3, #4]
 800ec76:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	430a      	orrs	r2, r1
 800ec84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ec8e:	d10a      	bne.n	800eca6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	685b      	ldr	r3, [r3, #4]
 800ec96:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	430a      	orrs	r2, r1
 800eca4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d00a      	beq.n	800ecc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	685b      	ldr	r3, [r3, #4]
 800ecb8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	430a      	orrs	r2, r1
 800ecc6:	605a      	str	r2, [r3, #4]
  }
}
 800ecc8:	bf00      	nop
 800ecca:	370c      	adds	r7, #12
 800eccc:	46bd      	mov	sp, r7
 800ecce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd2:	4770      	bx	lr

0800ecd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b08c      	sub	sp, #48	@ 0x30
 800ecd8:	af02      	add	r7, sp, #8
 800ecda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2200      	movs	r2, #0
 800ece0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ece4:	f7f6 fa40 	bl	8005168 <HAL_GetTick>
 800ece8:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	f003 0308 	and.w	r3, r3, #8
 800ecf4:	2b08      	cmp	r3, #8
 800ecf6:	d12e      	bne.n	800ed56 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ecf8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ecfc:	9300      	str	r3, [sp, #0]
 800ecfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed00:	2200      	movs	r2, #0
 800ed02:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ed06:	6878      	ldr	r0, [r7, #4]
 800ed08:	f000 f83b 	bl	800ed82 <UART_WaitOnFlagUntilTimeout>
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d021      	beq.n	800ed56 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed18:	693b      	ldr	r3, [r7, #16]
 800ed1a:	e853 3f00 	ldrex	r3, [r3]
 800ed1e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ed26:	623b      	str	r3, [r7, #32]
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	461a      	mov	r2, r3
 800ed2e:	6a3b      	ldr	r3, [r7, #32]
 800ed30:	61fb      	str	r3, [r7, #28]
 800ed32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed34:	69b9      	ldr	r1, [r7, #24]
 800ed36:	69fa      	ldr	r2, [r7, #28]
 800ed38:	e841 2300 	strex	r3, r2, [r1]
 800ed3c:	617b      	str	r3, [r7, #20]
   return(result);
 800ed3e:	697b      	ldr	r3, [r7, #20]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d1e6      	bne.n	800ed12 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2220      	movs	r2, #32
 800ed48:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ed52:	2303      	movs	r3, #3
 800ed54:	e011      	b.n	800ed7a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2220      	movs	r2, #32
 800ed5a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	2220      	movs	r2, #32
 800ed60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2200      	movs	r2, #0
 800ed68:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2200      	movs	r2, #0
 800ed74:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800ed78:	2300      	movs	r3, #0
}
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	3728      	adds	r7, #40	@ 0x28
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	bd80      	pop	{r7, pc}

0800ed82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ed82:	b580      	push	{r7, lr}
 800ed84:	b084      	sub	sp, #16
 800ed86:	af00      	add	r7, sp, #0
 800ed88:	60f8      	str	r0, [r7, #12]
 800ed8a:	60b9      	str	r1, [r7, #8]
 800ed8c:	603b      	str	r3, [r7, #0]
 800ed8e:	4613      	mov	r3, r2
 800ed90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ed92:	e04f      	b.n	800ee34 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ed94:	69bb      	ldr	r3, [r7, #24]
 800ed96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed9a:	d04b      	beq.n	800ee34 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ed9c:	f7f6 f9e4 	bl	8005168 <HAL_GetTick>
 800eda0:	4602      	mov	r2, r0
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	1ad3      	subs	r3, r2, r3
 800eda6:	69ba      	ldr	r2, [r7, #24]
 800eda8:	429a      	cmp	r2, r3
 800edaa:	d302      	bcc.n	800edb2 <UART_WaitOnFlagUntilTimeout+0x30>
 800edac:	69bb      	ldr	r3, [r7, #24]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d101      	bne.n	800edb6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800edb2:	2303      	movs	r3, #3
 800edb4:	e04e      	b.n	800ee54 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	f003 0304 	and.w	r3, r3, #4
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d037      	beq.n	800ee34 <UART_WaitOnFlagUntilTimeout+0xb2>
 800edc4:	68bb      	ldr	r3, [r7, #8]
 800edc6:	2b80      	cmp	r3, #128	@ 0x80
 800edc8:	d034      	beq.n	800ee34 <UART_WaitOnFlagUntilTimeout+0xb2>
 800edca:	68bb      	ldr	r3, [r7, #8]
 800edcc:	2b40      	cmp	r3, #64	@ 0x40
 800edce:	d031      	beq.n	800ee34 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	69db      	ldr	r3, [r3, #28]
 800edd6:	f003 0308 	and.w	r3, r3, #8
 800edda:	2b08      	cmp	r3, #8
 800eddc:	d110      	bne.n	800ee00 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	2208      	movs	r2, #8
 800ede4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ede6:	68f8      	ldr	r0, [r7, #12]
 800ede8:	f000 f8fe 	bl	800efe8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	2208      	movs	r2, #8
 800edf0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	2200      	movs	r2, #0
 800edf8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800edfc:	2301      	movs	r3, #1
 800edfe:	e029      	b.n	800ee54 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	69db      	ldr	r3, [r3, #28]
 800ee06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ee0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ee0e:	d111      	bne.n	800ee34 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ee18:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ee1a:	68f8      	ldr	r0, [r7, #12]
 800ee1c:	f000 f8e4 	bl	800efe8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	2220      	movs	r2, #32
 800ee24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800ee30:	2303      	movs	r3, #3
 800ee32:	e00f      	b.n	800ee54 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	69da      	ldr	r2, [r3, #28]
 800ee3a:	68bb      	ldr	r3, [r7, #8]
 800ee3c:	4013      	ands	r3, r2
 800ee3e:	68ba      	ldr	r2, [r7, #8]
 800ee40:	429a      	cmp	r2, r3
 800ee42:	bf0c      	ite	eq
 800ee44:	2301      	moveq	r3, #1
 800ee46:	2300      	movne	r3, #0
 800ee48:	b2db      	uxtb	r3, r3
 800ee4a:	461a      	mov	r2, r3
 800ee4c:	79fb      	ldrb	r3, [r7, #7]
 800ee4e:	429a      	cmp	r2, r3
 800ee50:	d0a0      	beq.n	800ed94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ee52:	2300      	movs	r3, #0
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	3710      	adds	r7, #16
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}

0800ee5c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b096      	sub	sp, #88	@ 0x58
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	60f8      	str	r0, [r7, #12]
 800ee64:	60b9      	str	r1, [r7, #8]
 800ee66:	4613      	mov	r3, r2
 800ee68:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	68ba      	ldr	r2, [r7, #8]
 800ee6e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	88fa      	ldrh	r2, [r7, #6]
 800ee74:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	2222      	movs	r2, #34	@ 0x22
 800ee84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d028      	beq.n	800eee2 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ee94:	4a3e      	ldr	r2, [pc, #248]	@ (800ef90 <UART_Start_Receive_DMA+0x134>)
 800ee96:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ee9c:	4a3d      	ldr	r2, [pc, #244]	@ (800ef94 <UART_Start_Receive_DMA+0x138>)
 800ee9e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eea4:	4a3c      	ldr	r2, [pc, #240]	@ (800ef98 <UART_Start_Receive_DMA+0x13c>)
 800eea6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eeac:	2200      	movs	r2, #0
 800eeae:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	3324      	adds	r3, #36	@ 0x24
 800eeba:	4619      	mov	r1, r3
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eec0:	461a      	mov	r2, r3
 800eec2:	88fb      	ldrh	r3, [r7, #6]
 800eec4:	f7f6 ff14 	bl	8005cf0 <HAL_DMA_Start_IT>
 800eec8:	4603      	mov	r3, r0
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d009      	beq.n	800eee2 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	2210      	movs	r2, #16
 800eed2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	2220      	movs	r2, #32
 800eeda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800eede:	2301      	movs	r3, #1
 800eee0:	e051      	b.n	800ef86 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	691b      	ldr	r3, [r3, #16]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d018      	beq.n	800ef1c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eef2:	e853 3f00 	ldrex	r3, [r3]
 800eef6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800eef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eefa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800eefe:	657b      	str	r3, [r7, #84]	@ 0x54
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	461a      	mov	r2, r3
 800ef06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef08:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ef0a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef0c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ef0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ef10:	e841 2300 	strex	r3, r2, [r1]
 800ef14:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ef16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d1e6      	bne.n	800eeea <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	3308      	adds	r3, #8
 800ef22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef26:	e853 3f00 	ldrex	r3, [r3]
 800ef2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ef2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef2e:	f043 0301 	orr.w	r3, r3, #1
 800ef32:	653b      	str	r3, [r7, #80]	@ 0x50
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	3308      	adds	r3, #8
 800ef3a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ef3c:	637a      	str	r2, [r7, #52]	@ 0x34
 800ef3e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef40:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ef42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ef44:	e841 2300 	strex	r3, r2, [r1]
 800ef48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ef4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d1e5      	bne.n	800ef1c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	3308      	adds	r3, #8
 800ef56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef58:	697b      	ldr	r3, [r7, #20]
 800ef5a:	e853 3f00 	ldrex	r3, [r3]
 800ef5e:	613b      	str	r3, [r7, #16]
   return(result);
 800ef60:	693b      	ldr	r3, [r7, #16]
 800ef62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	3308      	adds	r3, #8
 800ef6e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ef70:	623a      	str	r2, [r7, #32]
 800ef72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef74:	69f9      	ldr	r1, [r7, #28]
 800ef76:	6a3a      	ldr	r2, [r7, #32]
 800ef78:	e841 2300 	strex	r3, r2, [r1]
 800ef7c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ef7e:	69bb      	ldr	r3, [r7, #24]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d1e5      	bne.n	800ef50 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800ef84:	2300      	movs	r3, #0
}
 800ef86:	4618      	mov	r0, r3
 800ef88:	3758      	adds	r7, #88	@ 0x58
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}
 800ef8e:	bf00      	nop
 800ef90:	0800f0b1 	.word	0x0800f0b1
 800ef94:	0800f20f 	.word	0x0800f20f
 800ef98:	0800f281 	.word	0x0800f281

0800ef9c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ef9c:	b480      	push	{r7}
 800ef9e:	b089      	sub	sp, #36	@ 0x24
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	e853 3f00 	ldrex	r3, [r3]
 800efb0:	60bb      	str	r3, [r7, #8]
   return(result);
 800efb2:	68bb      	ldr	r3, [r7, #8]
 800efb4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800efb8:	61fb      	str	r3, [r7, #28]
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	461a      	mov	r2, r3
 800efc0:	69fb      	ldr	r3, [r7, #28]
 800efc2:	61bb      	str	r3, [r7, #24]
 800efc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efc6:	6979      	ldr	r1, [r7, #20]
 800efc8:	69ba      	ldr	r2, [r7, #24]
 800efca:	e841 2300 	strex	r3, r2, [r1]
 800efce:	613b      	str	r3, [r7, #16]
   return(result);
 800efd0:	693b      	ldr	r3, [r7, #16]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d1e6      	bne.n	800efa4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	2220      	movs	r2, #32
 800efda:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800efdc:	bf00      	nop
 800efde:	3724      	adds	r7, #36	@ 0x24
 800efe0:	46bd      	mov	sp, r7
 800efe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe6:	4770      	bx	lr

0800efe8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800efe8:	b480      	push	{r7}
 800efea:	b095      	sub	sp, #84	@ 0x54
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eff8:	e853 3f00 	ldrex	r3, [r3]
 800effc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800effe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f000:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f004:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	461a      	mov	r2, r3
 800f00c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f00e:	643b      	str	r3, [r7, #64]	@ 0x40
 800f010:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f012:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f014:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f016:	e841 2300 	strex	r3, r2, [r1]
 800f01a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f01c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d1e6      	bne.n	800eff0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	3308      	adds	r3, #8
 800f028:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f02a:	6a3b      	ldr	r3, [r7, #32]
 800f02c:	e853 3f00 	ldrex	r3, [r3]
 800f030:	61fb      	str	r3, [r7, #28]
   return(result);
 800f032:	69fb      	ldr	r3, [r7, #28]
 800f034:	f023 0301 	bic.w	r3, r3, #1
 800f038:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	3308      	adds	r3, #8
 800f040:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f042:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f044:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f046:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f048:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f04a:	e841 2300 	strex	r3, r2, [r1]
 800f04e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f052:	2b00      	cmp	r3, #0
 800f054:	d1e5      	bne.n	800f022 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f05a:	2b01      	cmp	r3, #1
 800f05c:	d118      	bne.n	800f090 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	e853 3f00 	ldrex	r3, [r3]
 800f06a:	60bb      	str	r3, [r7, #8]
   return(result);
 800f06c:	68bb      	ldr	r3, [r7, #8]
 800f06e:	f023 0310 	bic.w	r3, r3, #16
 800f072:	647b      	str	r3, [r7, #68]	@ 0x44
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	461a      	mov	r2, r3
 800f07a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f07c:	61bb      	str	r3, [r7, #24]
 800f07e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f080:	6979      	ldr	r1, [r7, #20]
 800f082:	69ba      	ldr	r2, [r7, #24]
 800f084:	e841 2300 	strex	r3, r2, [r1]
 800f088:	613b      	str	r3, [r7, #16]
   return(result);
 800f08a:	693b      	ldr	r3, [r7, #16]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d1e6      	bne.n	800f05e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	2220      	movs	r2, #32
 800f094:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2200      	movs	r2, #0
 800f09c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800f0a4:	bf00      	nop
 800f0a6:	3754      	adds	r7, #84	@ 0x54
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ae:	4770      	bx	lr

0800f0b0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b09c      	sub	sp, #112	@ 0x70
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0bc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	69db      	ldr	r3, [r3, #28]
 800f0c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f0c6:	d071      	beq.n	800f1ac <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800f0c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f0d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f0d8:	e853 3f00 	ldrex	r3, [r3]
 800f0dc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f0de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f0e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f0e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f0e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	461a      	mov	r2, r3
 800f0ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f0ee:	657b      	str	r3, [r7, #84]	@ 0x54
 800f0f0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f0f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f0f6:	e841 2300 	strex	r3, r2, [r1]
 800f0fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f0fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d1e6      	bne.n	800f0d0 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f102:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	3308      	adds	r3, #8
 800f108:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f10a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f10c:	e853 3f00 	ldrex	r3, [r3]
 800f110:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f114:	f023 0301 	bic.w	r3, r3, #1
 800f118:	667b      	str	r3, [r7, #100]	@ 0x64
 800f11a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	3308      	adds	r3, #8
 800f120:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f122:	643a      	str	r2, [r7, #64]	@ 0x40
 800f124:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f126:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f128:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f12a:	e841 2300 	strex	r3, r2, [r1]
 800f12e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f132:	2b00      	cmp	r3, #0
 800f134:	d1e5      	bne.n	800f102 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f136:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	3308      	adds	r3, #8
 800f13c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f13e:	6a3b      	ldr	r3, [r7, #32]
 800f140:	e853 3f00 	ldrex	r3, [r3]
 800f144:	61fb      	str	r3, [r7, #28]
   return(result);
 800f146:	69fb      	ldr	r3, [r7, #28]
 800f148:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f14c:	663b      	str	r3, [r7, #96]	@ 0x60
 800f14e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	3308      	adds	r3, #8
 800f154:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f156:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f158:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f15a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f15c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f15e:	e841 2300 	strex	r3, r2, [r1]
 800f162:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f166:	2b00      	cmp	r3, #0
 800f168:	d1e5      	bne.n	800f136 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f16a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f16c:	2220      	movs	r2, #32
 800f16e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f172:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f176:	2b01      	cmp	r3, #1
 800f178:	d118      	bne.n	800f1ac <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f17a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	e853 3f00 	ldrex	r3, [r3]
 800f186:	60bb      	str	r3, [r7, #8]
   return(result);
 800f188:	68bb      	ldr	r3, [r7, #8]
 800f18a:	f023 0310 	bic.w	r3, r3, #16
 800f18e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f190:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	461a      	mov	r2, r3
 800f196:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f198:	61bb      	str	r3, [r7, #24]
 800f19a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f19c:	6979      	ldr	r1, [r7, #20]
 800f19e:	69ba      	ldr	r2, [r7, #24]
 800f1a0:	e841 2300 	strex	r3, r2, [r1]
 800f1a4:	613b      	str	r3, [r7, #16]
   return(result);
 800f1a6:	693b      	ldr	r3, [r7, #16]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d1e6      	bne.n	800f17a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f1ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f1b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f1b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f1b6:	2b01      	cmp	r3, #1
 800f1b8:	d122      	bne.n	800f200 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800f1ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f1bc:	2200      	movs	r2, #0
 800f1be:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	685b      	ldr	r3, [r3, #4]
 800f1c8:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800f1cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f1ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f1d2:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800f1d6:	429a      	cmp	r2, r3
 800f1d8:	d204      	bcs.n	800f1e4 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800f1da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f1dc:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800f1e0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f1e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f1e6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800f1ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f1ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f1f0:	b29b      	uxth	r3, r3
 800f1f2:	1ad3      	subs	r3, r2, r3
 800f1f4:	b29b      	uxth	r3, r3
 800f1f6:	4619      	mov	r1, r3
 800f1f8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f1fa:	f7ff fa59 	bl	800e6b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f1fe:	e002      	b.n	800f206 <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800f200:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f202:	f7f5 fe05 	bl	8004e10 <HAL_UART_RxCpltCallback>
}
 800f206:	bf00      	nop
 800f208:	3770      	adds	r7, #112	@ 0x70
 800f20a:	46bd      	mov	sp, r7
 800f20c:	bd80      	pop	{r7, pc}

0800f20e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f20e:	b580      	push	{r7, lr}
 800f210:	b084      	sub	sp, #16
 800f212:	af00      	add	r7, sp, #0
 800f214:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f21a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	2201      	movs	r2, #1
 800f220:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f226:	2b01      	cmp	r3, #1
 800f228:	d123      	bne.n	800f272 <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f230:	085b      	lsrs	r3, r3, #1
 800f232:	b29a      	uxth	r2, r3
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	685b      	ldr	r3, [r3, #4]
 800f240:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f248:	897a      	ldrh	r2, [r7, #10]
 800f24a:	429a      	cmp	r2, r3
 800f24c:	d803      	bhi.n	800f256 <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	897a      	ldrh	r2, [r7, #10]
 800f252:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f262:	b29b      	uxth	r3, r3
 800f264:	1ad3      	subs	r3, r2, r3
 800f266:	b29b      	uxth	r3, r3
 800f268:	4619      	mov	r1, r3
 800f26a:	68f8      	ldr	r0, [r7, #12]
 800f26c:	f7ff fa20 	bl	800e6b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f270:	e002      	b.n	800f278 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800f272:	68f8      	ldr	r0, [r7, #12]
 800f274:	f7f5 fdf0 	bl	8004e58 <HAL_UART_RxHalfCpltCallback>
}
 800f278:	bf00      	nop
 800f27a:	3710      	adds	r7, #16
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}

0800f280 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b086      	sub	sp, #24
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f28c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f28e:	697b      	ldr	r3, [r7, #20]
 800f290:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f292:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f294:	697b      	ldr	r3, [r7, #20]
 800f296:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f29a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f29c:	697b      	ldr	r3, [r7, #20]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	689b      	ldr	r3, [r3, #8]
 800f2a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f2a6:	2b80      	cmp	r3, #128	@ 0x80
 800f2a8:	d109      	bne.n	800f2be <UART_DMAError+0x3e>
 800f2aa:	693b      	ldr	r3, [r7, #16]
 800f2ac:	2b21      	cmp	r3, #33	@ 0x21
 800f2ae:	d106      	bne.n	800f2be <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f2b0:	697b      	ldr	r3, [r7, #20]
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800f2b8:	6978      	ldr	r0, [r7, #20]
 800f2ba:	f7ff fe6f 	bl	800ef9c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	689b      	ldr	r3, [r3, #8]
 800f2c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f2c8:	2b40      	cmp	r3, #64	@ 0x40
 800f2ca:	d109      	bne.n	800f2e0 <UART_DMAError+0x60>
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	2b22      	cmp	r3, #34	@ 0x22
 800f2d0:	d106      	bne.n	800f2e0 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f2d2:	697b      	ldr	r3, [r7, #20]
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800f2da:	6978      	ldr	r0, [r7, #20]
 800f2dc:	f7ff fe84 	bl	800efe8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f2e0:	697b      	ldr	r3, [r7, #20]
 800f2e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f2e6:	f043 0210 	orr.w	r2, r3, #16
 800f2ea:	697b      	ldr	r3, [r7, #20]
 800f2ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f2f0:	6978      	ldr	r0, [r7, #20]
 800f2f2:	f7f5 fdc7 	bl	8004e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f2f6:	bf00      	nop
 800f2f8:	3718      	adds	r7, #24
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bd80      	pop	{r7, pc}

0800f2fe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f2fe:	b580      	push	{r7, lr}
 800f300:	b084      	sub	sp, #16
 800f302:	af00      	add	r7, sp, #0
 800f304:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f30a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	2200      	movs	r2, #0
 800f310:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f314:	68f8      	ldr	r0, [r7, #12]
 800f316:	f7f5 fdb5 	bl	8004e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f31a:	bf00      	nop
 800f31c:	3710      	adds	r7, #16
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}

0800f322 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f322:	b580      	push	{r7, lr}
 800f324:	b088      	sub	sp, #32
 800f326:	af00      	add	r7, sp, #0
 800f328:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	e853 3f00 	ldrex	r3, [r3]
 800f336:	60bb      	str	r3, [r7, #8]
   return(result);
 800f338:	68bb      	ldr	r3, [r7, #8]
 800f33a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f33e:	61fb      	str	r3, [r7, #28]
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	461a      	mov	r2, r3
 800f346:	69fb      	ldr	r3, [r7, #28]
 800f348:	61bb      	str	r3, [r7, #24]
 800f34a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f34c:	6979      	ldr	r1, [r7, #20]
 800f34e:	69ba      	ldr	r2, [r7, #24]
 800f350:	e841 2300 	strex	r3, r2, [r1]
 800f354:	613b      	str	r3, [r7, #16]
   return(result);
 800f356:	693b      	ldr	r3, [r7, #16]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d1e6      	bne.n	800f32a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2220      	movs	r2, #32
 800f360:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	2200      	movs	r2, #0
 800f366:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f368:	6878      	ldr	r0, [r7, #4]
 800f36a:	f7ff f997 	bl	800e69c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f36e:	bf00      	nop
 800f370:	3720      	adds	r7, #32
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}
	...

0800f378 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800f378:	b480      	push	{r7}
 800f37a:	b083      	sub	sp, #12
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
 800f380:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800f382:	683b      	ldr	r3, [r7, #0]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d121      	bne.n	800f3ce <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681a      	ldr	r2, [r3, #0]
 800f38e:	4b27      	ldr	r3, [pc, #156]	@ (800f42c <FMC_SDRAM_Init+0xb4>)
 800f390:	4013      	ands	r3, r2
 800f392:	683a      	ldr	r2, [r7, #0]
 800f394:	6851      	ldr	r1, [r2, #4]
 800f396:	683a      	ldr	r2, [r7, #0]
 800f398:	6892      	ldr	r2, [r2, #8]
 800f39a:	4311      	orrs	r1, r2
 800f39c:	683a      	ldr	r2, [r7, #0]
 800f39e:	68d2      	ldr	r2, [r2, #12]
 800f3a0:	4311      	orrs	r1, r2
 800f3a2:	683a      	ldr	r2, [r7, #0]
 800f3a4:	6912      	ldr	r2, [r2, #16]
 800f3a6:	4311      	orrs	r1, r2
 800f3a8:	683a      	ldr	r2, [r7, #0]
 800f3aa:	6952      	ldr	r2, [r2, #20]
 800f3ac:	4311      	orrs	r1, r2
 800f3ae:	683a      	ldr	r2, [r7, #0]
 800f3b0:	6992      	ldr	r2, [r2, #24]
 800f3b2:	4311      	orrs	r1, r2
 800f3b4:	683a      	ldr	r2, [r7, #0]
 800f3b6:	69d2      	ldr	r2, [r2, #28]
 800f3b8:	4311      	orrs	r1, r2
 800f3ba:	683a      	ldr	r2, [r7, #0]
 800f3bc:	6a12      	ldr	r2, [r2, #32]
 800f3be:	4311      	orrs	r1, r2
 800f3c0:	683a      	ldr	r2, [r7, #0]
 800f3c2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800f3c4:	430a      	orrs	r2, r1
 800f3c6:	431a      	orrs	r2, r3
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	601a      	str	r2, [r3, #0]
 800f3cc:	e026      	b.n	800f41c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	69d9      	ldr	r1, [r3, #28]
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	6a1b      	ldr	r3, [r3, #32]
 800f3de:	4319      	orrs	r1, r3
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3e4:	430b      	orrs	r3, r1
 800f3e6:	431a      	orrs	r2, r3
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	685a      	ldr	r2, [r3, #4]
 800f3f0:	4b0e      	ldr	r3, [pc, #56]	@ (800f42c <FMC_SDRAM_Init+0xb4>)
 800f3f2:	4013      	ands	r3, r2
 800f3f4:	683a      	ldr	r2, [r7, #0]
 800f3f6:	6851      	ldr	r1, [r2, #4]
 800f3f8:	683a      	ldr	r2, [r7, #0]
 800f3fa:	6892      	ldr	r2, [r2, #8]
 800f3fc:	4311      	orrs	r1, r2
 800f3fe:	683a      	ldr	r2, [r7, #0]
 800f400:	68d2      	ldr	r2, [r2, #12]
 800f402:	4311      	orrs	r1, r2
 800f404:	683a      	ldr	r2, [r7, #0]
 800f406:	6912      	ldr	r2, [r2, #16]
 800f408:	4311      	orrs	r1, r2
 800f40a:	683a      	ldr	r2, [r7, #0]
 800f40c:	6952      	ldr	r2, [r2, #20]
 800f40e:	4311      	orrs	r1, r2
 800f410:	683a      	ldr	r2, [r7, #0]
 800f412:	6992      	ldr	r2, [r2, #24]
 800f414:	430a      	orrs	r2, r1
 800f416:	431a      	orrs	r2, r3
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800f41c:	2300      	movs	r3, #0
}
 800f41e:	4618      	mov	r0, r3
 800f420:	370c      	adds	r7, #12
 800f422:	46bd      	mov	sp, r7
 800f424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f428:	4770      	bx	lr
 800f42a:	bf00      	nop
 800f42c:	ffff8000 	.word	0xffff8000

0800f430 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f430:	b480      	push	{r7}
 800f432:	b085      	sub	sp, #20
 800f434:	af00      	add	r7, sp, #0
 800f436:	60f8      	str	r0, [r7, #12]
 800f438:	60b9      	str	r1, [r7, #8]
 800f43a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d128      	bne.n	800f494 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	689b      	ldr	r3, [r3, #8]
 800f446:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	1e59      	subs	r1, r3, #1
 800f450:	68bb      	ldr	r3, [r7, #8]
 800f452:	685b      	ldr	r3, [r3, #4]
 800f454:	3b01      	subs	r3, #1
 800f456:	011b      	lsls	r3, r3, #4
 800f458:	4319      	orrs	r1, r3
 800f45a:	68bb      	ldr	r3, [r7, #8]
 800f45c:	689b      	ldr	r3, [r3, #8]
 800f45e:	3b01      	subs	r3, #1
 800f460:	021b      	lsls	r3, r3, #8
 800f462:	4319      	orrs	r1, r3
 800f464:	68bb      	ldr	r3, [r7, #8]
 800f466:	68db      	ldr	r3, [r3, #12]
 800f468:	3b01      	subs	r3, #1
 800f46a:	031b      	lsls	r3, r3, #12
 800f46c:	4319      	orrs	r1, r3
 800f46e:	68bb      	ldr	r3, [r7, #8]
 800f470:	691b      	ldr	r3, [r3, #16]
 800f472:	3b01      	subs	r3, #1
 800f474:	041b      	lsls	r3, r3, #16
 800f476:	4319      	orrs	r1, r3
 800f478:	68bb      	ldr	r3, [r7, #8]
 800f47a:	695b      	ldr	r3, [r3, #20]
 800f47c:	3b01      	subs	r3, #1
 800f47e:	051b      	lsls	r3, r3, #20
 800f480:	4319      	orrs	r1, r3
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	699b      	ldr	r3, [r3, #24]
 800f486:	3b01      	subs	r3, #1
 800f488:	061b      	lsls	r3, r3, #24
 800f48a:	430b      	orrs	r3, r1
 800f48c:	431a      	orrs	r2, r3
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	609a      	str	r2, [r3, #8]
 800f492:	e02d      	b.n	800f4f0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	689a      	ldr	r2, [r3, #8]
 800f498:	4b19      	ldr	r3, [pc, #100]	@ (800f500 <FMC_SDRAM_Timing_Init+0xd0>)
 800f49a:	4013      	ands	r3, r2
 800f49c:	68ba      	ldr	r2, [r7, #8]
 800f49e:	68d2      	ldr	r2, [r2, #12]
 800f4a0:	3a01      	subs	r2, #1
 800f4a2:	0311      	lsls	r1, r2, #12
 800f4a4:	68ba      	ldr	r2, [r7, #8]
 800f4a6:	6952      	ldr	r2, [r2, #20]
 800f4a8:	3a01      	subs	r2, #1
 800f4aa:	0512      	lsls	r2, r2, #20
 800f4ac:	430a      	orrs	r2, r1
 800f4ae:	431a      	orrs	r2, r3
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	68db      	ldr	r3, [r3, #12]
 800f4b8:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800f4bc:	68bb      	ldr	r3, [r7, #8]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	1e59      	subs	r1, r3, #1
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	685b      	ldr	r3, [r3, #4]
 800f4c6:	3b01      	subs	r3, #1
 800f4c8:	011b      	lsls	r3, r3, #4
 800f4ca:	4319      	orrs	r1, r3
 800f4cc:	68bb      	ldr	r3, [r7, #8]
 800f4ce:	689b      	ldr	r3, [r3, #8]
 800f4d0:	3b01      	subs	r3, #1
 800f4d2:	021b      	lsls	r3, r3, #8
 800f4d4:	4319      	orrs	r1, r3
 800f4d6:	68bb      	ldr	r3, [r7, #8]
 800f4d8:	691b      	ldr	r3, [r3, #16]
 800f4da:	3b01      	subs	r3, #1
 800f4dc:	041b      	lsls	r3, r3, #16
 800f4de:	4319      	orrs	r1, r3
 800f4e0:	68bb      	ldr	r3, [r7, #8]
 800f4e2:	699b      	ldr	r3, [r3, #24]
 800f4e4:	3b01      	subs	r3, #1
 800f4e6:	061b      	lsls	r3, r3, #24
 800f4e8:	430b      	orrs	r3, r1
 800f4ea:	431a      	orrs	r2, r3
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800f4f0:	2300      	movs	r3, #0
}
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3714      	adds	r7, #20
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fc:	4770      	bx	lr
 800f4fe:	bf00      	nop
 800f500:	ff0f0fff 	.word	0xff0f0fff

0800f504 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800f504:	b084      	sub	sp, #16
 800f506:	b480      	push	{r7}
 800f508:	b085      	sub	sp, #20
 800f50a:	af00      	add	r7, sp, #0
 800f50c:	6078      	str	r0, [r7, #4]
 800f50e:	f107 001c 	add.w	r0, r7, #28
 800f512:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800f516:	2300      	movs	r3, #0
 800f518:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800f51a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800f51c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800f51e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800f520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800f522:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800f524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800f526:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800f528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800f52a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800f52c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800f52e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800f530:	68fa      	ldr	r2, [r7, #12]
 800f532:	4313      	orrs	r3, r2
 800f534:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	685a      	ldr	r2, [r3, #4]
 800f53a:	4b07      	ldr	r3, [pc, #28]	@ (800f558 <SDMMC_Init+0x54>)
 800f53c:	4013      	ands	r3, r2
 800f53e:	68fa      	ldr	r2, [r7, #12]
 800f540:	431a      	orrs	r2, r3
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f546:	2300      	movs	r3, #0
}
 800f548:	4618      	mov	r0, r3
 800f54a:	3714      	adds	r7, #20
 800f54c:	46bd      	mov	sp, r7
 800f54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f552:	b004      	add	sp, #16
 800f554:	4770      	bx	lr
 800f556:	bf00      	nop
 800f558:	ffff8100 	.word	0xffff8100

0800f55c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800f55c:	b480      	push	{r7}
 800f55e:	b083      	sub	sp, #12
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800f56a:	4618      	mov	r0, r3
 800f56c:	370c      	adds	r7, #12
 800f56e:	46bd      	mov	sp, r7
 800f570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f574:	4770      	bx	lr

0800f576 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800f576:	b480      	push	{r7}
 800f578:	b083      	sub	sp, #12
 800f57a:	af00      	add	r7, sp, #0
 800f57c:	6078      	str	r0, [r7, #4]
 800f57e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	681a      	ldr	r2, [r3, #0]
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800f58a:	2300      	movs	r3, #0
}
 800f58c:	4618      	mov	r0, r3
 800f58e:	370c      	adds	r7, #12
 800f590:	46bd      	mov	sp, r7
 800f592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f596:	4770      	bx	lr

0800f598 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800f598:	b480      	push	{r7}
 800f59a:	b083      	sub	sp, #12
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2203      	movs	r2, #3
 800f5a4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800f5a6:	2300      	movs	r3, #0
}
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	370c      	adds	r7, #12
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b2:	4770      	bx	lr

0800f5b4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800f5b4:	b480      	push	{r7}
 800f5b6:	b083      	sub	sp, #12
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	f003 0303 	and.w	r3, r3, #3
}
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	370c      	adds	r7, #12
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ce:	4770      	bx	lr

0800f5d0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800f5d0:	b480      	push	{r7}
 800f5d2:	b085      	sub	sp, #20
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
 800f5d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f5da:	2300      	movs	r3, #0
 800f5dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	681a      	ldr	r2, [r3, #0]
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f5e6:	683b      	ldr	r3, [r7, #0]
 800f5e8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800f5ea:	683b      	ldr	r3, [r7, #0]
 800f5ec:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f5ee:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800f5f4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800f5fa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f5fc:	68fa      	ldr	r2, [r7, #12]
 800f5fe:	4313      	orrs	r3, r2
 800f600:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	68da      	ldr	r2, [r3, #12]
 800f606:	4b06      	ldr	r3, [pc, #24]	@ (800f620 <SDMMC_SendCommand+0x50>)
 800f608:	4013      	ands	r3, r2
 800f60a:	68fa      	ldr	r2, [r7, #12]
 800f60c:	431a      	orrs	r2, r3
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800f612:	2300      	movs	r3, #0
}
 800f614:	4618      	mov	r0, r3
 800f616:	3714      	adds	r7, #20
 800f618:	46bd      	mov	sp, r7
 800f61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61e:	4770      	bx	lr
 800f620:	fffff000 	.word	0xfffff000

0800f624 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800f624:	b480      	push	{r7}
 800f626:	b083      	sub	sp, #12
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	691b      	ldr	r3, [r3, #16]
 800f630:	b2db      	uxtb	r3, r3
}
 800f632:	4618      	mov	r0, r3
 800f634:	370c      	adds	r7, #12
 800f636:	46bd      	mov	sp, r7
 800f638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63c:	4770      	bx	lr

0800f63e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800f63e:	b480      	push	{r7}
 800f640:	b085      	sub	sp, #20
 800f642:	af00      	add	r7, sp, #0
 800f644:	6078      	str	r0, [r7, #4]
 800f646:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	3314      	adds	r3, #20
 800f64c:	461a      	mov	r2, r3
 800f64e:	683b      	ldr	r3, [r7, #0]
 800f650:	4413      	add	r3, r2
 800f652:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	681b      	ldr	r3, [r3, #0]
}  
 800f658:	4618      	mov	r0, r3
 800f65a:	3714      	adds	r7, #20
 800f65c:	46bd      	mov	sp, r7
 800f65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f662:	4770      	bx	lr

0800f664 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800f664:	b480      	push	{r7}
 800f666:	b085      	sub	sp, #20
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
 800f66c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f66e:	2300      	movs	r3, #0
 800f670:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	681a      	ldr	r2, [r3, #0]
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800f67a:	683b      	ldr	r3, [r7, #0]
 800f67c:	685a      	ldr	r2, [r3, #4]
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f682:	683b      	ldr	r3, [r7, #0]
 800f684:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800f686:	683b      	ldr	r3, [r7, #0]
 800f688:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f68a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800f690:	431a      	orrs	r2, r3
                       Data->DPSM);
 800f692:	683b      	ldr	r3, [r7, #0]
 800f694:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800f696:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f698:	68fa      	ldr	r2, [r7, #12]
 800f69a:	4313      	orrs	r3, r2
 800f69c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6a2:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	431a      	orrs	r2, r3
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800f6ae:	2300      	movs	r3, #0

}
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	3714      	adds	r7, #20
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ba:	4770      	bx	lr

0800f6bc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b088      	sub	sp, #32
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
 800f6c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800f6c6:	683b      	ldr	r3, [r7, #0]
 800f6c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800f6ca:	2310      	movs	r3, #16
 800f6cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f6ce:	2340      	movs	r3, #64	@ 0x40
 800f6d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f6d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f6da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f6dc:	f107 0308 	add.w	r3, r7, #8
 800f6e0:	4619      	mov	r1, r3
 800f6e2:	6878      	ldr	r0, [r7, #4]
 800f6e4:	f7ff ff74 	bl	800f5d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800f6e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f6ec:	2110      	movs	r1, #16
 800f6ee:	6878      	ldr	r0, [r7, #4]
 800f6f0:	f000 f9d6 	bl	800faa0 <SDMMC_GetCmdResp1>
 800f6f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f6f6:	69fb      	ldr	r3, [r7, #28]
}
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	3720      	adds	r7, #32
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	bd80      	pop	{r7, pc}

0800f700 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b088      	sub	sp, #32
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
 800f708:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f70a:	683b      	ldr	r3, [r7, #0]
 800f70c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800f70e:	2311      	movs	r3, #17
 800f710:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f712:	2340      	movs	r3, #64	@ 0x40
 800f714:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f716:	2300      	movs	r3, #0
 800f718:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f71a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f71e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f720:	f107 0308 	add.w	r3, r7, #8
 800f724:	4619      	mov	r1, r3
 800f726:	6878      	ldr	r0, [r7, #4]
 800f728:	f7ff ff52 	bl	800f5d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f72c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f730:	2111      	movs	r1, #17
 800f732:	6878      	ldr	r0, [r7, #4]
 800f734:	f000 f9b4 	bl	800faa0 <SDMMC_GetCmdResp1>
 800f738:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f73a:	69fb      	ldr	r3, [r7, #28]
}
 800f73c:	4618      	mov	r0, r3
 800f73e:	3720      	adds	r7, #32
 800f740:	46bd      	mov	sp, r7
 800f742:	bd80      	pop	{r7, pc}

0800f744 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b088      	sub	sp, #32
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
 800f74c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800f752:	2312      	movs	r3, #18
 800f754:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f756:	2340      	movs	r3, #64	@ 0x40
 800f758:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f75a:	2300      	movs	r3, #0
 800f75c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f75e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f762:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f764:	f107 0308 	add.w	r3, r7, #8
 800f768:	4619      	mov	r1, r3
 800f76a:	6878      	ldr	r0, [r7, #4]
 800f76c:	f7ff ff30 	bl	800f5d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800f770:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f774:	2112      	movs	r1, #18
 800f776:	6878      	ldr	r0, [r7, #4]
 800f778:	f000 f992 	bl	800faa0 <SDMMC_GetCmdResp1>
 800f77c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f77e:	69fb      	ldr	r3, [r7, #28]
}
 800f780:	4618      	mov	r0, r3
 800f782:	3720      	adds	r7, #32
 800f784:	46bd      	mov	sp, r7
 800f786:	bd80      	pop	{r7, pc}

0800f788 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b088      	sub	sp, #32
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
 800f790:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f792:	683b      	ldr	r3, [r7, #0]
 800f794:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800f796:	2318      	movs	r3, #24
 800f798:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f79a:	2340      	movs	r3, #64	@ 0x40
 800f79c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f79e:	2300      	movs	r3, #0
 800f7a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f7a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f7a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f7a8:	f107 0308 	add.w	r3, r7, #8
 800f7ac:	4619      	mov	r1, r3
 800f7ae:	6878      	ldr	r0, [r7, #4]
 800f7b0:	f7ff ff0e 	bl	800f5d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f7b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f7b8:	2118      	movs	r1, #24
 800f7ba:	6878      	ldr	r0, [r7, #4]
 800f7bc:	f000 f970 	bl	800faa0 <SDMMC_GetCmdResp1>
 800f7c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f7c2:	69fb      	ldr	r3, [r7, #28]
}
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	3720      	adds	r7, #32
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	bd80      	pop	{r7, pc}

0800f7cc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b088      	sub	sp, #32
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
 800f7d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800f7da:	2319      	movs	r3, #25
 800f7dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f7de:	2340      	movs	r3, #64	@ 0x40
 800f7e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f7e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f7ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f7ec:	f107 0308 	add.w	r3, r7, #8
 800f7f0:	4619      	mov	r1, r3
 800f7f2:	6878      	ldr	r0, [r7, #4]
 800f7f4:	f7ff feec 	bl	800f5d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800f7f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f7fc:	2119      	movs	r1, #25
 800f7fe:	6878      	ldr	r0, [r7, #4]
 800f800:	f000 f94e 	bl	800faa0 <SDMMC_GetCmdResp1>
 800f804:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f806:	69fb      	ldr	r3, [r7, #28]
}
 800f808:	4618      	mov	r0, r3
 800f80a:	3720      	adds	r7, #32
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}

0800f810 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b088      	sub	sp, #32
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800f818:	2300      	movs	r3, #0
 800f81a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800f81c:	230c      	movs	r3, #12
 800f81e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f820:	2340      	movs	r3, #64	@ 0x40
 800f822:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f824:	2300      	movs	r3, #0
 800f826:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f828:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f82c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f82e:	f107 0308 	add.w	r3, r7, #8
 800f832:	4619      	mov	r1, r3
 800f834:	6878      	ldr	r0, [r7, #4]
 800f836:	f7ff fecb 	bl	800f5d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800f83a:	4a05      	ldr	r2, [pc, #20]	@ (800f850 <SDMMC_CmdStopTransfer+0x40>)
 800f83c:	210c      	movs	r1, #12
 800f83e:	6878      	ldr	r0, [r7, #4]
 800f840:	f000 f92e 	bl	800faa0 <SDMMC_GetCmdResp1>
 800f844:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f846:	69fb      	ldr	r3, [r7, #28]
}
 800f848:	4618      	mov	r0, r3
 800f84a:	3720      	adds	r7, #32
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}
 800f850:	05f5e100 	.word	0x05f5e100

0800f854 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b08a      	sub	sp, #40	@ 0x28
 800f858:	af00      	add	r7, sp, #0
 800f85a:	60f8      	str	r0, [r7, #12]
 800f85c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800f860:	683b      	ldr	r3, [r7, #0]
 800f862:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800f864:	2307      	movs	r3, #7
 800f866:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f868:	2340      	movs	r3, #64	@ 0x40
 800f86a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f86c:	2300      	movs	r3, #0
 800f86e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f870:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f874:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f876:	f107 0310 	add.w	r3, r7, #16
 800f87a:	4619      	mov	r1, r3
 800f87c:	68f8      	ldr	r0, [r7, #12]
 800f87e:	f7ff fea7 	bl	800f5d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800f882:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f886:	2107      	movs	r1, #7
 800f888:	68f8      	ldr	r0, [r7, #12]
 800f88a:	f000 f909 	bl	800faa0 <SDMMC_GetCmdResp1>
 800f88e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800f890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f892:	4618      	mov	r0, r3
 800f894:	3728      	adds	r7, #40	@ 0x28
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}

0800f89a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800f89a:	b580      	push	{r7, lr}
 800f89c:	b088      	sub	sp, #32
 800f89e:	af00      	add	r7, sp, #0
 800f8a0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f8b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f8b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f8b8:	f107 0308 	add.w	r3, r7, #8
 800f8bc:	4619      	mov	r1, r3
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f7ff fe86 	bl	800f5d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800f8c4:	6878      	ldr	r0, [r7, #4]
 800f8c6:	f000 fb23 	bl	800ff10 <SDMMC_GetCmdError>
 800f8ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f8cc:	69fb      	ldr	r3, [r7, #28]
}
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	3720      	adds	r7, #32
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}

0800f8d6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800f8d6:	b580      	push	{r7, lr}
 800f8d8:	b088      	sub	sp, #32
 800f8da:	af00      	add	r7, sp, #0
 800f8dc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800f8de:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800f8e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800f8e4:	2308      	movs	r3, #8
 800f8e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f8e8:	2340      	movs	r3, #64	@ 0x40
 800f8ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f8f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f8f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f8f6:	f107 0308 	add.w	r3, r7, #8
 800f8fa:	4619      	mov	r1, r3
 800f8fc:	6878      	ldr	r0, [r7, #4]
 800f8fe:	f7ff fe67 	bl	800f5d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800f902:	6878      	ldr	r0, [r7, #4]
 800f904:	f000 fab6 	bl	800fe74 <SDMMC_GetCmdResp7>
 800f908:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f90a:	69fb      	ldr	r3, [r7, #28]
}
 800f90c:	4618      	mov	r0, r3
 800f90e:	3720      	adds	r7, #32
 800f910:	46bd      	mov	sp, r7
 800f912:	bd80      	pop	{r7, pc}

0800f914 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b088      	sub	sp, #32
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
 800f91c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800f922:	2337      	movs	r3, #55	@ 0x37
 800f924:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f926:	2340      	movs	r3, #64	@ 0x40
 800f928:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f92a:	2300      	movs	r3, #0
 800f92c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f92e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f932:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f934:	f107 0308 	add.w	r3, r7, #8
 800f938:	4619      	mov	r1, r3
 800f93a:	6878      	ldr	r0, [r7, #4]
 800f93c:	f7ff fe48 	bl	800f5d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800f940:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f944:	2137      	movs	r1, #55	@ 0x37
 800f946:	6878      	ldr	r0, [r7, #4]
 800f948:	f000 f8aa 	bl	800faa0 <SDMMC_GetCmdResp1>
 800f94c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f94e:	69fb      	ldr	r3, [r7, #28]
}
 800f950:	4618      	mov	r0, r3
 800f952:	3720      	adds	r7, #32
 800f954:	46bd      	mov	sp, r7
 800f956:	bd80      	pop	{r7, pc}

0800f958 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f958:	b580      	push	{r7, lr}
 800f95a:	b088      	sub	sp, #32
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
 800f960:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800f962:	683a      	ldr	r2, [r7, #0]
 800f964:	4b0d      	ldr	r3, [pc, #52]	@ (800f99c <SDMMC_CmdAppOperCommand+0x44>)
 800f966:	4313      	orrs	r3, r2
 800f968:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800f96a:	2329      	movs	r3, #41	@ 0x29
 800f96c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f96e:	2340      	movs	r3, #64	@ 0x40
 800f970:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f972:	2300      	movs	r3, #0
 800f974:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f976:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f97a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f97c:	f107 0308 	add.w	r3, r7, #8
 800f980:	4619      	mov	r1, r3
 800f982:	6878      	ldr	r0, [r7, #4]
 800f984:	f7ff fe24 	bl	800f5d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800f988:	6878      	ldr	r0, [r7, #4]
 800f98a:	f000 f9bf 	bl	800fd0c <SDMMC_GetCmdResp3>
 800f98e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f990:	69fb      	ldr	r3, [r7, #28]
}
 800f992:	4618      	mov	r0, r3
 800f994:	3720      	adds	r7, #32
 800f996:	46bd      	mov	sp, r7
 800f998:	bd80      	pop	{r7, pc}
 800f99a:	bf00      	nop
 800f99c:	80100000 	.word	0x80100000

0800f9a0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b088      	sub	sp, #32
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800f9ac:	2302      	movs	r3, #2
 800f9ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f9b0:	23c0      	movs	r3, #192	@ 0xc0
 800f9b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f9b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f9bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f9be:	f107 0308 	add.w	r3, r7, #8
 800f9c2:	4619      	mov	r1, r3
 800f9c4:	6878      	ldr	r0, [r7, #4]
 800f9c6:	f7ff fe03 	bl	800f5d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f9ca:	6878      	ldr	r0, [r7, #4]
 800f9cc:	f000 f956 	bl	800fc7c <SDMMC_GetCmdResp2>
 800f9d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f9d2:	69fb      	ldr	r3, [r7, #28]
}
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	3720      	adds	r7, #32
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	bd80      	pop	{r7, pc}

0800f9dc <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b088      	sub	sp, #32
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
 800f9e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800f9ea:	2309      	movs	r3, #9
 800f9ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f9ee:	23c0      	movs	r3, #192	@ 0xc0
 800f9f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f9f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f9fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f9fc:	f107 0308 	add.w	r3, r7, #8
 800fa00:	4619      	mov	r1, r3
 800fa02:	6878      	ldr	r0, [r7, #4]
 800fa04:	f7ff fde4 	bl	800f5d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f000 f937 	bl	800fc7c <SDMMC_GetCmdResp2>
 800fa0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa10:	69fb      	ldr	r3, [r7, #28]
}
 800fa12:	4618      	mov	r0, r3
 800fa14:	3720      	adds	r7, #32
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd80      	pop	{r7, pc}

0800fa1a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800fa1a:	b580      	push	{r7, lr}
 800fa1c:	b088      	sub	sp, #32
 800fa1e:	af00      	add	r7, sp, #0
 800fa20:	6078      	str	r0, [r7, #4]
 800fa22:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800fa24:	2300      	movs	r3, #0
 800fa26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800fa28:	2303      	movs	r3, #3
 800fa2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fa2c:	2340      	movs	r3, #64	@ 0x40
 800fa2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fa30:	2300      	movs	r3, #0
 800fa32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fa34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fa38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fa3a:	f107 0308 	add.w	r3, r7, #8
 800fa3e:	4619      	mov	r1, r3
 800fa40:	6878      	ldr	r0, [r7, #4]
 800fa42:	f7ff fdc5 	bl	800f5d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800fa46:	683a      	ldr	r2, [r7, #0]
 800fa48:	2103      	movs	r1, #3
 800fa4a:	6878      	ldr	r0, [r7, #4]
 800fa4c:	f000 f99c 	bl	800fd88 <SDMMC_GetCmdResp6>
 800fa50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa52:	69fb      	ldr	r3, [r7, #28]
}
 800fa54:	4618      	mov	r0, r3
 800fa56:	3720      	adds	r7, #32
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	bd80      	pop	{r7, pc}

0800fa5c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b088      	sub	sp, #32
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
 800fa64:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800fa66:	683b      	ldr	r3, [r7, #0]
 800fa68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800fa6a:	230d      	movs	r3, #13
 800fa6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fa6e:	2340      	movs	r3, #64	@ 0x40
 800fa70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fa72:	2300      	movs	r3, #0
 800fa74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fa76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fa7a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fa7c:	f107 0308 	add.w	r3, r7, #8
 800fa80:	4619      	mov	r1, r3
 800fa82:	6878      	ldr	r0, [r7, #4]
 800fa84:	f7ff fda4 	bl	800f5d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800fa88:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fa8c:	210d      	movs	r1, #13
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	f000 f806 	bl	800faa0 <SDMMC_GetCmdResp1>
 800fa94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa96:	69fb      	ldr	r3, [r7, #28]
}
 800fa98:	4618      	mov	r0, r3
 800fa9a:	3720      	adds	r7, #32
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	bd80      	pop	{r7, pc}

0800faa0 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b088      	sub	sp, #32
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	60f8      	str	r0, [r7, #12]
 800faa8:	460b      	mov	r3, r1
 800faaa:	607a      	str	r2, [r7, #4]
 800faac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800faae:	4b70      	ldr	r3, [pc, #448]	@ (800fc70 <SDMMC_GetCmdResp1+0x1d0>)
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	4a70      	ldr	r2, [pc, #448]	@ (800fc74 <SDMMC_GetCmdResp1+0x1d4>)
 800fab4:	fba2 2303 	umull	r2, r3, r2, r3
 800fab8:	0a5a      	lsrs	r2, r3, #9
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	fb02 f303 	mul.w	r3, r2, r3
 800fac0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800fac2:	69fb      	ldr	r3, [r7, #28]
 800fac4:	1e5a      	subs	r2, r3, #1
 800fac6:	61fa      	str	r2, [r7, #28]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d102      	bne.n	800fad2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800facc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800fad0:	e0c9      	b.n	800fc66 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fad6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fad8:	69bb      	ldr	r3, [r7, #24]
 800fada:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d0ef      	beq.n	800fac2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fae2:	69bb      	ldr	r3, [r7, #24]
 800fae4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d1ea      	bne.n	800fac2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800faf0:	f003 0304 	and.w	r3, r3, #4
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d004      	beq.n	800fb02 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	2204      	movs	r2, #4
 800fafc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fafe:	2304      	movs	r3, #4
 800fb00:	e0b1      	b.n	800fc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb06:	f003 0301 	and.w	r3, r3, #1
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d004      	beq.n	800fb18 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	2201      	movs	r2, #1
 800fb12:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fb14:	2301      	movs	r3, #1
 800fb16:	e0a6      	b.n	800fc66 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	22c5      	movs	r2, #197	@ 0xc5
 800fb1c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800fb1e:	68f8      	ldr	r0, [r7, #12]
 800fb20:	f7ff fd80 	bl	800f624 <SDMMC_GetCommandResponse>
 800fb24:	4603      	mov	r3, r0
 800fb26:	461a      	mov	r2, r3
 800fb28:	7afb      	ldrb	r3, [r7, #11]
 800fb2a:	4293      	cmp	r3, r2
 800fb2c:	d001      	beq.n	800fb32 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fb2e:	2301      	movs	r3, #1
 800fb30:	e099      	b.n	800fc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800fb32:	2100      	movs	r1, #0
 800fb34:	68f8      	ldr	r0, [r7, #12]
 800fb36:	f7ff fd82 	bl	800f63e <SDMMC_GetResponse>
 800fb3a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800fb3c:	697a      	ldr	r2, [r7, #20]
 800fb3e:	4b4e      	ldr	r3, [pc, #312]	@ (800fc78 <SDMMC_GetCmdResp1+0x1d8>)
 800fb40:	4013      	ands	r3, r2
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d101      	bne.n	800fb4a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800fb46:	2300      	movs	r3, #0
 800fb48:	e08d      	b.n	800fc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800fb4a:	697b      	ldr	r3, [r7, #20]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	da02      	bge.n	800fb56 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800fb50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800fb54:	e087      	b.n	800fc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800fb56:	697b      	ldr	r3, [r7, #20]
 800fb58:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d001      	beq.n	800fb64 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800fb60:	2340      	movs	r3, #64	@ 0x40
 800fb62:	e080      	b.n	800fc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800fb64:	697b      	ldr	r3, [r7, #20]
 800fb66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d001      	beq.n	800fb72 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800fb6e:	2380      	movs	r3, #128	@ 0x80
 800fb70:	e079      	b.n	800fc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800fb72:	697b      	ldr	r3, [r7, #20]
 800fb74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d002      	beq.n	800fb82 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800fb7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fb80:	e071      	b.n	800fc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800fb82:	697b      	ldr	r3, [r7, #20]
 800fb84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d002      	beq.n	800fb92 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800fb8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fb90:	e069      	b.n	800fc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800fb92:	697b      	ldr	r3, [r7, #20]
 800fb94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d002      	beq.n	800fba2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800fb9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fba0:	e061      	b.n	800fc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800fba2:	697b      	ldr	r3, [r7, #20]
 800fba4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d002      	beq.n	800fbb2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800fbac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fbb0:	e059      	b.n	800fc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800fbb2:	697b      	ldr	r3, [r7, #20]
 800fbb4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d002      	beq.n	800fbc2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fbbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fbc0:	e051      	b.n	800fc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800fbc2:	697b      	ldr	r3, [r7, #20]
 800fbc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d002      	beq.n	800fbd2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fbcc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800fbd0:	e049      	b.n	800fc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800fbd2:	697b      	ldr	r3, [r7, #20]
 800fbd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d002      	beq.n	800fbe2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800fbdc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800fbe0:	e041      	b.n	800fc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800fbe2:	697b      	ldr	r3, [r7, #20]
 800fbe4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d002      	beq.n	800fbf2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800fbec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fbf0:	e039      	b.n	800fc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800fbf2:	697b      	ldr	r3, [r7, #20]
 800fbf4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d002      	beq.n	800fc02 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800fbfc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800fc00:	e031      	b.n	800fc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d002      	beq.n	800fc12 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800fc0c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800fc10:	e029      	b.n	800fc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800fc12:	697b      	ldr	r3, [r7, #20]
 800fc14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d002      	beq.n	800fc22 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800fc1c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800fc20:	e021      	b.n	800fc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d002      	beq.n	800fc32 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800fc2c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800fc30:	e019      	b.n	800fc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800fc32:	697b      	ldr	r3, [r7, #20]
 800fc34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d002      	beq.n	800fc42 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800fc3c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800fc40:	e011      	b.n	800fc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800fc42:	697b      	ldr	r3, [r7, #20]
 800fc44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d002      	beq.n	800fc52 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800fc4c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800fc50:	e009      	b.n	800fc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800fc52:	697b      	ldr	r3, [r7, #20]
 800fc54:	f003 0308 	and.w	r3, r3, #8
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d002      	beq.n	800fc62 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800fc5c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800fc60:	e001      	b.n	800fc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fc62:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800fc66:	4618      	mov	r0, r3
 800fc68:	3720      	adds	r7, #32
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	bd80      	pop	{r7, pc}
 800fc6e:	bf00      	nop
 800fc70:	20000018 	.word	0x20000018
 800fc74:	10624dd3 	.word	0x10624dd3
 800fc78:	fdffe008 	.word	0xfdffe008

0800fc7c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800fc7c:	b480      	push	{r7}
 800fc7e:	b085      	sub	sp, #20
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fc84:	4b1f      	ldr	r3, [pc, #124]	@ (800fd04 <SDMMC_GetCmdResp2+0x88>)
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	4a1f      	ldr	r2, [pc, #124]	@ (800fd08 <SDMMC_GetCmdResp2+0x8c>)
 800fc8a:	fba2 2303 	umull	r2, r3, r2, r3
 800fc8e:	0a5b      	lsrs	r3, r3, #9
 800fc90:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fc94:	fb02 f303 	mul.w	r3, r2, r3
 800fc98:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	1e5a      	subs	r2, r3, #1
 800fc9e:	60fa      	str	r2, [r7, #12]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d102      	bne.n	800fcaa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fca4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800fca8:	e026      	b.n	800fcf8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fcae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fcb0:	68bb      	ldr	r3, [r7, #8]
 800fcb2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d0ef      	beq.n	800fc9a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fcba:	68bb      	ldr	r3, [r7, #8]
 800fcbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d1ea      	bne.n	800fc9a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fcc8:	f003 0304 	and.w	r3, r3, #4
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d004      	beq.n	800fcda <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	2204      	movs	r2, #4
 800fcd4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fcd6:	2304      	movs	r3, #4
 800fcd8:	e00e      	b.n	800fcf8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fcde:	f003 0301 	and.w	r3, r3, #1
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d004      	beq.n	800fcf0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	2201      	movs	r2, #1
 800fcea:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fcec:	2301      	movs	r3, #1
 800fcee:	e003      	b.n	800fcf8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	22c5      	movs	r2, #197	@ 0xc5
 800fcf4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800fcf6:	2300      	movs	r3, #0
}
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	3714      	adds	r7, #20
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd02:	4770      	bx	lr
 800fd04:	20000018 	.word	0x20000018
 800fd08:	10624dd3 	.word	0x10624dd3

0800fd0c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800fd0c:	b480      	push	{r7}
 800fd0e:	b085      	sub	sp, #20
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fd14:	4b1a      	ldr	r3, [pc, #104]	@ (800fd80 <SDMMC_GetCmdResp3+0x74>)
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	4a1a      	ldr	r2, [pc, #104]	@ (800fd84 <SDMMC_GetCmdResp3+0x78>)
 800fd1a:	fba2 2303 	umull	r2, r3, r2, r3
 800fd1e:	0a5b      	lsrs	r3, r3, #9
 800fd20:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fd24:	fb02 f303 	mul.w	r3, r2, r3
 800fd28:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	1e5a      	subs	r2, r3, #1
 800fd2e:	60fa      	str	r2, [r7, #12]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d102      	bne.n	800fd3a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fd34:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800fd38:	e01b      	b.n	800fd72 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd3e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fd40:	68bb      	ldr	r3, [r7, #8]
 800fd42:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d0ef      	beq.n	800fd2a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fd4a:	68bb      	ldr	r3, [r7, #8]
 800fd4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d1ea      	bne.n	800fd2a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd58:	f003 0304 	and.w	r3, r3, #4
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d004      	beq.n	800fd6a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	2204      	movs	r2, #4
 800fd64:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fd66:	2304      	movs	r3, #4
 800fd68:	e003      	b.n	800fd72 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	22c5      	movs	r2, #197	@ 0xc5
 800fd6e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800fd70:	2300      	movs	r3, #0
}
 800fd72:	4618      	mov	r0, r3
 800fd74:	3714      	adds	r7, #20
 800fd76:	46bd      	mov	sp, r7
 800fd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7c:	4770      	bx	lr
 800fd7e:	bf00      	nop
 800fd80:	20000018 	.word	0x20000018
 800fd84:	10624dd3 	.word	0x10624dd3

0800fd88 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b088      	sub	sp, #32
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	60f8      	str	r0, [r7, #12]
 800fd90:	460b      	mov	r3, r1
 800fd92:	607a      	str	r2, [r7, #4]
 800fd94:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fd96:	4b35      	ldr	r3, [pc, #212]	@ (800fe6c <SDMMC_GetCmdResp6+0xe4>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	4a35      	ldr	r2, [pc, #212]	@ (800fe70 <SDMMC_GetCmdResp6+0xe8>)
 800fd9c:	fba2 2303 	umull	r2, r3, r2, r3
 800fda0:	0a5b      	lsrs	r3, r3, #9
 800fda2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fda6:	fb02 f303 	mul.w	r3, r2, r3
 800fdaa:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800fdac:	69fb      	ldr	r3, [r7, #28]
 800fdae:	1e5a      	subs	r2, r3, #1
 800fdb0:	61fa      	str	r2, [r7, #28]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d102      	bne.n	800fdbc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fdb6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800fdba:	e052      	b.n	800fe62 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fdc0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fdc2:	69bb      	ldr	r3, [r7, #24]
 800fdc4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d0ef      	beq.n	800fdac <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fdcc:	69bb      	ldr	r3, [r7, #24]
 800fdce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d1ea      	bne.n	800fdac <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fdda:	f003 0304 	and.w	r3, r3, #4
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d004      	beq.n	800fdec <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	2204      	movs	r2, #4
 800fde6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fde8:	2304      	movs	r3, #4
 800fdea:	e03a      	b.n	800fe62 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fdf0:	f003 0301 	and.w	r3, r3, #1
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d004      	beq.n	800fe02 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	2201      	movs	r2, #1
 800fdfc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fdfe:	2301      	movs	r3, #1
 800fe00:	e02f      	b.n	800fe62 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800fe02:	68f8      	ldr	r0, [r7, #12]
 800fe04:	f7ff fc0e 	bl	800f624 <SDMMC_GetCommandResponse>
 800fe08:	4603      	mov	r3, r0
 800fe0a:	461a      	mov	r2, r3
 800fe0c:	7afb      	ldrb	r3, [r7, #11]
 800fe0e:	4293      	cmp	r3, r2
 800fe10:	d001      	beq.n	800fe16 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fe12:	2301      	movs	r3, #1
 800fe14:	e025      	b.n	800fe62 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	22c5      	movs	r2, #197	@ 0xc5
 800fe1a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800fe1c:	2100      	movs	r1, #0
 800fe1e:	68f8      	ldr	r0, [r7, #12]
 800fe20:	f7ff fc0d 	bl	800f63e <SDMMC_GetResponse>
 800fe24:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800fe26:	697b      	ldr	r3, [r7, #20]
 800fe28:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d106      	bne.n	800fe3e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800fe30:	697b      	ldr	r3, [r7, #20]
 800fe32:	0c1b      	lsrs	r3, r3, #16
 800fe34:	b29a      	uxth	r2, r3
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	e011      	b.n	800fe62 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800fe3e:	697b      	ldr	r3, [r7, #20]
 800fe40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d002      	beq.n	800fe4e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fe48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800fe4c:	e009      	b.n	800fe62 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800fe4e:	697b      	ldr	r3, [r7, #20]
 800fe50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d002      	beq.n	800fe5e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fe58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fe5c:	e001      	b.n	800fe62 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fe5e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800fe62:	4618      	mov	r0, r3
 800fe64:	3720      	adds	r7, #32
 800fe66:	46bd      	mov	sp, r7
 800fe68:	bd80      	pop	{r7, pc}
 800fe6a:	bf00      	nop
 800fe6c:	20000018 	.word	0x20000018
 800fe70:	10624dd3 	.word	0x10624dd3

0800fe74 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800fe74:	b480      	push	{r7}
 800fe76:	b085      	sub	sp, #20
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fe7c:	4b22      	ldr	r3, [pc, #136]	@ (800ff08 <SDMMC_GetCmdResp7+0x94>)
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	4a22      	ldr	r2, [pc, #136]	@ (800ff0c <SDMMC_GetCmdResp7+0x98>)
 800fe82:	fba2 2303 	umull	r2, r3, r2, r3
 800fe86:	0a5b      	lsrs	r3, r3, #9
 800fe88:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fe8c:	fb02 f303 	mul.w	r3, r2, r3
 800fe90:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	1e5a      	subs	r2, r3, #1
 800fe96:	60fa      	str	r2, [r7, #12]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d102      	bne.n	800fea2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fe9c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800fea0:	e02c      	b.n	800fefc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fea6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fea8:	68bb      	ldr	r3, [r7, #8]
 800feaa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d0ef      	beq.n	800fe92 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800feb2:	68bb      	ldr	r3, [r7, #8]
 800feb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d1ea      	bne.n	800fe92 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fec0:	f003 0304 	and.w	r3, r3, #4
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d004      	beq.n	800fed2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	2204      	movs	r2, #4
 800fecc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fece:	2304      	movs	r3, #4
 800fed0:	e014      	b.n	800fefc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fed6:	f003 0301 	and.w	r3, r3, #1
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d004      	beq.n	800fee8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	2201      	movs	r2, #1
 800fee2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fee4:	2301      	movs	r3, #1
 800fee6:	e009      	b.n	800fefc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800feec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d002      	beq.n	800fefa <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2240      	movs	r2, #64	@ 0x40
 800fef8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800fefa:	2300      	movs	r3, #0
  
}
 800fefc:	4618      	mov	r0, r3
 800fefe:	3714      	adds	r7, #20
 800ff00:	46bd      	mov	sp, r7
 800ff02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff06:	4770      	bx	lr
 800ff08:	20000018 	.word	0x20000018
 800ff0c:	10624dd3 	.word	0x10624dd3

0800ff10 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ff10:	b480      	push	{r7}
 800ff12:	b085      	sub	sp, #20
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ff18:	4b11      	ldr	r3, [pc, #68]	@ (800ff60 <SDMMC_GetCmdError+0x50>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	4a11      	ldr	r2, [pc, #68]	@ (800ff64 <SDMMC_GetCmdError+0x54>)
 800ff1e:	fba2 2303 	umull	r2, r3, r2, r3
 800ff22:	0a5b      	lsrs	r3, r3, #9
 800ff24:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ff28:	fb02 f303 	mul.w	r3, r2, r3
 800ff2c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	1e5a      	subs	r2, r3, #1
 800ff32:	60fa      	str	r2, [r7, #12]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d102      	bne.n	800ff3e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ff38:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ff3c:	e009      	b.n	800ff52 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d0f1      	beq.n	800ff2e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	22c5      	movs	r2, #197	@ 0xc5
 800ff4e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800ff50:	2300      	movs	r3, #0
}
 800ff52:	4618      	mov	r0, r3
 800ff54:	3714      	adds	r7, #20
 800ff56:	46bd      	mov	sp, r7
 800ff58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5c:	4770      	bx	lr
 800ff5e:	bf00      	nop
 800ff60:	20000018 	.word	0x20000018
 800ff64:	10624dd3 	.word	0x10624dd3

0800ff68 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ff68:	b480      	push	{r7}
 800ff6a:	b083      	sub	sp, #12
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	689b      	ldr	r3, [r3, #8]
 800ff74:	f043 0201 	orr.w	r2, r3, #1
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ff7c:	2300      	movs	r3, #0
}
 800ff7e:	4618      	mov	r0, r3
 800ff80:	370c      	adds	r7, #12
 800ff82:	46bd      	mov	sp, r7
 800ff84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff88:	4770      	bx	lr

0800ff8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ff8a:	b480      	push	{r7}
 800ff8c:	b083      	sub	sp, #12
 800ff8e:	af00      	add	r7, sp, #0
 800ff90:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	689b      	ldr	r3, [r3, #8]
 800ff96:	f023 0201 	bic.w	r2, r3, #1
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ff9e:	2300      	movs	r3, #0
}
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	370c      	adds	r7, #12
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffaa:	4770      	bx	lr

0800ffac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ffac:	b480      	push	{r7}
 800ffae:	b085      	sub	sp, #20
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
 800ffb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	3301      	adds	r3, #1
 800ffbe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ffc6:	d901      	bls.n	800ffcc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ffc8:	2303      	movs	r3, #3
 800ffca:	e01b      	b.n	8010004 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	691b      	ldr	r3, [r3, #16]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	daf2      	bge.n	800ffba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	019b      	lsls	r3, r3, #6
 800ffdc:	f043 0220 	orr.w	r2, r3, #32
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	3301      	adds	r3, #1
 800ffe8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fff0:	d901      	bls.n	800fff6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800fff2:	2303      	movs	r3, #3
 800fff4:	e006      	b.n	8010004 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	691b      	ldr	r3, [r3, #16]
 800fffa:	f003 0320 	and.w	r3, r3, #32
 800fffe:	2b20      	cmp	r3, #32
 8010000:	d0f0      	beq.n	800ffe4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8010002:	2300      	movs	r3, #0
}
 8010004:	4618      	mov	r0, r3
 8010006:	3714      	adds	r7, #20
 8010008:	46bd      	mov	sp, r7
 801000a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000e:	4770      	bx	lr

08010010 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010010:	b480      	push	{r7}
 8010012:	b085      	sub	sp, #20
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010018:	2300      	movs	r3, #0
 801001a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	3301      	adds	r3, #1
 8010020:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010028:	d901      	bls.n	801002e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801002a:	2303      	movs	r3, #3
 801002c:	e018      	b.n	8010060 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	691b      	ldr	r3, [r3, #16]
 8010032:	2b00      	cmp	r3, #0
 8010034:	daf2      	bge.n	801001c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8010036:	2300      	movs	r3, #0
 8010038:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	2210      	movs	r2, #16
 801003e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	3301      	adds	r3, #1
 8010044:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801004c:	d901      	bls.n	8010052 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801004e:	2303      	movs	r3, #3
 8010050:	e006      	b.n	8010060 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	691b      	ldr	r3, [r3, #16]
 8010056:	f003 0310 	and.w	r3, r3, #16
 801005a:	2b10      	cmp	r3, #16
 801005c:	d0f0      	beq.n	8010040 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801005e:	2300      	movs	r3, #0
}
 8010060:	4618      	mov	r0, r3
 8010062:	3714      	adds	r7, #20
 8010064:	46bd      	mov	sp, r7
 8010066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006a:	4770      	bx	lr

0801006c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801006c:	b480      	push	{r7}
 801006e:	b08b      	sub	sp, #44	@ 0x2c
 8010070:	af00      	add	r7, sp, #0
 8010072:	60f8      	str	r0, [r7, #12]
 8010074:	60b9      	str	r1, [r7, #8]
 8010076:	4613      	mov	r3, r2
 8010078:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801007e:	68bb      	ldr	r3, [r7, #8]
 8010080:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8010082:	88fb      	ldrh	r3, [r7, #6]
 8010084:	089b      	lsrs	r3, r3, #2
 8010086:	b29b      	uxth	r3, r3
 8010088:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801008a:	88fb      	ldrh	r3, [r7, #6]
 801008c:	f003 0303 	and.w	r3, r3, #3
 8010090:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8010092:	2300      	movs	r3, #0
 8010094:	623b      	str	r3, [r7, #32]
 8010096:	e014      	b.n	80100c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010098:	69bb      	ldr	r3, [r7, #24]
 801009a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801009e:	681a      	ldr	r2, [r3, #0]
 80100a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80100a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100a6:	3301      	adds	r3, #1
 80100a8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80100aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100ac:	3301      	adds	r3, #1
 80100ae:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80100b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100b2:	3301      	adds	r3, #1
 80100b4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80100b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100b8:	3301      	adds	r3, #1
 80100ba:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80100bc:	6a3b      	ldr	r3, [r7, #32]
 80100be:	3301      	adds	r3, #1
 80100c0:	623b      	str	r3, [r7, #32]
 80100c2:	6a3a      	ldr	r2, [r7, #32]
 80100c4:	697b      	ldr	r3, [r7, #20]
 80100c6:	429a      	cmp	r2, r3
 80100c8:	d3e6      	bcc.n	8010098 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80100ca:	8bfb      	ldrh	r3, [r7, #30]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d01e      	beq.n	801010e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80100d0:	2300      	movs	r3, #0
 80100d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80100d4:	69bb      	ldr	r3, [r7, #24]
 80100d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80100da:	461a      	mov	r2, r3
 80100dc:	f107 0310 	add.w	r3, r7, #16
 80100e0:	6812      	ldr	r2, [r2, #0]
 80100e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80100e4:	693a      	ldr	r2, [r7, #16]
 80100e6:	6a3b      	ldr	r3, [r7, #32]
 80100e8:	b2db      	uxtb	r3, r3
 80100ea:	00db      	lsls	r3, r3, #3
 80100ec:	fa22 f303 	lsr.w	r3, r2, r3
 80100f0:	b2da      	uxtb	r2, r3
 80100f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100f4:	701a      	strb	r2, [r3, #0]
      i++;
 80100f6:	6a3b      	ldr	r3, [r7, #32]
 80100f8:	3301      	adds	r3, #1
 80100fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80100fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100fe:	3301      	adds	r3, #1
 8010100:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8010102:	8bfb      	ldrh	r3, [r7, #30]
 8010104:	3b01      	subs	r3, #1
 8010106:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8010108:	8bfb      	ldrh	r3, [r7, #30]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d1ea      	bne.n	80100e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801010e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010110:	4618      	mov	r0, r3
 8010112:	372c      	adds	r7, #44	@ 0x2c
 8010114:	46bd      	mov	sp, r7
 8010116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011a:	4770      	bx	lr

0801011c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 801011c:	b480      	push	{r7}
 801011e:	b085      	sub	sp, #20
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	695b      	ldr	r3, [r3, #20]
 8010128:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	699b      	ldr	r3, [r3, #24]
 801012e:	68fa      	ldr	r2, [r7, #12]
 8010130:	4013      	ands	r3, r2
 8010132:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010134:	68fb      	ldr	r3, [r7, #12]
}
 8010136:	4618      	mov	r0, r3
 8010138:	3714      	adds	r7, #20
 801013a:	46bd      	mov	sp, r7
 801013c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010140:	4770      	bx	lr

08010142 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8010142:	b480      	push	{r7}
 8010144:	b085      	sub	sp, #20
 8010146:	af00      	add	r7, sp, #0
 8010148:	6078      	str	r0, [r7, #4]
 801014a:	460b      	mov	r3, r1
 801014c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8010152:	78fb      	ldrb	r3, [r7, #3]
 8010154:	015a      	lsls	r2, r3, #5
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	4413      	add	r3, r2
 801015a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801015e:	689b      	ldr	r3, [r3, #8]
 8010160:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8010162:	78fb      	ldrb	r3, [r7, #3]
 8010164:	015a      	lsls	r2, r3, #5
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	4413      	add	r3, r2
 801016a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801016e:	68db      	ldr	r3, [r3, #12]
 8010170:	68ba      	ldr	r2, [r7, #8]
 8010172:	4013      	ands	r3, r2
 8010174:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010176:	68bb      	ldr	r3, [r7, #8]
}
 8010178:	4618      	mov	r0, r3
 801017a:	3714      	adds	r7, #20
 801017c:	46bd      	mov	sp, r7
 801017e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010182:	4770      	bx	lr

08010184 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8010184:	b480      	push	{r7}
 8010186:	b083      	sub	sp, #12
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	695b      	ldr	r3, [r3, #20]
 8010190:	f003 0301 	and.w	r3, r3, #1
}
 8010194:	4618      	mov	r0, r3
 8010196:	370c      	adds	r7, #12
 8010198:	46bd      	mov	sp, r7
 801019a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019e:	4770      	bx	lr

080101a0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80101a0:	b480      	push	{r7}
 80101a2:	b085      	sub	sp, #20
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
 80101a8:	460b      	mov	r3, r1
 80101aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	68fa      	ldr	r2, [r7, #12]
 80101ba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80101be:	f023 0303 	bic.w	r3, r3, #3
 80101c2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80101ca:	681a      	ldr	r2, [r3, #0]
 80101cc:	78fb      	ldrb	r3, [r7, #3]
 80101ce:	f003 0303 	and.w	r3, r3, #3
 80101d2:	68f9      	ldr	r1, [r7, #12]
 80101d4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80101d8:	4313      	orrs	r3, r2
 80101da:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80101dc:	78fb      	ldrb	r3, [r7, #3]
 80101de:	2b01      	cmp	r3, #1
 80101e0:	d107      	bne.n	80101f2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80101e8:	461a      	mov	r2, r3
 80101ea:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80101ee:	6053      	str	r3, [r2, #4]
 80101f0:	e00c      	b.n	801020c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80101f2:	78fb      	ldrb	r3, [r7, #3]
 80101f4:	2b02      	cmp	r3, #2
 80101f6:	d107      	bne.n	8010208 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80101fe:	461a      	mov	r2, r3
 8010200:	f241 7370 	movw	r3, #6000	@ 0x1770
 8010204:	6053      	str	r3, [r2, #4]
 8010206:	e001      	b.n	801020c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8010208:	2301      	movs	r3, #1
 801020a:	e000      	b.n	801020e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 801020c:	2300      	movs	r3, #0
}
 801020e:	4618      	mov	r0, r3
 8010210:	3714      	adds	r7, #20
 8010212:	46bd      	mov	sp, r7
 8010214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010218:	4770      	bx	lr

0801021a <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801021a:	b480      	push	{r7}
 801021c:	b085      	sub	sp, #20
 801021e:	af00      	add	r7, sp, #0
 8010220:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801022c:	695b      	ldr	r3, [r3, #20]
 801022e:	b29b      	uxth	r3, r3
}
 8010230:	4618      	mov	r0, r3
 8010232:	3714      	adds	r7, #20
 8010234:	46bd      	mov	sp, r7
 8010236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023a:	4770      	bx	lr

0801023c <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 801023c:	b480      	push	{r7}
 801023e:	b089      	sub	sp, #36	@ 0x24
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
 8010244:	460b      	mov	r3, r1
 8010246:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 801024c:	78fb      	ldrb	r3, [r7, #3]
 801024e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8010250:	2300      	movs	r3, #0
 8010252:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8010254:	69bb      	ldr	r3, [r7, #24]
 8010256:	015a      	lsls	r2, r3, #5
 8010258:	69fb      	ldr	r3, [r7, #28]
 801025a:	4413      	add	r3, r2
 801025c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	0c9b      	lsrs	r3, r3, #18
 8010264:	f003 0303 	and.w	r3, r3, #3
 8010268:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 801026a:	69bb      	ldr	r3, [r7, #24]
 801026c:	015a      	lsls	r2, r3, #5
 801026e:	69fb      	ldr	r3, [r7, #28]
 8010270:	4413      	add	r3, r2
 8010272:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	0fdb      	lsrs	r3, r3, #31
 801027a:	f003 0301 	and.w	r3, r3, #1
 801027e:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8010280:	69bb      	ldr	r3, [r7, #24]
 8010282:	015a      	lsls	r2, r3, #5
 8010284:	69fb      	ldr	r3, [r7, #28]
 8010286:	4413      	add	r3, r2
 8010288:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801028c:	685b      	ldr	r3, [r3, #4]
 801028e:	0fdb      	lsrs	r3, r3, #31
 8010290:	f003 0301 	and.w	r3, r3, #1
 8010294:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	689b      	ldr	r3, [r3, #8]
 801029a:	f003 0320 	and.w	r3, r3, #32
 801029e:	2b20      	cmp	r3, #32
 80102a0:	d10d      	bne.n	80102be <USB_HC_Halt+0x82>
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d10a      	bne.n	80102be <USB_HC_Halt+0x82>
 80102a8:	693b      	ldr	r3, [r7, #16]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d005      	beq.n	80102ba <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80102ae:	697b      	ldr	r3, [r7, #20]
 80102b0:	2b01      	cmp	r3, #1
 80102b2:	d002      	beq.n	80102ba <USB_HC_Halt+0x7e>
 80102b4:	697b      	ldr	r3, [r7, #20]
 80102b6:	2b03      	cmp	r3, #3
 80102b8:	d101      	bne.n	80102be <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80102ba:	2300      	movs	r3, #0
 80102bc:	e0d8      	b.n	8010470 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80102be:	697b      	ldr	r3, [r7, #20]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d002      	beq.n	80102ca <USB_HC_Halt+0x8e>
 80102c4:	697b      	ldr	r3, [r7, #20]
 80102c6:	2b02      	cmp	r3, #2
 80102c8:	d173      	bne.n	80103b2 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80102ca:	69bb      	ldr	r3, [r7, #24]
 80102cc:	015a      	lsls	r2, r3, #5
 80102ce:	69fb      	ldr	r3, [r7, #28]
 80102d0:	4413      	add	r3, r2
 80102d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	69ba      	ldr	r2, [r7, #24]
 80102da:	0151      	lsls	r1, r2, #5
 80102dc:	69fa      	ldr	r2, [r7, #28]
 80102de:	440a      	add	r2, r1
 80102e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80102e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80102e8:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	689b      	ldr	r3, [r3, #8]
 80102ee:	f003 0320 	and.w	r3, r3, #32
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d14a      	bne.n	801038c <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102fa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d133      	bne.n	801036a <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8010302:	69bb      	ldr	r3, [r7, #24]
 8010304:	015a      	lsls	r2, r3, #5
 8010306:	69fb      	ldr	r3, [r7, #28]
 8010308:	4413      	add	r3, r2
 801030a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	69ba      	ldr	r2, [r7, #24]
 8010312:	0151      	lsls	r1, r2, #5
 8010314:	69fa      	ldr	r2, [r7, #28]
 8010316:	440a      	add	r2, r1
 8010318:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801031c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010320:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8010322:	69bb      	ldr	r3, [r7, #24]
 8010324:	015a      	lsls	r2, r3, #5
 8010326:	69fb      	ldr	r3, [r7, #28]
 8010328:	4413      	add	r3, r2
 801032a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	69ba      	ldr	r2, [r7, #24]
 8010332:	0151      	lsls	r1, r2, #5
 8010334:	69fa      	ldr	r2, [r7, #28]
 8010336:	440a      	add	r2, r1
 8010338:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801033c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010340:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8010342:	68bb      	ldr	r3, [r7, #8]
 8010344:	3301      	adds	r3, #1
 8010346:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8010348:	68bb      	ldr	r3, [r7, #8]
 801034a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801034e:	d82e      	bhi.n	80103ae <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8010350:	69bb      	ldr	r3, [r7, #24]
 8010352:	015a      	lsls	r2, r3, #5
 8010354:	69fb      	ldr	r3, [r7, #28]
 8010356:	4413      	add	r3, r2
 8010358:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010362:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010366:	d0ec      	beq.n	8010342 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8010368:	e081      	b.n	801046e <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801036a:	69bb      	ldr	r3, [r7, #24]
 801036c:	015a      	lsls	r2, r3, #5
 801036e:	69fb      	ldr	r3, [r7, #28]
 8010370:	4413      	add	r3, r2
 8010372:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	69ba      	ldr	r2, [r7, #24]
 801037a:	0151      	lsls	r1, r2, #5
 801037c:	69fa      	ldr	r2, [r7, #28]
 801037e:	440a      	add	r2, r1
 8010380:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010384:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010388:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801038a:	e070      	b.n	801046e <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801038c:	69bb      	ldr	r3, [r7, #24]
 801038e:	015a      	lsls	r2, r3, #5
 8010390:	69fb      	ldr	r3, [r7, #28]
 8010392:	4413      	add	r3, r2
 8010394:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	69ba      	ldr	r2, [r7, #24]
 801039c:	0151      	lsls	r1, r2, #5
 801039e:	69fa      	ldr	r2, [r7, #28]
 80103a0:	440a      	add	r2, r1
 80103a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80103a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80103aa:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80103ac:	e05f      	b.n	801046e <USB_HC_Halt+0x232>
            break;
 80103ae:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80103b0:	e05d      	b.n	801046e <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80103b2:	69bb      	ldr	r3, [r7, #24]
 80103b4:	015a      	lsls	r2, r3, #5
 80103b6:	69fb      	ldr	r3, [r7, #28]
 80103b8:	4413      	add	r3, r2
 80103ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	69ba      	ldr	r2, [r7, #24]
 80103c2:	0151      	lsls	r1, r2, #5
 80103c4:	69fa      	ldr	r2, [r7, #28]
 80103c6:	440a      	add	r2, r1
 80103c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80103cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80103d0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80103d2:	69fb      	ldr	r3, [r7, #28]
 80103d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80103d8:	691b      	ldr	r3, [r3, #16]
 80103da:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d133      	bne.n	801044a <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80103e2:	69bb      	ldr	r3, [r7, #24]
 80103e4:	015a      	lsls	r2, r3, #5
 80103e6:	69fb      	ldr	r3, [r7, #28]
 80103e8:	4413      	add	r3, r2
 80103ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	69ba      	ldr	r2, [r7, #24]
 80103f2:	0151      	lsls	r1, r2, #5
 80103f4:	69fa      	ldr	r2, [r7, #28]
 80103f6:	440a      	add	r2, r1
 80103f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80103fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010400:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8010402:	69bb      	ldr	r3, [r7, #24]
 8010404:	015a      	lsls	r2, r3, #5
 8010406:	69fb      	ldr	r3, [r7, #28]
 8010408:	4413      	add	r3, r2
 801040a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	69ba      	ldr	r2, [r7, #24]
 8010412:	0151      	lsls	r1, r2, #5
 8010414:	69fa      	ldr	r2, [r7, #28]
 8010416:	440a      	add	r2, r1
 8010418:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801041c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010420:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	3301      	adds	r3, #1
 8010426:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8010428:	68bb      	ldr	r3, [r7, #8]
 801042a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801042e:	d81d      	bhi.n	801046c <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8010430:	69bb      	ldr	r3, [r7, #24]
 8010432:	015a      	lsls	r2, r3, #5
 8010434:	69fb      	ldr	r3, [r7, #28]
 8010436:	4413      	add	r3, r2
 8010438:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010442:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010446:	d0ec      	beq.n	8010422 <USB_HC_Halt+0x1e6>
 8010448:	e011      	b.n	801046e <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801044a:	69bb      	ldr	r3, [r7, #24]
 801044c:	015a      	lsls	r2, r3, #5
 801044e:	69fb      	ldr	r3, [r7, #28]
 8010450:	4413      	add	r3, r2
 8010452:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	69ba      	ldr	r2, [r7, #24]
 801045a:	0151      	lsls	r1, r2, #5
 801045c:	69fa      	ldr	r2, [r7, #28]
 801045e:	440a      	add	r2, r1
 8010460:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010464:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010468:	6013      	str	r3, [r2, #0]
 801046a:	e000      	b.n	801046e <USB_HC_Halt+0x232>
          break;
 801046c:	bf00      	nop
    }
  }

  return HAL_OK;
 801046e:	2300      	movs	r3, #0
}
 8010470:	4618      	mov	r0, r3
 8010472:	3724      	adds	r7, #36	@ 0x24
 8010474:	46bd      	mov	sp, r7
 8010476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047a:	4770      	bx	lr

0801047c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 801047c:	b580      	push	{r7, lr}
 801047e:	b088      	sub	sp, #32
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8010484:	2300      	movs	r3, #0
 8010486:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 801048c:	2300      	movs	r3, #0
 801048e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8010490:	6878      	ldr	r0, [r7, #4]
 8010492:	f7ff fd7a 	bl	800ff8a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010496:	2110      	movs	r1, #16
 8010498:	6878      	ldr	r0, [r7, #4]
 801049a:	f7ff fd87 	bl	800ffac <USB_FlushTxFifo>
 801049e:	4603      	mov	r3, r0
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d001      	beq.n	80104a8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80104a4:	2301      	movs	r3, #1
 80104a6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80104a8:	6878      	ldr	r0, [r7, #4]
 80104aa:	f7ff fdb1 	bl	8010010 <USB_FlushRxFifo>
 80104ae:	4603      	mov	r3, r0
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d001      	beq.n	80104b8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80104b4:	2301      	movs	r3, #1
 80104b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80104b8:	2300      	movs	r3, #0
 80104ba:	61bb      	str	r3, [r7, #24]
 80104bc:	e01f      	b.n	80104fe <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80104be:	69bb      	ldr	r3, [r7, #24]
 80104c0:	015a      	lsls	r2, r3, #5
 80104c2:	697b      	ldr	r3, [r7, #20]
 80104c4:	4413      	add	r3, r2
 80104c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80104ce:	693b      	ldr	r3, [r7, #16]
 80104d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80104d4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80104d6:	693b      	ldr	r3, [r7, #16]
 80104d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80104dc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80104de:	693b      	ldr	r3, [r7, #16]
 80104e0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80104e4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80104e6:	69bb      	ldr	r3, [r7, #24]
 80104e8:	015a      	lsls	r2, r3, #5
 80104ea:	697b      	ldr	r3, [r7, #20]
 80104ec:	4413      	add	r3, r2
 80104ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80104f2:	461a      	mov	r2, r3
 80104f4:	693b      	ldr	r3, [r7, #16]
 80104f6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80104f8:	69bb      	ldr	r3, [r7, #24]
 80104fa:	3301      	adds	r3, #1
 80104fc:	61bb      	str	r3, [r7, #24]
 80104fe:	69bb      	ldr	r3, [r7, #24]
 8010500:	2b0f      	cmp	r3, #15
 8010502:	d9dc      	bls.n	80104be <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8010504:	2300      	movs	r3, #0
 8010506:	61bb      	str	r3, [r7, #24]
 8010508:	e034      	b.n	8010574 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 801050a:	69bb      	ldr	r3, [r7, #24]
 801050c:	015a      	lsls	r2, r3, #5
 801050e:	697b      	ldr	r3, [r7, #20]
 8010510:	4413      	add	r3, r2
 8010512:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 801051a:	693b      	ldr	r3, [r7, #16]
 801051c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010520:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8010522:	693b      	ldr	r3, [r7, #16]
 8010524:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010528:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 801052a:	693b      	ldr	r3, [r7, #16]
 801052c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8010530:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8010532:	69bb      	ldr	r3, [r7, #24]
 8010534:	015a      	lsls	r2, r3, #5
 8010536:	697b      	ldr	r3, [r7, #20]
 8010538:	4413      	add	r3, r2
 801053a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801053e:	461a      	mov	r2, r3
 8010540:	693b      	ldr	r3, [r7, #16]
 8010542:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	3301      	adds	r3, #1
 8010548:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010550:	d80c      	bhi.n	801056c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8010552:	69bb      	ldr	r3, [r7, #24]
 8010554:	015a      	lsls	r2, r3, #5
 8010556:	697b      	ldr	r3, [r7, #20]
 8010558:	4413      	add	r3, r2
 801055a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010564:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010568:	d0ec      	beq.n	8010544 <USB_StopHost+0xc8>
 801056a:	e000      	b.n	801056e <USB_StopHost+0xf2>
        break;
 801056c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 801056e:	69bb      	ldr	r3, [r7, #24]
 8010570:	3301      	adds	r3, #1
 8010572:	61bb      	str	r3, [r7, #24]
 8010574:	69bb      	ldr	r3, [r7, #24]
 8010576:	2b0f      	cmp	r3, #15
 8010578:	d9c7      	bls.n	801050a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 801057a:	697b      	ldr	r3, [r7, #20]
 801057c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010580:	461a      	mov	r2, r3
 8010582:	f04f 33ff 	mov.w	r3, #4294967295
 8010586:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	f04f 32ff 	mov.w	r2, #4294967295
 801058e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8010590:	6878      	ldr	r0, [r7, #4]
 8010592:	f7ff fce9 	bl	800ff68 <USB_EnableGlobalInt>

  return ret;
 8010596:	7ffb      	ldrb	r3, [r7, #31]
}
 8010598:	4618      	mov	r0, r3
 801059a:	3720      	adds	r7, #32
 801059c:	46bd      	mov	sp, r7
 801059e:	bd80      	pop	{r7, pc}

080105a0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80105a0:	b580      	push	{r7, lr}
 80105a2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80105a4:	4904      	ldr	r1, [pc, #16]	@ (80105b8 <MX_FATFS_Init+0x18>)
 80105a6:	4805      	ldr	r0, [pc, #20]	@ (80105bc <MX_FATFS_Init+0x1c>)
 80105a8:	f002 fcd4 	bl	8012f54 <FATFS_LinkDriver>
 80105ac:	4603      	mov	r3, r0
 80105ae:	461a      	mov	r2, r3
 80105b0:	4b03      	ldr	r3, [pc, #12]	@ (80105c0 <MX_FATFS_Init+0x20>)
 80105b2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80105b4:	bf00      	nop
 80105b6:	bd80      	pop	{r7, pc}
 80105b8:	20001580 	.word	0x20001580
 80105bc:	08019d2c 	.word	0x08019d2c
 80105c0:	2000157c 	.word	0x2000157c

080105c4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80105c4:	b480      	push	{r7}
 80105c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80105c8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80105ca:	4618      	mov	r0, r3
 80105cc:	46bd      	mov	sp, r7
 80105ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d2:	4770      	bx	lr

080105d4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b088      	sub	sp, #32
 80105d8:	af02      	add	r7, sp, #8
 80105da:	60f8      	str	r0, [r7, #12]
 80105dc:	60b9      	str	r1, [r7, #8]
 80105de:	607a      	str	r2, [r7, #4]
 80105e0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80105e2:	2300      	movs	r3, #0
 80105e4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	9300      	str	r3, [sp, #0]
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	68ba      	ldr	r2, [r7, #8]
 80105ee:	68f9      	ldr	r1, [r7, #12]
 80105f0:	4806      	ldr	r0, [pc, #24]	@ (801060c <BSP_SD_ReadBlocks+0x38>)
 80105f2:	f7fb f9e3 	bl	800b9bc <HAL_SD_ReadBlocks>
 80105f6:	4603      	mov	r3, r0
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d001      	beq.n	8010600 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80105fc:	2301      	movs	r3, #1
 80105fe:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010600:	7dfb      	ldrb	r3, [r7, #23]
}
 8010602:	4618      	mov	r0, r3
 8010604:	3718      	adds	r7, #24
 8010606:	46bd      	mov	sp, r7
 8010608:	bd80      	pop	{r7, pc}
 801060a:	bf00      	nop
 801060c:	20000c58 	.word	0x20000c58

08010610 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8010610:	b580      	push	{r7, lr}
 8010612:	b088      	sub	sp, #32
 8010614:	af02      	add	r7, sp, #8
 8010616:	60f8      	str	r0, [r7, #12]
 8010618:	60b9      	str	r1, [r7, #8]
 801061a:	607a      	str	r2, [r7, #4]
 801061c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 801061e:	2300      	movs	r3, #0
 8010620:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8010622:	683b      	ldr	r3, [r7, #0]
 8010624:	9300      	str	r3, [sp, #0]
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	68ba      	ldr	r2, [r7, #8]
 801062a:	68f9      	ldr	r1, [r7, #12]
 801062c:	4806      	ldr	r0, [pc, #24]	@ (8010648 <BSP_SD_WriteBlocks+0x38>)
 801062e:	f7fb fba3 	bl	800bd78 <HAL_SD_WriteBlocks>
 8010632:	4603      	mov	r3, r0
 8010634:	2b00      	cmp	r3, #0
 8010636:	d001      	beq.n	801063c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8010638:	2301      	movs	r3, #1
 801063a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801063c:	7dfb      	ldrb	r3, [r7, #23]
}
 801063e:	4618      	mov	r0, r3
 8010640:	3718      	adds	r7, #24
 8010642:	46bd      	mov	sp, r7
 8010644:	bd80      	pop	{r7, pc}
 8010646:	bf00      	nop
 8010648:	20000c58 	.word	0x20000c58

0801064c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 801064c:	b580      	push	{r7, lr}
 801064e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010650:	4805      	ldr	r0, [pc, #20]	@ (8010668 <BSP_SD_GetCardState+0x1c>)
 8010652:	f7fb fee7 	bl	800c424 <HAL_SD_GetCardState>
 8010656:	4603      	mov	r3, r0
 8010658:	2b04      	cmp	r3, #4
 801065a:	bf14      	ite	ne
 801065c:	2301      	movne	r3, #1
 801065e:	2300      	moveq	r3, #0
 8010660:	b2db      	uxtb	r3, r3
}
 8010662:	4618      	mov	r0, r3
 8010664:	bd80      	pop	{r7, pc}
 8010666:	bf00      	nop
 8010668:	20000c58 	.word	0x20000c58

0801066c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801066c:	b580      	push	{r7, lr}
 801066e:	b082      	sub	sp, #8
 8010670:	af00      	add	r7, sp, #0
 8010672:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8010674:	6879      	ldr	r1, [r7, #4]
 8010676:	4803      	ldr	r0, [pc, #12]	@ (8010684 <BSP_SD_GetCardInfo+0x18>)
 8010678:	f7fb fea8 	bl	800c3cc <HAL_SD_GetCardInfo>
}
 801067c:	bf00      	nop
 801067e:	3708      	adds	r7, #8
 8010680:	46bd      	mov	sp, r7
 8010682:	bd80      	pop	{r7, pc}
 8010684:	20000c58 	.word	0x20000c58

08010688 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b084      	sub	sp, #16
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8010690:	f002 fcac 	bl	8012fec <osKernelSysTick>
 8010694:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8010696:	e006      	b.n	80106a6 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010698:	f7ff ffd8 	bl	801064c <BSP_SD_GetCardState>
 801069c:	4603      	mov	r3, r0
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d101      	bne.n	80106a6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80106a2:	2300      	movs	r3, #0
 80106a4:	e009      	b.n	80106ba <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 80106a6:	f002 fca1 	bl	8012fec <osKernelSysTick>
 80106aa:	4602      	mov	r2, r0
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	1ad3      	subs	r3, r2, r3
 80106b0:	687a      	ldr	r2, [r7, #4]
 80106b2:	429a      	cmp	r2, r3
 80106b4:	d8f0      	bhi.n	8010698 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80106b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80106ba:	4618      	mov	r0, r3
 80106bc:	3710      	adds	r7, #16
 80106be:	46bd      	mov	sp, r7
 80106c0:	bd80      	pop	{r7, pc}
	...

080106c4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b084      	sub	sp, #16
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	4603      	mov	r3, r0
 80106cc:	71fb      	strb	r3, [r7, #7]
  // HAL 기반 카드 상태 확인 (BSP 우회)
  HAL_SD_CardStateTypeDef cardState = HAL_SD_GetCardState(&hsd1);
 80106ce:	4813      	ldr	r0, [pc, #76]	@ (801071c <SD_CheckStatus+0x58>)
 80106d0:	f7fb fea8 	bl	800c424 <HAL_SD_GetCardState>
 80106d4:	60f8      	str	r0, [r7, #12]
  
  LOG_INFO("[sd_diskio] HAL_SD_GetCardState: %d", cardState);
 80106d6:	68fa      	ldr	r2, [r7, #12]
 80106d8:	4911      	ldr	r1, [pc, #68]	@ (8010720 <SD_CheckStatus+0x5c>)
 80106da:	2001      	movs	r0, #1
 80106dc:	f7f4 fa06 	bl	8004aec <LOGGER_SendFormatted>
  
  if(cardState == HAL_SD_CARD_TRANSFER)
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	2b04      	cmp	r3, #4
 80106e4:	d107      	bne.n	80106f6 <SD_CheckStatus+0x32>
  {
    // 카드가 TRANSFER 상태이면 초기화 완료로 간주
    Stat = 0;  // 모든 에러 플래그 클리어
 80106e6:	4b0f      	ldr	r3, [pc, #60]	@ (8010724 <SD_CheckStatus+0x60>)
 80106e8:	2200      	movs	r2, #0
 80106ea:	701a      	strb	r2, [r3, #0]
    LOG_INFO("[sd_diskio] SD card status: READY (0x00)");
 80106ec:	490e      	ldr	r1, [pc, #56]	@ (8010728 <SD_CheckStatus+0x64>)
 80106ee:	2001      	movs	r0, #1
 80106f0:	f7f4 f9fc 	bl	8004aec <LOGGER_SendFormatted>
 80106f4:	e00a      	b.n	801070c <SD_CheckStatus+0x48>
  }
  else
  {
    // 카드가 준비되지 않은 상태
    Stat = STA_NOINIT;
 80106f6:	4b0b      	ldr	r3, [pc, #44]	@ (8010724 <SD_CheckStatus+0x60>)
 80106f8:	2201      	movs	r2, #1
 80106fa:	701a      	strb	r2, [r3, #0]
    LOG_WARN("[sd_diskio] SD card status: NOT_READY (0x%02X)", Stat);
 80106fc:	4b09      	ldr	r3, [pc, #36]	@ (8010724 <SD_CheckStatus+0x60>)
 80106fe:	781b      	ldrb	r3, [r3, #0]
 8010700:	b2db      	uxtb	r3, r3
 8010702:	461a      	mov	r2, r3
 8010704:	4909      	ldr	r1, [pc, #36]	@ (801072c <SD_CheckStatus+0x68>)
 8010706:	2002      	movs	r0, #2
 8010708:	f7f4 f9f0 	bl	8004aec <LOGGER_SendFormatted>
  }

  return Stat;
 801070c:	4b05      	ldr	r3, [pc, #20]	@ (8010724 <SD_CheckStatus+0x60>)
 801070e:	781b      	ldrb	r3, [r3, #0]
 8010710:	b2db      	uxtb	r3, r3
}
 8010712:	4618      	mov	r0, r3
 8010714:	3710      	adds	r7, #16
 8010716:	46bd      	mov	sp, r7
 8010718:	bd80      	pop	{r7, pc}
 801071a:	bf00      	nop
 801071c:	20000c58 	.word	0x20000c58
 8010720:	0801981c 	.word	0x0801981c
 8010724:	20000069 	.word	0x20000069
 8010728:	08019840 	.word	0x08019840
 801072c:	0801986c 	.word	0x0801986c

08010730 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010730:	b590      	push	{r4, r7, lr}
 8010732:	b089      	sub	sp, #36	@ 0x24
 8010734:	af00      	add	r7, sp, #0
 8010736:	4603      	mov	r3, r0
 8010738:	71fb      	strb	r3, [r7, #7]
  LOG_INFO("[sd_diskio] SD_initialize called");
 801073a:	493d      	ldr	r1, [pc, #244]	@ (8010830 <SD_initialize+0x100>)
 801073c:	2001      	movs	r0, #1
 801073e:	f7f4 f9d5 	bl	8004aec <LOGGER_SendFormatted>
  
  // 초기 상태 설정
  Stat = STA_NOINIT;
 8010742:	4b3c      	ldr	r3, [pc, #240]	@ (8010834 <SD_initialize+0x104>)
 8010744:	2201      	movs	r2, #1
 8010746:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  int kernel_running = osKernelRunning();
 8010748:	f002 fc44 	bl	8012fd4 <osKernelRunning>
 801074c:	61f8      	str	r0, [r7, #28]
  LOG_INFO("[sd_diskio] FreeRTOS kernel running check: %d", kernel_running);
 801074e:	69fa      	ldr	r2, [r7, #28]
 8010750:	4939      	ldr	r1, [pc, #228]	@ (8010838 <SD_initialize+0x108>)
 8010752:	2001      	movs	r0, #1
 8010754:	f7f4 f9ca 	bl	8004aec <LOGGER_SendFormatted>
  if(kernel_running)
 8010758:	69fb      	ldr	r3, [r7, #28]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d055      	beq.n	801080a <SD_initialize+0xda>
  osKernelState_t kernel_state = osKernelGetState();
  LOG_INFO("[sd_diskio] FreeRTOS kernel state: %d (osKernelRunning=%d)", kernel_state, osKernelRunning);
  if(kernel_state == osKernelRunning)
#endif
  {
    LOG_INFO("[sd_diskio] FreeRTOS kernel is running - proceeding with SD check");
 801075e:	4937      	ldr	r1, [pc, #220]	@ (801083c <SD_initialize+0x10c>)
 8010760:	2001      	movs	r0, #1
 8010762:	f7f4 f9c3 	bl	8004aec <LOGGER_SendFormatted>
    if(BSP_SD_Init() == MSD_OK)
    {
      Stat = SD_CheckStatus(lun);
    }
#else
    LOG_INFO("[sd_diskio] DISABLE_SD_INIT is active - using HAL-based check");
 8010766:	4936      	ldr	r1, [pc, #216]	@ (8010840 <SD_initialize+0x110>)
 8010768:	2001      	movs	r0, #1
 801076a:	f7f4 f9bf 	bl	8004aec <LOGGER_SendFormatted>
    Stat = SD_CheckStatus(lun);
 801076e:	79fb      	ldrb	r3, [r7, #7]
 8010770:	4618      	mov	r0, r3
 8010772:	f7ff ffa7 	bl	80106c4 <SD_CheckStatus>
 8010776:	4603      	mov	r3, r0
 8010778:	461a      	mov	r2, r3
 801077a:	4b2e      	ldr	r3, [pc, #184]	@ (8010834 <SD_initialize+0x104>)
 801077c:	701a      	strb	r2, [r3, #0]

    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */
    LOG_INFO("[sd_diskio] Final Stat after SD_CheckStatus: 0x%02X", Stat);
 801077e:	4b2d      	ldr	r3, [pc, #180]	@ (8010834 <SD_initialize+0x104>)
 8010780:	781b      	ldrb	r3, [r3, #0]
 8010782:	b2db      	uxtb	r3, r3
 8010784:	461a      	mov	r2, r3
 8010786:	492f      	ldr	r1, [pc, #188]	@ (8010844 <SD_initialize+0x114>)
 8010788:	2001      	movs	r0, #1
 801078a:	f7f4 f9af 	bl	8004aec <LOGGER_SendFormatted>

    if (Stat != STA_NOINIT)
 801078e:	4b29      	ldr	r3, [pc, #164]	@ (8010834 <SD_initialize+0x104>)
 8010790:	781b      	ldrb	r3, [r3, #0]
 8010792:	b2db      	uxtb	r3, r3
 8010794:	2b01      	cmp	r3, #1
 8010796:	d033      	beq.n	8010800 <SD_initialize+0xd0>
    {
      LOG_INFO("[sd_diskio] SD card ready - creating message queue...");
 8010798:	492b      	ldr	r1, [pc, #172]	@ (8010848 <SD_initialize+0x118>)
 801079a:	2001      	movs	r0, #1
 801079c:	f7f4 f9a6 	bl	8004aec <LOGGER_SendFormatted>
      if (SDQueueID == NULL)
 80107a0:	4b2a      	ldr	r3, [pc, #168]	@ (801084c <SD_initialize+0x11c>)
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d115      	bne.n	80107d4 <SD_initialize+0xa4>
      {
 #if (osCMSIS <= 0x20000U)
        osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 80107a8:	4b29      	ldr	r3, [pc, #164]	@ (8010850 <SD_initialize+0x120>)
 80107aa:	f107 040c 	add.w	r4, r7, #12
 80107ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80107b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 80107b4:	f107 030c 	add.w	r3, r7, #12
 80107b8:	2100      	movs	r1, #0
 80107ba:	4618      	mov	r0, r3
 80107bc:	f002 fc86 	bl	80130cc <osMessageCreate>
 80107c0:	4603      	mov	r3, r0
 80107c2:	4a22      	ldr	r2, [pc, #136]	@ (801084c <SD_initialize+0x11c>)
 80107c4:	6013      	str	r3, [r2, #0]
#else
        SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
        LOG_INFO("[sd_diskio] Message queue created: %p", SDQueueID);
 80107c6:	4b21      	ldr	r3, [pc, #132]	@ (801084c <SD_initialize+0x11c>)
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	461a      	mov	r2, r3
 80107cc:	4921      	ldr	r1, [pc, #132]	@ (8010854 <SD_initialize+0x124>)
 80107ce:	2001      	movs	r0, #1
 80107d0:	f7f4 f98c 	bl	8004aec <LOGGER_SendFormatted>
      }

      if (SDQueueID == NULL)
 80107d4:	4b1d      	ldr	r3, [pc, #116]	@ (801084c <SD_initialize+0x11c>)
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d10c      	bne.n	80107f6 <SD_initialize+0xc6>
      {
        LOG_ERROR("[sd_diskio] Failed to create message queue");
 80107dc:	491e      	ldr	r1, [pc, #120]	@ (8010858 <SD_initialize+0x128>)
 80107de:	2003      	movs	r0, #3
 80107e0:	f7f4 f984 	bl	8004aec <LOGGER_SendFormatted>
        Stat |= STA_NOINIT;
 80107e4:	4b13      	ldr	r3, [pc, #76]	@ (8010834 <SD_initialize+0x104>)
 80107e6:	781b      	ldrb	r3, [r3, #0]
 80107e8:	b2db      	uxtb	r3, r3
 80107ea:	f043 0301 	orr.w	r3, r3, #1
 80107ee:	b2da      	uxtb	r2, r3
 80107f0:	4b10      	ldr	r3, [pc, #64]	@ (8010834 <SD_initialize+0x104>)
 80107f2:	701a      	strb	r2, [r3, #0]
 80107f4:	e00d      	b.n	8010812 <SD_initialize+0xe2>
      }
      else
      {
        LOG_INFO("[sd_diskio] SD initialization completed successfully");
 80107f6:	4919      	ldr	r1, [pc, #100]	@ (801085c <SD_initialize+0x12c>)
 80107f8:	2001      	movs	r0, #1
 80107fa:	f7f4 f977 	bl	8004aec <LOGGER_SendFormatted>
 80107fe:	e008      	b.n	8010812 <SD_initialize+0xe2>
      }
    }
    else
    {
      LOG_WARN("[sd_diskio] SD card not ready - initialization failed");
 8010800:	4917      	ldr	r1, [pc, #92]	@ (8010860 <SD_initialize+0x130>)
 8010802:	2002      	movs	r0, #2
 8010804:	f7f4 f972 	bl	8004aec <LOGGER_SendFormatted>
 8010808:	e003      	b.n	8010812 <SD_initialize+0xe2>
    }
  }
  else
  {
    LOG_ERROR("[sd_diskio] FreeRTOS kernel not running - cannot initialize SD");
 801080a:	4916      	ldr	r1, [pc, #88]	@ (8010864 <SD_initialize+0x134>)
 801080c:	2003      	movs	r0, #3
 801080e:	f7f4 f96d 	bl	8004aec <LOGGER_SendFormatted>
  }

  LOG_INFO("[sd_diskio] SD_initialize returning: 0x%02X", Stat);
 8010812:	4b08      	ldr	r3, [pc, #32]	@ (8010834 <SD_initialize+0x104>)
 8010814:	781b      	ldrb	r3, [r3, #0]
 8010816:	b2db      	uxtb	r3, r3
 8010818:	461a      	mov	r2, r3
 801081a:	4913      	ldr	r1, [pc, #76]	@ (8010868 <SD_initialize+0x138>)
 801081c:	2001      	movs	r0, #1
 801081e:	f7f4 f965 	bl	8004aec <LOGGER_SendFormatted>
  return Stat;
 8010822:	4b04      	ldr	r3, [pc, #16]	@ (8010834 <SD_initialize+0x104>)
 8010824:	781b      	ldrb	r3, [r3, #0]
 8010826:	b2db      	uxtb	r3, r3

}
 8010828:	4618      	mov	r0, r3
 801082a:	3724      	adds	r7, #36	@ 0x24
 801082c:	46bd      	mov	sp, r7
 801082e:	bd90      	pop	{r4, r7, pc}
 8010830:	0801989c 	.word	0x0801989c
 8010834:	20000069 	.word	0x20000069
 8010838:	080198c0 	.word	0x080198c0
 801083c:	080198f0 	.word	0x080198f0
 8010840:	08019934 	.word	0x08019934
 8010844:	08019974 	.word	0x08019974
 8010848:	080199a8 	.word	0x080199a8
 801084c:	200017b4 	.word	0x200017b4
 8010850:	08019b10 	.word	0x08019b10
 8010854:	080199e0 	.word	0x080199e0
 8010858:	08019a08 	.word	0x08019a08
 801085c:	08019a34 	.word	0x08019a34
 8010860:	08019a6c 	.word	0x08019a6c
 8010864:	08019aa4 	.word	0x08019aa4
 8010868:	08019ae4 	.word	0x08019ae4

0801086c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801086c:	b580      	push	{r7, lr}
 801086e:	b082      	sub	sp, #8
 8010870:	af00      	add	r7, sp, #0
 8010872:	4603      	mov	r3, r0
 8010874:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010876:	79fb      	ldrb	r3, [r7, #7]
 8010878:	4618      	mov	r0, r3
 801087a:	f7ff ff23 	bl	80106c4 <SD_CheckStatus>
 801087e:	4603      	mov	r3, r0
}
 8010880:	4618      	mov	r0, r3
 8010882:	3708      	adds	r7, #8
 8010884:	46bd      	mov	sp, r7
 8010886:	bd80      	pop	{r7, pc}

08010888 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010888:	b580      	push	{r7, lr}
 801088a:	b088      	sub	sp, #32
 801088c:	af00      	add	r7, sp, #0
 801088e:	60b9      	str	r1, [r7, #8]
 8010890:	607a      	str	r2, [r7, #4]
 8010892:	603b      	str	r3, [r7, #0]
 8010894:	4603      	mov	r3, r0
 8010896:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8010898:	2301      	movs	r3, #1
 801089a:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801089c:	f247 5030 	movw	r0, #30000	@ 0x7530
 80108a0:	f7ff fef2 	bl	8010688 <SD_CheckStatusWithTimeout>
 80108a4:	4603      	mov	r3, r0
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	da01      	bge.n	80108ae <SD_read+0x26>
  {
    return res;
 80108aa:	7ffb      	ldrb	r3, [r7, #31]
 80108ac:	e020      	b.n	80108f0 <SD_read+0x68>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned - using polling mode */
    LOG_INFO("[sd_diskio] Using BSP_SD_ReadBlocks (polling) instead of DMA");
 80108ae:	4912      	ldr	r1, [pc, #72]	@ (80108f8 <SD_read+0x70>)
 80108b0:	2001      	movs	r0, #1
 80108b2:	f7f4 f91b 	bl	8004aec <LOGGER_SendFormatted>
    ret = BSP_SD_ReadBlocks((uint32_t*)buff, (uint32_t)(sector), count, SD_TIMEOUT);
 80108b6:	f247 5330 	movw	r3, #30000	@ 0x7530
 80108ba:	683a      	ldr	r2, [r7, #0]
 80108bc:	6879      	ldr	r1, [r7, #4]
 80108be:	68b8      	ldr	r0, [r7, #8]
 80108c0:	f7ff fe88 	bl	80105d4 <BSP_SD_ReadBlocks>
 80108c4:	4603      	mov	r3, r0
 80108c6:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 80108c8:	7fbb      	ldrb	r3, [r7, #30]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d10f      	bne.n	80108ee <SD_read+0x66>
        LOG_INFO("[sd_diskio] BSP_SD_ReadBlocks result: %d", ret);
 80108ce:	7fbb      	ldrb	r3, [r7, #30]
 80108d0:	461a      	mov	r2, r3
 80108d2:	490a      	ldr	r1, [pc, #40]	@ (80108fc <SD_read+0x74>)
 80108d4:	2001      	movs	r0, #1
 80108d6:	f7f4 f909 	bl	8004aec <LOGGER_SendFormatted>
        LOG_INFO("[sd_diskio] Polling read completed - no queue wait needed");
 80108da:	4909      	ldr	r1, [pc, #36]	@ (8010900 <SD_read+0x78>)
 80108dc:	2001      	movs	r0, #1
 80108de:	f7f4 f905 	bl	8004aec <LOGGER_SendFormatted>
        res = RES_OK;
 80108e2:	2300      	movs	r3, #0
 80108e4:	77fb      	strb	r3, [r7, #31]
        adjust the address and the D-Cache size to invalidate accordingly.
        */
        alignedAddr = (uint32_t)buff & ~0x1F;
        SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
        LOG_INFO("[sd_diskio] Read operation successful");
 80108e6:	4907      	ldr	r1, [pc, #28]	@ (8010904 <SD_read+0x7c>)
 80108e8:	2001      	movs	r0, #1
 80108ea:	f7f4 f8ff 	bl	8004aec <LOGGER_SendFormatted>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80108ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80108f0:	4618      	mov	r0, r3
 80108f2:	3720      	adds	r7, #32
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd80      	pop	{r7, pc}
 80108f8:	08019b20 	.word	0x08019b20
 80108fc:	08019b60 	.word	0x08019b60
 8010900:	08019b8c 	.word	0x08019b8c
 8010904:	08019bc8 	.word	0x08019bc8

08010908 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b086      	sub	sp, #24
 801090c:	af00      	add	r7, sp, #0
 801090e:	60b9      	str	r1, [r7, #8]
 8010910:	607a      	str	r2, [r7, #4]
 8010912:	603b      	str	r3, [r7, #0]
 8010914:	4603      	mov	r3, r0
 8010916:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010918:	2301      	movs	r3, #1
 801091a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801091c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8010920:	f7ff feb2 	bl	8010688 <SD_CheckStatusWithTimeout>
 8010924:	4603      	mov	r3, r0
 8010926:	2b00      	cmp	r3, #0
 8010928:	da01      	bge.n	801092e <SD_write+0x26>
  {
    return res;
 801092a:	7dfb      	ldrb	r3, [r7, #23]
 801092c:	e01f      	b.n	801096e <SD_write+0x66>
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  // BSP 폴링 모드 사용 (DMA 큐 대기 제거)
  LOG_INFO("[sd_diskio] Using BSP_SD_WriteBlocks (polling) instead of DMA");
 801092e:	4912      	ldr	r1, [pc, #72]	@ (8010978 <SD_write+0x70>)
 8010930:	2001      	movs	r0, #1
 8010932:	f7f4 f8db 	bl	8004aec <LOGGER_SendFormatted>
  ret = BSP_SD_WriteBlocks((uint32_t*)buff, (uint32_t)sector, count, SD_TIMEOUT);
 8010936:	f247 5330 	movw	r3, #30000	@ 0x7530
 801093a:	683a      	ldr	r2, [r7, #0]
 801093c:	6879      	ldr	r1, [r7, #4]
 801093e:	68b8      	ldr	r0, [r7, #8]
 8010940:	f7ff fe66 	bl	8010610 <BSP_SD_WriteBlocks>
 8010944:	4603      	mov	r3, r0
 8010946:	613b      	str	r3, [r7, #16]
  LOG_INFO("[sd_diskio] BSP_SD_WriteBlocks result: %d", ret);
 8010948:	693a      	ldr	r2, [r7, #16]
 801094a:	490c      	ldr	r1, [pc, #48]	@ (801097c <SD_write+0x74>)
 801094c:	2001      	movs	r0, #1
 801094e:	f7f4 f8cd 	bl	8004aec <LOGGER_SendFormatted>
  
  if(ret == MSD_OK)
 8010952:	693b      	ldr	r3, [r7, #16]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d109      	bne.n	801096c <SD_write+0x64>
  {
    // 폴링 방식이므로 큐 대기 불필요 - 즉시 성공 처리
    LOG_INFO("[sd_diskio] Polling write completed - no queue wait needed");
 8010958:	4909      	ldr	r1, [pc, #36]	@ (8010980 <SD_write+0x78>)
 801095a:	2001      	movs	r0, #1
 801095c:	f7f4 f8c6 	bl	8004aec <LOGGER_SendFormatted>
    res = RES_OK;
 8010960:	2300      	movs	r3, #0
 8010962:	75fb      	strb	r3, [r7, #23]
    LOG_INFO("[sd_diskio] Write operation successful");
 8010964:	4907      	ldr	r1, [pc, #28]	@ (8010984 <SD_write+0x7c>)
 8010966:	2001      	movs	r0, #1
 8010968:	f7f4 f8c0 	bl	8004aec <LOGGER_SendFormatted>
    }

  }
#endif

  return res;
 801096c:	7dfb      	ldrb	r3, [r7, #23]
}
 801096e:	4618      	mov	r0, r3
 8010970:	3718      	adds	r7, #24
 8010972:	46bd      	mov	sp, r7
 8010974:	bd80      	pop	{r7, pc}
 8010976:	bf00      	nop
 8010978:	08019bf0 	.word	0x08019bf0
 801097c:	08019c30 	.word	0x08019c30
 8010980:	08019c5c 	.word	0x08019c5c
 8010984:	08019c98 	.word	0x08019c98

08010988 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010988:	b580      	push	{r7, lr}
 801098a:	b08c      	sub	sp, #48	@ 0x30
 801098c:	af00      	add	r7, sp, #0
 801098e:	4603      	mov	r3, r0
 8010990:	603a      	str	r2, [r7, #0]
 8010992:	71fb      	strb	r3, [r7, #7]
 8010994:	460b      	mov	r3, r1
 8010996:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010998:	2301      	movs	r3, #1
 801099a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801099e:	4b25      	ldr	r3, [pc, #148]	@ (8010a34 <SD_ioctl+0xac>)
 80109a0:	781b      	ldrb	r3, [r3, #0]
 80109a2:	b2db      	uxtb	r3, r3
 80109a4:	f003 0301 	and.w	r3, r3, #1
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d001      	beq.n	80109b0 <SD_ioctl+0x28>
 80109ac:	2303      	movs	r3, #3
 80109ae:	e03c      	b.n	8010a2a <SD_ioctl+0xa2>

  switch (cmd)
 80109b0:	79bb      	ldrb	r3, [r7, #6]
 80109b2:	2b03      	cmp	r3, #3
 80109b4:	d834      	bhi.n	8010a20 <SD_ioctl+0x98>
 80109b6:	a201      	add	r2, pc, #4	@ (adr r2, 80109bc <SD_ioctl+0x34>)
 80109b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109bc:	080109cd 	.word	0x080109cd
 80109c0:	080109d5 	.word	0x080109d5
 80109c4:	080109ed 	.word	0x080109ed
 80109c8:	08010a07 	.word	0x08010a07
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80109cc:	2300      	movs	r3, #0
 80109ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80109d2:	e028      	b.n	8010a26 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80109d4:	f107 030c 	add.w	r3, r7, #12
 80109d8:	4618      	mov	r0, r3
 80109da:	f7ff fe47 	bl	801066c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80109de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80109e0:	683b      	ldr	r3, [r7, #0]
 80109e2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80109e4:	2300      	movs	r3, #0
 80109e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80109ea:	e01c      	b.n	8010a26 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80109ec:	f107 030c 	add.w	r3, r7, #12
 80109f0:	4618      	mov	r0, r3
 80109f2:	f7ff fe3b 	bl	801066c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80109f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109f8:	b29a      	uxth	r2, r3
 80109fa:	683b      	ldr	r3, [r7, #0]
 80109fc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80109fe:	2300      	movs	r3, #0
 8010a00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010a04:	e00f      	b.n	8010a26 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010a06:	f107 030c 	add.w	r3, r7, #12
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	f7ff fe2e 	bl	801066c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a12:	0a5a      	lsrs	r2, r3, #9
 8010a14:	683b      	ldr	r3, [r7, #0]
 8010a16:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010a18:	2300      	movs	r3, #0
 8010a1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010a1e:	e002      	b.n	8010a26 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010a20:	2304      	movs	r3, #4
 8010a22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8010a26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	3730      	adds	r7, #48	@ 0x30
 8010a2e:	46bd      	mov	sp, r7
 8010a30:	bd80      	pop	{r7, pc}
 8010a32:	bf00      	nop
 8010a34:	20000069 	.word	0x20000069

08010a38 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b082      	sub	sp, #8
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8010a46:	1c5a      	adds	r2, r3, #1
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8010a4e:	6878      	ldr	r0, [r7, #4]
 8010a50:	f000 f804 	bl	8010a5c <USBH_HandleSof>
}
 8010a54:	bf00      	nop
 8010a56:	3708      	adds	r7, #8
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	bd80      	pop	{r7, pc}

08010a5c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b082      	sub	sp, #8
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	781b      	ldrb	r3, [r3, #0]
 8010a68:	b2db      	uxtb	r3, r3
 8010a6a:	2b0b      	cmp	r3, #11
 8010a6c:	d10a      	bne.n	8010a84 <USBH_HandleSof+0x28>
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d005      	beq.n	8010a84 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010a7e:	699b      	ldr	r3, [r3, #24]
 8010a80:	6878      	ldr	r0, [r7, #4]
 8010a82:	4798      	blx	r3
  }
}
 8010a84:	bf00      	nop
 8010a86:	3708      	adds	r7, #8
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	bd80      	pop	{r7, pc}

08010a8c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b082      	sub	sp, #8
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	2201      	movs	r2, #1
 8010a98:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	2101      	movs	r1, #1
 8010aa2:	6878      	ldr	r0, [r7, #4]
 8010aa4:	f000 f85b 	bl	8010b5e <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 8010aa8:	bf00      	nop
}
 8010aaa:	3708      	adds	r7, #8
 8010aac:	46bd      	mov	sp, r7
 8010aae:	bd80      	pop	{r7, pc}

08010ab0 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8010ab0:	b480      	push	{r7}
 8010ab2:	b083      	sub	sp, #12
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	2200      	movs	r2, #0
 8010abc:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	2201      	movs	r2, #1
 8010ac4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8010ac8:	bf00      	nop
}
 8010aca:	370c      	adds	r7, #12
 8010acc:	46bd      	mov	sp, r7
 8010ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad2:	4770      	bx	lr

08010ad4 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b082      	sub	sp, #8
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2201      	movs	r2, #1
 8010ae0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	2200      	movs	r2, #0
 8010af0:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8010af4:	2300      	movs	r3, #0
 8010af6:	2200      	movs	r2, #0
 8010af8:	2101      	movs	r1, #1
 8010afa:	6878      	ldr	r0, [r7, #4]
 8010afc:	f000 f82f 	bl	8010b5e <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8010b00:	2300      	movs	r3, #0
}
 8010b02:	4618      	mov	r0, r3
 8010b04:	3708      	adds	r7, #8
 8010b06:	46bd      	mov	sp, r7
 8010b08:	bd80      	pop	{r7, pc}

08010b0a <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8010b0a:	b580      	push	{r7, lr}
 8010b0c:	b082      	sub	sp, #8
 8010b0e:	af00      	add	r7, sp, #0
 8010b10:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	2201      	movs	r2, #1
 8010b16:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	2200      	movs	r2, #0
 8010b26:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8010b2a:	6878      	ldr	r0, [r7, #4]
 8010b2c:	f004 fbfa 	bl	8015324 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	791b      	ldrb	r3, [r3, #4]
 8010b34:	4619      	mov	r1, r3
 8010b36:	6878      	ldr	r0, [r7, #4]
 8010b38:	f000 f847 	bl	8010bca <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	795b      	ldrb	r3, [r3, #5]
 8010b40:	4619      	mov	r1, r3
 8010b42:	6878      	ldr	r0, [r7, #4]
 8010b44:	f000 f841 	bl	8010bca <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8010b48:	2300      	movs	r3, #0
 8010b4a:	2200      	movs	r2, #0
 8010b4c:	2101      	movs	r1, #1
 8010b4e:	6878      	ldr	r0, [r7, #4]
 8010b50:	f000 f805 	bl	8010b5e <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8010b54:	2300      	movs	r3, #0
}
 8010b56:	4618      	mov	r0, r3
 8010b58:	3708      	adds	r7, #8
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	bd80      	pop	{r7, pc}

08010b5e <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 8010b5e:	b580      	push	{r7, lr}
 8010b60:	b086      	sub	sp, #24
 8010b62:	af00      	add	r7, sp, #0
 8010b64:	60f8      	str	r0, [r7, #12]
 8010b66:	607a      	str	r2, [r7, #4]
 8010b68:	603b      	str	r3, [r7, #0]
 8010b6a:	460b      	mov	r3, r1
 8010b6c:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 8010b6e:	7afa      	ldrb	r2, [r7, #11]
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  UNUSED(priority);

  /* Calculate the number of available spaces */
  uint32_t available_spaces = MSGQUEUE_OBJECTS - osMessageWaiting(phost->os_event);
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	f002 fb0d 	bl	801319c <osMessageWaiting>
 8010b82:	4603      	mov	r3, r0
 8010b84:	f1c3 0310 	rsb	r3, r3, #16
 8010b88:	617b      	str	r3, [r7, #20]

  if (available_spaces != 0U)
 8010b8a:	697b      	ldr	r3, [r7, #20]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d009      	beq.n	8010ba4 <USBH_OS_PutMessage+0x46>
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010b9c:	687a      	ldr	r2, [r7, #4]
 8010b9e:	4619      	mov	r1, r3
 8010ba0:	f002 fabc 	bl	801311c <osMessagePut>
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
  }
#endif /* (osCMSIS < 0x20000U) */
}
 8010ba4:	bf00      	nop
 8010ba6:	3718      	adds	r7, #24
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	bd80      	pop	{r7, pc}

08010bac <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b082      	sub	sp, #8
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	2101      	movs	r1, #1
 8010bba:	6878      	ldr	r0, [r7, #4]
 8010bbc:	f7ff ffcf 	bl	8010b5e <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8010bc0:	2300      	movs	r3, #0
}
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	3708      	adds	r7, #8
 8010bc6:	46bd      	mov	sp, r7
 8010bc8:	bd80      	pop	{r7, pc}

08010bca <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8010bca:	b480      	push	{r7}
 8010bcc:	b083      	sub	sp, #12
 8010bce:	af00      	add	r7, sp, #0
 8010bd0:	6078      	str	r0, [r7, #4]
 8010bd2:	460b      	mov	r3, r1
 8010bd4:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8010bd6:	78fb      	ldrb	r3, [r7, #3]
 8010bd8:	2b0f      	cmp	r3, #15
 8010bda:	d80d      	bhi.n	8010bf8 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8010bdc:	78fb      	ldrb	r3, [r7, #3]
 8010bde:	687a      	ldr	r2, [r7, #4]
 8010be0:	33e0      	adds	r3, #224	@ 0xe0
 8010be2:	009b      	lsls	r3, r3, #2
 8010be4:	4413      	add	r3, r2
 8010be6:	685a      	ldr	r2, [r3, #4]
 8010be8:	78fb      	ldrb	r3, [r7, #3]
 8010bea:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8010bee:	6879      	ldr	r1, [r7, #4]
 8010bf0:	33e0      	adds	r3, #224	@ 0xe0
 8010bf2:	009b      	lsls	r3, r3, #2
 8010bf4:	440b      	add	r3, r1
 8010bf6:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8010bf8:	2300      	movs	r3, #0
}
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	370c      	adds	r7, #12
 8010bfe:	46bd      	mov	sp, r7
 8010c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c04:	4770      	bx	lr
	...

08010c08 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b084      	sub	sp, #16
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	4603      	mov	r3, r0
 8010c10:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010c12:	79fb      	ldrb	r3, [r7, #7]
 8010c14:	4a08      	ldr	r2, [pc, #32]	@ (8010c38 <disk_status+0x30>)
 8010c16:	009b      	lsls	r3, r3, #2
 8010c18:	4413      	add	r3, r2
 8010c1a:	685b      	ldr	r3, [r3, #4]
 8010c1c:	685b      	ldr	r3, [r3, #4]
 8010c1e:	79fa      	ldrb	r2, [r7, #7]
 8010c20:	4905      	ldr	r1, [pc, #20]	@ (8010c38 <disk_status+0x30>)
 8010c22:	440a      	add	r2, r1
 8010c24:	7a12      	ldrb	r2, [r2, #8]
 8010c26:	4610      	mov	r0, r2
 8010c28:	4798      	blx	r3
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c30:	4618      	mov	r0, r3
 8010c32:	3710      	adds	r7, #16
 8010c34:	46bd      	mov	sp, r7
 8010c36:	bd80      	pop	{r7, pc}
 8010c38:	200017e0 	.word	0x200017e0

08010c3c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b084      	sub	sp, #16
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	4603      	mov	r3, r0
 8010c44:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010c46:	2300      	movs	r3, #0
 8010c48:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010c4a:	79fb      	ldrb	r3, [r7, #7]
 8010c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8010c84 <disk_initialize+0x48>)
 8010c4e:	5cd3      	ldrb	r3, [r2, r3]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d111      	bne.n	8010c78 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010c54:	79fb      	ldrb	r3, [r7, #7]
 8010c56:	4a0b      	ldr	r2, [pc, #44]	@ (8010c84 <disk_initialize+0x48>)
 8010c58:	2101      	movs	r1, #1
 8010c5a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010c5c:	79fb      	ldrb	r3, [r7, #7]
 8010c5e:	4a09      	ldr	r2, [pc, #36]	@ (8010c84 <disk_initialize+0x48>)
 8010c60:	009b      	lsls	r3, r3, #2
 8010c62:	4413      	add	r3, r2
 8010c64:	685b      	ldr	r3, [r3, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	79fa      	ldrb	r2, [r7, #7]
 8010c6a:	4906      	ldr	r1, [pc, #24]	@ (8010c84 <disk_initialize+0x48>)
 8010c6c:	440a      	add	r2, r1
 8010c6e:	7a12      	ldrb	r2, [r2, #8]
 8010c70:	4610      	mov	r0, r2
 8010c72:	4798      	blx	r3
 8010c74:	4603      	mov	r3, r0
 8010c76:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	3710      	adds	r7, #16
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	bd80      	pop	{r7, pc}
 8010c82:	bf00      	nop
 8010c84:	200017e0 	.word	0x200017e0

08010c88 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010c88:	b590      	push	{r4, r7, lr}
 8010c8a:	b087      	sub	sp, #28
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	60b9      	str	r1, [r7, #8]
 8010c90:	607a      	str	r2, [r7, #4]
 8010c92:	603b      	str	r3, [r7, #0]
 8010c94:	4603      	mov	r3, r0
 8010c96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010c98:	7bfb      	ldrb	r3, [r7, #15]
 8010c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8010cc4 <disk_read+0x3c>)
 8010c9c:	009b      	lsls	r3, r3, #2
 8010c9e:	4413      	add	r3, r2
 8010ca0:	685b      	ldr	r3, [r3, #4]
 8010ca2:	689c      	ldr	r4, [r3, #8]
 8010ca4:	7bfb      	ldrb	r3, [r7, #15]
 8010ca6:	4a07      	ldr	r2, [pc, #28]	@ (8010cc4 <disk_read+0x3c>)
 8010ca8:	4413      	add	r3, r2
 8010caa:	7a18      	ldrb	r0, [r3, #8]
 8010cac:	683b      	ldr	r3, [r7, #0]
 8010cae:	687a      	ldr	r2, [r7, #4]
 8010cb0:	68b9      	ldr	r1, [r7, #8]
 8010cb2:	47a0      	blx	r4
 8010cb4:	4603      	mov	r3, r0
 8010cb6:	75fb      	strb	r3, [r7, #23]
  return res;
 8010cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010cba:	4618      	mov	r0, r3
 8010cbc:	371c      	adds	r7, #28
 8010cbe:	46bd      	mov	sp, r7
 8010cc0:	bd90      	pop	{r4, r7, pc}
 8010cc2:	bf00      	nop
 8010cc4:	200017e0 	.word	0x200017e0

08010cc8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010cc8:	b590      	push	{r4, r7, lr}
 8010cca:	b087      	sub	sp, #28
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	60b9      	str	r1, [r7, #8]
 8010cd0:	607a      	str	r2, [r7, #4]
 8010cd2:	603b      	str	r3, [r7, #0]
 8010cd4:	4603      	mov	r3, r0
 8010cd6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010cd8:	7bfb      	ldrb	r3, [r7, #15]
 8010cda:	4a0a      	ldr	r2, [pc, #40]	@ (8010d04 <disk_write+0x3c>)
 8010cdc:	009b      	lsls	r3, r3, #2
 8010cde:	4413      	add	r3, r2
 8010ce0:	685b      	ldr	r3, [r3, #4]
 8010ce2:	68dc      	ldr	r4, [r3, #12]
 8010ce4:	7bfb      	ldrb	r3, [r7, #15]
 8010ce6:	4a07      	ldr	r2, [pc, #28]	@ (8010d04 <disk_write+0x3c>)
 8010ce8:	4413      	add	r3, r2
 8010cea:	7a18      	ldrb	r0, [r3, #8]
 8010cec:	683b      	ldr	r3, [r7, #0]
 8010cee:	687a      	ldr	r2, [r7, #4]
 8010cf0:	68b9      	ldr	r1, [r7, #8]
 8010cf2:	47a0      	blx	r4
 8010cf4:	4603      	mov	r3, r0
 8010cf6:	75fb      	strb	r3, [r7, #23]
  return res;
 8010cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	371c      	adds	r7, #28
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	bd90      	pop	{r4, r7, pc}
 8010d02:	bf00      	nop
 8010d04:	200017e0 	.word	0x200017e0

08010d08 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b084      	sub	sp, #16
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	4603      	mov	r3, r0
 8010d10:	603a      	str	r2, [r7, #0]
 8010d12:	71fb      	strb	r3, [r7, #7]
 8010d14:	460b      	mov	r3, r1
 8010d16:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010d18:	79fb      	ldrb	r3, [r7, #7]
 8010d1a:	4a09      	ldr	r2, [pc, #36]	@ (8010d40 <disk_ioctl+0x38>)
 8010d1c:	009b      	lsls	r3, r3, #2
 8010d1e:	4413      	add	r3, r2
 8010d20:	685b      	ldr	r3, [r3, #4]
 8010d22:	691b      	ldr	r3, [r3, #16]
 8010d24:	79fa      	ldrb	r2, [r7, #7]
 8010d26:	4906      	ldr	r1, [pc, #24]	@ (8010d40 <disk_ioctl+0x38>)
 8010d28:	440a      	add	r2, r1
 8010d2a:	7a10      	ldrb	r0, [r2, #8]
 8010d2c:	79b9      	ldrb	r1, [r7, #6]
 8010d2e:	683a      	ldr	r2, [r7, #0]
 8010d30:	4798      	blx	r3
 8010d32:	4603      	mov	r3, r0
 8010d34:	73fb      	strb	r3, [r7, #15]
  return res;
 8010d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d38:	4618      	mov	r0, r3
 8010d3a:	3710      	adds	r7, #16
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	bd80      	pop	{r7, pc}
 8010d40:	200017e0 	.word	0x200017e0

08010d44 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010d44:	b480      	push	{r7}
 8010d46:	b085      	sub	sp, #20
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	3301      	adds	r3, #1
 8010d50:	781b      	ldrb	r3, [r3, #0]
 8010d52:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010d54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010d58:	021b      	lsls	r3, r3, #8
 8010d5a:	b21a      	sxth	r2, r3
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	781b      	ldrb	r3, [r3, #0]
 8010d60:	b21b      	sxth	r3, r3
 8010d62:	4313      	orrs	r3, r2
 8010d64:	b21b      	sxth	r3, r3
 8010d66:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010d68:	89fb      	ldrh	r3, [r7, #14]
}
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	3714      	adds	r7, #20
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d74:	4770      	bx	lr

08010d76 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010d76:	b480      	push	{r7}
 8010d78:	b085      	sub	sp, #20
 8010d7a:	af00      	add	r7, sp, #0
 8010d7c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	3303      	adds	r3, #3
 8010d82:	781b      	ldrb	r3, [r3, #0]
 8010d84:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	021b      	lsls	r3, r3, #8
 8010d8a:	687a      	ldr	r2, [r7, #4]
 8010d8c:	3202      	adds	r2, #2
 8010d8e:	7812      	ldrb	r2, [r2, #0]
 8010d90:	4313      	orrs	r3, r2
 8010d92:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	021b      	lsls	r3, r3, #8
 8010d98:	687a      	ldr	r2, [r7, #4]
 8010d9a:	3201      	adds	r2, #1
 8010d9c:	7812      	ldrb	r2, [r2, #0]
 8010d9e:	4313      	orrs	r3, r2
 8010da0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	021b      	lsls	r3, r3, #8
 8010da6:	687a      	ldr	r2, [r7, #4]
 8010da8:	7812      	ldrb	r2, [r2, #0]
 8010daa:	4313      	orrs	r3, r2
 8010dac:	60fb      	str	r3, [r7, #12]
	return rv;
 8010dae:	68fb      	ldr	r3, [r7, #12]
}
 8010db0:	4618      	mov	r0, r3
 8010db2:	3714      	adds	r7, #20
 8010db4:	46bd      	mov	sp, r7
 8010db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dba:	4770      	bx	lr

08010dbc <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010dbc:	b480      	push	{r7}
 8010dbe:	b083      	sub	sp, #12
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
 8010dc4:	460b      	mov	r3, r1
 8010dc6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	1c5a      	adds	r2, r3, #1
 8010dcc:	607a      	str	r2, [r7, #4]
 8010dce:	887a      	ldrh	r2, [r7, #2]
 8010dd0:	b2d2      	uxtb	r2, r2
 8010dd2:	701a      	strb	r2, [r3, #0]
 8010dd4:	887b      	ldrh	r3, [r7, #2]
 8010dd6:	0a1b      	lsrs	r3, r3, #8
 8010dd8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	1c5a      	adds	r2, r3, #1
 8010dde:	607a      	str	r2, [r7, #4]
 8010de0:	887a      	ldrh	r2, [r7, #2]
 8010de2:	b2d2      	uxtb	r2, r2
 8010de4:	701a      	strb	r2, [r3, #0]
}
 8010de6:	bf00      	nop
 8010de8:	370c      	adds	r7, #12
 8010dea:	46bd      	mov	sp, r7
 8010dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df0:	4770      	bx	lr

08010df2 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010df2:	b480      	push	{r7}
 8010df4:	b083      	sub	sp, #12
 8010df6:	af00      	add	r7, sp, #0
 8010df8:	6078      	str	r0, [r7, #4]
 8010dfa:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	1c5a      	adds	r2, r3, #1
 8010e00:	607a      	str	r2, [r7, #4]
 8010e02:	683a      	ldr	r2, [r7, #0]
 8010e04:	b2d2      	uxtb	r2, r2
 8010e06:	701a      	strb	r2, [r3, #0]
 8010e08:	683b      	ldr	r3, [r7, #0]
 8010e0a:	0a1b      	lsrs	r3, r3, #8
 8010e0c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	1c5a      	adds	r2, r3, #1
 8010e12:	607a      	str	r2, [r7, #4]
 8010e14:	683a      	ldr	r2, [r7, #0]
 8010e16:	b2d2      	uxtb	r2, r2
 8010e18:	701a      	strb	r2, [r3, #0]
 8010e1a:	683b      	ldr	r3, [r7, #0]
 8010e1c:	0a1b      	lsrs	r3, r3, #8
 8010e1e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	1c5a      	adds	r2, r3, #1
 8010e24:	607a      	str	r2, [r7, #4]
 8010e26:	683a      	ldr	r2, [r7, #0]
 8010e28:	b2d2      	uxtb	r2, r2
 8010e2a:	701a      	strb	r2, [r3, #0]
 8010e2c:	683b      	ldr	r3, [r7, #0]
 8010e2e:	0a1b      	lsrs	r3, r3, #8
 8010e30:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	1c5a      	adds	r2, r3, #1
 8010e36:	607a      	str	r2, [r7, #4]
 8010e38:	683a      	ldr	r2, [r7, #0]
 8010e3a:	b2d2      	uxtb	r2, r2
 8010e3c:	701a      	strb	r2, [r3, #0]
}
 8010e3e:	bf00      	nop
 8010e40:	370c      	adds	r7, #12
 8010e42:	46bd      	mov	sp, r7
 8010e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e48:	4770      	bx	lr

08010e4a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010e4a:	b480      	push	{r7}
 8010e4c:	b087      	sub	sp, #28
 8010e4e:	af00      	add	r7, sp, #0
 8010e50:	60f8      	str	r0, [r7, #12]
 8010e52:	60b9      	str	r1, [r7, #8]
 8010e54:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010e5a:	68bb      	ldr	r3, [r7, #8]
 8010e5c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d00d      	beq.n	8010e80 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010e64:	693a      	ldr	r2, [r7, #16]
 8010e66:	1c53      	adds	r3, r2, #1
 8010e68:	613b      	str	r3, [r7, #16]
 8010e6a:	697b      	ldr	r3, [r7, #20]
 8010e6c:	1c59      	adds	r1, r3, #1
 8010e6e:	6179      	str	r1, [r7, #20]
 8010e70:	7812      	ldrb	r2, [r2, #0]
 8010e72:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	3b01      	subs	r3, #1
 8010e78:	607b      	str	r3, [r7, #4]
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d1f1      	bne.n	8010e64 <mem_cpy+0x1a>
	}
}
 8010e80:	bf00      	nop
 8010e82:	371c      	adds	r7, #28
 8010e84:	46bd      	mov	sp, r7
 8010e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8a:	4770      	bx	lr

08010e8c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010e8c:	b480      	push	{r7}
 8010e8e:	b087      	sub	sp, #28
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	60f8      	str	r0, [r7, #12]
 8010e94:	60b9      	str	r1, [r7, #8]
 8010e96:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010e9c:	697b      	ldr	r3, [r7, #20]
 8010e9e:	1c5a      	adds	r2, r3, #1
 8010ea0:	617a      	str	r2, [r7, #20]
 8010ea2:	68ba      	ldr	r2, [r7, #8]
 8010ea4:	b2d2      	uxtb	r2, r2
 8010ea6:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	3b01      	subs	r3, #1
 8010eac:	607b      	str	r3, [r7, #4]
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d1f3      	bne.n	8010e9c <mem_set+0x10>
}
 8010eb4:	bf00      	nop
 8010eb6:	bf00      	nop
 8010eb8:	371c      	adds	r7, #28
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec0:	4770      	bx	lr

08010ec2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010ec2:	b480      	push	{r7}
 8010ec4:	b089      	sub	sp, #36	@ 0x24
 8010ec6:	af00      	add	r7, sp, #0
 8010ec8:	60f8      	str	r0, [r7, #12]
 8010eca:	60b9      	str	r1, [r7, #8]
 8010ecc:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	61fb      	str	r3, [r7, #28]
 8010ed2:	68bb      	ldr	r3, [r7, #8]
 8010ed4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010eda:	69fb      	ldr	r3, [r7, #28]
 8010edc:	1c5a      	adds	r2, r3, #1
 8010ede:	61fa      	str	r2, [r7, #28]
 8010ee0:	781b      	ldrb	r3, [r3, #0]
 8010ee2:	4619      	mov	r1, r3
 8010ee4:	69bb      	ldr	r3, [r7, #24]
 8010ee6:	1c5a      	adds	r2, r3, #1
 8010ee8:	61ba      	str	r2, [r7, #24]
 8010eea:	781b      	ldrb	r3, [r3, #0]
 8010eec:	1acb      	subs	r3, r1, r3
 8010eee:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	3b01      	subs	r3, #1
 8010ef4:	607b      	str	r3, [r7, #4]
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d002      	beq.n	8010f02 <mem_cmp+0x40>
 8010efc:	697b      	ldr	r3, [r7, #20]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d0eb      	beq.n	8010eda <mem_cmp+0x18>

	return r;
 8010f02:	697b      	ldr	r3, [r7, #20]
}
 8010f04:	4618      	mov	r0, r3
 8010f06:	3724      	adds	r7, #36	@ 0x24
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0e:	4770      	bx	lr

08010f10 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010f10:	b480      	push	{r7}
 8010f12:	b083      	sub	sp, #12
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
 8010f18:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010f1a:	e002      	b.n	8010f22 <chk_chr+0x12>
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	3301      	adds	r3, #1
 8010f20:	607b      	str	r3, [r7, #4]
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	781b      	ldrb	r3, [r3, #0]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d005      	beq.n	8010f36 <chk_chr+0x26>
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	781b      	ldrb	r3, [r3, #0]
 8010f2e:	461a      	mov	r2, r3
 8010f30:	683b      	ldr	r3, [r7, #0]
 8010f32:	4293      	cmp	r3, r2
 8010f34:	d1f2      	bne.n	8010f1c <chk_chr+0xc>
	return *str;
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	781b      	ldrb	r3, [r3, #0]
}
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	370c      	adds	r7, #12
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f44:	4770      	bx	lr
	...

08010f48 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010f48:	b480      	push	{r7}
 8010f4a:	b085      	sub	sp, #20
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
 8010f50:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010f52:	2300      	movs	r3, #0
 8010f54:	60bb      	str	r3, [r7, #8]
 8010f56:	68bb      	ldr	r3, [r7, #8]
 8010f58:	60fb      	str	r3, [r7, #12]
 8010f5a:	e029      	b.n	8010fb0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010f5c:	4a27      	ldr	r2, [pc, #156]	@ (8010ffc <chk_lock+0xb4>)
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	011b      	lsls	r3, r3, #4
 8010f62:	4413      	add	r3, r2
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d01d      	beq.n	8010fa6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010f6a:	4a24      	ldr	r2, [pc, #144]	@ (8010ffc <chk_lock+0xb4>)
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	011b      	lsls	r3, r3, #4
 8010f70:	4413      	add	r3, r2
 8010f72:	681a      	ldr	r2, [r3, #0]
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	429a      	cmp	r2, r3
 8010f7a:	d116      	bne.n	8010faa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010f7c:	4a1f      	ldr	r2, [pc, #124]	@ (8010ffc <chk_lock+0xb4>)
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	011b      	lsls	r3, r3, #4
 8010f82:	4413      	add	r3, r2
 8010f84:	3304      	adds	r3, #4
 8010f86:	681a      	ldr	r2, [r3, #0]
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010f8c:	429a      	cmp	r2, r3
 8010f8e:	d10c      	bne.n	8010faa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010f90:	4a1a      	ldr	r2, [pc, #104]	@ (8010ffc <chk_lock+0xb4>)
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	011b      	lsls	r3, r3, #4
 8010f96:	4413      	add	r3, r2
 8010f98:	3308      	adds	r3, #8
 8010f9a:	681a      	ldr	r2, [r3, #0]
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8010fa0:	429a      	cmp	r2, r3
 8010fa2:	d102      	bne.n	8010faa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010fa4:	e007      	b.n	8010fb6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8010fa6:	2301      	movs	r3, #1
 8010fa8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	3301      	adds	r3, #1
 8010fae:	60fb      	str	r3, [r7, #12]
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	2b01      	cmp	r3, #1
 8010fb4:	d9d2      	bls.n	8010f5c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	2b02      	cmp	r3, #2
 8010fba:	d109      	bne.n	8010fd0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8010fbc:	68bb      	ldr	r3, [r7, #8]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d102      	bne.n	8010fc8 <chk_lock+0x80>
 8010fc2:	683b      	ldr	r3, [r7, #0]
 8010fc4:	2b02      	cmp	r3, #2
 8010fc6:	d101      	bne.n	8010fcc <chk_lock+0x84>
 8010fc8:	2300      	movs	r3, #0
 8010fca:	e010      	b.n	8010fee <chk_lock+0xa6>
 8010fcc:	2312      	movs	r3, #18
 8010fce:	e00e      	b.n	8010fee <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010fd0:	683b      	ldr	r3, [r7, #0]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d108      	bne.n	8010fe8 <chk_lock+0xa0>
 8010fd6:	4a09      	ldr	r2, [pc, #36]	@ (8010ffc <chk_lock+0xb4>)
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	011b      	lsls	r3, r3, #4
 8010fdc:	4413      	add	r3, r2
 8010fde:	330c      	adds	r3, #12
 8010fe0:	881b      	ldrh	r3, [r3, #0]
 8010fe2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010fe6:	d101      	bne.n	8010fec <chk_lock+0xa4>
 8010fe8:	2310      	movs	r3, #16
 8010fea:	e000      	b.n	8010fee <chk_lock+0xa6>
 8010fec:	2300      	movs	r3, #0
}
 8010fee:	4618      	mov	r0, r3
 8010ff0:	3714      	adds	r7, #20
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff8:	4770      	bx	lr
 8010ffa:	bf00      	nop
 8010ffc:	200017c0 	.word	0x200017c0

08011000 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011000:	b480      	push	{r7}
 8011002:	b083      	sub	sp, #12
 8011004:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011006:	2300      	movs	r3, #0
 8011008:	607b      	str	r3, [r7, #4]
 801100a:	e002      	b.n	8011012 <enq_lock+0x12>
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	3301      	adds	r3, #1
 8011010:	607b      	str	r3, [r7, #4]
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	2b01      	cmp	r3, #1
 8011016:	d806      	bhi.n	8011026 <enq_lock+0x26>
 8011018:	4a09      	ldr	r2, [pc, #36]	@ (8011040 <enq_lock+0x40>)
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	011b      	lsls	r3, r3, #4
 801101e:	4413      	add	r3, r2
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d1f2      	bne.n	801100c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	2b02      	cmp	r3, #2
 801102a:	bf14      	ite	ne
 801102c:	2301      	movne	r3, #1
 801102e:	2300      	moveq	r3, #0
 8011030:	b2db      	uxtb	r3, r3
}
 8011032:	4618      	mov	r0, r3
 8011034:	370c      	adds	r7, #12
 8011036:	46bd      	mov	sp, r7
 8011038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103c:	4770      	bx	lr
 801103e:	bf00      	nop
 8011040:	200017c0 	.word	0x200017c0

08011044 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011044:	b480      	push	{r7}
 8011046:	b085      	sub	sp, #20
 8011048:	af00      	add	r7, sp, #0
 801104a:	6078      	str	r0, [r7, #4]
 801104c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801104e:	2300      	movs	r3, #0
 8011050:	60fb      	str	r3, [r7, #12]
 8011052:	e01f      	b.n	8011094 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011054:	4a41      	ldr	r2, [pc, #260]	@ (801115c <inc_lock+0x118>)
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	011b      	lsls	r3, r3, #4
 801105a:	4413      	add	r3, r2
 801105c:	681a      	ldr	r2, [r3, #0]
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	429a      	cmp	r2, r3
 8011064:	d113      	bne.n	801108e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011066:	4a3d      	ldr	r2, [pc, #244]	@ (801115c <inc_lock+0x118>)
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	011b      	lsls	r3, r3, #4
 801106c:	4413      	add	r3, r2
 801106e:	3304      	adds	r3, #4
 8011070:	681a      	ldr	r2, [r3, #0]
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011076:	429a      	cmp	r2, r3
 8011078:	d109      	bne.n	801108e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801107a:	4a38      	ldr	r2, [pc, #224]	@ (801115c <inc_lock+0x118>)
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	011b      	lsls	r3, r3, #4
 8011080:	4413      	add	r3, r2
 8011082:	3308      	adds	r3, #8
 8011084:	681a      	ldr	r2, [r3, #0]
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801108a:	429a      	cmp	r2, r3
 801108c:	d006      	beq.n	801109c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	3301      	adds	r3, #1
 8011092:	60fb      	str	r3, [r7, #12]
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	2b01      	cmp	r3, #1
 8011098:	d9dc      	bls.n	8011054 <inc_lock+0x10>
 801109a:	e000      	b.n	801109e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801109c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	2b02      	cmp	r3, #2
 80110a2:	d132      	bne.n	801110a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80110a4:	2300      	movs	r3, #0
 80110a6:	60fb      	str	r3, [r7, #12]
 80110a8:	e002      	b.n	80110b0 <inc_lock+0x6c>
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	3301      	adds	r3, #1
 80110ae:	60fb      	str	r3, [r7, #12]
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	2b01      	cmp	r3, #1
 80110b4:	d806      	bhi.n	80110c4 <inc_lock+0x80>
 80110b6:	4a29      	ldr	r2, [pc, #164]	@ (801115c <inc_lock+0x118>)
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	011b      	lsls	r3, r3, #4
 80110bc:	4413      	add	r3, r2
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d1f2      	bne.n	80110aa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	2b02      	cmp	r3, #2
 80110c8:	d101      	bne.n	80110ce <inc_lock+0x8a>
 80110ca:	2300      	movs	r3, #0
 80110cc:	e040      	b.n	8011150 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	681a      	ldr	r2, [r3, #0]
 80110d2:	4922      	ldr	r1, [pc, #136]	@ (801115c <inc_lock+0x118>)
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	011b      	lsls	r3, r3, #4
 80110d8:	440b      	add	r3, r1
 80110da:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	689a      	ldr	r2, [r3, #8]
 80110e0:	491e      	ldr	r1, [pc, #120]	@ (801115c <inc_lock+0x118>)
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	011b      	lsls	r3, r3, #4
 80110e6:	440b      	add	r3, r1
 80110e8:	3304      	adds	r3, #4
 80110ea:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	695a      	ldr	r2, [r3, #20]
 80110f0:	491a      	ldr	r1, [pc, #104]	@ (801115c <inc_lock+0x118>)
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	011b      	lsls	r3, r3, #4
 80110f6:	440b      	add	r3, r1
 80110f8:	3308      	adds	r3, #8
 80110fa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80110fc:	4a17      	ldr	r2, [pc, #92]	@ (801115c <inc_lock+0x118>)
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	011b      	lsls	r3, r3, #4
 8011102:	4413      	add	r3, r2
 8011104:	330c      	adds	r3, #12
 8011106:	2200      	movs	r2, #0
 8011108:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801110a:	683b      	ldr	r3, [r7, #0]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d009      	beq.n	8011124 <inc_lock+0xe0>
 8011110:	4a12      	ldr	r2, [pc, #72]	@ (801115c <inc_lock+0x118>)
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	011b      	lsls	r3, r3, #4
 8011116:	4413      	add	r3, r2
 8011118:	330c      	adds	r3, #12
 801111a:	881b      	ldrh	r3, [r3, #0]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d001      	beq.n	8011124 <inc_lock+0xe0>
 8011120:	2300      	movs	r3, #0
 8011122:	e015      	b.n	8011150 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011124:	683b      	ldr	r3, [r7, #0]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d108      	bne.n	801113c <inc_lock+0xf8>
 801112a:	4a0c      	ldr	r2, [pc, #48]	@ (801115c <inc_lock+0x118>)
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	011b      	lsls	r3, r3, #4
 8011130:	4413      	add	r3, r2
 8011132:	330c      	adds	r3, #12
 8011134:	881b      	ldrh	r3, [r3, #0]
 8011136:	3301      	adds	r3, #1
 8011138:	b29a      	uxth	r2, r3
 801113a:	e001      	b.n	8011140 <inc_lock+0xfc>
 801113c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011140:	4906      	ldr	r1, [pc, #24]	@ (801115c <inc_lock+0x118>)
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	011b      	lsls	r3, r3, #4
 8011146:	440b      	add	r3, r1
 8011148:	330c      	adds	r3, #12
 801114a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	3301      	adds	r3, #1
}
 8011150:	4618      	mov	r0, r3
 8011152:	3714      	adds	r7, #20
 8011154:	46bd      	mov	sp, r7
 8011156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115a:	4770      	bx	lr
 801115c:	200017c0 	.word	0x200017c0

08011160 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011160:	b480      	push	{r7}
 8011162:	b085      	sub	sp, #20
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	3b01      	subs	r3, #1
 801116c:	607b      	str	r3, [r7, #4]
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	2b01      	cmp	r3, #1
 8011172:	d825      	bhi.n	80111c0 <dec_lock+0x60>
		n = Files[i].ctr;
 8011174:	4a17      	ldr	r2, [pc, #92]	@ (80111d4 <dec_lock+0x74>)
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	011b      	lsls	r3, r3, #4
 801117a:	4413      	add	r3, r2
 801117c:	330c      	adds	r3, #12
 801117e:	881b      	ldrh	r3, [r3, #0]
 8011180:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011182:	89fb      	ldrh	r3, [r7, #14]
 8011184:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011188:	d101      	bne.n	801118e <dec_lock+0x2e>
 801118a:	2300      	movs	r3, #0
 801118c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801118e:	89fb      	ldrh	r3, [r7, #14]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d002      	beq.n	801119a <dec_lock+0x3a>
 8011194:	89fb      	ldrh	r3, [r7, #14]
 8011196:	3b01      	subs	r3, #1
 8011198:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801119a:	4a0e      	ldr	r2, [pc, #56]	@ (80111d4 <dec_lock+0x74>)
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	011b      	lsls	r3, r3, #4
 80111a0:	4413      	add	r3, r2
 80111a2:	330c      	adds	r3, #12
 80111a4:	89fa      	ldrh	r2, [r7, #14]
 80111a6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80111a8:	89fb      	ldrh	r3, [r7, #14]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d105      	bne.n	80111ba <dec_lock+0x5a>
 80111ae:	4a09      	ldr	r2, [pc, #36]	@ (80111d4 <dec_lock+0x74>)
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	011b      	lsls	r3, r3, #4
 80111b4:	4413      	add	r3, r2
 80111b6:	2200      	movs	r2, #0
 80111b8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80111ba:	2300      	movs	r3, #0
 80111bc:	737b      	strb	r3, [r7, #13]
 80111be:	e001      	b.n	80111c4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80111c0:	2302      	movs	r3, #2
 80111c2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80111c4:	7b7b      	ldrb	r3, [r7, #13]
}
 80111c6:	4618      	mov	r0, r3
 80111c8:	3714      	adds	r7, #20
 80111ca:	46bd      	mov	sp, r7
 80111cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d0:	4770      	bx	lr
 80111d2:	bf00      	nop
 80111d4:	200017c0 	.word	0x200017c0

080111d8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80111d8:	b480      	push	{r7}
 80111da:	b085      	sub	sp, #20
 80111dc:	af00      	add	r7, sp, #0
 80111de:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80111e0:	2300      	movs	r3, #0
 80111e2:	60fb      	str	r3, [r7, #12]
 80111e4:	e010      	b.n	8011208 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80111e6:	4a0d      	ldr	r2, [pc, #52]	@ (801121c <clear_lock+0x44>)
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	011b      	lsls	r3, r3, #4
 80111ec:	4413      	add	r3, r2
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	687a      	ldr	r2, [r7, #4]
 80111f2:	429a      	cmp	r2, r3
 80111f4:	d105      	bne.n	8011202 <clear_lock+0x2a>
 80111f6:	4a09      	ldr	r2, [pc, #36]	@ (801121c <clear_lock+0x44>)
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	011b      	lsls	r3, r3, #4
 80111fc:	4413      	add	r3, r2
 80111fe:	2200      	movs	r2, #0
 8011200:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	3301      	adds	r3, #1
 8011206:	60fb      	str	r3, [r7, #12]
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	2b01      	cmp	r3, #1
 801120c:	d9eb      	bls.n	80111e6 <clear_lock+0xe>
	}
}
 801120e:	bf00      	nop
 8011210:	bf00      	nop
 8011212:	3714      	adds	r7, #20
 8011214:	46bd      	mov	sp, r7
 8011216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121a:	4770      	bx	lr
 801121c:	200017c0 	.word	0x200017c0

08011220 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b086      	sub	sp, #24
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011228:	2300      	movs	r3, #0
 801122a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	78db      	ldrb	r3, [r3, #3]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d034      	beq.n	801129e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011238:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	7858      	ldrb	r0, [r3, #1]
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011244:	2301      	movs	r3, #1
 8011246:	697a      	ldr	r2, [r7, #20]
 8011248:	f7ff fd3e 	bl	8010cc8 <disk_write>
 801124c:	4603      	mov	r3, r0
 801124e:	2b00      	cmp	r3, #0
 8011250:	d002      	beq.n	8011258 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011252:	2301      	movs	r3, #1
 8011254:	73fb      	strb	r3, [r7, #15]
 8011256:	e022      	b.n	801129e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	2200      	movs	r2, #0
 801125c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6a1b      	ldr	r3, [r3, #32]
 8011262:	697a      	ldr	r2, [r7, #20]
 8011264:	1ad2      	subs	r2, r2, r3
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	699b      	ldr	r3, [r3, #24]
 801126a:	429a      	cmp	r2, r3
 801126c:	d217      	bcs.n	801129e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	789b      	ldrb	r3, [r3, #2]
 8011272:	613b      	str	r3, [r7, #16]
 8011274:	e010      	b.n	8011298 <sync_window+0x78>
					wsect += fs->fsize;
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	699b      	ldr	r3, [r3, #24]
 801127a:	697a      	ldr	r2, [r7, #20]
 801127c:	4413      	add	r3, r2
 801127e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	7858      	ldrb	r0, [r3, #1]
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801128a:	2301      	movs	r3, #1
 801128c:	697a      	ldr	r2, [r7, #20]
 801128e:	f7ff fd1b 	bl	8010cc8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011292:	693b      	ldr	r3, [r7, #16]
 8011294:	3b01      	subs	r3, #1
 8011296:	613b      	str	r3, [r7, #16]
 8011298:	693b      	ldr	r3, [r7, #16]
 801129a:	2b01      	cmp	r3, #1
 801129c:	d8eb      	bhi.n	8011276 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801129e:	7bfb      	ldrb	r3, [r7, #15]
}
 80112a0:	4618      	mov	r0, r3
 80112a2:	3718      	adds	r7, #24
 80112a4:	46bd      	mov	sp, r7
 80112a6:	bd80      	pop	{r7, pc}

080112a8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b084      	sub	sp, #16
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
 80112b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80112b2:	2300      	movs	r3, #0
 80112b4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112ba:	683a      	ldr	r2, [r7, #0]
 80112bc:	429a      	cmp	r2, r3
 80112be:	d01b      	beq.n	80112f8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80112c0:	6878      	ldr	r0, [r7, #4]
 80112c2:	f7ff ffad 	bl	8011220 <sync_window>
 80112c6:	4603      	mov	r3, r0
 80112c8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80112ca:	7bfb      	ldrb	r3, [r7, #15]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d113      	bne.n	80112f8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	7858      	ldrb	r0, [r3, #1]
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80112da:	2301      	movs	r3, #1
 80112dc:	683a      	ldr	r2, [r7, #0]
 80112de:	f7ff fcd3 	bl	8010c88 <disk_read>
 80112e2:	4603      	mov	r3, r0
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d004      	beq.n	80112f2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80112e8:	f04f 33ff 	mov.w	r3, #4294967295
 80112ec:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80112ee:	2301      	movs	r3, #1
 80112f0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	683a      	ldr	r2, [r7, #0]
 80112f6:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80112f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80112fa:	4618      	mov	r0, r3
 80112fc:	3710      	adds	r7, #16
 80112fe:	46bd      	mov	sp, r7
 8011300:	bd80      	pop	{r7, pc}
	...

08011304 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b084      	sub	sp, #16
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801130c:	6878      	ldr	r0, [r7, #4]
 801130e:	f7ff ff87 	bl	8011220 <sync_window>
 8011312:	4603      	mov	r3, r0
 8011314:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011316:	7bfb      	ldrb	r3, [r7, #15]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d158      	bne.n	80113ce <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	781b      	ldrb	r3, [r3, #0]
 8011320:	2b03      	cmp	r3, #3
 8011322:	d148      	bne.n	80113b6 <sync_fs+0xb2>
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	791b      	ldrb	r3, [r3, #4]
 8011328:	2b01      	cmp	r3, #1
 801132a:	d144      	bne.n	80113b6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	3330      	adds	r3, #48	@ 0x30
 8011330:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011334:	2100      	movs	r1, #0
 8011336:	4618      	mov	r0, r3
 8011338:	f7ff fda8 	bl	8010e8c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	3330      	adds	r3, #48	@ 0x30
 8011340:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011344:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8011348:	4618      	mov	r0, r3
 801134a:	f7ff fd37 	bl	8010dbc <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	3330      	adds	r3, #48	@ 0x30
 8011352:	4921      	ldr	r1, [pc, #132]	@ (80113d8 <sync_fs+0xd4>)
 8011354:	4618      	mov	r0, r3
 8011356:	f7ff fd4c 	bl	8010df2 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	3330      	adds	r3, #48	@ 0x30
 801135e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8011362:	491e      	ldr	r1, [pc, #120]	@ (80113dc <sync_fs+0xd8>)
 8011364:	4618      	mov	r0, r3
 8011366:	f7ff fd44 	bl	8010df2 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	3330      	adds	r3, #48	@ 0x30
 801136e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	691b      	ldr	r3, [r3, #16]
 8011376:	4619      	mov	r1, r3
 8011378:	4610      	mov	r0, r2
 801137a:	f7ff fd3a 	bl	8010df2 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	3330      	adds	r3, #48	@ 0x30
 8011382:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	68db      	ldr	r3, [r3, #12]
 801138a:	4619      	mov	r1, r3
 801138c:	4610      	mov	r0, r2
 801138e:	f7ff fd30 	bl	8010df2 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	69db      	ldr	r3, [r3, #28]
 8011396:	1c5a      	adds	r2, r3, #1
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	7858      	ldrb	r0, [r3, #1]
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80113aa:	2301      	movs	r3, #1
 80113ac:	f7ff fc8c 	bl	8010cc8 <disk_write>
			fs->fsi_flag = 0;
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	2200      	movs	r2, #0
 80113b4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	785b      	ldrb	r3, [r3, #1]
 80113ba:	2200      	movs	r2, #0
 80113bc:	2100      	movs	r1, #0
 80113be:	4618      	mov	r0, r3
 80113c0:	f7ff fca2 	bl	8010d08 <disk_ioctl>
 80113c4:	4603      	mov	r3, r0
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d001      	beq.n	80113ce <sync_fs+0xca>
 80113ca:	2301      	movs	r3, #1
 80113cc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80113ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80113d0:	4618      	mov	r0, r3
 80113d2:	3710      	adds	r7, #16
 80113d4:	46bd      	mov	sp, r7
 80113d6:	bd80      	pop	{r7, pc}
 80113d8:	41615252 	.word	0x41615252
 80113dc:	61417272 	.word	0x61417272

080113e0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80113e0:	b480      	push	{r7}
 80113e2:	b083      	sub	sp, #12
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]
 80113e8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80113ea:	683b      	ldr	r3, [r7, #0]
 80113ec:	3b02      	subs	r3, #2
 80113ee:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	695b      	ldr	r3, [r3, #20]
 80113f4:	3b02      	subs	r3, #2
 80113f6:	683a      	ldr	r2, [r7, #0]
 80113f8:	429a      	cmp	r2, r3
 80113fa:	d301      	bcc.n	8011400 <clust2sect+0x20>
 80113fc:	2300      	movs	r3, #0
 80113fe:	e008      	b.n	8011412 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	895b      	ldrh	r3, [r3, #10]
 8011404:	461a      	mov	r2, r3
 8011406:	683b      	ldr	r3, [r7, #0]
 8011408:	fb03 f202 	mul.w	r2, r3, r2
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011410:	4413      	add	r3, r2
}
 8011412:	4618      	mov	r0, r3
 8011414:	370c      	adds	r7, #12
 8011416:	46bd      	mov	sp, r7
 8011418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801141c:	4770      	bx	lr

0801141e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801141e:	b580      	push	{r7, lr}
 8011420:	b086      	sub	sp, #24
 8011422:	af00      	add	r7, sp, #0
 8011424:	6078      	str	r0, [r7, #4]
 8011426:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801142e:	683b      	ldr	r3, [r7, #0]
 8011430:	2b01      	cmp	r3, #1
 8011432:	d904      	bls.n	801143e <get_fat+0x20>
 8011434:	693b      	ldr	r3, [r7, #16]
 8011436:	695b      	ldr	r3, [r3, #20]
 8011438:	683a      	ldr	r2, [r7, #0]
 801143a:	429a      	cmp	r2, r3
 801143c:	d302      	bcc.n	8011444 <get_fat+0x26>
		val = 1;	/* Internal error */
 801143e:	2301      	movs	r3, #1
 8011440:	617b      	str	r3, [r7, #20]
 8011442:	e08e      	b.n	8011562 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011444:	f04f 33ff 	mov.w	r3, #4294967295
 8011448:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801144a:	693b      	ldr	r3, [r7, #16]
 801144c:	781b      	ldrb	r3, [r3, #0]
 801144e:	2b03      	cmp	r3, #3
 8011450:	d061      	beq.n	8011516 <get_fat+0xf8>
 8011452:	2b03      	cmp	r3, #3
 8011454:	dc7b      	bgt.n	801154e <get_fat+0x130>
 8011456:	2b01      	cmp	r3, #1
 8011458:	d002      	beq.n	8011460 <get_fat+0x42>
 801145a:	2b02      	cmp	r3, #2
 801145c:	d041      	beq.n	80114e2 <get_fat+0xc4>
 801145e:	e076      	b.n	801154e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011460:	683b      	ldr	r3, [r7, #0]
 8011462:	60fb      	str	r3, [r7, #12]
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	085b      	lsrs	r3, r3, #1
 8011468:	68fa      	ldr	r2, [r7, #12]
 801146a:	4413      	add	r3, r2
 801146c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801146e:	693b      	ldr	r3, [r7, #16]
 8011470:	6a1a      	ldr	r2, [r3, #32]
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	0a5b      	lsrs	r3, r3, #9
 8011476:	4413      	add	r3, r2
 8011478:	4619      	mov	r1, r3
 801147a:	6938      	ldr	r0, [r7, #16]
 801147c:	f7ff ff14 	bl	80112a8 <move_window>
 8011480:	4603      	mov	r3, r0
 8011482:	2b00      	cmp	r3, #0
 8011484:	d166      	bne.n	8011554 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	1c5a      	adds	r2, r3, #1
 801148a:	60fa      	str	r2, [r7, #12]
 801148c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011490:	693a      	ldr	r2, [r7, #16]
 8011492:	4413      	add	r3, r2
 8011494:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011498:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801149a:	693b      	ldr	r3, [r7, #16]
 801149c:	6a1a      	ldr	r2, [r3, #32]
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	0a5b      	lsrs	r3, r3, #9
 80114a2:	4413      	add	r3, r2
 80114a4:	4619      	mov	r1, r3
 80114a6:	6938      	ldr	r0, [r7, #16]
 80114a8:	f7ff fefe 	bl	80112a8 <move_window>
 80114ac:	4603      	mov	r3, r0
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d152      	bne.n	8011558 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80114b8:	693a      	ldr	r2, [r7, #16]
 80114ba:	4413      	add	r3, r2
 80114bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80114c0:	021b      	lsls	r3, r3, #8
 80114c2:	68ba      	ldr	r2, [r7, #8]
 80114c4:	4313      	orrs	r3, r2
 80114c6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80114c8:	683b      	ldr	r3, [r7, #0]
 80114ca:	f003 0301 	and.w	r3, r3, #1
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d002      	beq.n	80114d8 <get_fat+0xba>
 80114d2:	68bb      	ldr	r3, [r7, #8]
 80114d4:	091b      	lsrs	r3, r3, #4
 80114d6:	e002      	b.n	80114de <get_fat+0xc0>
 80114d8:	68bb      	ldr	r3, [r7, #8]
 80114da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80114de:	617b      	str	r3, [r7, #20]
			break;
 80114e0:	e03f      	b.n	8011562 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80114e2:	693b      	ldr	r3, [r7, #16]
 80114e4:	6a1a      	ldr	r2, [r3, #32]
 80114e6:	683b      	ldr	r3, [r7, #0]
 80114e8:	0a1b      	lsrs	r3, r3, #8
 80114ea:	4413      	add	r3, r2
 80114ec:	4619      	mov	r1, r3
 80114ee:	6938      	ldr	r0, [r7, #16]
 80114f0:	f7ff feda 	bl	80112a8 <move_window>
 80114f4:	4603      	mov	r3, r0
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d130      	bne.n	801155c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80114fa:	693b      	ldr	r3, [r7, #16]
 80114fc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011500:	683b      	ldr	r3, [r7, #0]
 8011502:	005b      	lsls	r3, r3, #1
 8011504:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8011508:	4413      	add	r3, r2
 801150a:	4618      	mov	r0, r3
 801150c:	f7ff fc1a 	bl	8010d44 <ld_word>
 8011510:	4603      	mov	r3, r0
 8011512:	617b      	str	r3, [r7, #20]
			break;
 8011514:	e025      	b.n	8011562 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011516:	693b      	ldr	r3, [r7, #16]
 8011518:	6a1a      	ldr	r2, [r3, #32]
 801151a:	683b      	ldr	r3, [r7, #0]
 801151c:	09db      	lsrs	r3, r3, #7
 801151e:	4413      	add	r3, r2
 8011520:	4619      	mov	r1, r3
 8011522:	6938      	ldr	r0, [r7, #16]
 8011524:	f7ff fec0 	bl	80112a8 <move_window>
 8011528:	4603      	mov	r3, r0
 801152a:	2b00      	cmp	r3, #0
 801152c:	d118      	bne.n	8011560 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801152e:	693b      	ldr	r3, [r7, #16]
 8011530:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011534:	683b      	ldr	r3, [r7, #0]
 8011536:	009b      	lsls	r3, r3, #2
 8011538:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801153c:	4413      	add	r3, r2
 801153e:	4618      	mov	r0, r3
 8011540:	f7ff fc19 	bl	8010d76 <ld_dword>
 8011544:	4603      	mov	r3, r0
 8011546:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801154a:	617b      	str	r3, [r7, #20]
			break;
 801154c:	e009      	b.n	8011562 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801154e:	2301      	movs	r3, #1
 8011550:	617b      	str	r3, [r7, #20]
 8011552:	e006      	b.n	8011562 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011554:	bf00      	nop
 8011556:	e004      	b.n	8011562 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011558:	bf00      	nop
 801155a:	e002      	b.n	8011562 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801155c:	bf00      	nop
 801155e:	e000      	b.n	8011562 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011560:	bf00      	nop
		}
	}

	return val;
 8011562:	697b      	ldr	r3, [r7, #20]
}
 8011564:	4618      	mov	r0, r3
 8011566:	3718      	adds	r7, #24
 8011568:	46bd      	mov	sp, r7
 801156a:	bd80      	pop	{r7, pc}

0801156c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801156c:	b590      	push	{r4, r7, lr}
 801156e:	b089      	sub	sp, #36	@ 0x24
 8011570:	af00      	add	r7, sp, #0
 8011572:	60f8      	str	r0, [r7, #12]
 8011574:	60b9      	str	r1, [r7, #8]
 8011576:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011578:	2302      	movs	r3, #2
 801157a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801157c:	68bb      	ldr	r3, [r7, #8]
 801157e:	2b01      	cmp	r3, #1
 8011580:	f240 80d9 	bls.w	8011736 <put_fat+0x1ca>
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	695b      	ldr	r3, [r3, #20]
 8011588:	68ba      	ldr	r2, [r7, #8]
 801158a:	429a      	cmp	r2, r3
 801158c:	f080 80d3 	bcs.w	8011736 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	781b      	ldrb	r3, [r3, #0]
 8011594:	2b03      	cmp	r3, #3
 8011596:	f000 8096 	beq.w	80116c6 <put_fat+0x15a>
 801159a:	2b03      	cmp	r3, #3
 801159c:	f300 80cb 	bgt.w	8011736 <put_fat+0x1ca>
 80115a0:	2b01      	cmp	r3, #1
 80115a2:	d002      	beq.n	80115aa <put_fat+0x3e>
 80115a4:	2b02      	cmp	r3, #2
 80115a6:	d06e      	beq.n	8011686 <put_fat+0x11a>
 80115a8:	e0c5      	b.n	8011736 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80115aa:	68bb      	ldr	r3, [r7, #8]
 80115ac:	61bb      	str	r3, [r7, #24]
 80115ae:	69bb      	ldr	r3, [r7, #24]
 80115b0:	085b      	lsrs	r3, r3, #1
 80115b2:	69ba      	ldr	r2, [r7, #24]
 80115b4:	4413      	add	r3, r2
 80115b6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	6a1a      	ldr	r2, [r3, #32]
 80115bc:	69bb      	ldr	r3, [r7, #24]
 80115be:	0a5b      	lsrs	r3, r3, #9
 80115c0:	4413      	add	r3, r2
 80115c2:	4619      	mov	r1, r3
 80115c4:	68f8      	ldr	r0, [r7, #12]
 80115c6:	f7ff fe6f 	bl	80112a8 <move_window>
 80115ca:	4603      	mov	r3, r0
 80115cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80115ce:	7ffb      	ldrb	r3, [r7, #31]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	f040 80a9 	bne.w	8011728 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80115dc:	69bb      	ldr	r3, [r7, #24]
 80115de:	1c59      	adds	r1, r3, #1
 80115e0:	61b9      	str	r1, [r7, #24]
 80115e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80115e6:	4413      	add	r3, r2
 80115e8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80115ea:	68bb      	ldr	r3, [r7, #8]
 80115ec:	f003 0301 	and.w	r3, r3, #1
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d00d      	beq.n	8011610 <put_fat+0xa4>
 80115f4:	697b      	ldr	r3, [r7, #20]
 80115f6:	781b      	ldrb	r3, [r3, #0]
 80115f8:	b25b      	sxtb	r3, r3
 80115fa:	f003 030f 	and.w	r3, r3, #15
 80115fe:	b25a      	sxtb	r2, r3
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	b25b      	sxtb	r3, r3
 8011604:	011b      	lsls	r3, r3, #4
 8011606:	b25b      	sxtb	r3, r3
 8011608:	4313      	orrs	r3, r2
 801160a:	b25b      	sxtb	r3, r3
 801160c:	b2db      	uxtb	r3, r3
 801160e:	e001      	b.n	8011614 <put_fat+0xa8>
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	b2db      	uxtb	r3, r3
 8011614:	697a      	ldr	r2, [r7, #20]
 8011616:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	2201      	movs	r2, #1
 801161c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	6a1a      	ldr	r2, [r3, #32]
 8011622:	69bb      	ldr	r3, [r7, #24]
 8011624:	0a5b      	lsrs	r3, r3, #9
 8011626:	4413      	add	r3, r2
 8011628:	4619      	mov	r1, r3
 801162a:	68f8      	ldr	r0, [r7, #12]
 801162c:	f7ff fe3c 	bl	80112a8 <move_window>
 8011630:	4603      	mov	r3, r0
 8011632:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011634:	7ffb      	ldrb	r3, [r7, #31]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d178      	bne.n	801172c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011640:	69bb      	ldr	r3, [r7, #24]
 8011642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011646:	4413      	add	r3, r2
 8011648:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801164a:	68bb      	ldr	r3, [r7, #8]
 801164c:	f003 0301 	and.w	r3, r3, #1
 8011650:	2b00      	cmp	r3, #0
 8011652:	d003      	beq.n	801165c <put_fat+0xf0>
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	091b      	lsrs	r3, r3, #4
 8011658:	b2db      	uxtb	r3, r3
 801165a:	e00e      	b.n	801167a <put_fat+0x10e>
 801165c:	697b      	ldr	r3, [r7, #20]
 801165e:	781b      	ldrb	r3, [r3, #0]
 8011660:	b25b      	sxtb	r3, r3
 8011662:	f023 030f 	bic.w	r3, r3, #15
 8011666:	b25a      	sxtb	r2, r3
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	0a1b      	lsrs	r3, r3, #8
 801166c:	b25b      	sxtb	r3, r3
 801166e:	f003 030f 	and.w	r3, r3, #15
 8011672:	b25b      	sxtb	r3, r3
 8011674:	4313      	orrs	r3, r2
 8011676:	b25b      	sxtb	r3, r3
 8011678:	b2db      	uxtb	r3, r3
 801167a:	697a      	ldr	r2, [r7, #20]
 801167c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	2201      	movs	r2, #1
 8011682:	70da      	strb	r2, [r3, #3]
			break;
 8011684:	e057      	b.n	8011736 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	6a1a      	ldr	r2, [r3, #32]
 801168a:	68bb      	ldr	r3, [r7, #8]
 801168c:	0a1b      	lsrs	r3, r3, #8
 801168e:	4413      	add	r3, r2
 8011690:	4619      	mov	r1, r3
 8011692:	68f8      	ldr	r0, [r7, #12]
 8011694:	f7ff fe08 	bl	80112a8 <move_window>
 8011698:	4603      	mov	r3, r0
 801169a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801169c:	7ffb      	ldrb	r3, [r7, #31]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d146      	bne.n	8011730 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80116a8:	68bb      	ldr	r3, [r7, #8]
 80116aa:	005b      	lsls	r3, r3, #1
 80116ac:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80116b0:	4413      	add	r3, r2
 80116b2:	687a      	ldr	r2, [r7, #4]
 80116b4:	b292      	uxth	r2, r2
 80116b6:	4611      	mov	r1, r2
 80116b8:	4618      	mov	r0, r3
 80116ba:	f7ff fb7f 	bl	8010dbc <st_word>
			fs->wflag = 1;
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	2201      	movs	r2, #1
 80116c2:	70da      	strb	r2, [r3, #3]
			break;
 80116c4:	e037      	b.n	8011736 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	6a1a      	ldr	r2, [r3, #32]
 80116ca:	68bb      	ldr	r3, [r7, #8]
 80116cc:	09db      	lsrs	r3, r3, #7
 80116ce:	4413      	add	r3, r2
 80116d0:	4619      	mov	r1, r3
 80116d2:	68f8      	ldr	r0, [r7, #12]
 80116d4:	f7ff fde8 	bl	80112a8 <move_window>
 80116d8:	4603      	mov	r3, r0
 80116da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80116dc:	7ffb      	ldrb	r3, [r7, #31]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d128      	bne.n	8011734 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80116ee:	68bb      	ldr	r3, [r7, #8]
 80116f0:	009b      	lsls	r3, r3, #2
 80116f2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80116f6:	4413      	add	r3, r2
 80116f8:	4618      	mov	r0, r3
 80116fa:	f7ff fb3c 	bl	8010d76 <ld_dword>
 80116fe:	4603      	mov	r3, r0
 8011700:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8011704:	4323      	orrs	r3, r4
 8011706:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801170e:	68bb      	ldr	r3, [r7, #8]
 8011710:	009b      	lsls	r3, r3, #2
 8011712:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8011716:	4413      	add	r3, r2
 8011718:	6879      	ldr	r1, [r7, #4]
 801171a:	4618      	mov	r0, r3
 801171c:	f7ff fb69 	bl	8010df2 <st_dword>
			fs->wflag = 1;
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	2201      	movs	r2, #1
 8011724:	70da      	strb	r2, [r3, #3]
			break;
 8011726:	e006      	b.n	8011736 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011728:	bf00      	nop
 801172a:	e004      	b.n	8011736 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801172c:	bf00      	nop
 801172e:	e002      	b.n	8011736 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011730:	bf00      	nop
 8011732:	e000      	b.n	8011736 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011734:	bf00      	nop
		}
	}
	return res;
 8011736:	7ffb      	ldrb	r3, [r7, #31]
}
 8011738:	4618      	mov	r0, r3
 801173a:	3724      	adds	r7, #36	@ 0x24
 801173c:	46bd      	mov	sp, r7
 801173e:	bd90      	pop	{r4, r7, pc}

08011740 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011740:	b580      	push	{r7, lr}
 8011742:	b088      	sub	sp, #32
 8011744:	af00      	add	r7, sp, #0
 8011746:	60f8      	str	r0, [r7, #12]
 8011748:	60b9      	str	r1, [r7, #8]
 801174a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801174c:	2300      	movs	r3, #0
 801174e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011756:	68bb      	ldr	r3, [r7, #8]
 8011758:	2b01      	cmp	r3, #1
 801175a:	d904      	bls.n	8011766 <remove_chain+0x26>
 801175c:	69bb      	ldr	r3, [r7, #24]
 801175e:	695b      	ldr	r3, [r3, #20]
 8011760:	68ba      	ldr	r2, [r7, #8]
 8011762:	429a      	cmp	r2, r3
 8011764:	d301      	bcc.n	801176a <remove_chain+0x2a>
 8011766:	2302      	movs	r3, #2
 8011768:	e04b      	b.n	8011802 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	2b00      	cmp	r3, #0
 801176e:	d00c      	beq.n	801178a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011770:	f04f 32ff 	mov.w	r2, #4294967295
 8011774:	6879      	ldr	r1, [r7, #4]
 8011776:	69b8      	ldr	r0, [r7, #24]
 8011778:	f7ff fef8 	bl	801156c <put_fat>
 801177c:	4603      	mov	r3, r0
 801177e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011780:	7ffb      	ldrb	r3, [r7, #31]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d001      	beq.n	801178a <remove_chain+0x4a>
 8011786:	7ffb      	ldrb	r3, [r7, #31]
 8011788:	e03b      	b.n	8011802 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801178a:	68b9      	ldr	r1, [r7, #8]
 801178c:	68f8      	ldr	r0, [r7, #12]
 801178e:	f7ff fe46 	bl	801141e <get_fat>
 8011792:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011794:	697b      	ldr	r3, [r7, #20]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d031      	beq.n	80117fe <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801179a:	697b      	ldr	r3, [r7, #20]
 801179c:	2b01      	cmp	r3, #1
 801179e:	d101      	bne.n	80117a4 <remove_chain+0x64>
 80117a0:	2302      	movs	r3, #2
 80117a2:	e02e      	b.n	8011802 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80117a4:	697b      	ldr	r3, [r7, #20]
 80117a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117aa:	d101      	bne.n	80117b0 <remove_chain+0x70>
 80117ac:	2301      	movs	r3, #1
 80117ae:	e028      	b.n	8011802 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80117b0:	2200      	movs	r2, #0
 80117b2:	68b9      	ldr	r1, [r7, #8]
 80117b4:	69b8      	ldr	r0, [r7, #24]
 80117b6:	f7ff fed9 	bl	801156c <put_fat>
 80117ba:	4603      	mov	r3, r0
 80117bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80117be:	7ffb      	ldrb	r3, [r7, #31]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d001      	beq.n	80117c8 <remove_chain+0x88>
 80117c4:	7ffb      	ldrb	r3, [r7, #31]
 80117c6:	e01c      	b.n	8011802 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80117c8:	69bb      	ldr	r3, [r7, #24]
 80117ca:	691a      	ldr	r2, [r3, #16]
 80117cc:	69bb      	ldr	r3, [r7, #24]
 80117ce:	695b      	ldr	r3, [r3, #20]
 80117d0:	3b02      	subs	r3, #2
 80117d2:	429a      	cmp	r2, r3
 80117d4:	d20b      	bcs.n	80117ee <remove_chain+0xae>
			fs->free_clst++;
 80117d6:	69bb      	ldr	r3, [r7, #24]
 80117d8:	691b      	ldr	r3, [r3, #16]
 80117da:	1c5a      	adds	r2, r3, #1
 80117dc:	69bb      	ldr	r3, [r7, #24]
 80117de:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80117e0:	69bb      	ldr	r3, [r7, #24]
 80117e2:	791b      	ldrb	r3, [r3, #4]
 80117e4:	f043 0301 	orr.w	r3, r3, #1
 80117e8:	b2da      	uxtb	r2, r3
 80117ea:	69bb      	ldr	r3, [r7, #24]
 80117ec:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80117ee:	697b      	ldr	r3, [r7, #20]
 80117f0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80117f2:	69bb      	ldr	r3, [r7, #24]
 80117f4:	695b      	ldr	r3, [r3, #20]
 80117f6:	68ba      	ldr	r2, [r7, #8]
 80117f8:	429a      	cmp	r2, r3
 80117fa:	d3c6      	bcc.n	801178a <remove_chain+0x4a>
 80117fc:	e000      	b.n	8011800 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80117fe:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011800:	2300      	movs	r3, #0
}
 8011802:	4618      	mov	r0, r3
 8011804:	3720      	adds	r7, #32
 8011806:	46bd      	mov	sp, r7
 8011808:	bd80      	pop	{r7, pc}

0801180a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801180a:	b580      	push	{r7, lr}
 801180c:	b088      	sub	sp, #32
 801180e:	af00      	add	r7, sp, #0
 8011810:	6078      	str	r0, [r7, #4]
 8011812:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801181a:	683b      	ldr	r3, [r7, #0]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d10d      	bne.n	801183c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011820:	693b      	ldr	r3, [r7, #16]
 8011822:	68db      	ldr	r3, [r3, #12]
 8011824:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011826:	69bb      	ldr	r3, [r7, #24]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d004      	beq.n	8011836 <create_chain+0x2c>
 801182c:	693b      	ldr	r3, [r7, #16]
 801182e:	695b      	ldr	r3, [r3, #20]
 8011830:	69ba      	ldr	r2, [r7, #24]
 8011832:	429a      	cmp	r2, r3
 8011834:	d31b      	bcc.n	801186e <create_chain+0x64>
 8011836:	2301      	movs	r3, #1
 8011838:	61bb      	str	r3, [r7, #24]
 801183a:	e018      	b.n	801186e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801183c:	6839      	ldr	r1, [r7, #0]
 801183e:	6878      	ldr	r0, [r7, #4]
 8011840:	f7ff fded 	bl	801141e <get_fat>
 8011844:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	2b01      	cmp	r3, #1
 801184a:	d801      	bhi.n	8011850 <create_chain+0x46>
 801184c:	2301      	movs	r3, #1
 801184e:	e070      	b.n	8011932 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011856:	d101      	bne.n	801185c <create_chain+0x52>
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	e06a      	b.n	8011932 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801185c:	693b      	ldr	r3, [r7, #16]
 801185e:	695b      	ldr	r3, [r3, #20]
 8011860:	68fa      	ldr	r2, [r7, #12]
 8011862:	429a      	cmp	r2, r3
 8011864:	d201      	bcs.n	801186a <create_chain+0x60>
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	e063      	b.n	8011932 <create_chain+0x128>
		scl = clst;
 801186a:	683b      	ldr	r3, [r7, #0]
 801186c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801186e:	69bb      	ldr	r3, [r7, #24]
 8011870:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011872:	69fb      	ldr	r3, [r7, #28]
 8011874:	3301      	adds	r3, #1
 8011876:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011878:	693b      	ldr	r3, [r7, #16]
 801187a:	695b      	ldr	r3, [r3, #20]
 801187c:	69fa      	ldr	r2, [r7, #28]
 801187e:	429a      	cmp	r2, r3
 8011880:	d307      	bcc.n	8011892 <create_chain+0x88>
				ncl = 2;
 8011882:	2302      	movs	r3, #2
 8011884:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011886:	69fa      	ldr	r2, [r7, #28]
 8011888:	69bb      	ldr	r3, [r7, #24]
 801188a:	429a      	cmp	r2, r3
 801188c:	d901      	bls.n	8011892 <create_chain+0x88>
 801188e:	2300      	movs	r3, #0
 8011890:	e04f      	b.n	8011932 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011892:	69f9      	ldr	r1, [r7, #28]
 8011894:	6878      	ldr	r0, [r7, #4]
 8011896:	f7ff fdc2 	bl	801141e <get_fat>
 801189a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d00e      	beq.n	80118c0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	2b01      	cmp	r3, #1
 80118a6:	d003      	beq.n	80118b0 <create_chain+0xa6>
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118ae:	d101      	bne.n	80118b4 <create_chain+0xaa>
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	e03e      	b.n	8011932 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80118b4:	69fa      	ldr	r2, [r7, #28]
 80118b6:	69bb      	ldr	r3, [r7, #24]
 80118b8:	429a      	cmp	r2, r3
 80118ba:	d1da      	bne.n	8011872 <create_chain+0x68>
 80118bc:	2300      	movs	r3, #0
 80118be:	e038      	b.n	8011932 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80118c0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80118c2:	f04f 32ff 	mov.w	r2, #4294967295
 80118c6:	69f9      	ldr	r1, [r7, #28]
 80118c8:	6938      	ldr	r0, [r7, #16]
 80118ca:	f7ff fe4f 	bl	801156c <put_fat>
 80118ce:	4603      	mov	r3, r0
 80118d0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80118d2:	7dfb      	ldrb	r3, [r7, #23]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d109      	bne.n	80118ec <create_chain+0xe2>
 80118d8:	683b      	ldr	r3, [r7, #0]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d006      	beq.n	80118ec <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80118de:	69fa      	ldr	r2, [r7, #28]
 80118e0:	6839      	ldr	r1, [r7, #0]
 80118e2:	6938      	ldr	r0, [r7, #16]
 80118e4:	f7ff fe42 	bl	801156c <put_fat>
 80118e8:	4603      	mov	r3, r0
 80118ea:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80118ec:	7dfb      	ldrb	r3, [r7, #23]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d116      	bne.n	8011920 <create_chain+0x116>
		fs->last_clst = ncl;
 80118f2:	693b      	ldr	r3, [r7, #16]
 80118f4:	69fa      	ldr	r2, [r7, #28]
 80118f6:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80118f8:	693b      	ldr	r3, [r7, #16]
 80118fa:	691a      	ldr	r2, [r3, #16]
 80118fc:	693b      	ldr	r3, [r7, #16]
 80118fe:	695b      	ldr	r3, [r3, #20]
 8011900:	3b02      	subs	r3, #2
 8011902:	429a      	cmp	r2, r3
 8011904:	d804      	bhi.n	8011910 <create_chain+0x106>
 8011906:	693b      	ldr	r3, [r7, #16]
 8011908:	691b      	ldr	r3, [r3, #16]
 801190a:	1e5a      	subs	r2, r3, #1
 801190c:	693b      	ldr	r3, [r7, #16]
 801190e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8011910:	693b      	ldr	r3, [r7, #16]
 8011912:	791b      	ldrb	r3, [r3, #4]
 8011914:	f043 0301 	orr.w	r3, r3, #1
 8011918:	b2da      	uxtb	r2, r3
 801191a:	693b      	ldr	r3, [r7, #16]
 801191c:	711a      	strb	r2, [r3, #4]
 801191e:	e007      	b.n	8011930 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011920:	7dfb      	ldrb	r3, [r7, #23]
 8011922:	2b01      	cmp	r3, #1
 8011924:	d102      	bne.n	801192c <create_chain+0x122>
 8011926:	f04f 33ff 	mov.w	r3, #4294967295
 801192a:	e000      	b.n	801192e <create_chain+0x124>
 801192c:	2301      	movs	r3, #1
 801192e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011930:	69fb      	ldr	r3, [r7, #28]
}
 8011932:	4618      	mov	r0, r3
 8011934:	3720      	adds	r7, #32
 8011936:	46bd      	mov	sp, r7
 8011938:	bd80      	pop	{r7, pc}

0801193a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801193a:	b480      	push	{r7}
 801193c:	b087      	sub	sp, #28
 801193e:	af00      	add	r7, sp, #0
 8011940:	6078      	str	r0, [r7, #4]
 8011942:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801194e:	3304      	adds	r3, #4
 8011950:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011952:	683b      	ldr	r3, [r7, #0]
 8011954:	0a5b      	lsrs	r3, r3, #9
 8011956:	68fa      	ldr	r2, [r7, #12]
 8011958:	8952      	ldrh	r2, [r2, #10]
 801195a:	fbb3 f3f2 	udiv	r3, r3, r2
 801195e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011960:	693b      	ldr	r3, [r7, #16]
 8011962:	1d1a      	adds	r2, r3, #4
 8011964:	613a      	str	r2, [r7, #16]
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801196a:	68bb      	ldr	r3, [r7, #8]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d101      	bne.n	8011974 <clmt_clust+0x3a>
 8011970:	2300      	movs	r3, #0
 8011972:	e010      	b.n	8011996 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8011974:	697a      	ldr	r2, [r7, #20]
 8011976:	68bb      	ldr	r3, [r7, #8]
 8011978:	429a      	cmp	r2, r3
 801197a:	d307      	bcc.n	801198c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801197c:	697a      	ldr	r2, [r7, #20]
 801197e:	68bb      	ldr	r3, [r7, #8]
 8011980:	1ad3      	subs	r3, r2, r3
 8011982:	617b      	str	r3, [r7, #20]
 8011984:	693b      	ldr	r3, [r7, #16]
 8011986:	3304      	adds	r3, #4
 8011988:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801198a:	e7e9      	b.n	8011960 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801198c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801198e:	693b      	ldr	r3, [r7, #16]
 8011990:	681a      	ldr	r2, [r3, #0]
 8011992:	697b      	ldr	r3, [r7, #20]
 8011994:	4413      	add	r3, r2
}
 8011996:	4618      	mov	r0, r3
 8011998:	371c      	adds	r7, #28
 801199a:	46bd      	mov	sp, r7
 801199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a0:	4770      	bx	lr

080119a2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80119a2:	b580      	push	{r7, lr}
 80119a4:	b086      	sub	sp, #24
 80119a6:	af00      	add	r7, sp, #0
 80119a8:	6078      	str	r0, [r7, #4]
 80119aa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80119b2:	683b      	ldr	r3, [r7, #0]
 80119b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80119b8:	d204      	bcs.n	80119c4 <dir_sdi+0x22>
 80119ba:	683b      	ldr	r3, [r7, #0]
 80119bc:	f003 031f 	and.w	r3, r3, #31
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d001      	beq.n	80119c8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80119c4:	2302      	movs	r3, #2
 80119c6:	e063      	b.n	8011a90 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	683a      	ldr	r2, [r7, #0]
 80119cc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	689b      	ldr	r3, [r3, #8]
 80119d2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80119d4:	697b      	ldr	r3, [r7, #20]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d106      	bne.n	80119e8 <dir_sdi+0x46>
 80119da:	693b      	ldr	r3, [r7, #16]
 80119dc:	781b      	ldrb	r3, [r3, #0]
 80119de:	2b02      	cmp	r3, #2
 80119e0:	d902      	bls.n	80119e8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80119e2:	693b      	ldr	r3, [r7, #16]
 80119e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119e6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80119e8:	697b      	ldr	r3, [r7, #20]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d10c      	bne.n	8011a08 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80119ee:	683b      	ldr	r3, [r7, #0]
 80119f0:	095b      	lsrs	r3, r3, #5
 80119f2:	693a      	ldr	r2, [r7, #16]
 80119f4:	8912      	ldrh	r2, [r2, #8]
 80119f6:	4293      	cmp	r3, r2
 80119f8:	d301      	bcc.n	80119fe <dir_sdi+0x5c>
 80119fa:	2302      	movs	r3, #2
 80119fc:	e048      	b.n	8011a90 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80119fe:	693b      	ldr	r3, [r7, #16]
 8011a00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	61da      	str	r2, [r3, #28]
 8011a06:	e029      	b.n	8011a5c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011a08:	693b      	ldr	r3, [r7, #16]
 8011a0a:	895b      	ldrh	r3, [r3, #10]
 8011a0c:	025b      	lsls	r3, r3, #9
 8011a0e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011a10:	e019      	b.n	8011a46 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	6979      	ldr	r1, [r7, #20]
 8011a16:	4618      	mov	r0, r3
 8011a18:	f7ff fd01 	bl	801141e <get_fat>
 8011a1c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011a1e:	697b      	ldr	r3, [r7, #20]
 8011a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a24:	d101      	bne.n	8011a2a <dir_sdi+0x88>
 8011a26:	2301      	movs	r3, #1
 8011a28:	e032      	b.n	8011a90 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011a2a:	697b      	ldr	r3, [r7, #20]
 8011a2c:	2b01      	cmp	r3, #1
 8011a2e:	d904      	bls.n	8011a3a <dir_sdi+0x98>
 8011a30:	693b      	ldr	r3, [r7, #16]
 8011a32:	695b      	ldr	r3, [r3, #20]
 8011a34:	697a      	ldr	r2, [r7, #20]
 8011a36:	429a      	cmp	r2, r3
 8011a38:	d301      	bcc.n	8011a3e <dir_sdi+0x9c>
 8011a3a:	2302      	movs	r3, #2
 8011a3c:	e028      	b.n	8011a90 <dir_sdi+0xee>
			ofs -= csz;
 8011a3e:	683a      	ldr	r2, [r7, #0]
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	1ad3      	subs	r3, r2, r3
 8011a44:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011a46:	683a      	ldr	r2, [r7, #0]
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	429a      	cmp	r2, r3
 8011a4c:	d2e1      	bcs.n	8011a12 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8011a4e:	6979      	ldr	r1, [r7, #20]
 8011a50:	6938      	ldr	r0, [r7, #16]
 8011a52:	f7ff fcc5 	bl	80113e0 <clust2sect>
 8011a56:	4602      	mov	r2, r0
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	697a      	ldr	r2, [r7, #20]
 8011a60:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	69db      	ldr	r3, [r3, #28]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d101      	bne.n	8011a6e <dir_sdi+0xcc>
 8011a6a:	2302      	movs	r3, #2
 8011a6c:	e010      	b.n	8011a90 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	69da      	ldr	r2, [r3, #28]
 8011a72:	683b      	ldr	r3, [r7, #0]
 8011a74:	0a5b      	lsrs	r3, r3, #9
 8011a76:	441a      	add	r2, r3
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011a7c:	693b      	ldr	r3, [r7, #16]
 8011a7e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011a82:	683b      	ldr	r3, [r7, #0]
 8011a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011a88:	441a      	add	r2, r3
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011a8e:	2300      	movs	r3, #0
}
 8011a90:	4618      	mov	r0, r3
 8011a92:	3718      	adds	r7, #24
 8011a94:	46bd      	mov	sp, r7
 8011a96:	bd80      	pop	{r7, pc}

08011a98 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b086      	sub	sp, #24
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	6078      	str	r0, [r7, #4]
 8011aa0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	695b      	ldr	r3, [r3, #20]
 8011aac:	3320      	adds	r3, #32
 8011aae:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	69db      	ldr	r3, [r3, #28]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d003      	beq.n	8011ac0 <dir_next+0x28>
 8011ab8:	68bb      	ldr	r3, [r7, #8]
 8011aba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011abe:	d301      	bcc.n	8011ac4 <dir_next+0x2c>
 8011ac0:	2304      	movs	r3, #4
 8011ac2:	e0aa      	b.n	8011c1a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011ac4:	68bb      	ldr	r3, [r7, #8]
 8011ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	f040 8098 	bne.w	8011c00 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	69db      	ldr	r3, [r3, #28]
 8011ad4:	1c5a      	adds	r2, r3, #1
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	699b      	ldr	r3, [r3, #24]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d10b      	bne.n	8011afa <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011ae2:	68bb      	ldr	r3, [r7, #8]
 8011ae4:	095b      	lsrs	r3, r3, #5
 8011ae6:	68fa      	ldr	r2, [r7, #12]
 8011ae8:	8912      	ldrh	r2, [r2, #8]
 8011aea:	4293      	cmp	r3, r2
 8011aec:	f0c0 8088 	bcc.w	8011c00 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	2200      	movs	r2, #0
 8011af4:	61da      	str	r2, [r3, #28]
 8011af6:	2304      	movs	r3, #4
 8011af8:	e08f      	b.n	8011c1a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011afa:	68bb      	ldr	r3, [r7, #8]
 8011afc:	0a5b      	lsrs	r3, r3, #9
 8011afe:	68fa      	ldr	r2, [r7, #12]
 8011b00:	8952      	ldrh	r2, [r2, #10]
 8011b02:	3a01      	subs	r2, #1
 8011b04:	4013      	ands	r3, r2
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d17a      	bne.n	8011c00 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011b0a:	687a      	ldr	r2, [r7, #4]
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	699b      	ldr	r3, [r3, #24]
 8011b10:	4619      	mov	r1, r3
 8011b12:	4610      	mov	r0, r2
 8011b14:	f7ff fc83 	bl	801141e <get_fat>
 8011b18:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011b1a:	697b      	ldr	r3, [r7, #20]
 8011b1c:	2b01      	cmp	r3, #1
 8011b1e:	d801      	bhi.n	8011b24 <dir_next+0x8c>
 8011b20:	2302      	movs	r3, #2
 8011b22:	e07a      	b.n	8011c1a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011b24:	697b      	ldr	r3, [r7, #20]
 8011b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b2a:	d101      	bne.n	8011b30 <dir_next+0x98>
 8011b2c:	2301      	movs	r3, #1
 8011b2e:	e074      	b.n	8011c1a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	695b      	ldr	r3, [r3, #20]
 8011b34:	697a      	ldr	r2, [r7, #20]
 8011b36:	429a      	cmp	r2, r3
 8011b38:	d358      	bcc.n	8011bec <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011b3a:	683b      	ldr	r3, [r7, #0]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d104      	bne.n	8011b4a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	2200      	movs	r2, #0
 8011b44:	61da      	str	r2, [r3, #28]
 8011b46:	2304      	movs	r3, #4
 8011b48:	e067      	b.n	8011c1a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011b4a:	687a      	ldr	r2, [r7, #4]
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	699b      	ldr	r3, [r3, #24]
 8011b50:	4619      	mov	r1, r3
 8011b52:	4610      	mov	r0, r2
 8011b54:	f7ff fe59 	bl	801180a <create_chain>
 8011b58:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011b5a:	697b      	ldr	r3, [r7, #20]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d101      	bne.n	8011b64 <dir_next+0xcc>
 8011b60:	2307      	movs	r3, #7
 8011b62:	e05a      	b.n	8011c1a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011b64:	697b      	ldr	r3, [r7, #20]
 8011b66:	2b01      	cmp	r3, #1
 8011b68:	d101      	bne.n	8011b6e <dir_next+0xd6>
 8011b6a:	2302      	movs	r3, #2
 8011b6c:	e055      	b.n	8011c1a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011b6e:	697b      	ldr	r3, [r7, #20]
 8011b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b74:	d101      	bne.n	8011b7a <dir_next+0xe2>
 8011b76:	2301      	movs	r3, #1
 8011b78:	e04f      	b.n	8011c1a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011b7a:	68f8      	ldr	r0, [r7, #12]
 8011b7c:	f7ff fb50 	bl	8011220 <sync_window>
 8011b80:	4603      	mov	r3, r0
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d001      	beq.n	8011b8a <dir_next+0xf2>
 8011b86:	2301      	movs	r3, #1
 8011b88:	e047      	b.n	8011c1a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	3330      	adds	r3, #48	@ 0x30
 8011b8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011b92:	2100      	movs	r1, #0
 8011b94:	4618      	mov	r0, r3
 8011b96:	f7ff f979 	bl	8010e8c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	613b      	str	r3, [r7, #16]
 8011b9e:	6979      	ldr	r1, [r7, #20]
 8011ba0:	68f8      	ldr	r0, [r7, #12]
 8011ba2:	f7ff fc1d 	bl	80113e0 <clust2sect>
 8011ba6:	4602      	mov	r2, r0
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	62da      	str	r2, [r3, #44]	@ 0x2c
 8011bac:	e012      	b.n	8011bd4 <dir_next+0x13c>
						fs->wflag = 1;
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	2201      	movs	r2, #1
 8011bb2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011bb4:	68f8      	ldr	r0, [r7, #12]
 8011bb6:	f7ff fb33 	bl	8011220 <sync_window>
 8011bba:	4603      	mov	r3, r0
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d001      	beq.n	8011bc4 <dir_next+0x12c>
 8011bc0:	2301      	movs	r3, #1
 8011bc2:	e02a      	b.n	8011c1a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011bc4:	693b      	ldr	r3, [r7, #16]
 8011bc6:	3301      	adds	r3, #1
 8011bc8:	613b      	str	r3, [r7, #16]
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011bce:	1c5a      	adds	r2, r3, #1
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	895b      	ldrh	r3, [r3, #10]
 8011bd8:	461a      	mov	r2, r3
 8011bda:	693b      	ldr	r3, [r7, #16]
 8011bdc:	4293      	cmp	r3, r2
 8011bde:	d3e6      	bcc.n	8011bae <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011be4:	693b      	ldr	r3, [r7, #16]
 8011be6:	1ad2      	subs	r2, r2, r3
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	697a      	ldr	r2, [r7, #20]
 8011bf0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011bf2:	6979      	ldr	r1, [r7, #20]
 8011bf4:	68f8      	ldr	r0, [r7, #12]
 8011bf6:	f7ff fbf3 	bl	80113e0 <clust2sect>
 8011bfa:	4602      	mov	r2, r0
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	68ba      	ldr	r2, [r7, #8]
 8011c04:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011c0c:	68bb      	ldr	r3, [r7, #8]
 8011c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c12:	441a      	add	r2, r3
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011c18:	2300      	movs	r3, #0
}
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	3718      	adds	r7, #24
 8011c1e:	46bd      	mov	sp, r7
 8011c20:	bd80      	pop	{r7, pc}

08011c22 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011c22:	b580      	push	{r7, lr}
 8011c24:	b086      	sub	sp, #24
 8011c26:	af00      	add	r7, sp, #0
 8011c28:	6078      	str	r0, [r7, #4]
 8011c2a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011c32:	2100      	movs	r1, #0
 8011c34:	6878      	ldr	r0, [r7, #4]
 8011c36:	f7ff feb4 	bl	80119a2 <dir_sdi>
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011c3e:	7dfb      	ldrb	r3, [r7, #23]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d12b      	bne.n	8011c9c <dir_alloc+0x7a>
		n = 0;
 8011c44:	2300      	movs	r3, #0
 8011c46:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	69db      	ldr	r3, [r3, #28]
 8011c4c:	4619      	mov	r1, r3
 8011c4e:	68f8      	ldr	r0, [r7, #12]
 8011c50:	f7ff fb2a 	bl	80112a8 <move_window>
 8011c54:	4603      	mov	r3, r0
 8011c56:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011c58:	7dfb      	ldrb	r3, [r7, #23]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d11d      	bne.n	8011c9a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	6a1b      	ldr	r3, [r3, #32]
 8011c62:	781b      	ldrb	r3, [r3, #0]
 8011c64:	2be5      	cmp	r3, #229	@ 0xe5
 8011c66:	d004      	beq.n	8011c72 <dir_alloc+0x50>
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	6a1b      	ldr	r3, [r3, #32]
 8011c6c:	781b      	ldrb	r3, [r3, #0]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d107      	bne.n	8011c82 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011c72:	693b      	ldr	r3, [r7, #16]
 8011c74:	3301      	adds	r3, #1
 8011c76:	613b      	str	r3, [r7, #16]
 8011c78:	693a      	ldr	r2, [r7, #16]
 8011c7a:	683b      	ldr	r3, [r7, #0]
 8011c7c:	429a      	cmp	r2, r3
 8011c7e:	d102      	bne.n	8011c86 <dir_alloc+0x64>
 8011c80:	e00c      	b.n	8011c9c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011c82:	2300      	movs	r3, #0
 8011c84:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011c86:	2101      	movs	r1, #1
 8011c88:	6878      	ldr	r0, [r7, #4]
 8011c8a:	f7ff ff05 	bl	8011a98 <dir_next>
 8011c8e:	4603      	mov	r3, r0
 8011c90:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011c92:	7dfb      	ldrb	r3, [r7, #23]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d0d7      	beq.n	8011c48 <dir_alloc+0x26>
 8011c98:	e000      	b.n	8011c9c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011c9a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011c9c:	7dfb      	ldrb	r3, [r7, #23]
 8011c9e:	2b04      	cmp	r3, #4
 8011ca0:	d101      	bne.n	8011ca6 <dir_alloc+0x84>
 8011ca2:	2307      	movs	r3, #7
 8011ca4:	75fb      	strb	r3, [r7, #23]
	return res;
 8011ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ca8:	4618      	mov	r0, r3
 8011caa:	3718      	adds	r7, #24
 8011cac:	46bd      	mov	sp, r7
 8011cae:	bd80      	pop	{r7, pc}

08011cb0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b084      	sub	sp, #16
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	6078      	str	r0, [r7, #4]
 8011cb8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011cba:	683b      	ldr	r3, [r7, #0]
 8011cbc:	331a      	adds	r3, #26
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	f7ff f840 	bl	8010d44 <ld_word>
 8011cc4:	4603      	mov	r3, r0
 8011cc6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	781b      	ldrb	r3, [r3, #0]
 8011ccc:	2b03      	cmp	r3, #3
 8011cce:	d109      	bne.n	8011ce4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011cd0:	683b      	ldr	r3, [r7, #0]
 8011cd2:	3314      	adds	r3, #20
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	f7ff f835 	bl	8010d44 <ld_word>
 8011cda:	4603      	mov	r3, r0
 8011cdc:	041b      	lsls	r3, r3, #16
 8011cde:	68fa      	ldr	r2, [r7, #12]
 8011ce0:	4313      	orrs	r3, r2
 8011ce2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011ce4:	68fb      	ldr	r3, [r7, #12]
}
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	3710      	adds	r7, #16
 8011cea:	46bd      	mov	sp, r7
 8011cec:	bd80      	pop	{r7, pc}

08011cee <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011cee:	b580      	push	{r7, lr}
 8011cf0:	b084      	sub	sp, #16
 8011cf2:	af00      	add	r7, sp, #0
 8011cf4:	60f8      	str	r0, [r7, #12]
 8011cf6:	60b9      	str	r1, [r7, #8]
 8011cf8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011cfa:	68bb      	ldr	r3, [r7, #8]
 8011cfc:	331a      	adds	r3, #26
 8011cfe:	687a      	ldr	r2, [r7, #4]
 8011d00:	b292      	uxth	r2, r2
 8011d02:	4611      	mov	r1, r2
 8011d04:	4618      	mov	r0, r3
 8011d06:	f7ff f859 	bl	8010dbc <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	781b      	ldrb	r3, [r3, #0]
 8011d0e:	2b03      	cmp	r3, #3
 8011d10:	d109      	bne.n	8011d26 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011d12:	68bb      	ldr	r3, [r7, #8]
 8011d14:	f103 0214 	add.w	r2, r3, #20
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	0c1b      	lsrs	r3, r3, #16
 8011d1c:	b29b      	uxth	r3, r3
 8011d1e:	4619      	mov	r1, r3
 8011d20:	4610      	mov	r0, r2
 8011d22:	f7ff f84b 	bl	8010dbc <st_word>
	}
}
 8011d26:	bf00      	nop
 8011d28:	3710      	adds	r7, #16
 8011d2a:	46bd      	mov	sp, r7
 8011d2c:	bd80      	pop	{r7, pc}

08011d2e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011d2e:	b580      	push	{r7, lr}
 8011d30:	b086      	sub	sp, #24
 8011d32:	af00      	add	r7, sp, #0
 8011d34:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011d3c:	2100      	movs	r1, #0
 8011d3e:	6878      	ldr	r0, [r7, #4]
 8011d40:	f7ff fe2f 	bl	80119a2 <dir_sdi>
 8011d44:	4603      	mov	r3, r0
 8011d46:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011d48:	7dfb      	ldrb	r3, [r7, #23]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d001      	beq.n	8011d52 <dir_find+0x24>
 8011d4e:	7dfb      	ldrb	r3, [r7, #23]
 8011d50:	e03e      	b.n	8011dd0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	69db      	ldr	r3, [r3, #28]
 8011d56:	4619      	mov	r1, r3
 8011d58:	6938      	ldr	r0, [r7, #16]
 8011d5a:	f7ff faa5 	bl	80112a8 <move_window>
 8011d5e:	4603      	mov	r3, r0
 8011d60:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011d62:	7dfb      	ldrb	r3, [r7, #23]
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d12f      	bne.n	8011dc8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	6a1b      	ldr	r3, [r3, #32]
 8011d6c:	781b      	ldrb	r3, [r3, #0]
 8011d6e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011d70:	7bfb      	ldrb	r3, [r7, #15]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d102      	bne.n	8011d7c <dir_find+0x4e>
 8011d76:	2304      	movs	r3, #4
 8011d78:	75fb      	strb	r3, [r7, #23]
 8011d7a:	e028      	b.n	8011dce <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	6a1b      	ldr	r3, [r3, #32]
 8011d80:	330b      	adds	r3, #11
 8011d82:	781b      	ldrb	r3, [r3, #0]
 8011d84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011d88:	b2da      	uxtb	r2, r3
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	6a1b      	ldr	r3, [r3, #32]
 8011d92:	330b      	adds	r3, #11
 8011d94:	781b      	ldrb	r3, [r3, #0]
 8011d96:	f003 0308 	and.w	r3, r3, #8
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d10a      	bne.n	8011db4 <dir_find+0x86>
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	6a18      	ldr	r0, [r3, #32]
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	3324      	adds	r3, #36	@ 0x24
 8011da6:	220b      	movs	r2, #11
 8011da8:	4619      	mov	r1, r3
 8011daa:	f7ff f88a 	bl	8010ec2 <mem_cmp>
 8011dae:	4603      	mov	r3, r0
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d00b      	beq.n	8011dcc <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011db4:	2100      	movs	r1, #0
 8011db6:	6878      	ldr	r0, [r7, #4]
 8011db8:	f7ff fe6e 	bl	8011a98 <dir_next>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011dc0:	7dfb      	ldrb	r3, [r7, #23]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d0c5      	beq.n	8011d52 <dir_find+0x24>
 8011dc6:	e002      	b.n	8011dce <dir_find+0xa0>
		if (res != FR_OK) break;
 8011dc8:	bf00      	nop
 8011dca:	e000      	b.n	8011dce <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011dcc:	bf00      	nop

	return res;
 8011dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	3718      	adds	r7, #24
 8011dd4:	46bd      	mov	sp, r7
 8011dd6:	bd80      	pop	{r7, pc}

08011dd8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011dd8:	b580      	push	{r7, lr}
 8011dda:	b084      	sub	sp, #16
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8011de6:	2101      	movs	r1, #1
 8011de8:	6878      	ldr	r0, [r7, #4]
 8011dea:	f7ff ff1a 	bl	8011c22 <dir_alloc>
 8011dee:	4603      	mov	r3, r0
 8011df0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8011df2:	7bfb      	ldrb	r3, [r7, #15]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d11c      	bne.n	8011e32 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	69db      	ldr	r3, [r3, #28]
 8011dfc:	4619      	mov	r1, r3
 8011dfe:	68b8      	ldr	r0, [r7, #8]
 8011e00:	f7ff fa52 	bl	80112a8 <move_window>
 8011e04:	4603      	mov	r3, r0
 8011e06:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011e08:	7bfb      	ldrb	r3, [r7, #15]
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d111      	bne.n	8011e32 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	6a1b      	ldr	r3, [r3, #32]
 8011e12:	2220      	movs	r2, #32
 8011e14:	2100      	movs	r1, #0
 8011e16:	4618      	mov	r0, r3
 8011e18:	f7ff f838 	bl	8010e8c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	6a18      	ldr	r0, [r3, #32]
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	3324      	adds	r3, #36	@ 0x24
 8011e24:	220b      	movs	r2, #11
 8011e26:	4619      	mov	r1, r3
 8011e28:	f7ff f80f 	bl	8010e4a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8011e2c:	68bb      	ldr	r3, [r7, #8]
 8011e2e:	2201      	movs	r2, #1
 8011e30:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8011e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e34:	4618      	mov	r0, r3
 8011e36:	3710      	adds	r7, #16
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	bd80      	pop	{r7, pc}

08011e3c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b088      	sub	sp, #32
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
 8011e44:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8011e46:	683b      	ldr	r3, [r7, #0]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	60fb      	str	r3, [r7, #12]
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	3324      	adds	r3, #36	@ 0x24
 8011e50:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8011e52:	220b      	movs	r2, #11
 8011e54:	2120      	movs	r1, #32
 8011e56:	68b8      	ldr	r0, [r7, #8]
 8011e58:	f7ff f818 	bl	8010e8c <mem_set>
	si = i = 0; ni = 8;
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	613b      	str	r3, [r7, #16]
 8011e60:	693b      	ldr	r3, [r7, #16]
 8011e62:	61fb      	str	r3, [r7, #28]
 8011e64:	2308      	movs	r3, #8
 8011e66:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8011e68:	69fb      	ldr	r3, [r7, #28]
 8011e6a:	1c5a      	adds	r2, r3, #1
 8011e6c:	61fa      	str	r2, [r7, #28]
 8011e6e:	68fa      	ldr	r2, [r7, #12]
 8011e70:	4413      	add	r3, r2
 8011e72:	781b      	ldrb	r3, [r3, #0]
 8011e74:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011e76:	7efb      	ldrb	r3, [r7, #27]
 8011e78:	2b20      	cmp	r3, #32
 8011e7a:	d94e      	bls.n	8011f1a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8011e7c:	7efb      	ldrb	r3, [r7, #27]
 8011e7e:	2b2f      	cmp	r3, #47	@ 0x2f
 8011e80:	d006      	beq.n	8011e90 <create_name+0x54>
 8011e82:	7efb      	ldrb	r3, [r7, #27]
 8011e84:	2b5c      	cmp	r3, #92	@ 0x5c
 8011e86:	d110      	bne.n	8011eaa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011e88:	e002      	b.n	8011e90 <create_name+0x54>
 8011e8a:	69fb      	ldr	r3, [r7, #28]
 8011e8c:	3301      	adds	r3, #1
 8011e8e:	61fb      	str	r3, [r7, #28]
 8011e90:	68fa      	ldr	r2, [r7, #12]
 8011e92:	69fb      	ldr	r3, [r7, #28]
 8011e94:	4413      	add	r3, r2
 8011e96:	781b      	ldrb	r3, [r3, #0]
 8011e98:	2b2f      	cmp	r3, #47	@ 0x2f
 8011e9a:	d0f6      	beq.n	8011e8a <create_name+0x4e>
 8011e9c:	68fa      	ldr	r2, [r7, #12]
 8011e9e:	69fb      	ldr	r3, [r7, #28]
 8011ea0:	4413      	add	r3, r2
 8011ea2:	781b      	ldrb	r3, [r3, #0]
 8011ea4:	2b5c      	cmp	r3, #92	@ 0x5c
 8011ea6:	d0f0      	beq.n	8011e8a <create_name+0x4e>
			break;
 8011ea8:	e038      	b.n	8011f1c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8011eaa:	7efb      	ldrb	r3, [r7, #27]
 8011eac:	2b2e      	cmp	r3, #46	@ 0x2e
 8011eae:	d003      	beq.n	8011eb8 <create_name+0x7c>
 8011eb0:	693a      	ldr	r2, [r7, #16]
 8011eb2:	697b      	ldr	r3, [r7, #20]
 8011eb4:	429a      	cmp	r2, r3
 8011eb6:	d30c      	bcc.n	8011ed2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8011eb8:	697b      	ldr	r3, [r7, #20]
 8011eba:	2b0b      	cmp	r3, #11
 8011ebc:	d002      	beq.n	8011ec4 <create_name+0x88>
 8011ebe:	7efb      	ldrb	r3, [r7, #27]
 8011ec0:	2b2e      	cmp	r3, #46	@ 0x2e
 8011ec2:	d001      	beq.n	8011ec8 <create_name+0x8c>
 8011ec4:	2306      	movs	r3, #6
 8011ec6:	e044      	b.n	8011f52 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8011ec8:	2308      	movs	r3, #8
 8011eca:	613b      	str	r3, [r7, #16]
 8011ecc:	230b      	movs	r3, #11
 8011ece:	617b      	str	r3, [r7, #20]
			continue;
 8011ed0:	e022      	b.n	8011f18 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8011ed2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	da04      	bge.n	8011ee4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8011eda:	7efb      	ldrb	r3, [r7, #27]
 8011edc:	3b80      	subs	r3, #128	@ 0x80
 8011ede:	4a1f      	ldr	r2, [pc, #124]	@ (8011f5c <create_name+0x120>)
 8011ee0:	5cd3      	ldrb	r3, [r2, r3]
 8011ee2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8011ee4:	7efb      	ldrb	r3, [r7, #27]
 8011ee6:	4619      	mov	r1, r3
 8011ee8:	481d      	ldr	r0, [pc, #116]	@ (8011f60 <create_name+0x124>)
 8011eea:	f7ff f811 	bl	8010f10 <chk_chr>
 8011eee:	4603      	mov	r3, r0
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d001      	beq.n	8011ef8 <create_name+0xbc>
 8011ef4:	2306      	movs	r3, #6
 8011ef6:	e02c      	b.n	8011f52 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8011ef8:	7efb      	ldrb	r3, [r7, #27]
 8011efa:	2b60      	cmp	r3, #96	@ 0x60
 8011efc:	d905      	bls.n	8011f0a <create_name+0xce>
 8011efe:	7efb      	ldrb	r3, [r7, #27]
 8011f00:	2b7a      	cmp	r3, #122	@ 0x7a
 8011f02:	d802      	bhi.n	8011f0a <create_name+0xce>
 8011f04:	7efb      	ldrb	r3, [r7, #27]
 8011f06:	3b20      	subs	r3, #32
 8011f08:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8011f0a:	693b      	ldr	r3, [r7, #16]
 8011f0c:	1c5a      	adds	r2, r3, #1
 8011f0e:	613a      	str	r2, [r7, #16]
 8011f10:	68ba      	ldr	r2, [r7, #8]
 8011f12:	4413      	add	r3, r2
 8011f14:	7efa      	ldrb	r2, [r7, #27]
 8011f16:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8011f18:	e7a6      	b.n	8011e68 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011f1a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8011f1c:	68fa      	ldr	r2, [r7, #12]
 8011f1e:	69fb      	ldr	r3, [r7, #28]
 8011f20:	441a      	add	r2, r3
 8011f22:	683b      	ldr	r3, [r7, #0]
 8011f24:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8011f26:	693b      	ldr	r3, [r7, #16]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d101      	bne.n	8011f30 <create_name+0xf4>
 8011f2c:	2306      	movs	r3, #6
 8011f2e:	e010      	b.n	8011f52 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011f30:	68bb      	ldr	r3, [r7, #8]
 8011f32:	781b      	ldrb	r3, [r3, #0]
 8011f34:	2be5      	cmp	r3, #229	@ 0xe5
 8011f36:	d102      	bne.n	8011f3e <create_name+0x102>
 8011f38:	68bb      	ldr	r3, [r7, #8]
 8011f3a:	2205      	movs	r2, #5
 8011f3c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8011f3e:	7efb      	ldrb	r3, [r7, #27]
 8011f40:	2b20      	cmp	r3, #32
 8011f42:	d801      	bhi.n	8011f48 <create_name+0x10c>
 8011f44:	2204      	movs	r2, #4
 8011f46:	e000      	b.n	8011f4a <create_name+0x10e>
 8011f48:	2200      	movs	r2, #0
 8011f4a:	68bb      	ldr	r3, [r7, #8]
 8011f4c:	330b      	adds	r3, #11
 8011f4e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8011f50:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8011f52:	4618      	mov	r0, r3
 8011f54:	3720      	adds	r7, #32
 8011f56:	46bd      	mov	sp, r7
 8011f58:	bd80      	pop	{r7, pc}
 8011f5a:	bf00      	nop
 8011f5c:	08019d40 	.word	0x08019d40
 8011f60:	08019cc0 	.word	0x08019cc0

08011f64 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b086      	sub	sp, #24
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
 8011f6c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8011f72:	693b      	ldr	r3, [r7, #16]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011f78:	e002      	b.n	8011f80 <follow_path+0x1c>
 8011f7a:	683b      	ldr	r3, [r7, #0]
 8011f7c:	3301      	adds	r3, #1
 8011f7e:	603b      	str	r3, [r7, #0]
 8011f80:	683b      	ldr	r3, [r7, #0]
 8011f82:	781b      	ldrb	r3, [r3, #0]
 8011f84:	2b2f      	cmp	r3, #47	@ 0x2f
 8011f86:	d0f8      	beq.n	8011f7a <follow_path+0x16>
 8011f88:	683b      	ldr	r3, [r7, #0]
 8011f8a:	781b      	ldrb	r3, [r3, #0]
 8011f8c:	2b5c      	cmp	r3, #92	@ 0x5c
 8011f8e:	d0f4      	beq.n	8011f7a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8011f90:	693b      	ldr	r3, [r7, #16]
 8011f92:	2200      	movs	r2, #0
 8011f94:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8011f96:	683b      	ldr	r3, [r7, #0]
 8011f98:	781b      	ldrb	r3, [r3, #0]
 8011f9a:	2b1f      	cmp	r3, #31
 8011f9c:	d80a      	bhi.n	8011fb4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	2280      	movs	r2, #128	@ 0x80
 8011fa2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8011fa6:	2100      	movs	r1, #0
 8011fa8:	6878      	ldr	r0, [r7, #4]
 8011faa:	f7ff fcfa 	bl	80119a2 <dir_sdi>
 8011fae:	4603      	mov	r3, r0
 8011fb0:	75fb      	strb	r3, [r7, #23]
 8011fb2:	e043      	b.n	801203c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011fb4:	463b      	mov	r3, r7
 8011fb6:	4619      	mov	r1, r3
 8011fb8:	6878      	ldr	r0, [r7, #4]
 8011fba:	f7ff ff3f 	bl	8011e3c <create_name>
 8011fbe:	4603      	mov	r3, r0
 8011fc0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011fc2:	7dfb      	ldrb	r3, [r7, #23]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d134      	bne.n	8012032 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011fc8:	6878      	ldr	r0, [r7, #4]
 8011fca:	f7ff feb0 	bl	8011d2e <dir_find>
 8011fce:	4603      	mov	r3, r0
 8011fd0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011fd8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8011fda:	7dfb      	ldrb	r3, [r7, #23]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d00a      	beq.n	8011ff6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011fe0:	7dfb      	ldrb	r3, [r7, #23]
 8011fe2:	2b04      	cmp	r3, #4
 8011fe4:	d127      	bne.n	8012036 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011fe6:	7afb      	ldrb	r3, [r7, #11]
 8011fe8:	f003 0304 	and.w	r3, r3, #4
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d122      	bne.n	8012036 <follow_path+0xd2>
 8011ff0:	2305      	movs	r3, #5
 8011ff2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8011ff4:	e01f      	b.n	8012036 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011ff6:	7afb      	ldrb	r3, [r7, #11]
 8011ff8:	f003 0304 	and.w	r3, r3, #4
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d11c      	bne.n	801203a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012000:	693b      	ldr	r3, [r7, #16]
 8012002:	799b      	ldrb	r3, [r3, #6]
 8012004:	f003 0310 	and.w	r3, r3, #16
 8012008:	2b00      	cmp	r3, #0
 801200a:	d102      	bne.n	8012012 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801200c:	2305      	movs	r3, #5
 801200e:	75fb      	strb	r3, [r7, #23]
 8012010:	e014      	b.n	801203c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	695b      	ldr	r3, [r3, #20]
 801201c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012020:	4413      	add	r3, r2
 8012022:	4619      	mov	r1, r3
 8012024:	68f8      	ldr	r0, [r7, #12]
 8012026:	f7ff fe43 	bl	8011cb0 <ld_clust>
 801202a:	4602      	mov	r2, r0
 801202c:	693b      	ldr	r3, [r7, #16]
 801202e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012030:	e7c0      	b.n	8011fb4 <follow_path+0x50>
			if (res != FR_OK) break;
 8012032:	bf00      	nop
 8012034:	e002      	b.n	801203c <follow_path+0xd8>
				break;
 8012036:	bf00      	nop
 8012038:	e000      	b.n	801203c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801203a:	bf00      	nop
			}
		}
	}

	return res;
 801203c:	7dfb      	ldrb	r3, [r7, #23]
}
 801203e:	4618      	mov	r0, r3
 8012040:	3718      	adds	r7, #24
 8012042:	46bd      	mov	sp, r7
 8012044:	bd80      	pop	{r7, pc}

08012046 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012046:	b480      	push	{r7}
 8012048:	b087      	sub	sp, #28
 801204a:	af00      	add	r7, sp, #0
 801204c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801204e:	f04f 33ff 	mov.w	r3, #4294967295
 8012052:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d031      	beq.n	80120c0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	617b      	str	r3, [r7, #20]
 8012062:	e002      	b.n	801206a <get_ldnumber+0x24>
 8012064:	697b      	ldr	r3, [r7, #20]
 8012066:	3301      	adds	r3, #1
 8012068:	617b      	str	r3, [r7, #20]
 801206a:	697b      	ldr	r3, [r7, #20]
 801206c:	781b      	ldrb	r3, [r3, #0]
 801206e:	2b20      	cmp	r3, #32
 8012070:	d903      	bls.n	801207a <get_ldnumber+0x34>
 8012072:	697b      	ldr	r3, [r7, #20]
 8012074:	781b      	ldrb	r3, [r3, #0]
 8012076:	2b3a      	cmp	r3, #58	@ 0x3a
 8012078:	d1f4      	bne.n	8012064 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801207a:	697b      	ldr	r3, [r7, #20]
 801207c:	781b      	ldrb	r3, [r3, #0]
 801207e:	2b3a      	cmp	r3, #58	@ 0x3a
 8012080:	d11c      	bne.n	80120bc <get_ldnumber+0x76>
			tp = *path;
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	1c5a      	adds	r2, r3, #1
 801208c:	60fa      	str	r2, [r7, #12]
 801208e:	781b      	ldrb	r3, [r3, #0]
 8012090:	3b30      	subs	r3, #48	@ 0x30
 8012092:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012094:	68bb      	ldr	r3, [r7, #8]
 8012096:	2b09      	cmp	r3, #9
 8012098:	d80e      	bhi.n	80120b8 <get_ldnumber+0x72>
 801209a:	68fa      	ldr	r2, [r7, #12]
 801209c:	697b      	ldr	r3, [r7, #20]
 801209e:	429a      	cmp	r2, r3
 80120a0:	d10a      	bne.n	80120b8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80120a2:	68bb      	ldr	r3, [r7, #8]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d107      	bne.n	80120b8 <get_ldnumber+0x72>
					vol = (int)i;
 80120a8:	68bb      	ldr	r3, [r7, #8]
 80120aa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80120ac:	697b      	ldr	r3, [r7, #20]
 80120ae:	3301      	adds	r3, #1
 80120b0:	617b      	str	r3, [r7, #20]
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	697a      	ldr	r2, [r7, #20]
 80120b6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80120b8:	693b      	ldr	r3, [r7, #16]
 80120ba:	e002      	b.n	80120c2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80120bc:	2300      	movs	r3, #0
 80120be:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80120c0:	693b      	ldr	r3, [r7, #16]
}
 80120c2:	4618      	mov	r0, r3
 80120c4:	371c      	adds	r7, #28
 80120c6:	46bd      	mov	sp, r7
 80120c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120cc:	4770      	bx	lr
	...

080120d0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80120d0:	b580      	push	{r7, lr}
 80120d2:	b082      	sub	sp, #8
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	6078      	str	r0, [r7, #4]
 80120d8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	2200      	movs	r2, #0
 80120de:	70da      	strb	r2, [r3, #3]
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	f04f 32ff 	mov.w	r2, #4294967295
 80120e6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80120e8:	6839      	ldr	r1, [r7, #0]
 80120ea:	6878      	ldr	r0, [r7, #4]
 80120ec:	f7ff f8dc 	bl	80112a8 <move_window>
 80120f0:	4603      	mov	r3, r0
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d001      	beq.n	80120fa <check_fs+0x2a>
 80120f6:	2304      	movs	r3, #4
 80120f8:	e038      	b.n	801216c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	3330      	adds	r3, #48	@ 0x30
 80120fe:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8012102:	4618      	mov	r0, r3
 8012104:	f7fe fe1e 	bl	8010d44 <ld_word>
 8012108:	4603      	mov	r3, r0
 801210a:	461a      	mov	r2, r3
 801210c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8012110:	429a      	cmp	r2, r3
 8012112:	d001      	beq.n	8012118 <check_fs+0x48>
 8012114:	2303      	movs	r3, #3
 8012116:	e029      	b.n	801216c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801211e:	2be9      	cmp	r3, #233	@ 0xe9
 8012120:	d009      	beq.n	8012136 <check_fs+0x66>
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012128:	2beb      	cmp	r3, #235	@ 0xeb
 801212a:	d11e      	bne.n	801216a <check_fs+0x9a>
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8012132:	2b90      	cmp	r3, #144	@ 0x90
 8012134:	d119      	bne.n	801216a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	3330      	adds	r3, #48	@ 0x30
 801213a:	3336      	adds	r3, #54	@ 0x36
 801213c:	4618      	mov	r0, r3
 801213e:	f7fe fe1a 	bl	8010d76 <ld_dword>
 8012142:	4603      	mov	r3, r0
 8012144:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012148:	4a0a      	ldr	r2, [pc, #40]	@ (8012174 <check_fs+0xa4>)
 801214a:	4293      	cmp	r3, r2
 801214c:	d101      	bne.n	8012152 <check_fs+0x82>
 801214e:	2300      	movs	r3, #0
 8012150:	e00c      	b.n	801216c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	3330      	adds	r3, #48	@ 0x30
 8012156:	3352      	adds	r3, #82	@ 0x52
 8012158:	4618      	mov	r0, r3
 801215a:	f7fe fe0c 	bl	8010d76 <ld_dword>
 801215e:	4603      	mov	r3, r0
 8012160:	4a05      	ldr	r2, [pc, #20]	@ (8012178 <check_fs+0xa8>)
 8012162:	4293      	cmp	r3, r2
 8012164:	d101      	bne.n	801216a <check_fs+0x9a>
 8012166:	2300      	movs	r3, #0
 8012168:	e000      	b.n	801216c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801216a:	2302      	movs	r3, #2
}
 801216c:	4618      	mov	r0, r3
 801216e:	3708      	adds	r7, #8
 8012170:	46bd      	mov	sp, r7
 8012172:	bd80      	pop	{r7, pc}
 8012174:	00544146 	.word	0x00544146
 8012178:	33544146 	.word	0x33544146

0801217c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801217c:	b580      	push	{r7, lr}
 801217e:	b096      	sub	sp, #88	@ 0x58
 8012180:	af00      	add	r7, sp, #0
 8012182:	60f8      	str	r0, [r7, #12]
 8012184:	60b9      	str	r1, [r7, #8]
 8012186:	4613      	mov	r3, r2
 8012188:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801218a:	68bb      	ldr	r3, [r7, #8]
 801218c:	2200      	movs	r2, #0
 801218e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012190:	68f8      	ldr	r0, [r7, #12]
 8012192:	f7ff ff58 	bl	8012046 <get_ldnumber>
 8012196:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012198:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801219a:	2b00      	cmp	r3, #0
 801219c:	da01      	bge.n	80121a2 <find_volume+0x26>
 801219e:	230b      	movs	r3, #11
 80121a0:	e22d      	b.n	80125fe <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80121a2:	4aa1      	ldr	r2, [pc, #644]	@ (8012428 <find_volume+0x2ac>)
 80121a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80121a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80121aa:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80121ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d101      	bne.n	80121b6 <find_volume+0x3a>
 80121b2:	230c      	movs	r3, #12
 80121b4:	e223      	b.n	80125fe <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80121b6:	68bb      	ldr	r3, [r7, #8]
 80121b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80121ba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80121bc:	79fb      	ldrb	r3, [r7, #7]
 80121be:	f023 0301 	bic.w	r3, r3, #1
 80121c2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80121c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121c6:	781b      	ldrb	r3, [r3, #0]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d01a      	beq.n	8012202 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80121cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121ce:	785b      	ldrb	r3, [r3, #1]
 80121d0:	4618      	mov	r0, r3
 80121d2:	f7fe fd19 	bl	8010c08 <disk_status>
 80121d6:	4603      	mov	r3, r0
 80121d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80121dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80121e0:	f003 0301 	and.w	r3, r3, #1
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d10c      	bne.n	8012202 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80121e8:	79fb      	ldrb	r3, [r7, #7]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d007      	beq.n	80121fe <find_volume+0x82>
 80121ee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80121f2:	f003 0304 	and.w	r3, r3, #4
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d001      	beq.n	80121fe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80121fa:	230a      	movs	r3, #10
 80121fc:	e1ff      	b.n	80125fe <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80121fe:	2300      	movs	r3, #0
 8012200:	e1fd      	b.n	80125fe <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012204:	2200      	movs	r2, #0
 8012206:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012208:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801220a:	b2da      	uxtb	r2, r3
 801220c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801220e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012212:	785b      	ldrb	r3, [r3, #1]
 8012214:	4618      	mov	r0, r3
 8012216:	f7fe fd11 	bl	8010c3c <disk_initialize>
 801221a:	4603      	mov	r3, r0
 801221c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012220:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012224:	f003 0301 	and.w	r3, r3, #1
 8012228:	2b00      	cmp	r3, #0
 801222a:	d001      	beq.n	8012230 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801222c:	2303      	movs	r3, #3
 801222e:	e1e6      	b.n	80125fe <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012230:	79fb      	ldrb	r3, [r7, #7]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d007      	beq.n	8012246 <find_volume+0xca>
 8012236:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801223a:	f003 0304 	and.w	r3, r3, #4
 801223e:	2b00      	cmp	r3, #0
 8012240:	d001      	beq.n	8012246 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012242:	230a      	movs	r3, #10
 8012244:	e1db      	b.n	80125fe <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012246:	2300      	movs	r3, #0
 8012248:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801224a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801224c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801224e:	f7ff ff3f 	bl	80120d0 <check_fs>
 8012252:	4603      	mov	r3, r0
 8012254:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012258:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801225c:	2b02      	cmp	r3, #2
 801225e:	d149      	bne.n	80122f4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012260:	2300      	movs	r3, #0
 8012262:	643b      	str	r3, [r7, #64]	@ 0x40
 8012264:	e01e      	b.n	80122a4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012268:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801226c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801226e:	011b      	lsls	r3, r3, #4
 8012270:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8012274:	4413      	add	r3, r2
 8012276:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801227a:	3304      	adds	r3, #4
 801227c:	781b      	ldrb	r3, [r3, #0]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d006      	beq.n	8012290 <find_volume+0x114>
 8012282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012284:	3308      	adds	r3, #8
 8012286:	4618      	mov	r0, r3
 8012288:	f7fe fd75 	bl	8010d76 <ld_dword>
 801228c:	4602      	mov	r2, r0
 801228e:	e000      	b.n	8012292 <find_volume+0x116>
 8012290:	2200      	movs	r2, #0
 8012292:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012294:	009b      	lsls	r3, r3, #2
 8012296:	3358      	adds	r3, #88	@ 0x58
 8012298:	443b      	add	r3, r7
 801229a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801229e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80122a0:	3301      	adds	r3, #1
 80122a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80122a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80122a6:	2b03      	cmp	r3, #3
 80122a8:	d9dd      	bls.n	8012266 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80122aa:	2300      	movs	r3, #0
 80122ac:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80122ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d002      	beq.n	80122ba <find_volume+0x13e>
 80122b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80122b6:	3b01      	subs	r3, #1
 80122b8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80122ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80122bc:	009b      	lsls	r3, r3, #2
 80122be:	3358      	adds	r3, #88	@ 0x58
 80122c0:	443b      	add	r3, r7
 80122c2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80122c6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80122c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d005      	beq.n	80122da <find_volume+0x15e>
 80122ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80122d0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80122d2:	f7ff fefd 	bl	80120d0 <check_fs>
 80122d6:	4603      	mov	r3, r0
 80122d8:	e000      	b.n	80122dc <find_volume+0x160>
 80122da:	2303      	movs	r3, #3
 80122dc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80122e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80122e4:	2b01      	cmp	r3, #1
 80122e6:	d905      	bls.n	80122f4 <find_volume+0x178>
 80122e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80122ea:	3301      	adds	r3, #1
 80122ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80122ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80122f0:	2b03      	cmp	r3, #3
 80122f2:	d9e2      	bls.n	80122ba <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80122f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80122f8:	2b04      	cmp	r3, #4
 80122fa:	d101      	bne.n	8012300 <find_volume+0x184>
 80122fc:	2301      	movs	r3, #1
 80122fe:	e17e      	b.n	80125fe <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012300:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012304:	2b01      	cmp	r3, #1
 8012306:	d901      	bls.n	801230c <find_volume+0x190>
 8012308:	230d      	movs	r3, #13
 801230a:	e178      	b.n	80125fe <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801230c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801230e:	3330      	adds	r3, #48	@ 0x30
 8012310:	330b      	adds	r3, #11
 8012312:	4618      	mov	r0, r3
 8012314:	f7fe fd16 	bl	8010d44 <ld_word>
 8012318:	4603      	mov	r3, r0
 801231a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801231e:	d001      	beq.n	8012324 <find_volume+0x1a8>
 8012320:	230d      	movs	r3, #13
 8012322:	e16c      	b.n	80125fe <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012326:	3330      	adds	r3, #48	@ 0x30
 8012328:	3316      	adds	r3, #22
 801232a:	4618      	mov	r0, r3
 801232c:	f7fe fd0a 	bl	8010d44 <ld_word>
 8012330:	4603      	mov	r3, r0
 8012332:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012334:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012336:	2b00      	cmp	r3, #0
 8012338:	d106      	bne.n	8012348 <find_volume+0x1cc>
 801233a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801233c:	3330      	adds	r3, #48	@ 0x30
 801233e:	3324      	adds	r3, #36	@ 0x24
 8012340:	4618      	mov	r0, r3
 8012342:	f7fe fd18 	bl	8010d76 <ld_dword>
 8012346:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8012348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801234a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801234c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801234e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012350:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8012354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012356:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801235a:	789b      	ldrb	r3, [r3, #2]
 801235c:	2b01      	cmp	r3, #1
 801235e:	d005      	beq.n	801236c <find_volume+0x1f0>
 8012360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012362:	789b      	ldrb	r3, [r3, #2]
 8012364:	2b02      	cmp	r3, #2
 8012366:	d001      	beq.n	801236c <find_volume+0x1f0>
 8012368:	230d      	movs	r3, #13
 801236a:	e148      	b.n	80125fe <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801236c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801236e:	789b      	ldrb	r3, [r3, #2]
 8012370:	461a      	mov	r2, r3
 8012372:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012374:	fb02 f303 	mul.w	r3, r2, r3
 8012378:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801237a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801237c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012380:	461a      	mov	r2, r3
 8012382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012384:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012388:	895b      	ldrh	r3, [r3, #10]
 801238a:	2b00      	cmp	r3, #0
 801238c:	d008      	beq.n	80123a0 <find_volume+0x224>
 801238e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012390:	895b      	ldrh	r3, [r3, #10]
 8012392:	461a      	mov	r2, r3
 8012394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012396:	895b      	ldrh	r3, [r3, #10]
 8012398:	3b01      	subs	r3, #1
 801239a:	4013      	ands	r3, r2
 801239c:	2b00      	cmp	r3, #0
 801239e:	d001      	beq.n	80123a4 <find_volume+0x228>
 80123a0:	230d      	movs	r3, #13
 80123a2:	e12c      	b.n	80125fe <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80123a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123a6:	3330      	adds	r3, #48	@ 0x30
 80123a8:	3311      	adds	r3, #17
 80123aa:	4618      	mov	r0, r3
 80123ac:	f7fe fcca 	bl	8010d44 <ld_word>
 80123b0:	4603      	mov	r3, r0
 80123b2:	461a      	mov	r2, r3
 80123b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123b6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80123b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123ba:	891b      	ldrh	r3, [r3, #8]
 80123bc:	f003 030f 	and.w	r3, r3, #15
 80123c0:	b29b      	uxth	r3, r3
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d001      	beq.n	80123ca <find_volume+0x24e>
 80123c6:	230d      	movs	r3, #13
 80123c8:	e119      	b.n	80125fe <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80123ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123cc:	3330      	adds	r3, #48	@ 0x30
 80123ce:	3313      	adds	r3, #19
 80123d0:	4618      	mov	r0, r3
 80123d2:	f7fe fcb7 	bl	8010d44 <ld_word>
 80123d6:	4603      	mov	r3, r0
 80123d8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80123da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d106      	bne.n	80123ee <find_volume+0x272>
 80123e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123e2:	3330      	adds	r3, #48	@ 0x30
 80123e4:	3320      	adds	r3, #32
 80123e6:	4618      	mov	r0, r3
 80123e8:	f7fe fcc5 	bl	8010d76 <ld_dword>
 80123ec:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80123ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123f0:	3330      	adds	r3, #48	@ 0x30
 80123f2:	330e      	adds	r3, #14
 80123f4:	4618      	mov	r0, r3
 80123f6:	f7fe fca5 	bl	8010d44 <ld_word>
 80123fa:	4603      	mov	r3, r0
 80123fc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80123fe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012400:	2b00      	cmp	r3, #0
 8012402:	d101      	bne.n	8012408 <find_volume+0x28c>
 8012404:	230d      	movs	r3, #13
 8012406:	e0fa      	b.n	80125fe <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012408:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801240a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801240c:	4413      	add	r3, r2
 801240e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012410:	8912      	ldrh	r2, [r2, #8]
 8012412:	0912      	lsrs	r2, r2, #4
 8012414:	b292      	uxth	r2, r2
 8012416:	4413      	add	r3, r2
 8012418:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801241a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801241c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801241e:	429a      	cmp	r2, r3
 8012420:	d204      	bcs.n	801242c <find_volume+0x2b0>
 8012422:	230d      	movs	r3, #13
 8012424:	e0eb      	b.n	80125fe <find_volume+0x482>
 8012426:	bf00      	nop
 8012428:	200017b8 	.word	0x200017b8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801242c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801242e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012430:	1ad3      	subs	r3, r2, r3
 8012432:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012434:	8952      	ldrh	r2, [r2, #10]
 8012436:	fbb3 f3f2 	udiv	r3, r3, r2
 801243a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801243c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801243e:	2b00      	cmp	r3, #0
 8012440:	d101      	bne.n	8012446 <find_volume+0x2ca>
 8012442:	230d      	movs	r3, #13
 8012444:	e0db      	b.n	80125fe <find_volume+0x482>
		fmt = FS_FAT32;
 8012446:	2303      	movs	r3, #3
 8012448:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801244c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801244e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8012452:	4293      	cmp	r3, r2
 8012454:	d802      	bhi.n	801245c <find_volume+0x2e0>
 8012456:	2302      	movs	r3, #2
 8012458:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801245c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801245e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8012462:	4293      	cmp	r3, r2
 8012464:	d802      	bhi.n	801246c <find_volume+0x2f0>
 8012466:	2301      	movs	r3, #1
 8012468:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801246c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801246e:	1c9a      	adds	r2, r3, #2
 8012470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012472:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8012474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012476:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012478:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801247a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801247c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801247e:	441a      	add	r2, r3
 8012480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012482:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8012484:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012488:	441a      	add	r2, r3
 801248a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801248c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 801248e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012492:	2b03      	cmp	r3, #3
 8012494:	d11e      	bne.n	80124d4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012498:	3330      	adds	r3, #48	@ 0x30
 801249a:	332a      	adds	r3, #42	@ 0x2a
 801249c:	4618      	mov	r0, r3
 801249e:	f7fe fc51 	bl	8010d44 <ld_word>
 80124a2:	4603      	mov	r3, r0
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d001      	beq.n	80124ac <find_volume+0x330>
 80124a8:	230d      	movs	r3, #13
 80124aa:	e0a8      	b.n	80125fe <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80124ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124ae:	891b      	ldrh	r3, [r3, #8]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d001      	beq.n	80124b8 <find_volume+0x33c>
 80124b4:	230d      	movs	r3, #13
 80124b6:	e0a2      	b.n	80125fe <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80124b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124ba:	3330      	adds	r3, #48	@ 0x30
 80124bc:	332c      	adds	r3, #44	@ 0x2c
 80124be:	4618      	mov	r0, r3
 80124c0:	f7fe fc59 	bl	8010d76 <ld_dword>
 80124c4:	4602      	mov	r2, r0
 80124c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124c8:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80124ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124cc:	695b      	ldr	r3, [r3, #20]
 80124ce:	009b      	lsls	r3, r3, #2
 80124d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80124d2:	e01f      	b.n	8012514 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80124d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124d6:	891b      	ldrh	r3, [r3, #8]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d101      	bne.n	80124e0 <find_volume+0x364>
 80124dc:	230d      	movs	r3, #13
 80124de:	e08e      	b.n	80125fe <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80124e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124e2:	6a1a      	ldr	r2, [r3, #32]
 80124e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80124e6:	441a      	add	r2, r3
 80124e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124ea:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80124ec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80124f0:	2b02      	cmp	r3, #2
 80124f2:	d103      	bne.n	80124fc <find_volume+0x380>
 80124f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124f6:	695b      	ldr	r3, [r3, #20]
 80124f8:	005b      	lsls	r3, r3, #1
 80124fa:	e00a      	b.n	8012512 <find_volume+0x396>
 80124fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124fe:	695a      	ldr	r2, [r3, #20]
 8012500:	4613      	mov	r3, r2
 8012502:	005b      	lsls	r3, r3, #1
 8012504:	4413      	add	r3, r2
 8012506:	085a      	lsrs	r2, r3, #1
 8012508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801250a:	695b      	ldr	r3, [r3, #20]
 801250c:	f003 0301 	and.w	r3, r3, #1
 8012510:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012512:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012516:	699a      	ldr	r2, [r3, #24]
 8012518:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801251a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 801251e:	0a5b      	lsrs	r3, r3, #9
 8012520:	429a      	cmp	r2, r3
 8012522:	d201      	bcs.n	8012528 <find_volume+0x3ac>
 8012524:	230d      	movs	r3, #13
 8012526:	e06a      	b.n	80125fe <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801252a:	f04f 32ff 	mov.w	r2, #4294967295
 801252e:	611a      	str	r2, [r3, #16]
 8012530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012532:	691a      	ldr	r2, [r3, #16]
 8012534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012536:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8012538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801253a:	2280      	movs	r2, #128	@ 0x80
 801253c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801253e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012542:	2b03      	cmp	r3, #3
 8012544:	d149      	bne.n	80125da <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012548:	3330      	adds	r3, #48	@ 0x30
 801254a:	3330      	adds	r3, #48	@ 0x30
 801254c:	4618      	mov	r0, r3
 801254e:	f7fe fbf9 	bl	8010d44 <ld_word>
 8012552:	4603      	mov	r3, r0
 8012554:	2b01      	cmp	r3, #1
 8012556:	d140      	bne.n	80125da <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012558:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801255a:	3301      	adds	r3, #1
 801255c:	4619      	mov	r1, r3
 801255e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012560:	f7fe fea2 	bl	80112a8 <move_window>
 8012564:	4603      	mov	r3, r0
 8012566:	2b00      	cmp	r3, #0
 8012568:	d137      	bne.n	80125da <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801256a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801256c:	2200      	movs	r2, #0
 801256e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012572:	3330      	adds	r3, #48	@ 0x30
 8012574:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8012578:	4618      	mov	r0, r3
 801257a:	f7fe fbe3 	bl	8010d44 <ld_word>
 801257e:	4603      	mov	r3, r0
 8012580:	461a      	mov	r2, r3
 8012582:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8012586:	429a      	cmp	r2, r3
 8012588:	d127      	bne.n	80125da <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801258a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801258c:	3330      	adds	r3, #48	@ 0x30
 801258e:	4618      	mov	r0, r3
 8012590:	f7fe fbf1 	bl	8010d76 <ld_dword>
 8012594:	4603      	mov	r3, r0
 8012596:	4a1c      	ldr	r2, [pc, #112]	@ (8012608 <find_volume+0x48c>)
 8012598:	4293      	cmp	r3, r2
 801259a:	d11e      	bne.n	80125da <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801259c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801259e:	3330      	adds	r3, #48	@ 0x30
 80125a0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80125a4:	4618      	mov	r0, r3
 80125a6:	f7fe fbe6 	bl	8010d76 <ld_dword>
 80125aa:	4603      	mov	r3, r0
 80125ac:	4a17      	ldr	r2, [pc, #92]	@ (801260c <find_volume+0x490>)
 80125ae:	4293      	cmp	r3, r2
 80125b0:	d113      	bne.n	80125da <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80125b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125b4:	3330      	adds	r3, #48	@ 0x30
 80125b6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80125ba:	4618      	mov	r0, r3
 80125bc:	f7fe fbdb 	bl	8010d76 <ld_dword>
 80125c0:	4602      	mov	r2, r0
 80125c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125c4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80125c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125c8:	3330      	adds	r3, #48	@ 0x30
 80125ca:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80125ce:	4618      	mov	r0, r3
 80125d0:	f7fe fbd1 	bl	8010d76 <ld_dword>
 80125d4:	4602      	mov	r2, r0
 80125d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125d8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80125da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125dc:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80125e0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80125e2:	4b0b      	ldr	r3, [pc, #44]	@ (8012610 <find_volume+0x494>)
 80125e4:	881b      	ldrh	r3, [r3, #0]
 80125e6:	3301      	adds	r3, #1
 80125e8:	b29a      	uxth	r2, r3
 80125ea:	4b09      	ldr	r3, [pc, #36]	@ (8012610 <find_volume+0x494>)
 80125ec:	801a      	strh	r2, [r3, #0]
 80125ee:	4b08      	ldr	r3, [pc, #32]	@ (8012610 <find_volume+0x494>)
 80125f0:	881a      	ldrh	r2, [r3, #0]
 80125f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125f4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80125f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80125f8:	f7fe fdee 	bl	80111d8 <clear_lock>
#endif
	return FR_OK;
 80125fc:	2300      	movs	r3, #0
}
 80125fe:	4618      	mov	r0, r3
 8012600:	3758      	adds	r7, #88	@ 0x58
 8012602:	46bd      	mov	sp, r7
 8012604:	bd80      	pop	{r7, pc}
 8012606:	bf00      	nop
 8012608:	41615252 	.word	0x41615252
 801260c:	61417272 	.word	0x61417272
 8012610:	200017bc 	.word	0x200017bc

08012614 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012614:	b580      	push	{r7, lr}
 8012616:	b084      	sub	sp, #16
 8012618:	af00      	add	r7, sp, #0
 801261a:	6078      	str	r0, [r7, #4]
 801261c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801261e:	2309      	movs	r3, #9
 8012620:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d01c      	beq.n	8012662 <validate+0x4e>
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d018      	beq.n	8012662 <validate+0x4e>
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	781b      	ldrb	r3, [r3, #0]
 8012636:	2b00      	cmp	r3, #0
 8012638:	d013      	beq.n	8012662 <validate+0x4e>
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	889a      	ldrh	r2, [r3, #4]
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	88db      	ldrh	r3, [r3, #6]
 8012644:	429a      	cmp	r2, r3
 8012646:	d10c      	bne.n	8012662 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	785b      	ldrb	r3, [r3, #1]
 801264e:	4618      	mov	r0, r3
 8012650:	f7fe fada 	bl	8010c08 <disk_status>
 8012654:	4603      	mov	r3, r0
 8012656:	f003 0301 	and.w	r3, r3, #1
 801265a:	2b00      	cmp	r3, #0
 801265c:	d101      	bne.n	8012662 <validate+0x4e>
			res = FR_OK;
 801265e:	2300      	movs	r3, #0
 8012660:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012662:	7bfb      	ldrb	r3, [r7, #15]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d102      	bne.n	801266e <validate+0x5a>
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	e000      	b.n	8012670 <validate+0x5c>
 801266e:	2300      	movs	r3, #0
 8012670:	683a      	ldr	r2, [r7, #0]
 8012672:	6013      	str	r3, [r2, #0]
	return res;
 8012674:	7bfb      	ldrb	r3, [r7, #15]
}
 8012676:	4618      	mov	r0, r3
 8012678:	3710      	adds	r7, #16
 801267a:	46bd      	mov	sp, r7
 801267c:	bd80      	pop	{r7, pc}
	...

08012680 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012680:	b580      	push	{r7, lr}
 8012682:	b088      	sub	sp, #32
 8012684:	af00      	add	r7, sp, #0
 8012686:	60f8      	str	r0, [r7, #12]
 8012688:	60b9      	str	r1, [r7, #8]
 801268a:	4613      	mov	r3, r2
 801268c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801268e:	68bb      	ldr	r3, [r7, #8]
 8012690:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012692:	f107 0310 	add.w	r3, r7, #16
 8012696:	4618      	mov	r0, r3
 8012698:	f7ff fcd5 	bl	8012046 <get_ldnumber>
 801269c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801269e:	69fb      	ldr	r3, [r7, #28]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	da01      	bge.n	80126a8 <f_mount+0x28>
 80126a4:	230b      	movs	r3, #11
 80126a6:	e02b      	b.n	8012700 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80126a8:	4a17      	ldr	r2, [pc, #92]	@ (8012708 <f_mount+0x88>)
 80126aa:	69fb      	ldr	r3, [r7, #28]
 80126ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80126b0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80126b2:	69bb      	ldr	r3, [r7, #24]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d005      	beq.n	80126c4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80126b8:	69b8      	ldr	r0, [r7, #24]
 80126ba:	f7fe fd8d 	bl	80111d8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80126be:	69bb      	ldr	r3, [r7, #24]
 80126c0:	2200      	movs	r2, #0
 80126c2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d002      	beq.n	80126d0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	2200      	movs	r2, #0
 80126ce:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80126d0:	68fa      	ldr	r2, [r7, #12]
 80126d2:	490d      	ldr	r1, [pc, #52]	@ (8012708 <f_mount+0x88>)
 80126d4:	69fb      	ldr	r3, [r7, #28]
 80126d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d002      	beq.n	80126e6 <f_mount+0x66>
 80126e0:	79fb      	ldrb	r3, [r7, #7]
 80126e2:	2b01      	cmp	r3, #1
 80126e4:	d001      	beq.n	80126ea <f_mount+0x6a>
 80126e6:	2300      	movs	r3, #0
 80126e8:	e00a      	b.n	8012700 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80126ea:	f107 010c 	add.w	r1, r7, #12
 80126ee:	f107 0308 	add.w	r3, r7, #8
 80126f2:	2200      	movs	r2, #0
 80126f4:	4618      	mov	r0, r3
 80126f6:	f7ff fd41 	bl	801217c <find_volume>
 80126fa:	4603      	mov	r3, r0
 80126fc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80126fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8012700:	4618      	mov	r0, r3
 8012702:	3720      	adds	r7, #32
 8012704:	46bd      	mov	sp, r7
 8012706:	bd80      	pop	{r7, pc}
 8012708:	200017b8 	.word	0x200017b8

0801270c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801270c:	b580      	push	{r7, lr}
 801270e:	b098      	sub	sp, #96	@ 0x60
 8012710:	af00      	add	r7, sp, #0
 8012712:	60f8      	str	r0, [r7, #12]
 8012714:	60b9      	str	r1, [r7, #8]
 8012716:	4613      	mov	r3, r2
 8012718:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d101      	bne.n	8012724 <f_open+0x18>
 8012720:	2309      	movs	r3, #9
 8012722:	e1a9      	b.n	8012a78 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012724:	79fb      	ldrb	r3, [r7, #7]
 8012726:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801272a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801272c:	79fa      	ldrb	r2, [r7, #7]
 801272e:	f107 0110 	add.w	r1, r7, #16
 8012732:	f107 0308 	add.w	r3, r7, #8
 8012736:	4618      	mov	r0, r3
 8012738:	f7ff fd20 	bl	801217c <find_volume>
 801273c:	4603      	mov	r3, r0
 801273e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8012742:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012746:	2b00      	cmp	r3, #0
 8012748:	f040 818d 	bne.w	8012a66 <f_open+0x35a>
		dj.obj.fs = fs;
 801274c:	693b      	ldr	r3, [r7, #16]
 801274e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012750:	68ba      	ldr	r2, [r7, #8]
 8012752:	f107 0314 	add.w	r3, r7, #20
 8012756:	4611      	mov	r1, r2
 8012758:	4618      	mov	r0, r3
 801275a:	f7ff fc03 	bl	8011f64 <follow_path>
 801275e:	4603      	mov	r3, r0
 8012760:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012764:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012768:	2b00      	cmp	r3, #0
 801276a:	d118      	bne.n	801279e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801276c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012770:	b25b      	sxtb	r3, r3
 8012772:	2b00      	cmp	r3, #0
 8012774:	da03      	bge.n	801277e <f_open+0x72>
				res = FR_INVALID_NAME;
 8012776:	2306      	movs	r3, #6
 8012778:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801277c:	e00f      	b.n	801279e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801277e:	79fb      	ldrb	r3, [r7, #7]
 8012780:	2b01      	cmp	r3, #1
 8012782:	bf8c      	ite	hi
 8012784:	2301      	movhi	r3, #1
 8012786:	2300      	movls	r3, #0
 8012788:	b2db      	uxtb	r3, r3
 801278a:	461a      	mov	r2, r3
 801278c:	f107 0314 	add.w	r3, r7, #20
 8012790:	4611      	mov	r1, r2
 8012792:	4618      	mov	r0, r3
 8012794:	f7fe fbd8 	bl	8010f48 <chk_lock>
 8012798:	4603      	mov	r3, r0
 801279a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801279e:	79fb      	ldrb	r3, [r7, #7]
 80127a0:	f003 031c 	and.w	r3, r3, #28
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d07f      	beq.n	80128a8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80127a8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d017      	beq.n	80127e0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80127b0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80127b4:	2b04      	cmp	r3, #4
 80127b6:	d10e      	bne.n	80127d6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80127b8:	f7fe fc22 	bl	8011000 <enq_lock>
 80127bc:	4603      	mov	r3, r0
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d006      	beq.n	80127d0 <f_open+0xc4>
 80127c2:	f107 0314 	add.w	r3, r7, #20
 80127c6:	4618      	mov	r0, r3
 80127c8:	f7ff fb06 	bl	8011dd8 <dir_register>
 80127cc:	4603      	mov	r3, r0
 80127ce:	e000      	b.n	80127d2 <f_open+0xc6>
 80127d0:	2312      	movs	r3, #18
 80127d2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80127d6:	79fb      	ldrb	r3, [r7, #7]
 80127d8:	f043 0308 	orr.w	r3, r3, #8
 80127dc:	71fb      	strb	r3, [r7, #7]
 80127de:	e010      	b.n	8012802 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80127e0:	7ebb      	ldrb	r3, [r7, #26]
 80127e2:	f003 0311 	and.w	r3, r3, #17
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d003      	beq.n	80127f2 <f_open+0xe6>
					res = FR_DENIED;
 80127ea:	2307      	movs	r3, #7
 80127ec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80127f0:	e007      	b.n	8012802 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80127f2:	79fb      	ldrb	r3, [r7, #7]
 80127f4:	f003 0304 	and.w	r3, r3, #4
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d002      	beq.n	8012802 <f_open+0xf6>
 80127fc:	2308      	movs	r3, #8
 80127fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012802:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012806:	2b00      	cmp	r3, #0
 8012808:	d168      	bne.n	80128dc <f_open+0x1d0>
 801280a:	79fb      	ldrb	r3, [r7, #7]
 801280c:	f003 0308 	and.w	r3, r3, #8
 8012810:	2b00      	cmp	r3, #0
 8012812:	d063      	beq.n	80128dc <f_open+0x1d0>
				dw = GET_FATTIME();
 8012814:	f7fd fed6 	bl	80105c4 <get_fattime>
 8012818:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801281a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801281c:	330e      	adds	r3, #14
 801281e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012820:	4618      	mov	r0, r3
 8012822:	f7fe fae6 	bl	8010df2 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012828:	3316      	adds	r3, #22
 801282a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801282c:	4618      	mov	r0, r3
 801282e:	f7fe fae0 	bl	8010df2 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012834:	330b      	adds	r3, #11
 8012836:	2220      	movs	r2, #32
 8012838:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801283a:	693b      	ldr	r3, [r7, #16]
 801283c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801283e:	4611      	mov	r1, r2
 8012840:	4618      	mov	r0, r3
 8012842:	f7ff fa35 	bl	8011cb0 <ld_clust>
 8012846:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012848:	693b      	ldr	r3, [r7, #16]
 801284a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801284c:	2200      	movs	r2, #0
 801284e:	4618      	mov	r0, r3
 8012850:	f7ff fa4d 	bl	8011cee <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012856:	331c      	adds	r3, #28
 8012858:	2100      	movs	r1, #0
 801285a:	4618      	mov	r0, r3
 801285c:	f7fe fac9 	bl	8010df2 <st_dword>
					fs->wflag = 1;
 8012860:	693b      	ldr	r3, [r7, #16]
 8012862:	2201      	movs	r2, #1
 8012864:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012866:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012868:	2b00      	cmp	r3, #0
 801286a:	d037      	beq.n	80128dc <f_open+0x1d0>
						dw = fs->winsect;
 801286c:	693b      	ldr	r3, [r7, #16]
 801286e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012870:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8012872:	f107 0314 	add.w	r3, r7, #20
 8012876:	2200      	movs	r2, #0
 8012878:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801287a:	4618      	mov	r0, r3
 801287c:	f7fe ff60 	bl	8011740 <remove_chain>
 8012880:	4603      	mov	r3, r0
 8012882:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8012886:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801288a:	2b00      	cmp	r3, #0
 801288c:	d126      	bne.n	80128dc <f_open+0x1d0>
							res = move_window(fs, dw);
 801288e:	693b      	ldr	r3, [r7, #16]
 8012890:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012892:	4618      	mov	r0, r3
 8012894:	f7fe fd08 	bl	80112a8 <move_window>
 8012898:	4603      	mov	r3, r0
 801289a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801289e:	693b      	ldr	r3, [r7, #16]
 80128a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80128a2:	3a01      	subs	r2, #1
 80128a4:	60da      	str	r2, [r3, #12]
 80128a6:	e019      	b.n	80128dc <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80128a8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d115      	bne.n	80128dc <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80128b0:	7ebb      	ldrb	r3, [r7, #26]
 80128b2:	f003 0310 	and.w	r3, r3, #16
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d003      	beq.n	80128c2 <f_open+0x1b6>
					res = FR_NO_FILE;
 80128ba:	2304      	movs	r3, #4
 80128bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80128c0:	e00c      	b.n	80128dc <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80128c2:	79fb      	ldrb	r3, [r7, #7]
 80128c4:	f003 0302 	and.w	r3, r3, #2
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d007      	beq.n	80128dc <f_open+0x1d0>
 80128cc:	7ebb      	ldrb	r3, [r7, #26]
 80128ce:	f003 0301 	and.w	r3, r3, #1
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d002      	beq.n	80128dc <f_open+0x1d0>
						res = FR_DENIED;
 80128d6:	2307      	movs	r3, #7
 80128d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80128dc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d126      	bne.n	8012932 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80128e4:	79fb      	ldrb	r3, [r7, #7]
 80128e6:	f003 0308 	and.w	r3, r3, #8
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d003      	beq.n	80128f6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80128ee:	79fb      	ldrb	r3, [r7, #7]
 80128f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80128f4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80128f6:	693b      	ldr	r3, [r7, #16]
 80128f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80128fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012904:	79fb      	ldrb	r3, [r7, #7]
 8012906:	2b01      	cmp	r3, #1
 8012908:	bf8c      	ite	hi
 801290a:	2301      	movhi	r3, #1
 801290c:	2300      	movls	r3, #0
 801290e:	b2db      	uxtb	r3, r3
 8012910:	461a      	mov	r2, r3
 8012912:	f107 0314 	add.w	r3, r7, #20
 8012916:	4611      	mov	r1, r2
 8012918:	4618      	mov	r0, r3
 801291a:	f7fe fb93 	bl	8011044 <inc_lock>
 801291e:	4602      	mov	r2, r0
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	691b      	ldr	r3, [r3, #16]
 8012928:	2b00      	cmp	r3, #0
 801292a:	d102      	bne.n	8012932 <f_open+0x226>
 801292c:	2302      	movs	r3, #2
 801292e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012932:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012936:	2b00      	cmp	r3, #0
 8012938:	f040 8095 	bne.w	8012a66 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801293c:	693b      	ldr	r3, [r7, #16]
 801293e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012940:	4611      	mov	r1, r2
 8012942:	4618      	mov	r0, r3
 8012944:	f7ff f9b4 	bl	8011cb0 <ld_clust>
 8012948:	4602      	mov	r2, r0
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801294e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012950:	331c      	adds	r3, #28
 8012952:	4618      	mov	r0, r3
 8012954:	f7fe fa0f 	bl	8010d76 <ld_dword>
 8012958:	4602      	mov	r2, r0
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	2200      	movs	r2, #0
 8012962:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012964:	693a      	ldr	r2, [r7, #16]
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801296a:	693b      	ldr	r3, [r7, #16]
 801296c:	88da      	ldrh	r2, [r3, #6]
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	79fa      	ldrb	r2, [r7, #7]
 8012976:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	2200      	movs	r2, #0
 801297c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	2200      	movs	r2, #0
 8012982:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	2200      	movs	r2, #0
 8012988:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	3330      	adds	r3, #48	@ 0x30
 801298e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012992:	2100      	movs	r1, #0
 8012994:	4618      	mov	r0, r3
 8012996:	f7fe fa79 	bl	8010e8c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801299a:	79fb      	ldrb	r3, [r7, #7]
 801299c:	f003 0320 	and.w	r3, r3, #32
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d060      	beq.n	8012a66 <f_open+0x35a>
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	68db      	ldr	r3, [r3, #12]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d05c      	beq.n	8012a66 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	68da      	ldr	r2, [r3, #12]
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80129b4:	693b      	ldr	r3, [r7, #16]
 80129b6:	895b      	ldrh	r3, [r3, #10]
 80129b8:	025b      	lsls	r3, r3, #9
 80129ba:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	689b      	ldr	r3, [r3, #8]
 80129c0:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	68db      	ldr	r3, [r3, #12]
 80129c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80129c8:	e016      	b.n	80129f8 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80129ce:	4618      	mov	r0, r3
 80129d0:	f7fe fd25 	bl	801141e <get_fat>
 80129d4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80129d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80129d8:	2b01      	cmp	r3, #1
 80129da:	d802      	bhi.n	80129e2 <f_open+0x2d6>
 80129dc:	2302      	movs	r3, #2
 80129de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80129e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80129e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129e8:	d102      	bne.n	80129f0 <f_open+0x2e4>
 80129ea:	2301      	movs	r3, #1
 80129ec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80129f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80129f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80129f4:	1ad3      	subs	r3, r2, r3
 80129f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80129f8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d103      	bne.n	8012a08 <f_open+0x2fc>
 8012a00:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012a02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012a04:	429a      	cmp	r2, r3
 8012a06:	d8e0      	bhi.n	80129ca <f_open+0x2be>
				}
				fp->clust = clst;
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012a0c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012a0e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d127      	bne.n	8012a66 <f_open+0x35a>
 8012a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d022      	beq.n	8012a66 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012a20:	693b      	ldr	r3, [r7, #16]
 8012a22:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8012a24:	4618      	mov	r0, r3
 8012a26:	f7fe fcdb 	bl	80113e0 <clust2sect>
 8012a2a:	6478      	str	r0, [r7, #68]	@ 0x44
 8012a2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d103      	bne.n	8012a3a <f_open+0x32e>
						res = FR_INT_ERR;
 8012a32:	2302      	movs	r3, #2
 8012a34:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8012a38:	e015      	b.n	8012a66 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012a3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a3c:	0a5a      	lsrs	r2, r3, #9
 8012a3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012a40:	441a      	add	r2, r3
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012a46:	693b      	ldr	r3, [r7, #16]
 8012a48:	7858      	ldrb	r0, [r3, #1]
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	6a1a      	ldr	r2, [r3, #32]
 8012a54:	2301      	movs	r3, #1
 8012a56:	f7fe f917 	bl	8010c88 <disk_read>
 8012a5a:	4603      	mov	r3, r0
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d002      	beq.n	8012a66 <f_open+0x35a>
 8012a60:	2301      	movs	r3, #1
 8012a62:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012a66:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d002      	beq.n	8012a74 <f_open+0x368>
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	2200      	movs	r2, #0
 8012a72:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012a74:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8012a78:	4618      	mov	r0, r3
 8012a7a:	3760      	adds	r7, #96	@ 0x60
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	bd80      	pop	{r7, pc}

08012a80 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b08c      	sub	sp, #48	@ 0x30
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	60f8      	str	r0, [r7, #12]
 8012a88:	60b9      	str	r1, [r7, #8]
 8012a8a:	607a      	str	r2, [r7, #4]
 8012a8c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8012a8e:	68bb      	ldr	r3, [r7, #8]
 8012a90:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8012a92:	683b      	ldr	r3, [r7, #0]
 8012a94:	2200      	movs	r2, #0
 8012a96:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	f107 0210 	add.w	r2, r7, #16
 8012a9e:	4611      	mov	r1, r2
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	f7ff fdb7 	bl	8012614 <validate>
 8012aa6:	4603      	mov	r3, r0
 8012aa8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012aac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d107      	bne.n	8012ac4 <f_write+0x44>
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	7d5b      	ldrb	r3, [r3, #21]
 8012ab8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8012abc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d002      	beq.n	8012aca <f_write+0x4a>
 8012ac4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012ac8:	e14b      	b.n	8012d62 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	7d1b      	ldrb	r3, [r3, #20]
 8012ace:	f003 0302 	and.w	r3, r3, #2
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d101      	bne.n	8012ada <f_write+0x5a>
 8012ad6:	2307      	movs	r3, #7
 8012ad8:	e143      	b.n	8012d62 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	699a      	ldr	r2, [r3, #24]
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	441a      	add	r2, r3
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	699b      	ldr	r3, [r3, #24]
 8012ae6:	429a      	cmp	r2, r3
 8012ae8:	f080 812d 	bcs.w	8012d46 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	699b      	ldr	r3, [r3, #24]
 8012af0:	43db      	mvns	r3, r3
 8012af2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8012af4:	e127      	b.n	8012d46 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	699b      	ldr	r3, [r3, #24]
 8012afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	f040 80e3 	bne.w	8012cca <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	699b      	ldr	r3, [r3, #24]
 8012b08:	0a5b      	lsrs	r3, r3, #9
 8012b0a:	693a      	ldr	r2, [r7, #16]
 8012b0c:	8952      	ldrh	r2, [r2, #10]
 8012b0e:	3a01      	subs	r2, #1
 8012b10:	4013      	ands	r3, r2
 8012b12:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8012b14:	69bb      	ldr	r3, [r7, #24]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d143      	bne.n	8012ba2 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	699b      	ldr	r3, [r3, #24]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d10c      	bne.n	8012b3c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	689b      	ldr	r3, [r3, #8]
 8012b26:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8012b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d11a      	bne.n	8012b64 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	2100      	movs	r1, #0
 8012b32:	4618      	mov	r0, r3
 8012b34:	f7fe fe69 	bl	801180a <create_chain>
 8012b38:	62b8      	str	r0, [r7, #40]	@ 0x28
 8012b3a:	e013      	b.n	8012b64 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d007      	beq.n	8012b54 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	699b      	ldr	r3, [r3, #24]
 8012b48:	4619      	mov	r1, r3
 8012b4a:	68f8      	ldr	r0, [r7, #12]
 8012b4c:	f7fe fef5 	bl	801193a <clmt_clust>
 8012b50:	62b8      	str	r0, [r7, #40]	@ 0x28
 8012b52:	e007      	b.n	8012b64 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8012b54:	68fa      	ldr	r2, [r7, #12]
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	69db      	ldr	r3, [r3, #28]
 8012b5a:	4619      	mov	r1, r3
 8012b5c:	4610      	mov	r0, r2
 8012b5e:	f7fe fe54 	bl	801180a <create_chain>
 8012b62:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	f000 80f2 	beq.w	8012d50 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b6e:	2b01      	cmp	r3, #1
 8012b70:	d104      	bne.n	8012b7c <f_write+0xfc>
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	2202      	movs	r2, #2
 8012b76:	755a      	strb	r2, [r3, #21]
 8012b78:	2302      	movs	r3, #2
 8012b7a:	e0f2      	b.n	8012d62 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b82:	d104      	bne.n	8012b8e <f_write+0x10e>
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	2201      	movs	r2, #1
 8012b88:	755a      	strb	r2, [r3, #21]
 8012b8a:	2301      	movs	r3, #1
 8012b8c:	e0e9      	b.n	8012d62 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012b92:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	689b      	ldr	r3, [r3, #8]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d102      	bne.n	8012ba2 <f_write+0x122>
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012ba0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	7d1b      	ldrb	r3, [r3, #20]
 8012ba6:	b25b      	sxtb	r3, r3
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	da18      	bge.n	8012bde <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012bac:	693b      	ldr	r3, [r7, #16]
 8012bae:	7858      	ldrb	r0, [r3, #1]
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	6a1a      	ldr	r2, [r3, #32]
 8012bba:	2301      	movs	r3, #1
 8012bbc:	f7fe f884 	bl	8010cc8 <disk_write>
 8012bc0:	4603      	mov	r3, r0
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d004      	beq.n	8012bd0 <f_write+0x150>
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	2201      	movs	r2, #1
 8012bca:	755a      	strb	r2, [r3, #21]
 8012bcc:	2301      	movs	r3, #1
 8012bce:	e0c8      	b.n	8012d62 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	7d1b      	ldrb	r3, [r3, #20]
 8012bd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012bd8:	b2da      	uxtb	r2, r3
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012bde:	693a      	ldr	r2, [r7, #16]
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	69db      	ldr	r3, [r3, #28]
 8012be4:	4619      	mov	r1, r3
 8012be6:	4610      	mov	r0, r2
 8012be8:	f7fe fbfa 	bl	80113e0 <clust2sect>
 8012bec:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012bee:	697b      	ldr	r3, [r7, #20]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d104      	bne.n	8012bfe <f_write+0x17e>
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	2202      	movs	r2, #2
 8012bf8:	755a      	strb	r2, [r3, #21]
 8012bfa:	2302      	movs	r3, #2
 8012bfc:	e0b1      	b.n	8012d62 <f_write+0x2e2>
			sect += csect;
 8012bfe:	697a      	ldr	r2, [r7, #20]
 8012c00:	69bb      	ldr	r3, [r7, #24]
 8012c02:	4413      	add	r3, r2
 8012c04:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	0a5b      	lsrs	r3, r3, #9
 8012c0a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8012c0c:	6a3b      	ldr	r3, [r7, #32]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d03c      	beq.n	8012c8c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012c12:	69ba      	ldr	r2, [r7, #24]
 8012c14:	6a3b      	ldr	r3, [r7, #32]
 8012c16:	4413      	add	r3, r2
 8012c18:	693a      	ldr	r2, [r7, #16]
 8012c1a:	8952      	ldrh	r2, [r2, #10]
 8012c1c:	4293      	cmp	r3, r2
 8012c1e:	d905      	bls.n	8012c2c <f_write+0x1ac>
					cc = fs->csize - csect;
 8012c20:	693b      	ldr	r3, [r7, #16]
 8012c22:	895b      	ldrh	r3, [r3, #10]
 8012c24:	461a      	mov	r2, r3
 8012c26:	69bb      	ldr	r3, [r7, #24]
 8012c28:	1ad3      	subs	r3, r2, r3
 8012c2a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012c2c:	693b      	ldr	r3, [r7, #16]
 8012c2e:	7858      	ldrb	r0, [r3, #1]
 8012c30:	6a3b      	ldr	r3, [r7, #32]
 8012c32:	697a      	ldr	r2, [r7, #20]
 8012c34:	69f9      	ldr	r1, [r7, #28]
 8012c36:	f7fe f847 	bl	8010cc8 <disk_write>
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d004      	beq.n	8012c4a <f_write+0x1ca>
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	2201      	movs	r2, #1
 8012c44:	755a      	strb	r2, [r3, #21]
 8012c46:	2301      	movs	r3, #1
 8012c48:	e08b      	b.n	8012d62 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	6a1a      	ldr	r2, [r3, #32]
 8012c4e:	697b      	ldr	r3, [r7, #20]
 8012c50:	1ad3      	subs	r3, r2, r3
 8012c52:	6a3a      	ldr	r2, [r7, #32]
 8012c54:	429a      	cmp	r2, r3
 8012c56:	d915      	bls.n	8012c84 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	6a1a      	ldr	r2, [r3, #32]
 8012c62:	697b      	ldr	r3, [r7, #20]
 8012c64:	1ad3      	subs	r3, r2, r3
 8012c66:	025b      	lsls	r3, r3, #9
 8012c68:	69fa      	ldr	r2, [r7, #28]
 8012c6a:	4413      	add	r3, r2
 8012c6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012c70:	4619      	mov	r1, r3
 8012c72:	f7fe f8ea 	bl	8010e4a <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	7d1b      	ldrb	r3, [r3, #20]
 8012c7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012c7e:	b2da      	uxtb	r2, r3
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8012c84:	6a3b      	ldr	r3, [r7, #32]
 8012c86:	025b      	lsls	r3, r3, #9
 8012c88:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8012c8a:	e03f      	b.n	8012d0c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	6a1b      	ldr	r3, [r3, #32]
 8012c90:	697a      	ldr	r2, [r7, #20]
 8012c92:	429a      	cmp	r2, r3
 8012c94:	d016      	beq.n	8012cc4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	699a      	ldr	r2, [r3, #24]
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012c9e:	429a      	cmp	r2, r3
 8012ca0:	d210      	bcs.n	8012cc4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8012ca2:	693b      	ldr	r3, [r7, #16]
 8012ca4:	7858      	ldrb	r0, [r3, #1]
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012cac:	2301      	movs	r3, #1
 8012cae:	697a      	ldr	r2, [r7, #20]
 8012cb0:	f7fd ffea 	bl	8010c88 <disk_read>
 8012cb4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d004      	beq.n	8012cc4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	2201      	movs	r2, #1
 8012cbe:	755a      	strb	r2, [r3, #21]
 8012cc0:	2301      	movs	r3, #1
 8012cc2:	e04e      	b.n	8012d62 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	697a      	ldr	r2, [r7, #20]
 8012cc8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	699b      	ldr	r3, [r3, #24]
 8012cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012cd2:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8012cd6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8012cd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	429a      	cmp	r2, r3
 8012cde:	d901      	bls.n	8012ce4 <f_write+0x264>
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	699b      	ldr	r3, [r3, #24]
 8012cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012cf2:	4413      	add	r3, r2
 8012cf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012cf6:	69f9      	ldr	r1, [r7, #28]
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	f7fe f8a6 	bl	8010e4a <mem_cpy>
		fp->flag |= FA_DIRTY;
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	7d1b      	ldrb	r3, [r3, #20]
 8012d02:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8012d06:	b2da      	uxtb	r2, r3
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8012d0c:	69fa      	ldr	r2, [r7, #28]
 8012d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d10:	4413      	add	r3, r2
 8012d12:	61fb      	str	r3, [r7, #28]
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	699a      	ldr	r2, [r3, #24]
 8012d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d1a:	441a      	add	r2, r3
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	619a      	str	r2, [r3, #24]
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	68da      	ldr	r2, [r3, #12]
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	699b      	ldr	r3, [r3, #24]
 8012d28:	429a      	cmp	r2, r3
 8012d2a:	bf38      	it	cc
 8012d2c:	461a      	movcc	r2, r3
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	60da      	str	r2, [r3, #12]
 8012d32:	683b      	ldr	r3, [r7, #0]
 8012d34:	681a      	ldr	r2, [r3, #0]
 8012d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d38:	441a      	add	r2, r3
 8012d3a:	683b      	ldr	r3, [r7, #0]
 8012d3c:	601a      	str	r2, [r3, #0]
 8012d3e:	687a      	ldr	r2, [r7, #4]
 8012d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d42:	1ad3      	subs	r3, r2, r3
 8012d44:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	f47f aed4 	bne.w	8012af6 <f_write+0x76>
 8012d4e:	e000      	b.n	8012d52 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012d50:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	7d1b      	ldrb	r3, [r3, #20]
 8012d56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012d5a:	b2da      	uxtb	r2, r3
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8012d60:	2300      	movs	r3, #0
}
 8012d62:	4618      	mov	r0, r3
 8012d64:	3730      	adds	r7, #48	@ 0x30
 8012d66:	46bd      	mov	sp, r7
 8012d68:	bd80      	pop	{r7, pc}

08012d6a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012d6a:	b580      	push	{r7, lr}
 8012d6c:	b086      	sub	sp, #24
 8012d6e:	af00      	add	r7, sp, #0
 8012d70:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	f107 0208 	add.w	r2, r7, #8
 8012d78:	4611      	mov	r1, r2
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	f7ff fc4a 	bl	8012614 <validate>
 8012d80:	4603      	mov	r3, r0
 8012d82:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012d84:	7dfb      	ldrb	r3, [r7, #23]
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d168      	bne.n	8012e5c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	7d1b      	ldrb	r3, [r3, #20]
 8012d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d062      	beq.n	8012e5c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	7d1b      	ldrb	r3, [r3, #20]
 8012d9a:	b25b      	sxtb	r3, r3
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	da15      	bge.n	8012dcc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012da0:	68bb      	ldr	r3, [r7, #8]
 8012da2:	7858      	ldrb	r0, [r3, #1]
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	6a1a      	ldr	r2, [r3, #32]
 8012dae:	2301      	movs	r3, #1
 8012db0:	f7fd ff8a 	bl	8010cc8 <disk_write>
 8012db4:	4603      	mov	r3, r0
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d001      	beq.n	8012dbe <f_sync+0x54>
 8012dba:	2301      	movs	r3, #1
 8012dbc:	e04f      	b.n	8012e5e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	7d1b      	ldrb	r3, [r3, #20]
 8012dc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012dc6:	b2da      	uxtb	r2, r3
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8012dcc:	f7fd fbfa 	bl	80105c4 <get_fattime>
 8012dd0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8012dd2:	68ba      	ldr	r2, [r7, #8]
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012dd8:	4619      	mov	r1, r3
 8012dda:	4610      	mov	r0, r2
 8012ddc:	f7fe fa64 	bl	80112a8 <move_window>
 8012de0:	4603      	mov	r3, r0
 8012de2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8012de4:	7dfb      	ldrb	r3, [r7, #23]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d138      	bne.n	8012e5c <f_sync+0xf2>
					dir = fp->dir_ptr;
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012dee:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	330b      	adds	r3, #11
 8012df4:	781a      	ldrb	r2, [r3, #0]
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	330b      	adds	r3, #11
 8012dfa:	f042 0220 	orr.w	r2, r2, #32
 8012dfe:	b2d2      	uxtb	r2, r2
 8012e00:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	6818      	ldr	r0, [r3, #0]
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	689b      	ldr	r3, [r3, #8]
 8012e0a:	461a      	mov	r2, r3
 8012e0c:	68f9      	ldr	r1, [r7, #12]
 8012e0e:	f7fe ff6e 	bl	8011cee <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	f103 021c 	add.w	r2, r3, #28
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	68db      	ldr	r3, [r3, #12]
 8012e1c:	4619      	mov	r1, r3
 8012e1e:	4610      	mov	r0, r2
 8012e20:	f7fd ffe7 	bl	8010df2 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	3316      	adds	r3, #22
 8012e28:	6939      	ldr	r1, [r7, #16]
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	f7fd ffe1 	bl	8010df2 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	3312      	adds	r3, #18
 8012e34:	2100      	movs	r1, #0
 8012e36:	4618      	mov	r0, r3
 8012e38:	f7fd ffc0 	bl	8010dbc <st_word>
					fs->wflag = 1;
 8012e3c:	68bb      	ldr	r3, [r7, #8]
 8012e3e:	2201      	movs	r2, #1
 8012e40:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012e42:	68bb      	ldr	r3, [r7, #8]
 8012e44:	4618      	mov	r0, r3
 8012e46:	f7fe fa5d 	bl	8011304 <sync_fs>
 8012e4a:	4603      	mov	r3, r0
 8012e4c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	7d1b      	ldrb	r3, [r3, #20]
 8012e52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012e56:	b2da      	uxtb	r2, r3
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8012e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e5e:	4618      	mov	r0, r3
 8012e60:	3718      	adds	r7, #24
 8012e62:	46bd      	mov	sp, r7
 8012e64:	bd80      	pop	{r7, pc}

08012e66 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8012e66:	b580      	push	{r7, lr}
 8012e68:	b084      	sub	sp, #16
 8012e6a:	af00      	add	r7, sp, #0
 8012e6c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8012e6e:	6878      	ldr	r0, [r7, #4]
 8012e70:	f7ff ff7b 	bl	8012d6a <f_sync>
 8012e74:	4603      	mov	r3, r0
 8012e76:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8012e78:	7bfb      	ldrb	r3, [r7, #15]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d118      	bne.n	8012eb0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	f107 0208 	add.w	r2, r7, #8
 8012e84:	4611      	mov	r1, r2
 8012e86:	4618      	mov	r0, r3
 8012e88:	f7ff fbc4 	bl	8012614 <validate>
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012e90:	7bfb      	ldrb	r3, [r7, #15]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d10c      	bne.n	8012eb0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	691b      	ldr	r3, [r3, #16]
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	f7fe f960 	bl	8011160 <dec_lock>
 8012ea0:	4603      	mov	r3, r0
 8012ea2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8012ea4:	7bfb      	ldrb	r3, [r7, #15]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d102      	bne.n	8012eb0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	2200      	movs	r2, #0
 8012eae:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8012eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	3710      	adds	r7, #16
 8012eb6:	46bd      	mov	sp, r7
 8012eb8:	bd80      	pop	{r7, pc}
	...

08012ebc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012ebc:	b480      	push	{r7}
 8012ebe:	b087      	sub	sp, #28
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	60f8      	str	r0, [r7, #12]
 8012ec4:	60b9      	str	r1, [r7, #8]
 8012ec6:	4613      	mov	r3, r2
 8012ec8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012eca:	2301      	movs	r3, #1
 8012ecc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012ece:	2300      	movs	r3, #0
 8012ed0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012ed2:	4b1f      	ldr	r3, [pc, #124]	@ (8012f50 <FATFS_LinkDriverEx+0x94>)
 8012ed4:	7a5b      	ldrb	r3, [r3, #9]
 8012ed6:	b2db      	uxtb	r3, r3
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d131      	bne.n	8012f40 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012edc:	4b1c      	ldr	r3, [pc, #112]	@ (8012f50 <FATFS_LinkDriverEx+0x94>)
 8012ede:	7a5b      	ldrb	r3, [r3, #9]
 8012ee0:	b2db      	uxtb	r3, r3
 8012ee2:	461a      	mov	r2, r3
 8012ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8012f50 <FATFS_LinkDriverEx+0x94>)
 8012ee6:	2100      	movs	r1, #0
 8012ee8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012eea:	4b19      	ldr	r3, [pc, #100]	@ (8012f50 <FATFS_LinkDriverEx+0x94>)
 8012eec:	7a5b      	ldrb	r3, [r3, #9]
 8012eee:	b2db      	uxtb	r3, r3
 8012ef0:	4a17      	ldr	r2, [pc, #92]	@ (8012f50 <FATFS_LinkDriverEx+0x94>)
 8012ef2:	009b      	lsls	r3, r3, #2
 8012ef4:	4413      	add	r3, r2
 8012ef6:	68fa      	ldr	r2, [r7, #12]
 8012ef8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012efa:	4b15      	ldr	r3, [pc, #84]	@ (8012f50 <FATFS_LinkDriverEx+0x94>)
 8012efc:	7a5b      	ldrb	r3, [r3, #9]
 8012efe:	b2db      	uxtb	r3, r3
 8012f00:	461a      	mov	r2, r3
 8012f02:	4b13      	ldr	r3, [pc, #76]	@ (8012f50 <FATFS_LinkDriverEx+0x94>)
 8012f04:	4413      	add	r3, r2
 8012f06:	79fa      	ldrb	r2, [r7, #7]
 8012f08:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012f0a:	4b11      	ldr	r3, [pc, #68]	@ (8012f50 <FATFS_LinkDriverEx+0x94>)
 8012f0c:	7a5b      	ldrb	r3, [r3, #9]
 8012f0e:	b2db      	uxtb	r3, r3
 8012f10:	1c5a      	adds	r2, r3, #1
 8012f12:	b2d1      	uxtb	r1, r2
 8012f14:	4a0e      	ldr	r2, [pc, #56]	@ (8012f50 <FATFS_LinkDriverEx+0x94>)
 8012f16:	7251      	strb	r1, [r2, #9]
 8012f18:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012f1a:	7dbb      	ldrb	r3, [r7, #22]
 8012f1c:	3330      	adds	r3, #48	@ 0x30
 8012f1e:	b2da      	uxtb	r2, r3
 8012f20:	68bb      	ldr	r3, [r7, #8]
 8012f22:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012f24:	68bb      	ldr	r3, [r7, #8]
 8012f26:	3301      	adds	r3, #1
 8012f28:	223a      	movs	r2, #58	@ 0x3a
 8012f2a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012f2c:	68bb      	ldr	r3, [r7, #8]
 8012f2e:	3302      	adds	r3, #2
 8012f30:	222f      	movs	r2, #47	@ 0x2f
 8012f32:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012f34:	68bb      	ldr	r3, [r7, #8]
 8012f36:	3303      	adds	r3, #3
 8012f38:	2200      	movs	r2, #0
 8012f3a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012f3c:	2300      	movs	r3, #0
 8012f3e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f42:	4618      	mov	r0, r3
 8012f44:	371c      	adds	r7, #28
 8012f46:	46bd      	mov	sp, r7
 8012f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f4c:	4770      	bx	lr
 8012f4e:	bf00      	nop
 8012f50:	200017e0 	.word	0x200017e0

08012f54 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012f54:	b580      	push	{r7, lr}
 8012f56:	b082      	sub	sp, #8
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	6078      	str	r0, [r7, #4]
 8012f5c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012f5e:	2200      	movs	r2, #0
 8012f60:	6839      	ldr	r1, [r7, #0]
 8012f62:	6878      	ldr	r0, [r7, #4]
 8012f64:	f7ff ffaa 	bl	8012ebc <FATFS_LinkDriverEx>
 8012f68:	4603      	mov	r3, r0
}
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	3708      	adds	r7, #8
 8012f6e:	46bd      	mov	sp, r7
 8012f70:	bd80      	pop	{r7, pc}

08012f72 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8012f72:	b480      	push	{r7}
 8012f74:	b085      	sub	sp, #20
 8012f76:	af00      	add	r7, sp, #0
 8012f78:	4603      	mov	r3, r0
 8012f7a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8012f80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012f84:	2b84      	cmp	r3, #132	@ 0x84
 8012f86:	d005      	beq.n	8012f94 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8012f88:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	4413      	add	r3, r2
 8012f90:	3303      	adds	r3, #3
 8012f92:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8012f94:	68fb      	ldr	r3, [r7, #12]
}
 8012f96:	4618      	mov	r0, r3
 8012f98:	3714      	adds	r7, #20
 8012f9a:	46bd      	mov	sp, r7
 8012f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa0:	4770      	bx	lr

08012fa2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8012fa2:	b480      	push	{r7}
 8012fa4:	b083      	sub	sp, #12
 8012fa6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012fa8:	f3ef 8305 	mrs	r3, IPSR
 8012fac:	607b      	str	r3, [r7, #4]
  return(result);
 8012fae:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	bf14      	ite	ne
 8012fb4:	2301      	movne	r3, #1
 8012fb6:	2300      	moveq	r3, #0
 8012fb8:	b2db      	uxtb	r3, r3
}
 8012fba:	4618      	mov	r0, r3
 8012fbc:	370c      	adds	r7, #12
 8012fbe:	46bd      	mov	sp, r7
 8012fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc4:	4770      	bx	lr

08012fc6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8012fc6:	b580      	push	{r7, lr}
 8012fc8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012fca:	f000 ffad 	bl	8013f28 <vTaskStartScheduler>
  
  return osOK;
 8012fce:	2300      	movs	r3, #0
}
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	bd80      	pop	{r7, pc}

08012fd4 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8012fd8:	f001 fc0e 	bl	80147f8 <xTaskGetSchedulerState>
 8012fdc:	4603      	mov	r3, r0
 8012fde:	2b01      	cmp	r3, #1
 8012fe0:	d101      	bne.n	8012fe6 <osKernelRunning+0x12>
    return 0;
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	e000      	b.n	8012fe8 <osKernelRunning+0x14>
  else
    return 1;
 8012fe6:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8012fe8:	4618      	mov	r0, r3
 8012fea:	bd80      	pop	{r7, pc}

08012fec <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8012fec:	b580      	push	{r7, lr}
 8012fee:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8012ff0:	f7ff ffd7 	bl	8012fa2 <inHandlerMode>
 8012ff4:	4603      	mov	r3, r0
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d003      	beq.n	8013002 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8012ffa:	f001 f8b9 	bl	8014170 <xTaskGetTickCountFromISR>
 8012ffe:	4603      	mov	r3, r0
 8013000:	e002      	b.n	8013008 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8013002:	f001 f8a5 	bl	8014150 <xTaskGetTickCount>
 8013006:	4603      	mov	r3, r0
  }
}
 8013008:	4618      	mov	r0, r3
 801300a:	bd80      	pop	{r7, pc}

0801300c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801300c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801300e:	b089      	sub	sp, #36	@ 0x24
 8013010:	af04      	add	r7, sp, #16
 8013012:	6078      	str	r0, [r7, #4]
 8013014:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	695b      	ldr	r3, [r3, #20]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d020      	beq.n	8013060 <osThreadCreate+0x54>
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	699b      	ldr	r3, [r3, #24]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d01c      	beq.n	8013060 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	685c      	ldr	r4, [r3, #4]
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	691e      	ldr	r6, [r3, #16]
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013038:	4618      	mov	r0, r3
 801303a:	f7ff ff9a 	bl	8012f72 <makeFreeRtosPriority>
 801303e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	695b      	ldr	r3, [r3, #20]
 8013044:	687a      	ldr	r2, [r7, #4]
 8013046:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013048:	9202      	str	r2, [sp, #8]
 801304a:	9301      	str	r3, [sp, #4]
 801304c:	9100      	str	r1, [sp, #0]
 801304e:	683b      	ldr	r3, [r7, #0]
 8013050:	4632      	mov	r2, r6
 8013052:	4629      	mov	r1, r5
 8013054:	4620      	mov	r0, r4
 8013056:	f000 fd84 	bl	8013b62 <xTaskCreateStatic>
 801305a:	4603      	mov	r3, r0
 801305c:	60fb      	str	r3, [r7, #12]
 801305e:	e01c      	b.n	801309a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	685c      	ldr	r4, [r3, #4]
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801306c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013074:	4618      	mov	r0, r3
 8013076:	f7ff ff7c 	bl	8012f72 <makeFreeRtosPriority>
 801307a:	4602      	mov	r2, r0
 801307c:	f107 030c 	add.w	r3, r7, #12
 8013080:	9301      	str	r3, [sp, #4]
 8013082:	9200      	str	r2, [sp, #0]
 8013084:	683b      	ldr	r3, [r7, #0]
 8013086:	4632      	mov	r2, r6
 8013088:	4629      	mov	r1, r5
 801308a:	4620      	mov	r0, r4
 801308c:	f000 fdcf 	bl	8013c2e <xTaskCreate>
 8013090:	4603      	mov	r3, r0
 8013092:	2b01      	cmp	r3, #1
 8013094:	d001      	beq.n	801309a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8013096:	2300      	movs	r3, #0
 8013098:	e000      	b.n	801309c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801309a:	68fb      	ldr	r3, [r7, #12]
}
 801309c:	4618      	mov	r0, r3
 801309e:	3714      	adds	r7, #20
 80130a0:	46bd      	mov	sp, r7
 80130a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080130a4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80130a4:	b580      	push	{r7, lr}
 80130a6:	b084      	sub	sp, #16
 80130a8:	af00      	add	r7, sp, #0
 80130aa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d001      	beq.n	80130ba <osDelay+0x16>
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	e000      	b.n	80130bc <osDelay+0x18>
 80130ba:	2301      	movs	r3, #1
 80130bc:	4618      	mov	r0, r3
 80130be:	f000 fefb 	bl	8013eb8 <vTaskDelay>
  
  return osOK;
 80130c2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80130c4:	4618      	mov	r0, r3
 80130c6:	3710      	adds	r7, #16
 80130c8:	46bd      	mov	sp, r7
 80130ca:	bd80      	pop	{r7, pc}

080130cc <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80130cc:	b590      	push	{r4, r7, lr}
 80130ce:	b085      	sub	sp, #20
 80130d0:	af02      	add	r7, sp, #8
 80130d2:	6078      	str	r0, [r7, #4]
 80130d4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	689b      	ldr	r3, [r3, #8]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d011      	beq.n	8013102 <osMessageCreate+0x36>
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	68db      	ldr	r3, [r3, #12]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d00d      	beq.n	8013102 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	6818      	ldr	r0, [r3, #0]
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	6859      	ldr	r1, [r3, #4]
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	689a      	ldr	r2, [r3, #8]
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	68db      	ldr	r3, [r3, #12]
 80130f6:	2400      	movs	r4, #0
 80130f8:	9400      	str	r4, [sp, #0]
 80130fa:	f000 f985 	bl	8013408 <xQueueGenericCreateStatic>
 80130fe:	4603      	mov	r3, r0
 8013100:	e008      	b.n	8013114 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	6818      	ldr	r0, [r3, #0]
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	685b      	ldr	r3, [r3, #4]
 801310a:	2200      	movs	r2, #0
 801310c:	4619      	mov	r1, r3
 801310e:	f000 fa02 	bl	8013516 <xQueueGenericCreate>
 8013112:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8013114:	4618      	mov	r0, r3
 8013116:	370c      	adds	r7, #12
 8013118:	46bd      	mov	sp, r7
 801311a:	bd90      	pop	{r4, r7, pc}

0801311c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 801311c:	b580      	push	{r7, lr}
 801311e:	b086      	sub	sp, #24
 8013120:	af00      	add	r7, sp, #0
 8013122:	60f8      	str	r0, [r7, #12]
 8013124:	60b9      	str	r1, [r7, #8]
 8013126:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8013128:	2300      	movs	r3, #0
 801312a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8013130:	697b      	ldr	r3, [r7, #20]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d101      	bne.n	801313a <osMessagePut+0x1e>
    ticks = 1;
 8013136:	2301      	movs	r3, #1
 8013138:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 801313a:	f7ff ff32 	bl	8012fa2 <inHandlerMode>
 801313e:	4603      	mov	r3, r0
 8013140:	2b00      	cmp	r3, #0
 8013142:	d018      	beq.n	8013176 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8013144:	f107 0210 	add.w	r2, r7, #16
 8013148:	f107 0108 	add.w	r1, r7, #8
 801314c:	2300      	movs	r3, #0
 801314e:	68f8      	ldr	r0, [r7, #12]
 8013150:	f000 fb4e 	bl	80137f0 <xQueueGenericSendFromISR>
 8013154:	4603      	mov	r3, r0
 8013156:	2b01      	cmp	r3, #1
 8013158:	d001      	beq.n	801315e <osMessagePut+0x42>
      return osErrorOS;
 801315a:	23ff      	movs	r3, #255	@ 0xff
 801315c:	e018      	b.n	8013190 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801315e:	693b      	ldr	r3, [r7, #16]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d014      	beq.n	801318e <osMessagePut+0x72>
 8013164:	4b0c      	ldr	r3, [pc, #48]	@ (8013198 <osMessagePut+0x7c>)
 8013166:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801316a:	601a      	str	r2, [r3, #0]
 801316c:	f3bf 8f4f 	dsb	sy
 8013170:	f3bf 8f6f 	isb	sy
 8013174:	e00b      	b.n	801318e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8013176:	f107 0108 	add.w	r1, r7, #8
 801317a:	2300      	movs	r3, #0
 801317c:	697a      	ldr	r2, [r7, #20]
 801317e:	68f8      	ldr	r0, [r7, #12]
 8013180:	f000 fa2c 	bl	80135dc <xQueueGenericSend>
 8013184:	4603      	mov	r3, r0
 8013186:	2b01      	cmp	r3, #1
 8013188:	d001      	beq.n	801318e <osMessagePut+0x72>
      return osErrorOS;
 801318a:	23ff      	movs	r3, #255	@ 0xff
 801318c:	e000      	b.n	8013190 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 801318e:	2300      	movs	r3, #0
}
 8013190:	4618      	mov	r0, r3
 8013192:	3718      	adds	r7, #24
 8013194:	46bd      	mov	sp, r7
 8013196:	bd80      	pop	{r7, pc}
 8013198:	e000ed04 	.word	0xe000ed04

0801319c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 801319c:	b580      	push	{r7, lr}
 801319e:	b082      	sub	sp, #8
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80131a4:	f7ff fefd 	bl	8012fa2 <inHandlerMode>
 80131a8:	4603      	mov	r3, r0
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d004      	beq.n	80131b8 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80131ae:	6878      	ldr	r0, [r7, #4]
 80131b0:	f000 fbe2 	bl	8013978 <uxQueueMessagesWaitingFromISR>
 80131b4:	4603      	mov	r3, r0
 80131b6:	e003      	b.n	80131c0 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80131b8:	6878      	ldr	r0, [r7, #4]
 80131ba:	f000 fbbc 	bl	8013936 <uxQueueMessagesWaiting>
 80131be:	4603      	mov	r3, r0
  }
}
 80131c0:	4618      	mov	r0, r3
 80131c2:	3708      	adds	r7, #8
 80131c4:	46bd      	mov	sp, r7
 80131c6:	bd80      	pop	{r7, pc}

080131c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80131c8:	b480      	push	{r7}
 80131ca:	b083      	sub	sp, #12
 80131cc:	af00      	add	r7, sp, #0
 80131ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	f103 0208 	add.w	r2, r3, #8
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	f04f 32ff 	mov.w	r2, #4294967295
 80131e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	f103 0208 	add.w	r2, r3, #8
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	f103 0208 	add.w	r2, r3, #8
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	2200      	movs	r2, #0
 80131fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80131fc:	bf00      	nop
 80131fe:	370c      	adds	r7, #12
 8013200:	46bd      	mov	sp, r7
 8013202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013206:	4770      	bx	lr

08013208 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013208:	b480      	push	{r7}
 801320a:	b083      	sub	sp, #12
 801320c:	af00      	add	r7, sp, #0
 801320e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	2200      	movs	r2, #0
 8013214:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013216:	bf00      	nop
 8013218:	370c      	adds	r7, #12
 801321a:	46bd      	mov	sp, r7
 801321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013220:	4770      	bx	lr

08013222 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013222:	b480      	push	{r7}
 8013224:	b085      	sub	sp, #20
 8013226:	af00      	add	r7, sp, #0
 8013228:	6078      	str	r0, [r7, #4]
 801322a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	685b      	ldr	r3, [r3, #4]
 8013230:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013232:	683b      	ldr	r3, [r7, #0]
 8013234:	68fa      	ldr	r2, [r7, #12]
 8013236:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	689a      	ldr	r2, [r3, #8]
 801323c:	683b      	ldr	r3, [r7, #0]
 801323e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	689b      	ldr	r3, [r3, #8]
 8013244:	683a      	ldr	r2, [r7, #0]
 8013246:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	683a      	ldr	r2, [r7, #0]
 801324c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801324e:	683b      	ldr	r3, [r7, #0]
 8013250:	687a      	ldr	r2, [r7, #4]
 8013252:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	1c5a      	adds	r2, r3, #1
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	601a      	str	r2, [r3, #0]
}
 801325e:	bf00      	nop
 8013260:	3714      	adds	r7, #20
 8013262:	46bd      	mov	sp, r7
 8013264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013268:	4770      	bx	lr

0801326a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801326a:	b480      	push	{r7}
 801326c:	b085      	sub	sp, #20
 801326e:	af00      	add	r7, sp, #0
 8013270:	6078      	str	r0, [r7, #4]
 8013272:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013274:	683b      	ldr	r3, [r7, #0]
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801327a:	68bb      	ldr	r3, [r7, #8]
 801327c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013280:	d103      	bne.n	801328a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	691b      	ldr	r3, [r3, #16]
 8013286:	60fb      	str	r3, [r7, #12]
 8013288:	e00c      	b.n	80132a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	3308      	adds	r3, #8
 801328e:	60fb      	str	r3, [r7, #12]
 8013290:	e002      	b.n	8013298 <vListInsert+0x2e>
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	685b      	ldr	r3, [r3, #4]
 8013296:	60fb      	str	r3, [r7, #12]
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	685b      	ldr	r3, [r3, #4]
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	68ba      	ldr	r2, [r7, #8]
 80132a0:	429a      	cmp	r2, r3
 80132a2:	d2f6      	bcs.n	8013292 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	685a      	ldr	r2, [r3, #4]
 80132a8:	683b      	ldr	r3, [r7, #0]
 80132aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80132ac:	683b      	ldr	r3, [r7, #0]
 80132ae:	685b      	ldr	r3, [r3, #4]
 80132b0:	683a      	ldr	r2, [r7, #0]
 80132b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80132b4:	683b      	ldr	r3, [r7, #0]
 80132b6:	68fa      	ldr	r2, [r7, #12]
 80132b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	683a      	ldr	r2, [r7, #0]
 80132be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80132c0:	683b      	ldr	r3, [r7, #0]
 80132c2:	687a      	ldr	r2, [r7, #4]
 80132c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	1c5a      	adds	r2, r3, #1
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	601a      	str	r2, [r3, #0]
}
 80132d0:	bf00      	nop
 80132d2:	3714      	adds	r7, #20
 80132d4:	46bd      	mov	sp, r7
 80132d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132da:	4770      	bx	lr

080132dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80132dc:	b480      	push	{r7}
 80132de:	b085      	sub	sp, #20
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	691b      	ldr	r3, [r3, #16]
 80132e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	685b      	ldr	r3, [r3, #4]
 80132ee:	687a      	ldr	r2, [r7, #4]
 80132f0:	6892      	ldr	r2, [r2, #8]
 80132f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	689b      	ldr	r3, [r3, #8]
 80132f8:	687a      	ldr	r2, [r7, #4]
 80132fa:	6852      	ldr	r2, [r2, #4]
 80132fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	685b      	ldr	r3, [r3, #4]
 8013302:	687a      	ldr	r2, [r7, #4]
 8013304:	429a      	cmp	r2, r3
 8013306:	d103      	bne.n	8013310 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	689a      	ldr	r2, [r3, #8]
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	2200      	movs	r2, #0
 8013314:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	1e5a      	subs	r2, r3, #1
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	681b      	ldr	r3, [r3, #0]
}
 8013324:	4618      	mov	r0, r3
 8013326:	3714      	adds	r7, #20
 8013328:	46bd      	mov	sp, r7
 801332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801332e:	4770      	bx	lr

08013330 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013330:	b580      	push	{r7, lr}
 8013332:	b084      	sub	sp, #16
 8013334:	af00      	add	r7, sp, #0
 8013336:	6078      	str	r0, [r7, #4]
 8013338:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	2b00      	cmp	r3, #0
 8013342:	d10d      	bne.n	8013360 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8013344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013348:	b672      	cpsid	i
 801334a:	f383 8811 	msr	BASEPRI, r3
 801334e:	f3bf 8f6f 	isb	sy
 8013352:	f3bf 8f4f 	dsb	sy
 8013356:	b662      	cpsie	i
 8013358:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801335a:	bf00      	nop
 801335c:	bf00      	nop
 801335e:	e7fd      	b.n	801335c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8013360:	f001 fc6c 	bl	8014c3c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	681a      	ldr	r2, [r3, #0]
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801336c:	68f9      	ldr	r1, [r7, #12]
 801336e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8013370:	fb01 f303 	mul.w	r3, r1, r3
 8013374:	441a      	add	r2, r3
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	2200      	movs	r2, #0
 801337e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	681a      	ldr	r2, [r3, #0]
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	681a      	ldr	r2, [r3, #0]
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013390:	3b01      	subs	r3, #1
 8013392:	68f9      	ldr	r1, [r7, #12]
 8013394:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8013396:	fb01 f303 	mul.w	r3, r1, r3
 801339a:	441a      	add	r2, r3
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	22ff      	movs	r2, #255	@ 0xff
 80133a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	22ff      	movs	r2, #255	@ 0xff
 80133ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80133b0:	683b      	ldr	r3, [r7, #0]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d114      	bne.n	80133e0 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	691b      	ldr	r3, [r3, #16]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d01a      	beq.n	80133f4 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	3310      	adds	r3, #16
 80133c2:	4618      	mov	r0, r3
 80133c4:	f001 f84e 	bl	8014464 <xTaskRemoveFromEventList>
 80133c8:	4603      	mov	r3, r0
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d012      	beq.n	80133f4 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80133ce:	4b0d      	ldr	r3, [pc, #52]	@ (8013404 <xQueueGenericReset+0xd4>)
 80133d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80133d4:	601a      	str	r2, [r3, #0]
 80133d6:	f3bf 8f4f 	dsb	sy
 80133da:	f3bf 8f6f 	isb	sy
 80133de:	e009      	b.n	80133f4 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	3310      	adds	r3, #16
 80133e4:	4618      	mov	r0, r3
 80133e6:	f7ff feef 	bl	80131c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	3324      	adds	r3, #36	@ 0x24
 80133ee:	4618      	mov	r0, r3
 80133f0:	f7ff feea 	bl	80131c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80133f4:	f001 fc58 	bl	8014ca8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80133f8:	2301      	movs	r3, #1
}
 80133fa:	4618      	mov	r0, r3
 80133fc:	3710      	adds	r7, #16
 80133fe:	46bd      	mov	sp, r7
 8013400:	bd80      	pop	{r7, pc}
 8013402:	bf00      	nop
 8013404:	e000ed04 	.word	0xe000ed04

08013408 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013408:	b580      	push	{r7, lr}
 801340a:	b08e      	sub	sp, #56	@ 0x38
 801340c:	af02      	add	r7, sp, #8
 801340e:	60f8      	str	r0, [r7, #12]
 8013410:	60b9      	str	r1, [r7, #8]
 8013412:	607a      	str	r2, [r7, #4]
 8013414:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	2b00      	cmp	r3, #0
 801341a:	d10d      	bne.n	8013438 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 801341c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013420:	b672      	cpsid	i
 8013422:	f383 8811 	msr	BASEPRI, r3
 8013426:	f3bf 8f6f 	isb	sy
 801342a:	f3bf 8f4f 	dsb	sy
 801342e:	b662      	cpsie	i
 8013430:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8013432:	bf00      	nop
 8013434:	bf00      	nop
 8013436:	e7fd      	b.n	8013434 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013438:	683b      	ldr	r3, [r7, #0]
 801343a:	2b00      	cmp	r3, #0
 801343c:	d10d      	bne.n	801345a <xQueueGenericCreateStatic+0x52>
	__asm volatile
 801343e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013442:	b672      	cpsid	i
 8013444:	f383 8811 	msr	BASEPRI, r3
 8013448:	f3bf 8f6f 	isb	sy
 801344c:	f3bf 8f4f 	dsb	sy
 8013450:	b662      	cpsie	i
 8013452:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8013454:	bf00      	nop
 8013456:	bf00      	nop
 8013458:	e7fd      	b.n	8013456 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	2b00      	cmp	r3, #0
 801345e:	d002      	beq.n	8013466 <xQueueGenericCreateStatic+0x5e>
 8013460:	68bb      	ldr	r3, [r7, #8]
 8013462:	2b00      	cmp	r3, #0
 8013464:	d001      	beq.n	801346a <xQueueGenericCreateStatic+0x62>
 8013466:	2301      	movs	r3, #1
 8013468:	e000      	b.n	801346c <xQueueGenericCreateStatic+0x64>
 801346a:	2300      	movs	r3, #0
 801346c:	2b00      	cmp	r3, #0
 801346e:	d10d      	bne.n	801348c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8013470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013474:	b672      	cpsid	i
 8013476:	f383 8811 	msr	BASEPRI, r3
 801347a:	f3bf 8f6f 	isb	sy
 801347e:	f3bf 8f4f 	dsb	sy
 8013482:	b662      	cpsie	i
 8013484:	623b      	str	r3, [r7, #32]
}
 8013486:	bf00      	nop
 8013488:	bf00      	nop
 801348a:	e7fd      	b.n	8013488 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	2b00      	cmp	r3, #0
 8013490:	d102      	bne.n	8013498 <xQueueGenericCreateStatic+0x90>
 8013492:	68bb      	ldr	r3, [r7, #8]
 8013494:	2b00      	cmp	r3, #0
 8013496:	d101      	bne.n	801349c <xQueueGenericCreateStatic+0x94>
 8013498:	2301      	movs	r3, #1
 801349a:	e000      	b.n	801349e <xQueueGenericCreateStatic+0x96>
 801349c:	2300      	movs	r3, #0
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d10d      	bne.n	80134be <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80134a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134a6:	b672      	cpsid	i
 80134a8:	f383 8811 	msr	BASEPRI, r3
 80134ac:	f3bf 8f6f 	isb	sy
 80134b0:	f3bf 8f4f 	dsb	sy
 80134b4:	b662      	cpsie	i
 80134b6:	61fb      	str	r3, [r7, #28]
}
 80134b8:	bf00      	nop
 80134ba:	bf00      	nop
 80134bc:	e7fd      	b.n	80134ba <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80134be:	2348      	movs	r3, #72	@ 0x48
 80134c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80134c2:	697b      	ldr	r3, [r7, #20]
 80134c4:	2b48      	cmp	r3, #72	@ 0x48
 80134c6:	d00d      	beq.n	80134e4 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80134c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134cc:	b672      	cpsid	i
 80134ce:	f383 8811 	msr	BASEPRI, r3
 80134d2:	f3bf 8f6f 	isb	sy
 80134d6:	f3bf 8f4f 	dsb	sy
 80134da:	b662      	cpsie	i
 80134dc:	61bb      	str	r3, [r7, #24]
}
 80134de:	bf00      	nop
 80134e0:	bf00      	nop
 80134e2:	e7fd      	b.n	80134e0 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80134e4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80134e6:	683b      	ldr	r3, [r7, #0]
 80134e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80134ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d00d      	beq.n	801350c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80134f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134f2:	2201      	movs	r2, #1
 80134f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80134f8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80134fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134fe:	9300      	str	r3, [sp, #0]
 8013500:	4613      	mov	r3, r2
 8013502:	687a      	ldr	r2, [r7, #4]
 8013504:	68b9      	ldr	r1, [r7, #8]
 8013506:	68f8      	ldr	r0, [r7, #12]
 8013508:	f000 f848 	bl	801359c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801350c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 801350e:	4618      	mov	r0, r3
 8013510:	3730      	adds	r7, #48	@ 0x30
 8013512:	46bd      	mov	sp, r7
 8013514:	bd80      	pop	{r7, pc}

08013516 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013516:	b580      	push	{r7, lr}
 8013518:	b08a      	sub	sp, #40	@ 0x28
 801351a:	af02      	add	r7, sp, #8
 801351c:	60f8      	str	r0, [r7, #12]
 801351e:	60b9      	str	r1, [r7, #8]
 8013520:	4613      	mov	r3, r2
 8013522:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	2b00      	cmp	r3, #0
 8013528:	d10d      	bne.n	8013546 <xQueueGenericCreate+0x30>
	__asm volatile
 801352a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801352e:	b672      	cpsid	i
 8013530:	f383 8811 	msr	BASEPRI, r3
 8013534:	f3bf 8f6f 	isb	sy
 8013538:	f3bf 8f4f 	dsb	sy
 801353c:	b662      	cpsie	i
 801353e:	613b      	str	r3, [r7, #16]
}
 8013540:	bf00      	nop
 8013542:	bf00      	nop
 8013544:	e7fd      	b.n	8013542 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8013546:	68bb      	ldr	r3, [r7, #8]
 8013548:	2b00      	cmp	r3, #0
 801354a:	d102      	bne.n	8013552 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801354c:	2300      	movs	r3, #0
 801354e:	61fb      	str	r3, [r7, #28]
 8013550:	e004      	b.n	801355c <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	68ba      	ldr	r2, [r7, #8]
 8013556:	fb02 f303 	mul.w	r3, r2, r3
 801355a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801355c:	69fb      	ldr	r3, [r7, #28]
 801355e:	3348      	adds	r3, #72	@ 0x48
 8013560:	4618      	mov	r0, r3
 8013562:	f001 fc99 	bl	8014e98 <pvPortMalloc>
 8013566:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013568:	69bb      	ldr	r3, [r7, #24]
 801356a:	2b00      	cmp	r3, #0
 801356c:	d011      	beq.n	8013592 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801356e:	69bb      	ldr	r3, [r7, #24]
 8013570:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013572:	697b      	ldr	r3, [r7, #20]
 8013574:	3348      	adds	r3, #72	@ 0x48
 8013576:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013578:	69bb      	ldr	r3, [r7, #24]
 801357a:	2200      	movs	r2, #0
 801357c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013580:	79fa      	ldrb	r2, [r7, #7]
 8013582:	69bb      	ldr	r3, [r7, #24]
 8013584:	9300      	str	r3, [sp, #0]
 8013586:	4613      	mov	r3, r2
 8013588:	697a      	ldr	r2, [r7, #20]
 801358a:	68b9      	ldr	r1, [r7, #8]
 801358c:	68f8      	ldr	r0, [r7, #12]
 801358e:	f000 f805 	bl	801359c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013592:	69bb      	ldr	r3, [r7, #24]
	}
 8013594:	4618      	mov	r0, r3
 8013596:	3720      	adds	r7, #32
 8013598:	46bd      	mov	sp, r7
 801359a:	bd80      	pop	{r7, pc}

0801359c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801359c:	b580      	push	{r7, lr}
 801359e:	b084      	sub	sp, #16
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	60f8      	str	r0, [r7, #12]
 80135a4:	60b9      	str	r1, [r7, #8]
 80135a6:	607a      	str	r2, [r7, #4]
 80135a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80135aa:	68bb      	ldr	r3, [r7, #8]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d103      	bne.n	80135b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80135b0:	69bb      	ldr	r3, [r7, #24]
 80135b2:	69ba      	ldr	r2, [r7, #24]
 80135b4:	601a      	str	r2, [r3, #0]
 80135b6:	e002      	b.n	80135be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80135b8:	69bb      	ldr	r3, [r7, #24]
 80135ba:	687a      	ldr	r2, [r7, #4]
 80135bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80135be:	69bb      	ldr	r3, [r7, #24]
 80135c0:	68fa      	ldr	r2, [r7, #12]
 80135c2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80135c4:	69bb      	ldr	r3, [r7, #24]
 80135c6:	68ba      	ldr	r2, [r7, #8]
 80135c8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80135ca:	2101      	movs	r1, #1
 80135cc:	69b8      	ldr	r0, [r7, #24]
 80135ce:	f7ff feaf 	bl	8013330 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80135d2:	bf00      	nop
 80135d4:	3710      	adds	r7, #16
 80135d6:	46bd      	mov	sp, r7
 80135d8:	bd80      	pop	{r7, pc}
	...

080135dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80135dc:	b580      	push	{r7, lr}
 80135de:	b08e      	sub	sp, #56	@ 0x38
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	60f8      	str	r0, [r7, #12]
 80135e4:	60b9      	str	r1, [r7, #8]
 80135e6:	607a      	str	r2, [r7, #4]
 80135e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80135ea:	2300      	movs	r3, #0
 80135ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80135f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d10d      	bne.n	8013614 <xQueueGenericSend+0x38>
	__asm volatile
 80135f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135fc:	b672      	cpsid	i
 80135fe:	f383 8811 	msr	BASEPRI, r3
 8013602:	f3bf 8f6f 	isb	sy
 8013606:	f3bf 8f4f 	dsb	sy
 801360a:	b662      	cpsie	i
 801360c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801360e:	bf00      	nop
 8013610:	bf00      	nop
 8013612:	e7fd      	b.n	8013610 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013614:	68bb      	ldr	r3, [r7, #8]
 8013616:	2b00      	cmp	r3, #0
 8013618:	d103      	bne.n	8013622 <xQueueGenericSend+0x46>
 801361a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801361c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801361e:	2b00      	cmp	r3, #0
 8013620:	d101      	bne.n	8013626 <xQueueGenericSend+0x4a>
 8013622:	2301      	movs	r3, #1
 8013624:	e000      	b.n	8013628 <xQueueGenericSend+0x4c>
 8013626:	2300      	movs	r3, #0
 8013628:	2b00      	cmp	r3, #0
 801362a:	d10d      	bne.n	8013648 <xQueueGenericSend+0x6c>
	__asm volatile
 801362c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013630:	b672      	cpsid	i
 8013632:	f383 8811 	msr	BASEPRI, r3
 8013636:	f3bf 8f6f 	isb	sy
 801363a:	f3bf 8f4f 	dsb	sy
 801363e:	b662      	cpsie	i
 8013640:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8013642:	bf00      	nop
 8013644:	bf00      	nop
 8013646:	e7fd      	b.n	8013644 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013648:	683b      	ldr	r3, [r7, #0]
 801364a:	2b02      	cmp	r3, #2
 801364c:	d103      	bne.n	8013656 <xQueueGenericSend+0x7a>
 801364e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013652:	2b01      	cmp	r3, #1
 8013654:	d101      	bne.n	801365a <xQueueGenericSend+0x7e>
 8013656:	2301      	movs	r3, #1
 8013658:	e000      	b.n	801365c <xQueueGenericSend+0x80>
 801365a:	2300      	movs	r3, #0
 801365c:	2b00      	cmp	r3, #0
 801365e:	d10d      	bne.n	801367c <xQueueGenericSend+0xa0>
	__asm volatile
 8013660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013664:	b672      	cpsid	i
 8013666:	f383 8811 	msr	BASEPRI, r3
 801366a:	f3bf 8f6f 	isb	sy
 801366e:	f3bf 8f4f 	dsb	sy
 8013672:	b662      	cpsie	i
 8013674:	623b      	str	r3, [r7, #32]
}
 8013676:	bf00      	nop
 8013678:	bf00      	nop
 801367a:	e7fd      	b.n	8013678 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801367c:	f001 f8bc 	bl	80147f8 <xTaskGetSchedulerState>
 8013680:	4603      	mov	r3, r0
 8013682:	2b00      	cmp	r3, #0
 8013684:	d102      	bne.n	801368c <xQueueGenericSend+0xb0>
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d101      	bne.n	8013690 <xQueueGenericSend+0xb4>
 801368c:	2301      	movs	r3, #1
 801368e:	e000      	b.n	8013692 <xQueueGenericSend+0xb6>
 8013690:	2300      	movs	r3, #0
 8013692:	2b00      	cmp	r3, #0
 8013694:	d10d      	bne.n	80136b2 <xQueueGenericSend+0xd6>
	__asm volatile
 8013696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801369a:	b672      	cpsid	i
 801369c:	f383 8811 	msr	BASEPRI, r3
 80136a0:	f3bf 8f6f 	isb	sy
 80136a4:	f3bf 8f4f 	dsb	sy
 80136a8:	b662      	cpsie	i
 80136aa:	61fb      	str	r3, [r7, #28]
}
 80136ac:	bf00      	nop
 80136ae:	bf00      	nop
 80136b0:	e7fd      	b.n	80136ae <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80136b2:	f001 fac3 	bl	8014c3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80136b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80136ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80136be:	429a      	cmp	r2, r3
 80136c0:	d302      	bcc.n	80136c8 <xQueueGenericSend+0xec>
 80136c2:	683b      	ldr	r3, [r7, #0]
 80136c4:	2b02      	cmp	r3, #2
 80136c6:	d129      	bne.n	801371c <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80136c8:	683a      	ldr	r2, [r7, #0]
 80136ca:	68b9      	ldr	r1, [r7, #8]
 80136cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80136ce:	f000 f974 	bl	80139ba <prvCopyDataToQueue>
 80136d2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80136d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d010      	beq.n	80136fe <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80136dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136de:	3324      	adds	r3, #36	@ 0x24
 80136e0:	4618      	mov	r0, r3
 80136e2:	f000 febf 	bl	8014464 <xTaskRemoveFromEventList>
 80136e6:	4603      	mov	r3, r0
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d013      	beq.n	8013714 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80136ec:	4b3f      	ldr	r3, [pc, #252]	@ (80137ec <xQueueGenericSend+0x210>)
 80136ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80136f2:	601a      	str	r2, [r3, #0]
 80136f4:	f3bf 8f4f 	dsb	sy
 80136f8:	f3bf 8f6f 	isb	sy
 80136fc:	e00a      	b.n	8013714 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80136fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013700:	2b00      	cmp	r3, #0
 8013702:	d007      	beq.n	8013714 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013704:	4b39      	ldr	r3, [pc, #228]	@ (80137ec <xQueueGenericSend+0x210>)
 8013706:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801370a:	601a      	str	r2, [r3, #0]
 801370c:	f3bf 8f4f 	dsb	sy
 8013710:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013714:	f001 fac8 	bl	8014ca8 <vPortExitCritical>
				return pdPASS;
 8013718:	2301      	movs	r3, #1
 801371a:	e063      	b.n	80137e4 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	2b00      	cmp	r3, #0
 8013720:	d103      	bne.n	801372a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013722:	f001 fac1 	bl	8014ca8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013726:	2300      	movs	r3, #0
 8013728:	e05c      	b.n	80137e4 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 801372a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801372c:	2b00      	cmp	r3, #0
 801372e:	d106      	bne.n	801373e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013730:	f107 0314 	add.w	r3, r7, #20
 8013734:	4618      	mov	r0, r3
 8013736:	f000 fefb 	bl	8014530 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801373a:	2301      	movs	r3, #1
 801373c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801373e:	f001 fab3 	bl	8014ca8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013742:	f000 fc57 	bl	8013ff4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013746:	f001 fa79 	bl	8014c3c <vPortEnterCritical>
 801374a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801374c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013750:	b25b      	sxtb	r3, r3
 8013752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013756:	d103      	bne.n	8013760 <xQueueGenericSend+0x184>
 8013758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801375a:	2200      	movs	r2, #0
 801375c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013762:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013766:	b25b      	sxtb	r3, r3
 8013768:	f1b3 3fff 	cmp.w	r3, #4294967295
 801376c:	d103      	bne.n	8013776 <xQueueGenericSend+0x19a>
 801376e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013770:	2200      	movs	r2, #0
 8013772:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013776:	f001 fa97 	bl	8014ca8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801377a:	1d3a      	adds	r2, r7, #4
 801377c:	f107 0314 	add.w	r3, r7, #20
 8013780:	4611      	mov	r1, r2
 8013782:	4618      	mov	r0, r3
 8013784:	f000 feea 	bl	801455c <xTaskCheckForTimeOut>
 8013788:	4603      	mov	r3, r0
 801378a:	2b00      	cmp	r3, #0
 801378c:	d124      	bne.n	80137d8 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801378e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013790:	f000 f9cf 	bl	8013b32 <prvIsQueueFull>
 8013794:	4603      	mov	r3, r0
 8013796:	2b00      	cmp	r3, #0
 8013798:	d018      	beq.n	80137cc <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801379a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801379c:	3310      	adds	r3, #16
 801379e:	687a      	ldr	r2, [r7, #4]
 80137a0:	4611      	mov	r1, r2
 80137a2:	4618      	mov	r0, r3
 80137a4:	f000 fe36 	bl	8014414 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80137a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80137aa:	f000 f970 	bl	8013a8e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80137ae:	f000 fc2f 	bl	8014010 <xTaskResumeAll>
 80137b2:	4603      	mov	r3, r0
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	f47f af7c 	bne.w	80136b2 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80137ba:	4b0c      	ldr	r3, [pc, #48]	@ (80137ec <xQueueGenericSend+0x210>)
 80137bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80137c0:	601a      	str	r2, [r3, #0]
 80137c2:	f3bf 8f4f 	dsb	sy
 80137c6:	f3bf 8f6f 	isb	sy
 80137ca:	e772      	b.n	80136b2 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80137cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80137ce:	f000 f95e 	bl	8013a8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80137d2:	f000 fc1d 	bl	8014010 <xTaskResumeAll>
 80137d6:	e76c      	b.n	80136b2 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80137d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80137da:	f000 f958 	bl	8013a8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80137de:	f000 fc17 	bl	8014010 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80137e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80137e4:	4618      	mov	r0, r3
 80137e6:	3738      	adds	r7, #56	@ 0x38
 80137e8:	46bd      	mov	sp, r7
 80137ea:	bd80      	pop	{r7, pc}
 80137ec:	e000ed04 	.word	0xe000ed04

080137f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80137f0:	b580      	push	{r7, lr}
 80137f2:	b08e      	sub	sp, #56	@ 0x38
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	60f8      	str	r0, [r7, #12]
 80137f8:	60b9      	str	r1, [r7, #8]
 80137fa:	607a      	str	r2, [r7, #4]
 80137fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8013802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013804:	2b00      	cmp	r3, #0
 8013806:	d10d      	bne.n	8013824 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8013808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801380c:	b672      	cpsid	i
 801380e:	f383 8811 	msr	BASEPRI, r3
 8013812:	f3bf 8f6f 	isb	sy
 8013816:	f3bf 8f4f 	dsb	sy
 801381a:	b662      	cpsie	i
 801381c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801381e:	bf00      	nop
 8013820:	bf00      	nop
 8013822:	e7fd      	b.n	8013820 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013824:	68bb      	ldr	r3, [r7, #8]
 8013826:	2b00      	cmp	r3, #0
 8013828:	d103      	bne.n	8013832 <xQueueGenericSendFromISR+0x42>
 801382a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801382c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801382e:	2b00      	cmp	r3, #0
 8013830:	d101      	bne.n	8013836 <xQueueGenericSendFromISR+0x46>
 8013832:	2301      	movs	r3, #1
 8013834:	e000      	b.n	8013838 <xQueueGenericSendFromISR+0x48>
 8013836:	2300      	movs	r3, #0
 8013838:	2b00      	cmp	r3, #0
 801383a:	d10d      	bne.n	8013858 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 801383c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013840:	b672      	cpsid	i
 8013842:	f383 8811 	msr	BASEPRI, r3
 8013846:	f3bf 8f6f 	isb	sy
 801384a:	f3bf 8f4f 	dsb	sy
 801384e:	b662      	cpsie	i
 8013850:	623b      	str	r3, [r7, #32]
}
 8013852:	bf00      	nop
 8013854:	bf00      	nop
 8013856:	e7fd      	b.n	8013854 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013858:	683b      	ldr	r3, [r7, #0]
 801385a:	2b02      	cmp	r3, #2
 801385c:	d103      	bne.n	8013866 <xQueueGenericSendFromISR+0x76>
 801385e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013862:	2b01      	cmp	r3, #1
 8013864:	d101      	bne.n	801386a <xQueueGenericSendFromISR+0x7a>
 8013866:	2301      	movs	r3, #1
 8013868:	e000      	b.n	801386c <xQueueGenericSendFromISR+0x7c>
 801386a:	2300      	movs	r3, #0
 801386c:	2b00      	cmp	r3, #0
 801386e:	d10d      	bne.n	801388c <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8013870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013874:	b672      	cpsid	i
 8013876:	f383 8811 	msr	BASEPRI, r3
 801387a:	f3bf 8f6f 	isb	sy
 801387e:	f3bf 8f4f 	dsb	sy
 8013882:	b662      	cpsie	i
 8013884:	61fb      	str	r3, [r7, #28]
}
 8013886:	bf00      	nop
 8013888:	bf00      	nop
 801388a:	e7fd      	b.n	8013888 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801388c:	f001 fabe 	bl	8014e0c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013890:	f3ef 8211 	mrs	r2, BASEPRI
 8013894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013898:	b672      	cpsid	i
 801389a:	f383 8811 	msr	BASEPRI, r3
 801389e:	f3bf 8f6f 	isb	sy
 80138a2:	f3bf 8f4f 	dsb	sy
 80138a6:	b662      	cpsie	i
 80138a8:	61ba      	str	r2, [r7, #24]
 80138aa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80138ac:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80138ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80138b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80138b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80138b8:	429a      	cmp	r2, r3
 80138ba:	d302      	bcc.n	80138c2 <xQueueGenericSendFromISR+0xd2>
 80138bc:	683b      	ldr	r3, [r7, #0]
 80138be:	2b02      	cmp	r3, #2
 80138c0:	d12c      	bne.n	801391c <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80138c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80138c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80138cc:	683a      	ldr	r2, [r7, #0]
 80138ce:	68b9      	ldr	r1, [r7, #8]
 80138d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80138d2:	f000 f872 	bl	80139ba <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80138d6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80138da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138de:	d112      	bne.n	8013906 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80138e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d016      	beq.n	8013916 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80138e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138ea:	3324      	adds	r3, #36	@ 0x24
 80138ec:	4618      	mov	r0, r3
 80138ee:	f000 fdb9 	bl	8014464 <xTaskRemoveFromEventList>
 80138f2:	4603      	mov	r3, r0
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d00e      	beq.n	8013916 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d00b      	beq.n	8013916 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	2201      	movs	r2, #1
 8013902:	601a      	str	r2, [r3, #0]
 8013904:	e007      	b.n	8013916 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013906:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801390a:	3301      	adds	r3, #1
 801390c:	b2db      	uxtb	r3, r3
 801390e:	b25a      	sxtb	r2, r3
 8013910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013912:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8013916:	2301      	movs	r3, #1
 8013918:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 801391a:	e001      	b.n	8013920 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801391c:	2300      	movs	r3, #0
 801391e:	637b      	str	r3, [r7, #52]	@ 0x34
 8013920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013922:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013924:	693b      	ldr	r3, [r7, #16]
 8013926:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801392a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801392c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801392e:	4618      	mov	r0, r3
 8013930:	3738      	adds	r7, #56	@ 0x38
 8013932:	46bd      	mov	sp, r7
 8013934:	bd80      	pop	{r7, pc}

08013936 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8013936:	b580      	push	{r7, lr}
 8013938:	b084      	sub	sp, #16
 801393a:	af00      	add	r7, sp, #0
 801393c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	2b00      	cmp	r3, #0
 8013942:	d10d      	bne.n	8013960 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8013944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013948:	b672      	cpsid	i
 801394a:	f383 8811 	msr	BASEPRI, r3
 801394e:	f3bf 8f6f 	isb	sy
 8013952:	f3bf 8f4f 	dsb	sy
 8013956:	b662      	cpsie	i
 8013958:	60bb      	str	r3, [r7, #8]
}
 801395a:	bf00      	nop
 801395c:	bf00      	nop
 801395e:	e7fd      	b.n	801395c <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8013960:	f001 f96c 	bl	8014c3c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013968:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 801396a:	f001 f99d 	bl	8014ca8 <vPortExitCritical>

	return uxReturn;
 801396e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8013970:	4618      	mov	r0, r3
 8013972:	3710      	adds	r7, #16
 8013974:	46bd      	mov	sp, r7
 8013976:	bd80      	pop	{r7, pc}

08013978 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8013978:	b480      	push	{r7}
 801397a:	b087      	sub	sp, #28
 801397c:	af00      	add	r7, sp, #0
 801397e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8013984:	697b      	ldr	r3, [r7, #20]
 8013986:	2b00      	cmp	r3, #0
 8013988:	d10d      	bne.n	80139a6 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 801398a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801398e:	b672      	cpsid	i
 8013990:	f383 8811 	msr	BASEPRI, r3
 8013994:	f3bf 8f6f 	isb	sy
 8013998:	f3bf 8f4f 	dsb	sy
 801399c:	b662      	cpsie	i
 801399e:	60fb      	str	r3, [r7, #12]
}
 80139a0:	bf00      	nop
 80139a2:	bf00      	nop
 80139a4:	e7fd      	b.n	80139a2 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 80139a6:	697b      	ldr	r3, [r7, #20]
 80139a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80139aa:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80139ac:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80139ae:	4618      	mov	r0, r3
 80139b0:	371c      	adds	r7, #28
 80139b2:	46bd      	mov	sp, r7
 80139b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139b8:	4770      	bx	lr

080139ba <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80139ba:	b580      	push	{r7, lr}
 80139bc:	b086      	sub	sp, #24
 80139be:	af00      	add	r7, sp, #0
 80139c0:	60f8      	str	r0, [r7, #12]
 80139c2:	60b9      	str	r1, [r7, #8]
 80139c4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80139c6:	2300      	movs	r3, #0
 80139c8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80139ce:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d10d      	bne.n	80139f4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d14d      	bne.n	8013a7c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	689b      	ldr	r3, [r3, #8]
 80139e4:	4618      	mov	r0, r3
 80139e6:	f000 ff25 	bl	8014834 <xTaskPriorityDisinherit>
 80139ea:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	2200      	movs	r2, #0
 80139f0:	609a      	str	r2, [r3, #8]
 80139f2:	e043      	b.n	8013a7c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d119      	bne.n	8013a2e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	6858      	ldr	r0, [r3, #4]
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013a02:	461a      	mov	r2, r3
 8013a04:	68b9      	ldr	r1, [r7, #8]
 8013a06:	f001 fe85 	bl	8015714 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	685a      	ldr	r2, [r3, #4]
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013a12:	441a      	add	r2, r3
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	685a      	ldr	r2, [r3, #4]
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	689b      	ldr	r3, [r3, #8]
 8013a20:	429a      	cmp	r2, r3
 8013a22:	d32b      	bcc.n	8013a7c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	681a      	ldr	r2, [r3, #0]
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	605a      	str	r2, [r3, #4]
 8013a2c:	e026      	b.n	8013a7c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	68d8      	ldr	r0, [r3, #12]
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013a36:	461a      	mov	r2, r3
 8013a38:	68b9      	ldr	r1, [r7, #8]
 8013a3a:	f001 fe6b 	bl	8015714 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	68da      	ldr	r2, [r3, #12]
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013a46:	425b      	negs	r3, r3
 8013a48:	441a      	add	r2, r3
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	68da      	ldr	r2, [r3, #12]
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	429a      	cmp	r2, r3
 8013a58:	d207      	bcs.n	8013a6a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	689a      	ldr	r2, [r3, #8]
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013a62:	425b      	negs	r3, r3
 8013a64:	441a      	add	r2, r3
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	2b02      	cmp	r3, #2
 8013a6e:	d105      	bne.n	8013a7c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013a70:	693b      	ldr	r3, [r7, #16]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d002      	beq.n	8013a7c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013a76:	693b      	ldr	r3, [r7, #16]
 8013a78:	3b01      	subs	r3, #1
 8013a7a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013a7c:	693b      	ldr	r3, [r7, #16]
 8013a7e:	1c5a      	adds	r2, r3, #1
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8013a84:	697b      	ldr	r3, [r7, #20]
}
 8013a86:	4618      	mov	r0, r3
 8013a88:	3718      	adds	r7, #24
 8013a8a:	46bd      	mov	sp, r7
 8013a8c:	bd80      	pop	{r7, pc}

08013a8e <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013a8e:	b580      	push	{r7, lr}
 8013a90:	b084      	sub	sp, #16
 8013a92:	af00      	add	r7, sp, #0
 8013a94:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013a96:	f001 f8d1 	bl	8014c3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013aa0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013aa2:	e011      	b.n	8013ac8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d012      	beq.n	8013ad2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	3324      	adds	r3, #36	@ 0x24
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	f000 fcd7 	bl	8014464 <xTaskRemoveFromEventList>
 8013ab6:	4603      	mov	r3, r0
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d001      	beq.n	8013ac0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013abc:	f000 fdb6 	bl	801462c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013ac0:	7bfb      	ldrb	r3, [r7, #15]
 8013ac2:	3b01      	subs	r3, #1
 8013ac4:	b2db      	uxtb	r3, r3
 8013ac6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013ac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	dce9      	bgt.n	8013aa4 <prvUnlockQueue+0x16>
 8013ad0:	e000      	b.n	8013ad4 <prvUnlockQueue+0x46>
					break;
 8013ad2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	22ff      	movs	r2, #255	@ 0xff
 8013ad8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8013adc:	f001 f8e4 	bl	8014ca8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013ae0:	f001 f8ac 	bl	8014c3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013aea:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013aec:	e011      	b.n	8013b12 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	691b      	ldr	r3, [r3, #16]
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d012      	beq.n	8013b1c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	3310      	adds	r3, #16
 8013afa:	4618      	mov	r0, r3
 8013afc:	f000 fcb2 	bl	8014464 <xTaskRemoveFromEventList>
 8013b00:	4603      	mov	r3, r0
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d001      	beq.n	8013b0a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013b06:	f000 fd91 	bl	801462c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013b0a:	7bbb      	ldrb	r3, [r7, #14]
 8013b0c:	3b01      	subs	r3, #1
 8013b0e:	b2db      	uxtb	r3, r3
 8013b10:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013b12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	dce9      	bgt.n	8013aee <prvUnlockQueue+0x60>
 8013b1a:	e000      	b.n	8013b1e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013b1c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	22ff      	movs	r2, #255	@ 0xff
 8013b22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8013b26:	f001 f8bf 	bl	8014ca8 <vPortExitCritical>
}
 8013b2a:	bf00      	nop
 8013b2c:	3710      	adds	r7, #16
 8013b2e:	46bd      	mov	sp, r7
 8013b30:	bd80      	pop	{r7, pc}

08013b32 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013b32:	b580      	push	{r7, lr}
 8013b34:	b084      	sub	sp, #16
 8013b36:	af00      	add	r7, sp, #0
 8013b38:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013b3a:	f001 f87f 	bl	8014c3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013b46:	429a      	cmp	r2, r3
 8013b48:	d102      	bne.n	8013b50 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013b4a:	2301      	movs	r3, #1
 8013b4c:	60fb      	str	r3, [r7, #12]
 8013b4e:	e001      	b.n	8013b54 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013b50:	2300      	movs	r3, #0
 8013b52:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013b54:	f001 f8a8 	bl	8014ca8 <vPortExitCritical>

	return xReturn;
 8013b58:	68fb      	ldr	r3, [r7, #12]
}
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	3710      	adds	r7, #16
 8013b5e:	46bd      	mov	sp, r7
 8013b60:	bd80      	pop	{r7, pc}

08013b62 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013b62:	b580      	push	{r7, lr}
 8013b64:	b08e      	sub	sp, #56	@ 0x38
 8013b66:	af04      	add	r7, sp, #16
 8013b68:	60f8      	str	r0, [r7, #12]
 8013b6a:	60b9      	str	r1, [r7, #8]
 8013b6c:	607a      	str	r2, [r7, #4]
 8013b6e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d10d      	bne.n	8013b92 <xTaskCreateStatic+0x30>
	__asm volatile
 8013b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b7a:	b672      	cpsid	i
 8013b7c:	f383 8811 	msr	BASEPRI, r3
 8013b80:	f3bf 8f6f 	isb	sy
 8013b84:	f3bf 8f4f 	dsb	sy
 8013b88:	b662      	cpsie	i
 8013b8a:	623b      	str	r3, [r7, #32]
}
 8013b8c:	bf00      	nop
 8013b8e:	bf00      	nop
 8013b90:	e7fd      	b.n	8013b8e <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8013b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d10d      	bne.n	8013bb4 <xTaskCreateStatic+0x52>
	__asm volatile
 8013b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b9c:	b672      	cpsid	i
 8013b9e:	f383 8811 	msr	BASEPRI, r3
 8013ba2:	f3bf 8f6f 	isb	sy
 8013ba6:	f3bf 8f4f 	dsb	sy
 8013baa:	b662      	cpsie	i
 8013bac:	61fb      	str	r3, [r7, #28]
}
 8013bae:	bf00      	nop
 8013bb0:	bf00      	nop
 8013bb2:	e7fd      	b.n	8013bb0 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013bb4:	2358      	movs	r3, #88	@ 0x58
 8013bb6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013bb8:	693b      	ldr	r3, [r7, #16]
 8013bba:	2b58      	cmp	r3, #88	@ 0x58
 8013bbc:	d00d      	beq.n	8013bda <xTaskCreateStatic+0x78>
	__asm volatile
 8013bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bc2:	b672      	cpsid	i
 8013bc4:	f383 8811 	msr	BASEPRI, r3
 8013bc8:	f3bf 8f6f 	isb	sy
 8013bcc:	f3bf 8f4f 	dsb	sy
 8013bd0:	b662      	cpsie	i
 8013bd2:	61bb      	str	r3, [r7, #24]
}
 8013bd4:	bf00      	nop
 8013bd6:	bf00      	nop
 8013bd8:	e7fd      	b.n	8013bd6 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013bda:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d01e      	beq.n	8013c20 <xTaskCreateStatic+0xbe>
 8013be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d01b      	beq.n	8013c20 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bea:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013bf0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bf4:	2202      	movs	r2, #2
 8013bf6:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	9303      	str	r3, [sp, #12]
 8013bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c00:	9302      	str	r3, [sp, #8]
 8013c02:	f107 0314 	add.w	r3, r7, #20
 8013c06:	9301      	str	r3, [sp, #4]
 8013c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c0a:	9300      	str	r3, [sp, #0]
 8013c0c:	683b      	ldr	r3, [r7, #0]
 8013c0e:	687a      	ldr	r2, [r7, #4]
 8013c10:	68b9      	ldr	r1, [r7, #8]
 8013c12:	68f8      	ldr	r0, [r7, #12]
 8013c14:	f000 f850 	bl	8013cb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013c18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013c1a:	f000 f8e3 	bl	8013de4 <prvAddNewTaskToReadyList>
 8013c1e:	e001      	b.n	8013c24 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8013c20:	2300      	movs	r3, #0
 8013c22:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013c24:	697b      	ldr	r3, [r7, #20]
	}
 8013c26:	4618      	mov	r0, r3
 8013c28:	3728      	adds	r7, #40	@ 0x28
 8013c2a:	46bd      	mov	sp, r7
 8013c2c:	bd80      	pop	{r7, pc}

08013c2e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013c2e:	b580      	push	{r7, lr}
 8013c30:	b08c      	sub	sp, #48	@ 0x30
 8013c32:	af04      	add	r7, sp, #16
 8013c34:	60f8      	str	r0, [r7, #12]
 8013c36:	60b9      	str	r1, [r7, #8]
 8013c38:	603b      	str	r3, [r7, #0]
 8013c3a:	4613      	mov	r3, r2
 8013c3c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013c3e:	88fb      	ldrh	r3, [r7, #6]
 8013c40:	009b      	lsls	r3, r3, #2
 8013c42:	4618      	mov	r0, r3
 8013c44:	f001 f928 	bl	8014e98 <pvPortMalloc>
 8013c48:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013c4a:	697b      	ldr	r3, [r7, #20]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d00e      	beq.n	8013c6e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013c50:	2058      	movs	r0, #88	@ 0x58
 8013c52:	f001 f921 	bl	8014e98 <pvPortMalloc>
 8013c56:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013c58:	69fb      	ldr	r3, [r7, #28]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d003      	beq.n	8013c66 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013c5e:	69fb      	ldr	r3, [r7, #28]
 8013c60:	697a      	ldr	r2, [r7, #20]
 8013c62:	631a      	str	r2, [r3, #48]	@ 0x30
 8013c64:	e005      	b.n	8013c72 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013c66:	6978      	ldr	r0, [r7, #20]
 8013c68:	f001 f9e8 	bl	801503c <vPortFree>
 8013c6c:	e001      	b.n	8013c72 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013c6e:	2300      	movs	r3, #0
 8013c70:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013c72:	69fb      	ldr	r3, [r7, #28]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d017      	beq.n	8013ca8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013c78:	69fb      	ldr	r3, [r7, #28]
 8013c7a:	2200      	movs	r2, #0
 8013c7c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013c80:	88fa      	ldrh	r2, [r7, #6]
 8013c82:	2300      	movs	r3, #0
 8013c84:	9303      	str	r3, [sp, #12]
 8013c86:	69fb      	ldr	r3, [r7, #28]
 8013c88:	9302      	str	r3, [sp, #8]
 8013c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c8c:	9301      	str	r3, [sp, #4]
 8013c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c90:	9300      	str	r3, [sp, #0]
 8013c92:	683b      	ldr	r3, [r7, #0]
 8013c94:	68b9      	ldr	r1, [r7, #8]
 8013c96:	68f8      	ldr	r0, [r7, #12]
 8013c98:	f000 f80e 	bl	8013cb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013c9c:	69f8      	ldr	r0, [r7, #28]
 8013c9e:	f000 f8a1 	bl	8013de4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013ca2:	2301      	movs	r3, #1
 8013ca4:	61bb      	str	r3, [r7, #24]
 8013ca6:	e002      	b.n	8013cae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8013cac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013cae:	69bb      	ldr	r3, [r7, #24]
	}
 8013cb0:	4618      	mov	r0, r3
 8013cb2:	3720      	adds	r7, #32
 8013cb4:	46bd      	mov	sp, r7
 8013cb6:	bd80      	pop	{r7, pc}

08013cb8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013cb8:	b580      	push	{r7, lr}
 8013cba:	b088      	sub	sp, #32
 8013cbc:	af00      	add	r7, sp, #0
 8013cbe:	60f8      	str	r0, [r7, #12]
 8013cc0:	60b9      	str	r1, [r7, #8]
 8013cc2:	607a      	str	r2, [r7, #4]
 8013cc4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cc8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	009b      	lsls	r3, r3, #2
 8013cce:	461a      	mov	r2, r3
 8013cd0:	21a5      	movs	r1, #165	@ 0xa5
 8013cd2:	f001 fcb1 	bl	8015638 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013cda:	6879      	ldr	r1, [r7, #4]
 8013cdc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8013ce0:	440b      	add	r3, r1
 8013ce2:	009b      	lsls	r3, r3, #2
 8013ce4:	4413      	add	r3, r2
 8013ce6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013ce8:	69bb      	ldr	r3, [r7, #24]
 8013cea:	f023 0307 	bic.w	r3, r3, #7
 8013cee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013cf0:	69bb      	ldr	r3, [r7, #24]
 8013cf2:	f003 0307 	and.w	r3, r3, #7
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d00d      	beq.n	8013d16 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8013cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013cfe:	b672      	cpsid	i
 8013d00:	f383 8811 	msr	BASEPRI, r3
 8013d04:	f3bf 8f6f 	isb	sy
 8013d08:	f3bf 8f4f 	dsb	sy
 8013d0c:	b662      	cpsie	i
 8013d0e:	617b      	str	r3, [r7, #20]
}
 8013d10:	bf00      	nop
 8013d12:	bf00      	nop
 8013d14:	e7fd      	b.n	8013d12 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013d16:	68bb      	ldr	r3, [r7, #8]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d01f      	beq.n	8013d5c <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	61fb      	str	r3, [r7, #28]
 8013d20:	e012      	b.n	8013d48 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013d22:	68ba      	ldr	r2, [r7, #8]
 8013d24:	69fb      	ldr	r3, [r7, #28]
 8013d26:	4413      	add	r3, r2
 8013d28:	7819      	ldrb	r1, [r3, #0]
 8013d2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013d2c:	69fb      	ldr	r3, [r7, #28]
 8013d2e:	4413      	add	r3, r2
 8013d30:	3334      	adds	r3, #52	@ 0x34
 8013d32:	460a      	mov	r2, r1
 8013d34:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013d36:	68ba      	ldr	r2, [r7, #8]
 8013d38:	69fb      	ldr	r3, [r7, #28]
 8013d3a:	4413      	add	r3, r2
 8013d3c:	781b      	ldrb	r3, [r3, #0]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d006      	beq.n	8013d50 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013d42:	69fb      	ldr	r3, [r7, #28]
 8013d44:	3301      	adds	r3, #1
 8013d46:	61fb      	str	r3, [r7, #28]
 8013d48:	69fb      	ldr	r3, [r7, #28]
 8013d4a:	2b0f      	cmp	r3, #15
 8013d4c:	d9e9      	bls.n	8013d22 <prvInitialiseNewTask+0x6a>
 8013d4e:	e000      	b.n	8013d52 <prvInitialiseNewTask+0x9a>
			{
				break;
 8013d50:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d54:	2200      	movs	r2, #0
 8013d56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8013d5a:	e003      	b.n	8013d64 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d5e:	2200      	movs	r2, #0
 8013d60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d66:	2b06      	cmp	r3, #6
 8013d68:	d901      	bls.n	8013d6e <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013d6a:	2306      	movs	r3, #6
 8013d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013d72:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013d78:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8013d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d7c:	2200      	movs	r2, #0
 8013d7e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d82:	3304      	adds	r3, #4
 8013d84:	4618      	mov	r0, r3
 8013d86:	f7ff fa3f 	bl	8013208 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d8c:	3318      	adds	r3, #24
 8013d8e:	4618      	mov	r0, r3
 8013d90:	f7ff fa3a 	bl	8013208 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013d98:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d9c:	f1c3 0207 	rsb	r2, r3, #7
 8013da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013da2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013da6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013da8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8013daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013dac:	2200      	movs	r2, #0
 8013dae:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013db2:	2200      	movs	r2, #0
 8013db4:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013db8:	2200      	movs	r2, #0
 8013dba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013dbe:	683a      	ldr	r2, [r7, #0]
 8013dc0:	68f9      	ldr	r1, [r7, #12]
 8013dc2:	69b8      	ldr	r0, [r7, #24]
 8013dc4:	f000 fe28 	bl	8014a18 <pxPortInitialiseStack>
 8013dc8:	4602      	mov	r2, r0
 8013dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013dcc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d002      	beq.n	8013dda <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013dd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013dd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013dda:	bf00      	nop
 8013ddc:	3720      	adds	r7, #32
 8013dde:	46bd      	mov	sp, r7
 8013de0:	bd80      	pop	{r7, pc}
	...

08013de4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013de4:	b580      	push	{r7, lr}
 8013de6:	b082      	sub	sp, #8
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013dec:	f000 ff26 	bl	8014c3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013df0:	4b2a      	ldr	r3, [pc, #168]	@ (8013e9c <prvAddNewTaskToReadyList+0xb8>)
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	3301      	adds	r3, #1
 8013df6:	4a29      	ldr	r2, [pc, #164]	@ (8013e9c <prvAddNewTaskToReadyList+0xb8>)
 8013df8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013dfa:	4b29      	ldr	r3, [pc, #164]	@ (8013ea0 <prvAddNewTaskToReadyList+0xbc>)
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d109      	bne.n	8013e16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013e02:	4a27      	ldr	r2, [pc, #156]	@ (8013ea0 <prvAddNewTaskToReadyList+0xbc>)
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013e08:	4b24      	ldr	r3, [pc, #144]	@ (8013e9c <prvAddNewTaskToReadyList+0xb8>)
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	2b01      	cmp	r3, #1
 8013e0e:	d110      	bne.n	8013e32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013e10:	f000 fc32 	bl	8014678 <prvInitialiseTaskLists>
 8013e14:	e00d      	b.n	8013e32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013e16:	4b23      	ldr	r3, [pc, #140]	@ (8013ea4 <prvAddNewTaskToReadyList+0xc0>)
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d109      	bne.n	8013e32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013e1e:	4b20      	ldr	r3, [pc, #128]	@ (8013ea0 <prvAddNewTaskToReadyList+0xbc>)
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e28:	429a      	cmp	r2, r3
 8013e2a:	d802      	bhi.n	8013e32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013e2c:	4a1c      	ldr	r2, [pc, #112]	@ (8013ea0 <prvAddNewTaskToReadyList+0xbc>)
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013e32:	4b1d      	ldr	r3, [pc, #116]	@ (8013ea8 <prvAddNewTaskToReadyList+0xc4>)
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	3301      	adds	r3, #1
 8013e38:	4a1b      	ldr	r2, [pc, #108]	@ (8013ea8 <prvAddNewTaskToReadyList+0xc4>)
 8013e3a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e40:	2201      	movs	r2, #1
 8013e42:	409a      	lsls	r2, r3
 8013e44:	4b19      	ldr	r3, [pc, #100]	@ (8013eac <prvAddNewTaskToReadyList+0xc8>)
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	4313      	orrs	r3, r2
 8013e4a:	4a18      	ldr	r2, [pc, #96]	@ (8013eac <prvAddNewTaskToReadyList+0xc8>)
 8013e4c:	6013      	str	r3, [r2, #0]
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013e52:	4613      	mov	r3, r2
 8013e54:	009b      	lsls	r3, r3, #2
 8013e56:	4413      	add	r3, r2
 8013e58:	009b      	lsls	r3, r3, #2
 8013e5a:	4a15      	ldr	r2, [pc, #84]	@ (8013eb0 <prvAddNewTaskToReadyList+0xcc>)
 8013e5c:	441a      	add	r2, r3
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	3304      	adds	r3, #4
 8013e62:	4619      	mov	r1, r3
 8013e64:	4610      	mov	r0, r2
 8013e66:	f7ff f9dc 	bl	8013222 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013e6a:	f000 ff1d 	bl	8014ca8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8013ea4 <prvAddNewTaskToReadyList+0xc0>)
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d00e      	beq.n	8013e94 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013e76:	4b0a      	ldr	r3, [pc, #40]	@ (8013ea0 <prvAddNewTaskToReadyList+0xbc>)
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e80:	429a      	cmp	r2, r3
 8013e82:	d207      	bcs.n	8013e94 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013e84:	4b0b      	ldr	r3, [pc, #44]	@ (8013eb4 <prvAddNewTaskToReadyList+0xd0>)
 8013e86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013e8a:	601a      	str	r2, [r3, #0]
 8013e8c:	f3bf 8f4f 	dsb	sy
 8013e90:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013e94:	bf00      	nop
 8013e96:	3708      	adds	r7, #8
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	bd80      	pop	{r7, pc}
 8013e9c:	200018ec 	.word	0x200018ec
 8013ea0:	200017ec 	.word	0x200017ec
 8013ea4:	200018f8 	.word	0x200018f8
 8013ea8:	20001908 	.word	0x20001908
 8013eac:	200018f4 	.word	0x200018f4
 8013eb0:	200017f0 	.word	0x200017f0
 8013eb4:	e000ed04 	.word	0xe000ed04

08013eb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013eb8:	b580      	push	{r7, lr}
 8013eba:	b084      	sub	sp, #16
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013ec0:	2300      	movs	r3, #0
 8013ec2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d01a      	beq.n	8013f00 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013eca:	4b15      	ldr	r3, [pc, #84]	@ (8013f20 <vTaskDelay+0x68>)
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d00d      	beq.n	8013eee <vTaskDelay+0x36>
	__asm volatile
 8013ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ed6:	b672      	cpsid	i
 8013ed8:	f383 8811 	msr	BASEPRI, r3
 8013edc:	f3bf 8f6f 	isb	sy
 8013ee0:	f3bf 8f4f 	dsb	sy
 8013ee4:	b662      	cpsie	i
 8013ee6:	60bb      	str	r3, [r7, #8]
}
 8013ee8:	bf00      	nop
 8013eea:	bf00      	nop
 8013eec:	e7fd      	b.n	8013eea <vTaskDelay+0x32>
			vTaskSuspendAll();
 8013eee:	f000 f881 	bl	8013ff4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013ef2:	2100      	movs	r1, #0
 8013ef4:	6878      	ldr	r0, [r7, #4]
 8013ef6:	f000 fd29 	bl	801494c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013efa:	f000 f889 	bl	8014010 <xTaskResumeAll>
 8013efe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d107      	bne.n	8013f16 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8013f06:	4b07      	ldr	r3, [pc, #28]	@ (8013f24 <vTaskDelay+0x6c>)
 8013f08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013f0c:	601a      	str	r2, [r3, #0]
 8013f0e:	f3bf 8f4f 	dsb	sy
 8013f12:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013f16:	bf00      	nop
 8013f18:	3710      	adds	r7, #16
 8013f1a:	46bd      	mov	sp, r7
 8013f1c:	bd80      	pop	{r7, pc}
 8013f1e:	bf00      	nop
 8013f20:	20001914 	.word	0x20001914
 8013f24:	e000ed04 	.word	0xe000ed04

08013f28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013f28:	b580      	push	{r7, lr}
 8013f2a:	b08a      	sub	sp, #40	@ 0x28
 8013f2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013f2e:	2300      	movs	r3, #0
 8013f30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013f32:	2300      	movs	r3, #0
 8013f34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013f36:	463a      	mov	r2, r7
 8013f38:	1d39      	adds	r1, r7, #4
 8013f3a:	f107 0308 	add.w	r3, r7, #8
 8013f3e:	4618      	mov	r0, r3
 8013f40:	f7ed fd9a 	bl	8001a78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013f44:	6839      	ldr	r1, [r7, #0]
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	68ba      	ldr	r2, [r7, #8]
 8013f4a:	9202      	str	r2, [sp, #8]
 8013f4c:	9301      	str	r3, [sp, #4]
 8013f4e:	2300      	movs	r3, #0
 8013f50:	9300      	str	r3, [sp, #0]
 8013f52:	2300      	movs	r3, #0
 8013f54:	460a      	mov	r2, r1
 8013f56:	4921      	ldr	r1, [pc, #132]	@ (8013fdc <vTaskStartScheduler+0xb4>)
 8013f58:	4821      	ldr	r0, [pc, #132]	@ (8013fe0 <vTaskStartScheduler+0xb8>)
 8013f5a:	f7ff fe02 	bl	8013b62 <xTaskCreateStatic>
 8013f5e:	4603      	mov	r3, r0
 8013f60:	4a20      	ldr	r2, [pc, #128]	@ (8013fe4 <vTaskStartScheduler+0xbc>)
 8013f62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013f64:	4b1f      	ldr	r3, [pc, #124]	@ (8013fe4 <vTaskStartScheduler+0xbc>)
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d002      	beq.n	8013f72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013f6c:	2301      	movs	r3, #1
 8013f6e:	617b      	str	r3, [r7, #20]
 8013f70:	e001      	b.n	8013f76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013f72:	2300      	movs	r3, #0
 8013f74:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013f76:	697b      	ldr	r3, [r7, #20]
 8013f78:	2b01      	cmp	r3, #1
 8013f7a:	d118      	bne.n	8013fae <vTaskStartScheduler+0x86>
	__asm volatile
 8013f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f80:	b672      	cpsid	i
 8013f82:	f383 8811 	msr	BASEPRI, r3
 8013f86:	f3bf 8f6f 	isb	sy
 8013f8a:	f3bf 8f4f 	dsb	sy
 8013f8e:	b662      	cpsie	i
 8013f90:	613b      	str	r3, [r7, #16]
}
 8013f92:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013f94:	4b14      	ldr	r3, [pc, #80]	@ (8013fe8 <vTaskStartScheduler+0xc0>)
 8013f96:	f04f 32ff 	mov.w	r2, #4294967295
 8013f9a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013f9c:	4b13      	ldr	r3, [pc, #76]	@ (8013fec <vTaskStartScheduler+0xc4>)
 8013f9e:	2201      	movs	r2, #1
 8013fa0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013fa2:	4b13      	ldr	r3, [pc, #76]	@ (8013ff0 <vTaskStartScheduler+0xc8>)
 8013fa4:	2200      	movs	r2, #0
 8013fa6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013fa8:	f000 fdca 	bl	8014b40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013fac:	e011      	b.n	8013fd2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013fae:	697b      	ldr	r3, [r7, #20]
 8013fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013fb4:	d10d      	bne.n	8013fd2 <vTaskStartScheduler+0xaa>
	__asm volatile
 8013fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013fba:	b672      	cpsid	i
 8013fbc:	f383 8811 	msr	BASEPRI, r3
 8013fc0:	f3bf 8f6f 	isb	sy
 8013fc4:	f3bf 8f4f 	dsb	sy
 8013fc8:	b662      	cpsie	i
 8013fca:	60fb      	str	r3, [r7, #12]
}
 8013fcc:	bf00      	nop
 8013fce:	bf00      	nop
 8013fd0:	e7fd      	b.n	8013fce <vTaskStartScheduler+0xa6>
}
 8013fd2:	bf00      	nop
 8013fd4:	3718      	adds	r7, #24
 8013fd6:	46bd      	mov	sp, r7
 8013fd8:	bd80      	pop	{r7, pc}
 8013fda:	bf00      	nop
 8013fdc:	08019d04 	.word	0x08019d04
 8013fe0:	08014645 	.word	0x08014645
 8013fe4:	20001910 	.word	0x20001910
 8013fe8:	2000190c 	.word	0x2000190c
 8013fec:	200018f8 	.word	0x200018f8
 8013ff0:	200018f0 	.word	0x200018f0

08013ff4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013ff4:	b480      	push	{r7}
 8013ff6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013ff8:	4b04      	ldr	r3, [pc, #16]	@ (801400c <vTaskSuspendAll+0x18>)
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	3301      	adds	r3, #1
 8013ffe:	4a03      	ldr	r2, [pc, #12]	@ (801400c <vTaskSuspendAll+0x18>)
 8014000:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8014002:	bf00      	nop
 8014004:	46bd      	mov	sp, r7
 8014006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801400a:	4770      	bx	lr
 801400c:	20001914 	.word	0x20001914

08014010 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014010:	b580      	push	{r7, lr}
 8014012:	b084      	sub	sp, #16
 8014014:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014016:	2300      	movs	r3, #0
 8014018:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801401a:	2300      	movs	r3, #0
 801401c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801401e:	4b43      	ldr	r3, [pc, #268]	@ (801412c <xTaskResumeAll+0x11c>)
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	2b00      	cmp	r3, #0
 8014024:	d10d      	bne.n	8014042 <xTaskResumeAll+0x32>
	__asm volatile
 8014026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801402a:	b672      	cpsid	i
 801402c:	f383 8811 	msr	BASEPRI, r3
 8014030:	f3bf 8f6f 	isb	sy
 8014034:	f3bf 8f4f 	dsb	sy
 8014038:	b662      	cpsie	i
 801403a:	603b      	str	r3, [r7, #0]
}
 801403c:	bf00      	nop
 801403e:	bf00      	nop
 8014040:	e7fd      	b.n	801403e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014042:	f000 fdfb 	bl	8014c3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014046:	4b39      	ldr	r3, [pc, #228]	@ (801412c <xTaskResumeAll+0x11c>)
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	3b01      	subs	r3, #1
 801404c:	4a37      	ldr	r2, [pc, #220]	@ (801412c <xTaskResumeAll+0x11c>)
 801404e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014050:	4b36      	ldr	r3, [pc, #216]	@ (801412c <xTaskResumeAll+0x11c>)
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d161      	bne.n	801411c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014058:	4b35      	ldr	r3, [pc, #212]	@ (8014130 <xTaskResumeAll+0x120>)
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d05d      	beq.n	801411c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014060:	e02e      	b.n	80140c0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014062:	4b34      	ldr	r3, [pc, #208]	@ (8014134 <xTaskResumeAll+0x124>)
 8014064:	68db      	ldr	r3, [r3, #12]
 8014066:	68db      	ldr	r3, [r3, #12]
 8014068:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	3318      	adds	r3, #24
 801406e:	4618      	mov	r0, r3
 8014070:	f7ff f934 	bl	80132dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	3304      	adds	r3, #4
 8014078:	4618      	mov	r0, r3
 801407a:	f7ff f92f 	bl	80132dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014082:	2201      	movs	r2, #1
 8014084:	409a      	lsls	r2, r3
 8014086:	4b2c      	ldr	r3, [pc, #176]	@ (8014138 <xTaskResumeAll+0x128>)
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	4313      	orrs	r3, r2
 801408c:	4a2a      	ldr	r2, [pc, #168]	@ (8014138 <xTaskResumeAll+0x128>)
 801408e:	6013      	str	r3, [r2, #0]
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014094:	4613      	mov	r3, r2
 8014096:	009b      	lsls	r3, r3, #2
 8014098:	4413      	add	r3, r2
 801409a:	009b      	lsls	r3, r3, #2
 801409c:	4a27      	ldr	r2, [pc, #156]	@ (801413c <xTaskResumeAll+0x12c>)
 801409e:	441a      	add	r2, r3
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	3304      	adds	r3, #4
 80140a4:	4619      	mov	r1, r3
 80140a6:	4610      	mov	r0, r2
 80140a8:	f7ff f8bb 	bl	8013222 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80140b0:	4b23      	ldr	r3, [pc, #140]	@ (8014140 <xTaskResumeAll+0x130>)
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80140b6:	429a      	cmp	r2, r3
 80140b8:	d302      	bcc.n	80140c0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80140ba:	4b22      	ldr	r3, [pc, #136]	@ (8014144 <xTaskResumeAll+0x134>)
 80140bc:	2201      	movs	r2, #1
 80140be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80140c0:	4b1c      	ldr	r3, [pc, #112]	@ (8014134 <xTaskResumeAll+0x124>)
 80140c2:	681b      	ldr	r3, [r3, #0]
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d1cc      	bne.n	8014062 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d001      	beq.n	80140d2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80140ce:	f000 fb73 	bl	80147b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80140d2:	4b1d      	ldr	r3, [pc, #116]	@ (8014148 <xTaskResumeAll+0x138>)
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d010      	beq.n	8014100 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80140de:	f000 f859 	bl	8014194 <xTaskIncrementTick>
 80140e2:	4603      	mov	r3, r0
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d002      	beq.n	80140ee <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80140e8:	4b16      	ldr	r3, [pc, #88]	@ (8014144 <xTaskResumeAll+0x134>)
 80140ea:	2201      	movs	r2, #1
 80140ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	3b01      	subs	r3, #1
 80140f2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d1f1      	bne.n	80140de <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80140fa:	4b13      	ldr	r3, [pc, #76]	@ (8014148 <xTaskResumeAll+0x138>)
 80140fc:	2200      	movs	r2, #0
 80140fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014100:	4b10      	ldr	r3, [pc, #64]	@ (8014144 <xTaskResumeAll+0x134>)
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d009      	beq.n	801411c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014108:	2301      	movs	r3, #1
 801410a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801410c:	4b0f      	ldr	r3, [pc, #60]	@ (801414c <xTaskResumeAll+0x13c>)
 801410e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014112:	601a      	str	r2, [r3, #0]
 8014114:	f3bf 8f4f 	dsb	sy
 8014118:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801411c:	f000 fdc4 	bl	8014ca8 <vPortExitCritical>

	return xAlreadyYielded;
 8014120:	68bb      	ldr	r3, [r7, #8]
}
 8014122:	4618      	mov	r0, r3
 8014124:	3710      	adds	r7, #16
 8014126:	46bd      	mov	sp, r7
 8014128:	bd80      	pop	{r7, pc}
 801412a:	bf00      	nop
 801412c:	20001914 	.word	0x20001914
 8014130:	200018ec 	.word	0x200018ec
 8014134:	200018ac 	.word	0x200018ac
 8014138:	200018f4 	.word	0x200018f4
 801413c:	200017f0 	.word	0x200017f0
 8014140:	200017ec 	.word	0x200017ec
 8014144:	20001900 	.word	0x20001900
 8014148:	200018fc 	.word	0x200018fc
 801414c:	e000ed04 	.word	0xe000ed04

08014150 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014150:	b480      	push	{r7}
 8014152:	b083      	sub	sp, #12
 8014154:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8014156:	4b05      	ldr	r3, [pc, #20]	@ (801416c <xTaskGetTickCount+0x1c>)
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801415c:	687b      	ldr	r3, [r7, #4]
}
 801415e:	4618      	mov	r0, r3
 8014160:	370c      	adds	r7, #12
 8014162:	46bd      	mov	sp, r7
 8014164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014168:	4770      	bx	lr
 801416a:	bf00      	nop
 801416c:	200018f0 	.word	0x200018f0

08014170 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8014170:	b580      	push	{r7, lr}
 8014172:	b082      	sub	sp, #8
 8014174:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014176:	f000 fe49 	bl	8014e0c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801417a:	2300      	movs	r3, #0
 801417c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801417e:	4b04      	ldr	r3, [pc, #16]	@ (8014190 <xTaskGetTickCountFromISR+0x20>)
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014184:	683b      	ldr	r3, [r7, #0]
}
 8014186:	4618      	mov	r0, r3
 8014188:	3708      	adds	r7, #8
 801418a:	46bd      	mov	sp, r7
 801418c:	bd80      	pop	{r7, pc}
 801418e:	bf00      	nop
 8014190:	200018f0 	.word	0x200018f0

08014194 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014194:	b580      	push	{r7, lr}
 8014196:	b086      	sub	sp, #24
 8014198:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801419a:	2300      	movs	r3, #0
 801419c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801419e:	4b50      	ldr	r3, [pc, #320]	@ (80142e0 <xTaskIncrementTick+0x14c>)
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	f040 808b 	bne.w	80142be <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80141a8:	4b4e      	ldr	r3, [pc, #312]	@ (80142e4 <xTaskIncrementTick+0x150>)
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	3301      	adds	r3, #1
 80141ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80141b0:	4a4c      	ldr	r2, [pc, #304]	@ (80142e4 <xTaskIncrementTick+0x150>)
 80141b2:	693b      	ldr	r3, [r7, #16]
 80141b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80141b6:	693b      	ldr	r3, [r7, #16]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d123      	bne.n	8014204 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80141bc:	4b4a      	ldr	r3, [pc, #296]	@ (80142e8 <xTaskIncrementTick+0x154>)
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d00d      	beq.n	80141e2 <xTaskIncrementTick+0x4e>
	__asm volatile
 80141c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141ca:	b672      	cpsid	i
 80141cc:	f383 8811 	msr	BASEPRI, r3
 80141d0:	f3bf 8f6f 	isb	sy
 80141d4:	f3bf 8f4f 	dsb	sy
 80141d8:	b662      	cpsie	i
 80141da:	603b      	str	r3, [r7, #0]
}
 80141dc:	bf00      	nop
 80141de:	bf00      	nop
 80141e0:	e7fd      	b.n	80141de <xTaskIncrementTick+0x4a>
 80141e2:	4b41      	ldr	r3, [pc, #260]	@ (80142e8 <xTaskIncrementTick+0x154>)
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	60fb      	str	r3, [r7, #12]
 80141e8:	4b40      	ldr	r3, [pc, #256]	@ (80142ec <xTaskIncrementTick+0x158>)
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	4a3e      	ldr	r2, [pc, #248]	@ (80142e8 <xTaskIncrementTick+0x154>)
 80141ee:	6013      	str	r3, [r2, #0]
 80141f0:	4a3e      	ldr	r2, [pc, #248]	@ (80142ec <xTaskIncrementTick+0x158>)
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	6013      	str	r3, [r2, #0]
 80141f6:	4b3e      	ldr	r3, [pc, #248]	@ (80142f0 <xTaskIncrementTick+0x15c>)
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	3301      	adds	r3, #1
 80141fc:	4a3c      	ldr	r2, [pc, #240]	@ (80142f0 <xTaskIncrementTick+0x15c>)
 80141fe:	6013      	str	r3, [r2, #0]
 8014200:	f000 fada 	bl	80147b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014204:	4b3b      	ldr	r3, [pc, #236]	@ (80142f4 <xTaskIncrementTick+0x160>)
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	693a      	ldr	r2, [r7, #16]
 801420a:	429a      	cmp	r2, r3
 801420c:	d348      	bcc.n	80142a0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801420e:	4b36      	ldr	r3, [pc, #216]	@ (80142e8 <xTaskIncrementTick+0x154>)
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	2b00      	cmp	r3, #0
 8014216:	d104      	bne.n	8014222 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014218:	4b36      	ldr	r3, [pc, #216]	@ (80142f4 <xTaskIncrementTick+0x160>)
 801421a:	f04f 32ff 	mov.w	r2, #4294967295
 801421e:	601a      	str	r2, [r3, #0]
					break;
 8014220:	e03e      	b.n	80142a0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014222:	4b31      	ldr	r3, [pc, #196]	@ (80142e8 <xTaskIncrementTick+0x154>)
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	68db      	ldr	r3, [r3, #12]
 8014228:	68db      	ldr	r3, [r3, #12]
 801422a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801422c:	68bb      	ldr	r3, [r7, #8]
 801422e:	685b      	ldr	r3, [r3, #4]
 8014230:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014232:	693a      	ldr	r2, [r7, #16]
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	429a      	cmp	r2, r3
 8014238:	d203      	bcs.n	8014242 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801423a:	4a2e      	ldr	r2, [pc, #184]	@ (80142f4 <xTaskIncrementTick+0x160>)
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014240:	e02e      	b.n	80142a0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014242:	68bb      	ldr	r3, [r7, #8]
 8014244:	3304      	adds	r3, #4
 8014246:	4618      	mov	r0, r3
 8014248:	f7ff f848 	bl	80132dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801424c:	68bb      	ldr	r3, [r7, #8]
 801424e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014250:	2b00      	cmp	r3, #0
 8014252:	d004      	beq.n	801425e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014254:	68bb      	ldr	r3, [r7, #8]
 8014256:	3318      	adds	r3, #24
 8014258:	4618      	mov	r0, r3
 801425a:	f7ff f83f 	bl	80132dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801425e:	68bb      	ldr	r3, [r7, #8]
 8014260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014262:	2201      	movs	r2, #1
 8014264:	409a      	lsls	r2, r3
 8014266:	4b24      	ldr	r3, [pc, #144]	@ (80142f8 <xTaskIncrementTick+0x164>)
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	4313      	orrs	r3, r2
 801426c:	4a22      	ldr	r2, [pc, #136]	@ (80142f8 <xTaskIncrementTick+0x164>)
 801426e:	6013      	str	r3, [r2, #0]
 8014270:	68bb      	ldr	r3, [r7, #8]
 8014272:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014274:	4613      	mov	r3, r2
 8014276:	009b      	lsls	r3, r3, #2
 8014278:	4413      	add	r3, r2
 801427a:	009b      	lsls	r3, r3, #2
 801427c:	4a1f      	ldr	r2, [pc, #124]	@ (80142fc <xTaskIncrementTick+0x168>)
 801427e:	441a      	add	r2, r3
 8014280:	68bb      	ldr	r3, [r7, #8]
 8014282:	3304      	adds	r3, #4
 8014284:	4619      	mov	r1, r3
 8014286:	4610      	mov	r0, r2
 8014288:	f7fe ffcb 	bl	8013222 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801428c:	68bb      	ldr	r3, [r7, #8]
 801428e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014290:	4b1b      	ldr	r3, [pc, #108]	@ (8014300 <xTaskIncrementTick+0x16c>)
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014296:	429a      	cmp	r2, r3
 8014298:	d3b9      	bcc.n	801420e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 801429a:	2301      	movs	r3, #1
 801429c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801429e:	e7b6      	b.n	801420e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80142a0:	4b17      	ldr	r3, [pc, #92]	@ (8014300 <xTaskIncrementTick+0x16c>)
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80142a6:	4915      	ldr	r1, [pc, #84]	@ (80142fc <xTaskIncrementTick+0x168>)
 80142a8:	4613      	mov	r3, r2
 80142aa:	009b      	lsls	r3, r3, #2
 80142ac:	4413      	add	r3, r2
 80142ae:	009b      	lsls	r3, r3, #2
 80142b0:	440b      	add	r3, r1
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	2b01      	cmp	r3, #1
 80142b6:	d907      	bls.n	80142c8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80142b8:	2301      	movs	r3, #1
 80142ba:	617b      	str	r3, [r7, #20]
 80142bc:	e004      	b.n	80142c8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80142be:	4b11      	ldr	r3, [pc, #68]	@ (8014304 <xTaskIncrementTick+0x170>)
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	3301      	adds	r3, #1
 80142c4:	4a0f      	ldr	r2, [pc, #60]	@ (8014304 <xTaskIncrementTick+0x170>)
 80142c6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80142c8:	4b0f      	ldr	r3, [pc, #60]	@ (8014308 <xTaskIncrementTick+0x174>)
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d001      	beq.n	80142d4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80142d0:	2301      	movs	r3, #1
 80142d2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80142d4:	697b      	ldr	r3, [r7, #20]
}
 80142d6:	4618      	mov	r0, r3
 80142d8:	3718      	adds	r7, #24
 80142da:	46bd      	mov	sp, r7
 80142dc:	bd80      	pop	{r7, pc}
 80142de:	bf00      	nop
 80142e0:	20001914 	.word	0x20001914
 80142e4:	200018f0 	.word	0x200018f0
 80142e8:	200018a4 	.word	0x200018a4
 80142ec:	200018a8 	.word	0x200018a8
 80142f0:	20001904 	.word	0x20001904
 80142f4:	2000190c 	.word	0x2000190c
 80142f8:	200018f4 	.word	0x200018f4
 80142fc:	200017f0 	.word	0x200017f0
 8014300:	200017ec 	.word	0x200017ec
 8014304:	200018fc 	.word	0x200018fc
 8014308:	20001900 	.word	0x20001900

0801430c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801430c:	b580      	push	{r7, lr}
 801430e:	b088      	sub	sp, #32
 8014310:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014312:	4b3b      	ldr	r3, [pc, #236]	@ (8014400 <vTaskSwitchContext+0xf4>)
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	2b00      	cmp	r3, #0
 8014318:	d003      	beq.n	8014322 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801431a:	4b3a      	ldr	r3, [pc, #232]	@ (8014404 <vTaskSwitchContext+0xf8>)
 801431c:	2201      	movs	r2, #1
 801431e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014320:	e069      	b.n	80143f6 <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 8014322:	4b38      	ldr	r3, [pc, #224]	@ (8014404 <vTaskSwitchContext+0xf8>)
 8014324:	2200      	movs	r2, #0
 8014326:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8014328:	4b37      	ldr	r3, [pc, #220]	@ (8014408 <vTaskSwitchContext+0xfc>)
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801432e:	61fb      	str	r3, [r7, #28]
 8014330:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8014334:	61bb      	str	r3, [r7, #24]
 8014336:	69fb      	ldr	r3, [r7, #28]
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	69ba      	ldr	r2, [r7, #24]
 801433c:	429a      	cmp	r2, r3
 801433e:	d111      	bne.n	8014364 <vTaskSwitchContext+0x58>
 8014340:	69fb      	ldr	r3, [r7, #28]
 8014342:	3304      	adds	r3, #4
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	69ba      	ldr	r2, [r7, #24]
 8014348:	429a      	cmp	r2, r3
 801434a:	d10b      	bne.n	8014364 <vTaskSwitchContext+0x58>
 801434c:	69fb      	ldr	r3, [r7, #28]
 801434e:	3308      	adds	r3, #8
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	69ba      	ldr	r2, [r7, #24]
 8014354:	429a      	cmp	r2, r3
 8014356:	d105      	bne.n	8014364 <vTaskSwitchContext+0x58>
 8014358:	69fb      	ldr	r3, [r7, #28]
 801435a:	330c      	adds	r3, #12
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	69ba      	ldr	r2, [r7, #24]
 8014360:	429a      	cmp	r2, r3
 8014362:	d008      	beq.n	8014376 <vTaskSwitchContext+0x6a>
 8014364:	4b28      	ldr	r3, [pc, #160]	@ (8014408 <vTaskSwitchContext+0xfc>)
 8014366:	681a      	ldr	r2, [r3, #0]
 8014368:	4b27      	ldr	r3, [pc, #156]	@ (8014408 <vTaskSwitchContext+0xfc>)
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	3334      	adds	r3, #52	@ 0x34
 801436e:	4619      	mov	r1, r3
 8014370:	4610      	mov	r0, r2
 8014372:	f7ed fb6e 	bl	8001a52 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014376:	4b25      	ldr	r3, [pc, #148]	@ (801440c <vTaskSwitchContext+0x100>)
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	fab3 f383 	clz	r3, r3
 8014382:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8014384:	7afb      	ldrb	r3, [r7, #11]
 8014386:	f1c3 031f 	rsb	r3, r3, #31
 801438a:	617b      	str	r3, [r7, #20]
 801438c:	4920      	ldr	r1, [pc, #128]	@ (8014410 <vTaskSwitchContext+0x104>)
 801438e:	697a      	ldr	r2, [r7, #20]
 8014390:	4613      	mov	r3, r2
 8014392:	009b      	lsls	r3, r3, #2
 8014394:	4413      	add	r3, r2
 8014396:	009b      	lsls	r3, r3, #2
 8014398:	440b      	add	r3, r1
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	2b00      	cmp	r3, #0
 801439e:	d10d      	bne.n	80143bc <vTaskSwitchContext+0xb0>
	__asm volatile
 80143a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80143a4:	b672      	cpsid	i
 80143a6:	f383 8811 	msr	BASEPRI, r3
 80143aa:	f3bf 8f6f 	isb	sy
 80143ae:	f3bf 8f4f 	dsb	sy
 80143b2:	b662      	cpsie	i
 80143b4:	607b      	str	r3, [r7, #4]
}
 80143b6:	bf00      	nop
 80143b8:	bf00      	nop
 80143ba:	e7fd      	b.n	80143b8 <vTaskSwitchContext+0xac>
 80143bc:	697a      	ldr	r2, [r7, #20]
 80143be:	4613      	mov	r3, r2
 80143c0:	009b      	lsls	r3, r3, #2
 80143c2:	4413      	add	r3, r2
 80143c4:	009b      	lsls	r3, r3, #2
 80143c6:	4a12      	ldr	r2, [pc, #72]	@ (8014410 <vTaskSwitchContext+0x104>)
 80143c8:	4413      	add	r3, r2
 80143ca:	613b      	str	r3, [r7, #16]
 80143cc:	693b      	ldr	r3, [r7, #16]
 80143ce:	685b      	ldr	r3, [r3, #4]
 80143d0:	685a      	ldr	r2, [r3, #4]
 80143d2:	693b      	ldr	r3, [r7, #16]
 80143d4:	605a      	str	r2, [r3, #4]
 80143d6:	693b      	ldr	r3, [r7, #16]
 80143d8:	685a      	ldr	r2, [r3, #4]
 80143da:	693b      	ldr	r3, [r7, #16]
 80143dc:	3308      	adds	r3, #8
 80143de:	429a      	cmp	r2, r3
 80143e0:	d104      	bne.n	80143ec <vTaskSwitchContext+0xe0>
 80143e2:	693b      	ldr	r3, [r7, #16]
 80143e4:	685b      	ldr	r3, [r3, #4]
 80143e6:	685a      	ldr	r2, [r3, #4]
 80143e8:	693b      	ldr	r3, [r7, #16]
 80143ea:	605a      	str	r2, [r3, #4]
 80143ec:	693b      	ldr	r3, [r7, #16]
 80143ee:	685b      	ldr	r3, [r3, #4]
 80143f0:	68db      	ldr	r3, [r3, #12]
 80143f2:	4a05      	ldr	r2, [pc, #20]	@ (8014408 <vTaskSwitchContext+0xfc>)
 80143f4:	6013      	str	r3, [r2, #0]
}
 80143f6:	bf00      	nop
 80143f8:	3720      	adds	r7, #32
 80143fa:	46bd      	mov	sp, r7
 80143fc:	bd80      	pop	{r7, pc}
 80143fe:	bf00      	nop
 8014400:	20001914 	.word	0x20001914
 8014404:	20001900 	.word	0x20001900
 8014408:	200017ec 	.word	0x200017ec
 801440c:	200018f4 	.word	0x200018f4
 8014410:	200017f0 	.word	0x200017f0

08014414 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014414:	b580      	push	{r7, lr}
 8014416:	b084      	sub	sp, #16
 8014418:	af00      	add	r7, sp, #0
 801441a:	6078      	str	r0, [r7, #4]
 801441c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	2b00      	cmp	r3, #0
 8014422:	d10d      	bne.n	8014440 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8014424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014428:	b672      	cpsid	i
 801442a:	f383 8811 	msr	BASEPRI, r3
 801442e:	f3bf 8f6f 	isb	sy
 8014432:	f3bf 8f4f 	dsb	sy
 8014436:	b662      	cpsie	i
 8014438:	60fb      	str	r3, [r7, #12]
}
 801443a:	bf00      	nop
 801443c:	bf00      	nop
 801443e:	e7fd      	b.n	801443c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014440:	4b07      	ldr	r3, [pc, #28]	@ (8014460 <vTaskPlaceOnEventList+0x4c>)
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	3318      	adds	r3, #24
 8014446:	4619      	mov	r1, r3
 8014448:	6878      	ldr	r0, [r7, #4]
 801444a:	f7fe ff0e 	bl	801326a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801444e:	2101      	movs	r1, #1
 8014450:	6838      	ldr	r0, [r7, #0]
 8014452:	f000 fa7b 	bl	801494c <prvAddCurrentTaskToDelayedList>
}
 8014456:	bf00      	nop
 8014458:	3710      	adds	r7, #16
 801445a:	46bd      	mov	sp, r7
 801445c:	bd80      	pop	{r7, pc}
 801445e:	bf00      	nop
 8014460:	200017ec 	.word	0x200017ec

08014464 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014464:	b580      	push	{r7, lr}
 8014466:	b086      	sub	sp, #24
 8014468:	af00      	add	r7, sp, #0
 801446a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	68db      	ldr	r3, [r3, #12]
 8014470:	68db      	ldr	r3, [r3, #12]
 8014472:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014474:	693b      	ldr	r3, [r7, #16]
 8014476:	2b00      	cmp	r3, #0
 8014478:	d10d      	bne.n	8014496 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 801447a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801447e:	b672      	cpsid	i
 8014480:	f383 8811 	msr	BASEPRI, r3
 8014484:	f3bf 8f6f 	isb	sy
 8014488:	f3bf 8f4f 	dsb	sy
 801448c:	b662      	cpsie	i
 801448e:	60fb      	str	r3, [r7, #12]
}
 8014490:	bf00      	nop
 8014492:	bf00      	nop
 8014494:	e7fd      	b.n	8014492 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014496:	693b      	ldr	r3, [r7, #16]
 8014498:	3318      	adds	r3, #24
 801449a:	4618      	mov	r0, r3
 801449c:	f7fe ff1e 	bl	80132dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80144a0:	4b1d      	ldr	r3, [pc, #116]	@ (8014518 <xTaskRemoveFromEventList+0xb4>)
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d11c      	bne.n	80144e2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80144a8:	693b      	ldr	r3, [r7, #16]
 80144aa:	3304      	adds	r3, #4
 80144ac:	4618      	mov	r0, r3
 80144ae:	f7fe ff15 	bl	80132dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80144b2:	693b      	ldr	r3, [r7, #16]
 80144b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144b6:	2201      	movs	r2, #1
 80144b8:	409a      	lsls	r2, r3
 80144ba:	4b18      	ldr	r3, [pc, #96]	@ (801451c <xTaskRemoveFromEventList+0xb8>)
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	4313      	orrs	r3, r2
 80144c0:	4a16      	ldr	r2, [pc, #88]	@ (801451c <xTaskRemoveFromEventList+0xb8>)
 80144c2:	6013      	str	r3, [r2, #0]
 80144c4:	693b      	ldr	r3, [r7, #16]
 80144c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80144c8:	4613      	mov	r3, r2
 80144ca:	009b      	lsls	r3, r3, #2
 80144cc:	4413      	add	r3, r2
 80144ce:	009b      	lsls	r3, r3, #2
 80144d0:	4a13      	ldr	r2, [pc, #76]	@ (8014520 <xTaskRemoveFromEventList+0xbc>)
 80144d2:	441a      	add	r2, r3
 80144d4:	693b      	ldr	r3, [r7, #16]
 80144d6:	3304      	adds	r3, #4
 80144d8:	4619      	mov	r1, r3
 80144da:	4610      	mov	r0, r2
 80144dc:	f7fe fea1 	bl	8013222 <vListInsertEnd>
 80144e0:	e005      	b.n	80144ee <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80144e2:	693b      	ldr	r3, [r7, #16]
 80144e4:	3318      	adds	r3, #24
 80144e6:	4619      	mov	r1, r3
 80144e8:	480e      	ldr	r0, [pc, #56]	@ (8014524 <xTaskRemoveFromEventList+0xc0>)
 80144ea:	f7fe fe9a 	bl	8013222 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80144ee:	693b      	ldr	r3, [r7, #16]
 80144f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80144f2:	4b0d      	ldr	r3, [pc, #52]	@ (8014528 <xTaskRemoveFromEventList+0xc4>)
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144f8:	429a      	cmp	r2, r3
 80144fa:	d905      	bls.n	8014508 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80144fc:	2301      	movs	r3, #1
 80144fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014500:	4b0a      	ldr	r3, [pc, #40]	@ (801452c <xTaskRemoveFromEventList+0xc8>)
 8014502:	2201      	movs	r2, #1
 8014504:	601a      	str	r2, [r3, #0]
 8014506:	e001      	b.n	801450c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8014508:	2300      	movs	r3, #0
 801450a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801450c:	697b      	ldr	r3, [r7, #20]
}
 801450e:	4618      	mov	r0, r3
 8014510:	3718      	adds	r7, #24
 8014512:	46bd      	mov	sp, r7
 8014514:	bd80      	pop	{r7, pc}
 8014516:	bf00      	nop
 8014518:	20001914 	.word	0x20001914
 801451c:	200018f4 	.word	0x200018f4
 8014520:	200017f0 	.word	0x200017f0
 8014524:	200018ac 	.word	0x200018ac
 8014528:	200017ec 	.word	0x200017ec
 801452c:	20001900 	.word	0x20001900

08014530 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014530:	b480      	push	{r7}
 8014532:	b083      	sub	sp, #12
 8014534:	af00      	add	r7, sp, #0
 8014536:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014538:	4b06      	ldr	r3, [pc, #24]	@ (8014554 <vTaskInternalSetTimeOutState+0x24>)
 801453a:	681a      	ldr	r2, [r3, #0]
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014540:	4b05      	ldr	r3, [pc, #20]	@ (8014558 <vTaskInternalSetTimeOutState+0x28>)
 8014542:	681a      	ldr	r2, [r3, #0]
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	605a      	str	r2, [r3, #4]
}
 8014548:	bf00      	nop
 801454a:	370c      	adds	r7, #12
 801454c:	46bd      	mov	sp, r7
 801454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014552:	4770      	bx	lr
 8014554:	20001904 	.word	0x20001904
 8014558:	200018f0 	.word	0x200018f0

0801455c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801455c:	b580      	push	{r7, lr}
 801455e:	b088      	sub	sp, #32
 8014560:	af00      	add	r7, sp, #0
 8014562:	6078      	str	r0, [r7, #4]
 8014564:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	2b00      	cmp	r3, #0
 801456a:	d10d      	bne.n	8014588 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 801456c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014570:	b672      	cpsid	i
 8014572:	f383 8811 	msr	BASEPRI, r3
 8014576:	f3bf 8f6f 	isb	sy
 801457a:	f3bf 8f4f 	dsb	sy
 801457e:	b662      	cpsie	i
 8014580:	613b      	str	r3, [r7, #16]
}
 8014582:	bf00      	nop
 8014584:	bf00      	nop
 8014586:	e7fd      	b.n	8014584 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8014588:	683b      	ldr	r3, [r7, #0]
 801458a:	2b00      	cmp	r3, #0
 801458c:	d10d      	bne.n	80145aa <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 801458e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014592:	b672      	cpsid	i
 8014594:	f383 8811 	msr	BASEPRI, r3
 8014598:	f3bf 8f6f 	isb	sy
 801459c:	f3bf 8f4f 	dsb	sy
 80145a0:	b662      	cpsie	i
 80145a2:	60fb      	str	r3, [r7, #12]
}
 80145a4:	bf00      	nop
 80145a6:	bf00      	nop
 80145a8:	e7fd      	b.n	80145a6 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80145aa:	f000 fb47 	bl	8014c3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80145ae:	4b1d      	ldr	r3, [pc, #116]	@ (8014624 <xTaskCheckForTimeOut+0xc8>)
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	685b      	ldr	r3, [r3, #4]
 80145b8:	69ba      	ldr	r2, [r7, #24]
 80145ba:	1ad3      	subs	r3, r2, r3
 80145bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80145be:	683b      	ldr	r3, [r7, #0]
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145c6:	d102      	bne.n	80145ce <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80145c8:	2300      	movs	r3, #0
 80145ca:	61fb      	str	r3, [r7, #28]
 80145cc:	e023      	b.n	8014616 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	681a      	ldr	r2, [r3, #0]
 80145d2:	4b15      	ldr	r3, [pc, #84]	@ (8014628 <xTaskCheckForTimeOut+0xcc>)
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	429a      	cmp	r2, r3
 80145d8:	d007      	beq.n	80145ea <xTaskCheckForTimeOut+0x8e>
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	685b      	ldr	r3, [r3, #4]
 80145de:	69ba      	ldr	r2, [r7, #24]
 80145e0:	429a      	cmp	r2, r3
 80145e2:	d302      	bcc.n	80145ea <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80145e4:	2301      	movs	r3, #1
 80145e6:	61fb      	str	r3, [r7, #28]
 80145e8:	e015      	b.n	8014616 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80145ea:	683b      	ldr	r3, [r7, #0]
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	697a      	ldr	r2, [r7, #20]
 80145f0:	429a      	cmp	r2, r3
 80145f2:	d20b      	bcs.n	801460c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80145f4:	683b      	ldr	r3, [r7, #0]
 80145f6:	681a      	ldr	r2, [r3, #0]
 80145f8:	697b      	ldr	r3, [r7, #20]
 80145fa:	1ad2      	subs	r2, r2, r3
 80145fc:	683b      	ldr	r3, [r7, #0]
 80145fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014600:	6878      	ldr	r0, [r7, #4]
 8014602:	f7ff ff95 	bl	8014530 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014606:	2300      	movs	r3, #0
 8014608:	61fb      	str	r3, [r7, #28]
 801460a:	e004      	b.n	8014616 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 801460c:	683b      	ldr	r3, [r7, #0]
 801460e:	2200      	movs	r2, #0
 8014610:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014612:	2301      	movs	r3, #1
 8014614:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014616:	f000 fb47 	bl	8014ca8 <vPortExitCritical>

	return xReturn;
 801461a:	69fb      	ldr	r3, [r7, #28]
}
 801461c:	4618      	mov	r0, r3
 801461e:	3720      	adds	r7, #32
 8014620:	46bd      	mov	sp, r7
 8014622:	bd80      	pop	{r7, pc}
 8014624:	200018f0 	.word	0x200018f0
 8014628:	20001904 	.word	0x20001904

0801462c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801462c:	b480      	push	{r7}
 801462e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014630:	4b03      	ldr	r3, [pc, #12]	@ (8014640 <vTaskMissedYield+0x14>)
 8014632:	2201      	movs	r2, #1
 8014634:	601a      	str	r2, [r3, #0]
}
 8014636:	bf00      	nop
 8014638:	46bd      	mov	sp, r7
 801463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801463e:	4770      	bx	lr
 8014640:	20001900 	.word	0x20001900

08014644 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014644:	b580      	push	{r7, lr}
 8014646:	b082      	sub	sp, #8
 8014648:	af00      	add	r7, sp, #0
 801464a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801464c:	f000 f854 	bl	80146f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014650:	4b07      	ldr	r3, [pc, #28]	@ (8014670 <prvIdleTask+0x2c>)
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	2b01      	cmp	r3, #1
 8014656:	d907      	bls.n	8014668 <prvIdleTask+0x24>
			{
				taskYIELD();
 8014658:	4b06      	ldr	r3, [pc, #24]	@ (8014674 <prvIdleTask+0x30>)
 801465a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801465e:	601a      	str	r2, [r3, #0]
 8014660:	f3bf 8f4f 	dsb	sy
 8014664:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8014668:	f7ed f9ec 	bl	8001a44 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 801466c:	e7ee      	b.n	801464c <prvIdleTask+0x8>
 801466e:	bf00      	nop
 8014670:	200017f0 	.word	0x200017f0
 8014674:	e000ed04 	.word	0xe000ed04

08014678 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014678:	b580      	push	{r7, lr}
 801467a:	b082      	sub	sp, #8
 801467c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801467e:	2300      	movs	r3, #0
 8014680:	607b      	str	r3, [r7, #4]
 8014682:	e00c      	b.n	801469e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014684:	687a      	ldr	r2, [r7, #4]
 8014686:	4613      	mov	r3, r2
 8014688:	009b      	lsls	r3, r3, #2
 801468a:	4413      	add	r3, r2
 801468c:	009b      	lsls	r3, r3, #2
 801468e:	4a12      	ldr	r2, [pc, #72]	@ (80146d8 <prvInitialiseTaskLists+0x60>)
 8014690:	4413      	add	r3, r2
 8014692:	4618      	mov	r0, r3
 8014694:	f7fe fd98 	bl	80131c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	3301      	adds	r3, #1
 801469c:	607b      	str	r3, [r7, #4]
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	2b06      	cmp	r3, #6
 80146a2:	d9ef      	bls.n	8014684 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80146a4:	480d      	ldr	r0, [pc, #52]	@ (80146dc <prvInitialiseTaskLists+0x64>)
 80146a6:	f7fe fd8f 	bl	80131c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80146aa:	480d      	ldr	r0, [pc, #52]	@ (80146e0 <prvInitialiseTaskLists+0x68>)
 80146ac:	f7fe fd8c 	bl	80131c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80146b0:	480c      	ldr	r0, [pc, #48]	@ (80146e4 <prvInitialiseTaskLists+0x6c>)
 80146b2:	f7fe fd89 	bl	80131c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80146b6:	480c      	ldr	r0, [pc, #48]	@ (80146e8 <prvInitialiseTaskLists+0x70>)
 80146b8:	f7fe fd86 	bl	80131c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80146bc:	480b      	ldr	r0, [pc, #44]	@ (80146ec <prvInitialiseTaskLists+0x74>)
 80146be:	f7fe fd83 	bl	80131c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80146c2:	4b0b      	ldr	r3, [pc, #44]	@ (80146f0 <prvInitialiseTaskLists+0x78>)
 80146c4:	4a05      	ldr	r2, [pc, #20]	@ (80146dc <prvInitialiseTaskLists+0x64>)
 80146c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80146c8:	4b0a      	ldr	r3, [pc, #40]	@ (80146f4 <prvInitialiseTaskLists+0x7c>)
 80146ca:	4a05      	ldr	r2, [pc, #20]	@ (80146e0 <prvInitialiseTaskLists+0x68>)
 80146cc:	601a      	str	r2, [r3, #0]
}
 80146ce:	bf00      	nop
 80146d0:	3708      	adds	r7, #8
 80146d2:	46bd      	mov	sp, r7
 80146d4:	bd80      	pop	{r7, pc}
 80146d6:	bf00      	nop
 80146d8:	200017f0 	.word	0x200017f0
 80146dc:	2000187c 	.word	0x2000187c
 80146e0:	20001890 	.word	0x20001890
 80146e4:	200018ac 	.word	0x200018ac
 80146e8:	200018c0 	.word	0x200018c0
 80146ec:	200018d8 	.word	0x200018d8
 80146f0:	200018a4 	.word	0x200018a4
 80146f4:	200018a8 	.word	0x200018a8

080146f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80146f8:	b580      	push	{r7, lr}
 80146fa:	b082      	sub	sp, #8
 80146fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80146fe:	e019      	b.n	8014734 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014700:	f000 fa9c 	bl	8014c3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014704:	4b10      	ldr	r3, [pc, #64]	@ (8014748 <prvCheckTasksWaitingTermination+0x50>)
 8014706:	68db      	ldr	r3, [r3, #12]
 8014708:	68db      	ldr	r3, [r3, #12]
 801470a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	3304      	adds	r3, #4
 8014710:	4618      	mov	r0, r3
 8014712:	f7fe fde3 	bl	80132dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014716:	4b0d      	ldr	r3, [pc, #52]	@ (801474c <prvCheckTasksWaitingTermination+0x54>)
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	3b01      	subs	r3, #1
 801471c:	4a0b      	ldr	r2, [pc, #44]	@ (801474c <prvCheckTasksWaitingTermination+0x54>)
 801471e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014720:	4b0b      	ldr	r3, [pc, #44]	@ (8014750 <prvCheckTasksWaitingTermination+0x58>)
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	3b01      	subs	r3, #1
 8014726:	4a0a      	ldr	r2, [pc, #40]	@ (8014750 <prvCheckTasksWaitingTermination+0x58>)
 8014728:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801472a:	f000 fabd 	bl	8014ca8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801472e:	6878      	ldr	r0, [r7, #4]
 8014730:	f000 f810 	bl	8014754 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014734:	4b06      	ldr	r3, [pc, #24]	@ (8014750 <prvCheckTasksWaitingTermination+0x58>)
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d1e1      	bne.n	8014700 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801473c:	bf00      	nop
 801473e:	bf00      	nop
 8014740:	3708      	adds	r7, #8
 8014742:	46bd      	mov	sp, r7
 8014744:	bd80      	pop	{r7, pc}
 8014746:	bf00      	nop
 8014748:	200018c0 	.word	0x200018c0
 801474c:	200018ec 	.word	0x200018ec
 8014750:	200018d4 	.word	0x200018d4

08014754 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014754:	b580      	push	{r7, lr}
 8014756:	b084      	sub	sp, #16
 8014758:	af00      	add	r7, sp, #0
 801475a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8014762:	2b00      	cmp	r3, #0
 8014764:	d108      	bne.n	8014778 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801476a:	4618      	mov	r0, r3
 801476c:	f000 fc66 	bl	801503c <vPortFree>
				vPortFree( pxTCB );
 8014770:	6878      	ldr	r0, [r7, #4]
 8014772:	f000 fc63 	bl	801503c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014776:	e01b      	b.n	80147b0 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 801477e:	2b01      	cmp	r3, #1
 8014780:	d103      	bne.n	801478a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014782:	6878      	ldr	r0, [r7, #4]
 8014784:	f000 fc5a 	bl	801503c <vPortFree>
	}
 8014788:	e012      	b.n	80147b0 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8014790:	2b02      	cmp	r3, #2
 8014792:	d00d      	beq.n	80147b0 <prvDeleteTCB+0x5c>
	__asm volatile
 8014794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014798:	b672      	cpsid	i
 801479a:	f383 8811 	msr	BASEPRI, r3
 801479e:	f3bf 8f6f 	isb	sy
 80147a2:	f3bf 8f4f 	dsb	sy
 80147a6:	b662      	cpsie	i
 80147a8:	60fb      	str	r3, [r7, #12]
}
 80147aa:	bf00      	nop
 80147ac:	bf00      	nop
 80147ae:	e7fd      	b.n	80147ac <prvDeleteTCB+0x58>
	}
 80147b0:	bf00      	nop
 80147b2:	3710      	adds	r7, #16
 80147b4:	46bd      	mov	sp, r7
 80147b6:	bd80      	pop	{r7, pc}

080147b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80147b8:	b480      	push	{r7}
 80147ba:	b083      	sub	sp, #12
 80147bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80147be:	4b0c      	ldr	r3, [pc, #48]	@ (80147f0 <prvResetNextTaskUnblockTime+0x38>)
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d104      	bne.n	80147d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80147c8:	4b0a      	ldr	r3, [pc, #40]	@ (80147f4 <prvResetNextTaskUnblockTime+0x3c>)
 80147ca:	f04f 32ff 	mov.w	r2, #4294967295
 80147ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80147d0:	e008      	b.n	80147e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80147d2:	4b07      	ldr	r3, [pc, #28]	@ (80147f0 <prvResetNextTaskUnblockTime+0x38>)
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	68db      	ldr	r3, [r3, #12]
 80147d8:	68db      	ldr	r3, [r3, #12]
 80147da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	685b      	ldr	r3, [r3, #4]
 80147e0:	4a04      	ldr	r2, [pc, #16]	@ (80147f4 <prvResetNextTaskUnblockTime+0x3c>)
 80147e2:	6013      	str	r3, [r2, #0]
}
 80147e4:	bf00      	nop
 80147e6:	370c      	adds	r7, #12
 80147e8:	46bd      	mov	sp, r7
 80147ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ee:	4770      	bx	lr
 80147f0:	200018a4 	.word	0x200018a4
 80147f4:	2000190c 	.word	0x2000190c

080147f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80147f8:	b480      	push	{r7}
 80147fa:	b083      	sub	sp, #12
 80147fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80147fe:	4b0b      	ldr	r3, [pc, #44]	@ (801482c <xTaskGetSchedulerState+0x34>)
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	2b00      	cmp	r3, #0
 8014804:	d102      	bne.n	801480c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014806:	2301      	movs	r3, #1
 8014808:	607b      	str	r3, [r7, #4]
 801480a:	e008      	b.n	801481e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801480c:	4b08      	ldr	r3, [pc, #32]	@ (8014830 <xTaskGetSchedulerState+0x38>)
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	2b00      	cmp	r3, #0
 8014812:	d102      	bne.n	801481a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014814:	2302      	movs	r3, #2
 8014816:	607b      	str	r3, [r7, #4]
 8014818:	e001      	b.n	801481e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801481a:	2300      	movs	r3, #0
 801481c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801481e:	687b      	ldr	r3, [r7, #4]
	}
 8014820:	4618      	mov	r0, r3
 8014822:	370c      	adds	r7, #12
 8014824:	46bd      	mov	sp, r7
 8014826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801482a:	4770      	bx	lr
 801482c:	200018f8 	.word	0x200018f8
 8014830:	20001914 	.word	0x20001914

08014834 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014834:	b580      	push	{r7, lr}
 8014836:	b086      	sub	sp, #24
 8014838:	af00      	add	r7, sp, #0
 801483a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014840:	2300      	movs	r3, #0
 8014842:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	2b00      	cmp	r3, #0
 8014848:	d074      	beq.n	8014934 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801484a:	4b3d      	ldr	r3, [pc, #244]	@ (8014940 <xTaskPriorityDisinherit+0x10c>)
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	693a      	ldr	r2, [r7, #16]
 8014850:	429a      	cmp	r2, r3
 8014852:	d00d      	beq.n	8014870 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8014854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014858:	b672      	cpsid	i
 801485a:	f383 8811 	msr	BASEPRI, r3
 801485e:	f3bf 8f6f 	isb	sy
 8014862:	f3bf 8f4f 	dsb	sy
 8014866:	b662      	cpsie	i
 8014868:	60fb      	str	r3, [r7, #12]
}
 801486a:	bf00      	nop
 801486c:	bf00      	nop
 801486e:	e7fd      	b.n	801486c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8014870:	693b      	ldr	r3, [r7, #16]
 8014872:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014874:	2b00      	cmp	r3, #0
 8014876:	d10d      	bne.n	8014894 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8014878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801487c:	b672      	cpsid	i
 801487e:	f383 8811 	msr	BASEPRI, r3
 8014882:	f3bf 8f6f 	isb	sy
 8014886:	f3bf 8f4f 	dsb	sy
 801488a:	b662      	cpsie	i
 801488c:	60bb      	str	r3, [r7, #8]
}
 801488e:	bf00      	nop
 8014890:	bf00      	nop
 8014892:	e7fd      	b.n	8014890 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8014894:	693b      	ldr	r3, [r7, #16]
 8014896:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014898:	1e5a      	subs	r2, r3, #1
 801489a:	693b      	ldr	r3, [r7, #16]
 801489c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801489e:	693b      	ldr	r3, [r7, #16]
 80148a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80148a2:	693b      	ldr	r3, [r7, #16]
 80148a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80148a6:	429a      	cmp	r2, r3
 80148a8:	d044      	beq.n	8014934 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80148aa:	693b      	ldr	r3, [r7, #16]
 80148ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d140      	bne.n	8014934 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80148b2:	693b      	ldr	r3, [r7, #16]
 80148b4:	3304      	adds	r3, #4
 80148b6:	4618      	mov	r0, r3
 80148b8:	f7fe fd10 	bl	80132dc <uxListRemove>
 80148bc:	4603      	mov	r3, r0
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d115      	bne.n	80148ee <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80148c2:	693b      	ldr	r3, [r7, #16]
 80148c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80148c6:	491f      	ldr	r1, [pc, #124]	@ (8014944 <xTaskPriorityDisinherit+0x110>)
 80148c8:	4613      	mov	r3, r2
 80148ca:	009b      	lsls	r3, r3, #2
 80148cc:	4413      	add	r3, r2
 80148ce:	009b      	lsls	r3, r3, #2
 80148d0:	440b      	add	r3, r1
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d10a      	bne.n	80148ee <xTaskPriorityDisinherit+0xba>
 80148d8:	693b      	ldr	r3, [r7, #16]
 80148da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80148dc:	2201      	movs	r2, #1
 80148de:	fa02 f303 	lsl.w	r3, r2, r3
 80148e2:	43da      	mvns	r2, r3
 80148e4:	4b18      	ldr	r3, [pc, #96]	@ (8014948 <xTaskPriorityDisinherit+0x114>)
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	4013      	ands	r3, r2
 80148ea:	4a17      	ldr	r2, [pc, #92]	@ (8014948 <xTaskPriorityDisinherit+0x114>)
 80148ec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80148ee:	693b      	ldr	r3, [r7, #16]
 80148f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80148f2:	693b      	ldr	r3, [r7, #16]
 80148f4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80148f6:	693b      	ldr	r3, [r7, #16]
 80148f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80148fa:	f1c3 0207 	rsb	r2, r3, #7
 80148fe:	693b      	ldr	r3, [r7, #16]
 8014900:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014902:	693b      	ldr	r3, [r7, #16]
 8014904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014906:	2201      	movs	r2, #1
 8014908:	409a      	lsls	r2, r3
 801490a:	4b0f      	ldr	r3, [pc, #60]	@ (8014948 <xTaskPriorityDisinherit+0x114>)
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	4313      	orrs	r3, r2
 8014910:	4a0d      	ldr	r2, [pc, #52]	@ (8014948 <xTaskPriorityDisinherit+0x114>)
 8014912:	6013      	str	r3, [r2, #0]
 8014914:	693b      	ldr	r3, [r7, #16]
 8014916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014918:	4613      	mov	r3, r2
 801491a:	009b      	lsls	r3, r3, #2
 801491c:	4413      	add	r3, r2
 801491e:	009b      	lsls	r3, r3, #2
 8014920:	4a08      	ldr	r2, [pc, #32]	@ (8014944 <xTaskPriorityDisinherit+0x110>)
 8014922:	441a      	add	r2, r3
 8014924:	693b      	ldr	r3, [r7, #16]
 8014926:	3304      	adds	r3, #4
 8014928:	4619      	mov	r1, r3
 801492a:	4610      	mov	r0, r2
 801492c:	f7fe fc79 	bl	8013222 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014930:	2301      	movs	r3, #1
 8014932:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014934:	697b      	ldr	r3, [r7, #20]
	}
 8014936:	4618      	mov	r0, r3
 8014938:	3718      	adds	r7, #24
 801493a:	46bd      	mov	sp, r7
 801493c:	bd80      	pop	{r7, pc}
 801493e:	bf00      	nop
 8014940:	200017ec 	.word	0x200017ec
 8014944:	200017f0 	.word	0x200017f0
 8014948:	200018f4 	.word	0x200018f4

0801494c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801494c:	b580      	push	{r7, lr}
 801494e:	b084      	sub	sp, #16
 8014950:	af00      	add	r7, sp, #0
 8014952:	6078      	str	r0, [r7, #4]
 8014954:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014956:	4b29      	ldr	r3, [pc, #164]	@ (80149fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801495c:	4b28      	ldr	r3, [pc, #160]	@ (8014a00 <prvAddCurrentTaskToDelayedList+0xb4>)
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	3304      	adds	r3, #4
 8014962:	4618      	mov	r0, r3
 8014964:	f7fe fcba 	bl	80132dc <uxListRemove>
 8014968:	4603      	mov	r3, r0
 801496a:	2b00      	cmp	r3, #0
 801496c:	d10b      	bne.n	8014986 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801496e:	4b24      	ldr	r3, [pc, #144]	@ (8014a00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014974:	2201      	movs	r2, #1
 8014976:	fa02 f303 	lsl.w	r3, r2, r3
 801497a:	43da      	mvns	r2, r3
 801497c:	4b21      	ldr	r3, [pc, #132]	@ (8014a04 <prvAddCurrentTaskToDelayedList+0xb8>)
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	4013      	ands	r3, r2
 8014982:	4a20      	ldr	r2, [pc, #128]	@ (8014a04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014984:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	f1b3 3fff 	cmp.w	r3, #4294967295
 801498c:	d10a      	bne.n	80149a4 <prvAddCurrentTaskToDelayedList+0x58>
 801498e:	683b      	ldr	r3, [r7, #0]
 8014990:	2b00      	cmp	r3, #0
 8014992:	d007      	beq.n	80149a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014994:	4b1a      	ldr	r3, [pc, #104]	@ (8014a00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	3304      	adds	r3, #4
 801499a:	4619      	mov	r1, r3
 801499c:	481a      	ldr	r0, [pc, #104]	@ (8014a08 <prvAddCurrentTaskToDelayedList+0xbc>)
 801499e:	f7fe fc40 	bl	8013222 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80149a2:	e026      	b.n	80149f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80149a4:	68fa      	ldr	r2, [r7, #12]
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	4413      	add	r3, r2
 80149aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80149ac:	4b14      	ldr	r3, [pc, #80]	@ (8014a00 <prvAddCurrentTaskToDelayedList+0xb4>)
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	68ba      	ldr	r2, [r7, #8]
 80149b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80149b4:	68ba      	ldr	r2, [r7, #8]
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	429a      	cmp	r2, r3
 80149ba:	d209      	bcs.n	80149d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80149bc:	4b13      	ldr	r3, [pc, #76]	@ (8014a0c <prvAddCurrentTaskToDelayedList+0xc0>)
 80149be:	681a      	ldr	r2, [r3, #0]
 80149c0:	4b0f      	ldr	r3, [pc, #60]	@ (8014a00 <prvAddCurrentTaskToDelayedList+0xb4>)
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	3304      	adds	r3, #4
 80149c6:	4619      	mov	r1, r3
 80149c8:	4610      	mov	r0, r2
 80149ca:	f7fe fc4e 	bl	801326a <vListInsert>
}
 80149ce:	e010      	b.n	80149f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80149d0:	4b0f      	ldr	r3, [pc, #60]	@ (8014a10 <prvAddCurrentTaskToDelayedList+0xc4>)
 80149d2:	681a      	ldr	r2, [r3, #0]
 80149d4:	4b0a      	ldr	r3, [pc, #40]	@ (8014a00 <prvAddCurrentTaskToDelayedList+0xb4>)
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	3304      	adds	r3, #4
 80149da:	4619      	mov	r1, r3
 80149dc:	4610      	mov	r0, r2
 80149de:	f7fe fc44 	bl	801326a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80149e2:	4b0c      	ldr	r3, [pc, #48]	@ (8014a14 <prvAddCurrentTaskToDelayedList+0xc8>)
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	68ba      	ldr	r2, [r7, #8]
 80149e8:	429a      	cmp	r2, r3
 80149ea:	d202      	bcs.n	80149f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80149ec:	4a09      	ldr	r2, [pc, #36]	@ (8014a14 <prvAddCurrentTaskToDelayedList+0xc8>)
 80149ee:	68bb      	ldr	r3, [r7, #8]
 80149f0:	6013      	str	r3, [r2, #0]
}
 80149f2:	bf00      	nop
 80149f4:	3710      	adds	r7, #16
 80149f6:	46bd      	mov	sp, r7
 80149f8:	bd80      	pop	{r7, pc}
 80149fa:	bf00      	nop
 80149fc:	200018f0 	.word	0x200018f0
 8014a00:	200017ec 	.word	0x200017ec
 8014a04:	200018f4 	.word	0x200018f4
 8014a08:	200018d8 	.word	0x200018d8
 8014a0c:	200018a8 	.word	0x200018a8
 8014a10:	200018a4 	.word	0x200018a4
 8014a14:	2000190c 	.word	0x2000190c

08014a18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014a18:	b480      	push	{r7}
 8014a1a:	b085      	sub	sp, #20
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	60f8      	str	r0, [r7, #12]
 8014a20:	60b9      	str	r1, [r7, #8]
 8014a22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	3b04      	subs	r3, #4
 8014a28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8014a30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	3b04      	subs	r3, #4
 8014a36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014a38:	68bb      	ldr	r3, [r7, #8]
 8014a3a:	f023 0201 	bic.w	r2, r3, #1
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	3b04      	subs	r3, #4
 8014a46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014a48:	4a0c      	ldr	r2, [pc, #48]	@ (8014a7c <pxPortInitialiseStack+0x64>)
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	3b14      	subs	r3, #20
 8014a52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014a54:	687a      	ldr	r2, [r7, #4]
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	3b04      	subs	r3, #4
 8014a5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	f06f 0202 	mvn.w	r2, #2
 8014a66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	3b20      	subs	r3, #32
 8014a6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014a6e:	68fb      	ldr	r3, [r7, #12]
}
 8014a70:	4618      	mov	r0, r3
 8014a72:	3714      	adds	r7, #20
 8014a74:	46bd      	mov	sp, r7
 8014a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a7a:	4770      	bx	lr
 8014a7c:	08014a81 	.word	0x08014a81

08014a80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014a80:	b480      	push	{r7}
 8014a82:	b085      	sub	sp, #20
 8014a84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014a86:	2300      	movs	r3, #0
 8014a88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014a8a:	4b15      	ldr	r3, [pc, #84]	@ (8014ae0 <prvTaskExitError+0x60>)
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a92:	d00d      	beq.n	8014ab0 <prvTaskExitError+0x30>
	__asm volatile
 8014a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a98:	b672      	cpsid	i
 8014a9a:	f383 8811 	msr	BASEPRI, r3
 8014a9e:	f3bf 8f6f 	isb	sy
 8014aa2:	f3bf 8f4f 	dsb	sy
 8014aa6:	b662      	cpsie	i
 8014aa8:	60fb      	str	r3, [r7, #12]
}
 8014aaa:	bf00      	nop
 8014aac:	bf00      	nop
 8014aae:	e7fd      	b.n	8014aac <prvTaskExitError+0x2c>
	__asm volatile
 8014ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ab4:	b672      	cpsid	i
 8014ab6:	f383 8811 	msr	BASEPRI, r3
 8014aba:	f3bf 8f6f 	isb	sy
 8014abe:	f3bf 8f4f 	dsb	sy
 8014ac2:	b662      	cpsie	i
 8014ac4:	60bb      	str	r3, [r7, #8]
}
 8014ac6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014ac8:	bf00      	nop
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d0fc      	beq.n	8014aca <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014ad0:	bf00      	nop
 8014ad2:	bf00      	nop
 8014ad4:	3714      	adds	r7, #20
 8014ad6:	46bd      	mov	sp, r7
 8014ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014adc:	4770      	bx	lr
 8014ade:	bf00      	nop
 8014ae0:	2000006c 	.word	0x2000006c
	...

08014af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014af0:	4b07      	ldr	r3, [pc, #28]	@ (8014b10 <pxCurrentTCBConst2>)
 8014af2:	6819      	ldr	r1, [r3, #0]
 8014af4:	6808      	ldr	r0, [r1, #0]
 8014af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014afa:	f380 8809 	msr	PSP, r0
 8014afe:	f3bf 8f6f 	isb	sy
 8014b02:	f04f 0000 	mov.w	r0, #0
 8014b06:	f380 8811 	msr	BASEPRI, r0
 8014b0a:	4770      	bx	lr
 8014b0c:	f3af 8000 	nop.w

08014b10 <pxCurrentTCBConst2>:
 8014b10:	200017ec 	.word	0x200017ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014b14:	bf00      	nop
 8014b16:	bf00      	nop

08014b18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014b18:	4808      	ldr	r0, [pc, #32]	@ (8014b3c <prvPortStartFirstTask+0x24>)
 8014b1a:	6800      	ldr	r0, [r0, #0]
 8014b1c:	6800      	ldr	r0, [r0, #0]
 8014b1e:	f380 8808 	msr	MSP, r0
 8014b22:	f04f 0000 	mov.w	r0, #0
 8014b26:	f380 8814 	msr	CONTROL, r0
 8014b2a:	b662      	cpsie	i
 8014b2c:	b661      	cpsie	f
 8014b2e:	f3bf 8f4f 	dsb	sy
 8014b32:	f3bf 8f6f 	isb	sy
 8014b36:	df00      	svc	0
 8014b38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014b3a:	bf00      	nop
 8014b3c:	e000ed08 	.word	0xe000ed08

08014b40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014b40:	b580      	push	{r7, lr}
 8014b42:	b084      	sub	sp, #16
 8014b44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014b46:	4b37      	ldr	r3, [pc, #220]	@ (8014c24 <xPortStartScheduler+0xe4>)
 8014b48:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	781b      	ldrb	r3, [r3, #0]
 8014b4e:	b2db      	uxtb	r3, r3
 8014b50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	22ff      	movs	r2, #255	@ 0xff
 8014b56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	781b      	ldrb	r3, [r3, #0]
 8014b5c:	b2db      	uxtb	r3, r3
 8014b5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014b60:	78fb      	ldrb	r3, [r7, #3]
 8014b62:	b2db      	uxtb	r3, r3
 8014b64:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8014b68:	b2da      	uxtb	r2, r3
 8014b6a:	4b2f      	ldr	r3, [pc, #188]	@ (8014c28 <xPortStartScheduler+0xe8>)
 8014b6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014b6e:	4b2f      	ldr	r3, [pc, #188]	@ (8014c2c <xPortStartScheduler+0xec>)
 8014b70:	2207      	movs	r2, #7
 8014b72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014b74:	e009      	b.n	8014b8a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8014b76:	4b2d      	ldr	r3, [pc, #180]	@ (8014c2c <xPortStartScheduler+0xec>)
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	3b01      	subs	r3, #1
 8014b7c:	4a2b      	ldr	r2, [pc, #172]	@ (8014c2c <xPortStartScheduler+0xec>)
 8014b7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014b80:	78fb      	ldrb	r3, [r7, #3]
 8014b82:	b2db      	uxtb	r3, r3
 8014b84:	005b      	lsls	r3, r3, #1
 8014b86:	b2db      	uxtb	r3, r3
 8014b88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014b8a:	78fb      	ldrb	r3, [r7, #3]
 8014b8c:	b2db      	uxtb	r3, r3
 8014b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014b92:	2b80      	cmp	r3, #128	@ 0x80
 8014b94:	d0ef      	beq.n	8014b76 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014b96:	4b25      	ldr	r3, [pc, #148]	@ (8014c2c <xPortStartScheduler+0xec>)
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	f1c3 0307 	rsb	r3, r3, #7
 8014b9e:	2b04      	cmp	r3, #4
 8014ba0:	d00d      	beq.n	8014bbe <xPortStartScheduler+0x7e>
	__asm volatile
 8014ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ba6:	b672      	cpsid	i
 8014ba8:	f383 8811 	msr	BASEPRI, r3
 8014bac:	f3bf 8f6f 	isb	sy
 8014bb0:	f3bf 8f4f 	dsb	sy
 8014bb4:	b662      	cpsie	i
 8014bb6:	60bb      	str	r3, [r7, #8]
}
 8014bb8:	bf00      	nop
 8014bba:	bf00      	nop
 8014bbc:	e7fd      	b.n	8014bba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8014c2c <xPortStartScheduler+0xec>)
 8014bc0:	681b      	ldr	r3, [r3, #0]
 8014bc2:	021b      	lsls	r3, r3, #8
 8014bc4:	4a19      	ldr	r2, [pc, #100]	@ (8014c2c <xPortStartScheduler+0xec>)
 8014bc6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014bc8:	4b18      	ldr	r3, [pc, #96]	@ (8014c2c <xPortStartScheduler+0xec>)
 8014bca:	681b      	ldr	r3, [r3, #0]
 8014bcc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8014bd0:	4a16      	ldr	r2, [pc, #88]	@ (8014c2c <xPortStartScheduler+0xec>)
 8014bd2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	b2da      	uxtb	r2, r3
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014bdc:	4b14      	ldr	r3, [pc, #80]	@ (8014c30 <xPortStartScheduler+0xf0>)
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	4a13      	ldr	r2, [pc, #76]	@ (8014c30 <xPortStartScheduler+0xf0>)
 8014be2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8014be6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014be8:	4b11      	ldr	r3, [pc, #68]	@ (8014c30 <xPortStartScheduler+0xf0>)
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	4a10      	ldr	r2, [pc, #64]	@ (8014c30 <xPortStartScheduler+0xf0>)
 8014bee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8014bf2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014bf4:	f000 f8dc 	bl	8014db0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8014c34 <xPortStartScheduler+0xf4>)
 8014bfa:	2200      	movs	r2, #0
 8014bfc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014bfe:	f000 f8fb 	bl	8014df8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014c02:	4b0d      	ldr	r3, [pc, #52]	@ (8014c38 <xPortStartScheduler+0xf8>)
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	4a0c      	ldr	r2, [pc, #48]	@ (8014c38 <xPortStartScheduler+0xf8>)
 8014c08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8014c0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014c0e:	f7ff ff83 	bl	8014b18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014c12:	f7ff fb7b 	bl	801430c <vTaskSwitchContext>
	prvTaskExitError();
 8014c16:	f7ff ff33 	bl	8014a80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014c1a:	2300      	movs	r3, #0
}
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	3710      	adds	r7, #16
 8014c20:	46bd      	mov	sp, r7
 8014c22:	bd80      	pop	{r7, pc}
 8014c24:	e000e400 	.word	0xe000e400
 8014c28:	20001918 	.word	0x20001918
 8014c2c:	2000191c 	.word	0x2000191c
 8014c30:	e000ed20 	.word	0xe000ed20
 8014c34:	2000006c 	.word	0x2000006c
 8014c38:	e000ef34 	.word	0xe000ef34

08014c3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014c3c:	b480      	push	{r7}
 8014c3e:	b083      	sub	sp, #12
 8014c40:	af00      	add	r7, sp, #0
	__asm volatile
 8014c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c46:	b672      	cpsid	i
 8014c48:	f383 8811 	msr	BASEPRI, r3
 8014c4c:	f3bf 8f6f 	isb	sy
 8014c50:	f3bf 8f4f 	dsb	sy
 8014c54:	b662      	cpsie	i
 8014c56:	607b      	str	r3, [r7, #4]
}
 8014c58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014c5a:	4b11      	ldr	r3, [pc, #68]	@ (8014ca0 <vPortEnterCritical+0x64>)
 8014c5c:	681b      	ldr	r3, [r3, #0]
 8014c5e:	3301      	adds	r3, #1
 8014c60:	4a0f      	ldr	r2, [pc, #60]	@ (8014ca0 <vPortEnterCritical+0x64>)
 8014c62:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014c64:	4b0e      	ldr	r3, [pc, #56]	@ (8014ca0 <vPortEnterCritical+0x64>)
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	2b01      	cmp	r3, #1
 8014c6a:	d112      	bne.n	8014c92 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014c6c:	4b0d      	ldr	r3, [pc, #52]	@ (8014ca4 <vPortEnterCritical+0x68>)
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	b2db      	uxtb	r3, r3
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d00d      	beq.n	8014c92 <vPortEnterCritical+0x56>
	__asm volatile
 8014c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c7a:	b672      	cpsid	i
 8014c7c:	f383 8811 	msr	BASEPRI, r3
 8014c80:	f3bf 8f6f 	isb	sy
 8014c84:	f3bf 8f4f 	dsb	sy
 8014c88:	b662      	cpsie	i
 8014c8a:	603b      	str	r3, [r7, #0]
}
 8014c8c:	bf00      	nop
 8014c8e:	bf00      	nop
 8014c90:	e7fd      	b.n	8014c8e <vPortEnterCritical+0x52>
	}
}
 8014c92:	bf00      	nop
 8014c94:	370c      	adds	r7, #12
 8014c96:	46bd      	mov	sp, r7
 8014c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c9c:	4770      	bx	lr
 8014c9e:	bf00      	nop
 8014ca0:	2000006c 	.word	0x2000006c
 8014ca4:	e000ed04 	.word	0xe000ed04

08014ca8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014ca8:	b480      	push	{r7}
 8014caa:	b083      	sub	sp, #12
 8014cac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014cae:	4b13      	ldr	r3, [pc, #76]	@ (8014cfc <vPortExitCritical+0x54>)
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d10d      	bne.n	8014cd2 <vPortExitCritical+0x2a>
	__asm volatile
 8014cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014cba:	b672      	cpsid	i
 8014cbc:	f383 8811 	msr	BASEPRI, r3
 8014cc0:	f3bf 8f6f 	isb	sy
 8014cc4:	f3bf 8f4f 	dsb	sy
 8014cc8:	b662      	cpsie	i
 8014cca:	607b      	str	r3, [r7, #4]
}
 8014ccc:	bf00      	nop
 8014cce:	bf00      	nop
 8014cd0:	e7fd      	b.n	8014cce <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8014cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8014cfc <vPortExitCritical+0x54>)
 8014cd4:	681b      	ldr	r3, [r3, #0]
 8014cd6:	3b01      	subs	r3, #1
 8014cd8:	4a08      	ldr	r2, [pc, #32]	@ (8014cfc <vPortExitCritical+0x54>)
 8014cda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014cdc:	4b07      	ldr	r3, [pc, #28]	@ (8014cfc <vPortExitCritical+0x54>)
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d105      	bne.n	8014cf0 <vPortExitCritical+0x48>
 8014ce4:	2300      	movs	r3, #0
 8014ce6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014ce8:	683b      	ldr	r3, [r7, #0]
 8014cea:	f383 8811 	msr	BASEPRI, r3
}
 8014cee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014cf0:	bf00      	nop
 8014cf2:	370c      	adds	r7, #12
 8014cf4:	46bd      	mov	sp, r7
 8014cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cfa:	4770      	bx	lr
 8014cfc:	2000006c 	.word	0x2000006c

08014d00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014d00:	f3ef 8009 	mrs	r0, PSP
 8014d04:	f3bf 8f6f 	isb	sy
 8014d08:	4b15      	ldr	r3, [pc, #84]	@ (8014d60 <pxCurrentTCBConst>)
 8014d0a:	681a      	ldr	r2, [r3, #0]
 8014d0c:	f01e 0f10 	tst.w	lr, #16
 8014d10:	bf08      	it	eq
 8014d12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014d16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d1a:	6010      	str	r0, [r2, #0]
 8014d1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014d20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8014d24:	b672      	cpsid	i
 8014d26:	f380 8811 	msr	BASEPRI, r0
 8014d2a:	f3bf 8f4f 	dsb	sy
 8014d2e:	f3bf 8f6f 	isb	sy
 8014d32:	b662      	cpsie	i
 8014d34:	f7ff faea 	bl	801430c <vTaskSwitchContext>
 8014d38:	f04f 0000 	mov.w	r0, #0
 8014d3c:	f380 8811 	msr	BASEPRI, r0
 8014d40:	bc09      	pop	{r0, r3}
 8014d42:	6819      	ldr	r1, [r3, #0]
 8014d44:	6808      	ldr	r0, [r1, #0]
 8014d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d4a:	f01e 0f10 	tst.w	lr, #16
 8014d4e:	bf08      	it	eq
 8014d50:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014d54:	f380 8809 	msr	PSP, r0
 8014d58:	f3bf 8f6f 	isb	sy
 8014d5c:	4770      	bx	lr
 8014d5e:	bf00      	nop

08014d60 <pxCurrentTCBConst>:
 8014d60:	200017ec 	.word	0x200017ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014d64:	bf00      	nop
 8014d66:	bf00      	nop

08014d68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014d68:	b580      	push	{r7, lr}
 8014d6a:	b082      	sub	sp, #8
 8014d6c:	af00      	add	r7, sp, #0
	__asm volatile
 8014d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d72:	b672      	cpsid	i
 8014d74:	f383 8811 	msr	BASEPRI, r3
 8014d78:	f3bf 8f6f 	isb	sy
 8014d7c:	f3bf 8f4f 	dsb	sy
 8014d80:	b662      	cpsie	i
 8014d82:	607b      	str	r3, [r7, #4]
}
 8014d84:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014d86:	f7ff fa05 	bl	8014194 <xTaskIncrementTick>
 8014d8a:	4603      	mov	r3, r0
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d003      	beq.n	8014d98 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014d90:	4b06      	ldr	r3, [pc, #24]	@ (8014dac <SysTick_Handler+0x44>)
 8014d92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014d96:	601a      	str	r2, [r3, #0]
 8014d98:	2300      	movs	r3, #0
 8014d9a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014d9c:	683b      	ldr	r3, [r7, #0]
 8014d9e:	f383 8811 	msr	BASEPRI, r3
}
 8014da2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014da4:	bf00      	nop
 8014da6:	3708      	adds	r7, #8
 8014da8:	46bd      	mov	sp, r7
 8014daa:	bd80      	pop	{r7, pc}
 8014dac:	e000ed04 	.word	0xe000ed04

08014db0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014db0:	b480      	push	{r7}
 8014db2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014db4:	4b0b      	ldr	r3, [pc, #44]	@ (8014de4 <vPortSetupTimerInterrupt+0x34>)
 8014db6:	2200      	movs	r2, #0
 8014db8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014dba:	4b0b      	ldr	r3, [pc, #44]	@ (8014de8 <vPortSetupTimerInterrupt+0x38>)
 8014dbc:	2200      	movs	r2, #0
 8014dbe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8014dec <vPortSetupTimerInterrupt+0x3c>)
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	4a0a      	ldr	r2, [pc, #40]	@ (8014df0 <vPortSetupTimerInterrupt+0x40>)
 8014dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8014dca:	099b      	lsrs	r3, r3, #6
 8014dcc:	4a09      	ldr	r2, [pc, #36]	@ (8014df4 <vPortSetupTimerInterrupt+0x44>)
 8014dce:	3b01      	subs	r3, #1
 8014dd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014dd2:	4b04      	ldr	r3, [pc, #16]	@ (8014de4 <vPortSetupTimerInterrupt+0x34>)
 8014dd4:	2207      	movs	r2, #7
 8014dd6:	601a      	str	r2, [r3, #0]
}
 8014dd8:	bf00      	nop
 8014dda:	46bd      	mov	sp, r7
 8014ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de0:	4770      	bx	lr
 8014de2:	bf00      	nop
 8014de4:	e000e010 	.word	0xe000e010
 8014de8:	e000e018 	.word	0xe000e018
 8014dec:	20000018 	.word	0x20000018
 8014df0:	10624dd3 	.word	0x10624dd3
 8014df4:	e000e014 	.word	0xe000e014

08014df8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014df8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8014e08 <vPortEnableVFP+0x10>
 8014dfc:	6801      	ldr	r1, [r0, #0]
 8014dfe:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8014e02:	6001      	str	r1, [r0, #0]
 8014e04:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014e06:	bf00      	nop
 8014e08:	e000ed88 	.word	0xe000ed88

08014e0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014e0c:	b480      	push	{r7}
 8014e0e:	b085      	sub	sp, #20
 8014e10:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014e12:	f3ef 8305 	mrs	r3, IPSR
 8014e16:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	2b0f      	cmp	r3, #15
 8014e1c:	d917      	bls.n	8014e4e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014e1e:	4a1a      	ldr	r2, [pc, #104]	@ (8014e88 <vPortValidateInterruptPriority+0x7c>)
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	4413      	add	r3, r2
 8014e24:	781b      	ldrb	r3, [r3, #0]
 8014e26:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014e28:	4b18      	ldr	r3, [pc, #96]	@ (8014e8c <vPortValidateInterruptPriority+0x80>)
 8014e2a:	781b      	ldrb	r3, [r3, #0]
 8014e2c:	7afa      	ldrb	r2, [r7, #11]
 8014e2e:	429a      	cmp	r2, r3
 8014e30:	d20d      	bcs.n	8014e4e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8014e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e36:	b672      	cpsid	i
 8014e38:	f383 8811 	msr	BASEPRI, r3
 8014e3c:	f3bf 8f6f 	isb	sy
 8014e40:	f3bf 8f4f 	dsb	sy
 8014e44:	b662      	cpsie	i
 8014e46:	607b      	str	r3, [r7, #4]
}
 8014e48:	bf00      	nop
 8014e4a:	bf00      	nop
 8014e4c:	e7fd      	b.n	8014e4a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014e4e:	4b10      	ldr	r3, [pc, #64]	@ (8014e90 <vPortValidateInterruptPriority+0x84>)
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8014e56:	4b0f      	ldr	r3, [pc, #60]	@ (8014e94 <vPortValidateInterruptPriority+0x88>)
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	429a      	cmp	r2, r3
 8014e5c:	d90d      	bls.n	8014e7a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8014e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e62:	b672      	cpsid	i
 8014e64:	f383 8811 	msr	BASEPRI, r3
 8014e68:	f3bf 8f6f 	isb	sy
 8014e6c:	f3bf 8f4f 	dsb	sy
 8014e70:	b662      	cpsie	i
 8014e72:	603b      	str	r3, [r7, #0]
}
 8014e74:	bf00      	nop
 8014e76:	bf00      	nop
 8014e78:	e7fd      	b.n	8014e76 <vPortValidateInterruptPriority+0x6a>
	}
 8014e7a:	bf00      	nop
 8014e7c:	3714      	adds	r7, #20
 8014e7e:	46bd      	mov	sp, r7
 8014e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e84:	4770      	bx	lr
 8014e86:	bf00      	nop
 8014e88:	e000e3f0 	.word	0xe000e3f0
 8014e8c:	20001918 	.word	0x20001918
 8014e90:	e000ed0c 	.word	0xe000ed0c
 8014e94:	2000191c 	.word	0x2000191c

08014e98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014e98:	b580      	push	{r7, lr}
 8014e9a:	b08a      	sub	sp, #40	@ 0x28
 8014e9c:	af00      	add	r7, sp, #0
 8014e9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014ea0:	2300      	movs	r3, #0
 8014ea2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014ea4:	f7ff f8a6 	bl	8013ff4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014ea8:	4b5f      	ldr	r3, [pc, #380]	@ (8015028 <pvPortMalloc+0x190>)
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d101      	bne.n	8014eb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014eb0:	f000 f924 	bl	80150fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014eb4:	4b5d      	ldr	r3, [pc, #372]	@ (801502c <pvPortMalloc+0x194>)
 8014eb6:	681a      	ldr	r2, [r3, #0]
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	4013      	ands	r3, r2
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	f040 8094 	bne.w	8014fea <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d020      	beq.n	8014f0a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8014ec8:	2208      	movs	r2, #8
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	4413      	add	r3, r2
 8014ece:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	f003 0307 	and.w	r3, r3, #7
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d017      	beq.n	8014f0a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	f023 0307 	bic.w	r3, r3, #7
 8014ee0:	3308      	adds	r3, #8
 8014ee2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	f003 0307 	and.w	r3, r3, #7
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d00d      	beq.n	8014f0a <pvPortMalloc+0x72>
	__asm volatile
 8014eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ef2:	b672      	cpsid	i
 8014ef4:	f383 8811 	msr	BASEPRI, r3
 8014ef8:	f3bf 8f6f 	isb	sy
 8014efc:	f3bf 8f4f 	dsb	sy
 8014f00:	b662      	cpsie	i
 8014f02:	617b      	str	r3, [r7, #20]
}
 8014f04:	bf00      	nop
 8014f06:	bf00      	nop
 8014f08:	e7fd      	b.n	8014f06 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d06c      	beq.n	8014fea <pvPortMalloc+0x152>
 8014f10:	4b47      	ldr	r3, [pc, #284]	@ (8015030 <pvPortMalloc+0x198>)
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	687a      	ldr	r2, [r7, #4]
 8014f16:	429a      	cmp	r2, r3
 8014f18:	d867      	bhi.n	8014fea <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014f1a:	4b46      	ldr	r3, [pc, #280]	@ (8015034 <pvPortMalloc+0x19c>)
 8014f1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014f1e:	4b45      	ldr	r3, [pc, #276]	@ (8015034 <pvPortMalloc+0x19c>)
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014f24:	e004      	b.n	8014f30 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8014f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f2c:	681b      	ldr	r3, [r3, #0]
 8014f2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f32:	685b      	ldr	r3, [r3, #4]
 8014f34:	687a      	ldr	r2, [r7, #4]
 8014f36:	429a      	cmp	r2, r3
 8014f38:	d903      	bls.n	8014f42 <pvPortMalloc+0xaa>
 8014f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f3c:	681b      	ldr	r3, [r3, #0]
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d1f1      	bne.n	8014f26 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014f42:	4b39      	ldr	r3, [pc, #228]	@ (8015028 <pvPortMalloc+0x190>)
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014f48:	429a      	cmp	r2, r3
 8014f4a:	d04e      	beq.n	8014fea <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014f4c:	6a3b      	ldr	r3, [r7, #32]
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	2208      	movs	r2, #8
 8014f52:	4413      	add	r3, r2
 8014f54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f58:	681a      	ldr	r2, [r3, #0]
 8014f5a:	6a3b      	ldr	r3, [r7, #32]
 8014f5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f60:	685a      	ldr	r2, [r3, #4]
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	1ad2      	subs	r2, r2, r3
 8014f66:	2308      	movs	r3, #8
 8014f68:	005b      	lsls	r3, r3, #1
 8014f6a:	429a      	cmp	r2, r3
 8014f6c:	d922      	bls.n	8014fb4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014f6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	4413      	add	r3, r2
 8014f74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014f76:	69bb      	ldr	r3, [r7, #24]
 8014f78:	f003 0307 	and.w	r3, r3, #7
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d00d      	beq.n	8014f9c <pvPortMalloc+0x104>
	__asm volatile
 8014f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f84:	b672      	cpsid	i
 8014f86:	f383 8811 	msr	BASEPRI, r3
 8014f8a:	f3bf 8f6f 	isb	sy
 8014f8e:	f3bf 8f4f 	dsb	sy
 8014f92:	b662      	cpsie	i
 8014f94:	613b      	str	r3, [r7, #16]
}
 8014f96:	bf00      	nop
 8014f98:	bf00      	nop
 8014f9a:	e7fd      	b.n	8014f98 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f9e:	685a      	ldr	r2, [r3, #4]
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	1ad2      	subs	r2, r2, r3
 8014fa4:	69bb      	ldr	r3, [r7, #24]
 8014fa6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014faa:	687a      	ldr	r2, [r7, #4]
 8014fac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014fae:	69b8      	ldr	r0, [r7, #24]
 8014fb0:	f000 f906 	bl	80151c0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014fb4:	4b1e      	ldr	r3, [pc, #120]	@ (8015030 <pvPortMalloc+0x198>)
 8014fb6:	681a      	ldr	r2, [r3, #0]
 8014fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fba:	685b      	ldr	r3, [r3, #4]
 8014fbc:	1ad3      	subs	r3, r2, r3
 8014fbe:	4a1c      	ldr	r2, [pc, #112]	@ (8015030 <pvPortMalloc+0x198>)
 8014fc0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8015030 <pvPortMalloc+0x198>)
 8014fc4:	681a      	ldr	r2, [r3, #0]
 8014fc6:	4b1c      	ldr	r3, [pc, #112]	@ (8015038 <pvPortMalloc+0x1a0>)
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	429a      	cmp	r2, r3
 8014fcc:	d203      	bcs.n	8014fd6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014fce:	4b18      	ldr	r3, [pc, #96]	@ (8015030 <pvPortMalloc+0x198>)
 8014fd0:	681b      	ldr	r3, [r3, #0]
 8014fd2:	4a19      	ldr	r2, [pc, #100]	@ (8015038 <pvPortMalloc+0x1a0>)
 8014fd4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fd8:	685a      	ldr	r2, [r3, #4]
 8014fda:	4b14      	ldr	r3, [pc, #80]	@ (801502c <pvPortMalloc+0x194>)
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	431a      	orrs	r2, r3
 8014fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fe2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fe6:	2200      	movs	r2, #0
 8014fe8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014fea:	f7ff f811 	bl	8014010 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8014fee:	69fb      	ldr	r3, [r7, #28]
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d101      	bne.n	8014ff8 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8014ff4:	f7ec fd38 	bl	8001a68 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014ff8:	69fb      	ldr	r3, [r7, #28]
 8014ffa:	f003 0307 	and.w	r3, r3, #7
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d00d      	beq.n	801501e <pvPortMalloc+0x186>
	__asm volatile
 8015002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015006:	b672      	cpsid	i
 8015008:	f383 8811 	msr	BASEPRI, r3
 801500c:	f3bf 8f6f 	isb	sy
 8015010:	f3bf 8f4f 	dsb	sy
 8015014:	b662      	cpsie	i
 8015016:	60fb      	str	r3, [r7, #12]
}
 8015018:	bf00      	nop
 801501a:	bf00      	nop
 801501c:	e7fd      	b.n	801501a <pvPortMalloc+0x182>
	return pvReturn;
 801501e:	69fb      	ldr	r3, [r7, #28]
}
 8015020:	4618      	mov	r0, r3
 8015022:	3728      	adds	r7, #40	@ 0x28
 8015024:	46bd      	mov	sp, r7
 8015026:	bd80      	pop	{r7, pc}
 8015028:	20011928 	.word	0x20011928
 801502c:	20011934 	.word	0x20011934
 8015030:	2001192c 	.word	0x2001192c
 8015034:	20011920 	.word	0x20011920
 8015038:	20011930 	.word	0x20011930

0801503c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801503c:	b580      	push	{r7, lr}
 801503e:	b086      	sub	sp, #24
 8015040:	af00      	add	r7, sp, #0
 8015042:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	2b00      	cmp	r3, #0
 801504c:	d04e      	beq.n	80150ec <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801504e:	2308      	movs	r3, #8
 8015050:	425b      	negs	r3, r3
 8015052:	697a      	ldr	r2, [r7, #20]
 8015054:	4413      	add	r3, r2
 8015056:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015058:	697b      	ldr	r3, [r7, #20]
 801505a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801505c:	693b      	ldr	r3, [r7, #16]
 801505e:	685a      	ldr	r2, [r3, #4]
 8015060:	4b24      	ldr	r3, [pc, #144]	@ (80150f4 <vPortFree+0xb8>)
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	4013      	ands	r3, r2
 8015066:	2b00      	cmp	r3, #0
 8015068:	d10d      	bne.n	8015086 <vPortFree+0x4a>
	__asm volatile
 801506a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801506e:	b672      	cpsid	i
 8015070:	f383 8811 	msr	BASEPRI, r3
 8015074:	f3bf 8f6f 	isb	sy
 8015078:	f3bf 8f4f 	dsb	sy
 801507c:	b662      	cpsie	i
 801507e:	60fb      	str	r3, [r7, #12]
}
 8015080:	bf00      	nop
 8015082:	bf00      	nop
 8015084:	e7fd      	b.n	8015082 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015086:	693b      	ldr	r3, [r7, #16]
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	2b00      	cmp	r3, #0
 801508c:	d00d      	beq.n	80150aa <vPortFree+0x6e>
	__asm volatile
 801508e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015092:	b672      	cpsid	i
 8015094:	f383 8811 	msr	BASEPRI, r3
 8015098:	f3bf 8f6f 	isb	sy
 801509c:	f3bf 8f4f 	dsb	sy
 80150a0:	b662      	cpsie	i
 80150a2:	60bb      	str	r3, [r7, #8]
}
 80150a4:	bf00      	nop
 80150a6:	bf00      	nop
 80150a8:	e7fd      	b.n	80150a6 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80150aa:	693b      	ldr	r3, [r7, #16]
 80150ac:	685a      	ldr	r2, [r3, #4]
 80150ae:	4b11      	ldr	r3, [pc, #68]	@ (80150f4 <vPortFree+0xb8>)
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	4013      	ands	r3, r2
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d019      	beq.n	80150ec <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80150b8:	693b      	ldr	r3, [r7, #16]
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d115      	bne.n	80150ec <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80150c0:	693b      	ldr	r3, [r7, #16]
 80150c2:	685a      	ldr	r2, [r3, #4]
 80150c4:	4b0b      	ldr	r3, [pc, #44]	@ (80150f4 <vPortFree+0xb8>)
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	43db      	mvns	r3, r3
 80150ca:	401a      	ands	r2, r3
 80150cc:	693b      	ldr	r3, [r7, #16]
 80150ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80150d0:	f7fe ff90 	bl	8013ff4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80150d4:	693b      	ldr	r3, [r7, #16]
 80150d6:	685a      	ldr	r2, [r3, #4]
 80150d8:	4b07      	ldr	r3, [pc, #28]	@ (80150f8 <vPortFree+0xbc>)
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	4413      	add	r3, r2
 80150de:	4a06      	ldr	r2, [pc, #24]	@ (80150f8 <vPortFree+0xbc>)
 80150e0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80150e2:	6938      	ldr	r0, [r7, #16]
 80150e4:	f000 f86c 	bl	80151c0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80150e8:	f7fe ff92 	bl	8014010 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80150ec:	bf00      	nop
 80150ee:	3718      	adds	r7, #24
 80150f0:	46bd      	mov	sp, r7
 80150f2:	bd80      	pop	{r7, pc}
 80150f4:	20011934 	.word	0x20011934
 80150f8:	2001192c 	.word	0x2001192c

080150fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80150fc:	b480      	push	{r7}
 80150fe:	b085      	sub	sp, #20
 8015100:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015102:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8015106:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015108:	4b27      	ldr	r3, [pc, #156]	@ (80151a8 <prvHeapInit+0xac>)
 801510a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	f003 0307 	and.w	r3, r3, #7
 8015112:	2b00      	cmp	r3, #0
 8015114:	d00c      	beq.n	8015130 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8015116:	68fb      	ldr	r3, [r7, #12]
 8015118:	3307      	adds	r3, #7
 801511a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	f023 0307 	bic.w	r3, r3, #7
 8015122:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015124:	68ba      	ldr	r2, [r7, #8]
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	1ad3      	subs	r3, r2, r3
 801512a:	4a1f      	ldr	r2, [pc, #124]	@ (80151a8 <prvHeapInit+0xac>)
 801512c:	4413      	add	r3, r2
 801512e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015134:	4a1d      	ldr	r2, [pc, #116]	@ (80151ac <prvHeapInit+0xb0>)
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801513a:	4b1c      	ldr	r3, [pc, #112]	@ (80151ac <prvHeapInit+0xb0>)
 801513c:	2200      	movs	r2, #0
 801513e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	68ba      	ldr	r2, [r7, #8]
 8015144:	4413      	add	r3, r2
 8015146:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015148:	2208      	movs	r2, #8
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	1a9b      	subs	r3, r3, r2
 801514e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	f023 0307 	bic.w	r3, r3, #7
 8015156:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	4a15      	ldr	r2, [pc, #84]	@ (80151b0 <prvHeapInit+0xb4>)
 801515c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801515e:	4b14      	ldr	r3, [pc, #80]	@ (80151b0 <prvHeapInit+0xb4>)
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	2200      	movs	r2, #0
 8015164:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8015166:	4b12      	ldr	r3, [pc, #72]	@ (80151b0 <prvHeapInit+0xb4>)
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	2200      	movs	r2, #0
 801516c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015172:	683b      	ldr	r3, [r7, #0]
 8015174:	68fa      	ldr	r2, [r7, #12]
 8015176:	1ad2      	subs	r2, r2, r3
 8015178:	683b      	ldr	r3, [r7, #0]
 801517a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801517c:	4b0c      	ldr	r3, [pc, #48]	@ (80151b0 <prvHeapInit+0xb4>)
 801517e:	681a      	ldr	r2, [r3, #0]
 8015180:	683b      	ldr	r3, [r7, #0]
 8015182:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015184:	683b      	ldr	r3, [r7, #0]
 8015186:	685b      	ldr	r3, [r3, #4]
 8015188:	4a0a      	ldr	r2, [pc, #40]	@ (80151b4 <prvHeapInit+0xb8>)
 801518a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801518c:	683b      	ldr	r3, [r7, #0]
 801518e:	685b      	ldr	r3, [r3, #4]
 8015190:	4a09      	ldr	r2, [pc, #36]	@ (80151b8 <prvHeapInit+0xbc>)
 8015192:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015194:	4b09      	ldr	r3, [pc, #36]	@ (80151bc <prvHeapInit+0xc0>)
 8015196:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801519a:	601a      	str	r2, [r3, #0]
}
 801519c:	bf00      	nop
 801519e:	3714      	adds	r7, #20
 80151a0:	46bd      	mov	sp, r7
 80151a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151a6:	4770      	bx	lr
 80151a8:	20001920 	.word	0x20001920
 80151ac:	20011920 	.word	0x20011920
 80151b0:	20011928 	.word	0x20011928
 80151b4:	20011930 	.word	0x20011930
 80151b8:	2001192c 	.word	0x2001192c
 80151bc:	20011934 	.word	0x20011934

080151c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80151c0:	b480      	push	{r7}
 80151c2:	b085      	sub	sp, #20
 80151c4:	af00      	add	r7, sp, #0
 80151c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80151c8:	4b28      	ldr	r3, [pc, #160]	@ (801526c <prvInsertBlockIntoFreeList+0xac>)
 80151ca:	60fb      	str	r3, [r7, #12]
 80151cc:	e002      	b.n	80151d4 <prvInsertBlockIntoFreeList+0x14>
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	60fb      	str	r3, [r7, #12]
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	687a      	ldr	r2, [r7, #4]
 80151da:	429a      	cmp	r2, r3
 80151dc:	d8f7      	bhi.n	80151ce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	685b      	ldr	r3, [r3, #4]
 80151e6:	68ba      	ldr	r2, [r7, #8]
 80151e8:	4413      	add	r3, r2
 80151ea:	687a      	ldr	r2, [r7, #4]
 80151ec:	429a      	cmp	r2, r3
 80151ee:	d108      	bne.n	8015202 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	685a      	ldr	r2, [r3, #4]
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	685b      	ldr	r3, [r3, #4]
 80151f8:	441a      	add	r2, r3
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	685b      	ldr	r3, [r3, #4]
 801520a:	68ba      	ldr	r2, [r7, #8]
 801520c:	441a      	add	r2, r3
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	429a      	cmp	r2, r3
 8015214:	d118      	bne.n	8015248 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	681a      	ldr	r2, [r3, #0]
 801521a:	4b15      	ldr	r3, [pc, #84]	@ (8015270 <prvInsertBlockIntoFreeList+0xb0>)
 801521c:	681b      	ldr	r3, [r3, #0]
 801521e:	429a      	cmp	r2, r3
 8015220:	d00d      	beq.n	801523e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	685a      	ldr	r2, [r3, #4]
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	685b      	ldr	r3, [r3, #4]
 801522c:	441a      	add	r2, r3
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	681a      	ldr	r2, [r3, #0]
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	601a      	str	r2, [r3, #0]
 801523c:	e008      	b.n	8015250 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801523e:	4b0c      	ldr	r3, [pc, #48]	@ (8015270 <prvInsertBlockIntoFreeList+0xb0>)
 8015240:	681a      	ldr	r2, [r3, #0]
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	601a      	str	r2, [r3, #0]
 8015246:	e003      	b.n	8015250 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	681a      	ldr	r2, [r3, #0]
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015250:	68fa      	ldr	r2, [r7, #12]
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	429a      	cmp	r2, r3
 8015256:	d002      	beq.n	801525e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	687a      	ldr	r2, [r7, #4]
 801525c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801525e:	bf00      	nop
 8015260:	3714      	adds	r7, #20
 8015262:	46bd      	mov	sp, r7
 8015264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015268:	4770      	bx	lr
 801526a:	bf00      	nop
 801526c:	20011920 	.word	0x20011920
 8015270:	20011928 	.word	0x20011928

08015274 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8015274:	b580      	push	{r7, lr}
 8015276:	b082      	sub	sp, #8
 8015278:	af00      	add	r7, sp, #0
 801527a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8015282:	4618      	mov	r0, r3
 8015284:	f7fb fbd8 	bl	8010a38 <USBH_LL_IncTimer>
}
 8015288:	bf00      	nop
 801528a:	3708      	adds	r7, #8
 801528c:	46bd      	mov	sp, r7
 801528e:	bd80      	pop	{r7, pc}

08015290 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8015290:	b580      	push	{r7, lr}
 8015292:	b082      	sub	sp, #8
 8015294:	af00      	add	r7, sp, #0
 8015296:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801529e:	4618      	mov	r0, r3
 80152a0:	f7fb fc18 	bl	8010ad4 <USBH_LL_Connect>
}
 80152a4:	bf00      	nop
 80152a6:	3708      	adds	r7, #8
 80152a8:	46bd      	mov	sp, r7
 80152aa:	bd80      	pop	{r7, pc}

080152ac <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80152ac:	b580      	push	{r7, lr}
 80152ae:	b082      	sub	sp, #8
 80152b0:	af00      	add	r7, sp, #0
 80152b2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80152ba:	4618      	mov	r0, r3
 80152bc:	f7fb fc25 	bl	8010b0a <USBH_LL_Disconnect>
}
 80152c0:	bf00      	nop
 80152c2:	3708      	adds	r7, #8
 80152c4:	46bd      	mov	sp, r7
 80152c6:	bd80      	pop	{r7, pc}

080152c8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80152c8:	b580      	push	{r7, lr}
 80152ca:	b082      	sub	sp, #8
 80152cc:	af00      	add	r7, sp, #0
 80152ce:	6078      	str	r0, [r7, #4]
 80152d0:	460b      	mov	r3, r1
 80152d2:	70fb      	strb	r3, [r7, #3]
 80152d4:	4613      	mov	r3, r2
 80152d6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80152de:	4618      	mov	r0, r3
 80152e0:	f7fb fc64 	bl	8010bac <USBH_LL_NotifyURBChange>
#endif
}
 80152e4:	bf00      	nop
 80152e6:	3708      	adds	r7, #8
 80152e8:	46bd      	mov	sp, r7
 80152ea:	bd80      	pop	{r7, pc}

080152ec <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80152ec:	b580      	push	{r7, lr}
 80152ee:	b082      	sub	sp, #8
 80152f0:	af00      	add	r7, sp, #0
 80152f2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80152fa:	4618      	mov	r0, r3
 80152fc:	f7fb fbc6 	bl	8010a8c <USBH_LL_PortEnabled>
}
 8015300:	bf00      	nop
 8015302:	3708      	adds	r7, #8
 8015304:	46bd      	mov	sp, r7
 8015306:	bd80      	pop	{r7, pc}

08015308 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8015308:	b580      	push	{r7, lr}
 801530a:	b082      	sub	sp, #8
 801530c:	af00      	add	r7, sp, #0
 801530e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8015316:	4618      	mov	r0, r3
 8015318:	f7fb fbca 	bl	8010ab0 <USBH_LL_PortDisabled>
}
 801531c:	bf00      	nop
 801531e:	3708      	adds	r7, #8
 8015320:	46bd      	mov	sp, r7
 8015322:	bd80      	pop	{r7, pc}

08015324 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8015324:	b580      	push	{r7, lr}
 8015326:	b084      	sub	sp, #16
 8015328:	af00      	add	r7, sp, #0
 801532a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801532c:	2300      	movs	r3, #0
 801532e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015330:	2300      	movs	r3, #0
 8015332:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801533a:	4618      	mov	r0, r3
 801533c:	f7f2 f84f 	bl	80073de <HAL_HCD_Stop>
 8015340:	4603      	mov	r3, r0
 8015342:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015344:	7bfb      	ldrb	r3, [r7, #15]
 8015346:	4618      	mov	r0, r3
 8015348:	f000 f808 	bl	801535c <USBH_Get_USB_Status>
 801534c:	4603      	mov	r3, r0
 801534e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015350:	7bbb      	ldrb	r3, [r7, #14]
}
 8015352:	4618      	mov	r0, r3
 8015354:	3710      	adds	r7, #16
 8015356:	46bd      	mov	sp, r7
 8015358:	bd80      	pop	{r7, pc}
	...

0801535c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801535c:	b480      	push	{r7}
 801535e:	b085      	sub	sp, #20
 8015360:	af00      	add	r7, sp, #0
 8015362:	4603      	mov	r3, r0
 8015364:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015366:	2300      	movs	r3, #0
 8015368:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801536a:	79fb      	ldrb	r3, [r7, #7]
 801536c:	2b03      	cmp	r3, #3
 801536e:	d817      	bhi.n	80153a0 <USBH_Get_USB_Status+0x44>
 8015370:	a201      	add	r2, pc, #4	@ (adr r2, 8015378 <USBH_Get_USB_Status+0x1c>)
 8015372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015376:	bf00      	nop
 8015378:	08015389 	.word	0x08015389
 801537c:	0801538f 	.word	0x0801538f
 8015380:	08015395 	.word	0x08015395
 8015384:	0801539b 	.word	0x0801539b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8015388:	2300      	movs	r3, #0
 801538a:	73fb      	strb	r3, [r7, #15]
    break;
 801538c:	e00b      	b.n	80153a6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801538e:	2302      	movs	r3, #2
 8015390:	73fb      	strb	r3, [r7, #15]
    break;
 8015392:	e008      	b.n	80153a6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8015394:	2301      	movs	r3, #1
 8015396:	73fb      	strb	r3, [r7, #15]
    break;
 8015398:	e005      	b.n	80153a6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801539a:	2302      	movs	r3, #2
 801539c:	73fb      	strb	r3, [r7, #15]
    break;
 801539e:	e002      	b.n	80153a6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80153a0:	2302      	movs	r3, #2
 80153a2:	73fb      	strb	r3, [r7, #15]
    break;
 80153a4:	bf00      	nop
  }
  return usb_status;
 80153a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80153a8:	4618      	mov	r0, r3
 80153aa:	3714      	adds	r7, #20
 80153ac:	46bd      	mov	sp, r7
 80153ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b2:	4770      	bx	lr

080153b4 <sbrk_aligned>:
 80153b4:	b570      	push	{r4, r5, r6, lr}
 80153b6:	4e0f      	ldr	r6, [pc, #60]	@ (80153f4 <sbrk_aligned+0x40>)
 80153b8:	460c      	mov	r4, r1
 80153ba:	6831      	ldr	r1, [r6, #0]
 80153bc:	4605      	mov	r5, r0
 80153be:	b911      	cbnz	r1, 80153c6 <sbrk_aligned+0x12>
 80153c0:	f000 f96c 	bl	801569c <_sbrk_r>
 80153c4:	6030      	str	r0, [r6, #0]
 80153c6:	4621      	mov	r1, r4
 80153c8:	4628      	mov	r0, r5
 80153ca:	f000 f967 	bl	801569c <_sbrk_r>
 80153ce:	1c43      	adds	r3, r0, #1
 80153d0:	d103      	bne.n	80153da <sbrk_aligned+0x26>
 80153d2:	f04f 34ff 	mov.w	r4, #4294967295
 80153d6:	4620      	mov	r0, r4
 80153d8:	bd70      	pop	{r4, r5, r6, pc}
 80153da:	1cc4      	adds	r4, r0, #3
 80153dc:	f024 0403 	bic.w	r4, r4, #3
 80153e0:	42a0      	cmp	r0, r4
 80153e2:	d0f8      	beq.n	80153d6 <sbrk_aligned+0x22>
 80153e4:	1a21      	subs	r1, r4, r0
 80153e6:	4628      	mov	r0, r5
 80153e8:	f000 f958 	bl	801569c <_sbrk_r>
 80153ec:	3001      	adds	r0, #1
 80153ee:	d1f2      	bne.n	80153d6 <sbrk_aligned+0x22>
 80153f0:	e7ef      	b.n	80153d2 <sbrk_aligned+0x1e>
 80153f2:	bf00      	nop
 80153f4:	20011d18 	.word	0x20011d18

080153f8 <_malloc_r>:
 80153f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80153fc:	1ccd      	adds	r5, r1, #3
 80153fe:	f025 0503 	bic.w	r5, r5, #3
 8015402:	3508      	adds	r5, #8
 8015404:	2d0c      	cmp	r5, #12
 8015406:	bf38      	it	cc
 8015408:	250c      	movcc	r5, #12
 801540a:	2d00      	cmp	r5, #0
 801540c:	4606      	mov	r6, r0
 801540e:	db01      	blt.n	8015414 <_malloc_r+0x1c>
 8015410:	42a9      	cmp	r1, r5
 8015412:	d904      	bls.n	801541e <_malloc_r+0x26>
 8015414:	230c      	movs	r3, #12
 8015416:	6033      	str	r3, [r6, #0]
 8015418:	2000      	movs	r0, #0
 801541a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801541e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80154f4 <_malloc_r+0xfc>
 8015422:	f000 f869 	bl	80154f8 <__malloc_lock>
 8015426:	f8d8 3000 	ldr.w	r3, [r8]
 801542a:	461c      	mov	r4, r3
 801542c:	bb44      	cbnz	r4, 8015480 <_malloc_r+0x88>
 801542e:	4629      	mov	r1, r5
 8015430:	4630      	mov	r0, r6
 8015432:	f7ff ffbf 	bl	80153b4 <sbrk_aligned>
 8015436:	1c43      	adds	r3, r0, #1
 8015438:	4604      	mov	r4, r0
 801543a:	d158      	bne.n	80154ee <_malloc_r+0xf6>
 801543c:	f8d8 4000 	ldr.w	r4, [r8]
 8015440:	4627      	mov	r7, r4
 8015442:	2f00      	cmp	r7, #0
 8015444:	d143      	bne.n	80154ce <_malloc_r+0xd6>
 8015446:	2c00      	cmp	r4, #0
 8015448:	d04b      	beq.n	80154e2 <_malloc_r+0xea>
 801544a:	6823      	ldr	r3, [r4, #0]
 801544c:	4639      	mov	r1, r7
 801544e:	4630      	mov	r0, r6
 8015450:	eb04 0903 	add.w	r9, r4, r3
 8015454:	f000 f922 	bl	801569c <_sbrk_r>
 8015458:	4581      	cmp	r9, r0
 801545a:	d142      	bne.n	80154e2 <_malloc_r+0xea>
 801545c:	6821      	ldr	r1, [r4, #0]
 801545e:	1a6d      	subs	r5, r5, r1
 8015460:	4629      	mov	r1, r5
 8015462:	4630      	mov	r0, r6
 8015464:	f7ff ffa6 	bl	80153b4 <sbrk_aligned>
 8015468:	3001      	adds	r0, #1
 801546a:	d03a      	beq.n	80154e2 <_malloc_r+0xea>
 801546c:	6823      	ldr	r3, [r4, #0]
 801546e:	442b      	add	r3, r5
 8015470:	6023      	str	r3, [r4, #0]
 8015472:	f8d8 3000 	ldr.w	r3, [r8]
 8015476:	685a      	ldr	r2, [r3, #4]
 8015478:	bb62      	cbnz	r2, 80154d4 <_malloc_r+0xdc>
 801547a:	f8c8 7000 	str.w	r7, [r8]
 801547e:	e00f      	b.n	80154a0 <_malloc_r+0xa8>
 8015480:	6822      	ldr	r2, [r4, #0]
 8015482:	1b52      	subs	r2, r2, r5
 8015484:	d420      	bmi.n	80154c8 <_malloc_r+0xd0>
 8015486:	2a0b      	cmp	r2, #11
 8015488:	d917      	bls.n	80154ba <_malloc_r+0xc2>
 801548a:	1961      	adds	r1, r4, r5
 801548c:	42a3      	cmp	r3, r4
 801548e:	6025      	str	r5, [r4, #0]
 8015490:	bf18      	it	ne
 8015492:	6059      	strne	r1, [r3, #4]
 8015494:	6863      	ldr	r3, [r4, #4]
 8015496:	bf08      	it	eq
 8015498:	f8c8 1000 	streq.w	r1, [r8]
 801549c:	5162      	str	r2, [r4, r5]
 801549e:	604b      	str	r3, [r1, #4]
 80154a0:	4630      	mov	r0, r6
 80154a2:	f000 f82f 	bl	8015504 <__malloc_unlock>
 80154a6:	f104 000b 	add.w	r0, r4, #11
 80154aa:	1d23      	adds	r3, r4, #4
 80154ac:	f020 0007 	bic.w	r0, r0, #7
 80154b0:	1ac2      	subs	r2, r0, r3
 80154b2:	bf1c      	itt	ne
 80154b4:	1a1b      	subne	r3, r3, r0
 80154b6:	50a3      	strne	r3, [r4, r2]
 80154b8:	e7af      	b.n	801541a <_malloc_r+0x22>
 80154ba:	6862      	ldr	r2, [r4, #4]
 80154bc:	42a3      	cmp	r3, r4
 80154be:	bf0c      	ite	eq
 80154c0:	f8c8 2000 	streq.w	r2, [r8]
 80154c4:	605a      	strne	r2, [r3, #4]
 80154c6:	e7eb      	b.n	80154a0 <_malloc_r+0xa8>
 80154c8:	4623      	mov	r3, r4
 80154ca:	6864      	ldr	r4, [r4, #4]
 80154cc:	e7ae      	b.n	801542c <_malloc_r+0x34>
 80154ce:	463c      	mov	r4, r7
 80154d0:	687f      	ldr	r7, [r7, #4]
 80154d2:	e7b6      	b.n	8015442 <_malloc_r+0x4a>
 80154d4:	461a      	mov	r2, r3
 80154d6:	685b      	ldr	r3, [r3, #4]
 80154d8:	42a3      	cmp	r3, r4
 80154da:	d1fb      	bne.n	80154d4 <_malloc_r+0xdc>
 80154dc:	2300      	movs	r3, #0
 80154de:	6053      	str	r3, [r2, #4]
 80154e0:	e7de      	b.n	80154a0 <_malloc_r+0xa8>
 80154e2:	230c      	movs	r3, #12
 80154e4:	6033      	str	r3, [r6, #0]
 80154e6:	4630      	mov	r0, r6
 80154e8:	f000 f80c 	bl	8015504 <__malloc_unlock>
 80154ec:	e794      	b.n	8015418 <_malloc_r+0x20>
 80154ee:	6005      	str	r5, [r0, #0]
 80154f0:	e7d6      	b.n	80154a0 <_malloc_r+0xa8>
 80154f2:	bf00      	nop
 80154f4:	20011d1c 	.word	0x20011d1c

080154f8 <__malloc_lock>:
 80154f8:	4801      	ldr	r0, [pc, #4]	@ (8015500 <__malloc_lock+0x8>)
 80154fa:	f000 b909 	b.w	8015710 <__retarget_lock_acquire_recursive>
 80154fe:	bf00      	nop
 8015500:	20011e5c 	.word	0x20011e5c

08015504 <__malloc_unlock>:
 8015504:	4801      	ldr	r0, [pc, #4]	@ (801550c <__malloc_unlock+0x8>)
 8015506:	f000 b904 	b.w	8015712 <__retarget_lock_release_recursive>
 801550a:	bf00      	nop
 801550c:	20011e5c 	.word	0x20011e5c

08015510 <sniprintf>:
 8015510:	b40c      	push	{r2, r3}
 8015512:	b530      	push	{r4, r5, lr}
 8015514:	4b18      	ldr	r3, [pc, #96]	@ (8015578 <sniprintf+0x68>)
 8015516:	1e0c      	subs	r4, r1, #0
 8015518:	681d      	ldr	r5, [r3, #0]
 801551a:	b09d      	sub	sp, #116	@ 0x74
 801551c:	da08      	bge.n	8015530 <sniprintf+0x20>
 801551e:	238b      	movs	r3, #139	@ 0x8b
 8015520:	602b      	str	r3, [r5, #0]
 8015522:	f04f 30ff 	mov.w	r0, #4294967295
 8015526:	b01d      	add	sp, #116	@ 0x74
 8015528:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801552c:	b002      	add	sp, #8
 801552e:	4770      	bx	lr
 8015530:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8015534:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015538:	f04f 0300 	mov.w	r3, #0
 801553c:	931b      	str	r3, [sp, #108]	@ 0x6c
 801553e:	bf14      	ite	ne
 8015540:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015544:	4623      	moveq	r3, r4
 8015546:	9304      	str	r3, [sp, #16]
 8015548:	9307      	str	r3, [sp, #28]
 801554a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801554e:	9002      	str	r0, [sp, #8]
 8015550:	9006      	str	r0, [sp, #24]
 8015552:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015556:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8015558:	ab21      	add	r3, sp, #132	@ 0x84
 801555a:	a902      	add	r1, sp, #8
 801555c:	4628      	mov	r0, r5
 801555e:	9301      	str	r3, [sp, #4]
 8015560:	f000 f98c 	bl	801587c <_svfiprintf_r>
 8015564:	1c43      	adds	r3, r0, #1
 8015566:	bfbc      	itt	lt
 8015568:	238b      	movlt	r3, #139	@ 0x8b
 801556a:	602b      	strlt	r3, [r5, #0]
 801556c:	2c00      	cmp	r4, #0
 801556e:	d0da      	beq.n	8015526 <sniprintf+0x16>
 8015570:	9b02      	ldr	r3, [sp, #8]
 8015572:	2200      	movs	r2, #0
 8015574:	701a      	strb	r2, [r3, #0]
 8015576:	e7d6      	b.n	8015526 <sniprintf+0x16>
 8015578:	20000070 	.word	0x20000070

0801557c <siprintf>:
 801557c:	b40e      	push	{r1, r2, r3}
 801557e:	b510      	push	{r4, lr}
 8015580:	b09d      	sub	sp, #116	@ 0x74
 8015582:	ab1f      	add	r3, sp, #124	@ 0x7c
 8015584:	9002      	str	r0, [sp, #8]
 8015586:	9006      	str	r0, [sp, #24]
 8015588:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801558c:	480a      	ldr	r0, [pc, #40]	@ (80155b8 <siprintf+0x3c>)
 801558e:	9107      	str	r1, [sp, #28]
 8015590:	9104      	str	r1, [sp, #16]
 8015592:	490a      	ldr	r1, [pc, #40]	@ (80155bc <siprintf+0x40>)
 8015594:	f853 2b04 	ldr.w	r2, [r3], #4
 8015598:	9105      	str	r1, [sp, #20]
 801559a:	2400      	movs	r4, #0
 801559c:	a902      	add	r1, sp, #8
 801559e:	6800      	ldr	r0, [r0, #0]
 80155a0:	9301      	str	r3, [sp, #4]
 80155a2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80155a4:	f000 f96a 	bl	801587c <_svfiprintf_r>
 80155a8:	9b02      	ldr	r3, [sp, #8]
 80155aa:	701c      	strb	r4, [r3, #0]
 80155ac:	b01d      	add	sp, #116	@ 0x74
 80155ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80155b2:	b003      	add	sp, #12
 80155b4:	4770      	bx	lr
 80155b6:	bf00      	nop
 80155b8:	20000070 	.word	0x20000070
 80155bc:	ffff0208 	.word	0xffff0208

080155c0 <_vsniprintf_r>:
 80155c0:	b530      	push	{r4, r5, lr}
 80155c2:	4614      	mov	r4, r2
 80155c4:	2c00      	cmp	r4, #0
 80155c6:	b09b      	sub	sp, #108	@ 0x6c
 80155c8:	4605      	mov	r5, r0
 80155ca:	461a      	mov	r2, r3
 80155cc:	da05      	bge.n	80155da <_vsniprintf_r+0x1a>
 80155ce:	238b      	movs	r3, #139	@ 0x8b
 80155d0:	6003      	str	r3, [r0, #0]
 80155d2:	f04f 30ff 	mov.w	r0, #4294967295
 80155d6:	b01b      	add	sp, #108	@ 0x6c
 80155d8:	bd30      	pop	{r4, r5, pc}
 80155da:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80155de:	f8ad 300c 	strh.w	r3, [sp, #12]
 80155e2:	f04f 0300 	mov.w	r3, #0
 80155e6:	9319      	str	r3, [sp, #100]	@ 0x64
 80155e8:	bf14      	ite	ne
 80155ea:	f104 33ff 	addne.w	r3, r4, #4294967295
 80155ee:	4623      	moveq	r3, r4
 80155f0:	9302      	str	r3, [sp, #8]
 80155f2:	9305      	str	r3, [sp, #20]
 80155f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80155f8:	9100      	str	r1, [sp, #0]
 80155fa:	9104      	str	r1, [sp, #16]
 80155fc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015600:	4669      	mov	r1, sp
 8015602:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8015604:	f000 f93a 	bl	801587c <_svfiprintf_r>
 8015608:	1c43      	adds	r3, r0, #1
 801560a:	bfbc      	itt	lt
 801560c:	238b      	movlt	r3, #139	@ 0x8b
 801560e:	602b      	strlt	r3, [r5, #0]
 8015610:	2c00      	cmp	r4, #0
 8015612:	d0e0      	beq.n	80155d6 <_vsniprintf_r+0x16>
 8015614:	9b00      	ldr	r3, [sp, #0]
 8015616:	2200      	movs	r2, #0
 8015618:	701a      	strb	r2, [r3, #0]
 801561a:	e7dc      	b.n	80155d6 <_vsniprintf_r+0x16>

0801561c <vsniprintf>:
 801561c:	b507      	push	{r0, r1, r2, lr}
 801561e:	9300      	str	r3, [sp, #0]
 8015620:	4613      	mov	r3, r2
 8015622:	460a      	mov	r2, r1
 8015624:	4601      	mov	r1, r0
 8015626:	4803      	ldr	r0, [pc, #12]	@ (8015634 <vsniprintf+0x18>)
 8015628:	6800      	ldr	r0, [r0, #0]
 801562a:	f7ff ffc9 	bl	80155c0 <_vsniprintf_r>
 801562e:	b003      	add	sp, #12
 8015630:	f85d fb04 	ldr.w	pc, [sp], #4
 8015634:	20000070 	.word	0x20000070

08015638 <memset>:
 8015638:	4402      	add	r2, r0
 801563a:	4603      	mov	r3, r0
 801563c:	4293      	cmp	r3, r2
 801563e:	d100      	bne.n	8015642 <memset+0xa>
 8015640:	4770      	bx	lr
 8015642:	f803 1b01 	strb.w	r1, [r3], #1
 8015646:	e7f9      	b.n	801563c <memset+0x4>

08015648 <strncpy>:
 8015648:	b510      	push	{r4, lr}
 801564a:	3901      	subs	r1, #1
 801564c:	4603      	mov	r3, r0
 801564e:	b132      	cbz	r2, 801565e <strncpy+0x16>
 8015650:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015654:	f803 4b01 	strb.w	r4, [r3], #1
 8015658:	3a01      	subs	r2, #1
 801565a:	2c00      	cmp	r4, #0
 801565c:	d1f7      	bne.n	801564e <strncpy+0x6>
 801565e:	441a      	add	r2, r3
 8015660:	2100      	movs	r1, #0
 8015662:	4293      	cmp	r3, r2
 8015664:	d100      	bne.n	8015668 <strncpy+0x20>
 8015666:	bd10      	pop	{r4, pc}
 8015668:	f803 1b01 	strb.w	r1, [r3], #1
 801566c:	e7f9      	b.n	8015662 <strncpy+0x1a>

0801566e <strstr>:
 801566e:	780a      	ldrb	r2, [r1, #0]
 8015670:	b570      	push	{r4, r5, r6, lr}
 8015672:	b96a      	cbnz	r2, 8015690 <strstr+0x22>
 8015674:	bd70      	pop	{r4, r5, r6, pc}
 8015676:	429a      	cmp	r2, r3
 8015678:	d109      	bne.n	801568e <strstr+0x20>
 801567a:	460c      	mov	r4, r1
 801567c:	4605      	mov	r5, r0
 801567e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8015682:	2b00      	cmp	r3, #0
 8015684:	d0f6      	beq.n	8015674 <strstr+0x6>
 8015686:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801568a:	429e      	cmp	r6, r3
 801568c:	d0f7      	beq.n	801567e <strstr+0x10>
 801568e:	3001      	adds	r0, #1
 8015690:	7803      	ldrb	r3, [r0, #0]
 8015692:	2b00      	cmp	r3, #0
 8015694:	d1ef      	bne.n	8015676 <strstr+0x8>
 8015696:	4618      	mov	r0, r3
 8015698:	e7ec      	b.n	8015674 <strstr+0x6>
	...

0801569c <_sbrk_r>:
 801569c:	b538      	push	{r3, r4, r5, lr}
 801569e:	4d06      	ldr	r5, [pc, #24]	@ (80156b8 <_sbrk_r+0x1c>)
 80156a0:	2300      	movs	r3, #0
 80156a2:	4604      	mov	r4, r0
 80156a4:	4608      	mov	r0, r1
 80156a6:	602b      	str	r3, [r5, #0]
 80156a8:	f7ef f96a 	bl	8004980 <_sbrk>
 80156ac:	1c43      	adds	r3, r0, #1
 80156ae:	d102      	bne.n	80156b6 <_sbrk_r+0x1a>
 80156b0:	682b      	ldr	r3, [r5, #0]
 80156b2:	b103      	cbz	r3, 80156b6 <_sbrk_r+0x1a>
 80156b4:	6023      	str	r3, [r4, #0]
 80156b6:	bd38      	pop	{r3, r4, r5, pc}
 80156b8:	20011e58 	.word	0x20011e58

080156bc <__errno>:
 80156bc:	4b01      	ldr	r3, [pc, #4]	@ (80156c4 <__errno+0x8>)
 80156be:	6818      	ldr	r0, [r3, #0]
 80156c0:	4770      	bx	lr
 80156c2:	bf00      	nop
 80156c4:	20000070 	.word	0x20000070

080156c8 <__libc_init_array>:
 80156c8:	b570      	push	{r4, r5, r6, lr}
 80156ca:	4d0d      	ldr	r5, [pc, #52]	@ (8015700 <__libc_init_array+0x38>)
 80156cc:	4c0d      	ldr	r4, [pc, #52]	@ (8015704 <__libc_init_array+0x3c>)
 80156ce:	1b64      	subs	r4, r4, r5
 80156d0:	10a4      	asrs	r4, r4, #2
 80156d2:	2600      	movs	r6, #0
 80156d4:	42a6      	cmp	r6, r4
 80156d6:	d109      	bne.n	80156ec <__libc_init_array+0x24>
 80156d8:	4d0b      	ldr	r5, [pc, #44]	@ (8015708 <__libc_init_array+0x40>)
 80156da:	4c0c      	ldr	r4, [pc, #48]	@ (801570c <__libc_init_array+0x44>)
 80156dc:	f000 fba6 	bl	8015e2c <_init>
 80156e0:	1b64      	subs	r4, r4, r5
 80156e2:	10a4      	asrs	r4, r4, #2
 80156e4:	2600      	movs	r6, #0
 80156e6:	42a6      	cmp	r6, r4
 80156e8:	d105      	bne.n	80156f6 <__libc_init_array+0x2e>
 80156ea:	bd70      	pop	{r4, r5, r6, pc}
 80156ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80156f0:	4798      	blx	r3
 80156f2:	3601      	adds	r6, #1
 80156f4:	e7ee      	b.n	80156d4 <__libc_init_array+0xc>
 80156f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80156fa:	4798      	blx	r3
 80156fc:	3601      	adds	r6, #1
 80156fe:	e7f2      	b.n	80156e6 <__libc_init_array+0x1e>
 8015700:	08019dfc 	.word	0x08019dfc
 8015704:	08019dfc 	.word	0x08019dfc
 8015708:	08019dfc 	.word	0x08019dfc
 801570c:	08019e00 	.word	0x08019e00

08015710 <__retarget_lock_acquire_recursive>:
 8015710:	4770      	bx	lr

08015712 <__retarget_lock_release_recursive>:
 8015712:	4770      	bx	lr

08015714 <memcpy>:
 8015714:	440a      	add	r2, r1
 8015716:	4291      	cmp	r1, r2
 8015718:	f100 33ff 	add.w	r3, r0, #4294967295
 801571c:	d100      	bne.n	8015720 <memcpy+0xc>
 801571e:	4770      	bx	lr
 8015720:	b510      	push	{r4, lr}
 8015722:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015726:	f803 4f01 	strb.w	r4, [r3, #1]!
 801572a:	4291      	cmp	r1, r2
 801572c:	d1f9      	bne.n	8015722 <memcpy+0xe>
 801572e:	bd10      	pop	{r4, pc}

08015730 <_free_r>:
 8015730:	b538      	push	{r3, r4, r5, lr}
 8015732:	4605      	mov	r5, r0
 8015734:	2900      	cmp	r1, #0
 8015736:	d041      	beq.n	80157bc <_free_r+0x8c>
 8015738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801573c:	1f0c      	subs	r4, r1, #4
 801573e:	2b00      	cmp	r3, #0
 8015740:	bfb8      	it	lt
 8015742:	18e4      	addlt	r4, r4, r3
 8015744:	f7ff fed8 	bl	80154f8 <__malloc_lock>
 8015748:	4a1d      	ldr	r2, [pc, #116]	@ (80157c0 <_free_r+0x90>)
 801574a:	6813      	ldr	r3, [r2, #0]
 801574c:	b933      	cbnz	r3, 801575c <_free_r+0x2c>
 801574e:	6063      	str	r3, [r4, #4]
 8015750:	6014      	str	r4, [r2, #0]
 8015752:	4628      	mov	r0, r5
 8015754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015758:	f7ff bed4 	b.w	8015504 <__malloc_unlock>
 801575c:	42a3      	cmp	r3, r4
 801575e:	d908      	bls.n	8015772 <_free_r+0x42>
 8015760:	6820      	ldr	r0, [r4, #0]
 8015762:	1821      	adds	r1, r4, r0
 8015764:	428b      	cmp	r3, r1
 8015766:	bf01      	itttt	eq
 8015768:	6819      	ldreq	r1, [r3, #0]
 801576a:	685b      	ldreq	r3, [r3, #4]
 801576c:	1809      	addeq	r1, r1, r0
 801576e:	6021      	streq	r1, [r4, #0]
 8015770:	e7ed      	b.n	801574e <_free_r+0x1e>
 8015772:	461a      	mov	r2, r3
 8015774:	685b      	ldr	r3, [r3, #4]
 8015776:	b10b      	cbz	r3, 801577c <_free_r+0x4c>
 8015778:	42a3      	cmp	r3, r4
 801577a:	d9fa      	bls.n	8015772 <_free_r+0x42>
 801577c:	6811      	ldr	r1, [r2, #0]
 801577e:	1850      	adds	r0, r2, r1
 8015780:	42a0      	cmp	r0, r4
 8015782:	d10b      	bne.n	801579c <_free_r+0x6c>
 8015784:	6820      	ldr	r0, [r4, #0]
 8015786:	4401      	add	r1, r0
 8015788:	1850      	adds	r0, r2, r1
 801578a:	4283      	cmp	r3, r0
 801578c:	6011      	str	r1, [r2, #0]
 801578e:	d1e0      	bne.n	8015752 <_free_r+0x22>
 8015790:	6818      	ldr	r0, [r3, #0]
 8015792:	685b      	ldr	r3, [r3, #4]
 8015794:	6053      	str	r3, [r2, #4]
 8015796:	4408      	add	r0, r1
 8015798:	6010      	str	r0, [r2, #0]
 801579a:	e7da      	b.n	8015752 <_free_r+0x22>
 801579c:	d902      	bls.n	80157a4 <_free_r+0x74>
 801579e:	230c      	movs	r3, #12
 80157a0:	602b      	str	r3, [r5, #0]
 80157a2:	e7d6      	b.n	8015752 <_free_r+0x22>
 80157a4:	6820      	ldr	r0, [r4, #0]
 80157a6:	1821      	adds	r1, r4, r0
 80157a8:	428b      	cmp	r3, r1
 80157aa:	bf04      	itt	eq
 80157ac:	6819      	ldreq	r1, [r3, #0]
 80157ae:	685b      	ldreq	r3, [r3, #4]
 80157b0:	6063      	str	r3, [r4, #4]
 80157b2:	bf04      	itt	eq
 80157b4:	1809      	addeq	r1, r1, r0
 80157b6:	6021      	streq	r1, [r4, #0]
 80157b8:	6054      	str	r4, [r2, #4]
 80157ba:	e7ca      	b.n	8015752 <_free_r+0x22>
 80157bc:	bd38      	pop	{r3, r4, r5, pc}
 80157be:	bf00      	nop
 80157c0:	20011d1c 	.word	0x20011d1c

080157c4 <__ssputs_r>:
 80157c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80157c8:	688e      	ldr	r6, [r1, #8]
 80157ca:	461f      	mov	r7, r3
 80157cc:	42be      	cmp	r6, r7
 80157ce:	680b      	ldr	r3, [r1, #0]
 80157d0:	4682      	mov	sl, r0
 80157d2:	460c      	mov	r4, r1
 80157d4:	4690      	mov	r8, r2
 80157d6:	d82d      	bhi.n	8015834 <__ssputs_r+0x70>
 80157d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80157dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80157e0:	d026      	beq.n	8015830 <__ssputs_r+0x6c>
 80157e2:	6965      	ldr	r5, [r4, #20]
 80157e4:	6909      	ldr	r1, [r1, #16]
 80157e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80157ea:	eba3 0901 	sub.w	r9, r3, r1
 80157ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80157f2:	1c7b      	adds	r3, r7, #1
 80157f4:	444b      	add	r3, r9
 80157f6:	106d      	asrs	r5, r5, #1
 80157f8:	429d      	cmp	r5, r3
 80157fa:	bf38      	it	cc
 80157fc:	461d      	movcc	r5, r3
 80157fe:	0553      	lsls	r3, r2, #21
 8015800:	d527      	bpl.n	8015852 <__ssputs_r+0x8e>
 8015802:	4629      	mov	r1, r5
 8015804:	f7ff fdf8 	bl	80153f8 <_malloc_r>
 8015808:	4606      	mov	r6, r0
 801580a:	b360      	cbz	r0, 8015866 <__ssputs_r+0xa2>
 801580c:	6921      	ldr	r1, [r4, #16]
 801580e:	464a      	mov	r2, r9
 8015810:	f7ff ff80 	bl	8015714 <memcpy>
 8015814:	89a3      	ldrh	r3, [r4, #12]
 8015816:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801581a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801581e:	81a3      	strh	r3, [r4, #12]
 8015820:	6126      	str	r6, [r4, #16]
 8015822:	6165      	str	r5, [r4, #20]
 8015824:	444e      	add	r6, r9
 8015826:	eba5 0509 	sub.w	r5, r5, r9
 801582a:	6026      	str	r6, [r4, #0]
 801582c:	60a5      	str	r5, [r4, #8]
 801582e:	463e      	mov	r6, r7
 8015830:	42be      	cmp	r6, r7
 8015832:	d900      	bls.n	8015836 <__ssputs_r+0x72>
 8015834:	463e      	mov	r6, r7
 8015836:	6820      	ldr	r0, [r4, #0]
 8015838:	4632      	mov	r2, r6
 801583a:	4641      	mov	r1, r8
 801583c:	f000 faa6 	bl	8015d8c <memmove>
 8015840:	68a3      	ldr	r3, [r4, #8]
 8015842:	1b9b      	subs	r3, r3, r6
 8015844:	60a3      	str	r3, [r4, #8]
 8015846:	6823      	ldr	r3, [r4, #0]
 8015848:	4433      	add	r3, r6
 801584a:	6023      	str	r3, [r4, #0]
 801584c:	2000      	movs	r0, #0
 801584e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015852:	462a      	mov	r2, r5
 8015854:	f000 fab4 	bl	8015dc0 <_realloc_r>
 8015858:	4606      	mov	r6, r0
 801585a:	2800      	cmp	r0, #0
 801585c:	d1e0      	bne.n	8015820 <__ssputs_r+0x5c>
 801585e:	6921      	ldr	r1, [r4, #16]
 8015860:	4650      	mov	r0, sl
 8015862:	f7ff ff65 	bl	8015730 <_free_r>
 8015866:	230c      	movs	r3, #12
 8015868:	f8ca 3000 	str.w	r3, [sl]
 801586c:	89a3      	ldrh	r3, [r4, #12]
 801586e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015872:	81a3      	strh	r3, [r4, #12]
 8015874:	f04f 30ff 	mov.w	r0, #4294967295
 8015878:	e7e9      	b.n	801584e <__ssputs_r+0x8a>
	...

0801587c <_svfiprintf_r>:
 801587c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015880:	4698      	mov	r8, r3
 8015882:	898b      	ldrh	r3, [r1, #12]
 8015884:	061b      	lsls	r3, r3, #24
 8015886:	b09d      	sub	sp, #116	@ 0x74
 8015888:	4607      	mov	r7, r0
 801588a:	460d      	mov	r5, r1
 801588c:	4614      	mov	r4, r2
 801588e:	d510      	bpl.n	80158b2 <_svfiprintf_r+0x36>
 8015890:	690b      	ldr	r3, [r1, #16]
 8015892:	b973      	cbnz	r3, 80158b2 <_svfiprintf_r+0x36>
 8015894:	2140      	movs	r1, #64	@ 0x40
 8015896:	f7ff fdaf 	bl	80153f8 <_malloc_r>
 801589a:	6028      	str	r0, [r5, #0]
 801589c:	6128      	str	r0, [r5, #16]
 801589e:	b930      	cbnz	r0, 80158ae <_svfiprintf_r+0x32>
 80158a0:	230c      	movs	r3, #12
 80158a2:	603b      	str	r3, [r7, #0]
 80158a4:	f04f 30ff 	mov.w	r0, #4294967295
 80158a8:	b01d      	add	sp, #116	@ 0x74
 80158aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158ae:	2340      	movs	r3, #64	@ 0x40
 80158b0:	616b      	str	r3, [r5, #20]
 80158b2:	2300      	movs	r3, #0
 80158b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80158b6:	2320      	movs	r3, #32
 80158b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80158bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80158c0:	2330      	movs	r3, #48	@ 0x30
 80158c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015a60 <_svfiprintf_r+0x1e4>
 80158c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80158ca:	f04f 0901 	mov.w	r9, #1
 80158ce:	4623      	mov	r3, r4
 80158d0:	469a      	mov	sl, r3
 80158d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80158d6:	b10a      	cbz	r2, 80158dc <_svfiprintf_r+0x60>
 80158d8:	2a25      	cmp	r2, #37	@ 0x25
 80158da:	d1f9      	bne.n	80158d0 <_svfiprintf_r+0x54>
 80158dc:	ebba 0b04 	subs.w	fp, sl, r4
 80158e0:	d00b      	beq.n	80158fa <_svfiprintf_r+0x7e>
 80158e2:	465b      	mov	r3, fp
 80158e4:	4622      	mov	r2, r4
 80158e6:	4629      	mov	r1, r5
 80158e8:	4638      	mov	r0, r7
 80158ea:	f7ff ff6b 	bl	80157c4 <__ssputs_r>
 80158ee:	3001      	adds	r0, #1
 80158f0:	f000 80a7 	beq.w	8015a42 <_svfiprintf_r+0x1c6>
 80158f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80158f6:	445a      	add	r2, fp
 80158f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80158fa:	f89a 3000 	ldrb.w	r3, [sl]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	f000 809f 	beq.w	8015a42 <_svfiprintf_r+0x1c6>
 8015904:	2300      	movs	r3, #0
 8015906:	f04f 32ff 	mov.w	r2, #4294967295
 801590a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801590e:	f10a 0a01 	add.w	sl, sl, #1
 8015912:	9304      	str	r3, [sp, #16]
 8015914:	9307      	str	r3, [sp, #28]
 8015916:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801591a:	931a      	str	r3, [sp, #104]	@ 0x68
 801591c:	4654      	mov	r4, sl
 801591e:	2205      	movs	r2, #5
 8015920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015924:	484e      	ldr	r0, [pc, #312]	@ (8015a60 <_svfiprintf_r+0x1e4>)
 8015926:	f7ea fc8b 	bl	8000240 <memchr>
 801592a:	9a04      	ldr	r2, [sp, #16]
 801592c:	b9d8      	cbnz	r0, 8015966 <_svfiprintf_r+0xea>
 801592e:	06d0      	lsls	r0, r2, #27
 8015930:	bf44      	itt	mi
 8015932:	2320      	movmi	r3, #32
 8015934:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015938:	0711      	lsls	r1, r2, #28
 801593a:	bf44      	itt	mi
 801593c:	232b      	movmi	r3, #43	@ 0x2b
 801593e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015942:	f89a 3000 	ldrb.w	r3, [sl]
 8015946:	2b2a      	cmp	r3, #42	@ 0x2a
 8015948:	d015      	beq.n	8015976 <_svfiprintf_r+0xfa>
 801594a:	9a07      	ldr	r2, [sp, #28]
 801594c:	4654      	mov	r4, sl
 801594e:	2000      	movs	r0, #0
 8015950:	f04f 0c0a 	mov.w	ip, #10
 8015954:	4621      	mov	r1, r4
 8015956:	f811 3b01 	ldrb.w	r3, [r1], #1
 801595a:	3b30      	subs	r3, #48	@ 0x30
 801595c:	2b09      	cmp	r3, #9
 801595e:	d94b      	bls.n	80159f8 <_svfiprintf_r+0x17c>
 8015960:	b1b0      	cbz	r0, 8015990 <_svfiprintf_r+0x114>
 8015962:	9207      	str	r2, [sp, #28]
 8015964:	e014      	b.n	8015990 <_svfiprintf_r+0x114>
 8015966:	eba0 0308 	sub.w	r3, r0, r8
 801596a:	fa09 f303 	lsl.w	r3, r9, r3
 801596e:	4313      	orrs	r3, r2
 8015970:	9304      	str	r3, [sp, #16]
 8015972:	46a2      	mov	sl, r4
 8015974:	e7d2      	b.n	801591c <_svfiprintf_r+0xa0>
 8015976:	9b03      	ldr	r3, [sp, #12]
 8015978:	1d19      	adds	r1, r3, #4
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	9103      	str	r1, [sp, #12]
 801597e:	2b00      	cmp	r3, #0
 8015980:	bfbb      	ittet	lt
 8015982:	425b      	neglt	r3, r3
 8015984:	f042 0202 	orrlt.w	r2, r2, #2
 8015988:	9307      	strge	r3, [sp, #28]
 801598a:	9307      	strlt	r3, [sp, #28]
 801598c:	bfb8      	it	lt
 801598e:	9204      	strlt	r2, [sp, #16]
 8015990:	7823      	ldrb	r3, [r4, #0]
 8015992:	2b2e      	cmp	r3, #46	@ 0x2e
 8015994:	d10a      	bne.n	80159ac <_svfiprintf_r+0x130>
 8015996:	7863      	ldrb	r3, [r4, #1]
 8015998:	2b2a      	cmp	r3, #42	@ 0x2a
 801599a:	d132      	bne.n	8015a02 <_svfiprintf_r+0x186>
 801599c:	9b03      	ldr	r3, [sp, #12]
 801599e:	1d1a      	adds	r2, r3, #4
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	9203      	str	r2, [sp, #12]
 80159a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80159a8:	3402      	adds	r4, #2
 80159aa:	9305      	str	r3, [sp, #20]
 80159ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015a70 <_svfiprintf_r+0x1f4>
 80159b0:	7821      	ldrb	r1, [r4, #0]
 80159b2:	2203      	movs	r2, #3
 80159b4:	4650      	mov	r0, sl
 80159b6:	f7ea fc43 	bl	8000240 <memchr>
 80159ba:	b138      	cbz	r0, 80159cc <_svfiprintf_r+0x150>
 80159bc:	9b04      	ldr	r3, [sp, #16]
 80159be:	eba0 000a 	sub.w	r0, r0, sl
 80159c2:	2240      	movs	r2, #64	@ 0x40
 80159c4:	4082      	lsls	r2, r0
 80159c6:	4313      	orrs	r3, r2
 80159c8:	3401      	adds	r4, #1
 80159ca:	9304      	str	r3, [sp, #16]
 80159cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80159d0:	4824      	ldr	r0, [pc, #144]	@ (8015a64 <_svfiprintf_r+0x1e8>)
 80159d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80159d6:	2206      	movs	r2, #6
 80159d8:	f7ea fc32 	bl	8000240 <memchr>
 80159dc:	2800      	cmp	r0, #0
 80159de:	d036      	beq.n	8015a4e <_svfiprintf_r+0x1d2>
 80159e0:	4b21      	ldr	r3, [pc, #132]	@ (8015a68 <_svfiprintf_r+0x1ec>)
 80159e2:	bb1b      	cbnz	r3, 8015a2c <_svfiprintf_r+0x1b0>
 80159e4:	9b03      	ldr	r3, [sp, #12]
 80159e6:	3307      	adds	r3, #7
 80159e8:	f023 0307 	bic.w	r3, r3, #7
 80159ec:	3308      	adds	r3, #8
 80159ee:	9303      	str	r3, [sp, #12]
 80159f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80159f2:	4433      	add	r3, r6
 80159f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80159f6:	e76a      	b.n	80158ce <_svfiprintf_r+0x52>
 80159f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80159fc:	460c      	mov	r4, r1
 80159fe:	2001      	movs	r0, #1
 8015a00:	e7a8      	b.n	8015954 <_svfiprintf_r+0xd8>
 8015a02:	2300      	movs	r3, #0
 8015a04:	3401      	adds	r4, #1
 8015a06:	9305      	str	r3, [sp, #20]
 8015a08:	4619      	mov	r1, r3
 8015a0a:	f04f 0c0a 	mov.w	ip, #10
 8015a0e:	4620      	mov	r0, r4
 8015a10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015a14:	3a30      	subs	r2, #48	@ 0x30
 8015a16:	2a09      	cmp	r2, #9
 8015a18:	d903      	bls.n	8015a22 <_svfiprintf_r+0x1a6>
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d0c6      	beq.n	80159ac <_svfiprintf_r+0x130>
 8015a1e:	9105      	str	r1, [sp, #20]
 8015a20:	e7c4      	b.n	80159ac <_svfiprintf_r+0x130>
 8015a22:	fb0c 2101 	mla	r1, ip, r1, r2
 8015a26:	4604      	mov	r4, r0
 8015a28:	2301      	movs	r3, #1
 8015a2a:	e7f0      	b.n	8015a0e <_svfiprintf_r+0x192>
 8015a2c:	ab03      	add	r3, sp, #12
 8015a2e:	9300      	str	r3, [sp, #0]
 8015a30:	462a      	mov	r2, r5
 8015a32:	4b0e      	ldr	r3, [pc, #56]	@ (8015a6c <_svfiprintf_r+0x1f0>)
 8015a34:	a904      	add	r1, sp, #16
 8015a36:	4638      	mov	r0, r7
 8015a38:	f3af 8000 	nop.w
 8015a3c:	1c42      	adds	r2, r0, #1
 8015a3e:	4606      	mov	r6, r0
 8015a40:	d1d6      	bne.n	80159f0 <_svfiprintf_r+0x174>
 8015a42:	89ab      	ldrh	r3, [r5, #12]
 8015a44:	065b      	lsls	r3, r3, #25
 8015a46:	f53f af2d 	bmi.w	80158a4 <_svfiprintf_r+0x28>
 8015a4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015a4c:	e72c      	b.n	80158a8 <_svfiprintf_r+0x2c>
 8015a4e:	ab03      	add	r3, sp, #12
 8015a50:	9300      	str	r3, [sp, #0]
 8015a52:	462a      	mov	r2, r5
 8015a54:	4b05      	ldr	r3, [pc, #20]	@ (8015a6c <_svfiprintf_r+0x1f0>)
 8015a56:	a904      	add	r1, sp, #16
 8015a58:	4638      	mov	r0, r7
 8015a5a:	f000 f879 	bl	8015b50 <_printf_i>
 8015a5e:	e7ed      	b.n	8015a3c <_svfiprintf_r+0x1c0>
 8015a60:	08019dc0 	.word	0x08019dc0
 8015a64:	08019dca 	.word	0x08019dca
 8015a68:	00000000 	.word	0x00000000
 8015a6c:	080157c5 	.word	0x080157c5
 8015a70:	08019dc6 	.word	0x08019dc6

08015a74 <_printf_common>:
 8015a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a78:	4616      	mov	r6, r2
 8015a7a:	4698      	mov	r8, r3
 8015a7c:	688a      	ldr	r2, [r1, #8]
 8015a7e:	690b      	ldr	r3, [r1, #16]
 8015a80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015a84:	4293      	cmp	r3, r2
 8015a86:	bfb8      	it	lt
 8015a88:	4613      	movlt	r3, r2
 8015a8a:	6033      	str	r3, [r6, #0]
 8015a8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015a90:	4607      	mov	r7, r0
 8015a92:	460c      	mov	r4, r1
 8015a94:	b10a      	cbz	r2, 8015a9a <_printf_common+0x26>
 8015a96:	3301      	adds	r3, #1
 8015a98:	6033      	str	r3, [r6, #0]
 8015a9a:	6823      	ldr	r3, [r4, #0]
 8015a9c:	0699      	lsls	r1, r3, #26
 8015a9e:	bf42      	ittt	mi
 8015aa0:	6833      	ldrmi	r3, [r6, #0]
 8015aa2:	3302      	addmi	r3, #2
 8015aa4:	6033      	strmi	r3, [r6, #0]
 8015aa6:	6825      	ldr	r5, [r4, #0]
 8015aa8:	f015 0506 	ands.w	r5, r5, #6
 8015aac:	d106      	bne.n	8015abc <_printf_common+0x48>
 8015aae:	f104 0a19 	add.w	sl, r4, #25
 8015ab2:	68e3      	ldr	r3, [r4, #12]
 8015ab4:	6832      	ldr	r2, [r6, #0]
 8015ab6:	1a9b      	subs	r3, r3, r2
 8015ab8:	42ab      	cmp	r3, r5
 8015aba:	dc26      	bgt.n	8015b0a <_printf_common+0x96>
 8015abc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015ac0:	6822      	ldr	r2, [r4, #0]
 8015ac2:	3b00      	subs	r3, #0
 8015ac4:	bf18      	it	ne
 8015ac6:	2301      	movne	r3, #1
 8015ac8:	0692      	lsls	r2, r2, #26
 8015aca:	d42b      	bmi.n	8015b24 <_printf_common+0xb0>
 8015acc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015ad0:	4641      	mov	r1, r8
 8015ad2:	4638      	mov	r0, r7
 8015ad4:	47c8      	blx	r9
 8015ad6:	3001      	adds	r0, #1
 8015ad8:	d01e      	beq.n	8015b18 <_printf_common+0xa4>
 8015ada:	6823      	ldr	r3, [r4, #0]
 8015adc:	6922      	ldr	r2, [r4, #16]
 8015ade:	f003 0306 	and.w	r3, r3, #6
 8015ae2:	2b04      	cmp	r3, #4
 8015ae4:	bf02      	ittt	eq
 8015ae6:	68e5      	ldreq	r5, [r4, #12]
 8015ae8:	6833      	ldreq	r3, [r6, #0]
 8015aea:	1aed      	subeq	r5, r5, r3
 8015aec:	68a3      	ldr	r3, [r4, #8]
 8015aee:	bf0c      	ite	eq
 8015af0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015af4:	2500      	movne	r5, #0
 8015af6:	4293      	cmp	r3, r2
 8015af8:	bfc4      	itt	gt
 8015afa:	1a9b      	subgt	r3, r3, r2
 8015afc:	18ed      	addgt	r5, r5, r3
 8015afe:	2600      	movs	r6, #0
 8015b00:	341a      	adds	r4, #26
 8015b02:	42b5      	cmp	r5, r6
 8015b04:	d11a      	bne.n	8015b3c <_printf_common+0xc8>
 8015b06:	2000      	movs	r0, #0
 8015b08:	e008      	b.n	8015b1c <_printf_common+0xa8>
 8015b0a:	2301      	movs	r3, #1
 8015b0c:	4652      	mov	r2, sl
 8015b0e:	4641      	mov	r1, r8
 8015b10:	4638      	mov	r0, r7
 8015b12:	47c8      	blx	r9
 8015b14:	3001      	adds	r0, #1
 8015b16:	d103      	bne.n	8015b20 <_printf_common+0xac>
 8015b18:	f04f 30ff 	mov.w	r0, #4294967295
 8015b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b20:	3501      	adds	r5, #1
 8015b22:	e7c6      	b.n	8015ab2 <_printf_common+0x3e>
 8015b24:	18e1      	adds	r1, r4, r3
 8015b26:	1c5a      	adds	r2, r3, #1
 8015b28:	2030      	movs	r0, #48	@ 0x30
 8015b2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015b2e:	4422      	add	r2, r4
 8015b30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015b34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015b38:	3302      	adds	r3, #2
 8015b3a:	e7c7      	b.n	8015acc <_printf_common+0x58>
 8015b3c:	2301      	movs	r3, #1
 8015b3e:	4622      	mov	r2, r4
 8015b40:	4641      	mov	r1, r8
 8015b42:	4638      	mov	r0, r7
 8015b44:	47c8      	blx	r9
 8015b46:	3001      	adds	r0, #1
 8015b48:	d0e6      	beq.n	8015b18 <_printf_common+0xa4>
 8015b4a:	3601      	adds	r6, #1
 8015b4c:	e7d9      	b.n	8015b02 <_printf_common+0x8e>
	...

08015b50 <_printf_i>:
 8015b50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015b54:	7e0f      	ldrb	r7, [r1, #24]
 8015b56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015b58:	2f78      	cmp	r7, #120	@ 0x78
 8015b5a:	4691      	mov	r9, r2
 8015b5c:	4680      	mov	r8, r0
 8015b5e:	460c      	mov	r4, r1
 8015b60:	469a      	mov	sl, r3
 8015b62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015b66:	d807      	bhi.n	8015b78 <_printf_i+0x28>
 8015b68:	2f62      	cmp	r7, #98	@ 0x62
 8015b6a:	d80a      	bhi.n	8015b82 <_printf_i+0x32>
 8015b6c:	2f00      	cmp	r7, #0
 8015b6e:	f000 80d1 	beq.w	8015d14 <_printf_i+0x1c4>
 8015b72:	2f58      	cmp	r7, #88	@ 0x58
 8015b74:	f000 80b8 	beq.w	8015ce8 <_printf_i+0x198>
 8015b78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015b7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015b80:	e03a      	b.n	8015bf8 <_printf_i+0xa8>
 8015b82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015b86:	2b15      	cmp	r3, #21
 8015b88:	d8f6      	bhi.n	8015b78 <_printf_i+0x28>
 8015b8a:	a101      	add	r1, pc, #4	@ (adr r1, 8015b90 <_printf_i+0x40>)
 8015b8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015b90:	08015be9 	.word	0x08015be9
 8015b94:	08015bfd 	.word	0x08015bfd
 8015b98:	08015b79 	.word	0x08015b79
 8015b9c:	08015b79 	.word	0x08015b79
 8015ba0:	08015b79 	.word	0x08015b79
 8015ba4:	08015b79 	.word	0x08015b79
 8015ba8:	08015bfd 	.word	0x08015bfd
 8015bac:	08015b79 	.word	0x08015b79
 8015bb0:	08015b79 	.word	0x08015b79
 8015bb4:	08015b79 	.word	0x08015b79
 8015bb8:	08015b79 	.word	0x08015b79
 8015bbc:	08015cfb 	.word	0x08015cfb
 8015bc0:	08015c27 	.word	0x08015c27
 8015bc4:	08015cb5 	.word	0x08015cb5
 8015bc8:	08015b79 	.word	0x08015b79
 8015bcc:	08015b79 	.word	0x08015b79
 8015bd0:	08015d1d 	.word	0x08015d1d
 8015bd4:	08015b79 	.word	0x08015b79
 8015bd8:	08015c27 	.word	0x08015c27
 8015bdc:	08015b79 	.word	0x08015b79
 8015be0:	08015b79 	.word	0x08015b79
 8015be4:	08015cbd 	.word	0x08015cbd
 8015be8:	6833      	ldr	r3, [r6, #0]
 8015bea:	1d1a      	adds	r2, r3, #4
 8015bec:	681b      	ldr	r3, [r3, #0]
 8015bee:	6032      	str	r2, [r6, #0]
 8015bf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015bf4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015bf8:	2301      	movs	r3, #1
 8015bfa:	e09c      	b.n	8015d36 <_printf_i+0x1e6>
 8015bfc:	6833      	ldr	r3, [r6, #0]
 8015bfe:	6820      	ldr	r0, [r4, #0]
 8015c00:	1d19      	adds	r1, r3, #4
 8015c02:	6031      	str	r1, [r6, #0]
 8015c04:	0606      	lsls	r6, r0, #24
 8015c06:	d501      	bpl.n	8015c0c <_printf_i+0xbc>
 8015c08:	681d      	ldr	r5, [r3, #0]
 8015c0a:	e003      	b.n	8015c14 <_printf_i+0xc4>
 8015c0c:	0645      	lsls	r5, r0, #25
 8015c0e:	d5fb      	bpl.n	8015c08 <_printf_i+0xb8>
 8015c10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015c14:	2d00      	cmp	r5, #0
 8015c16:	da03      	bge.n	8015c20 <_printf_i+0xd0>
 8015c18:	232d      	movs	r3, #45	@ 0x2d
 8015c1a:	426d      	negs	r5, r5
 8015c1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015c20:	4858      	ldr	r0, [pc, #352]	@ (8015d84 <_printf_i+0x234>)
 8015c22:	230a      	movs	r3, #10
 8015c24:	e011      	b.n	8015c4a <_printf_i+0xfa>
 8015c26:	6821      	ldr	r1, [r4, #0]
 8015c28:	6833      	ldr	r3, [r6, #0]
 8015c2a:	0608      	lsls	r0, r1, #24
 8015c2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8015c30:	d402      	bmi.n	8015c38 <_printf_i+0xe8>
 8015c32:	0649      	lsls	r1, r1, #25
 8015c34:	bf48      	it	mi
 8015c36:	b2ad      	uxthmi	r5, r5
 8015c38:	2f6f      	cmp	r7, #111	@ 0x6f
 8015c3a:	4852      	ldr	r0, [pc, #328]	@ (8015d84 <_printf_i+0x234>)
 8015c3c:	6033      	str	r3, [r6, #0]
 8015c3e:	bf14      	ite	ne
 8015c40:	230a      	movne	r3, #10
 8015c42:	2308      	moveq	r3, #8
 8015c44:	2100      	movs	r1, #0
 8015c46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015c4a:	6866      	ldr	r6, [r4, #4]
 8015c4c:	60a6      	str	r6, [r4, #8]
 8015c4e:	2e00      	cmp	r6, #0
 8015c50:	db05      	blt.n	8015c5e <_printf_i+0x10e>
 8015c52:	6821      	ldr	r1, [r4, #0]
 8015c54:	432e      	orrs	r6, r5
 8015c56:	f021 0104 	bic.w	r1, r1, #4
 8015c5a:	6021      	str	r1, [r4, #0]
 8015c5c:	d04b      	beq.n	8015cf6 <_printf_i+0x1a6>
 8015c5e:	4616      	mov	r6, r2
 8015c60:	fbb5 f1f3 	udiv	r1, r5, r3
 8015c64:	fb03 5711 	mls	r7, r3, r1, r5
 8015c68:	5dc7      	ldrb	r7, [r0, r7]
 8015c6a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015c6e:	462f      	mov	r7, r5
 8015c70:	42bb      	cmp	r3, r7
 8015c72:	460d      	mov	r5, r1
 8015c74:	d9f4      	bls.n	8015c60 <_printf_i+0x110>
 8015c76:	2b08      	cmp	r3, #8
 8015c78:	d10b      	bne.n	8015c92 <_printf_i+0x142>
 8015c7a:	6823      	ldr	r3, [r4, #0]
 8015c7c:	07df      	lsls	r7, r3, #31
 8015c7e:	d508      	bpl.n	8015c92 <_printf_i+0x142>
 8015c80:	6923      	ldr	r3, [r4, #16]
 8015c82:	6861      	ldr	r1, [r4, #4]
 8015c84:	4299      	cmp	r1, r3
 8015c86:	bfde      	ittt	le
 8015c88:	2330      	movle	r3, #48	@ 0x30
 8015c8a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015c8e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015c92:	1b92      	subs	r2, r2, r6
 8015c94:	6122      	str	r2, [r4, #16]
 8015c96:	f8cd a000 	str.w	sl, [sp]
 8015c9a:	464b      	mov	r3, r9
 8015c9c:	aa03      	add	r2, sp, #12
 8015c9e:	4621      	mov	r1, r4
 8015ca0:	4640      	mov	r0, r8
 8015ca2:	f7ff fee7 	bl	8015a74 <_printf_common>
 8015ca6:	3001      	adds	r0, #1
 8015ca8:	d14a      	bne.n	8015d40 <_printf_i+0x1f0>
 8015caa:	f04f 30ff 	mov.w	r0, #4294967295
 8015cae:	b004      	add	sp, #16
 8015cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015cb4:	6823      	ldr	r3, [r4, #0]
 8015cb6:	f043 0320 	orr.w	r3, r3, #32
 8015cba:	6023      	str	r3, [r4, #0]
 8015cbc:	4832      	ldr	r0, [pc, #200]	@ (8015d88 <_printf_i+0x238>)
 8015cbe:	2778      	movs	r7, #120	@ 0x78
 8015cc0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015cc4:	6823      	ldr	r3, [r4, #0]
 8015cc6:	6831      	ldr	r1, [r6, #0]
 8015cc8:	061f      	lsls	r7, r3, #24
 8015cca:	f851 5b04 	ldr.w	r5, [r1], #4
 8015cce:	d402      	bmi.n	8015cd6 <_printf_i+0x186>
 8015cd0:	065f      	lsls	r7, r3, #25
 8015cd2:	bf48      	it	mi
 8015cd4:	b2ad      	uxthmi	r5, r5
 8015cd6:	6031      	str	r1, [r6, #0]
 8015cd8:	07d9      	lsls	r1, r3, #31
 8015cda:	bf44      	itt	mi
 8015cdc:	f043 0320 	orrmi.w	r3, r3, #32
 8015ce0:	6023      	strmi	r3, [r4, #0]
 8015ce2:	b11d      	cbz	r5, 8015cec <_printf_i+0x19c>
 8015ce4:	2310      	movs	r3, #16
 8015ce6:	e7ad      	b.n	8015c44 <_printf_i+0xf4>
 8015ce8:	4826      	ldr	r0, [pc, #152]	@ (8015d84 <_printf_i+0x234>)
 8015cea:	e7e9      	b.n	8015cc0 <_printf_i+0x170>
 8015cec:	6823      	ldr	r3, [r4, #0]
 8015cee:	f023 0320 	bic.w	r3, r3, #32
 8015cf2:	6023      	str	r3, [r4, #0]
 8015cf4:	e7f6      	b.n	8015ce4 <_printf_i+0x194>
 8015cf6:	4616      	mov	r6, r2
 8015cf8:	e7bd      	b.n	8015c76 <_printf_i+0x126>
 8015cfa:	6833      	ldr	r3, [r6, #0]
 8015cfc:	6825      	ldr	r5, [r4, #0]
 8015cfe:	6961      	ldr	r1, [r4, #20]
 8015d00:	1d18      	adds	r0, r3, #4
 8015d02:	6030      	str	r0, [r6, #0]
 8015d04:	062e      	lsls	r6, r5, #24
 8015d06:	681b      	ldr	r3, [r3, #0]
 8015d08:	d501      	bpl.n	8015d0e <_printf_i+0x1be>
 8015d0a:	6019      	str	r1, [r3, #0]
 8015d0c:	e002      	b.n	8015d14 <_printf_i+0x1c4>
 8015d0e:	0668      	lsls	r0, r5, #25
 8015d10:	d5fb      	bpl.n	8015d0a <_printf_i+0x1ba>
 8015d12:	8019      	strh	r1, [r3, #0]
 8015d14:	2300      	movs	r3, #0
 8015d16:	6123      	str	r3, [r4, #16]
 8015d18:	4616      	mov	r6, r2
 8015d1a:	e7bc      	b.n	8015c96 <_printf_i+0x146>
 8015d1c:	6833      	ldr	r3, [r6, #0]
 8015d1e:	1d1a      	adds	r2, r3, #4
 8015d20:	6032      	str	r2, [r6, #0]
 8015d22:	681e      	ldr	r6, [r3, #0]
 8015d24:	6862      	ldr	r2, [r4, #4]
 8015d26:	2100      	movs	r1, #0
 8015d28:	4630      	mov	r0, r6
 8015d2a:	f7ea fa89 	bl	8000240 <memchr>
 8015d2e:	b108      	cbz	r0, 8015d34 <_printf_i+0x1e4>
 8015d30:	1b80      	subs	r0, r0, r6
 8015d32:	6060      	str	r0, [r4, #4]
 8015d34:	6863      	ldr	r3, [r4, #4]
 8015d36:	6123      	str	r3, [r4, #16]
 8015d38:	2300      	movs	r3, #0
 8015d3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015d3e:	e7aa      	b.n	8015c96 <_printf_i+0x146>
 8015d40:	6923      	ldr	r3, [r4, #16]
 8015d42:	4632      	mov	r2, r6
 8015d44:	4649      	mov	r1, r9
 8015d46:	4640      	mov	r0, r8
 8015d48:	47d0      	blx	sl
 8015d4a:	3001      	adds	r0, #1
 8015d4c:	d0ad      	beq.n	8015caa <_printf_i+0x15a>
 8015d4e:	6823      	ldr	r3, [r4, #0]
 8015d50:	079b      	lsls	r3, r3, #30
 8015d52:	d413      	bmi.n	8015d7c <_printf_i+0x22c>
 8015d54:	68e0      	ldr	r0, [r4, #12]
 8015d56:	9b03      	ldr	r3, [sp, #12]
 8015d58:	4298      	cmp	r0, r3
 8015d5a:	bfb8      	it	lt
 8015d5c:	4618      	movlt	r0, r3
 8015d5e:	e7a6      	b.n	8015cae <_printf_i+0x15e>
 8015d60:	2301      	movs	r3, #1
 8015d62:	4632      	mov	r2, r6
 8015d64:	4649      	mov	r1, r9
 8015d66:	4640      	mov	r0, r8
 8015d68:	47d0      	blx	sl
 8015d6a:	3001      	adds	r0, #1
 8015d6c:	d09d      	beq.n	8015caa <_printf_i+0x15a>
 8015d6e:	3501      	adds	r5, #1
 8015d70:	68e3      	ldr	r3, [r4, #12]
 8015d72:	9903      	ldr	r1, [sp, #12]
 8015d74:	1a5b      	subs	r3, r3, r1
 8015d76:	42ab      	cmp	r3, r5
 8015d78:	dcf2      	bgt.n	8015d60 <_printf_i+0x210>
 8015d7a:	e7eb      	b.n	8015d54 <_printf_i+0x204>
 8015d7c:	2500      	movs	r5, #0
 8015d7e:	f104 0619 	add.w	r6, r4, #25
 8015d82:	e7f5      	b.n	8015d70 <_printf_i+0x220>
 8015d84:	08019dd1 	.word	0x08019dd1
 8015d88:	08019de2 	.word	0x08019de2

08015d8c <memmove>:
 8015d8c:	4288      	cmp	r0, r1
 8015d8e:	b510      	push	{r4, lr}
 8015d90:	eb01 0402 	add.w	r4, r1, r2
 8015d94:	d902      	bls.n	8015d9c <memmove+0x10>
 8015d96:	4284      	cmp	r4, r0
 8015d98:	4623      	mov	r3, r4
 8015d9a:	d807      	bhi.n	8015dac <memmove+0x20>
 8015d9c:	1e43      	subs	r3, r0, #1
 8015d9e:	42a1      	cmp	r1, r4
 8015da0:	d008      	beq.n	8015db4 <memmove+0x28>
 8015da2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015da6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015daa:	e7f8      	b.n	8015d9e <memmove+0x12>
 8015dac:	4402      	add	r2, r0
 8015dae:	4601      	mov	r1, r0
 8015db0:	428a      	cmp	r2, r1
 8015db2:	d100      	bne.n	8015db6 <memmove+0x2a>
 8015db4:	bd10      	pop	{r4, pc}
 8015db6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015dba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015dbe:	e7f7      	b.n	8015db0 <memmove+0x24>

08015dc0 <_realloc_r>:
 8015dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dc4:	4607      	mov	r7, r0
 8015dc6:	4614      	mov	r4, r2
 8015dc8:	460d      	mov	r5, r1
 8015dca:	b921      	cbnz	r1, 8015dd6 <_realloc_r+0x16>
 8015dcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015dd0:	4611      	mov	r1, r2
 8015dd2:	f7ff bb11 	b.w	80153f8 <_malloc_r>
 8015dd6:	b92a      	cbnz	r2, 8015de4 <_realloc_r+0x24>
 8015dd8:	f7ff fcaa 	bl	8015730 <_free_r>
 8015ddc:	4625      	mov	r5, r4
 8015dde:	4628      	mov	r0, r5
 8015de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015de4:	f000 f81a 	bl	8015e1c <_malloc_usable_size_r>
 8015de8:	4284      	cmp	r4, r0
 8015dea:	4606      	mov	r6, r0
 8015dec:	d802      	bhi.n	8015df4 <_realloc_r+0x34>
 8015dee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015df2:	d8f4      	bhi.n	8015dde <_realloc_r+0x1e>
 8015df4:	4621      	mov	r1, r4
 8015df6:	4638      	mov	r0, r7
 8015df8:	f7ff fafe 	bl	80153f8 <_malloc_r>
 8015dfc:	4680      	mov	r8, r0
 8015dfe:	b908      	cbnz	r0, 8015e04 <_realloc_r+0x44>
 8015e00:	4645      	mov	r5, r8
 8015e02:	e7ec      	b.n	8015dde <_realloc_r+0x1e>
 8015e04:	42b4      	cmp	r4, r6
 8015e06:	4622      	mov	r2, r4
 8015e08:	4629      	mov	r1, r5
 8015e0a:	bf28      	it	cs
 8015e0c:	4632      	movcs	r2, r6
 8015e0e:	f7ff fc81 	bl	8015714 <memcpy>
 8015e12:	4629      	mov	r1, r5
 8015e14:	4638      	mov	r0, r7
 8015e16:	f7ff fc8b 	bl	8015730 <_free_r>
 8015e1a:	e7f1      	b.n	8015e00 <_realloc_r+0x40>

08015e1c <_malloc_usable_size_r>:
 8015e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015e20:	1f18      	subs	r0, r3, #4
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	bfbc      	itt	lt
 8015e26:	580b      	ldrlt	r3, [r1, r0]
 8015e28:	18c0      	addlt	r0, r0, r3
 8015e2a:	4770      	bx	lr

08015e2c <_init>:
 8015e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e2e:	bf00      	nop
 8015e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e32:	bc08      	pop	{r3}
 8015e34:	469e      	mov	lr, r3
 8015e36:	4770      	bx	lr

08015e38 <_fini>:
 8015e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e3a:	bf00      	nop
 8015e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e3e:	bc08      	pop	{r3}
 8015e40:	469e      	mov	lr, r3
 8015e42:	4770      	bx	lr
